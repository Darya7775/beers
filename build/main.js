/*! For license information please see main.js.LICENSE.txt */
!function(){var e,t,n={679:function(e,t,n){"use strict";var r=n(296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=s(n);f&&(i=i.concat(f(n)));for(var l=u(t),m=u(n),v=0;v<i.length;++v){var y=i[v];if(!(a[y]||r&&r[y]||m&&m[y]||l&&l[y])){var g=d(n,y);try{c(t,y,g)}catch(e){}}}}return t}},103:function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case c:case d:case v:case m:case u:return e;default:return t}}case o:return t}}}function S(e){return x(e)===f}t.AsyncMode=s,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=a,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return S(e)||x(e)===s},t.isConcurrentMode=S,t.isContextConsumer=function(e){return x(e)===c},t.isContextProvider=function(e){return x(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return x(e)===d},t.isFragment=function(e){return x(e)===a},t.isLazy=function(e){return x(e)===v},t.isMemo=function(e){return x(e)===m},t.isPortal=function(e){return x(e)===o},t.isProfiler=function(e){return x(e)===l},t.isStrictMode=function(e){return x(e)===i},t.isSuspense=function(e){return x(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===u||e.$$typeof===c||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=x},296:function(e,t,n){"use strict";e.exports=n(103)},448:function(e,t,n){"use strict";var r=n(294),o=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var s=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=Symbol.for("react.element"),S=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),E=Symbol.for("react.strict_mode"),O=Symbol.for("react.profiler"),j=Symbol.for("react.provider"),C=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),_=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),z=Symbol.for("react.memo"),L=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var A=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var I=Symbol.iterator;function T(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=I&&e[I]||e["@@iterator"])?e:null}var R,M=Object.assign;function D(e){if(void 0===R)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);R=t&&t[1]||""}return"\n"+R+e}var F=!1;function B(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l]){var u="\n"+o[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=l);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?D(e):""}function $(e){switch(e.tag){case 5:return D(e.type);case 16:return D("Lazy");case 13:return D("Suspense");case 19:return D("SuspenseList");case 0:case 2:case 15:return B(e.type,!1);case 11:return B(e.type.render,!1);case 1:return B(e.type,!0);default:return""}}function U(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case S:return"Portal";case O:return"Profiler";case E:return"StrictMode";case _:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case C:return(e.displayName||"Context")+".Consumer";case j:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case z:return null!==(t=e.displayName||null)?t:U(e.type)||"Memo";case L:t=e._payload,e=e._init;try{return U(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return U(t);case 8:return t===E?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function q(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function K(e,t){var n=t.checked;return M({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Y(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){X(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return M({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function ae(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,se,fe=(se=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return se(e,t)}))}:se);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ye=M({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,ke=null,Ee=null;function Oe(e){if(e=wo(e)){if("function"!=typeof Se)throw Error(a(280));var t=e.stateNode;t&&(t=So(t),Se(e.stateNode,e.type,t))}}function je(e){ke?Ee?Ee.push(e):Ee=[e]:ke=e}function Ce(){if(ke){var e=ke,t=Ee;if(Ee=ke=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function Pe(e,t){return e(t)}function _e(){}var Ne=!1;function ze(e,t,n){if(Ne)return e(t,n);Ne=!0;try{return Pe(e,t,n)}finally{Ne=!1,(null!==ke||null!==Ee)&&(_e(),Ce())}}function Le(e,t){var n=e.stateNode;if(null===n)return null;var r=So(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Ae=!1;if(s)try{var Ie={};Object.defineProperty(Ie,"passive",{get:function(){Ae=!0}}),window.addEventListener("test",Ie,Ie),window.removeEventListener("test",Ie,Ie)}catch(se){Ae=!1}function Te(e,t,n,r,o,a,i,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Re=!1,Me=null,De=!1,Fe=null,Be={onError:function(e){Re=!0,Me=e}};function $e(e,t,n,r,o,a,i,l,u){Re=!1,Me=null,Te.apply(Be,arguments)}function Ue(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ve(e){if(Ue(e)!==e)throw Error(a(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ue(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ve(o),e;if(i===r)return Ve(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?qe(e):null}function qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=qe(e);if(null!==t)return t;e=e.sibling}return null}var Qe=o.unstable_scheduleCallback,Ge=o.unstable_cancelCallback,Ke=o.unstable_shouldYield,Ye=o.unstable_requestPaint,Xe=o.unstable_now,Je=o.unstable_getCurrentPriorityLevel,Ze=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,ct=64,st=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~o;0!==l?r=ft(l):0!=(a&=i)&&(r=ft(a))}else 0!=(i=n&~o)?r=ft(i):0!==a&&(r=ft(a));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&0!=(4194240&a)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-it(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ct;return 0==(4194240&(ct<<=1))&&(ct=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var xt,St,kt,Et,Ot,jt=!1,Ct=[],Pt=null,_t=null,Nt=null,zt=new Map,Lt=new Map,At=[],It="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Tt(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":_t=null;break;case"mouseover":case"mouseout":Nt=null;break;case"pointerover":case"pointerout":zt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Lt.delete(t.pointerId)}}function Rt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&St(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Mt(e){var t=bo(e.target);if(null!==t){var n=Ue(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void Ot(e.priority,(function(){kt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Dt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&St(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Ft(e,t,n){Dt(e)&&n.delete(t)}function Bt(){jt=!1,null!==Pt&&Dt(Pt)&&(Pt=null),null!==_t&&Dt(_t)&&(_t=null),null!==Nt&&Dt(Nt)&&(Nt=null),zt.forEach(Ft),Lt.forEach(Ft)}function $t(e,t){e.blockedOn===t&&(e.blockedOn=null,jt||(jt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Bt)))}function Ut(e){function t(t){return $t(t,e)}if(0<Ct.length){$t(Ct[0],e);for(var n=1;n<Ct.length;n++){var r=Ct[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Pt&&$t(Pt,e),null!==_t&&$t(_t,e),null!==Nt&&$t(Nt,e),zt.forEach(t),Lt.forEach(t),n=0;n<At.length;n++)(r=At[n]).blockedOn===e&&(r.blockedOn=null);for(;0<At.length&&null===(n=At[0]).blockedOn;)Mt(n),null===n.blockedOn&&At.shift()}var Wt=w.ReactCurrentBatchConfig,Vt=!0;function Ht(e,t,n,r){var o=bt,a=Wt.transition;Wt.transition=null;try{bt=1,Qt(e,t,n,r)}finally{bt=o,Wt.transition=a}}function qt(e,t,n,r){var o=bt,a=Wt.transition;Wt.transition=null;try{bt=4,Qt(e,t,n,r)}finally{bt=o,Wt.transition=a}}function Qt(e,t,n,r){if(Vt){var o=Kt(e,t,n,r);if(null===o)Vr(e,t,r,Gt,n),Tt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Pt=Rt(Pt,e,t,n,r,o),!0;case"dragenter":return _t=Rt(_t,e,t,n,r,o),!0;case"mouseover":return Nt=Rt(Nt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return zt.set(a,Rt(zt.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Lt.set(a,Rt(Lt.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Tt(e,r),4&t&&-1<It.indexOf(e)){for(;null!==o;){var a=wo(o);if(null!==a&&xt(a),null===(a=Kt(e,t,n,r))&&Vr(e,t,r,Gt,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Vr(e,t,r,null,n)}}var Gt=null;function Kt(e,t,n,r){if(Gt=null,null!==(e=bo(e=xe(r))))if(null===(t=Ue(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Gt=e,null}function Yt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Jt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Jt,r=n.length,o="value"in Xt?Xt.value:Xt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Zt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return M(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,un,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},sn=on(cn),fn=M({},cn,{view:0,detail:0}),dn=on(fn),pn=M({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:On,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(an=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=an=0,un=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=on(pn),mn=on(M({},pn,{dataTransfer:0})),vn=on(M({},fn,{relatedTarget:0})),yn=on(M({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=M({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(gn),wn=on(M({},cn,{data:0})),xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function On(){return En}var jn=M({},fn,{key:function(e){if(e.key){var t=xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:On,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Cn=on(jn),Pn=on(M({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),_n=on(M({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:On})),Nn=on(M({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),zn=M({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Ln=on(zn),An=[9,13,27,32],In=s&&"CompositionEvent"in window,Tn=null;s&&"documentMode"in document&&(Tn=document.documentMode);var Rn=s&&"TextEvent"in window&&!Tn,Mn=s&&(!In||Tn&&8<Tn&&11>=Tn),Dn=String.fromCharCode(32),Fn=!1;function Bn(e,t){switch(e){case"keyup":return-1!==An.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function $n(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Hn(e,t,n,r){je(r),0<(t=qr(t,"onChange")).length&&(n=new sn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var qn=null,Qn=null;function Gn(e){Dr(e,0)}function Kn(e){if(Q(xo(e)))return e}function Yn(e,t){if("change"===e)return t}var Xn=!1;if(s){var Jn;if(s){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Jn=Zn}else Jn=!1;Xn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){qn&&(qn.detachEvent("onpropertychange",nr),Qn=qn=null)}function nr(e){if("value"===e.propertyName&&Kn(Qn)){var t=[];Hn(t,Qn,e,xe(e)),ze(Gn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Qn=n,(qn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(Qn)}function ar(e,t){if("click"===e)return Kn(t)}function ir(e,t){if("input"===e||"change"===e)return Kn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=sr(n,a);var i=sr(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=s&&"documentMode"in document&&11>=document.documentMode,vr=null,yr=null,gr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==G(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&ur(gr,r)||(gr=r,0<(r=qr(yr,"onSelect")).length&&(t=new sn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function xr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Sr={animationend:xr("Animation","AnimationEnd"),animationiteration:xr("Animation","AnimationIteration"),animationstart:xr("Animation","AnimationStart"),transitionend:xr("Transition","TransitionEnd")},kr={},Er={};function Or(e){if(kr[e])return kr[e];if(!Sr[e])return e;var t,n=Sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Er)return kr[e]=n[t];return e}s&&(Er=document.createElement("div").style,"AnimationEvent"in window||(delete Sr.animationend.animation,delete Sr.animationiteration.animation,delete Sr.animationstart.animation),"TransitionEvent"in window||delete Sr.transitionend.transition);var jr=Or("animationend"),Cr=Or("animationiteration"),Pr=Or("animationstart"),_r=Or("transitionend"),Nr=new Map,zr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Lr(e,t){Nr.set(e,t),u(t,[e])}for(var Ar=0;Ar<zr.length;Ar++){var Ir=zr[Ar];Lr(Ir.toLowerCase(),"on"+(Ir[0].toUpperCase()+Ir.slice(1)))}Lr(jr,"onAnimationEnd"),Lr(Cr,"onAnimationIteration"),Lr(Pr,"onAnimationStart"),Lr("dblclick","onDoubleClick"),Lr("focusin","onFocus"),Lr("focusout","onBlur"),Lr(_r,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Tr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Rr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Tr));function Mr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,u,c){if($e.apply(this,arguments),Re){if(!Re)throw Error(a(198));var s=Me;Re=!1,Me=null,De||(De=!0,Fe=s)}}(r,t,void 0,e),e.currentTarget=null}function Dr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,c=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;Mr(o,l,c),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,c=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;Mr(o,l,c),a=u}}}if(De)throw e=Fe,De=!1,Fe=null,e}function Fr(e,t){var n=t[vo];void 0===n&&(n=t[vo]=new Set);var r=e+"__bubble";n.has(r)||(Wr(t,e,2,!1),n.add(r))}function Br(e,t,n){var r=0;t&&(r|=4),Wr(n,e,r,t)}var $r="_reactListening"+Math.random().toString(36).slice(2);function Ur(e){if(!e[$r]){e[$r]=!0,i.forEach((function(t){"selectionchange"!==t&&(Rr.has(t)||Br(t,!1,e),Br(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[$r]||(t[$r]=!0,Br("selectionchange",!1,t))}}function Wr(e,t,n,r){switch(Yt(t)){case 1:var o=Ht;break;case 4:o=qt;break;default:o=Qt}n=o.bind(null,t,n,e),o=void 0,!Ae||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Vr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=bo(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}ze((function(){var r=a,o=xe(n),i=[];e:{var l=Nr.get(e);if(void 0!==l){var u=sn,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=Cn;break;case"focusin":c="focus",u=vn;break;case"focusout":c="blur",u=vn;break;case"beforeblur":case"afterblur":u=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=_n;break;case jr:case Cr:case Pr:u=yn;break;case _r:u=Nn;break;case"scroll":u=dn;break;case"wheel":u=Ln;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Pn}var s=0!=(4&t),f=!s&&"scroll"===e,d=s?null!==l?l+"Capture":null:l;s=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Le(h,d))&&s.push(Hr(h,m,p))),f)break;h=h.return}0<s.length&&(l=new u(l,c,null,n,o),i.push({event:l,listeners:s}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(c=n.relatedTarget||n.fromElement)||!bo(c)&&!c[mo])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?bo(c):null)&&(c!==(f=Ue(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=r),u!==c)){if(s=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=Pn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:xo(u),p=null==c?l:xo(c),(l=new s(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,bo(o)===r&&((s=new s(d,h+"enter",c,n,o)).target=p,s.relatedTarget=f,m=s),f=m,u&&c)e:{for(d=c,h=0,p=s=u;p;p=Qr(p))h++;for(p=0,m=d;m;m=Qr(m))p++;for(;0<h-p;)s=Qr(s),h--;for(;0<p-h;)d=Qr(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=Qr(s),d=Qr(d)}s=null}else s=null;null!==u&&Gr(i,l,u,s,!1),null!==c&&null!==f&&Gr(i,f,c,s,!0)}if("select"===(u=(l=r?xo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Yn;else if(Vn(l))if(Xn)v=ir;else{v=or;var y=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=ar);switch(v&&(v=v(e,r))?Hn(i,v,n,o):(y&&y(e,l,r),"focusout"===e&&(y=l._wrapperState)&&y.controlled&&"number"===l.type&&ee(l,"number",l.value)),y=r?xo(r):window,e){case"focusin":(Vn(y)||"true"===y.contentEditable)&&(vr=y,yr=r,gr=null);break;case"focusout":gr=yr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(i,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(i,n,o)}var g;if(In)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Un?Bn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Mn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==b?"onCompositionEnd"===b&&Un&&(g=en()):(Jt="value"in(Xt=o)?Xt.value:Xt.textContent,Un=!0)),0<(y=qr(r,b)).length&&(b=new wn(b,e,null,n,o),i.push({event:b,listeners:y}),(g||null!==(g=$n(n)))&&(b.data=g))),(g=Rn?function(e,t){switch(e){case"compositionend":return $n(t);case"keypress":return 32!==t.which?null:(Fn=!0,Dn);case"textInput":return(e=t.data)===Dn&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!In&&Bn(e,t)?(e=en(),Zt=Jt=Xt=null,Un=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=qr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=g)}Dr(i,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function qr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Le(e,n))&&r.unshift(Hr(e,a,o)),null!=(a=Le(e,t))&&r.push(Hr(e,a,o))),e=e.return}return r}function Qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Gr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,c=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==c&&(l=c,o?null!=(u=Le(n,a))&&i.unshift(Hr(n,u,l)):o||null!=(u=Le(n,a))&&i.push(Hr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Kr=/\r\n?/g,Yr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Kr,"\n").replace(Yr,"")}function Jr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(a(425))}function Zr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function uo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Ut(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Ut(t)}function co(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function so(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,vo="__reactEvents$"+fo,yo="__reactListeners$"+fo,go="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=so(e);null!==e;){if(n=e[po])return n;e=so(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function xo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function So(e){return e[ho]||null}var ko=[],Eo=-1;function Oo(e){return{current:e}}function jo(e){0>Eo||(e.current=ko[Eo],ko[Eo]=null,Eo--)}function Co(e,t){Eo++,ko[Eo]=e.current,e.current=t}var Po={},_o=Oo(Po),No=Oo(!1),zo=Po;function Lo(e,t){var n=e.type.contextTypes;if(!n)return Po;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Ao(e){return null!=e.childContextTypes}function Io(){jo(No),jo(_o)}function To(e,t,n){if(_o.current!==Po)throw Error(a(168));Co(_o,t),Co(No,n)}function Ro(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,W(e)||"Unknown",o));return M({},n,r)}function Mo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Po,zo=_o.current,Co(_o,e),Co(No,No.current),!0}function Do(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Ro(e,t,zo),r.__reactInternalMemoizedMergedChildContext=e,jo(No),jo(_o),Co(_o,e)):jo(No),Co(No,n)}var Fo=null,Bo=!1,$o=!1;function Uo(e){null===Fo?Fo=[e]:Fo.push(e)}function Wo(){if(!$o&&null!==Fo){$o=!0;var e=0,t=bt;try{var n=Fo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Fo=null,Bo=!1}catch(t){throw null!==Fo&&(Fo=Fo.slice(e+1)),Qe(Ze,Wo),t}finally{bt=t,$o=!1}}return null}var Vo=[],Ho=0,qo=null,Qo=0,Go=[],Ko=0,Yo=null,Xo=1,Jo="";function Zo(e,t){Vo[Ho++]=Qo,Vo[Ho++]=qo,qo=e,Qo=t}function ea(e,t,n){Go[Ko++]=Xo,Go[Ko++]=Jo,Go[Ko++]=Yo,Yo=e;var r=Xo;e=Jo;var o=32-it(r)-1;r&=~(1<<o),n+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Xo=1<<32-it(t)+o|n<<o|r,Jo=a+e}else Xo=1<<a|n<<o|r,Jo=e}function ta(e){null!==e.return&&(Zo(e,1),ea(e,1,0))}function na(e){for(;e===qo;)qo=Vo[--Ho],Vo[Ho]=null,Qo=Vo[--Ho],Vo[Ho]=null;for(;e===Yo;)Yo=Go[--Ko],Go[Ko]=null,Jo=Go[--Ko],Go[Ko]=null,Xo=Go[--Ko],Go[Ko]=null}var ra=null,oa=null,aa=!1,ia=null;function la(e,t){var n=Lc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ua(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ra=e,oa=co(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ra=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Yo?{id:Xo,overflow:Jo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Lc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ra=e,oa=null,!0);default:return!1}}function ca(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function sa(e){if(aa){var t=oa;if(t){var n=t;if(!ua(e,t)){if(ca(e))throw Error(a(418));t=co(n.nextSibling);var r=ra;t&&ua(e,t)?la(r,n):(e.flags=-4097&e.flags|2,aa=!1,ra=e)}}else{if(ca(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,ra=e}}}function fa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ra=e}function da(e){if(e!==ra)return!1;if(!aa)return fa(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oa)){if(ca(e))throw pa(),Error(a(418));for(;t;)la(e,t),t=co(t.nextSibling)}if(fa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oa=co(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oa=null}}else oa=ra?co(e.stateNode.nextSibling):null;return!0}function pa(){for(var e=oa;e;)e=co(e.nextSibling)}function ha(){oa=ra=null,aa=!1}function ma(e){null===ia?ia=[e]:ia.push(e)}var va=w.ReactCurrentBatchConfig;function ya(e,t){if(e&&e.defaultProps){for(var n in t=M({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var ga=Oo(null),ba=null,wa=null,xa=null;function Sa(){xa=wa=ba=null}function ka(e){var t=ga.current;jo(ga),e._currentValue=t}function Ea(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Oa(e,t){ba=e,xa=wa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wl=!0),e.firstContext=null)}function ja(e){var t=e._currentValue;if(xa!==e)if(e={context:e,memoizedValue:t,next:null},null===wa){if(null===ba)throw Error(a(308));wa=e,ba.dependencies={lanes:0,firstContext:e}}else wa=wa.next=e;return t}var Ca=null;function Pa(e){null===Ca?Ca=[e]:Ca.push(e)}function _a(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Pa(t)):(n.next=o.next,o.next=n),t.interleaved=n,Na(e,r)}function Na(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var za=!1;function La(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Aa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ia(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Ta(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&_u)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Na(e,n)}return null===(o=r.interleaved)?(t.next=t,Pa(r)):(t.next=o.next,o.next=t),r.interleaved=t,Na(e,n)}function Ra(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function Ma(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Da(e,t,n,r){var o=e.updateQueue;za=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,c=u.next;u.next=null,null===i?a=c:i.next=c,i=u;var s=e.alternate;null!==s&&(l=(s=s.updateQueue).lastBaseUpdate)!==i&&(null===l?s.firstBaseUpdate=c:l.next=c,s.lastBaseUpdate=u)}if(null!==a){var f=o.baseState;for(i=0,s=c=u=null,l=a;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==s&&(s=s.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=M({},f,d);break e;case 2:za=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===s?(c=s=p,u=f):s=s.next=p,i|=d;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(d=l).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===s&&(u=f),o.baseState=u,o.firstBaseUpdate=c,o.lastBaseUpdate=s,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);Mu|=i,e.lanes=i,e.memoizedState=f}}function Fa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var Ba=(new r.Component).refs;function $a(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:M({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Ua={isMounted:function(e){return!!(e=e._reactInternals)&&Ue(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tc(),o=nc(e),a=Ia(r,o);a.payload=t,null!=n&&(a.callback=n),null!==(t=Ta(e,a,o))&&(rc(t,e,o,r),Ra(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tc(),o=nc(e),a=Ia(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Ta(e,a,o))&&(rc(t,e,o,r),Ra(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tc(),r=nc(e),o=Ia(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Ta(e,o,r))&&(rc(t,e,r,n),Ra(t,e,r))}};function Wa(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,a))}function Va(e,t,n){var r=!1,o=Po,a=t.contextType;return"object"==typeof a&&null!==a?a=ja(a):(o=Ao(t)?zo:_o.current,a=(r=null!=(r=t.contextTypes))?Lo(e,o):Po),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Ua,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Ha(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ua.enqueueReplaceState(t,t.state,null)}function qa(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Ba,La(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=ja(a):(a=Ao(t)?zo:_o.current,o.context=Lo(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&($a(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Ua.enqueueReplaceState(o,o.state,null),Da(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Qa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;t===Ba&&(t=o.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ga(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ka(e){return(0,e._init)(e._payload)}function Ya(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Ic(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Dc(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){var a=n.type;return a===k?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===L&&Ka(a)===t.type)?((r=o(t,n.props)).ref=Qa(e,t,n),r.return=e,r):((r=Tc(n.type,n.key,n.props,null,e.mode,r)).ref=Qa(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Fc(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Rc(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Dc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Tc(t.type,t.key,t.props,null,e.mode,n)).ref=Qa(e,null,t),n.return=e,n;case S:return(t=Fc(t,e.mode,n)).return=e,t;case L:return d(e,(0,t._init)(t._payload),n)}if(te(t)||T(t))return(t=Rc(t,e.mode,n,null)).return=e,t;Ga(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===o?c(e,t,n,r):null;case S:return n.key===o?s(e,t,n,r):null;case L:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||T(n))return null!==o?null:f(e,t,n,r,null);Ga(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case S:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case L:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||T(r))return f(t,e=e.get(n)||null,r,o,null);Ga(t,r)}return null}function m(o,a,l,u){for(var c=null,s=null,f=a,m=a=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,l[m],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===s?c=y:s.sibling=y,s=y,f=v}if(m===l.length)return n(o,f),aa&&Zo(o,m),c;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(a=i(f,a,m),null===s?c=f:s.sibling=f,s=f);return aa&&Zo(o,m),c}for(f=r(o,f);m<l.length;m++)null!==(v=h(f,o,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),aa&&Zo(o,m),c}function v(o,l,u,c){var s=T(u);if("function"!=typeof s)throw Error(a(150));if(null==(u=s.call(u)))throw Error(a(151));for(var f=s=null,m=l,v=l=0,y=null,g=u.next();null!==m&&!g.done;v++,g=u.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,c);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,v),null===f?s=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),aa&&Zo(o,v),s;if(null===m){for(;!g.done;v++,g=u.next())null!==(g=d(o,g.value,c))&&(l=i(g,l,v),null===f?s=g:f.sibling=g,f=g);return aa&&Zo(o,v),s}for(m=r(o,m);!g.done;v++,g=u.next())null!==(g=h(m,o,v,g.value,c))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),l=i(g,l,v),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),aa&&Zo(o,v),s}return function e(r,a,i,u){if("object"==typeof i&&null!==i&&i.type===k&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case x:e:{for(var c=i.key,s=a;null!==s;){if(s.key===c){if((c=i.type)===k){if(7===s.tag){n(r,s.sibling),(a=o(s,i.props.children)).return=r,r=a;break e}}else if(s.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===L&&Ka(c)===s.type){n(r,s.sibling),(a=o(s,i.props)).ref=Qa(r,s,i),a.return=r,r=a;break e}n(r,s);break}t(r,s),s=s.sibling}i.type===k?((a=Rc(i.props.children,r.mode,u,i.key)).return=r,r=a):((u=Tc(i.type,i.key,i.props,null,r.mode,u)).ref=Qa(r,a,i),u.return=r,r=u)}return l(r);case S:e:{for(s=i.key;null!==a;){if(a.key===s){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(r,a.sibling),(a=o(a,i.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=Fc(i,r.mode,u)).return=r,r=a}return l(r);case L:return e(r,a,(s=i._init)(i._payload),u)}if(te(i))return m(r,a,i,u);if(T(i))return v(r,a,i,u);Ga(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,i)).return=r,r=a):(n(r,a),(a=Dc(i,r.mode,u)).return=r,r=a),l(r)):n(r,a)}}var Xa=Ya(!0),Ja=Ya(!1),Za={},ei=Oo(Za),ti=Oo(Za),ni=Oo(Za);function ri(e){if(e===Za)throw Error(a(174));return e}function oi(e,t){switch(Co(ni,t),Co(ti,e),Co(ei,Za),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}jo(ei),Co(ei,t)}function ai(){jo(ei),jo(ti),jo(ni)}function ii(e){ri(ni.current);var t=ri(ei.current),n=ue(t,e.type);t!==n&&(Co(ti,e),Co(ei,n))}function li(e){ti.current===e&&(jo(ei),jo(ti))}var ui=Oo(0);function ci(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var si=[];function fi(){for(var e=0;e<si.length;e++)si[e]._workInProgressVersionPrimary=null;si.length=0}var di=w.ReactCurrentDispatcher,pi=w.ReactCurrentBatchConfig,hi=0,mi=null,vi=null,yi=null,gi=!1,bi=!1,wi=0,xi=0;function Si(){throw Error(a(321))}function ki(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function Ei(e,t,n,r,o,i){if(hi=i,mi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,di.current=null===e||null===e.memoizedState?ll:ul,e=n(r,o),bi){i=0;do{if(bi=!1,wi=0,25<=i)throw Error(a(301));i+=1,yi=vi=null,t.updateQueue=null,di.current=cl,e=n(r,o)}while(bi)}if(di.current=il,t=null!==vi&&null!==vi.next,hi=0,yi=vi=mi=null,gi=!1,t)throw Error(a(300));return e}function Oi(){var e=0!==wi;return wi=0,e}function ji(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===yi?mi.memoizedState=yi=e:yi=yi.next=e,yi}function Ci(){if(null===vi){var e=mi.alternate;e=null!==e?e.memoizedState:null}else e=vi.next;var t=null===yi?mi.memoizedState:yi.next;if(null!==t)yi=t,vi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(vi=e).memoizedState,baseState:vi.baseState,baseQueue:vi.baseQueue,queue:vi.queue,next:null},null===yi?mi.memoizedState=yi=e:yi=yi.next=e}return yi}function Pi(e,t){return"function"==typeof t?t(e):t}function _i(e){var t=Ci(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=vi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var u=l=null,c=null,s=i;do{var f=s.lane;if((hi&f)===f)null!==c&&(c=c.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),r=s.hasEagerState?s.eagerState:e(r,s.action);else{var d={lane:f,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};null===c?(u=c=d,l=r):c=c.next=d,mi.lanes|=f,Mu|=f}s=s.next}while(null!==s&&s!==i);null===c?l=r:c.next=u,lr(r,t.memoizedState)||(wl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,mi.lanes|=i,Mu|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ni(e){var t=Ci(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);lr(i,t.memoizedState)||(wl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function zi(){}function Li(e,t){var n=mi,r=Ci(),o=t(),i=!lr(r.memoizedState,o);if(i&&(r.memoizedState=o,wl=!0),r=r.queue,Vi(Ti.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==yi&&1&yi.memoizedState.tag){if(n.flags|=2048,Fi(9,Ii.bind(null,n,r,o,t),void 0,null),null===Nu)throw Error(a(349));0!=(30&hi)||Ai(n,t,o)}return o}function Ai(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ii(e,t,n,r){t.value=n,t.getSnapshot=r,Ri(t)&&Mi(e)}function Ti(e,t,n){return n((function(){Ri(t)&&Mi(e)}))}function Ri(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Mi(e){var t=Na(e,1);null!==t&&rc(t,e,1,-1)}function Di(e){var t=ji();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Pi,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,mi,e),[t.memoizedState,e]}function Fi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Bi(){return Ci().memoizedState}function $i(e,t,n,r){var o=ji();mi.flags|=e,o.memoizedState=Fi(1|t,n,void 0,void 0===r?null:r)}function Ui(e,t,n,r){var o=Ci();r=void 0===r?null:r;var a=void 0;if(null!==vi){var i=vi.memoizedState;if(a=i.destroy,null!==r&&ki(r,i.deps))return void(o.memoizedState=Fi(t,n,a,r))}mi.flags|=e,o.memoizedState=Fi(1|t,n,a,r)}function Wi(e,t){return $i(8390656,8,e,t)}function Vi(e,t){return Ui(2048,8,e,t)}function Hi(e,t){return Ui(4,2,e,t)}function qi(e,t){return Ui(4,4,e,t)}function Qi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Gi(e,t,n){return n=null!=n?n.concat([e]):null,Ui(4,4,Qi.bind(null,t,e),n)}function Ki(){}function Yi(e,t){var n=Ci();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ki(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xi(e,t){var n=Ci();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ki(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ji(e,t,n){return 0==(21&hi)?(e.baseState&&(e.baseState=!1,wl=!0),e.memoizedState=n):(lr(n,t)||(n=mt(),mi.lanes|=n,Mu|=n,e.baseState=!0),t)}function Zi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pi.transition;pi.transition={};try{e(!1),t()}finally{bt=n,pi.transition=r}}function el(){return Ci().memoizedState}function tl(e,t,n){var r=nc(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?ol(t,n):null!==(n=_a(e,t,n,r))&&(rc(n,e,r,tc()),al(n,t,r))}function nl(e,t,n){var r=nc(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))ol(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,i)){var u=t.interleaved;return null===u?(o.next=o,Pa(t)):(o.next=u.next,u.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=_a(e,t,o,r))&&(rc(n,e,r,o=tc()),al(n,t,r))}}function rl(e){var t=e.alternate;return e===mi||null!==t&&t===mi}function ol(e,t){bi=gi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function al(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var il={readContext:ja,useCallback:Si,useContext:Si,useEffect:Si,useImperativeHandle:Si,useInsertionEffect:Si,useLayoutEffect:Si,useMemo:Si,useReducer:Si,useRef:Si,useState:Si,useDebugValue:Si,useDeferredValue:Si,useTransition:Si,useMutableSource:Si,useSyncExternalStore:Si,useId:Si,unstable_isNewReconciler:!1},ll={readContext:ja,useCallback:function(e,t){return ji().memoizedState=[e,void 0===t?null:t],e},useContext:ja,useEffect:Wi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,$i(4194308,4,Qi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return $i(4194308,4,e,t)},useInsertionEffect:function(e,t){return $i(4,2,e,t)},useMemo:function(e,t){var n=ji();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ji();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,mi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},ji().memoizedState=e},useState:Di,useDebugValue:Ki,useDeferredValue:function(e){return ji().memoizedState=e},useTransition:function(){var e=Di(!1),t=e[0];return e=Zi.bind(null,e[1]),ji().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=mi,o=ji();if(aa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Nu)throw Error(a(349));0!=(30&hi)||Ai(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Wi(Ti.bind(null,r,i,e),[e]),r.flags|=2048,Fi(9,Ii.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=ji(),t=Nu.identifierPrefix;if(aa){var n=Jo;t=":"+t+"R"+(n=(Xo&~(1<<32-it(Xo)-1)).toString(32)+n),0<(n=wi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=xi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ul={readContext:ja,useCallback:Yi,useContext:ja,useEffect:Vi,useImperativeHandle:Gi,useInsertionEffect:Hi,useLayoutEffect:qi,useMemo:Xi,useReducer:_i,useRef:Bi,useState:function(){return _i(Pi)},useDebugValue:Ki,useDeferredValue:function(e){return Ji(Ci(),vi.memoizedState,e)},useTransition:function(){return[_i(Pi)[0],Ci().memoizedState]},useMutableSource:zi,useSyncExternalStore:Li,useId:el,unstable_isNewReconciler:!1},cl={readContext:ja,useCallback:Yi,useContext:ja,useEffect:Vi,useImperativeHandle:Gi,useInsertionEffect:Hi,useLayoutEffect:qi,useMemo:Xi,useReducer:Ni,useRef:Bi,useState:function(){return Ni(Pi)},useDebugValue:Ki,useDeferredValue:function(e){var t=Ci();return null===vi?t.memoizedState=e:Ji(t,vi.memoizedState,e)},useTransition:function(){return[Ni(Pi)[0],Ci().memoizedState]},useMutableSource:zi,useSyncExternalStore:Li,useId:el,unstable_isNewReconciler:!1};function sl(e,t){try{var n="",r=t;do{n+=$(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function fl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function dl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=Ia(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hu||(Hu=!0,qu=r),dl(0,t)},n}function ml(e,t,n){(n=Ia(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){dl(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){dl(0,t),"function"!=typeof r&&(null===Qu?Qu=new Set([this]):Qu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function vl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=jc.bind(null,e,t,n),t.then(e,e))}function yl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gl(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ia(-1,1)).tag=2,Ta(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bl=w.ReactCurrentOwner,wl=!1;function xl(e,t,n,r){t.child=null===e?Ja(t,null,n,r):Xa(t,e.child,n,r)}function Sl(e,t,n,r,o){n=n.render;var a=t.ref;return Oa(t,o),r=Ei(e,t,n,r,a,o),n=Oi(),null===e||wl?(aa&&n&&ta(t),t.flags|=1,xl(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function kl(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Ac(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Tc(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,El(e,t,a,r,o))}if(a=e.child,0==(e.lanes&o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(i,r)&&e.ref===t.ref)return Hl(e,t,o)}return t.flags|=1,(e=Ic(a,r)).ref=t.ref,e.return=t,t.child=e}function El(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(ur(a,r)&&e.ref===t.ref){if(wl=!1,t.pendingProps=r=a,0==(e.lanes&o))return t.lanes=e.lanes,Hl(e,t,o);0!=(131072&e.flags)&&(wl=!0)}}return Cl(e,t,n,r,o)}function Ol(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Co(Iu,Au),Au|=n;else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Co(Iu,Au),Au|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,Co(Iu,Au),Au|=r}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,Co(Iu,Au),Au|=r;return xl(e,t,o,n),t.child}function jl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Cl(e,t,n,r,o){var a=Ao(n)?zo:_o.current;return a=Lo(t,a),Oa(t,o),n=Ei(e,t,n,r,a,o),r=Oi(),null===e||wl?(aa&&r&&ta(t),t.flags|=1,xl(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function Pl(e,t,n,r,o){if(Ao(n)){var a=!0;Mo(t)}else a=!1;if(Oa(t,o),null===t.stateNode)Vl(e,t),Va(t,n,r),qa(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,c=n.contextType;c="object"==typeof c&&null!==c?ja(c):Lo(t,c=Ao(n)?zo:_o.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==c)&&Ha(t,i,r,c),za=!1;var d=t.memoizedState;i.state=d,Da(t,r,i,o),u=t.memoizedState,l!==r||d!==u||No.current||za?("function"==typeof s&&($a(t,n,s,r),u=t.memoizedState),(l=za||Wa(t,n,l,r,d,u,c))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=c,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Aa(e,t),l=t.memoizedProps,c=t.type===t.elementType?l:ya(t.type,l),i.props=c,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?ja(u):Lo(t,u=Ao(n)?zo:_o.current);var p=n.getDerivedStateFromProps;(s="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&Ha(t,i,r,u),za=!1,d=t.memoizedState,i.state=d,Da(t,r,i,o);var h=t.memoizedState;l!==f||d!==h||No.current||za?("function"==typeof p&&($a(t,n,p,r),h=t.memoizedState),(c=za||Wa(t,n,c,r,d,h,u)||!1)?(s||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=c):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return _l(e,t,n,r,a,o)}function _l(e,t,n,r,o,a){jl(e,t);var i=0!=(128&t.flags);if(!r&&!i)return o&&Do(t,n,!1),Hl(e,t,a);r=t.stateNode,bl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Xa(t,e.child,null,a),t.child=Xa(t,null,l,a)):xl(e,t,l,a),t.memoizedState=r.state,o&&Do(t,n,!0),t.child}function Nl(e){var t=e.stateNode;t.pendingContext?To(0,t.pendingContext,t.pendingContext!==t.context):t.context&&To(0,t.context,!1),oi(e,t.containerInfo)}function zl(e,t,n,r,o){return ha(),ma(o),t.flags|=256,xl(e,t,n,r),t.child}var Ll,Al,Il,Tl,Rl={dehydrated:null,treeContext:null,retryLane:0};function Ml(e){return{baseLanes:e,cachePool:null,transitions:null}}function Dl(e,t,n){var r,o=t.pendingProps,i=ui.current,l=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Co(ui,1&i),null===e)return sa(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=o.children,e=o.fallback,l?(o=t.mode,l=t.child,u={mode:"hidden",children:u},0==(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=u):l=Mc(u,o,0,null),e=Rc(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Ml(n),t.memoizedState=Rl,e):Fl(t,u));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,l){if(n)return 256&t.flags?(t.flags&=-257,Bl(e,t,l,r=fl(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Mc({mode:"visible",children:r.children},o,0,null),(i=Rc(i,o,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Xa(t,e.child,null,l),t.child.memoizedState=Ml(l),t.memoizedState=Rl,i);if(0==(1&t.mode))return Bl(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var u=r.dgst;return r=u,Bl(e,t,l,r=fl(i=Error(a(419)),r,void 0))}if(u=0!=(l&e.childLanes),wl||u){if(null!==(r=Nu)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|l))?0:o)&&o!==i.retryLane&&(i.retryLane=o,Na(e,o),rc(r,e,o,-1))}return vc(),Bl(e,t,l,r=fl(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Pc.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=co(o.nextSibling),ra=t,aa=!0,ia=null,null!==e&&(Go[Ko++]=Xo,Go[Ko++]=Jo,Go[Ko++]=Yo,Xo=e.id,Jo=e.overflow,Yo=t),(t=Fl(t,r.children)).flags|=4096,t)}(e,t,u,o,r,i,n);if(l){l=o.fallback,u=t.mode,r=(i=e.child).sibling;var c={mode:"hidden",children:o.children};return 0==(1&u)&&t.child!==i?((o=t.child).childLanes=0,o.pendingProps=c,t.deletions=null):(o=Ic(i,c)).subtreeFlags=14680064&i.subtreeFlags,null!==r?l=Ic(r,l):(l=Rc(l,u,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,u=null===(u=e.child.memoizedState)?Ml(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},l.memoizedState=u,l.childLanes=e.childLanes&~n,t.memoizedState=Rl,o}return e=(l=e.child).sibling,o=Ic(l,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Fl(e,t){return(t=Mc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Bl(e,t,n,r){return null!==r&&ma(r),Xa(t,e.child,null,n),(e=Fl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function $l(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ea(e.return,t,n)}function Ul(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Wl(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(xl(e,t,r.children,n),0!=(2&(r=ui.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&$l(e,n,t);else if(19===e.tag)$l(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Co(ui,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ci(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Ul(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ci(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Ul(t,!0,n,null,a);break;case"together":Ul(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Vl(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Hl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Mu|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Ic(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ic(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function ql(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ql(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Gl(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Ql(t),null;case 1:case 17:return Ao(t.type)&&Io(),Ql(t),null;case 3:return r=t.stateNode,ai(),jo(No),jo(_o),fi(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(da(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ia&&(lc(ia),ia=null))),Al(e,t),Ql(t),null;case 5:li(t);var o=ri(ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Il(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Ql(t),null}if(e=ri(ei.current),da(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[po]=t,r[ho]=i,e=0!=(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(o=0;o<Tr.length;o++)Fr(Tr[o],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":Y(r,i),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Fr("invalid",r);break;case"textarea":oe(r,i),Fr("invalid",r)}for(var u in ge(n,i),o=null,i)if(i.hasOwnProperty(u)){var c=i[u];"children"===u?"string"==typeof c?r.textContent!==c&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,c,e),o=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,c,e),o=["children",""+c]):l.hasOwnProperty(u)&&null!=c&&"onScroll"===u&&Fr("scroll",r)}switch(n){case"input":q(r),Z(r,i,!0);break;case"textarea":q(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Zr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[po]=t,e[ho]=r,Ll(e,t,!1,!1),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),o=r;break;case"iframe":case"object":case"embed":Fr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Tr.length;o++)Fr(Tr[o],e);o=r;break;case"source":Fr("error",e),o=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),o=r;break;case"details":Fr("toggle",e),o=r;break;case"input":Y(e,r),o=K(e,r),Fr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=M({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Fr("invalid",e)}for(i in ge(n,o),c=o)if(c.hasOwnProperty(i)){var s=c[i];"style"===i?ve(e,s):"dangerouslySetInnerHTML"===i?null!=(s=s?s.__html:void 0)&&fe(e,s):"children"===i?"string"==typeof s?("textarea"!==n||""!==s)&&de(e,s):"number"==typeof s&&de(e,""+s):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=s&&"onScroll"===i&&Fr("scroll",e):null!=s&&b(e,i,s,u))}switch(n){case"input":q(e),Z(e,r,!1);break;case"textarea":q(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Ql(t),null;case 6:if(e&&null!=t.stateNode)Tl(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=ri(ni.current),ri(ei.current),da(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(i=r.nodeValue!==n)&&null!==(e=ra))switch(e.tag){case 3:Jr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Ql(t),null;case 13:if(jo(ui),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&0!=(1&t.mode)&&0==(128&t.flags))pa(),ha(),t.flags|=98560,i=!1;else if(i=da(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[po]=t}else ha(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Ql(t),i=!1}else null!==ia&&(lc(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ui.current)?0===Tu&&(Tu=3):vc())),null!==t.updateQueue&&(t.flags|=4),Ql(t),null);case 4:return ai(),Al(e,t),null===e&&Ur(t.stateNode.containerInfo),Ql(t),null;case 10:return ka(t.type._context),Ql(t),null;case 19:if(jo(ui),null===(i=t.memoizedState))return Ql(t),null;if(r=0!=(128&t.flags),null===(u=i.rendering))if(r)ql(i,!1);else{if(0!==Tu||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=ci(e))){for(t.flags|=128,ql(i,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Co(ui,1&ui.current|2),t.child}e=e.sibling}null!==i.tail&&Xe()>Wu&&(t.flags|=128,r=!0,ql(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ci(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),ql(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!aa)return Ql(t),null}else 2*Xe()-i.renderingStartTime>Wu&&1073741824!==n&&(t.flags|=128,r=!0,ql(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Xe(),t.sibling=null,n=ui.current,Co(ui,r?1&n|2:1&n),t):(Ql(t),null);case 22:case 23:return dc(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Au)&&(Ql(t),6&t.subtreeFlags&&(t.flags|=8192)):Ql(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Kl(e,t){switch(na(t),t.tag){case 1:return Ao(t.type)&&Io(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ai(),jo(No),jo(_o),fi(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return li(t),null;case 13:if(jo(ui),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ha()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return jo(ui),null;case 4:return ai(),null;case 10:return ka(t.type._context),null;case 22:case 23:return dc(),null;default:return null}}Ll=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Al=function(){},Il=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ri(ei.current);var a,i=null;switch(n){case"input":o=K(e,o),r=K(e,r),i=[];break;case"select":o=M({},o,{value:void 0}),r=M({},r,{value:void 0}),i=[];break;case"textarea":o=re(e,o),r=re(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(s in ge(n,r),n=null,o)if(!r.hasOwnProperty(s)&&o.hasOwnProperty(s)&&null!=o[s])if("style"===s){var u=o[s];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?i||(i=[]):(i=i||[]).push(s,null));for(s in r){var c=r[s];if(u=null!=o?o[s]:void 0,r.hasOwnProperty(s)&&c!==u&&(null!=c||null!=u))if("style"===s)if(u){for(a in u)!u.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&u[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(i||(i=[]),i.push(s,n)),n=c;else"dangerouslySetInnerHTML"===s?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(i=i||[]).push(s,c)):"children"===s?"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(s,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(l.hasOwnProperty(s)?(null!=c&&"onScroll"===s&&Fr("scroll",e),i||u===c||(i=[])):(i=i||[]).push(s,c))}n&&(i=i||[]).push("style",n);var s=i;(t.updateQueue=s)&&(t.flags|=4)}},Tl=function(e,t,n,r){n!==r&&(t.flags|=4)};var Yl=!1,Xl=!1,Jl="function"==typeof WeakSet?WeakSet:Set,Zl=null;function eu(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Oc(e,t,n)}else n.current=null}function tu(e,t,n){try{n()}catch(n){Oc(e,t,n)}}var nu=!1;function ru(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&tu(t,n,a)}o=o.next}while(o!==r)}}function ou(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function au(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function iu(e){var t=e.alternate;null!==t&&(e.alternate=null,iu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[vo],delete t[yo],delete t[go]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function uu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||lu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function cu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(cu(e,t,n),e=e.sibling;null!==e;)cu(e,t,n),e=e.sibling}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}var fu=null,du=!1;function pu(e,t,n){for(n=n.child;null!==n;)hu(e,t,n),n=n.sibling}function hu(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Xl||eu(n,t);case 6:var r=fu,o=du;fu=null,pu(e,t,n),du=o,null!==(fu=r)&&(du?(e=fu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):fu.removeChild(n.stateNode));break;case 18:null!==fu&&(du?(e=fu,n=n.stateNode,8===e.nodeType?uo(e.parentNode,n):1===e.nodeType&&uo(e,n),Ut(e)):uo(fu,n.stateNode));break;case 4:r=fu,o=du,fu=n.stateNode.containerInfo,du=!0,pu(e,t,n),fu=r,du=o;break;case 0:case 11:case 14:case 15:if(!Xl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(0!=(2&a)||0!=(4&a))&&tu(n,t,i),o=o.next}while(o!==r)}pu(e,t,n);break;case 1:if(!Xl&&(eu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Oc(n,t,e)}pu(e,t,n);break;case 21:pu(e,t,n);break;case 22:1&n.mode?(Xl=(r=Xl)||null!==n.memoizedState,pu(e,t,n),Xl=r):pu(e,t,n);break;default:pu(e,t,n)}}function mu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Jl),t.forEach((function(t){var r=_c.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function vu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:fu=u.stateNode,du=!1;break e;case 3:case 4:fu=u.stateNode.containerInfo,du=!0;break e}u=u.return}if(null===fu)throw Error(a(160));hu(i,l,o),fu=null,du=!1;var c=o.alternate;null!==c&&(c.return=null),o.return=null}catch(e){Oc(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)yu(t,e),t=t.sibling}function yu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(vu(t,e),gu(e),4&r){try{ru(3,e,e.return),ou(3,e)}catch(t){Oc(e,e.return,t)}try{ru(5,e,e.return)}catch(t){Oc(e,e.return,t)}}break;case 1:vu(t,e),gu(e),512&r&&null!==n&&eu(n,n.return);break;case 5:if(vu(t,e),gu(e),512&r&&null!==n&&eu(n,n.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(t){Oc(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,u=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===u&&"radio"===i.type&&null!=i.name&&X(o,i),be(u,l);var s=be(u,i);for(l=0;l<c.length;l+=2){var f=c[l],d=c[l+1];"style"===f?ve(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):b(o,f,d,s)}switch(u){case"input":J(o,i);break;case"textarea":ae(o,i);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(o,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(o,!!i.multiple,i.defaultValue,!0):ne(o,!!i.multiple,i.multiple?[]:"",!1))}o[ho]=i}catch(t){Oc(e,e.return,t)}}break;case 6:if(vu(t,e),gu(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){Oc(e,e.return,t)}}break;case 3:if(vu(t,e),gu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Ut(t.containerInfo)}catch(t){Oc(e,e.return,t)}break;case 4:default:vu(t,e),gu(e);break;case 13:vu(t,e),gu(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||(Uu=Xe())),4&r&&mu(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Xl=(s=Xl)||f,vu(t,e),Xl=s):vu(t,e),gu(e),8192&r){if(s=null!==e.memoizedState,(e.stateNode.isHidden=s)&&!f&&0!=(1&e.mode))for(Zl=e,f=e.child;null!==f;){for(d=Zl=f;null!==Zl;){switch(h=(p=Zl).child,p.tag){case 0:case 11:case 14:case 15:ru(4,p,p.return);break;case 1:eu(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Oc(r,n,e)}}break;case 5:eu(p,p.return);break;case 22:if(null!==p.memoizedState){Su(d);continue}}null!==h?(h.return=p,Zl=h):Su(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,s?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=d.stateNode,l=null!=(c=d.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,u.style.display=me("display",l))}catch(t){Oc(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=s?"":d.memoizedProps}catch(t){Oc(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:vu(t,e),gu(e),4&r&&mu(e);case 21:}}function gu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(lu(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),su(e,uu(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;cu(e,uu(e),i);break;default:throw Error(a(161))}}catch(t){Oc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bu(e,t,n){Zl=e,wu(e,t,n)}function wu(e,t,n){for(var r=0!=(1&e.mode);null!==Zl;){var o=Zl,a=o.child;if(22===o.tag&&r){var i=null!==o.memoizedState||Yl;if(!i){var l=o.alternate,u=null!==l&&null!==l.memoizedState||Xl;l=Yl;var c=Xl;if(Yl=i,(Xl=u)&&!c)for(Zl=o;null!==Zl;)u=(i=Zl).child,22===i.tag&&null!==i.memoizedState?ku(o):null!==u?(u.return=i,Zl=u):ku(o);for(;null!==a;)Zl=a,wu(a,t,n),a=a.sibling;Zl=o,Yl=l,Xl=c}xu(e)}else 0!=(8772&o.subtreeFlags)&&null!==a?(a.return=o,Zl=a):xu(e)}}function xu(e){for(;null!==Zl;){var t=Zl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xl||ou(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xl)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:ya(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Fa(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Fa(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var s=t.alternate;if(null!==s){var f=s.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Ut(d)}}}break;default:throw Error(a(163))}Xl||512&t.flags&&au(t)}catch(e){Oc(t,t.return,e)}}if(t===e){Zl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zl=n;break}Zl=t.return}}function Su(e){for(;null!==Zl;){var t=Zl;if(t===e){Zl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zl=n;break}Zl=t.return}}function ku(e){for(;null!==Zl;){var t=Zl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ou(4,t)}catch(e){Oc(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){Oc(t,o,e)}}var a=t.return;try{au(t)}catch(e){Oc(t,a,e)}break;case 5:var i=t.return;try{au(t)}catch(e){Oc(t,i,e)}}}catch(e){Oc(t,t.return,e)}if(t===e){Zl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Zl=l;break}Zl=t.return}}var Eu,Ou=Math.ceil,ju=w.ReactCurrentDispatcher,Cu=w.ReactCurrentOwner,Pu=w.ReactCurrentBatchConfig,_u=0,Nu=null,zu=null,Lu=0,Au=0,Iu=Oo(0),Tu=0,Ru=null,Mu=0,Du=0,Fu=0,Bu=null,$u=null,Uu=0,Wu=1/0,Vu=null,Hu=!1,qu=null,Qu=null,Gu=!1,Ku=null,Yu=0,Xu=0,Ju=null,Zu=-1,ec=0;function tc(){return 0!=(6&_u)?Xe():-1!==Zu?Zu:Zu=Xe()}function nc(e){return 0==(1&e.mode)?1:0!=(2&_u)&&0!==Lu?Lu&-Lu:null!==va.transition?(0===ec&&(ec=mt()),ec):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Yt(e.type)}function rc(e,t,n,r){if(50<Xu)throw Xu=0,Ju=null,Error(a(185));yt(e,n,r),0!=(2&_u)&&e===Nu||(e===Nu&&(0==(2&_u)&&(Du|=n),4===Tu&&uc(e,Lu)),oc(e,r),1===n&&0===_u&&0==(1&t.mode)&&(Wu=Xe()+500,Bo&&Wo()))}function oc(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),l=1<<i,u=o[i];-1===u?0!=(l&n)&&0==(l&r)||(o[i]=pt(l,t)):u<=t&&(e.expiredLanes|=l),a&=~l}}(e,t);var r=dt(e,e===Nu?Lu:0);if(0===r)null!==n&&Ge(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ge(n),1===t)0===e.tag?function(e){Bo=!0,Uo(e)}(cc.bind(null,e)):Uo(cc.bind(null,e)),io((function(){0==(6&_u)&&Wo()})),n=null;else{switch(wt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Nc(n,ac.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ac(e,t){if(Zu=-1,ec=0,0!=(6&_u))throw Error(a(327));var n=e.callbackNode;if(kc()&&e.callbackNode!==n)return null;var r=dt(e,e===Nu?Lu:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=yc(e,r);else{t=r;var o=_u;_u|=2;var i=mc();for(Nu===e&&Lu===t||(Vu=null,Wu=Xe()+500,pc(e,t));;)try{bc();break}catch(t){hc(e,t)}Sa(),ju.current=i,_u=o,null!==zu?t=0:(Nu=null,Lu=0,t=Tu)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=ic(e,o)),1===t)throw n=Ru,pc(e,0),uc(e,r),oc(e,Xe()),n;if(6===t)uc(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!lr(a(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=yc(e,r))&&0!==(i=ht(e))&&(r=i,t=ic(e,i)),1===t))throw n=Ru,pc(e,0),uc(e,r),oc(e,Xe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:Sc(e,$u,Vu);break;case 3:if(uc(e,r),(130023424&r)===r&&10<(t=Uu+500-Xe())){if(0!==dt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){tc(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(Sc.bind(null,e,$u,Vu),t);break}Sc(e,$u,Vu);break;case 4:if(uc(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>o&&(o=l),r&=~i}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Ou(r/1960))-r)){e.timeoutHandle=ro(Sc.bind(null,e,$u,Vu),r);break}Sc(e,$u,Vu);break;default:throw Error(a(329))}}}return oc(e,Xe()),e.callbackNode===n?ac.bind(null,e):null}function ic(e,t){var n=Bu;return e.current.memoizedState.isDehydrated&&(pc(e,t).flags|=256),2!==(e=yc(e,t))&&(t=$u,$u=n,null!==t&&lc(t)),e}function lc(e){null===$u?$u=e:$u.push.apply($u,e)}function uc(e,t){for(t&=~Fu,t&=~Du,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function cc(e){if(0!=(6&_u))throw Error(a(327));kc();var t=dt(e,0);if(0==(1&t))return oc(e,Xe()),null;var n=yc(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=ic(e,r))}if(1===n)throw n=Ru,pc(e,0),uc(e,t),oc(e,Xe()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Sc(e,$u,Vu),oc(e,Xe()),null}function sc(e,t){var n=_u;_u|=1;try{return e(t)}finally{0===(_u=n)&&(Wu=Xe()+500,Bo&&Wo())}}function fc(e){null!==Ku&&0===Ku.tag&&0==(6&_u)&&kc();var t=_u;_u|=1;var n=Pu.transition,r=bt;try{if(Pu.transition=null,bt=1,e)return e()}finally{bt=r,Pu.transition=n,0==(6&(_u=t))&&Wo()}}function dc(){Au=Iu.current,jo(Iu)}function pc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==zu)for(n=zu.return;null!==n;){var r=n;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Io();break;case 3:ai(),jo(No),jo(_o),fi();break;case 5:li(r);break;case 4:ai();break;case 13:case 19:jo(ui);break;case 10:ka(r.type._context);break;case 22:case 23:dc()}n=n.return}if(Nu=e,zu=e=Ic(e.current,null),Lu=Au=t,Tu=0,Ru=null,Fu=Du=Mu=0,$u=Bu=null,null!==Ca){for(t=0;t<Ca.length;t++)if(null!==(r=(n=Ca[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var i=a.next;a.next=o,r.next=i}n.pending=r}Ca=null}return e}function hc(e,t){for(;;){var n=zu;try{if(Sa(),di.current=il,gi){for(var r=mi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}gi=!1}if(hi=0,yi=vi=mi=null,bi=!1,wi=0,Cu.current=null,null===n||null===n.return){Tu=1,Ru=t,zu=null;break}e:{var i=e,l=n.return,u=n,c=t;if(t=Lu,u.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var s=c,f=u,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=yl(l);if(null!==h){h.flags&=-257,gl(h,l,u,0,t),1&h.mode&&vl(i,s,t),c=s;var m=(t=h).updateQueue;if(null===m){var v=new Set;v.add(c),t.updateQueue=v}else m.add(c);break e}if(0==(1&t)){vl(i,s,t),vc();break e}c=Error(a(426))}else if(aa&&1&u.mode){var y=yl(l);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),gl(y,l,u,0,t),ma(sl(c,u));break e}}i=c=sl(c,u),4!==Tu&&(Tu=2),null===Bu?Bu=[i]:Bu.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Ma(i,hl(0,c,t));break e;case 1:u=c;var g=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof g.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Qu||!Qu.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Ma(i,ml(i,u,t));break e}}i=i.return}while(null!==i)}xc(n)}catch(e){t=e,zu===n&&null!==n&&(zu=n=n.return);continue}break}}function mc(){var e=ju.current;return ju.current=il,null===e?il:e}function vc(){0!==Tu&&3!==Tu&&2!==Tu||(Tu=4),null===Nu||0==(268435455&Mu)&&0==(268435455&Du)||uc(Nu,Lu)}function yc(e,t){var n=_u;_u|=2;var r=mc();for(Nu===e&&Lu===t||(Vu=null,pc(e,t));;)try{gc();break}catch(t){hc(e,t)}if(Sa(),_u=n,ju.current=r,null!==zu)throw Error(a(261));return Nu=null,Lu=0,Tu}function gc(){for(;null!==zu;)wc(zu)}function bc(){for(;null!==zu&&!Ke();)wc(zu)}function wc(e){var t=Eu(e.alternate,e,Au);e.memoizedProps=e.pendingProps,null===t?xc(e):zu=t,Cu.current=null}function xc(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Gl(n,t,Au)))return void(zu=n)}else{if(null!==(n=Kl(n,t)))return n.flags&=32767,void(zu=n);if(null===e)return Tu=6,void(zu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(zu=t);zu=t=e}while(null!==t);0===Tu&&(Tu=5)}function Sc(e,t,n){var r=bt,o=Pu.transition;try{Pu.transition=null,bt=1,function(e,t,n,r){do{kc()}while(null!==Ku);if(0!=(6&_u))throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-it(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,i),e===Nu&&(zu=Nu=null,Lu=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Gu||(Gu=!0,Nc(tt,(function(){return kc(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Pu.transition,Pu.transition=null;var l=bt;bt=1;var u=_u;_u|=4,Cu.current=null,function(e,t){if(eo=Vt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,u=-1,c=-1,s=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(u=l+o),d!==i||0!==r&&3!==d.nodeType||(c=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++s===o&&(u=l),p===i&&++f===r&&(c=l),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===c?null:{start:u,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Vt=!1,Zl=t;null!==Zl;)if(e=(t=Zl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Zl=e;else for(;null!==Zl;){t=Zl;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var v=m.memoizedProps,y=m.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?v:ya(t.type,v),y);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(a(163))}}catch(e){Oc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zl=e;break}Zl=t.return}m=nu,nu=!1}(e,n),yu(n,e),hr(to),Vt=!!eo,to=eo=null,e.current=n,bu(n,e,o),Ye(),_u=u,bt=l,Pu.transition=i}else e.current=n;if(Gu&&(Gu=!1,Ku=e,Yu=o),0===(i=e.pendingLanes)&&(Qu=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),oc(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Hu)throw Hu=!1,e=qu,qu=null,e;0!=(1&Yu)&&0!==e.tag&&kc(),0!=(1&(i=e.pendingLanes))?e===Ju?Xu++:(Xu=0,Ju=e):Xu=0,Wo()}(e,t,n,r)}finally{Pu.transition=o,bt=r}return null}function kc(){if(null!==Ku){var e=wt(Yu),t=Pu.transition,n=bt;try{if(Pu.transition=null,bt=16>e?16:e,null===Ku)var r=!1;else{if(e=Ku,Ku=null,Yu=0,0!=(6&_u))throw Error(a(331));var o=_u;for(_u|=4,Zl=e.current;null!==Zl;){var i=Zl,l=i.child;if(0!=(16&Zl.flags)){var u=i.deletions;if(null!==u){for(var c=0;c<u.length;c++){var s=u[c];for(Zl=s;null!==Zl;){var f=Zl;switch(f.tag){case 0:case 11:case 15:ru(8,f,i)}var d=f.child;if(null!==d)d.return=f,Zl=d;else for(;null!==Zl;){var p=(f=Zl).sibling,h=f.return;if(iu(f),f===s){Zl=null;break}if(null!==p){p.return=h,Zl=p;break}Zl=h}}}var m=i.alternate;if(null!==m){var v=m.child;if(null!==v){m.child=null;do{var y=v.sibling;v.sibling=null,v=y}while(null!==v)}}Zl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Zl=l;else e:for(;null!==Zl;){if(0!=(2048&(i=Zl).flags))switch(i.tag){case 0:case 11:case 15:ru(9,i,i.return)}var g=i.sibling;if(null!==g){g.return=i.return,Zl=g;break e}Zl=i.return}}var b=e.current;for(Zl=b;null!==Zl;){var w=(l=Zl).child;if(0!=(2064&l.subtreeFlags)&&null!==w)w.return=l,Zl=w;else e:for(l=b;null!==Zl;){if(0!=(2048&(u=Zl).flags))try{switch(u.tag){case 0:case 11:case 15:ou(9,u)}}catch(e){Oc(u,u.return,e)}if(u===l){Zl=null;break e}var x=u.sibling;if(null!==x){x.return=u.return,Zl=x;break e}Zl=u.return}}if(_u=o,Wo(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Pu.transition=t}}return!1}function Ec(e,t,n){e=Ta(e,t=hl(0,t=sl(n,t),1),1),t=tc(),null!==e&&(yt(e,1,t),oc(e,t))}function Oc(e,t,n){if(3===e.tag)Ec(e,e,n);else for(;null!==t;){if(3===t.tag){Ec(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Qu||!Qu.has(r))){t=Ta(t,e=ml(t,e=sl(n,e),1),1),e=tc(),null!==t&&(yt(t,1,e),oc(t,e));break}}t=t.return}}function jc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tc(),e.pingedLanes|=e.suspendedLanes&n,Nu===e&&(Lu&n)===n&&(4===Tu||3===Tu&&(130023424&Lu)===Lu&&500>Xe()-Uu?pc(e,0):Fu|=n),oc(e,t)}function Cc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=st,0==(130023424&(st<<=1))&&(st=4194304)));var n=tc();null!==(e=Na(e,t))&&(yt(e,t,n),oc(e,n))}function Pc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Cc(e,n)}function _c(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Cc(e,n)}function Nc(e,t){return Qe(e,t)}function zc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Lc(e,t,n,r){return new zc(e,t,n,r)}function Ac(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ic(e,t){var n=e.alternate;return null===n?((n=Lc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Tc(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Ac(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case k:return Rc(n.children,o,i,t);case E:l=8,o|=8;break;case O:return(e=Lc(12,n,t,2|o)).elementType=O,e.lanes=i,e;case _:return(e=Lc(13,n,t,o)).elementType=_,e.lanes=i,e;case N:return(e=Lc(19,n,t,o)).elementType=N,e.lanes=i,e;case A:return Mc(n,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case j:l=10;break e;case C:l=9;break e;case P:l=11;break e;case z:l=14;break e;case L:l=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Lc(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Rc(e,t,n,r){return(e=Lc(7,e,r,t)).lanes=n,e}function Mc(e,t,n,r){return(e=Lc(22,e,r,t)).elementType=A,e.lanes=n,e.stateNode={isHidden:!1},e}function Dc(e,t,n){return(e=Lc(6,e,null,t)).lanes=n,e}function Fc(e,t,n){return(t=Lc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Bc(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function $c(e,t,n,r,o,a,i,l,u){return e=new Bc(e,t,n,l,u),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Lc(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},La(a),e}function Uc(e){if(!e)return Po;e:{if(Ue(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ao(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(Ao(n))return Ro(e,n,t)}return t}function Wc(e,t,n,r,o,a,i,l,u){return(e=$c(n,r,!0,e,0,a,0,l,u)).context=Uc(null),n=e.current,(a=Ia(r=tc(),o=nc(n))).callback=null!=t?t:null,Ta(n,a,o),e.current.lanes=o,yt(e,o,r),oc(e,r),e}function Vc(e,t,n,r){var o=t.current,a=tc(),i=nc(o);return n=Uc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ia(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Ta(o,t,i))&&(rc(e,o,i,a),Ra(e,o,i)),i}function Hc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function qc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Qc(e,t){qc(e,t),(e=e.alternate)&&qc(e,t)}Eu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||No.current)wl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wl=!1,function(e,t,n){switch(t.tag){case 3:Nl(t),ha();break;case 5:ii(t);break;case 1:Ao(t.type)&&Mo(t);break;case 4:oi(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Co(ga,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Co(ui,1&ui.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Dl(e,t,n):(Co(ui,1&ui.current),null!==(e=Hl(e,t,n))?e.sibling:null);Co(ui,1&ui.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Wl(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Co(ui,ui.current),r)break;return null;case 22:case 23:return t.lanes=0,Ol(e,t,n)}return Hl(e,t,n)}(e,t,n);wl=0!=(131072&e.flags)}else wl=!1,aa&&0!=(1048576&t.flags)&&ea(t,Qo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Vl(e,t),e=t.pendingProps;var o=Lo(t,_o.current);Oa(t,n),o=Ei(null,t,r,e,o,n);var i=Oi();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ao(r)?(i=!0,Mo(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,La(t),o.updater=Ua,t.stateNode=o,o._reactInternals=t,qa(t,r,e,n),t=_l(null,t,r,!0,i,n)):(t.tag=0,aa&&i&&ta(t),xl(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Vl(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Ac(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===z)return 14}return 2}(r),e=ya(r,e),o){case 0:t=Cl(null,t,r,e,n);break e;case 1:t=Pl(null,t,r,e,n);break e;case 11:t=Sl(null,t,r,e,n);break e;case 14:t=kl(null,t,r,ya(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Cl(e,t,r,o=t.elementType===r?o:ya(r,o),n);case 1:return r=t.type,o=t.pendingProps,Pl(e,t,r,o=t.elementType===r?o:ya(r,o),n);case 3:e:{if(Nl(t),null===e)throw Error(a(387));r=t.pendingProps,o=(i=t.memoizedState).element,Aa(e,t),Da(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=zl(e,t,r,n,o=sl(Error(a(423)),t));break e}if(r!==o){t=zl(e,t,r,n,o=sl(Error(a(424)),t));break e}for(oa=co(t.stateNode.containerInfo.firstChild),ra=t,aa=!0,ia=null,n=Ja(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ha(),r===o){t=Hl(e,t,n);break e}xl(e,t,r,n)}t=t.child}return t;case 5:return ii(t),null===e&&sa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==i&&no(r,i)&&(t.flags|=32),jl(e,t),xl(e,t,l,n),t.child;case 6:return null===e&&sa(t),null;case 13:return Dl(e,t,n);case 4:return oi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Xa(t,null,r,n):xl(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Sl(e,t,r,o=t.elementType===r?o:ya(r,o),n);case 7:return xl(e,t,t.pendingProps,n),t.child;case 8:case 12:return xl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,l=o.value,Co(ga,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===o.children&&!No.current){t=Hl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){l=i.child;for(var c=u.firstContext;null!==c;){if(c.context===r){if(1===i.tag){(c=Ia(-1,n&-n)).tag=2;var s=i.updateQueue;if(null!==s){var f=(s=s.shared).pending;null===f?c.next=c:(c.next=f.next,f.next=c),s.pending=c}}i.lanes|=n,null!==(c=i.alternate)&&(c.lanes|=n),Ea(i.return,n,t),u.lanes|=n;break}c=c.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(a(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),Ea(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}xl(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Oa(t,n),r=r(o=ja(o)),t.flags|=1,xl(e,t,r,n),t.child;case 14:return o=ya(r=t.type,t.pendingProps),kl(e,t,r,o=ya(r.type,o),n);case 15:return El(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ya(r,o),Vl(e,t),t.tag=1,Ao(r)?(e=!0,Mo(t)):e=!1,Oa(t,n),Va(t,r,o),qa(t,r,o,n),_l(null,t,r,!0,e,n);case 19:return Wl(e,t,n);case 22:return Ol(e,t,n)}throw Error(a(156,t.tag))};var Gc="function"==typeof reportError?reportError:function(e){console.error(e)};function Kc(e){this._internalRoot=e}function Yc(e){this._internalRoot=e}function Xc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Jc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zc(){}function es(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a;if("function"==typeof o){var l=o;o=function(){var e=Hc(i);l.call(e)}}Vc(t,i,e,o)}else i=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=Hc(i);a.call(e)}}var i=Wc(t,r,e,0,null,!1,0,"",Zc);return e._reactRootContainer=i,e[mo]=i.current,Ur(8===e.nodeType?e.parentNode:e),fc(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=Hc(u);l.call(e)}}var u=$c(e,0,!1,null,0,!1,0,"",Zc);return e._reactRootContainer=u,e[mo]=u.current,Ur(8===e.nodeType?e.parentNode:e),fc((function(){Vc(t,u,n,r)})),u}(n,t,e,o,r);return Hc(i)}Yc.prototype.render=Kc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Vc(e,t,null,null)},Yc.prototype.unmount=Kc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;fc((function(){Vc(null,e,null,null)})),t[mo]=null}},Yc.prototype.unstable_scheduleHydration=function(e){if(e){var t=Et();e={blockedOn:null,target:e,priority:t};for(var n=0;n<At.length&&0!==t&&t<At[n].priority;n++);At.splice(n,0,e),0===n&&Mt(e)}},xt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),oc(t,Xe()),0==(6&_u)&&(Wu=Xe()+500,Wo()))}break;case 13:fc((function(){var t=Na(e,1);if(null!==t){var n=tc();rc(t,e,1,n)}})),Qc(e,1)}},St=function(e){if(13===e.tag){var t=Na(e,134217728);null!==t&&rc(t,e,134217728,tc()),Qc(e,134217728)}},kt=function(e){if(13===e.tag){var t=nc(e),n=Na(e,t);null!==n&&rc(n,e,t,tc()),Qc(e,t)}},Et=function(){return bt},Ot=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Se=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=So(r);if(!o)throw Error(a(90));Q(r),J(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=sc,_e=fc;var ts={usingClientEntryPoint:!1,Events:[wo,xo,So,je,Ce,sc]},ns={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rs={bundleType:ns.bundleType,version:ns.version,rendererPackageName:ns.rendererPackageName,rendererConfig:ns.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:ns.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var os=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!os.isDisabled&&os.supportsFiber)try{ot=os.inject(rs),at=os}catch(se){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ts,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xc(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xc(e))throw Error(a(299));var n=!1,r="",o=Gc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=$c(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,Ur(8===e.nodeType?e.parentNode:e),new Kc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return fc(e)},t.hydrate=function(e,t,n){if(!Jc(t))throw Error(a(200));return es(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xc(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",l=Gc;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Wc(t,null,e,1,null!=n?n:null,o,0,i,l),e[mo]=t.current,Ur(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Yc(t)},t.render=function(e,t,n){if(!Jc(t))throw Error(a(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Jc(e))throw Error(a(40));return!!e._reactRootContainer&&(fc((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=sc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Jc(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return es(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:function(e,t,n){"use strict";var r=n(935);t.s=r.createRoot,r.hydrateRoot},935:function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:function(e,t){"use strict";var n,r=Symbol.for("react.element"),o=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),u=Symbol.for("react.provider"),c=Symbol.for("react.context"),s=Symbol.for("react.server_context"),f=Symbol.for("react.forward_ref"),d=Symbol.for("react.suspense"),p=Symbol.for("react.suspense_list"),h=Symbol.for("react.memo"),m=Symbol.for("react.lazy"),v=Symbol.for("react.offscreen");n=Symbol.for("react.module.reference"),t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===l||e===i||e===d||e===p||e===v||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===h||e.$$typeof===u||e.$$typeof===c||e.$$typeof===f||e.$$typeof===n||void 0!==e.getModuleId)},t.typeOf=function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case a:case l:case i:case d:case p:return e;default:switch(e=e&&e.$$typeof){case s:case c:case f:case m:case h:case u:return e;default:return t}}case o:return t}}}},864:function(e,t,n){"use strict";e.exports=n(921)},251:function(e,t,n){"use strict";var r=n(294),o=Symbol.for("react.element"),a=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,u={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,a={},c=null,s=null;for(r in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(s=t.ref),t)i.call(t,r)&&!u.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:o,type:e,key:c,ref:s,props:a,_owner:l.current}}t.Fragment=a,t.jsx=c,t.jsxs=c},408:function(e,t){"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,v={};function y(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=y.prototype;var w=b.prototype=new g;w.constructor=b,m(w,y.prototype),w.isPureReactComponent=!0;var x=Array.isArray,S=Object.prototype.hasOwnProperty,k={current:null},E={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,r){var o,a={},i=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)S.call(t,o)&&!E.hasOwnProperty(o)&&(a[o]=t[o]);var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];a.children=c}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===a[o]&&(a[o]=u[o]);return{$$typeof:n,type:e,key:i,ref:l,props:a,_owner:k.current}}function j(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var C=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function _(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return i=i(u=e),e=""===a?"."+P(u,0):a,x(i)?(o="",null!=e&&(o=e.replace(C,"$&/")+"/"),_(i,t,o,"",(function(e){return e}))):null!=i&&(j(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(C,"$&/")+"/")+e)),t.push(i)),1;if(u=0,a=""===a?".":a+":",x(e))for(var c=0;c<e.length;c++){var s=a+P(l=e[c],c);u+=_(l,t,o,s,i)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),c=0;!(l=e.next()).done;)u+=_(l=l.value,t,o,s=a+P(l,c++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function N(e,t,n){if(null==e)return e;var r=[],o=0;return _(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function z(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var L={current:null},A={transition:null},I={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:A,ReactCurrentOwner:k};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!j(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=s,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=I,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=k.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)S.call(t,c)&&!E.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=r;else if(1<c){u=Array(c);for(var s=0;s<c;s++)u[s]=arguments[s+2];o.children=u}return{$$typeof:n,type:e.type,key:a,ref:i,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=O,t.createFactory=function(e){var t=O.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=j,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:z}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=A.transition;A.transition={};try{e()}finally{A.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return L.current.useCallback(e,t)},t.useContext=function(e){return L.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return L.current.useDeferredValue(e)},t.useEffect=function(e,t){return L.current.useEffect(e,t)},t.useId=function(){return L.current.useId()},t.useImperativeHandle=function(e,t,n){return L.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return L.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return L.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return L.current.useMemo(e,t)},t.useReducer=function(e,t,n){return L.current.useReducer(e,t,n)},t.useRef=function(e){return L.current.useRef(e)},t.useState=function(e){return L.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return L.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return L.current.useTransition()},t.version="18.2.0"},294:function(e,t,n){"use strict";e.exports=n(408)},893:function(e,t,n){"use strict";e.exports=n(251)},53:function(e,t){"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,u=e[l],c=l+1,s=e[c];if(0>a(u,n))c<o&&0>a(s,u)?(e[r]=s,e[c]=n,r=c):(e[r]=u,e[l]=n,r=l);else{if(!(c<o&&0>a(s,n)))break e;e[r]=s,e[c]=n,r=c}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var c=[],s=[],f=1,d=null,p=3,h=!1,m=!1,v=!1,y="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(s);null!==t;){if(null===t.callback)o(s);else{if(!(t.startTime<=e))break;o(s),t.sortIndex=t.expirationTime,n(c,t)}t=r(s)}}function x(e){if(v=!1,w(e),!m)if(null!==r(c))m=!0,A(S);else{var t=r(s);null!==t&&I(x,t.startTime-e)}}function S(e,n){m=!1,v&&(v=!1,g(j),j=-1),h=!0;var a=p;try{for(w(n),d=r(c);null!==d&&(!(d.expirationTime>n)||e&&!_());){var i=d.callback;if("function"==typeof i){d.callback=null,p=d.priorityLevel;var l=i(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?d.callback=l:d===r(c)&&o(c),w(n)}else o(c);d=r(c)}if(null!==d)var u=!0;else{var f=r(s);null!==f&&I(x,f.startTime-n),u=!1}return u}finally{d=null,p=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,E=!1,O=null,j=-1,C=5,P=-1;function _(){return!(t.unstable_now()-P<C)}function N(){if(null!==O){var e=t.unstable_now();P=e;var n=!0;try{n=O(!0,e)}finally{n?k():(E=!1,O=null)}}else E=!1}if("function"==typeof b)k=function(){b(N)};else if("undefined"!=typeof MessageChannel){var z=new MessageChannel,L=z.port2;z.port1.onmessage=N,k=function(){L.postMessage(null)}}else k=function(){y(N,0)};function A(e){O=e,E||(E=!0,k())}function I(e,n){j=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,A(S))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,n(s,e),null===r(c)&&e===r(s)&&(v?(g(j),j=-1):v=!0,I(x,a-i))):(e.sortIndex=l,n(c,e),m||h||(m=!0,A(S))),e},t.unstable_shouldYield=_,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:function(e,t,n){"use strict";e.exports=n(53)},774:function(e){e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var a=Object.keys(e),i=Object.keys(t);if(a.length!==i.length)return!1;for(var l=Object.prototype.hasOwnProperty.bind(t),u=0;u<a.length;u++){var c=a[u];if(!l(c))return!1;var s=e[c],f=t[c];if(!1===(o=n?n.call(r,s,f,c):void 0)||void 0===o&&s!==f)return!1}return!0}},250:function(e,t,n){"use strict";var r=n(294),o="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},a=r.useState,i=r.useEffect,l=r.useLayoutEffect,u=r.useDebugValue;function c(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!o(e,n)}catch(e){return!0}}var s="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),r=a({inst:{value:n,getSnapshot:t}}),o=r[0].inst,s=r[1];return l((function(){o.value=n,o.getSnapshot=t,c(o)&&s({inst:o})}),[e,n,t]),i((function(){return c(o)&&s({inst:o}),e((function(){c(o)&&s({inst:o})}))}),[e]),u(n),n};t.useSyncExternalStore=void 0!==r.useSyncExternalStore?r.useSyncExternalStore:s},139:function(e,t,n){"use strict";var r=n(294),o=n(688),a="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},i=o.useSyncExternalStore,l=r.useRef,u=r.useEffect,c=r.useMemo,s=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,o){var f=l(null);if(null===f.current){var d={hasValue:!1,value:null};f.current=d}else d=f.current;f=c((function(){function e(e){if(!u){if(u=!0,i=e,e=r(e),void 0!==o&&d.hasValue){var t=d.value;if(o(t,e))return l=t}return l=e}if(t=l,a(i,e))return t;var n=r(e);return void 0!==o&&o(t,n)?t:(i=e,l=n)}var i,l,u=!1,c=void 0===n?null:n;return[function(){return e(t())},null===c?void 0:function(){return e(c())}]}),[t,n,r,o]);var p=i(e,f[0],f[1]);return u((function(){d.hasValue=!0,d.value=p}),[p]),s(p),p}},688:function(e,t,n){"use strict";e.exports=n(250)},798:function(e,t,n){"use strict";e.exports=n(139)}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={exports:{}};return n[e](a,a.exports,o),a.exports}o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,{a:t}),t},t=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var a=Object.create(null);o.r(a);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((function(e){i[e]=function(){return n[e]}}));return i.default=function(){return n},o.d(a,i),a},o.d=function(e,t){for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},function(){var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e}(),o.nc=void 0,function(){"use strict";var e,t=o(294),n=o.t(t,2),r=o(745);function a(){return a=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const i="popstate";function l(e,t){if(!1===e||null==e)throw new Error(t)}function u(e,t){return{usr:e.state,key:e.key,idx:t}}function c(e,t,n,r){return void 0===n&&(n=null),a({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?f(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function s(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function f(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var d;function p(e,t,n){void 0===n&&(n="/");let r=C(("string"==typeof t?f(t):t).pathname||"/",n);if(null==r)return null;let o=h(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){let n=e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]));return n?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let a=null;for(let e=0;null==a&&e<o.length;++e)a=E(o[e],j(r));return a}function h(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let o=(e,o,a)=>{let i={relativePath:void 0===a?e.path||"":a,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(l(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let u=L([r,i.relativePath]),c=n.concat(i);e.children&&e.children.length>0&&(l(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+u+'".'),h(e.children,t,c,u)),(null!=e.path||e.index)&&t.push({path:u,score:k(u,e.index),routesMeta:c})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of m(e.path))o(e,t,n);else o(e,t)})),t}function m(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,o=n.endsWith("?"),a=n.replace(/\?$/,"");if(0===r.length)return o?[a,""]:[a];let i=m(r.join("/")),l=[];return l.push(...i.map((e=>""===e?a:[a,e].join("/")))),o&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(d||(d={}));const v=/^:\w+$/,y=3,g=2,b=1,w=10,x=-2,S=e=>"*"===e;function k(e,t){let n=e.split("/"),r=n.length;return n.some(S)&&(r+=x),t&&(r+=g),n.filter((e=>!S(e))).reduce(((e,t)=>e+(v.test(t)?y:""===t?b:w)),r)}function E(e,t){let{routesMeta:n}=e,r={},o="/",a=[];for(let e=0;e<n.length;++e){let i=n[e],l=e===n.length-1,u="/"===o?t:t.slice(o.length)||"/",c=O({path:i.relativePath,caseSensitive:i.caseSensitive,end:l},u);if(!c)return null;Object.assign(r,c.params);let s=i.route;a.push({params:r,pathname:L([o,c.pathname]),pathnameBase:A(L([o,c.pathnameBase])),route:s}),"/"!==c.pathnameBase&&(o=L([o,c.pathnameBase]))}return a}function O(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),P("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(r.push(t),"/([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=l[n]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return P(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(l[n]||"",t),e}),{}),pathname:a,pathnameBase:i,pattern:e}}function j(e){try{return decodeURI(e)}catch(t){return P(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function C(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function P(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function _(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function N(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function z(e,t,n,r){let o;void 0===r&&(r=!1),"string"==typeof e?o=f(e):(o=a({},e),l(!o.pathname||!o.pathname.includes("?"),_("?","pathname","search",o)),l(!o.pathname||!o.pathname.includes("#"),_("#","pathname","hash",o)),l(!o.search||!o.search.includes("#"),_("#","search","hash",o)));let i,u=""===e||""===o.pathname,c=u?"/":o.pathname;if(r||null==c)i=n;else{let e=t.length-1;if(c.startsWith("..")){let t=c.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}i=e>=0?t[e]:"/"}let s=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?f(e):e,a=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:a,search:I(r),hash:T(o)}}(o,i),d=c&&"/"!==c&&c.endsWith("/"),p=(u||"."===c)&&n.endsWith("/");return s.pathname.endsWith("/")||!d&&!p||(s.pathname+="/"),s}const L=e=>e.join("/").replace(/\/\/+/g,"/"),A=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),I=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",T=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";class R extends Error{}const M=["post","put","patch","delete"],D=(new Set(M),["get",...M]);function F(){return F=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},F.apply(this,arguments)}new Set(D),new Set([301,302,303,307,308]),new Set([307,308]),"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement,Symbol("deferred");"function"==typeof Object.is&&Object.is;const{useState:B,useEffect:$,useLayoutEffect:U,useDebugValue:W}=n;"undefined"==typeof window||void 0===window.document||window.document.createElement,n.useSyncExternalStore;const V=t.createContext(null),H=t.createContext(null),q=t.createContext(null),Q=t.createContext(null),G=t.createContext({outlet:null,matches:[]}),K=t.createContext(null);function Y(){return null!=t.useContext(Q)}function X(){return Y()||l(!1),t.useContext(Q).location}function J(){Y()||l(!1);let{basename:e,navigator:n}=t.useContext(q),{matches:r}=t.useContext(G),{pathname:o}=X(),a=JSON.stringify(N(r).map((e=>e.pathnameBase))),i=t.useRef(!1);return t.useEffect((()=>{i.current=!0})),t.useCallback((function(t,r){if(void 0===r&&(r={}),!i.current)return;if("number"==typeof t)return void n.go(t);let l=z(t,JSON.parse(a),o,"path"===r.relative);"/"!==e&&(l.pathname="/"===l.pathname?e:L([e,l.pathname])),(r.replace?n.replace:n.push)(l,r.state,r)}),[e,n,a,o])}const Z=t.createContext(null);function ee(){let{matches:e}=t.useContext(G),n=e[e.length-1];return n?n.params:{}}function te(e,n){let{relative:r}=void 0===n?{}:n,{matches:o}=t.useContext(G),{pathname:a}=X(),i=JSON.stringify(N(o).map((e=>e.pathnameBase)));return t.useMemo((()=>z(e,JSON.parse(i),a,"path"===r)),[e,i,a,r])}function ne(){let e=function(){var e;let n=t.useContext(K),r=function(e){let n=t.useContext(H);return n||l(!1),n}(ie.UseRouteError),o=function(e){let n=function(e){let n=t.useContext(G);return n||l(!1),n}(),r=n.matches[n.matches.length-1];return r.route.id||l(!1),r.route.id}(ie.UseRouteError);return n||(null==(e=r.errors)?void 0:e[o])}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,o={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:o},r):null,null)}class re extends t.Component{constructor(e){super(e),this.state={location:e.location,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location?{error:e.error,location:e.location}:{error:e.error||t.error,location:t.location}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?t.createElement(G.Provider,{value:this.props.routeContext},t.createElement(K.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function oe(e){let{routeContext:n,match:r,children:o}=e,a=t.useContext(V);return a&&a.static&&a.staticContext&&r.route.errorElement&&(a.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(G.Provider,{value:n},o)}var ae,ie,le;function ue(e){let{to:n,replace:r,state:o,relative:a}=e;Y()||l(!1);let i=t.useContext(H),u=J();return t.useEffect((()=>{i&&"idle"!==i.navigation.state||u(n,{replace:r,state:o,relative:a})})),null}function ce(e){return function(e){let n=t.useContext(G).outlet;return n?t.createElement(Z.Provider,{value:e},n):n}(e.context)}function se(e){l(!1)}function fe(n){let{basename:r="/",children:o=null,location:a,navigationType:i=e.Pop,navigator:u,static:c=!1}=n;Y()&&l(!1);let s=r.replace(/^\/*/,"/"),d=t.useMemo((()=>({basename:s,navigator:u,static:c})),[s,u,c]);"string"==typeof a&&(a=f(a));let{pathname:p="/",search:h="",hash:m="",state:v=null,key:y="default"}=a,g=t.useMemo((()=>{let e=C(p,s);return null==e?null:{pathname:e,search:h,hash:m,state:v,key:y}}),[s,p,h,m,v,y]);return null==g?null:t.createElement(q.Provider,{value:d},t.createElement(Q.Provider,{children:o,value:{location:g,navigationType:i}}))}function de(n){let{children:r,location:o}=n,a=t.useContext(V);return function(n,r){Y()||l(!1);let{navigator:o}=t.useContext(q),a=t.useContext(H),{matches:i}=t.useContext(G),u=i[i.length-1],c=u?u.params:{},s=(u&&u.pathname,u?u.pathnameBase:"/");u&&u.route;let d,h=X();if(r){var m;let e="string"==typeof r?f(r):r;"/"===s||(null==(m=e.pathname)?void 0:m.startsWith(s))||l(!1),d=e}else d=h;let v=d.pathname||"/",y=p(n,{pathname:"/"===s?v:v.slice(s.length)||"/"}),g=function(e,n,r){if(void 0===n&&(n=[]),null==e){if(null==r||!r.errors)return null;e=r.matches}let o=e,a=null==r?void 0:r.errors;if(null!=a){let e=o.findIndex((e=>e.route.id&&(null==a?void 0:a[e.route.id])));e>=0||l(!1),o=o.slice(0,Math.min(o.length,e+1))}return o.reduceRight(((e,i,l)=>{let u=i.route.id?null==a?void 0:a[i.route.id]:null,c=r?i.route.errorElement||t.createElement(ne,null):null,s=n.concat(o.slice(0,l+1)),f=()=>t.createElement(oe,{match:i,routeContext:{outlet:e,matches:s}},u?c:void 0!==i.route.element?i.route.element:e);return r&&(i.route.errorElement||0===l)?t.createElement(re,{location:r.location,component:c,error:u,children:f(),routeContext:{outlet:null,matches:s}}):f()}),null)}(y&&y.map((e=>Object.assign({},e,{params:Object.assign({},c,e.params),pathname:L([s,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?s:L([s,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),i,a||void 0);return r&&g?t.createElement(Q.Provider,{value:{location:F({pathname:"/",search:"",hash:"",state:null,key:"default"},d),navigationType:e.Pop}},g):g}(a&&!r?a.router.routes:he(r),o)}!function(e){e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator"}(ae||(ae={})),function(e){e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator"}(ie||(ie={})),function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(le||(le={})),new Promise((()=>{}));class pe extends t.Component{constructor(e){super(e),this.state={error:null}}static getDerivedStateFromError(e){return{error:e}}componentDidCatch(e,t){console.error("<Await> caught the following error during render",e,t)}render(){let{children:e,errorElement:t,resolve:n}=this.props,r=null,o=le.pending;if(n instanceof Promise)if(this.state.error){le.error;let e=this.state.error;Promise.reject().catch((()=>{})),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_error",{get:()=>e})}else n._tracked?void 0!==r._error?le.error:void 0!==r._data?le.success:le.pending:(le.pending,Object.defineProperty(n,"_tracked",{get:()=>!0}),n.then((e=>Object.defineProperty(n,"_data",{get:()=>e})),(e=>Object.defineProperty(n,"_error",{get:()=>e}))));else le.success,Promise.resolve(),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_data",{get:()=>n});if(o===le.error&&r._error instanceof AbortedDeferredError)throw neverSettledPromise;if(o===le.error&&!t)throw r._error;if(o===le.error)return React.createElement(AwaitContext.Provider,{value:r,children:t});if(o===le.success)return React.createElement(AwaitContext.Provider,{value:r,children:e});throw r}}function he(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,o)=>{if(!t.isValidElement(e))return;if(e.type===t.Fragment)return void r.push.apply(r,he(e.props.children,n));e.type!==se&&l(!1),e.props.index&&e.props.children&&l(!1);let a=[...n,o],i={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,hasErrorBoundary:null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle};e.props.children&&(i.children=he(e.props.children,a)),r.push(i)})),r}function me(){return me=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},me.apply(this,arguments)}const ve=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"];function ye(n){let{basename:r,children:o,window:d}=n,p=t.useRef();var h;null==p.current&&(p.current=(void 0===(h={window:d,v5Compat:!0})&&(h={}),function(t,n,r,o){void 0===o&&(o={});let{window:f=document.defaultView,v5Compat:d=!1}=o,p=f.history,h=e.Pop,m=null,v=y();function y(){return(p.state||{idx:null}).idx}function g(){h=e.Pop;let t=y(),n=null==t?null:t-v;v=t,m&&m({action:h,location:w.location,delta:n})}function b(e){let t="null"!==f.location.origin?f.location.origin:f.location.href,n="string"==typeof e?e:s(e);return l(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==v&&(v=0,p.replaceState(a({},p.state,{idx:v}),""));let w={get action(){return h},get location(){return t(f,p)},listen(e){if(m)throw new Error("A history only accepts one active listener");return f.addEventListener(i,g),m=e,()=>{f.removeEventListener(i,g),m=null}},createHref(e){return n(f,e)},createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,n){h=e.Push;let o=c(w.location,t,n);r&&r(o,t),v=y()+1;let a=u(o,v),i=w.createHref(o);try{p.pushState(a,"",i)}catch(e){f.location.assign(i)}d&&m&&m({action:h,location:w.location,delta:1})},replace:function(t,n){h=e.Replace;let o=c(w.location,t,n);r&&r(o,t),v=y();let a=u(o,v),i=w.createHref(o);p.replaceState(a,"",i),d&&m&&m({action:h,location:w.location,delta:0})},go(e){return p.go(e)}};return w}((function(e,t){let{pathname:n="/",search:r="",hash:o=""}=f(e.location.hash.substr(1));return c("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:s(t))}),(function(e,t){!function(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),h)));let m=p.current,[v,y]=t.useState({action:m.action,location:m.location});return t.useLayoutEffect((()=>m.listen(y)),[m]),t.createElement(fe,{basename:r,children:o,location:v.location,navigationType:v.action,navigator:m})}const ge="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,be=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,we=t.forwardRef((function(e,n){let r,{onClick:o,relative:a,reloadDocument:i,replace:u,state:c,target:f,to:d,preventScrollReset:p}=e,h=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,ve),{basename:m}=t.useContext(q),v=!1;if("string"==typeof d&&be.test(d)&&(r=d,ge)){let e=new URL(window.location.href),t=d.startsWith("//")?new URL(e.protocol+d):new URL(d),n=C(t.pathname,m);t.origin===e.origin&&null!=n?d=n+t.search+t.hash:v=!0}let y=function(e,n){let{relative:r}=void 0===n?{}:n;Y()||l(!1);let{basename:o,navigator:a}=t.useContext(q),{hash:i,pathname:u,search:c}=te(e,{relative:r}),s=u;return"/"!==o&&(s="/"===u?o:L([o,u])),a.createHref({pathname:s,search:c,hash:i})}(d,{relative:a}),g=function(e,n){let{target:r,replace:o,state:a,preventScrollReset:i,relative:l}=void 0===n?{}:n,u=J(),c=X(),f=te(e,{relative:l});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==o?o:s(c)===s(f);u(e,{replace:n,state:a,preventScrollReset:i,relative:l})}}),[c,u,f,o,a,r,e,i,l])}(d,{replace:u,state:c,target:f,preventScrollReset:p,relative:a});return t.createElement("a",me({},h,{href:r||y,onClick:v||i?o:function(e){o&&o(e),e.defaultPrevented||g(e)},ref:n,target:f}))}));var xe,Se;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmitImpl="useSubmitImpl",e.UseFetcher="useFetcher"})(xe||(xe={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Se||(Se={}));var ke=o.p+"7ac9efb47d97d6eaa21092a94bb86bbb.svg",Ee=o(864),Oe=o(774),je=o.n(Oe),Ce=function(e){function t(e,r,u,c,d){for(var p,h,m,v,w,S=0,k=0,E=0,O=0,j=0,L=0,I=m=p=0,R=0,M=0,D=0,F=0,B=u.length,$=B-1,U="",W="",V="",H="";R<B;){if(h=u.charCodeAt(R),R===$&&0!==k+O+E+S&&(0!==k&&(h=47===k?10:47),O=E=S=0,B++,$++),0===k+O+E+S){if(R===$&&(0<M&&(U=U.replace(f,"")),0<U.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:U+=u.charAt(R)}h=59}switch(h){case 123:for(p=(U=U.trim()).charCodeAt(0),m=1,F=++R;R<B;){switch(h=u.charCodeAt(R)){case 123:m++;break;case 125:m--;break;case 47:switch(h=u.charCodeAt(R+1)){case 42:case 47:e:{for(I=R+1;I<$;++I)switch(u.charCodeAt(I)){case 47:if(42===h&&42===u.charCodeAt(I-1)&&R+2!==I){R=I+1;break e}break;case 10:if(47===h){R=I+1;break e}}R=I}}break;case 91:h++;case 40:h++;case 34:case 39:for(;R++<$&&u.charCodeAt(R)!==h;);}if(0===m)break;R++}if(m=u.substring(F,R),0===p&&(p=(U=U.replace(s,"").trim()).charCodeAt(0)),64===p){switch(0<M&&(U=U.replace(f,"")),h=U.charCodeAt(1)){case 100:case 109:case 115:case 45:M=r;break;default:M=z}if(F=(m=t(r,M,m,h,d+1)).length,0<A&&(w=l(3,m,M=n(z,U,D),r,P,C,F,h,d,c),U=M.join(""),void 0!==w&&0===(F=(m=w.trim()).length)&&(h=0,m="")),0<F)switch(h){case 115:U=U.replace(x,i);case 100:case 109:case 45:m=U+"{"+m+"}";break;case 107:m=(U=U.replace(y,"$1 $2"))+"{"+m+"}",m=1===N||2===N&&a("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=U+m,112===c&&(W+=m,m="")}else m=""}else m=t(r,n(r,U,D),m,c,d+1);V+=m,m=D=M=I=p=0,U="",h=u.charCodeAt(++R);break;case 125:case 59:if(1<(F=(U=(0<M?U.replace(f,""):U).trim()).length))switch(0===I&&(p=U.charCodeAt(0),45===p||96<p&&123>p)&&(F=(U=U.replace(" ",":")).length),0<A&&void 0!==(w=l(1,U,r,e,P,C,W.length,c,d,c))&&0===(F=(U=w.trim()).length)&&(U="\0\0"),p=U.charCodeAt(0),h=U.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){H+=U+u.charAt(R);break}default:58!==U.charCodeAt(F-1)&&(W+=o(U,p,h,U.charCodeAt(2)))}D=M=I=p=0,U="",h=u.charCodeAt(++R)}}switch(h){case 13:case 10:47===k?k=0:0===1+p&&107!==c&&0<U.length&&(M=1,U+="\0"),0<A*T&&l(0,U,r,e,P,C,W.length,c,d,c),C=1,P++;break;case 59:case 125:if(0===k+O+E+S){C++;break}default:switch(C++,v=u.charAt(R),h){case 9:case 32:if(0===O+S+k)switch(j){case 44:case 58:case 9:case 32:v="";break;default:32!==h&&(v=" ")}break;case 0:v="\\0";break;case 12:v="\\f";break;case 11:v="\\v";break;case 38:0===O+k+S&&(M=D=1,v="\f"+v);break;case 108:if(0===O+k+S+_&&0<I)switch(R-I){case 2:112===j&&58===u.charCodeAt(R-3)&&(_=j);case 8:111===L&&(_=L)}break;case 58:0===O+k+S&&(I=R);break;case 44:0===k+E+O+S&&(M=1,v+="\r");break;case 34:case 39:0===k&&(O=O===h?0:0===O?h:O);break;case 91:0===O+k+E&&S++;break;case 93:0===O+k+E&&S--;break;case 41:0===O+k+S&&E--;break;case 40:0===O+k+S&&(0===p&&(2*j+3*L==533||(p=1)),E++);break;case 64:0===k+E+O+S+I+m&&(m=1);break;case 42:case 47:if(!(0<O+S+E))switch(k){case 0:switch(2*h+3*u.charCodeAt(R+1)){case 235:k=47;break;case 220:F=R,k=42}break;case 42:47===h&&42===j&&F+2!==R&&(33===u.charCodeAt(F+2)&&(W+=u.substring(F,R+1)),v="",k=0)}}0===k&&(U+=v)}L=j,j=h,R++}if(0<(F=W.length)){if(M=r,0<A&&void 0!==(w=l(2,W,M,e,P,C,F,c,d,c))&&0===(W=w).length)return H+W+V;if(W=M.join(",")+"{"+W+"}",0!=N*_){switch(2!==N||a(W,2)||(_=0),_){case 111:W=W.replace(b,":-moz-$1")+W;break;case 112:W=W.replace(g,"::-webkit-input-$1")+W.replace(g,"::-moz-$1")+W.replace(g,":-ms-input-$1")+W}_=0}}return H+W+V}function n(e,t,n){var o=t.trim().split(m);t=o;var a=o.length,i=e.length;switch(i){case 0:case 1:var l=0;for(e=0===i?"":e[0]+" ";l<a;++l)t[l]=r(e,t[l],n).trim();break;default:var u=l=0;for(t=[];l<a;++l)for(var c=0;c<i;++c)t[u++]=r(e[c]+" ",o[l],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(v,"$1"+e.trim());case 58:return e.trim()+t.replace(v,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(v,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var i=e+";",l=2*t+3*n+4*r;if(944===l){e=i.indexOf(":",9)+1;var u=i.substring(e,i.length-1).trim();return u=i.substring(0,e).trim()+u+";",1===N||2===N&&a(u,1)?"-webkit-"+u+u:u}if(0===N||2===N&&!a(i,1))return i;switch(l){case 1015:return 97===i.charCodeAt(10)?"-webkit-"+i+i:i;case 951:return 116===i.charCodeAt(3)?"-webkit-"+i+i:i;case 963:return 110===i.charCodeAt(5)?"-webkit-"+i+i:i;case 1009:if(100!==i.charCodeAt(4))break;case 969:case 942:return"-webkit-"+i+i;case 978:return"-webkit-"+i+"-moz-"+i+i;case 1019:case 983:return"-webkit-"+i+"-moz-"+i+"-ms-"+i+i;case 883:if(45===i.charCodeAt(8))return"-webkit-"+i+i;if(0<i.indexOf("image-set(",11))return i.replace(j,"$1-webkit-$2")+i;break;case 932:if(45===i.charCodeAt(4))switch(i.charCodeAt(5)){case 103:return"-webkit-box-"+i.replace("-grow","")+"-webkit-"+i+"-ms-"+i.replace("grow","positive")+i;case 115:return"-webkit-"+i+"-ms-"+i.replace("shrink","negative")+i;case 98:return"-webkit-"+i+"-ms-"+i.replace("basis","preferred-size")+i}return"-webkit-"+i+"-ms-"+i+i;case 964:return"-webkit-"+i+"-ms-flex-"+i+i;case 1023:if(99!==i.charCodeAt(8))break;return"-webkit-box-pack"+(u=i.substring(i.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+i+"-ms-flex-pack"+u+i;case 1005:return p.test(i)?i.replace(d,":-webkit-")+i.replace(d,":-moz-")+i:i;case 1e3:switch(t=(u=i.substring(13).trim()).indexOf("-")+1,u.charCodeAt(0)+u.charCodeAt(t)){case 226:u=i.replace(w,"tb");break;case 232:u=i.replace(w,"tb-rl");break;case 220:u=i.replace(w,"lr");break;default:return i}return"-webkit-"+i+"-ms-"+u+i;case 1017:if(-1===i.indexOf("sticky",9))break;case 975:switch(t=(i=e).length-10,l=(u=(33===i.charCodeAt(t)?i.substring(0,t):i).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|u.charCodeAt(7))){case 203:if(111>u.charCodeAt(8))break;case 115:i=i.replace(u,"-webkit-"+u)+";"+i;break;case 207:case 102:i=i.replace(u,"-webkit-"+(102<l?"inline-":"")+"box")+";"+i.replace(u,"-webkit-"+u)+";"+i.replace(u,"-ms-"+u+"box")+";"+i}return i+";";case 938:if(45===i.charCodeAt(5))switch(i.charCodeAt(6)){case 105:return u=i.replace("-items",""),"-webkit-"+i+"-webkit-box-"+u+"-ms-flex-"+u+i;case 115:return"-webkit-"+i+"-ms-flex-item-"+i.replace(k,"")+i;default:return"-webkit-"+i+"-ms-flex-line-pack"+i.replace("align-content","").replace(k,"")+i}break;case 973:case 989:if(45!==i.charCodeAt(3)||122===i.charCodeAt(4))break;case 931:case 953:if(!0===O.test(e))return 115===(u=e.substring(e.indexOf(":")+1)).charCodeAt(0)?o(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):i.replace(u,"-webkit-"+u)+i.replace(u,"-moz-"+u.replace("fill-",""))+i;break;case 962:if(i="-webkit-"+i+(102===i.charCodeAt(5)?"-ms-"+i:"")+i,211===n+r&&105===i.charCodeAt(13)&&0<i.indexOf("transform",10))return i.substring(0,i.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+i}return i}function a(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),I(2!==t?r:r.replace(E,"$1"),n,t)}function i(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(S," or ($1)").substring(4):"("+t+")"}function l(e,t,n,r,o,a,i,l,u,s){for(var f,d=0,p=t;d<A;++d)switch(f=L[d].call(c,e,p,n,r,o,a,i,l,u,s)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function u(e){return void 0!==(e=e.prefix)&&(I=null,e?"function"!=typeof e?N=1:(N=2,I=e):N=0),u}function c(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<A){var o=l(-1,n,r,r,P,C,0,0,0,0);void 0!==o&&"string"==typeof o&&(n=o)}var a=t(z,r,n,0,0);return 0<A&&void 0!==(o=l(-2,a,r,r,P,C,a.length,0,0,0))&&(a=o),_=0,C=P=1,a}var s=/^\0+/g,f=/[\0\r\f]/g,d=/: */g,p=/zoo|gra/,h=/([,: ])(transform)/g,m=/,\r+?/g,v=/([\t\r\n ])*\f?&/g,y=/@(k\w+)\s*(\S*)\s*/,g=/::(place)/g,b=/:(read-only)/g,w=/[svh]\w+-[tblr]{2}/,x=/\(\s*(.*)\s*\)/g,S=/([\s\S]*?);/g,k=/-self|flex-/g,E=/[^]*?(:[rp][el]a[\w-]+)[^]*/,O=/stretch|:\s*\w+\-(?:conte|avail)/,j=/([^-])(image-set\()/,C=1,P=1,_=0,N=1,z=[],L=[],A=0,I=null,T=0;return c.use=function e(t){switch(t){case void 0:case null:A=L.length=0;break;default:if("function"==typeof t)L[A++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else T=0|!!t}return e},c.set=u,void 0!==e&&u(e),c},Pe={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},_e=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}},Ne=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,ze=_e((function(e){return Ne.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),Le=o(679),Ae=o.n(Le);function Ie(){return(Ie=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Te=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},Re=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,Ee.typeOf)(e)},Me=Object.freeze([]),De=Object.freeze({});function Fe(e){return"function"==typeof e}function Be(e){return e.displayName||e.name||"Component"}function $e(e){return e&&"string"==typeof e.styledComponentId}var Ue="undefined"!=typeof process&&void 0!==process.env&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",We="undefined"!=typeof window&&"HTMLElement"in window,Ve=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env&&(void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY)),He={};function qe(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var Qe=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&qe(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var a=r;a<o;a++)this.groupSizes[a]=0}for(var i=this.indexOfGroup(e+1),l=0,u=t.length;l<u;l++)this.tag.insertRule(i,t[l])&&(this.groupSizes[e]++,i++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,a=r;a<o;a++)t+=this.tag.getRule(a)+"/*!sc*/\n";return t},e}(),Ge=new Map,Ke=new Map,Ye=1,Xe=function(e){if(Ge.has(e))return Ge.get(e);for(;Ke.has(Ye);)Ye++;var t=Ye++;return Ge.set(e,t),Ke.set(t,e),t},Je=function(e){return Ke.get(e)},Ze=function(e,t){t>=Ye&&(Ye=t+1),Ge.set(e,t),Ke.set(t,e)},et="style["+Ue+'][data-styled-version="5.3.8"]',tt=new RegExp("^"+Ue+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),nt=function(e,t,n){for(var r,o=n.split(","),a=0,i=o.length;a<i;a++)(r=o[a])&&e.registerName(t,r)},rt=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),r=[],o=0,a=n.length;o<a;o++){var i=n[o].trim();if(i){var l=i.match(tt);if(l){var u=0|parseInt(l[1],10),c=l[2];0!==u&&(Ze(c,u),nt(e,c,l[3]),e.getTag().insertRules(u,r)),r.length=0}else r.push(i)}}},ot=function(){return o.nc},at=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(Ue))return r}}(n),a=void 0!==o?o.nextSibling:null;r.setAttribute(Ue,"active"),r.setAttribute("data-styled-version","5.3.8");var i=ot();return i&&r.setAttribute("nonce",i),n.insertBefore(r,a),r},it=function(){function e(e){var t=this.element=at(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}qe(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),lt=function(){function e(e){var t=this.element=at(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),ut=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),ct=We,st={isServer:!We,useCSSOMInjection:!Ve},ft=function(){function e(e,t,n){void 0===e&&(e=De),void 0===t&&(t={}),this.options=Ie({},st,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&We&&ct&&(ct=!1,function(e){for(var t=document.querySelectorAll(et),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(Ue)&&(rt(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return Xe(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(Ie({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new ut(o):r?new it(o):new lt(o),new Qe(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(Xe(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(Xe(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(Xe(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var a=Je(o);if(void 0!==a){var i=e.names.get(a),l=t.getGroup(o);if(i&&l&&i.size){var u=Ue+".g"+o+'[id="'+a+'"]',c="";void 0!==i&&i.forEach((function(e){e.length>0&&(c+=e+",")})),r+=""+l+u+'{content:"'+c+'"}/*!sc*/\n'}}}return r}(this)},e}(),dt=/(a)(d)/gi,pt=function(e){return String.fromCharCode(e+(e>25?39:97))};function ht(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=pt(t%52)+n;return(pt(t%52)+n).replace(dt,"$1-$2")}var mt=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},vt=function(e){return mt(5381,e)};function yt(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(Fe(n)&&!$e(n))return!1}return!0}var gt=vt("5.3.8"),bt=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&yt(e),this.componentId=t,this.baseHash=mt(gt,t),this.baseStyle=n,ft.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var a=Mt(this.rules,e,t,n).join(""),i=ht(mt(this.baseHash,a)>>>0);if(!t.hasNameForId(r,i)){var l=n(a,"."+i,void 0,r);t.insertRules(r,i,l)}o.push(i),this.staticRulesId=i}else{for(var u=this.rules.length,c=mt(this.baseHash,n.hash),s="",f=0;f<u;f++){var d=this.rules[f];if("string"==typeof d)s+=d;else if(d){var p=Mt(d,e,t,n),h=Array.isArray(p)?p.join(""):p;c=mt(c,h+f),s+=h}}if(s){var m=ht(c>>>0);if(!t.hasNameForId(r,m)){var v=n(s,"."+m,void 0,r);t.insertRules(r,m,v)}o.push(m)}}return o.join(" ")},e}(),wt=/^\s*\/\/.*$/gm,xt=[":","[",".","#"];function St(e){var t,n,r,o,a=void 0===e?De:e,i=a.options,l=void 0===i?De:i,u=a.plugins,c=void 0===u?Me:u,s=new Ce(l),f=[],d=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,a,i,l,u,c,s,f){switch(n){case 1:if(0===s&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===c)return r+"/*|*/";break;case 3:switch(c){case 102:case 112:return e(o[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){f.push(e)})),p=function(e,r,a){return 0===r&&-1!==xt.indexOf(a[n.length])||a.match(o)?e:"."+t};function h(e,a,i,l){void 0===l&&(l="&");var u=e.replace(wt,""),c=a&&i?i+" "+a+" { "+u+" }":u;return t=l,n=a,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),s(i||!a?"":a,c)}return s.use([].concat(c,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,p))},d,function(e){if(-2===e){var t=f;return f=[],t}}])),h.hash=c.length?c.reduce((function(e,t){return t.name||qe(15),mt(e,t.name)}),5381).toString():"",h}var kt=t.createContext(),Et=(kt.Consumer,t.createContext()),Ot=(Et.Consumer,new ft),jt=St();function Ct(){return(0,t.useContext)(kt)||Ot}function Pt(){return(0,t.useContext)(Et)||jt}function _t(e){var n=(0,t.useState)(e.stylisPlugins),r=n[0],o=n[1],a=Ct(),i=(0,t.useMemo)((function(){var t=a;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),l=(0,t.useMemo)((function(){return St({options:{prefix:!e.disableVendorPrefixes},plugins:r})}),[e.disableVendorPrefixes,r]);return(0,t.useEffect)((function(){je()(r,e.stylisPlugins)||o(e.stylisPlugins)}),[e.stylisPlugins]),t.createElement(kt.Provider,{value:i},t.createElement(Et.Provider,{value:l},e.children))}var Nt=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=jt);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return qe(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=jt),this.name+e.hash},e}(),zt=/([A-Z])/,Lt=/([A-Z])/g,At=/^ms-/,It=function(e){return"-"+e.toLowerCase()};function Tt(e){return zt.test(e)?e.replace(Lt,It).replace(At,"-ms-"):e}var Rt=function(e){return null==e||!1===e||""===e};function Mt(e,t,n,r){if(Array.isArray(e)){for(var o,a=[],i=0,l=e.length;i<l;i+=1)""!==(o=Mt(e[i],t,n,r))&&(Array.isArray(o)?a.push.apply(a,o):a.push(o));return a}return Rt(e)?"":$e(e)?"."+e.styledComponentId:Fe(e)?"function"!=typeof(u=e)||u.prototype&&u.prototype.isReactComponent||!t?e:Mt(e(t),t,n,r):e instanceof Nt?n?(e.inject(n,r),e.getName(r)):e:Re(e)?function e(t,n){var r,o,a=[];for(var i in t)t.hasOwnProperty(i)&&!Rt(t[i])&&(Array.isArray(t[i])&&t[i].isCss||Fe(t[i])?a.push(Tt(i)+":",t[i],";"):Re(t[i])?a.push.apply(a,e(t[i],i)):a.push(Tt(i)+": "+(r=i,(null==(o=t[i])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in Pe?String(o).trim():o+"px")+";")));return n?[n+" {"].concat(a,["}"]):a}(e):e.toString();var u}var Dt=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function Ft(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return Fe(e)||Re(e)?Dt(Mt(Te(Me,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:Dt(Mt(Te(e,n)))}new Set;var Bt=function(e,t,n){return void 0===n&&(n=De),e.theme!==n.theme&&e.theme||t||n.theme},$t=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,Ut=/(^-|-$)/g;function Wt(e){return e.replace($t,"-").replace(Ut,"")}var Vt=function(e){return ht(vt(e)>>>0)};function Ht(e){return"string"==typeof e&&!0}var qt=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Qt=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function Gt(e,t,n){var r=e[n];qt(t)&&qt(r)?Kt(r,t):e[n]=t}function Kt(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,a=n;o<a.length;o++){var i=a[o];if(qt(i))for(var l in i)Qt(l)&&Gt(e,i[l],l)}return e}var Yt=t.createContext();function Xt(e){var n=(0,t.useContext)(Yt),r=(0,t.useMemo)((function(){return function(e,t){return e?Fe(e)?e(t):Array.isArray(e)||"object"!=typeof e?qe(8):t?Ie({},t,{},e):e:qe(14)}(e.theme,n)}),[e.theme,n]);return e.children?t.createElement(Yt.Provider,{value:r},e.children):null}Yt.Consumer;var Jt={};function Zt(e,n,r){var o=$e(e),a=!Ht(e),i=n.attrs,l=void 0===i?Me:i,u=n.componentId,c=void 0===u?function(e,t){var n="string"!=typeof e?"sc":Wt(e);Jt[n]=(Jt[n]||0)+1;var r=n+"-"+Vt("5.3.8"+n+Jt[n]);return t?t+"-"+r:r}(n.displayName,n.parentComponentId):u,s=n.displayName,f=void 0===s?function(e){return Ht(e)?"styled."+e:"Styled("+Be(e)+")"}(e):s,d=n.displayName&&n.componentId?Wt(n.displayName)+"-"+n.componentId:n.componentId||c,p=o&&e.attrs?Array.prototype.concat(e.attrs,l).filter(Boolean):l,h=n.shouldForwardProp;o&&e.shouldForwardProp&&(h=n.shouldForwardProp?function(t,r,o){return e.shouldForwardProp(t,r,o)&&n.shouldForwardProp(t,r,o)}:e.shouldForwardProp);var m,v=new bt(r,d,o?e.componentStyle:void 0),y=v.isStatic&&0===l.length,g=function(e,n){return function(e,n,r,o){var a=e.attrs,i=e.componentStyle,l=e.defaultProps,u=e.foldedComponentIds,c=e.shouldForwardProp,s=e.styledComponentId,f=e.target,d=function(e,t,n){void 0===e&&(e=De);var r=Ie({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,a,i=e;for(t in Fe(i)&&(i=i(r)),i)r[t]=o[t]="className"===t?(n=o[t],a=i[t],n&&a?n+" "+a:n||a):i[t]})),[r,o]}(Bt(n,(0,t.useContext)(Yt),l)||De,n,a),p=d[0],h=d[1],m=function(e,t,n,r){var o=Ct(),a=Pt();return t?e.generateAndInjectStyles(De,o,a):e.generateAndInjectStyles(n,o,a)}(i,o,p),v=r,y=h.$as||n.$as||h.as||n.as||f,g=Ht(y),b=h!==n?Ie({},n,{},h):n,w={};for(var x in b)"$"!==x[0]&&"as"!==x&&("forwardedAs"===x?w.as=b[x]:(c?c(x,ze,y):!g||ze(x))&&(w[x]=b[x]));return n.style&&h.style!==n.style&&(w.style=Ie({},n.style,{},h.style)),w.className=Array.prototype.concat(u,s,m!==s?m:null,n.className,h.className).filter(Boolean).join(" "),w.ref=v,(0,t.createElement)(y,w)}(m,e,n,y)};return g.displayName=f,(m=t.forwardRef(g)).attrs=p,m.componentStyle=v,m.displayName=f,m.shouldForwardProp=h,m.foldedComponentIds=o?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):Me,m.styledComponentId=d,m.target=o?e.target:e,m.withComponent=function(e){var t=n.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(n,["componentId"]),a=t&&t+"-"+(Ht(e)?e:Wt(Be(e)));return Zt(e,Ie({},o,{attrs:p,componentId:a}),r)},Object.defineProperty(m,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=o?Kt({},e.defaultProps,t):t}}),m.toString=function(){return"."+m.styledComponentId},a&&Ae()(m,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),m}var en=function(e){return function e(t,n,r){if(void 0===r&&(r=De),!(0,Ee.isValidElementType)(n))return qe(1,String(n));var o=function(){return t(n,r,Ft.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,Ie({},r,{},o))},o.attrs=function(o){return e(t,n,Ie({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}(Zt,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){en[e]=en(e)}));var tn=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=yt(e),ft.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(Mt(this.rules,t,n,r).join(""),""),a=this.componentId+e;n.insertRules(a,a,o)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,r){e>2&&ft.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},e}();function nn(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];var a=Ft.apply(void 0,[e].concat(r)),i="sc-global-"+Vt(JSON.stringify(a)),l=new tn(a,i);function u(e){var n=Ct(),r=Pt(),o=(0,t.useContext)(Yt),a=(0,t.useRef)(n.allocateGSInstance(i)).current;return n.server&&c(a,e,n,o,r),(0,t.useLayoutEffect)((function(){if(!n.server)return c(a,e,n,o,r),function(){return l.removeStyles(a,n)}}),[a,e,n,o,r]),null}function c(e,t,n,r,o){if(l.isStatic)l.renderStyles(e,He,n,o);else{var a=Ie({},t,{theme:Bt(t,r,u.defaultProps)});l.renderStyles(e,a,n,o)}}return t.memo(u)}!function(){var e=function(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return"";var n=ot();return"<style "+[n&&'nonce="'+n+'"',Ue+'="true"','data-styled-version="5.3.8"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?qe(2):e._emitSheetCSS()},this.getStyleElement=function(){var n;if(e.sealed)return qe(2);var r=((n={})[Ue]="",n["data-styled-version"]="5.3.8",n.dangerouslySetInnerHTML={__html:e.instance.toString()},n),o=ot();return o&&(r.nonce=o),[t.createElement("style",Ie({},r,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new ft({isServer:!0}),this.sealed=!1}.prototype;e.collectStyles=function(e){return this.sealed?qe(2):t.createElement(_t,{sheet:this.instance},e)},e.interleaveWithNodeStream=function(e){return qe(3)}}();var rn,on,an,ln,un,cn,sn,fn,dn,pn=en,hn=pn.div(rn||(on=["\n  width: 100%;\n  max-width: 1440px;\n  margin: 0 auto;\n  padding: ",";\n\n  @media(max-width: 89.94em) {\n    padding: ",";\n  }\n\n  @media(max-width: 63.94em) {\n    padding: ",";\n  }\n\n  @media(max-width: 47.94em) {\n    padding: ",";\n  }\n"],an||(an=on.slice(0)),rn=Object.freeze(Object.defineProperties(on,{raw:{value:Object.freeze(an)}}))),(function(e){return e.theme.indent}),(function(e){return e.theme.indentDesktop}),(function(e){return e.theme.indentTablet}),(function(e){return e.theme.indentMobile}));function mn(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var vn,yn,gn,bn,wn=Ft(ln||(ln=mn(["\n  font-family: ",";\n  font-style: normal;\n  font-weight: 400;\n"])),(function(e){return e.theme.ffPermanentMarker})),xn=(Ft(un||(un=mn(["\n  font-family: ",";\n  font-style: normal;\n  font-weight: 400;\n"])),(function(e){return e.theme.ffInter})),Ft(cn||(cn=mn(["\n  font-family: ",";\n  font-style: normal;\n  font-weight: 500;\n"])),(function(e){return e.theme.ffInter}))),Sn=Ft(sn||(sn=mn(["\n  font-family: ",";\n  font-style: normal;\n  font-weight: 900;\n"])),(function(e){return e.theme.ffInter})),kn=Ft(fn||(fn=mn(["\n  margin: 0;\n\n  ",";\n  font-size: 2em;\n  line-height: 115%;\n  text-align: center;\n  color: #ee5c07;\n\n  @media(max-width: 63.94em) {\n    font-size: 1.5em;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 1.1em;\n  }\n"])),Sn),En=Ft(dn||(dn=mn(["\n  font-size: 1.5em;\n  line-height: 150%;\n  display: block;\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n  border: none;\n  border-radius: 5px;\n\n  align-self: end;\n\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    opacity: 0.8;\n  }\n\n  @media(max-width: 89.94em) {\n    padding: 15px;\n  }\n\n  @media(max-width: 63.94em) {\n    padding: 10px;\n    font-size: 1em;\n  }\n\n  @media(max-width: 47.94em) {\n    padding: 7px;\n    font-size: 0.7em;\n  }\n"])));function On(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var jn,Cn,Pn=pn.header(vn||(vn=On(["\n  width: 100%;\n  position: sticky;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  background-color: ",";\n  box-shadow: 0px 6px 18px 0px #d5d1ea;\n"])),(function(e){return e.theme.colorWhite})),_n=pn(hn)(yn||(yn=On(["\n  padding-top: 20px;\n  padding-bottom: 20px;\n\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  @media(max-width: 63.94em) {\n    padding-top: 15px;\n    padding-bottom: 15px;\n  }\n"]))),Nn=pn(we)(gn||(gn=On(["\n  ",";\n  font-size: 1.5em;\n  color: #817abf;\n\n  &:hover {\n    opacity: 0.5;\n  }\n"])),wn),zn=pn(we)(bn||(bn=On(["\n  padding: 10px;\n  border-radius: 5px;\n\n  &:hover {\n    background-color: #c1bde2;\n  }\n"]))),Ln=o(893),An=function(){return(0,Ln.jsx)(Pn,{children:(0,Ln.jsxs)(_n,{children:[(0,Ln.jsx)(Nn,{to:"/",children:"Beer"}),(0,Ln.jsx)(zn,{to:"/basket",children:(0,Ln.jsx)("img",{src:ke,alt:"basket",width:40,height:40})})]})})};function In(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Tn=pn.footer(jn||(jn=In(["\n  width: 100%;\n  background-color: #817abf;\n"]))),Rn=pn(hn)(Cn||(Cn=In(["\n  padding-top: 10px;\n  padding-bottom: 10px;\n\n  color: ",";\n\n  display: grid;\n  justify-content: end;\n"])),(function(e){return e.theme.colorWhite})),Mn=function(){return(0,Ln.jsx)(Tn,{children:(0,Ln.jsx)(Rn,{children:(0,Ln.jsx)("p",{children:"Copyright @D.Stolyarova"})})})},Dn=function(){return(0,Ln.jsxs)(Ln.Fragment,{children:[(0,Ln.jsx)(An,{}),(0,Ln.jsx)("main",{children:(0,Ln.jsx)(ce,{})}),(0,Ln.jsx)(Mn,{})]})};function Fn(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function Bn(e){return!!e&&!!e[jr]}function $n(e){var t;return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===Cr}(e)||Array.isArray(e)||!!e[Or]||!!(null===(t=e.constructor)||void 0===t?void 0:t[Or])||Qn(e)||Gn(e))}function Un(e,t,n){void 0===n&&(n=!1),0===Wn(e)?(n?Object.keys:Pr)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function Wn(e){var t=e[jr];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:Qn(e)?2:Gn(e)?3:0}function Vn(e,t){return 2===Wn(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function Hn(e,t,n){var r=Wn(e);2===r?e.set(t,n):3===r?e.add(n):e[t]=n}function qn(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function Qn(e){return xr&&e instanceof Map}function Gn(e){return Sr&&e instanceof Set}function Kn(e){return e.o||e.t}function Yn(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=_r(e);delete t[jr];for(var n=Pr(t),r=0;r<n.length;r++){var o=n[r],a=t[o];!1===a.writable&&(a.writable=!0,a.configurable=!0),(a.get||a.set)&&(t[o]={configurable:!0,writable:!0,enumerable:a.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function Xn(e,t){return void 0===t&&(t=!1),Zn(e)||Bn(e)||!$n(e)||(Wn(e)>1&&(e.set=e.add=e.clear=e.delete=Jn),Object.freeze(e),t&&Un(e,(function(e,t){return Xn(t,!0)}),!0)),e}function Jn(){Fn(2)}function Zn(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function er(e){var t=Nr[e];return t||Fn(18,e),t}function tr(){return br}function nr(e,t){t&&(er("Patches"),e.u=[],e.s=[],e.v=t)}function rr(e){or(e),e.p.forEach(ir),e.p=null}function or(e){e===br&&(br=e.l)}function ar(e){return br={p:[],l:br,h:e,m:!0,_:0}}function ir(e){var t=e[jr];0===t.i||1===t.i?t.j():t.g=!0}function lr(e,t){t._=t.p.length;var n=t.p[0],r=void 0!==e&&e!==n;return t.h.O||er("ES5").S(t,e,r),r?(n[jr].P&&(rr(t),Fn(4)),$n(e)&&(e=ur(t,e),t.l||sr(t,e)),t.u&&er("Patches").M(n[jr].t,e,t.u,t.s)):e=ur(t,n,[]),rr(t),t.u&&t.v(t.u,t.s),e!==Er?e:void 0}function ur(e,t,n){if(Zn(t))return t;var r=t[jr];if(!r)return Un(t,(function(o,a){return cr(e,r,t,o,a,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return sr(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=Yn(r.k):r.o,a=o,i=!1;3===r.i&&(a=new Set(o),o.clear(),i=!0),Un(a,(function(t,a){return cr(e,r,o,t,a,n,i)})),sr(e,o,!1),n&&e.u&&er("Patches").N(r,n,e.u,e.s)}return r.o}function cr(e,t,n,r,o,a,i){if(Bn(o)){var l=ur(e,o,a&&t&&3!==t.i&&!Vn(t.R,r)?a.concat(r):void 0);if(Hn(n,r,l),!Bn(l))return;e.m=!1}else i&&n.add(o);if($n(o)&&!Zn(o)){if(!e.h.D&&e._<1)return;ur(e,o),t&&t.A.l||sr(e,o)}}function sr(e,t,n){void 0===n&&(n=!1),!e.l&&e.h.D&&e.m&&Xn(t,n)}function fr(e,t){var n=e[jr];return(n?Kn(n):e)[t]}function dr(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function pr(e){e.P||(e.P=!0,e.l&&pr(e.l))}function hr(e){e.o||(e.o=Yn(e.t))}function mr(e,t,n){var r=Qn(t)?er("MapSet").F(t,n):Gn(t)?er("MapSet").T(t,n):e.O?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:tr(),P:!1,I:!1,R:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,a=zr;n&&(o=[r],a=Lr);var i=Proxy.revocable(o,a),l=i.revoke,u=i.proxy;return r.k=u,r.j=l,u}(t,n):er("ES5").J(t,n);return(n?n.A:tr()).p.push(r),r}function vr(e){return Bn(e)||Fn(22,e),function e(t){if(!$n(t))return t;var n,r=t[jr],o=Wn(t);if(r){if(!r.P&&(r.i<4||!er("ES5").K(r)))return r.t;r.I=!0,n=yr(t,o),r.I=!1}else n=yr(t,o);return Un(n,(function(t,o){r&&function(e,t){return 2===Wn(e)?e.get(t):e[t]}(r.t,t)===o||Hn(n,t,e(o))})),3===o?new Set(n):n}(e)}function yr(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return Yn(e)}var gr,br,wr="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),xr="undefined"!=typeof Map,Sr="undefined"!=typeof Set,kr="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,Er=wr?Symbol.for("immer-nothing"):((gr={})["immer-nothing"]=!0,gr),Or=wr?Symbol.for("immer-draftable"):"__$immer_draftable",jr=wr?Symbol.for("immer-state"):"__$immer_state",Cr=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),Pr="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,_r=Object.getOwnPropertyDescriptors||function(e){var t={};return Pr(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},Nr={},zr={get:function(e,t){if(t===jr)return e;var n=Kn(e);if(!Vn(n,t))return function(e,t,n){var r,o=dr(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!$n(r)?r:r===fr(e.t,t)?(hr(e),e.o[t]=mr(e.A.h,r,e)):r},has:function(e,t){return t in Kn(e)},ownKeys:function(e){return Reflect.ownKeys(Kn(e))},set:function(e,t,n){var r=dr(Kn(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=fr(Kn(e),t),a=null==o?void 0:o[jr];if(a&&a.t===n)return e.o[t]=n,e.R[t]=!1,!0;if(qn(n,o)&&(void 0!==n||Vn(e.t,t)))return!0;hr(e),pr(e)}return e.o[t]===n&&(void 0!==n||t in e.o)||Number.isNaN(n)&&Number.isNaN(e.o[t])||(e.o[t]=n,e.R[t]=!0),!0},deleteProperty:function(e,t){return void 0!==fr(e.t,t)||t in e.t?(e.R[t]=!1,hr(e),pr(e)):delete e.R[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=Kn(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){Fn(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){Fn(12)}},Lr={};Un(zr,(function(e,t){Lr[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),Lr.deleteProperty=function(e,t){return Lr.set.call(this,e,t,void 0)},Lr.set=function(e,t,n){return zr.set.call(this,e[0],t,n,e[0])};var Ar=function(){function e(e){var t=this;this.O=kr,this.D=!0,this.produce=function(e,n,r){if("function"==typeof e&&"function"!=typeof n){var o=n;n=e;var a=t;return function(e){var t=this;void 0===e&&(e=o);for(var r=arguments.length,i=Array(r>1?r-1:0),l=1;l<r;l++)i[l-1]=arguments[l];return a.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(i))}))}}var i;if("function"!=typeof n&&Fn(6),void 0!==r&&"function"!=typeof r&&Fn(7),$n(e)){var l=ar(t),u=mr(t,e,void 0),c=!0;try{i=n(u),c=!1}finally{c?rr(l):or(l)}return"undefined"!=typeof Promise&&i instanceof Promise?i.then((function(e){return nr(l,r),lr(e,l)}),(function(e){throw rr(l),e})):(nr(l,r),lr(i,l))}if(!e||"object"!=typeof e){if(void 0===(i=n(e))&&(i=e),i===Er&&(i=void 0),t.D&&Xn(i,!0),r){var s=[],f=[];er("Patches").M(e,i,s,f),r(s,f)}return i}Fn(21,e)},this.produceWithPatches=function(e,n){if("function"==typeof e)return function(n){for(var r=arguments.length,o=Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(o))}))};var r,o,a=t.produce(e,n,(function(e,t){r=e,o=t}));return"undefined"!=typeof Promise&&a instanceof Promise?a.then((function(e){return[e,r,o]})):[a,r,o]},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){$n(e)||Fn(8),Bn(e)&&(e=vr(e));var t=ar(this),n=mr(this,e,void 0);return n[jr].C=!0,or(t),n},t.finishDraft=function(e,t){var n=(e&&e[jr]).A;return nr(n,t),lr(void 0,n)},t.setAutoFreeze=function(e){this.D=e},t.setUseProxies=function(e){e&&!kr&&Fn(20),this.O=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));var o=er("Patches").$;return Bn(e)?o(e,t):this.produce(e,(function(e){return o(e,t)}))},e}(),Ir=new Ar,Tr=Ir.produce,Rr=(Ir.produceWithPatches.bind(Ir),Ir.setAutoFreeze.bind(Ir),Ir.setUseProxies.bind(Ir),Ir.applyPatches.bind(Ir),Ir.createDraft.bind(Ir),Ir.finishDraft.bind(Ir),Tr),Mr="NOT_FOUND",Dr=function(e,t){return e===t};function Fr(e,t){var n,r,o="object"==typeof t?t:{equalityCheck:t},a=o.equalityCheck,i=void 0===a?Dr:a,l=o.maxSize,u=void 0===l?1:l,c=o.resultEqualityCheck,s=function(e){return function(t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,o=0;o<r;o++)if(!e(t[o],n[o]))return!1;return!0}}(i),f=1===u?(n=s,{get:function(e){return r&&n(r.key,e)?r.value:Mr},put:function(e,t){r={key:e,value:t}},getEntries:function(){return r?[r]:[]},clear:function(){r=void 0}}):function(e,t){var n=[];function r(e){var r=n.findIndex((function(n){return t(e,n.key)}));if(r>-1){var o=n[r];return r>0&&(n.splice(r,1),n.unshift(o)),o.value}return Mr}return{get:r,put:function(t,o){r(t)===Mr&&(n.unshift({key:t,value:o}),n.length>e&&n.pop())},getEntries:function(){return n},clear:function(){n=[]}}}(u,s);function d(){var t=f.get(arguments);if(t===Mr){if(t=e.apply(null,arguments),c){var n=f.getEntries().find((function(e){return c(e.value,t)}));n&&(t=n.value)}f.put(arguments,t)}return t}return d.clearCache=function(){return f.clear()},d}function Br(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){for(var t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];var a,i=0,l={memoizeOptions:void 0},u=r.pop();if("object"==typeof u&&(l=u,u=r.pop()),"function"!=typeof u)throw new Error("createSelector expects an output function after the inputs, but received: ["+typeof u+"]");var c=l.memoizeOptions,s=void 0===c?n:c,f=Array.isArray(s)?s:[s],d=function(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return"function"==typeof e?"function "+(e.name||"unnamed")+"()":typeof e})).join(", ");throw new Error("createSelector expects all input-selectors to be functions, but received the following types: ["+n+"]")}return t}(r),p=e.apply(void 0,[function(){return i++,u.apply(null,arguments)}].concat(f)),h=e((function(){for(var e=[],t=d.length,n=0;n<t;n++)e.push(d[n].apply(null,arguments));return a=p.apply(null,e)}));return Object.assign(h,{resultFunc:u,memoizedResultFunc:p,dependencies:d,lastResult:function(){return a},recomputations:function(){return i},resetRecomputations:function(){return i=0}}),h}}var $r=Br(Fr);function Ur(e){return Ur="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ur(e)}function Wr(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Ur(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Ur(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ur(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Vr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Hr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Vr(Object(n),!0).forEach((function(t){Wr(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Vr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function qr(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var Qr="function"==typeof Symbol&&Symbol.observable||"@@observable",Gr=function(){return Math.random().toString(36).substring(7).split("").join(".")},Kr={INIT:"@@redux/INIT"+Gr(),REPLACE:"@@redux/REPLACE"+Gr(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+Gr()}};function Yr(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(qr(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(qr(1));return n(Yr)(e,t)}if("function"!=typeof e)throw new Error(qr(2));var o=e,a=t,i=[],l=i,u=!1;function c(){l===i&&(l=i.slice())}function s(){if(u)throw new Error(qr(3));return a}function f(e){if("function"!=typeof e)throw new Error(qr(4));if(u)throw new Error(qr(5));var t=!0;return c(),l.push(e),function(){if(t){if(u)throw new Error(qr(6));t=!1,c();var n=l.indexOf(e);l.splice(n,1),i=null}}}function d(e){if(!function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}(e))throw new Error(qr(7));if(void 0===e.type)throw new Error(qr(8));if(u)throw new Error(qr(9));try{u=!0,a=o(a,e)}finally{u=!1}for(var t=i=l,n=0;n<t.length;n++)(0,t[n])();return e}return d({type:Kr.INIT}),(r={dispatch:d,subscribe:f,getState:s,replaceReducer:function(e){if("function"!=typeof e)throw new Error(qr(10));o=e,d({type:Kr.REPLACE})}})[Qr]=function(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(qr(11));function n(){e.next&&e.next(s())}return n(),{unsubscribe:t(n)}}})[Qr]=function(){return this},e},r}function Xr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function Jr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(qr(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(o)}));return r=Xr.apply(void 0,a)(n.dispatch),Hr(Hr({},n),{},{dispatch:r})}}}function Zr(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var eo=Zr();eo.withExtraArgument=Zr;var to,no=eo,ro=(to=function(e,t){return to=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},to(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}to(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),oo=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},ao=function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e},io=Object.defineProperty,lo=Object.defineProperties,uo=Object.getOwnPropertyDescriptors,co=Object.getOwnPropertySymbols,so=Object.prototype.hasOwnProperty,fo=Object.prototype.propertyIsEnumerable,po=function(e,t,n){return t in e?io(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n},ho=function(e,t){for(var n in t||(t={}))so.call(t,n)&&po(e,n,t[n]);if(co)for(var r=0,o=co(t);r<o.length;r++)n=o[r],fo.call(t,n)&&po(e,n,t[n]);return e},mo=function(e,t){return lo(e,uo(t))},vo=function(e,t,n){return new Promise((function(r,o){var a=function(e){try{l(n.next(e))}catch(e){o(e)}},i=function(e){try{l(n.throw(e))}catch(e){o(e)}},l=function(e){return e.done?r(e.value):Promise.resolve(e.value).then(a,i)};l((n=n.apply(e,t)).next())}))},yo=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=$r.apply(void 0,e);return function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];return n.apply(void 0,ao([Bn(e)?vr(e):e],t))}},go="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?Xr:Xr.apply(null,arguments)};function bo(e){if("object"!=typeof e||null===e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;for(var n=t;null!==Object.getPrototypeOf(n);)n=Object.getPrototypeOf(n);return t===n}"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;var wo=function(e){function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=e.apply(this,n)||this;return Object.setPrototypeOf(o,t.prototype),o}return ro(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,ao([void 0],e[0].concat(this)))):new(t.bind.apply(t,ao([void 0],e.concat(this))))},t}(Array),xo=function(e){function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=e.apply(this,n)||this;return Object.setPrototypeOf(o,t.prototype),o}return ro(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,ao([void 0],e[0].concat(this)))):new(t.bind.apply(t,ao([void 0],e.concat(this))))},t}(Array);function So(e){return $n(e)?Rr(e,(function(){})):e}function ko(e,t){function n(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];if(t){var o=t.apply(void 0,n);if(!o)throw new Error("prepareAction did not return an object");return ho(ho({type:e,payload:o.payload},"meta"in o&&{meta:o.meta}),"error"in o&&{error:o.error})}return{type:e,payload:n[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function Eo(e){return["type","payload","error","meta"].indexOf(e)>-1}function Oo(e){var t,n={},r=[],o={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,o},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,r,t]}function jo(e){var t=e.name;if(!t)throw new Error("`name` is a required option for createSlice");var n,r="function"==typeof e.initialState?e.initialState:So(e.initialState),o=e.reducers||{},a=Object.keys(o),i={},l={},u={};function c(){var t="function"==typeof e.extraReducers?Oo(e.extraReducers):[e.extraReducers],n=t[0],o=void 0===n?{}:n,a=t[1],i=void 0===a?[]:a,u=t[2],c=void 0===u?void 0:u,s=ho(ho({},o),l);return function(e,t,n,r){void 0===n&&(n=[]);var o,a=Oo(t),i=a[0],l=a[1],u=a[2];if(function(e){return"function"==typeof e}(e))o=function(){return So(e())};else{var c=So(e);o=function(){return c}}function s(e,t){void 0===e&&(e=o());var n=ao([i[t.type]],l.filter((function(e){return(0,e.matcher)(t)})).map((function(e){return e.reducer})));return 0===n.filter((function(e){return!!e})).length&&(n=[u]),n.reduce((function(e,n){if(n){var r;if(Bn(e))return void 0===(r=n(e,t))?e:r;if($n(e))return Rr(e,(function(e){return n(e,t)}));if(void 0===(r=n(e,t))){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return r}return e}),e)}return s.getInitialState=o,s}(r,(function(e){for(var t in s)e.addCase(t,s[t]);for(var n=0,r=i;n<r.length;n++){var o=r[n];e.addMatcher(o.matcher,o.reducer)}c&&e.addDefaultCase(c)}))}return a.forEach((function(e){var n,r,a=o[e],c=t+"/"+e;"reducer"in a?(n=a.reducer,r=a.prepare):n=a,i[e]=n,l[c]=n,u[e]=r?ko(c,r):ko(c)})),{name:t,reducer:function(e,t){return n||(n=c()),n(e,t)},actions:u,caseReducers:i,getInitialState:function(){return n||(n=c()),n.getInitialState()}}}function Co(e){return function(t,n){function r(e){return function(e){return bo(e)&&"type"in e}(t=e)&&"string"==typeof t.type&&Object.keys(t).every(Eo);var t}var o=function(t){r(n)?e(n.payload,t):e(n,t)};return Bn(t)?(o(t),t):Rr(t,o)}}function Po(e,t){return t(e)}function _o(e){return Array.isArray(e)||(e=Object.values(e)),e}function No(e,t,n){for(var r=[],o=[],a=0,i=e=_o(e);a<i.length;a++){var l=i[a],u=Po(l,t);u in n.entities?o.push({id:u,changes:l}):r.push(l)}return[r,o]}function zo(e){function t(t,n){var r=Po(t,e);r in n.entities||(n.ids.push(r),n.entities[r]=t)}function n(e,n){for(var r=0,o=e=_o(e);r<o.length;r++)t(o[r],n)}function r(t,n){var r=Po(t,e);r in n.entities||n.ids.push(r),n.entities[r]=t}function o(e,t){var n=!1;e.forEach((function(e){e in t.entities&&(delete t.entities[e],n=!0)})),n&&(t.ids=t.ids.filter((function(e){return e in t.entities})))}function a(t,n){var r={},o={};if(t.forEach((function(e){e.id in n.entities&&(o[e.id]={id:e.id,changes:ho(ho({},o[e.id]?o[e.id].changes:null),e.changes)})})),(t=Object.values(o)).length>0){var a=t.filter((function(t){return function(t,n,r){var o=r.entities[n.id],a=Object.assign({},o,n.changes),i=Po(a,e),l=i!==n.id;return l&&(t[n.id]=i,delete r.entities[n.id]),r.entities[i]=a,l}(r,t,n)})).length>0;a&&(n.ids=Object.keys(n.entities))}}function i(t,r){var o=No(t,e,r),i=o[0];a(o[1],r),n(i,r)}return{removeAll:(l=function(e){Object.assign(e,{ids:[],entities:{}})},u=Co((function(e,t){return l(t)})),function(e){return u(e,void 0)}),addOne:Co(t),addMany:Co(n),setOne:Co(r),setMany:Co((function(e,t){for(var n=0,o=e=_o(e);n<o.length;n++)r(o[n],t)})),setAll:Co((function(e,t){e=_o(e),t.ids=[],t.entities={},n(e,t)})),updateOne:Co((function(e,t){return a([e],t)})),updateMany:Co(a),upsertOne:Co((function(e,t){return i([e],t)})),upsertMany:Co(i),removeOne:Co((function(e,t){return o([e],t)})),removeMany:Co(o)};var l,u}function Lo(e){void 0===e&&(e={});var t=ho({sortComparer:!1,selectId:function(e){return e.id}},e),n=t.selectId,r=t.sortComparer,o={getInitialState:function(e){return void 0===e&&(e={}),Object.assign({ids:[],entities:{}},e)}},a={getSelectors:function(e){var t=function(e){return e.ids},n=function(e){return e.entities},r=yo(t,n,(function(e,t){return e.map((function(e){return t[e]}))})),o=function(e,t){return t},a=function(e,t){return e[t]},i=yo(t,(function(e){return e.length}));if(!e)return{selectIds:t,selectEntities:n,selectAll:r,selectTotal:i,selectById:yo(n,o,a)};var l=yo(e,n);return{selectIds:yo(e,t),selectEntities:l,selectAll:yo(e,r),selectTotal:yo(e,i),selectById:yo(l,o,a)}}},i=r?function(e,t){var n=zo(e);function r(t,n){var r=(t=_o(t)).filter((function(t){return!(Po(t,e)in n.entities)}));0!==r.length&&l(r,n)}function o(e,t){0!==(e=_o(e)).length&&l(e,t)}function a(t,n){for(var r=!1,o=0,a=t;o<a.length;o++){var i=a[o],l=n.entities[i.id];if(l){r=!0,Object.assign(l,i.changes);var c=e(l);i.id!==c&&(delete n.entities[i.id],n.entities[c]=l)}}r&&u(n)}function i(t,n){var o=No(t,e,n),i=o[0];a(o[1],n),r(i,n)}function l(t,n){t.forEach((function(t){n.entities[e(t)]=t})),u(n)}function u(n){var r=Object.values(n.entities);r.sort(t);var o=r.map(e);(function(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(e[n]!==t[n])return!1;return!0})(n.ids,o)||(n.ids=o)}return{removeOne:n.removeOne,removeMany:n.removeMany,removeAll:n.removeAll,addOne:Co((function(e,t){return r([e],t)})),updateOne:Co((function(e,t){return a([e],t)})),upsertOne:Co((function(e,t){return i([e],t)})),setOne:Co((function(e,t){return o([e],t)})),setMany:Co(o),setAll:Co((function(e,t){e=_o(e),t.entities={},t.ids=[],r(e,t)})),addMany:Co(r),updateMany:Co(a),upsertMany:Co(i)}}(n,r):zo(n);return ho(ho(ho({selectId:n,sortComparer:r},o),a),i)}var Ao=function(e){void 0===e&&(e=21);for(var t="",n=e;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t},Io=["name","message","stack","code"],To=function(e,t){this.payload=e,this.meta=t},Ro=function(e,t){this.payload=e,this.meta=t},Mo=function(e){if("object"==typeof e&&null!==e){for(var t={},n=0,r=Io;n<r.length;n++){var o=r[n];"string"==typeof e[o]&&(t[o]=e[o])}return t}return{message:String(e)}},Do=function(){function e(e,t,n){var r=ko(e+"/fulfilled",(function(e,t,n,r){return{payload:e,meta:mo(ho({},r||{}),{arg:n,requestId:t,requestStatus:"fulfilled"})}})),o=ko(e+"/pending",(function(e,t,n){return{payload:void 0,meta:mo(ho({},n||{}),{arg:t,requestId:e,requestStatus:"pending"})}})),a=ko(e+"/rejected",(function(e,t,r,o,a){return{payload:o,error:(n&&n.serializeError||Mo)(e||"Rejected"),meta:mo(ho({},a||{}),{arg:r,requestId:t,rejectedWithValue:!!o,requestStatus:"rejected",aborted:"AbortError"===(null==e?void 0:e.name),condition:"ConditionError"===(null==e?void 0:e.name)})}})),i="undefined"!=typeof AbortController?AbortController:function(){function e(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){},reason:void 0,throwIfAborted:function(){}}}return e.prototype.abort=function(){},e}();return Object.assign((function(e){return function(l,u,c){var s,f=(null==n?void 0:n.idGenerator)?n.idGenerator(e):Ao(),d=new i;function p(e){s=e,d.abort()}var h=function(){return vo(this,null,(function(){var i,h,m,v,y,g;return oo(this,(function(b){switch(b.label){case 0:return b.trys.push([0,4,,5]),null===(w=v=null==(i=null==n?void 0:n.condition)?void 0:i.call(n,e,{getState:u,extra:c}))||"object"!=typeof w||"function"!=typeof w.then?[3,2]:[4,v];case 1:v=b.sent(),b.label=2;case 2:if(!1===v||d.signal.aborted)throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return y=new Promise((function(e,t){return d.signal.addEventListener("abort",(function(){return t({name:"AbortError",message:s||"Aborted"})}))})),l(o(f,e,null==(h=null==n?void 0:n.getPendingMeta)?void 0:h.call(n,{requestId:f,arg:e},{getState:u,extra:c}))),[4,Promise.race([y,Promise.resolve(t(e,{dispatch:l,getState:u,extra:c,requestId:f,signal:d.signal,abort:p,rejectWithValue:function(e,t){return new To(e,t)},fulfillWithValue:function(e,t){return new Ro(e,t)}})).then((function(t){if(t instanceof To)throw t;return t instanceof Ro?r(t.payload,f,e,t.meta):r(t,f,e)}))])];case 3:return m=b.sent(),[3,5];case 4:return g=b.sent(),m=g instanceof To?a(null,f,e,g.payload,g.meta):a(g,f,e),[3,5];case 5:return n&&!n.dispatchConditionRejection&&a.match(m)&&m.meta.condition||l(m),[2,m]}var w}))}))}();return Object.assign(h,{abort:p,requestId:f,arg:e,unwrap:function(){return h.then(Fo)}})}}),{pending:o,rejected:a,fulfilled:r,typePrefix:e})}return e.withTypes=function(){return e},e}();function Fo(e){if(e.meta&&e.meta.rejectedWithValue)throw e.payload;if(e.error)throw e.error;return e.payload}Object.assign;var Bo="listenerMiddleware";ko(Bo+"/add"),ko(Bo+"/removeAll"),ko(Bo+"/remove"),"function"==typeof queueMicrotask&&queueMicrotask.bind("undefined"!=typeof window?window:void 0!==o.g?o.g:globalThis);function $o(e){return $o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$o(e)}function Uo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Wo(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==$o(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==$o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===$o(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Vo(){Vo=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var a=t&&t.prototype instanceof d?t:d,i=Object.create(a.prototype),l=new O(o||[]);return r(i,"_invoke",{value:x(e,n,l)}),i}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function d(){}function p(){}function h(){}var m={};u(m,a,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(j([])));y&&y!==t&&n.call(y,a)&&(m=y);var g=h.prototype=d.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function o(r,a,i,l){var u=s(e[r],e,a);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==$o(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,i,l)}),(function(e){o("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return o("throw",e,i,l)}))}l(u.arg)}var a;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return a=a?a.then(r,r):r()}})}function x(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return{value:void 0,done:!0}}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=S(i,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function S(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,S(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=s(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function E(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function j(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:C}}function C(){return{value:void 0,done:!0}}return p.prototype=h,r(g,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},b(w.prototype),u(w.prototype,i,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new w(c(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},b(g),u(g,l,"Generator"),u(g,a,(function(){return this})),u(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=j,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(l&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),E(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;E(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:j(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function Ho(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function qo(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Ho(a,r,o,i,l,"next",e)}function l(e){Ho(a,r,o,i,l,"throw",e)}i(void 0)}))}}"undefined"!=typeof window&&window.requestAnimationFrame&&window.requestAnimationFrame,function(){function e(e,t){var n=o[e];return n?n.enumerable=t:o[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[jr];return zr.get(t,e)},set:function(t){var n=this[jr];zr.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][jr];if(!o.P)switch(o.i){case 5:r(o)&&pr(o);break;case 4:n(o)&&pr(o)}}}function n(e){for(var t=e.t,n=e.k,r=Pr(n),o=r.length-1;o>=0;o--){var a=r[o];if(a!==jr){var i=t[a];if(void 0===i&&!Vn(t,a))return!0;var l=n[a],u=l&&l[jr];if(u?u.t!==i:!qn(l,i))return!0}}var c=!!t[jr];return r.length!==Pr(t).length+(c?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);if(n&&!n.get)return!0;for(var r=0;r<t.length;r++)if(!t.hasOwnProperty(r))return!0;return!1}var o={};!function(e,t){Nr[e]||(Nr[e]=t)}("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var a=_r(n);delete a[jr];for(var i=Pr(a),l=0;l<i.length;l++){var u=i[l];a[u]=e(u,t||!!a[u].enumerable)}return Object.create(Object.getPrototypeOf(n),a)}(r,t),a={i:r?5:4,A:n?n.A:tr(),P:!1,I:!1,R:{},l:n,t:t,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,jr,{value:a,writable:!0}),o},S:function(e,n,o){o?Bn(n)&&n[jr].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[jr];if(n){var o=n.t,a=n.k,i=n.R,l=n.i;if(4===l)Un(a,(function(t){t!==jr&&(void 0!==o[t]||Vn(o,t)?i[t]||e(a[t]):(i[t]=!0,pr(n)))})),Un(o,(function(e){void 0!==a[e]||Vn(a,e)||(i[e]=!1,pr(n))}));else if(5===l){if(r(n)&&(pr(n),i.length=!0),a.length<o.length)for(var u=a.length;u<o.length;u++)i[u]=!1;else for(var c=o.length;c<a.length;c++)i[c]=!0;for(var s=Math.min(a.length,o.length),f=0;f<s;f++)a.hasOwnProperty(f)||(i[f]=!0),void 0===i[f]&&e(a[f])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}();var Qo=Lo(),Go=Qo.getInitialState({status:"idle",count:1,oneBeerStatus:"idle",error:null}),Ko=Do("beers/fetchOneBeers",function(){var e=qo(Vo().mark((function e(t){var n,r;return Vo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("https://api.punkapi.com/v2/beers/".concat(t));case 2:return n=e.sent,e.next=5,n.json();case 5:return r=e.sent,localStorage.getItem(t)?r[0].isCart=!0:r[0].isCart=!1,console.log(r),e.abrupt("return",r);case 9:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),Yo=Do("beers/fetchBeers",function(){var e=qo(Vo().mark((function e(t){var n,r,o;return Vo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=function(){var e={};if(localStorage.length)for(var t=0;t<localStorage.length;t++){var n=localStorage.key(t);e[n]=n}for(var o=0;o<r.length;o++)e[r[o].id]?r[o].isCart=!0:r[o].isCart=!1},e.next=3,fetch("https://api.punkapi.com/v2/beers?page=".concat(t,"&per_page=12"));case 3:return n=e.sent,e.next=6,n.json();case 6:return r=e.sent,e.next=9,o();case 9:return e.abrupt("return",r);case 10:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),Xo=jo({name:"beers",initialState:Go,reducers:{addToBasket:function(e,t){e.entities[t.payload].isCart=!0},removeFromBasket:function(e,t){0!==e.ids.length&&(e.entities[t.payload].isCart=!1)},deletingAllFromTheBasket:function(e,t){if(0!==e.ids.length)for(var n=0;n<t.payload.length;n++)e.entities[t.payload[n]].isCart=!1},addCurrentPage:function(e,t){e.currentPage=t.payload},addToBasketOneBeer:function(e,t){e.entities[t.payload]&&(e.entities[t.payload].isCart=!0),e.oneBeer.isCart=!0},removeFromBasketOneBeer:function(e,t){e.entities[t.payload]&&(e.entities[t.payload].isCart=!1),e.oneBeer.isCart=!1}},extraReducers:function(e){e.addCase(Yo.pending,(function(e){e.status="loading"})).addCase(Yo.fulfilled,(function(e,t){e.status="succeeded",e.count=Math.ceil(8),0!==e.ids.length&&Qo.removeAll(e,t.payload),Qo.upsertMany(e,t.payload)})).addCase(Yo.rejected,(function(e,t){e.status="failed",e.error=t.error.message})).addCase(Ko.pending,(function(e){e.oneBeerStatus="loading"})).addCase(Ko.fulfilled,(function(e,t){e.oneBeerStatus="succeeded",e.oneBeer=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Uo(Object(n),!0).forEach((function(t){Wo(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Uo(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},t.payload[0])})).addCase(Ko.rejected,(function(e,t){e.oneBeerStatus="failed",e.error=t.error.message}))}}),Jo=Xo.reducer,Zo=Xo.actions,ea=Zo.addToBasket,ta=Zo.addCurrentPage,na=Zo.removeFromBasket,ra=Zo.deletingAllFromTheBasket,oa=(Zo.addOneBeer,Zo.addToBasketOneBeer),aa=Zo.removeFromBasketOneBeer,ia=Qo.getSelectors((function(e){return e.beers})),la=(ia.selectAll,ia.selectById);ia.selectIds;var ua=function(e){var t=e.text,n=void 0===t?"":t,r=e.size,o=void 0===r?"5em":r,a=n?(0,Ln.jsx)("h4",{children:n}):null;return(0,Ln.jsxs)("div",{children:[a,(0,Ln.jsx)("div",{style:{height:o,width:o}})]})},ca=o(688),sa=o(798),fa=o(935);let da=function(e){e()};const pa=()=>da,ha=(0,t.createContext)(null);function ma(){return(0,t.useContext)(ha)}let va=()=>{throw new Error("uSES not initialized!")};const ya=(e,t)=>e===t;function ga(e=ha){const n=e===ha?ma:()=>(0,t.useContext)(e);return function(e,r=ya){const{store:o,subscription:a,getServerState:i}=n(),l=va(a.addNestedSub,o.getState,i||o.getState,e,r);return(0,t.useDebugValue)(l),l}}const ba=ga(),wa={notify(){},get:()=>[]};const xa="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?t.useLayoutEffect:t.useEffect;let Sa=null;var ka=function({store:e,context:n,children:r,serverState:o}){const a=(0,t.useMemo)((()=>{const t=function(e,t){let n,r=wa;function o(){i.onStateChange&&i.onStateChange()}function a(){n||(n=t?t.addNestedSub(o):e.subscribe(o),r=function(){const e=pa();let t=null,n=null;return{clear(){t=null,n=null},notify(){e((()=>{let e=t;for(;e;)e.callback(),e=e.next}))},get(){let e=[],n=t;for(;n;)e.push(n),n=n.next;return e},subscribe(e){let r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())}const i={addNestedSub:function(e){return a(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:o,isSubscribed:function(){return Boolean(n)},trySubscribe:a,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=wa)},getListeners:()=>r};return i}(e);return{store:e,subscription:t,getServerState:o?()=>o:void 0}}),[e,o]),i=(0,t.useMemo)((()=>e.getState()),[e]);xa((()=>{const{subscription:t}=a;return t.onStateChange=t.notifyNestedSubs,t.trySubscribe(),i!==e.getState()&&t.notifyNestedSubs(),()=>{t.tryUnsubscribe(),t.onStateChange=void 0}}),[a,i]);const l=n||ha;return t.createElement(l.Provider,{value:a},r)};function Ea(e=ha){const n=e===ha?ma:()=>(0,t.useContext)(e);return function(){const{store:e}=n();return e}}const Oa=Ea();function ja(e=ha){const t=e===ha?Oa:Ea(e);return function(){return t().dispatch}}const Ca=ja();var Pa;(e=>{va=e})(sa.useSyncExternalStoreWithSelector),(e=>{Sa=e})(ca.useSyncExternalStore),Pa=fa.unstable_batchedUpdates,da=Pa;var _a,Na,za=Lo(),La=jo({name:"basket",initialState:za.getInitialState(),reducers:{addProducts:function(e,t){za.upsertMany(e,t.payload)},removeProduct:function(e,t){za.removeOne(e,t.payload)},decrementBeers:function(e,t){1===e.entities[t.payload].quantity?e.entities[t.payload].quantity=1:e.entities[t.payload].quantity--},incrementBeers:function(e,t){e.entities[t.payload].quantity++},updatePrice:function(e,t){e.entities[t.payload.id].price=t.payload.price},clearBasket:function(e){za.removeAll(e)}}}),Aa=La.reducer,Ia=La.actions,Ta=Ia.addProducts,Ra=Ia.decrementBeers,Ma=Ia.incrementBeers,Da=Ia.updatePrice,Fa=Ia.removeProduct,Ba=Ia.clearBasket,$a=za.getSelectors((function(e){return e.basket})),Ua=$a.selectAll,Wa=$a.selectById,Va=$a.selectIds;function Ha(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var qa,Qa,Ga,Ka,Ya,Xa=pn.button(_a||(_a=Ha(["\n  ",";\n\n  background-color: #549716;\n  border: 2px solid #549716;\n  color: ",";\n"])),En,(function(e){return e.theme.colorWhite})),Ja=pn.button(Na||(Na=Ha(["\n  ",";\n\n  border: 2px solid #549716;\n  background-color: ",";\n  color: #549716;\n"])),En,(function(e){return e.theme.colorWhite}));function Za(e){return Za="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Za(e)}function ei(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ti(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ei(Object(n),!0).forEach((function(t){ni(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ei(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ni(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Za(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Za(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Za(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ri(e){var t=e.beerId,n=e.classB,r=Ca();return(0,Ln.jsx)(Xa,{className:n,type:"button",onClick:function(){r(na(t)),r(Fa(t)),localStorage.removeItem(t)},children:"Remove from cart"})}function oi(e){var t=e.beerId,n=e.classB,r=Ca(),o=ba((function(e){return la(e,t)}));return(0,Ln.jsx)(Ja,{className:n,type:"button",onClick:function(){r(ea(t)),console.log(o),localStorage.setItem(t,JSON.stringify(ti(ti({},o),{},{quantity:1,price:o.ibu,isCart:!0})))},children:"Add to cart"})}function ai(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var ii,li,ui,ci,si=pn(we)(qa||(qa=ai(["\n  display: grid;\n  justify-items: center;\n  gap: 20px;\n\n  &:hover img {\n    transform: scale(1.1);\n  }\n\n  &:hover h2 {\n    text-decoration: solid underline "," 2px;\n  }\n\n  @media(max-width: 63.94em) {\n    gap: 0;\n  }\n"])),(function(e){return e.theme.colorActiveLink})),fi=pn.img(Qa||(Qa=ai(["\n  object-fit: contain;\n  transition: transform .35s ease-out;\n\n  margin: 10px;\n"]))),di=pn.h2(Ga||(Ga=ai(["\n  ",";\n"])),kn),pi=pn.span(Ka||(Ka=ai(["\n  font-size: 1.5em;\n  color: ",";\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 0.8em;\n  }\n"])),(function(e){return e.theme.colorBlack})),hi=pn.span(Ya||(Ya=ai(["\n  ",";\n  font-size: 2em;\n  color: ",";\n  margin-bottom: 20px;\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n    margin-bottom: 10px;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 0.8em;\n    margin-bottom: 5px;\n  }\n"])),xn,(function(e){return e.theme.colorBlack})),mi=function(e){var t,n=e.beerId,r=ba((function(e){return la(e,n)}));return t=!0===r.isCart?(0,Ln.jsx)(ri,{beerId:n}):(0,Ln.jsx)(oi,{beerId:n}),(0,Ln.jsxs)(Ln.Fragment,{children:[(0,Ln.jsxs)(si,{to:"/beers/".concat(n),children:[(0,Ln.jsx)(fi,{src:r.image_url,alt:r.name,width:90,height:200}),(0,Ln.jsx)(di,{children:r.name}),(0,Ln.jsxs)(pi,{children:["Alc.: ",r.abv," %"]}),(0,Ln.jsxs)(hi,{children:["Price: ",r.ibu,"$"]})]}),t]})};function vi(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var yi,gi,bi,wi,xi,Si=pn.section(ii||(ii=vi(["\n  width: 100%;\n"]))),ki=pn(hn)(li||(li=vi(["\n  padding-top: 10px;\n  padding-bottom: 20px;\n"]))),Ei=pn.ul(ui||(ui=vi(["\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  display: grid;\n  gap: 30px 20px;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n\n  @media(max-width: 80em) {\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n\n  @media(max-width: 47.94em) {\n    grid-template-columns: 1fr 1fr;\n  }\n"]))),Oi=pn.li(ci||(ci=vi(["\n  display: grid;\n  justify-items: center;\n"]))),ji=function(e){var t;return"loading"===e.status?t=(0,Ln.jsx)(ua,{text:"Loading..."}):"succeeded"===e.status?t=e.beersIds.map((function(e){return(0,Ln.jsx)(Oi,{children:(0,Ln.jsx)(mi,{beerId:e})},e)})):"failed"===e.status&&(t=(0,Ln.jsx)("div",{children:e.error})),(0,Ln.jsx)(Si,{children:(0,Ln.jsx)(ki,{children:(0,Ln.jsx)(Ei,{children:t})})})};function Ci(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Pi=Ft(yi||(yi=Ci(["\n  padding: 5px 10px;\n  border: 1px #000000 solid;\n  border-radius: 5px;\n  text-align: center;\n\n  font-size: 1.5em;\n  line-height: 150%;\n\n  &:hover {\n    opacity: 0.6;\n  }\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 0.9em;\n    padding: 2px 7px;\n  }\n"]))),_i=pn(hn)(gi||(gi=Ci(["\n  padding-top: 40px;\n  padding-bottom: 50px;\n"]))),Ni=pn.ul(bi||(bi=Ci(["\n  padding: 0;\n  margin: 0;\n  list-style: none;\n\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n"]))),zi=pn(we)(wi||(wi=Ci(["\n  ",";\n\n  color: ",";\n  background-color: #93eb94;\n"])),Pi,(function(e){return e.theme.colorWhite})),Li=pn(we)(xi||(xi=Ci(["\n  ",";\n\n  color: ",";\n"])),Pi,(function(e){return e.theme.colorBlack})),Ai=function(e){var t=e.count,n=e.onhandler,r=e.currentPage,o=Array.from({length:t},(function(e,t){return t+1}));return(0,Ln.jsx)(_i,{children:(0,Ln.jsx)(Ni,{children:o.map((function(e){return e===r?(0,Ln.jsx)("li",{children:(0,Ln.jsx)(zi,{to:"/page_".concat(e),onClick:function(){n(e)},children:e})},e):(0,Ln.jsx)("li",{children:(0,Ln.jsx)(Li,{to:"/page_".concat(e),onClick:function(){n(e)},children:e})},e)}))})})};function Ii(e){return Ii="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ii(e)}function Ti(){Ti=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var a=t&&t.prototype instanceof d?t:d,i=Object.create(a.prototype),l=new O(o||[]);return r(i,"_invoke",{value:x(e,n,l)}),i}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function d(){}function p(){}function h(){}var m={};u(m,a,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(j([])));y&&y!==t&&n.call(y,a)&&(m=y);var g=h.prototype=d.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function o(r,a,i,l){var u=s(e[r],e,a);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==Ii(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,i,l)}),(function(e){o("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return o("throw",e,i,l)}))}l(u.arg)}var a;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return a=a?a.then(r,r):r()}})}function x(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return{value:void 0,done:!0}}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=S(i,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function S(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,S(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=s(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function E(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function j(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:C}}function C(){return{value:void 0,done:!0}}return p.prototype=h,r(g,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},b(w.prototype),u(w.prototype,i,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new w(c(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},b(g),u(g,l,"Generator"),u(g,a,(function(){return this})),u(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=j,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(l&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),E(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;E(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:j(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function Ri(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Mi(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Ri(a,r,o,i,l,"next",e)}function l(e){Ri(a,r,o,i,l,"throw",e)}i(void 0)}))}}var Di,Fi,Bi=function(){var e=Ca(),n=ba((function(e){return{beersIds:e.beers.ids,status:e.beers.status,error:e.beers.error,count:e.beers.count}})),r=window.location.hash.split("_")[1];return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];(0,t.useEffect)((function(){if(e(!1),r)return window.addEventListener("popstate",e),function(){window.removeEventListener("popstate",e)}}),n)}(Mi(Ti().mark((function t(){return Ti().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e(Yo(Number(r)));case 2:case"end":return t.stop()}}),t)}))),[r]),(0,Ln.jsxs)(Ln.Fragment,{children:[(0,Ln.jsx)(ji,{status:n.status,beersIds:n.beersIds,error:n.error}),(0,Ln.jsx)(Ai,{currentPage:Number(r),count:n.count,onhandler:function(t){return e(ta(t))}})]})};function $i(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Ui,Wi,Vi,Hi,qi,Qi,Gi,Ki=pn.button(Di||(Di=$i(["\n  ",";\n\n  background-color: #549716;\n  border: 2px solid #549716;\n  color: ",";\n"])),En,(function(e){return e.theme.colorWhite})),Yi=pn.button(Fi||(Fi=$i(["\n  ",";\n\n  border: 2px solid #549716;\n  background-color: ",";\n  color: #549716;\n"])),En,(function(e){return e.theme.colorWhite}));function Xi(e){return Xi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Xi(e)}function Ji(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Zi(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ji(Object(n),!0).forEach((function(t){el(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ji(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function el(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Xi(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Xi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Xi(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function tl(e){var t=e.beerId,n=e.classB,r=Ca();return(0,Ln.jsx)(Ki,{className:n,type:"button",onClick:function(){r(aa(t)),r(Fa(t)),localStorage.removeItem(t)},children:"Remove from cart"})}function nl(e){var t=e.beerId,n=e.classB,r=Ca(),o=ba((function(e){return e.beers.oneBeer}));return(0,Ln.jsx)(Yi,{className:n,type:"button",onClick:function(){r(oa(t)),localStorage.setItem(t,JSON.stringify(Zi(Zi({},o),{},{quantity:1,price:o.ibu,isCart:!0})))},children:"Add to cart"})}function rl(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var ol=pn.section(Ui||(Ui=rl(["\n  width: 100%;\n"]))),al=pn(hn)(Wi||(Wi=rl(["\n  padding-top: 20px;\n  padding-bottom: 20px;\n\n  display: grid;\n  justify-items: center;\n  gap: 20px;\n\n  @media(max-width: 63.94em) {\n    gap: 15px;\n  }\n\n  @media(max-width: 47.94em) {\n    gap: 10px;\n  }\n\n  .button {\n    width: 50%;\n\n    @media(max-width: 47.94em) {\n      width: 100%;\n    }\n  }\n"]))),il=pn.img(Vi||(Vi=rl(["\n  height: auto;\n"]))),ll=pn.h2(Hi||(Hi=rl(["\n  ",";\n"])),kn),ul=pn.p(qi||(qi=rl(["\n  margin: 0;\n\n  font-size: 1.3em;\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n  }\n"]))),cl=pn.h3(Qi||(Qi=rl(["\n  margin: 0;\n\n  ",";\n  font-size: 1.4em;\n  color: #4605ff;\n\n  @media(max-width: 63.94em) {\n    font-size: 1.1em;\n  }\n"])),xn),sl=pn.ul(Gi||(Gi=rl(["\n  margin: 0;\n  padding: 0;\n\n  list-style: none;\n"]))),fl=function(e){var t,n=e.beer,r=e.beerId,o=e.status,a=e.error;return"loading"===o?t=(0,Ln.jsx)(ua,{text:"Loading..."}):"succeeded"===o?t=(0,Ln.jsxs)(Ln.Fragment,{children:[(0,Ln.jsx)(il,{src:n.image_url,alt:n.name,width:75,height:200}),(0,Ln.jsx)(ll,{children:n.name}),(0,Ln.jsxs)("span",{children:["Alc.: ",n.abv," %"]}),(0,Ln.jsxs)("span",{children:["Date of first brew: ",n.first_brewed]}),(0,Ln.jsx)(ul,{children:n.description}),(0,Ln.jsx)(cl,{children:"Ingredients:"}),(0,Ln.jsxs)(sl,{children:[(0,Ln.jsxs)("li",{children:["Malt: ",n.ingredients.malt[0].name]}),(0,Ln.jsxs)("li",{children:["Hops: ",n.ingredients.hops[0].name]}),(0,Ln.jsxs)("li",{children:["Yeast: ",n.ingredients.yeast]})]}),n.isCart?(0,Ln.jsx)(tl,{classB:"button",beerId:r}):(0,Ln.jsx)(nl,{classB:"button",beerId:r})]}):"failed"===o&&(t=(0,Ln.jsx)("div",{children:a})),(0,Ln.jsx)(ol,{children:(0,Ln.jsx)(al,{children:t})})};function dl(e){return dl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},dl(e)}function pl(){pl=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var a=t&&t.prototype instanceof d?t:d,i=Object.create(a.prototype),l=new O(o||[]);return r(i,"_invoke",{value:x(e,n,l)}),i}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function d(){}function p(){}function h(){}var m={};u(m,a,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(j([])));y&&y!==t&&n.call(y,a)&&(m=y);var g=h.prototype=d.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function o(r,a,i,l){var u=s(e[r],e,a);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==dl(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,i,l)}),(function(e){o("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return o("throw",e,i,l)}))}l(u.arg)}var a;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return a=a?a.then(r,r):r()}})}function x(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return{value:void 0,done:!0}}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=S(i,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function S(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,S(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=s(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function E(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function j(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:C}}function C(){return{value:void 0,done:!0}}return p.prototype=h,r(g,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},b(w.prototype),u(w.prototype,i,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new w(c(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},b(g),u(g,l,"Generator"),u(g,a,(function(){return this})),u(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=j,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(l&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),E(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;E(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:j(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function hl(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}var ml,vl,yl,gl,bl,wl,xl,Sl,kl,El,Ol=function(){var e=Ca(),n=ee(),r=ba((function(e){return e.beers.oneBeerStatus})),o=ba((function(e){return e.beers.error})),a=ba((function(e){return e.beers.oneBeer}));return(0,t.useEffect)((function(){function t(){return t=function(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){hl(a,r,o,i,l,"next",e)}function l(e){hl(a,r,o,i,l,"throw",e)}i(void 0)}))}}(pl().mark((function t(){return pl().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e(Ko(n.id));case 2:console.log("Effect OneBeer");case 3:case"end":return t.stop()}}),t)}))),t.apply(this,arguments)}!function(){t.apply(this,arguments)}()}),[]),(0,Ln.jsx)(fl,{status:r,error:o,beerId:n.id,beer:a})},jl=o.p+"b72e8d61090c16d0a5ea3ce8ede0a432.svg";function Cl(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Pl=pn.li(ml||(ml=Cl(["\n  display: grid;\n  justify-items: center;\n  grid-template-columns: auto 1fr auto;\n  grid-template-rows: auto auto auto;\n\n  box-shadow: 0 0 16px #a0e198;\n  padding: 10px;\n\n  position: relative;\n\n  @media(max-width: 47.94em) {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n"]))),_l=pn.img(vl||(vl=Cl(["\n  grid-area: 1/1/-1/2;\n  object-fit: contain;\n"]))),Nl=pn.h2(yl||(yl=Cl(["\n  ",";\n\n  grid-area: 1/2/2/3;\n"])),kn),zl=pn.span(gl||(gl=Cl(["\n  grid-area: 2/2/3/3;\n  font-size: 1.4em;\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 0.8em;\n  }\n"]))),Ll=pn.span(bl||(bl=Cl(["\n  grid-area: 3/2/4/3;\n  font-size: 1.7em;\n\n  @media(max-width: 63.94em) {\n    font-size: 1.3em;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 1em;\n  }\n"]))),Al=pn.div(wl||(wl=Cl(["\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 40px;\n\n  grid-area: 3/3/4/-1;\n\n  @media(max-width: 47.94em) {\n    width: 100%;\n  }\n"]))),Il=pn.h3(xl||(xl=Cl(["\n  margin: 0;\n\n  ",";\n"])),xn),Tl=pn.div(Sl||(Sl=Cl(["\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 15px;\n\n  @media(max-width: 47.94em) {\n    gap: 10px;\n  }\n"]))),Rl=pn.button(kl||(kl=Cl(["\n  display: block;\n  width: 40px;\n  height: 40px;\n  padding: 0 5px;\n  border: 1px solid #2fb607;\n  border-radius: 5px;\n  background-color: ",";\n\n  color: #2fb607;\n  font-size: 1.5em;\n\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    color: #61ee37;\n  }\n"])),(function(e){return e.theme.colorWhite})),Ml=pn.button(El||(El=Cl(["\n  display: block;\n  width: 30px;\n  height: 30px;\n\n  background-image: url(",");\n  background-repeat: no-repeat;\n  background-position: center;\n  background-color: ",";\n  border: 1px solid #e61212;\n\n\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    background-color: #f6c3c3;\n  }\n"])),jl,(function(e){return e.theme.colorWhite}));function Dl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Fl,Bl,$l,Ul,Wl,Vl,Hl,ql=function(e){var n=e.beerId,r=e.handler,o=Ca(),a=ba((function(e){return Wa(e,n)})),i=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Dl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Dl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)(a.quantity),2),l=i[0],u=i[1],c=function(e){var t=JSON.parse(localStorage.getItem(e));t.quantity=l,t.price=l*t.ibu,localStorage.setItem(e,JSON.stringify(t))};return(0,Ln.jsxs)(Pl,{children:[(0,Ln.jsx)(_l,{src:a.image_url,alt:a.name,width:75,height:200}),(0,Ln.jsx)(Nl,{children:a.name}),(0,Ln.jsxs)(zl,{children:["Alc.: ",a.abv," %"]}),(0,Ln.jsxs)(Al,{children:[(0,Ln.jsx)(Il,{children:"Quantity"}),(0,Ln.jsxs)(Tl,{children:[(0,Ln.jsx)(Rl,{type:"button",onClick:function(){u(1===l?l:--l),o(Ra(n)),o(Da({id:n,price:l*a.ibu})),c(n)},children:"-"}),(0,Ln.jsx)("span",{children:a.quantity}),(0,Ln.jsx)(Rl,{type:"button",onClick:function(){u(++l),o(Ma(n)),o(Da({id:n,price:l*a.ibu})),c(n)},children:"+"})]})]}),(0,Ln.jsxs)(Ll,{children:["Price: ",a.price,"$"]}),(0,Ln.jsx)(Ml,{type:"button","aria-label":"Delete",onClick:function(){localStorage.removeItem(a.id),o(na(a.id)),o(Fa(a.id)),r()}})]})};function Ql(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Gl=pn.section(Fl||(Fl=Ql(["\n  width: 100%;\n"]))),Kl=pn(hn)(Bl||(Bl=Ql(["\n  padding-top: 40px;\n  padding-bottom: 50px;\n\n  display: grid;\n  gap: 45px;\n\n  @media(max-width: 63.94em) {\n    gap: 25px;\n\n    padding-top: 20px;\n    padding-bottom: 30px;\n  }\n\n  @media(max-width: 47.94em) {\n    gap: 15px;\n  }\n"]))),Yl=pn.span($l||($l=Ql(["\n  font-size: 1.5em;\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n\n  }\n"]))),Xl=pn.ul(Ul||(Ul=Ql(["\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  display: grid;\n  gap: 30px;\n\n  @media(max-width: 89.94em) {\n    gap: 25px;\n  }\n\n  @media(max-width: 63.94em) {\n    gap: 20px;\n  }\n\n  @media(max-width: 47.94em) {\n    gap: 15px;\n  }\n"]))),Jl=pn.div(Wl||(Wl=Ql(["\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n\n  @media(max-width: 47.94em) {\n    grid-template-columns: 1fr;\n    gap: 15px;\n  }\n"]))),Zl=pn.button(Vl||(Vl=Ql(["\n  ",";\n\n  background-color: #5493ec;\n  color: ",";\n"])),En,(function(e){return e.theme.colorWhite})),eu=pn(we)(Hl||(Hl=Ql(["\n  background-color: #4fc51e;\n  color: ",";\n  padding: 16px;\n  text-align: center;\n  border-radius: 5px;\n\n  font-size: 1.5em;\n  line-height: 150%;\n\n  &:hover {\n    opacity: 0.6;\n  }\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n    padding: 10px;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 0.9em;\n    padding: 5px 10px;\n  }\n"])),(function(e){return e.theme.colorWhite}));function tu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var nu,ru,ou,au=function(){var e=Ca(),n=ba(Va),r=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return tu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?tu(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)(localStorage.length),2),o=r[0],a=r[1];return(0,t.useEffect)((function(){var t=[];if(localStorage.length!==n.length){for(var r=0;r<localStorage.length;r++){var o=localStorage.key(r),a=JSON.parse(localStorage.getItem(o));t.push({id:a.id,name:a.name,quantity:a.quantity,price:a.ibu*a.quantity,image_url:a.image_url,ibu:a.ibu,abv:a.abv,isCart:a.isCart})}e(Ta(t)),console.log("Effect Basket")}}),[n]),console.log(3),(0,Ln.jsx)(Gl,{children:(0,Ln.jsxs)(Kl,{children:[(0,Ln.jsxs)(Yl,{children:["Total ",o]}),n.length?(0,Ln.jsxs)(Ln.Fragment,{children:[(0,Ln.jsx)(Xl,{children:n.map((function(e,t){return(0,Ln.jsx)(ql,{beerId:e,handler:function(){return a(o-1)}},t)}))}),(0,Ln.jsxs)(Jl,{children:[(0,Ln.jsx)(Zl,{type:"button",onClick:function(){localStorage.clear(),e(ra(n)),e(Ba()),a(localStorage.length)},children:"Clear basket"}),(0,Ln.jsx)(eu,{to:"/form",children:"Checkout"})]})]}):(0,Ln.jsx)("p",{children:"Сart is empty!"})]})})};function iu(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var lu=Ft(nu||(nu=iu(["\n  .valid {\n    border: 2px solid green;\n  }\n\n  .inValid {\n    border: 2px solid red;\n  }\n"]))),uu=pn.div(ru||(ru=iu(["\n  ",";\n"])),lu),cu=pn.input(ou||(ou=iu(["\n  width: 50%;\n  padding: 10px;\n\n  border: none;\n  border-bottom: 2px solid #1a77d2;\n\n  @media(max-width: 47.94em) {\n    width: 100%;\n    padding: 5px;\n  }\n"])));function su(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return fu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?fu(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function fu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var du,pu,hu,mu,vu,yu,gu,bu,wu,xu,Su,ku,Eu=function(){var e=su((0,t.useState)(""),2),n=e[0],r=e[1],o=su((0,t.useState)(""),2),a=o[0],i=o[1];return(0,Ln.jsxs)(uu,{children:[(0,Ln.jsx)("label",{htmlFor:"name","aria-label":"Enter your name"}),(0,Ln.jsx)(cu,{className:a,type:"text",id:"name",name:"name",placeholder:"Name",value:n,onChange:function(e){return r(e.target.value)},onBlur:function(){n.length<2?i("inValid"):i("valid")},required:!0})]})},Ou=function(){var e=su((0,t.useState)(""),2),n=e[0],r=e[1],o=su((0,t.useState)(""),2),a=o[0],i=o[1];return(0,Ln.jsxs)(uu,{children:[(0,Ln.jsx)("label",{htmlFor:"e-mail","aria-label":"Enter your e-mail"}),(0,Ln.jsx)(cu,{className:a,type:"text",id:"e-mail",name:"e-mail",placeholder:"E-mail",value:n,onChange:function(e){return r(e.target.value)},onBlur:function(){n.length<2?i("inValid"):i("valid")},required:!0})]})},ju=function(){var e=su((0,t.useState)(""),2),n=e[0],r=e[1],o=su((0,t.useState)(""),2),a=o[0],i=o[1];return(0,Ln.jsxs)(uu,{children:[(0,Ln.jsx)("label",{htmlFor:"tel","aria-label":"Enter your phone"}),(0,Ln.jsx)(cu,{className:a,type:"tel",id:"tel",name:"tel",placeholder:"+7(999)999-99-99",value:n,onChange:function(e){return r(e.target.value)},onBlur:function(){n.length<16?i("inValid"):i("valid")},required:!0})]})},Cu=function(){var e=su((0,t.useState)(""),2),n=e[0],r=e[1],o=su((0,t.useState)(""),2),a=o[0],i=o[1];return(0,Ln.jsxs)(uu,{children:[(0,Ln.jsx)("label",{htmlFor:"country","aria-label":"Enter the name of your country"}),(0,Ln.jsx)(cu,{className:a,type:"text",id:"country",name:"country",placeholder:"Country",value:n,onChange:function(e){return r(e.target.value)},onBlur:function(){n.length<3?i("inValid"):i("valid")},required:!0})]})},Pu=function(){var e=su((0,t.useState)(""),2),n=e[0],r=e[1],o=su((0,t.useState)(""),2),a=o[0],i=o[1];return(0,Ln.jsxs)(uu,{children:[(0,Ln.jsx)("label",{htmlFor:"city","aria-label":"Enter the name of your city"}),(0,Ln.jsx)(cu,{className:a,type:"text",id:"city",name:"city",placeholder:"City",value:n,onChange:function(e){return r(e.target.value)},onBlur:function(){n.length<3?i("inValid"):i("valid")},required:!0})]})},_u=function(){var e=su((0,t.useState)(""),2),n=e[0],r=e[1],o=su((0,t.useState)(""),2),a=o[0],i=o[1];return(0,Ln.jsxs)(uu,{children:[(0,Ln.jsx)("label",{htmlFor:"street","aria-label":"Enter your street name"}),(0,Ln.jsx)(cu,{className:a,type:"text",id:"street",name:"street",placeholder:"Street",value:n,onChange:function(e){return r(e.target.value)},onBlur:function(){n.length<2?i("inValid"):i("valid")},required:!0})]})},Nu=function(){var e=su((0,t.useState)(""),2),n=e[0],r=e[1],o=su((0,t.useState)(""),2),a=o[0],i=o[1];return(0,Ln.jsxs)(uu,{children:[(0,Ln.jsx)("label",{htmlFor:"house","aria-label":"Enter your house number"}),(0,Ln.jsx)(cu,{className:a,type:"text",id:"house",name:"house",placeholder:"House",value:n,onChange:function(e){return r(e.target.value)},onBlur:function(){n.length<2?i("inValid"):i("valid")},required:!0})]})},zu=function(){var e=su((0,t.useState)(""),2),n=e[0],r=e[1],o=su((0,t.useState)(""),2),a=o[0],i=o[1];return(0,Ln.jsxs)(uu,{children:[(0,Ln.jsx)("label",{htmlFor:"apartment","aria-label":"Enter your apartment number"}),(0,Ln.jsx)(cu,{className:a,type:"text",id:"apartment",name:"apartment",placeholder:"Apartment",value:n,onChange:function(e){return r(e.target.value)},onBlur:function(){n.length<2?i("inValid"):i("valid")}})]})};function Lu(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Au,Iu,Tu=Ft(du||(du=Lu(["\n  display: grid;\n  grid-template-columns: 40% 30% 30%;\n  justify-items: center;\n"]))),Ru=pn.form(pu||(pu=Lu(["\n  width: 100%;\n"]))),Mu=pn(hn)(hu||(hu=Lu(["\n  padding-top: 40px;\n  padding-bottom: 50px;\n\n  column-count: 2;\n\n  @media(max-width: 63.94em) {\n    column-count: 1;\n  }\n\n  @media(max-width: 47.94em) {\n    padding-top: 20px;\n    padding-bottom: 20px;\n  }\n"]))),Du=pn.fieldset(mu||(mu=Lu(["\n  border: none;\n  margin: 0 0 20px 0;\n  padding: 0;\n\n  display: grid;\n  gap: 5px;\n\n  @media(max-width: 47.94em) {\n    margin: 0 0 15px 0;\n  }\n"]))),Fu=pn.legend(vu||(vu=Lu(["\n  margin-bottom: 30px;\n\n  @media(max-width: 47.94em) {\n    margin-bottom: 20px;\n  }\n"]))),Bu=pn.textarea(yu||(yu=Lu(["\n  border: 0;\n  border-bottom: 2px solid #1a77d2;\n  resize: none;\n\n  @media(max-width: 47.94em) {\n    height: 100px;\n  }\n"]))),$u=pn.ul(gu||(gu=Lu(["\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  display: grid;\n  border: 1px dashed #85c6e6;\n\n  @media(max-width: 47.94em) {\n    gap: 5px;\n  }\n"]))),Uu=pn.div(bu||(bu=Lu(["\n  ",";\n\n  h4 {\n    margin: 0;\n\n    @media(max-width: 47.94em) {\n      line-height: 130%;\n      margin: 0;\n      font-size: 0.9em;\n    }\n  }\n"])),Tu),Wu=pn.li(wu||(wu=Lu(["\n  ",";\n  align-items: center;\n  border-bottom: 1px dashed #85c6e6;\n\n  h3 {\n    justify-self: flex-start;\n\n    @media(max-width: 47.94em) {\n      padding-bottom: 5px;\n      line-height: 130%;\n      margin: 0;\n      font-size: 0.8em;\n    }\n  }\n"])),Tu),Vu=pn.div(xu||(xu=Lu(["\n  display: flex;\n  justify-content: space-between;\n  padding: 20px;\n\n  background-color: #817abf;\n  color: #ffffff;\n\n  @media(max-width: 47.94em) {\n    padding: 10px;\n  }\n"]))),Hu=pn.div(Su||(Su=Lu(['\n  position: relative;\n  margin-bottom: 20px;\n\n  @media(max-width: 47.94em) {\n    font-size: 0.8em;\n  }\n\n  input[type="checkbox"] {\n    position: absolute;\n\n    width: 1px;\n    height: 1px;\n    margin: -1px;\n    padding: 0;\n    overflow: hidden;\n\n    white-space: nowrap;\n\n    border: 0;\n\n    clip: rect(0 0 0 0);\n    clip-path: inset(100%);\n  }\n\n  label {\n    padding-left: 36px;\n\n    position: relative;\n\n    cursor: pointer;\n\n    &::before {\n      content: "";\n      width: 22px;\n      height: 22px;\n\n      position: absolute;\n      left: 0;\n      top: 0;\n      border: 1px solid #000000;\n    }\n  }\n\n  input:checked + label::after {\n    content: "";\n    width: 10px;\n    height: 10px;\n\n    position: absolute;\n    left: 6px;\n    top: 6px;\n    background-color: #2e43a5;\n  }\n']))),qu=pn.button(ku||(ku=Lu(["\n  display: block;\n  width: 100%;\n  border: none;\n  background-color: #817abf;\n  color: #ffffff;\n  padding: 10px;\n  border-radius: 5px;\n\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    opacity: 0.7;\n  }\n"]))),Qu=function(){var e=ba(Ua),n=Ca();(0,t.useEffect)((function(){var t=[];if(localStorage.length!==e.length){for(var r=0;r<localStorage.length;r++){var o=localStorage.key(r),a=JSON.parse(localStorage.getItem(o));t.push({id:a.id,name:a.name,quantity:a.quantity,price:a.ibu*a.quantity,image_url:a.image_url,ibu:a.ibu,abv:a.abv})}n(Ta(t)),console.log("Effect Form")}}));var r=0;return(0,Ln.jsx)(Ru,{action:"https://echo.htmlacademy.ru",method:"post",children:(0,Ln.jsxs)(Mu,{children:[(0,Ln.jsxs)(Du,{children:[(0,Ln.jsx)(Fu,{children:"Buyer data"}),(0,Ln.jsx)(Eu,{}),(0,Ln.jsx)(Ou,{}),(0,Ln.jsx)(ju,{})]}),(0,Ln.jsxs)(Du,{children:[(0,Ln.jsx)(Fu,{children:"Address of the recipient"}),(0,Ln.jsx)(Cu,{}),(0,Ln.jsx)(Pu,{}),(0,Ln.jsx)(_u,{}),(0,Ln.jsx)(Nu,{}),(0,Ln.jsx)(zu,{})]}),(0,Ln.jsxs)(Du,{children:[(0,Ln.jsx)(Fu,{children:"Comments"}),(0,Ln.jsx)(Bu,{name:"messang",cols:"10",rows:"10"})]}),(0,Ln.jsxs)(Du,{children:[(0,Ln.jsx)(Fu,{children:"Your order"}),(0,Ln.jsxs)(Uu,{children:[(0,Ln.jsx)("h4",{children:"Beer"}),(0,Ln.jsx)("h4",{children:"Quantity"}),(0,Ln.jsx)("h4",{children:"Price"})]}),(0,Ln.jsx)($u,{children:e.map((function(e,t){return r+=e.price,(0,Ln.jsxs)(Wu,{children:[(0,Ln.jsx)("h3",{children:e.name}),(0,Ln.jsx)("span",{children:e.quantity}),(0,Ln.jsxs)("span",{children:[e.price," $"]})]},t)}))}),(0,Ln.jsxs)(Vu,{children:[(0,Ln.jsx)("span",{children:"Total:"}),(0,Ln.jsxs)("span",{children:[r,"$"]})]})]}),(0,Ln.jsxs)(Du,{children:[(0,Ln.jsx)(Fu,{children:"Payment methods"}),(0,Ln.jsxs)(Hu,{children:[(0,Ln.jsx)("input",{type:"checkbox",id:"cash",name:"cash",required:!0,defaultChecked:!0}),(0,Ln.jsx)("label",{htmlFor:"cash",children:"Cash payment"})]}),(0,Ln.jsxs)(Hu,{children:[(0,Ln.jsx)("input",{type:"checkbox",name:"consentToDataProcessing",id:"consent",required:!0,defaultChecked:!0}),(0,Ln.jsx)("label",{htmlFor:"consent",children:"I agree to the processing of my personal data"})]})]}),(0,Ln.jsx)(qu,{type:"submit","aria-label":"Submit an order to the store",children:"Place an order"})]})})},Gu=nn(Au||(Au=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(['\n\n  body,\n  html {\n    margin: 0;\n    height: 100%;\n  }\n\n  body {\n    position: relative;\n    min-height: 100%;\n    font-family: "Inter", "Arial", sans-serif;\n    font-size: 18px;\n    line-height: 27px;\n    font-weight: 400;\n    color: ',";\n    scrollbar-color: rgba(44, 171, 21, 0.5) rgba(44, 171, 21, 0.2);\n    scrollbar-width: thin;\n\n    &::-webkit-scrollbar {\n      width: 10px;\n      height: 5px;\n      border-radius: 10px;\n    }\n\n    &::-webkit-scrollbar-track-piece {\n      background-color: rgba(44, 171, 21, 0.2);\n      border-radius: 10px;\n      width: 10px;\n    }\n\n    &::-webkit-scrollbar-thumb:vertical {\n      height: 30px;\n      background-color: rgba(44, 171, 21, 0.5);\n      border-radius: 10px;\n    }\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  img,\n  video {\n    display: block;\n    max-width: 100%;\n  }\n\n  #root {\n  position: relative;\n\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n\n  header,\n  footer {\n    flex-shrink: 0;\n  }\n\n  main {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n  }\n}\n"])),(function(e){return e.theme.colorBlack})),Ku=o.p+"fce7c01081563377aa626c2d721c57d7.woff",Yu=o.p+"1856ca1e86390811734595445eb6c838.woff2",Xu=o.p+"77b530365e5d6aa537c3fa24f169d3e2.woff",Ju=o.p+"e07f8d28a9f27285c94b5b45e2410555.woff2",Zu=o.p+"943035b994f748e10c963c50859c4ec5.woff",ec=o.p+"f696093cac0c009432c7ada312564804.woff2",tc=o.p+"37777c699149506190a8e39011c57cdc.woff",nc=o.p+"080abd2d6ed027a6227513e639014317.woff2",rc=nn(Iu||(Iu=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(['\n  @font-face {\n    font-style: normal;\n    font-weight: 400;\n    font-family: "Permanent-Marker";\n\n    font-display: swap;\n    src:\n      url(',') format("woff2"),\n      url(',') format("woff");\n  }\n\n  @font-face {\n    font-style: normal;\n    font-weight: 400;\n    font-family: "Inter";\n\n    font-display: swap;\n    src:\n      url(',') format("woff2"),\n      url(',') format("woff");\n  }\n\n  @font-face {\n    font-style: normal;\n    font-weight: 500;\n    font-family: "Inter";\n\n    font-display: swap;\n    src:\n      url(',') format("woff2"),\n      url(',') format("woff");\n  }\n\n\n  @font-face {\n    font-style: normal;\n    font-weight: 900;\n    font-family: "Inter";\n\n    font-display: swap;\n    src:\n      url(',') format("woff2"),\n      url(',') format("woff");\n  }\n'])),Yu,Ku,Ju,Xu,ec,Zu,nc,tc);function oc(){var e=ee().pageNumber;return(0,Ln.jsxs)(ye,{children:[(0,Ln.jsx)(Gu,{}),(0,Ln.jsx)(rc,{}),(0,Ln.jsx)(de,{children:(0,Ln.jsxs)(se,{element:(0,Ln.jsx)(Dn,{}),children:[(0,Ln.jsx)(se,{path:":".concat(e),element:(0,Ln.jsx)(Bi,{})}),(0,Ln.jsx)(se,{path:"/beers/:id",element:(0,Ln.jsx)(Ol,{})}),(0,Ln.jsx)(se,{path:"/basket",element:(0,Ln.jsx)(au,{})}),(0,Ln.jsx)(se,{path:"/form",element:(0,Ln.jsx)(Qu,{})}),(0,Ln.jsx)(se,{path:"/",element:(0,Ln.jsx)(ue,{replace:!0,to:"/page_1"})})]})})]})}var ac=function(e){var t,n=function(e){return function(e){void 0===e&&(e={});var t=e.thunk,n=void 0===t||t,r=(e.immutableCheck,e.serializableCheck,new wo);return n&&(function(e){return"boolean"==typeof e}(n)?r.push(no):r.push(no.withExtraArgument(n.extraArgument))),r}(e)},r=e||{},o=r.reducer,a=void 0===o?void 0:o,i=r.middleware,l=void 0===i?n():i,u=r.devTools,c=void 0===u||u,s=r.preloadedState,f=void 0===s?void 0:s,d=r.enhancers,p=void 0===d?void 0:d;if("function"==typeof a)t=a;else{if(!bo(a))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var a,i=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:Kr.INIT}))throw new Error(qr(12));if(void 0===n(void 0,{type:Kr.PROBE_UNKNOWN_ACTION()}))throw new Error(qr(13))}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},l=0;l<i.length;l++){var u=i[l],c=n[u],s=e[u],f=c(s,t);if(void 0===f)throw t&&t.type,new Error(qr(14));o[u]=f,r=r||f!==s}return(r=r||i.length!==Object.keys(e).length)?o:e}}(a)}var h=l;if("function"==typeof h&&(h=h(n),0))throw new Error("when using a middleware builder function, an array of middleware must be returned");var m=Jr.apply(void 0,h),v=Xr;c&&(v=go(ho({trace:!1},"object"==typeof c&&c)));var y=new xo(m),g=y;return Array.isArray(p)?g=ao([m],p):"function"==typeof p&&(g=p(y)),Yr(t,f,v.apply(void 0,g))}({reducer:{beers:Jo,basket:Aa}}),ic=document.getElementById("root");(0,r.s)(ic).render((0,Ln.jsx)(t.StrictMode,{children:(0,Ln.jsx)(ka,{store:ac,children:(0,Ln.jsx)(Xt,{theme:{colorBlack:"#333333",colorWhite:"#ffffff",colorActiveLink:"#ff0101",ffInter:'"Inter", "Arial", sans-serif',ffPermanentMarker:'"Permanent-Marker", "Arial", sans-serif',indent:"100px",indentDesktop:"50px",indentMobile:"20px",indentTablet:"30px"},children:(0,Ln.jsx)(oc,{})})})}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUM1Qm5tQixRQUFTLENBQ1ArVixNQUFPcVEsR0FDUDlzQixPQUFRK3NCLE1DSU5DLEdBQWN0MUUsU0FBU3UxRSxlQUFlLFNBQy9CbHNDLEVBQUFBLEVBQUFBLEdBQVdpc0MsSUFFbkIzNkUsUUFDSHl0RCxFQUFBQSxHQUFBQSxLQUFDL3BELEVBQUFBLFdBQVUsQ0FBQThJLFVBQ1RpaEQsRUFBQUEsR0FBQUEsS0FBQzVjLEdBQVEsQ0FBQytrQixNQUFPQSxHQUFNcHBELFVBQ3JCaWhELEVBQUFBLEdBQUFBLEtBQUNvdEIsR0FBYSxDQUFDdHdCLE1DakJBLENBQ25CNGtCLFdBQVksVUFDWi9oQixXQUFZLFVBQ1oyaEIsZ0JBQWlCLFVBQ2pCcGlCLFFBQVMsK0JBQ1RILGtCQUFtQiwwQ0FDbkJQLE9BQVEsUUFDUkMsY0FBZSxPQUNmRSxhQUFjLE9BQ2RELGFBQWMsUURRa0IzL0MsVUFDMUJpaEQsRUFBQUEsR0FBQUEsS0FBQzhxQixHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktcmVhY3Qvd2VicGFjay9ydW50aW1lL2NyZWF0ZSBmYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2NsaWVudC5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3NoYWxsb3dlcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS93aXRoLXNlbGVjdG9yLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvc2hpbS93aXRoLXNlbGVjdG9yLmpzIiwid2VicGFjazovL215LXJlYWN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL215LXJlYWN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL215LXJlYWN0L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9teS1yZWFjdC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL215LXJlYWN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vbXktcmVhY3Qvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9teS1yZWFjdC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9teS1yZWFjdC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvQHJlbWl4LXJ1bi9yb3V0ZXIvZGlzdC9yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2Fzc2V0cy9iYXNrZXQuc3ZnIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxpcy9kaXN0L3N0eWxpcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91bml0bGVzcy9kaXN0L3VuaXRsZXNzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL21lbW9pemUvZGlzdC9lbW90aW9uLW1lbW9pemUuZXNtLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9lbW90aW9uLWlzLXByb3AtdmFsaWQuZXNtLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlZC1jb21wb25lbnRzL2Rpc3Qvc3R5bGVkLWNvbXBvbmVudHMuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy91aS9jb250YWluZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvc3R5bGUvbWl4aW5zLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvYmFzZS9oZWFkZXIvc3R5bGUuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9iYXNlL2hlYWRlci9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9iYXNlL2Zvb3Rlci9zdHlsZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Jhc2UvZm9vdGVyL2luZGV4LmpzeCIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Jhc2UvbGF5b3V0L2luZGV4LmpzeCIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9pbW1lci9kaXN0L2ltbWVyLmVzbS5tanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVzZWxlY3QvZXMvZGVmYXVsdE1lbW9pemUuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVzZWxlY3QvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvUHJvcGVydHlLZXkuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9QcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9AcmVkdXhqcy90b29sa2l0L2Rpc3QvcmVkdXgtdG9vbGtpdC5lc20uanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvZmVhdHVyZXMvYmVlcnNTbGljZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL3VpL3NwaW5uZXIvaW5kZXguanN4Iiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL2JhdGNoLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VSZWR1eENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvdXNlU3luY0V4dGVybmFsU3RvcmUuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0LmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU3RvcmUuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlRGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvZmVhdHVyZXMvYmFza2V0U2xpY2UuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy91aS9idXR0b24vc3R5bGUuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy91aS9idXR0b24vaW5kZXguanN4Iiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvYmxvY2tzL2NhcmQtYmVlci9zdHlsZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Jsb2Nrcy9jYXJkLWJlZXIvaW5kZXguanN4Iiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvYmxvY2tzL2JlZXJzLWxpc3Qvc3R5bGUuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9ibG9ja3MvYmVlcnMtbGlzdC9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9ibG9ja3MvcGFnaW5hdGlvbi9zdHlsZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Jsb2Nrcy9wYWdpbmF0aW9uL2luZGV4LmpzeCIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL3BhZ2UvbWFpbi9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvaG9va3MvdXNlLWluaXQuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy91aS9idXR0b24tYmVlci9zdHlsZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL3VpL2J1dHRvbi1iZWVyL2luZGV4LmpzeCIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Jsb2Nrcy9iZWVyL3N0eWxlLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvYmxvY2tzL2JlZXIvaW5kZXguanN4Iiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvcGFnZS9vbmUtYmVlci9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvYXNzZXRzL2ljb24tY2xvc2Uuc3ZnIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvYmxvY2tzL2NhcmQtYmVlci1iYXNrZXQvc3R5bGUuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9ibG9ja3MvY2FyZC1iZWVyLWJhc2tldC9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9wYWdlL2Jhc2tldC9zdHlsZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL3BhZ2UvYmFza2V0L2luZGV4LmpzeCIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL3VpL2lucHV0L3N0eWxlLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvdWkvaW5wdXQvaW5kZXguanN4Iiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvcGFnZS9mb3JtL3N0eWxlLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvcGFnZS9mb3JtL2luZGV4LmpzeCIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2FwcC9zdHlsZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9mb250cy9QZXJtYW5lbnRNYXJrZXItUmVndWxhci53b2ZmIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2ZvbnRzL1Blcm1hbmVudE1hcmtlci1SZWd1bGFyLndvZmYyIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2ZvbnRzL0ludGVyLVJlZ3VsYXIud29mZiIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9mb250cy9JbnRlci1SZWd1bGFyLndvZmYyIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2ZvbnRzL0ludGVyLU1lZGl1bS53b2ZmIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2ZvbnRzL0ludGVyLU1lZGl1bS53b2ZmMiIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9mb250cy9JbnRlci1CbGFjay53b2ZmIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2ZvbnRzL0ludGVyLUJsYWNrLndvZmYyIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2ZvbnRzL2ZvbnRzLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvYXBwL0FwcC5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9zdG9yZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL3RoZW1lL3RoZW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiA/IGZ1bmN0aW9uKG9iaikgeyByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaik7IH0gOiBmdW5jdGlvbihvYmopIHsgcmV0dXJuIG9iai5fX3Byb3RvX187IH07XG52YXIgbGVhZlByb3RvdHlwZXM7XG4vLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLy8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8vIG1vZGUgJiAxNjogcmV0dXJuIHZhbHVlIHdoZW4gaXQncyBQcm9taXNlLWxpa2Vcbi8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbl9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG5cdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IHRoaXModmFsdWUpO1xuXHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuXHRpZih0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlKSB7XG5cdFx0aWYoKG1vZGUgJiA0KSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG5cdFx0aWYoKG1vZGUgJiAxNikgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicpIHJldHVybiB2YWx1ZTtcblx0fVxuXHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuXHR2YXIgZGVmID0ge307XG5cdGxlYWZQcm90b3R5cGVzID0gbGVhZlByb3RvdHlwZXMgfHwgW251bGwsIGdldFByb3RvKHt9KSwgZ2V0UHJvdG8oW10pLCBnZXRQcm90byhnZXRQcm90byldO1xuXHRmb3IodmFyIGN1cnJlbnQgPSBtb2RlICYgMiAmJiB2YWx1ZTsgdHlwZW9mIGN1cnJlbnQgPT0gJ29iamVjdCcgJiYgIX5sZWFmUHJvdG90eXBlcy5pbmRleE9mKGN1cnJlbnQpOyBjdXJyZW50ID0gZ2V0UHJvdG8oY3VycmVudCkpIHtcblx0XHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjdXJyZW50KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkgeyBkZWZba2V5XSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdmFsdWVba2V5XTsgfTsgfSk7XG5cdH1cblx0ZGVmWydkZWZhdWx0J10gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHZhbHVlOyB9O1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGRlZik7XG5cdHJldHVybiBucztcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxjYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHAoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9dmFyIGRhPW5ldyBTZXQsZWE9e307ZnVuY3Rpb24gZmEoYSxiKXtoYShhLGIpO2hhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBoYShhLGIpe2VhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKylkYS5hZGQoYlthXSl9XG52YXIgaWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGphPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksa2E9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxhPVxue30sbWE9e307ZnVuY3Rpb24gb2EoYSl7aWYoamEuY2FsbChtYSxhKSlyZXR1cm4hMDtpZihqYS5jYWxsKGxhLGEpKXJldHVybiExO2lmKGthLnRlc3QoYSkpcmV0dXJuIG1hW2FdPSEwO2xhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHBhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcWEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8cGEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB2KGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgej17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTt6W2JdPW5ldyB2KGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIHJhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gc2EoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsXG5zYSk7eltiXT1uZXcgdihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG56LnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiB0YShhLGIsYyxkKXt2YXIgZT16Lmhhc093blByb3BlcnR5KGIpP3pbYl06bnVsbDtpZihudWxsIT09ZT8wIT09ZS50eXBlOmR8fCEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXSlxYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/b2EoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpfVxudmFyIHVhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHZhPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLHdhPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikseWE9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHphPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxBYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksQmE9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLENhPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLERhPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxFYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksRmE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksR2E9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksSGE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIElhPVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmNhY2hlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTt2YXIgSmE9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEthKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1KYSYmYVtKYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgQT1PYmplY3QuYXNzaWduLExhO2Z1bmN0aW9uIE1hKGEpe2lmKHZvaWQgMD09PUxhKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO0xhPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitMYSthfXZhciBOYT0hMTtcbmZ1bmN0aW9uIE9hKGEsYil7aWYoIWF8fE5hKXJldHVyblwiXCI7TmE9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGwpe3ZhciBkPWx9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChsKXtkPWx9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChsKXtkPWx9YSgpfX1jYXRjaChsKXtpZihsJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGwuc3RhY2spe2Zvcih2YXIgZT1sLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pe3ZhciBrPVwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7YS5kaXNwbGF5TmFtZSYmay5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpJiYoaz1rLnJlcGxhY2UoXCI8YW5vbnltb3VzPlwiLGEuZGlzcGxheU5hbWUpKTtyZXR1cm4ga313aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7TmE9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9NYShhKTpcIlwifVxuZnVuY3Rpb24gUGEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE1hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTWEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE1hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTWEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPU9hKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPU9hKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPU9hKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUWEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB3YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgQWE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgemE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBFYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBGYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBDYTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSBCYTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBEYTp2YXIgYj1hLnJlbmRlcjthPWEuZGlzcGxheU5hbWU7YXx8KGE9Yi5kaXNwbGF5TmFtZXx8XG5iLm5hbWV8fFwiXCIsYT1cIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7cmV0dXJuIGE7Y2FzZSBHYTpyZXR1cm4gYj1hLmRpc3BsYXlOYW1lfHxudWxsLG51bGwhPT1iP2I6UWEoYS50eXBlKXx8XCJNZW1vXCI7Y2FzZSBIYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUWEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJhKGEpe3ZhciBiPWEudHlwZTtzd2l0Y2goYS50YWcpe2Nhc2UgMjQ6cmV0dXJuXCJDYWNoZVwiO2Nhc2UgOTpyZXR1cm4oYi5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSAxMDpyZXR1cm4oYi5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSAxODpyZXR1cm5cIkRlaHlkcmF0ZWRGcmFnbWVudFwiO2Nhc2UgMTE6cmV0dXJuIGE9Yi5yZW5kZXIsYT1hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiXCIsYi5kaXNwbGF5TmFtZXx8KFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIDc6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgNTpyZXR1cm4gYjtjYXNlIDQ6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIDM6cmV0dXJuXCJSb290XCI7Y2FzZSA2OnJldHVyblwiVGV4dFwiO2Nhc2UgMTY6cmV0dXJuIFFhKGIpO2Nhc2UgODpyZXR1cm4gYj09PXphP1wiU3RyaWN0TW9kZVwiOlwiTW9kZVwiO2Nhc2UgMjI6cmV0dXJuXCJPZmZzY3JlZW5cIjtcbmNhc2UgMTI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgMjE6cmV0dXJuXCJTY29wZVwiO2Nhc2UgMTM6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgMTk6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIjtjYXNlIDI1OnJldHVyblwiVHJhY2luZ01hcmtlclwiO2Nhc2UgMTpjYXNlIDA6Y2FzZSAxNzpjYXNlIDI6Y2FzZSAxNDpjYXNlIDE1OmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtjYXNlIFwib2JqZWN0XCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBhYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnRhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBiYihhLGIpe2FiKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/Y2IoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmY2IoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBkYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIGViPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcihwKDkxKSk7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IocCg5MikpO2lmKGViKGMpKXtpZigxPGMubGVuZ3RoKXRocm93IEVycm9yKHAoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfWZ1bmN0aW9uIGtiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19XG5mdW5jdGlvbiBsYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/a2IoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbWIsbmI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiE9PWEubmFtZXNwYWNlVVJJfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bWI9bWJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bWIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bWIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gb2IoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBwYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYXNwZWN0UmF0aW86ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLFxuem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxxYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocGIpLmZvckVhY2goZnVuY3Rpb24oYSl7cWIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtwYltiXT1wYlthXX0pfSk7ZnVuY3Rpb24gcmIoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHBiLmhhc093blByb3BlcnR5KGEpJiZwYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBzYihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1yYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB0Yj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdWIoYSxiKXtpZihiKXtpZih0YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHAoNjApKTtpZihcIm9iamVjdFwiIT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8fCEoXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHAoNjIpKTt9fVxuZnVuY3Rpb24gdmIoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciB3Yj1udWxsO2Z1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IocCgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoKXt9dmFyIEliPSExO2Z1bmN0aW9uIEpiKGEsYixjKXtpZihJYilyZXR1cm4gYShiLGMpO0liPSEwO3RyeXtyZXR1cm4gR2IoYSxiLGMpfWZpbmFsbHl7aWYoSWI9ITEsbnVsbCE9PXpifHxudWxsIT09QWIpSGIoKSxGYigpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IocCgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBMYj0hMTtpZihpYSl0cnl7dmFyIE1iPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShNYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7TGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKX1jYXRjaChhKXtMYj0hMX1mdW5jdGlvbiBOYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgT2I9ITEsUGI9bnVsbCxRYj0hMSxSYj1udWxsLFNiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe09iPSEwO1BiPWF9fTtmdW5jdGlvbiBUYihhLGIsYyxkLGUsZixnLGgsayl7T2I9ITE7UGI9bnVsbDtOYi5hcHBseShTYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gVWIoYSxiLGMsZCxlLGYsZyxoLGspe1RiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihPYil7aWYoT2Ipe3ZhciBsPVBiO09iPSExO1BiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcihwKDE5OCkpO1FifHwoUWI9ITAsUmI9bCl9fWZ1bmN0aW9uIFZiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyY0MDk4KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gV2IoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBYYihhKXtpZihWYihhKSE9PWEpdGhyb3cgRXJyb3IocCgxODgpKTt9XG5mdW5jdGlvbiBZYihhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1WYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBYYihlKSxhO2lmKGY9PT1kKXJldHVybiBYYihlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHAoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IocCgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcihwKDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIFpiKGEpe2E9WWIoYSk7cmV0dXJuIG51bGwhPT1hPyRiKGEpOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGE7Zm9yKGE9YS5jaGlsZDtudWxsIT09YTspe3ZhciBiPSRiKGEpO2lmKG51bGwhPT1iKXJldHVybiBiO2E9YS5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyIGFjPWNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssYmM9Y2EudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssY2M9Y2EudW5zdGFibGVfc2hvdWxkWWllbGQsZGM9Y2EudW5zdGFibGVfcmVxdWVzdFBhaW50LEI9Y2EudW5zdGFibGVfbm93LGVjPWNhLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGZjPWNhLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGdjPWNhLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGhjPWNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGljPWNhLnVuc3RhYmxlX0xvd1ByaW9yaXR5LGpjPWNhLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxrYz1udWxsLGxjPW51bGw7ZnVuY3Rpb24gbWMoYSl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Db21taXRGaWJlclJvb3Qoa2MsYSx2b2lkIDAsMTI4PT09KGEuY3VycmVudC5mbGFncyYxMjgpKX1jYXRjaChiKXt9fVxudmFyIG9jPU1hdGguY2x6MzI/TWF0aC5jbHozMjpuYyxwYz1NYXRoLmxvZyxxYz1NYXRoLkxOMjtmdW5jdGlvbiBuYyhhKXthPj4+PTA7cmV0dXJuIDA9PT1hPzMyOjMxLShwYyhhKS9xY3wwKXwwfXZhciByYz02NCxzYz00MTk0MzA0O1xuZnVuY3Rpb24gdGMoYSl7c3dpdGNoKGEmLWEpe2Nhc2UgMTpyZXR1cm4gMTtjYXNlIDI6cmV0dXJuIDI7Y2FzZSA0OnJldHVybiA0O2Nhc2UgODpyZXR1cm4gODtjYXNlIDE2OnJldHVybiAxNjtjYXNlIDMyOnJldHVybiAzMjtjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBhJjQxOTQyNDA7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4gYSYxMzAwMjM0MjQ7Y2FzZSAxMzQyMTc3Mjg6cmV0dXJuIDEzNDIxNzcyODtjYXNlIDI2ODQzNTQ1NjpyZXR1cm4gMjY4NDM1NDU2O2Nhc2UgNTM2ODcwOTEyOnJldHVybiA1MzY4NzA5MTI7Y2FzZSAxMDczNzQxODI0OnJldHVybiAxMDczNzQxODI0O1xuZGVmYXVsdDpyZXR1cm4gYX19ZnVuY3Rpb24gdWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gMDt2YXIgZD0wLGU9YS5zdXNwZW5kZWRMYW5lcyxmPWEucGluZ2VkTGFuZXMsZz1jJjI2ODQzNTQ1NTtpZigwIT09Zyl7dmFyIGg9ZyZ+ZTswIT09aD9kPXRjKGgpOihmJj1nLDAhPT1mJiYoZD10YyhmKSkpfWVsc2UgZz1jJn5lLDAhPT1nP2Q9dGMoZyk6MCE9PWYmJihkPXRjKGYpKTtpZigwPT09ZClyZXR1cm4gMDtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZlKSYmKGU9ZCYtZCxmPWImLWIsZT49Znx8MTY9PT1lJiYwIT09KGYmNDE5NDI0MCkpKXJldHVybiBiOzAhPT0oZCY0KSYmKGR8PWMmMTYpO2I9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtb2MoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiB2YyhhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4gYisyNTA7Y2FzZSA4OmNhc2UgMTY6Y2FzZSAzMjpjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBiKzVFMztjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybi0xO2Nhc2UgMTM0MjE3NzI4OmNhc2UgMjY4NDM1NDU2OmNhc2UgNTM2ODcwOTEyOmNhc2UgMTA3Mzc0MTgyNDpyZXR1cm4tMTtkZWZhdWx0OnJldHVybi0xfX1cbmZ1bmN0aW9uIHdjKGEsYil7Zm9yKHZhciBjPWEuc3VzcGVuZGVkTGFuZXMsZD1hLnBpbmdlZExhbmVzLGU9YS5leHBpcmF0aW9uVGltZXMsZj1hLnBlbmRpbmdMYW5lczswPGY7KXt2YXIgZz0zMS1vYyhmKSxoPTE8PGcsaz1lW2ddO2lmKC0xPT09ayl7aWYoMD09PShoJmMpfHwwIT09KGgmZCkpZVtnXT12YyhoLGIpfWVsc2Ugazw9YiYmKGEuZXhwaXJlZExhbmVzfD1oKTtmJj1+aH19ZnVuY3Rpb24geGMoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIHljKCl7dmFyIGE9cmM7cmM8PD0xOzA9PT0ocmMmNDE5NDI0MCkmJihyYz02NCk7cmV0dXJuIGF9ZnVuY3Rpb24gemMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBBYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7NTM2ODcwOTEyIT09YiYmKGEuc3VzcGVuZGVkTGFuZXM9MCxhLnBpbmdlZExhbmVzPTApO2E9YS5ldmVudFRpbWVzO2I9MzEtb2MoYik7YVtiXT1jfWZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXMmfmI7YS5wZW5kaW5nTGFuZXM9YjthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1iO2EubXV0YWJsZVJlYWRMYW5lcyY9YjthLmVudGFuZ2xlZExhbmVzJj1iO2I9YS5lbnRhbmdsZW1lbnRzO3ZhciBkPWEuZXZlbnRUaW1lcztmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGM7KXt2YXIgZT0zMS1vYyhjKSxmPTE8PGU7YltlXT0wO2RbZV09LTE7YVtlXT0tMTtjJj1+Zn19XG5mdW5jdGlvbiBDYyhhLGIpe3ZhciBjPWEuZW50YW5nbGVkTGFuZXN8PWI7Zm9yKGE9YS5lbnRhbmdsZW1lbnRzO2M7KXt2YXIgZD0zMS1vYyhjKSxlPTE8PGQ7ZSZifGFbZF0mYiYmKGFbZF18PWIpO2MmPX5lfX12YXIgQz0wO2Z1bmN0aW9uIERjKGEpe2EmPS1hO3JldHVybiAxPGE/NDxhPzAhPT0oYSYyNjg0MzU0NTUpPzE2OjUzNjg3MDkxMjo0OjF9dmFyIEVjLEZjLEdjLEhjLEljLEpjPSExLEtjPVtdLExjPW51bGwsTWM9bnVsbCxOYz1udWxsLE9jPW5ldyBNYXAsUGM9bmV3IE1hcCxRYz1bXSxSYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBTYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOkxjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpNYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpOYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6T2MuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6UGMuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBUYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXtibG9ja2VkT246Yixkb21FdmVudE5hbWU6YyxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Zix0YXJnZXRDb250YWluZXJzOltlXX0sbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZGYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBVYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBMYz1UYyhMYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gTWM9VGMoTWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIE5jPVRjKE5jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7T2Muc2V0KGYsVGMoT2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLFBjLnNldChmLFRjKFBjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFZjKGEpe3ZhciBiPVdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9VmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9V2IoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7SWMoYS5wcmlvcml0eSxmdW5jdGlvbigpe0djKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIFhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz1ZYyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsPT09Yyl7Yz1hLm5hdGl2ZUV2ZW50O3ZhciBkPW5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSxjKTt3Yj1kO2MudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7d2I9bnVsbH1lbHNlIHJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZGYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiBaYyhhLGIsYyl7WGMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uICRjKCl7SmM9ITE7bnVsbCE9PUxjJiZYYyhMYykmJihMYz1udWxsKTtudWxsIT09TWMmJlhjKE1jKSYmKE1jPW51bGwpO251bGwhPT1OYyYmWGMoTmMpJiYoTmM9bnVsbCk7T2MuZm9yRWFjaChaYyk7UGMuZm9yRWFjaChaYyl9XG5mdW5jdGlvbiBhZChhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsSmN8fChKYz0hMCxjYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LCRjKSkpfVxuZnVuY3Rpb24gYmQoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gYWQoYixhKX1pZigwPEtjLmxlbmd0aCl7YWQoS2NbMF0sYSk7Zm9yKHZhciBjPTE7YzxLYy5sZW5ndGg7YysrKXt2YXIgZD1LY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUxjJiZhZChMYyxhKTtudWxsIT09TWMmJmFkKE1jLGEpO251bGwhPT1OYyYmYWQoTmMsYSk7T2MuZm9yRWFjaChiKTtQYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxRYy5sZW5ndGg7YysrKWQ9UWNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPFFjLmxlbmd0aCYmKGM9UWNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspVmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZRYy5zaGlmdCgpfXZhciBjZD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxkZD0hMDtcbmZ1bmN0aW9uIGVkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz0xLGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTQsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1cbmZ1bmN0aW9uIGZkKGEsYixjLGQpe2lmKGRkKXt2YXIgZT1ZYyhhLGIsYyxkKTtpZihudWxsPT09ZSloZChhLGIsZCxpZCxjKSxTYyhhLGQpO2Vsc2UgaWYoVWMoZSxhLGIsYyxkKSlkLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYoU2MoYSxkKSxiJjQmJi0xPFJjLmluZGV4T2YoYSkpe2Zvcig7bnVsbCE9PWU7KXt2YXIgZj1DYihlKTtudWxsIT09ZiYmRWMoZik7Zj1ZYyhhLGIsYyxkKTtudWxsPT09ZiYmaGQoYSxiLGQsaWQsYyk7aWYoZj09PWUpYnJlYWs7ZT1mfW51bGwhPT1lJiZkLnN0b3BQcm9wYWdhdGlvbigpfWVsc2UgaGQoYSxiLGQsbnVsbCxjKX19dmFyIGlkPW51bGw7XG5mdW5jdGlvbiBZYyhhLGIsYyxkKXtpZD1udWxsO2E9eGIoZCk7YT1XYyhhKTtpZihudWxsIT09YSlpZihiPVZiKGEpLG51bGw9PT1iKWE9bnVsbDtlbHNlIGlmKGM9Yi50YWcsMTM9PT1jKXthPVdiKGIpO2lmKG51bGwhPT1hKXJldHVybiBhO2E9bnVsbH1lbHNlIGlmKDM9PT1jKXtpZihiLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXJldHVybiAzPT09Yi50YWc/Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2E9bnVsbH1lbHNlIGIhPT1hJiYoYT1udWxsKTtpZD1hO3JldHVybiBudWxsfVxuZnVuY3Rpb24gamQoYSl7c3dpdGNoKGEpe2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xpY2tcIjpjYXNlIFwiY2xvc2VcIjpjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmNhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcImludmFsaWRcIjpjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJrZXl1cFwiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJwYXN0ZVwiOmNhc2UgXCJwYXVzZVwiOmNhc2UgXCJwbGF5XCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcnVwXCI6Y2FzZSBcInJhdGVjaGFuZ2VcIjpjYXNlIFwicmVzZXRcIjpjYXNlIFwicmVzaXplXCI6Y2FzZSBcInNlZWtlZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2hzdGFydFwiOmNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpjYXNlIFwiY2hhbmdlXCI6Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmNhc2UgXCJ0ZXh0SW5wdXRcIjpjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmNhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOmNhc2UgXCJiZWZvcmVpbnB1dFwiOmNhc2UgXCJibHVyXCI6Y2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpjYXNlIFwiZm9jdXNcIjpjYXNlIFwiaGFzaGNoYW5nZVwiOmNhc2UgXCJwb3BzdGF0ZVwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwic2VsZWN0c3RhcnRcIjpyZXR1cm4gMTtjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJzY3JvbGxcIjpjYXNlIFwidG9nZ2xlXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ3aGVlbFwiOmNhc2UgXCJtb3VzZWVudGVyXCI6Y2FzZSBcIm1vdXNlbGVhdmVcIjpjYXNlIFwicG9pbnRlcmVudGVyXCI6Y2FzZSBcInBvaW50ZXJsZWF2ZVwiOnJldHVybiA0O1xuY2FzZSBcIm1lc3NhZ2VcIjpzd2l0Y2goZWMoKSl7Y2FzZSBmYzpyZXR1cm4gMTtjYXNlIGdjOnJldHVybiA0O2Nhc2UgaGM6Y2FzZSBpYzpyZXR1cm4gMTY7Y2FzZSBqYzpyZXR1cm4gNTM2ODcwOTEyO2RlZmF1bHQ6cmV0dXJuIDE2fWRlZmF1bHQ6cmV0dXJuIDE2fX12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7ZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfVxuZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31BKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1BKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9QSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9QSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9QSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPUEoe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1BKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPUEoe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1BKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPUEoe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPUEoe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1BKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1BKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1pYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtpYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9aWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1pYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihpYSl7dmFyIHhlO2lmKGlhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7SmIocmUsYil9fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2U7XG5mdW5jdGlvbiBJZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTtpZighamEuY2FsbChiLGUpfHwhSGUoYVtlXSxiW2VdKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBKZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBLZShhLGIpe3ZhciBjPUplKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUplKGMpfX1mdW5jdGlvbiBMZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP0xlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE1lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE5lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBPZShhKXt2YXIgYj1NZSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmTGUoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk5lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUtlKGMsZik7dmFyIGc9S2UoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBQZT1pYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmTmUoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSWUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuZnVuY3Rpb24gVmUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgV2U9e2FuaW1hdGlvbmVuZDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlZlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sWGU9e30sWWU9e307XG5pYSYmKFllPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFdlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFdlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWmUoYSl7aWYoWGVbYV0pcmV0dXJuIFhlW2FdO2lmKCFXZVthXSlyZXR1cm4gYTt2YXIgYj1XZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBZZSlyZXR1cm4gWGVbYV09YltjXTtyZXR1cm4gYX12YXIgJGU9WmUoXCJhbmltYXRpb25lbmRcIiksYWY9WmUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksYmY9WmUoXCJhbmltYXRpb25zdGFydFwiKSxjZj1aZShcInRyYW5zaXRpb25lbmRcIiksZGY9bmV3IE1hcCxlZj1cImFib3J0IGF1eENsaWNrIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZmYoYSxiKXtkZi5zZXQoYSxiKTtmYShiLFthXSl9Zm9yKHZhciBnZj0wO2dmPGVmLmxlbmd0aDtnZisrKXt2YXIgaGY9ZWZbZ2ZdLGpmPWhmLnRvTG93ZXJDYXNlKCksa2Y9aGZbMF0udG9VcHBlckNhc2UoKStoZi5zbGljZSgxKTtmZihqZixcIm9uXCIra2YpfWZmKCRlLFwib25BbmltYXRpb25FbmRcIik7ZmYoYWYsXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTtmZihiZixcIm9uQW5pbWF0aW9uU3RhcnRcIik7ZmYoXCJkYmxjbGlja1wiLFwib25Eb3VibGVDbGlja1wiKTtmZihcImZvY3VzaW5cIixcIm9uRm9jdXNcIik7ZmYoXCJmb2N1c291dFwiLFwib25CbHVyXCIpO2ZmKGNmLFwib25UcmFuc2l0aW9uRW5kXCIpO2hhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO1xuaGEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtmYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2ZhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2ZhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmZhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBsZj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLG1mPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KGxmKSk7XG5mdW5jdGlvbiBuZihhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztVYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9fX1pZihRYil0aHJvdyBhPVJiLFFiPSExLFJiPW51bGwsYTt9XG5mdW5jdGlvbiBEKGEsYil7dmFyIGM9YltvZl07dm9pZCAwPT09YyYmKGM9YltvZl09bmV3IFNldCk7dmFyIGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChwZihiLGEsMiwhMSksYy5hZGQoZCkpfWZ1bmN0aW9uIHFmKGEsYixjKXt2YXIgZD0wO2ImJihkfD00KTtwZihjLGEsZCxiKX12YXIgcmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBzZihhKXtpZighYVtyZl0pe2FbcmZdPSEwO2RhLmZvckVhY2goZnVuY3Rpb24oYil7XCJzZWxlY3Rpb25jaGFuZ2VcIiE9PWImJihtZi5oYXMoYil8fHFmKGIsITEsYSkscWYoYiwhMCxhKSl9KTt2YXIgYj05PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDtudWxsPT09Ynx8YltyZl18fChiW3JmXT0hMCxxZihcInNlbGVjdGlvbmNoYW5nZVwiLCExLGIpKX19XG5mdW5jdGlvbiBwZihhLGIsYyxkKXtzd2l0Y2goamQoYikpe2Nhc2UgMTp2YXIgZT1lZDticmVhaztjYXNlIDQ6ZT1nZDticmVhaztkZWZhdWx0OmU9ZmR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IUxifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9V2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufUpiKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1kZi5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQsbj1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjpuPVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOm49XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlICRlOmNhc2UgYWY6Y2FzZSBiZjprPUhkO2JyZWFrO2Nhc2UgY2Y6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdD0wIT09KGImNCksSj0hdCYmXCJzY3JvbGxcIj09PWEseD10P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3Q9W107Zm9yKHZhciB3PWQsdTtudWxsIT09XG53Oyl7dT13O3ZhciBGPXUuc3RhdGVOb2RlOzU9PT11LnRhZyYmbnVsbCE9PUYmJih1PUYsbnVsbCE9PXgmJihGPUtiKHcseCksbnVsbCE9RiYmdC5wdXNoKHRmKHcsRix1KSkpKTtpZihKKWJyZWFrO3c9dy5yZXR1cm59MDx0Lmxlbmd0aCYmKGg9bmV3IGsoaCxuLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnR9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiZjIT09d2ImJihuPWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJihXYyhuKXx8blt1Zl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZihuPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLG49bj9XYyhuKTpudWxsLG51bGwhPT1cbm4mJihKPVZiKG4pLG4hPT1KfHw1IT09bi50YWcmJjYhPT1uLnRhZykpbj1udWxsfWVsc2Ugaz1udWxsLG49ZDtpZihrIT09bil7dD1CZDtGPVwib25Nb3VzZUxlYXZlXCI7eD1cIm9uTW91c2VFbnRlclwiO3c9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl0PVRkLEY9XCJvblBvaW50ZXJMZWF2ZVwiLHg9XCJvblBvaW50ZXJFbnRlclwiLHc9XCJwb2ludGVyXCI7Sj1udWxsPT1rP2g6dWUoayk7dT1udWxsPT1uP2g6dWUobik7aD1uZXcgdChGLHcrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD1KO2gucmVsYXRlZFRhcmdldD11O0Y9bnVsbDtXYyhlKT09PWQmJih0PW5ldyB0KHgsdytcImVudGVyXCIsbixjLGUpLHQudGFyZ2V0PXUsdC5yZWxhdGVkVGFyZ2V0PUosRj10KTtKPUY7aWYoayYmbiliOnt0PWs7eD1uO3c9MDtmb3IodT10O3U7dT12Zih1KSl3Kys7dT0wO2ZvcihGPXg7RjtGPXZmKEYpKXUrKztmb3IoOzA8dy11Oyl0PXZmKHQpLHctLTtmb3IoOzA8dS13Oyl4PVxudmYoeCksdS0tO2Zvcig7dy0tOyl7aWYodD09PXh8fG51bGwhPT14JiZ0PT09eC5hbHRlcm5hdGUpYnJlYWsgYjt0PXZmKHQpO3g9dmYoeCl9dD1udWxsfWVsc2UgdD1udWxsO251bGwhPT1rJiZ3ZihnLGgsayx0LCExKTtudWxsIT09biYmbnVsbCE9PUomJndmKGcsSixuLHQsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIG5hPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpbmE9RmU7ZWxzZXtuYT1EZTt2YXIgeGE9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihuYT1FZSk7aWYobmEmJihuYT1uYShhLGQpKSl7bmUoZyxuYSxjLGUpO2JyZWFrIGF9eGEmJnhhKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoeGE9aC5fd3JhcHBlclN0YXRlKSYmXG54YS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZjYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9eGE9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoeGEpfHxcInRydWVcIj09PXhhLmNvbnRlbnRFZGl0YWJsZSlRZT14YSxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyICRhO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6YmE9XCJvbkNvbXBvc2l0aW9uRW5kXCI7XG5icmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmJhPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9YmE9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKGJhPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO2JhJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1iYT9cIm9uQ29tcG9zaXRpb25FbmRcIj09PWJhJiZpZSYmKCRhPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSkseGE9b2UoZCxiYSksMDx4YS5sZW5ndGgmJihiYT1uZXcgTGQoYmEsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpiYSxsaXN0ZW5lcnM6eGF9KSwkYT9iYS5kYXRhPSRhOigkYT1oZShjKSxudWxsIT09JGEmJihiYS5kYXRhPSRhKSkpKTtpZigkYT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSxcbjA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT0kYSl9c2UoZyxiKX0pfWZ1bmN0aW9uIHRmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1LYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdCh0ZihhLGYsZSkpLGY9S2IoYSxiKSxudWxsIT1mJiZkLnB1c2godGYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiB2ZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gd2YoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1LYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdCh0ZihjLGssaCkpKTplfHwoaz1LYihjLGYpLG51bGwhPWsmJmcucHVzaCh0ZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfXZhciB4Zj0vXFxyXFxuPy9nLHlmPS9cXHUwMDAwfFxcdUZGRkQvZztmdW5jdGlvbiB6ZihhKXtyZXR1cm4oXCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6XCJcIithKS5yZXBsYWNlKHhmLFwiXFxuXCIpLnJlcGxhY2UoeWYsXCJcIil9ZnVuY3Rpb24gQWYoYSxiLGMpe2I9emYoYik7aWYoemYoYSkhPT1iJiZjKXRocm93IEVycm9yKHAoNDI1KSk7fWZ1bmN0aW9uIEJmKCl7fVxudmFyIENmPW51bGwsRGY9bnVsbDtmdW5jdGlvbiBFZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciBGZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxHZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsSGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIFByb21pc2U/UHJvbWlzZTp2b2lkIDAsSmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHF1ZXVlTWljcm90YXNrP3F1ZXVlTWljcm90YXNrOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgSGY/ZnVuY3Rpb24oYSl7cmV0dXJuIEhmLnJlc29sdmUobnVsbCkudGhlbihhKS5jYXRjaChJZil9OkZmO2Z1bmN0aW9uIElmKGEpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBhO30pfVxuZnVuY3Rpb24gS2YoYSxiKXt2YXIgYz1iLGQ9MDtkb3t2YXIgZT1jLm5leHRTaWJsaW5nO2EucmVtb3ZlQ2hpbGQoYyk7aWYoZSYmOD09PWUubm9kZVR5cGUpaWYoYz1lLmRhdGEsXCIvJFwiPT09Yyl7aWYoMD09PWQpe2EucmVtb3ZlQ2hpbGQoZSk7YmQoYik7cmV0dXJufWQtLX1lbHNlXCIkXCIhPT1jJiZcIiQ/XCIhPT1jJiZcIiQhXCIhPT1jfHxkKys7Yz1lfXdoaWxlKGMpO2JkKGIpfWZ1bmN0aW9uIExmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrO2lmKDg9PT1iKXtiPWEuZGF0YTtpZihcIiRcIj09PWJ8fFwiJCFcIj09PWJ8fFwiJD9cIj09PWIpYnJlYWs7aWYoXCIvJFwiPT09YilyZXR1cm4gbnVsbH19cmV0dXJuIGF9XG5mdW5jdGlvbiBNZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksT2Y9XCJfX3JlYWN0RmliZXIkXCIrTmYsUGY9XCJfX3JlYWN0UHJvcHMkXCIrTmYsdWY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK05mLG9mPVwiX19yZWFjdEV2ZW50cyRcIitOZixRZj1cIl9fcmVhY3RMaXN0ZW5lcnMkXCIrTmYsUmY9XCJfX3JlYWN0SGFuZGxlcyRcIitOZjtcbmZ1bmN0aW9uIFdjKGEpe3ZhciBiPWFbT2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW3VmXXx8Y1tPZl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1NZihhKTtudWxsIT09YTspe2lmKGM9YVtPZl0pcmV0dXJuIGM7YT1NZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW09mXXx8YVt1Zl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcihwKDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW1BmXXx8bnVsbH12YXIgU2Y9W10sVGY9LTE7ZnVuY3Rpb24gVWYoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBFKGEpezA+VGZ8fChhLmN1cnJlbnQ9U2ZbVGZdLFNmW1RmXT1udWxsLFRmLS0pfWZ1bmN0aW9uIEcoYSxiKXtUZisrO1NmW1RmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIFZmPXt9LEg9VWYoVmYpLFdmPVVmKCExKSxYZj1WZjtmdW5jdGlvbiBZZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFZmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfVxuZnVuY3Rpb24gWmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiAkZigpe0UoV2YpO0UoSCl9ZnVuY3Rpb24gYWcoYSxiLGMpe2lmKEguY3VycmVudCE9PVZmKXRocm93IEVycm9yKHAoMTY4KSk7RyhILGIpO0coV2YsYyl9ZnVuY3Rpb24gYmcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2I9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBiKSl0aHJvdyBFcnJvcihwKDEwOCxSYShhKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBBKHt9LGMsZCl9XG5mdW5jdGlvbiBjZyhhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8VmY7WGY9SC5jdXJyZW50O0coSCxhKTtHKFdmLFdmLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIGRnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcihwKDE2OSkpO2M/KGE9YmcoYSxiLFhmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsRShXZiksRShIKSxHKEgsYSkpOkUoV2YpO0coV2YsYyl9dmFyIGVnPW51bGwsZmc9ITEsZ2c9ITE7ZnVuY3Rpb24gaGcoYSl7bnVsbD09PWVnP2VnPVthXTplZy5wdXNoKGEpfWZ1bmN0aW9uIGlnKGEpe2ZnPSEwO2hnKGEpfVxuZnVuY3Rpb24gamcoKXtpZighZ2cmJm51bGwhPT1lZyl7Z2c9ITA7dmFyIGE9MCxiPUM7dHJ5e3ZhciBjPWVnO2ZvcihDPTE7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07ZG8gZD1kKCEwKTt3aGlsZShudWxsIT09ZCl9ZWc9bnVsbDtmZz0hMX1jYXRjaChlKXt0aHJvdyBudWxsIT09ZWcmJihlZz1lZy5zbGljZShhKzEpKSxhYyhmYyxqZyksZTt9ZmluYWxseXtDPWIsZ2c9ITF9fXJldHVybiBudWxsfXZhciBrZz1bXSxsZz0wLG1nPW51bGwsbmc9MCxvZz1bXSxwZz0wLHFnPW51bGwscmc9MSxzZz1cIlwiO2Z1bmN0aW9uIHRnKGEsYil7a2dbbGcrK109bmc7a2dbbGcrK109bWc7bWc9YTtuZz1ifVxuZnVuY3Rpb24gdWcoYSxiLGMpe29nW3BnKytdPXJnO29nW3BnKytdPXNnO29nW3BnKytdPXFnO3FnPWE7dmFyIGQ9cmc7YT1zZzt2YXIgZT0zMi1vYyhkKS0xO2QmPX4oMTw8ZSk7Yys9MTt2YXIgZj0zMi1vYyhiKStlO2lmKDMwPGYpe3ZhciBnPWUtZSU1O2Y9KGQmKDE8PGcpLTEpLnRvU3RyaW5nKDMyKTtkPj49ZztlLT1nO3JnPTE8PDMyLW9jKGIpK2V8Yzw8ZXxkO3NnPWYrYX1lbHNlIHJnPTE8PGZ8Yzw8ZXxkLHNnPWF9ZnVuY3Rpb24gdmcoYSl7bnVsbCE9PWEucmV0dXJuJiYodGcoYSwxKSx1ZyhhLDEsMCkpfWZ1bmN0aW9uIHdnKGEpe2Zvcig7YT09PW1nOyltZz1rZ1stLWxnXSxrZ1tsZ109bnVsbCxuZz1rZ1stLWxnXSxrZ1tsZ109bnVsbDtmb3IoO2E9PT1xZzspcWc9b2dbLS1wZ10sb2dbcGddPW51bGwsc2c9b2dbLS1wZ10sb2dbcGddPW51bGwscmc9b2dbLS1wZ10sb2dbcGddPW51bGx9dmFyIHhnPW51bGwseWc9bnVsbCxJPSExLHpnPW51bGw7XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPUJnKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2I9YS5kZWxldGlvbnM7bnVsbD09PWI/KGEuZGVsZXRpb25zPVtjXSxhLmZsYWdzfD0xNik6Yi5wdXNoKGMpfVxuZnVuY3Rpb24gQ2coYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1MZihiLmZpcnN0Q2hpbGQpLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1udWxsLCEwKTohMTtjYXNlIDEzOnJldHVybiBiPTghPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYz1udWxsIT09cWc/e2lkOnJnLG92ZXJmbG93OnNnfTpudWxsLGEubWVtb2l6ZWRTdGF0ZT17ZGVoeWRyYXRlZDpiLHRyZWVDb250ZXh0OmMscmV0cnlMYW5lOjEwNzM3NDE4MjR9LGM9QmcoMTgsbnVsbCxudWxsLDApLGMuc3RhdGVOb2RlPWIsYy5yZXR1cm49YSxhLmNoaWxkPWMseGc9YSx5Zz1cbm51bGwsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIERnKGEpe3JldHVybiAwIT09KGEubW9kZSYxKSYmMD09PShhLmZsYWdzJjEyOCl9ZnVuY3Rpb24gRWcoYSl7aWYoSSl7dmFyIGI9eWc7aWYoYil7dmFyIGM9YjtpZighQ2coYSxiKSl7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTtiPUxmKGMubmV4dFNpYmxpbmcpO3ZhciBkPXhnO2ImJkNnKGEsYik/QWcoZCxjKTooYS5mbGFncz1hLmZsYWdzJi00MDk3fDIsST0hMSx4Zz1hKX19ZWxzZXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2EuZmxhZ3M9YS5mbGFncyYtNDA5N3wyO0k9ITE7eGc9YX19fWZ1bmN0aW9uIEZnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjt4Zz1hfVxuZnVuY3Rpb24gR2coYSl7aWYoYSE9PXhnKXJldHVybiExO2lmKCFJKXJldHVybiBGZyhhKSxJPSEwLCExO3ZhciBiOyhiPTMhPT1hLnRhZykmJiEoYj01IT09YS50YWcpJiYoYj1hLnR5cGUsYj1cImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUVmKGEudHlwZSxhLm1lbW9pemVkUHJvcHMpKTtpZihiJiYoYj15Zykpe2lmKERnKGEpKXRocm93IEhnKCksRXJyb3IocCg0MTgpKTtmb3IoO2I7KUFnKGEsYiksYj1MZihiLm5leHRTaWJsaW5nKX1GZyhhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHAoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe3lnPUxmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9eWc9XG5udWxsfX1lbHNlIHlnPXhnP0xmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIEhnKCl7Zm9yKHZhciBhPXlnO2E7KWE9TGYoYS5uZXh0U2libGluZyl9ZnVuY3Rpb24gSWcoKXt5Zz14Zz1udWxsO0k9ITF9ZnVuY3Rpb24gSmcoYSl7bnVsbD09PXpnP3pnPVthXTp6Zy5wdXNoKGEpfXZhciBLZz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBMZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPUEoe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgTWc9VWYobnVsbCksTmc9bnVsbCxPZz1udWxsLFBnPW51bGw7ZnVuY3Rpb24gUWcoKXtQZz1PZz1OZz1udWxsfWZ1bmN0aW9uIFJnKGEpe3ZhciBiPU1nLmN1cnJlbnQ7RShNZyk7YS5fY3VycmVudFZhbHVlPWJ9XG5mdW5jdGlvbiBTZyhhLGIsYyl7Zm9yKDtudWxsIT09YTspe3ZhciBkPWEuYWx0ZXJuYXRlOyhhLmNoaWxkTGFuZXMmYikhPT1iPyhhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWQmJihkLmNoaWxkTGFuZXN8PWIpKTpudWxsIT09ZCYmKGQuY2hpbGRMYW5lcyZiKSE9PWImJihkLmNoaWxkTGFuZXN8PWIpO2lmKGE9PT1jKWJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIFRnKGEsYil7Tmc9YTtQZz1PZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKFVnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIFZnKGEpe3ZhciBiPWEuX2N1cnJlbnRWYWx1ZTtpZihQZyE9PWEpaWYoYT17Y29udGV4dDphLG1lbW9pemVkVmFsdWU6YixuZXh0Om51bGx9LG51bGw9PT1PZyl7aWYobnVsbD09PU5nKXRocm93IEVycm9yKHAoMzA4KSk7T2c9YTtOZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmF9fWVsc2UgT2c9T2cubmV4dD1hO3JldHVybiBifXZhciBXZz1udWxsO2Z1bmN0aW9uIFhnKGEpe251bGw9PT1XZz9XZz1bYV06V2cucHVzaChhKX1mdW5jdGlvbiBZZyhhLGIsYyxkKXt2YXIgZT1iLmludGVybGVhdmVkO251bGw9PT1lPyhjLm5leHQ9YyxYZyhiKSk6KGMubmV4dD1lLm5leHQsZS5uZXh0PWMpO2IuaW50ZXJsZWF2ZWQ9YztyZXR1cm4gWmcoYSxkKX1cbmZ1bmN0aW9uIFpnKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH12YXIgJGc9ITE7ZnVuY3Rpb24gYWgoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIGJoKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIGNoKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fVxuZnVuY3Rpb24gZGgoYSxiLGMpe3ZhciBkPWEudXBkYXRlUXVldWU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZD1kLnNoYXJlZDtpZigwIT09KEsmMikpe3ZhciBlPWQucGVuZGluZztudWxsPT09ZT9iLm5leHQ9YjooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5wZW5kaW5nPWI7cmV0dXJuIFpnKGEsYyl9ZT1kLmludGVybGVhdmVkO251bGw9PT1lPyhiLm5leHQ9YixYZyhkKSk6KGIubmV4dD1lLm5leHQsZS5uZXh0PWIpO2QuaW50ZXJsZWF2ZWQ9YjtyZXR1cm4gWmcoYSxjKX1mdW5jdGlvbiBlaChhLGIsYyl7Yj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLnNoYXJlZCwwIT09KGMmNDE5NDI0MCkpKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0NjKGEsYyl9fVxuZnVuY3Rpb24gZmgoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIGdoKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7JGc9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbT1hLmFsdGVybmF0ZTtudWxsIT09bSYmKG09bS51cGRhdGVRdWV1ZSxoPW0ubGFzdEJhc2VVcGRhdGUsaCE9PWcmJihudWxsPT09aD9tLmZpcnN0QmFzZVVwZGF0ZT1sOmgubmV4dD1sLG0ubGFzdEJhc2VVcGRhdGU9aykpfWlmKG51bGwhPT1mKXt2YXIgcT1lLmJhc2VTdGF0ZTtnPTA7bT1sPWs9bnVsbDtoPWY7ZG97dmFyIHI9aC5sYW5lLHk9aC5ldmVudFRpbWU7aWYoKGQmcik9PT1yKXtudWxsIT09bSYmKG09bS5uZXh0PXtldmVudFRpbWU6eSxsYW5lOjAsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgbj1hLHQ9aDtyPWI7eT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOm49dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuKXtxPW4uY2FsbCh5LHEscik7YnJlYWsgYX1xPW47YnJlYWsgYTtjYXNlIDM6bi5mbGFncz1uLmZsYWdzJi02NTUzN3wxMjg7Y2FzZSAwOm49dC5wYXlsb2FkO3I9XCJmdW5jdGlvblwiPT09dHlwZW9mIG4/bi5jYWxsKHkscSxyKTpuO2lmKG51bGw9PT1yfHx2b2lkIDA9PT1yKWJyZWFrIGE7cT1BKHt9LHEscik7YnJlYWsgYTtjYXNlIDI6JGc9ITB9fW51bGwhPT1oLmNhbGxiYWNrJiYwIT09aC5sYW5lJiYoYS5mbGFnc3w9NjQscj1lLmVmZmVjdHMsbnVsbD09PXI/ZS5lZmZlY3RzPVtoXTpyLnB1c2goaCkpfWVsc2UgeT17ZXZlbnRUaW1lOnksbGFuZTpyLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW0/KGw9bT15LGs9cSk6bT1tLm5leHQ9eSxnfD1yO1xuaD1oLm5leHQ7aWYobnVsbD09PWgpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2Ugcj1oLGg9ci5uZXh0LHIubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9cixlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW0mJihrPXEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW07Yj1lLnNoYXJlZC5pbnRlcmxlYXZlZDtpZihudWxsIT09Yil7ZT1iO2RvIGd8PWUubGFuZSxlPWUubmV4dDt3aGlsZShlIT09Yil9ZWxzZSBudWxsPT09ZiYmKGUuc2hhcmVkLmxhbmVzPTApO2hofD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9cX19XG5mdW5jdGlvbiBpaChhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IocCgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBqaD0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBraChhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6QSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgbmg9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/VmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9TCgpLGU9bGgoYSksZj1jaChkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtiPWRoKGEsZixlKTtudWxsIT09YiYmKG1oKGIsYSxlLGQpLGVoKGIsYSxlKSl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9TCgpLGU9bGgoYSksZj1jaChkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9ZGgoYSxmLGUpO251bGwhPT1iJiYobWgoYixhLGUsZCksZWgoYixhLGUpKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1MKCksZD1cbmxoKGEpLGU9Y2goYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtiPWRoKGEsZSxkKTtudWxsIT09YiYmKG1oKGIsYSxkLGMpLGVoKGIsYSxkKSl9fTtmdW5jdGlvbiBvaChhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFJZShjLGQpfHwhSWUoZSxmKTohMH1cbmZ1bmN0aW9uIHBoKGEsYixjKXt2YXIgZD0hMSxlPVZmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPVZnKGYpOihlPVpmKGIpP1hmOkguY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP1lmKGEsZSk6VmYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1uaDthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHFoKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZuaC5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIHJoKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9amg7YWgoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1WZyhmKTooZj1aZihiKT9YZjpILmN1cnJlbnQsZS5jb250ZXh0PVlmKGEsZikpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihraChhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZuaC5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxnaChhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00MTk0MzA4KX1cbmZ1bmN0aW9uIHNoKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IocCgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcihwKDE0NyxhKSk7dmFyIGU9ZCxmPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1mKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWUucmVmcztiPT09amgmJihiPWUucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZl06YltmXT1hfTtiLl9zdHJpbmdSZWY9ZjtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IocCgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IocCgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIHRoKGEsYil7YT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik7dGhyb3cgRXJyb3IocCgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09YT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjphKSk7fWZ1bmN0aW9uIHVoKGEpe3ZhciBiPWEuX2luaXQ7cmV0dXJuIGIoYS5fcGF5bG9hZCl9XG5mdW5jdGlvbiB2aChhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5kZWxldGlvbnM7bnVsbD09PWQ/KGIuZGVsZXRpb25zPVtjXSxiLmZsYWdzfD0xNik6ZC5wdXNoKGMpfX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT13aChhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGIuZmxhZ3N8PTEwNDg1NzYsYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzfD0yLGMpOmQ7Yi5mbGFnc3w9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJlxubnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFnc3w9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPXhoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7dmFyIGY9Yy50eXBlO2lmKGY9PT15YSlyZXR1cm4gbShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGMua2V5KTtpZihudWxsIT09YiYmKGIuZWxlbWVudFR5cGU9PT1mfHxcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLiQkdHlwZW9mPT09SGEmJnVoKGYpPT09Yi50eXBlKSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9c2goYSxiLGMpLGQucmV0dXJuPWEsZDtkPXloKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPXNoKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8XG5iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9emgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPUFoKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZcIlwiIT09Ynx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPXhoKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjPXloKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLFxuYy5yZWY9c2goYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHdhOnJldHVybiBiPXpoKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtjYXNlIEhhOnZhciBkPWIuX2luaXQ7cmV0dXJuIHEoYSxkKGIuX3BheWxvYWQpLGMpfWlmKGViKGIpfHxLYShiKSlyZXR1cm4gYj1BaChiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjt0aChhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHIoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGMmJlwiXCIhPT1jfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsO2Nhc2Ugd2E6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGw7Y2FzZSBIYTpyZXR1cm4gZT1jLl9pbml0LHIoYSxcbmIsZShjLl9wYXlsb2FkKSxkKX1pZihlYihjKXx8S2EoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO3RoKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZCYmXCJcIiE9PWR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGsoYixhLGQsZSk7Y2FzZSB3YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKTtjYXNlIEhhOnZhciBmPWQuX2luaXQ7cmV0dXJuIHkoYSxiLGMsZihkLl9wYXlsb2FkKSxlKX1pZihlYihkKXx8S2EoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO3RoKGIsZCl9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBuKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCx1PWcsdz1nPTAseD1udWxsO251bGwhPT11JiZ3PGgubGVuZ3RoO3crKyl7dS5pbmRleD53Pyh4PXUsdT1udWxsKTp4PXUuc2libGluZzt2YXIgbj1yKGUsdSxoW3ddLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9eCk7YnJlYWt9YSYmdSYmbnVsbD09PW4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx3KTtudWxsPT09bT9sPW46bS5zaWJsaW5nPW47bT1uO3U9eH1pZih3PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PXUpe2Zvcig7dzxoLmxlbmd0aDt3KyspdT1xKGUsaFt3XSxrKSxudWxsIT09dSYmKGc9Zih1LGcsdyksbnVsbD09PW0/bD11Om0uc2libGluZz11LG09dSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7dzxoLmxlbmd0aDt3KyspeD15KHUsZSx3LGhbd10sayksbnVsbCE9PXgmJihhJiZudWxsIT09eC5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1cbngua2V5P3c6eC5rZXkpLGc9Zih4LGcsdyksbnVsbD09PW0/bD14Om0uc2libGluZz14LG09eCk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZ1bmN0aW9uIHQoZSxnLGgsayl7dmFyIGw9S2EoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IocCgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1oKXRocm93IEVycm9yKHAoMTUxKSk7Zm9yKHZhciB1PWw9bnVsbCxtPWcsdz1nPTAseD1udWxsLG49aC5uZXh0KCk7bnVsbCE9PW0mJiFuLmRvbmU7dysrLG49aC5uZXh0KCkpe20uaW5kZXg+dz8oeD1tLG09bnVsbCk6eD1tLnNpYmxpbmc7dmFyIHQ9cihlLG0sbi52YWx1ZSxrKTtpZihudWxsPT09dCl7bnVsbD09PW0mJihtPXgpO2JyZWFrfWEmJm0mJm51bGw9PT10LmFsdGVybmF0ZSYmYihlLG0pO2c9Zih0LGcsdyk7bnVsbD09PXU/bD10OnUuc2libGluZz10O3U9dDttPXh9aWYobi5kb25lKXJldHVybiBjKGUsXG5tKSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PW0pe2Zvcig7IW4uZG9uZTt3Kyssbj1oLm5leHQoKSluPXEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcihtPWQoZSxtKTshbi5kb25lO3crKyxuPWgubmV4dCgpKW49eShtLGUsdyxuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09bi5rZXk/dzpuLmtleSksZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gSihhLGQsZixoKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT15YSYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mKXtzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSB2YTphOntmb3IodmFyIGs9XG5mLmtleSxsPWQ7bnVsbCE9PWw7KXtpZihsLmtleT09PWspe2s9Zi50eXBlO2lmKGs9PT15YSl7aWYoNz09PWwudGFnKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1lbHNlIGlmKGwuZWxlbWVudFR5cGU9PT1rfHxcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09SGEmJnVoKGspPT09bC50eXBlKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzKTtkLnJlZj1zaChhLGwsZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsbCk7YnJlYWt9ZWxzZSBiKGEsbCk7bD1sLnNpYmxpbmd9Zi50eXBlPT09eWE/KGQ9QWgoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPXloKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPXNoKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB3YTphOntmb3IobD1mLmtleTtudWxsIT09XG5kOyl7aWYoZC5rZXk9PT1sKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPXpoKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpO2Nhc2UgSGE6cmV0dXJuIGw9Zi5faW5pdCxKKGEsZCxsKGYuX3BheWxvYWQpLGgpfWlmKGViKGYpKXJldHVybiBuKGEsZCxmLGgpO2lmKEthKGYpKXJldHVybiB0KGEsZCxmLGgpO3RoKGEsZil9cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBmJiZcIlwiIT09Znx8XCJudW1iZXJcIj09PXR5cGVvZiBmPyhmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6XG4oYyhhLGQpLGQ9eGgoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSkpOmMoYSxkKX1yZXR1cm4gSn12YXIgQmg9dmgoITApLENoPXZoKCExKSxEaD17fSxFaD1VZihEaCksRmg9VWYoRGgpLEdoPVVmKERoKTtmdW5jdGlvbiBIaChhKXtpZihhPT09RGgpdGhyb3cgRXJyb3IocCgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBJaChhLGIpe0coR2gsYik7RyhGaCxhKTtHKEVoLERoKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmxiKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1sYihiLGEpfUUoRWgpO0coRWgsYil9ZnVuY3Rpb24gSmgoKXtFKEVoKTtFKEZoKTtFKEdoKX1cbmZ1bmN0aW9uIEtoKGEpe0hoKEdoLmN1cnJlbnQpO3ZhciBiPUhoKEVoLmN1cnJlbnQpO3ZhciBjPWxiKGIsYS50eXBlKTtiIT09YyYmKEcoRmgsYSksRyhFaCxjKSl9ZnVuY3Rpb24gTGgoYSl7RmguY3VycmVudD09PWEmJihFKEVoKSxFKEZoKSl9dmFyIE09VWYoMCk7XG5mdW5jdGlvbiBNaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgTmg9W107XG5mdW5jdGlvbiBPaCgpe2Zvcih2YXIgYT0wO2E8TmgubGVuZ3RoO2ErKylOaFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO05oLmxlbmd0aD0wfXZhciBQaD11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLFFoPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLFJoPTAsTj1udWxsLE89bnVsbCxQPW51bGwsU2g9ITEsVGg9ITEsVWg9MCxWaD0wO2Z1bmN0aW9uIFEoKXt0aHJvdyBFcnJvcihwKDMyMSkpO31mdW5jdGlvbiBXaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoYSxiLGMsZCxlLGYpe1JoPWY7Tj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7UGguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9ZaDpaaDthPWMoZCxlKTtpZihUaCl7Zj0wO2Rve1RoPSExO1VoPTA7aWYoMjU8PWYpdGhyb3cgRXJyb3IocCgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtQaC5jdXJyZW50PSRoO2E9YyhkLGUpfXdoaWxlKFRoKX1QaC5jdXJyZW50PWFpO2I9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7Umg9MDtQPU89Tj1udWxsO1NoPSExO2lmKGIpdGhyb3cgRXJyb3IocCgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBiaSgpe3ZhciBhPTAhPT1VaDtVaD0wO3JldHVybiBhfVxuZnVuY3Rpb24gY2koKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWE7cmV0dXJuIFB9ZnVuY3Rpb24gZGkoKXtpZihudWxsPT09Tyl7dmFyIGE9Ti5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Ty5uZXh0O3ZhciBiPW51bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZTpQLm5leHQ7aWYobnVsbCE9PWIpUD1iLE89YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzEwKSk7Tz1hO2E9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxiYXNlUXVldWU6Ty5iYXNlUXVldWUscXVldWU6Ty5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YX1yZXR1cm4gUH1cbmZ1bmN0aW9uIGVpKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gZmkoYSl7dmFyIGI9ZGkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1PLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2Y9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1udWxsLGs9bnVsbCxsPWY7ZG97dmFyIG09bC5sYW5lO2lmKChSaCZtKT09PW0pbnVsbCE9PWsmJihrPWsubmV4dD17bGFuZTowLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxlYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWwuaGFzRWFnZXJTdGF0ZT9sLmVhZ2VyU3RhdGU6YShkLGwuYWN0aW9uKTtlbHNle3ZhciBxPXtsYW5lOm0sYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLFxuZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09az8oaD1rPXEsZz1kKTprPWsubmV4dD1xO04ubGFuZXN8PW07aGh8PW19bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1mKTtudWxsPT09az9nPWQ6ay5uZXh0PWg7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwoVWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWc7Yi5iYXNlUXVldWU9aztjLmxhc3RSZW5kZXJlZFN0YXRlPWR9YT1jLmludGVybGVhdmVkO2lmKG51bGwhPT1hKXtlPWE7ZG8gZj1lLmxhbmUsTi5sYW5lc3w9ZixoaHw9ZixlPWUubmV4dDt3aGlsZShlIT09YSl9ZWxzZSBudWxsPT09ZSYmKGMubGFuZXM9MCk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIGdpKGEpe3ZhciBiPWRpKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChVZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfWZ1bmN0aW9uIGhpKCl7fVxuZnVuY3Rpb24gaWkoYSxiKXt2YXIgYz1OLGQ9ZGkoKSxlPWIoKSxmPSFIZShkLm1lbW9pemVkU3RhdGUsZSk7ZiYmKGQubWVtb2l6ZWRTdGF0ZT1lLFVnPSEwKTtkPWQucXVldWU7amkoa2kuYmluZChudWxsLGMsZCxhKSxbYV0pO2lmKGQuZ2V0U25hcHNob3QhPT1ifHxmfHxudWxsIT09UCYmUC5tZW1vaXplZFN0YXRlLnRhZyYxKXtjLmZsYWdzfD0yMDQ4O2xpKDksbWkuYmluZChudWxsLGMsZCxlLGIpLHZvaWQgMCxudWxsKTtpZihudWxsPT09Uil0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oUmgmMzApfHxuaShjLGIsZSl9cmV0dXJuIGV9ZnVuY3Rpb24gbmkoYSxiLGMpe2EuZmxhZ3N8PTE2Mzg0O2E9e2dldFNuYXBzaG90OmIsdmFsdWU6Y307Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE4udXBkYXRlUXVldWU9YixiLnN0b3Jlcz1bYV0pOihjPWIuc3RvcmVzLG51bGw9PT1jP2Iuc3RvcmVzPVthXTpjLnB1c2goYSkpfVxuZnVuY3Rpb24gbWkoYSxiLGMsZCl7Yi52YWx1ZT1jO2IuZ2V0U25hcHNob3Q9ZDtvaShiKSYmcGkoYSl9ZnVuY3Rpb24ga2koYSxiLGMpe3JldHVybiBjKGZ1bmN0aW9uKCl7b2koYikmJnBpKGEpfSl9ZnVuY3Rpb24gb2koYSl7dmFyIGI9YS5nZXRTbmFwc2hvdDthPWEudmFsdWU7dHJ5e3ZhciBjPWIoKTtyZXR1cm4hSGUoYSxjKX1jYXRjaChkKXtyZXR1cm4hMH19ZnVuY3Rpb24gcGkoYSl7dmFyIGI9WmcoYSwxKTtudWxsIT09YiYmbWgoYixhLDEsLTEpfVxuZnVuY3Rpb24gcWkoYSl7dmFyIGI9Y2koKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjplaSxsYXN0UmVuZGVyZWRTdGF0ZTphfTtiLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPXJpLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBsaShhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE4udXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gc2koKXtyZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIHRpKGEsYixjLGQpe3ZhciBlPWNpKCk7Ti5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9bGkoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWRpKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmV2goZCxnLmRlcHMpKXtlLm1lbW9pemVkU3RhdGU9bGkoYixjLGYsZCk7cmV0dXJufX1OLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1saSgxfGIsYyxmLGQpfWZ1bmN0aW9uIHZpKGEsYil7cmV0dXJuIHRpKDgzOTA2NTYsOCxhLGIpfWZ1bmN0aW9uIGppKGEsYil7cmV0dXJuIHVpKDIwNDgsOCxhLGIpfWZ1bmN0aW9uIHdpKGEsYil7cmV0dXJuIHVpKDQsMixhLGIpfWZ1bmN0aW9uIHhpKGEsYil7cmV0dXJuIHVpKDQsNCxhLGIpfVxuZnVuY3Rpb24geWkoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiB6aShhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHVpKDQsNCx5aS5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBBaSgpe31mdW5jdGlvbiBCaShhLGIpe3ZhciBjPWRpKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZXaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIENpKGEsYil7dmFyIGM9ZGkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJldoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIERpKGEsYixjKXtpZigwPT09KFJoJjIxKSlyZXR1cm4gYS5iYXNlU3RhdGUmJihhLmJhc2VTdGF0ZT0hMSxVZz0hMCksYS5tZW1vaXplZFN0YXRlPWM7SGUoYyxiKXx8KGM9eWMoKSxOLmxhbmVzfD1jLGhofD1jLGEuYmFzZVN0YXRlPSEwKTtyZXR1cm4gYn1mdW5jdGlvbiBFaShhLGIpe3ZhciBjPUM7Qz0wIT09YyYmND5jP2M6NDthKCEwKTt2YXIgZD1RaC50cmFuc2l0aW9uO1FoLnRyYW5zaXRpb249e307dHJ5e2EoITEpLGIoKX1maW5hbGx5e0M9YyxRaC50cmFuc2l0aW9uPWR9fWZ1bmN0aW9uIEZpKCl7cmV0dXJuIGRpKCkubWVtb2l6ZWRTdGF0ZX1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD1saChhKTtjPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZihIaShhKSlJaShiLGMpO2Vsc2UgaWYoYz1ZZyhhLGIsYyxkKSxudWxsIT09Yyl7dmFyIGU9TCgpO21oKGMsYSxkLGUpO0ppKGMsYixkKX19XG5mdW5jdGlvbiByaShhLGIsYyl7dmFyIGQ9bGgoYSksZT17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoSGkoYSkpSWkoYixlKTtlbHNle3ZhciBmPWEuYWx0ZXJuYXRlO2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWZ8fDA9PT1mLmxhbmVzKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmhhc0VhZ2VyU3RhdGU9ITA7ZS5lYWdlclN0YXRlPWg7aWYoSGUoaCxnKSl7dmFyIGs9Yi5pbnRlcmxlYXZlZDtudWxsPT09az8oZS5uZXh0PWUsWGcoYikpOihlLm5leHQ9ay5uZXh0LGsubmV4dD1lKTtiLmludGVybGVhdmVkPWU7cmV0dXJufX1jYXRjaChsKXt9ZmluYWxseXt9Yz1ZZyhhLGIsZSxkKTtudWxsIT09YyYmKGU9TCgpLG1oKGMsYSxkLGUpLEppKGMsYixkKSl9fVxuZnVuY3Rpb24gSGkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7cmV0dXJuIGE9PT1OfHxudWxsIT09YiYmYj09PU59ZnVuY3Rpb24gSWkoYSxiKXtUaD1TaD0hMDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifWZ1bmN0aW9uIEppKGEsYixjKXtpZigwIT09KGMmNDE5NDI0MCkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG52YXIgYWk9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VJbnNlcnRpb25FZmZlY3Q6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlEsdXNlTXV0YWJsZVNvdXJjZTpRLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlEsdXNlSWQ6USx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFloPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe2NpKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OnZpLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiB0aSg0MTk0MzA4LFxuNCx5aS5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRpKDQxOTQzMDgsNCxhLGIpfSx1c2VJbnNlcnRpb25FZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGkoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1jaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1jaSgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTtkLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPUdpLmJpbmQobnVsbCxOLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1cbmNpKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnFpLHVzZURlYnVnVmFsdWU6QWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXtyZXR1cm4gY2koKS5tZW1vaXplZFN0YXRlPWF9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1xaSghMSksYj1hWzBdO2E9RWkuYmluZChudWxsLGFbMV0pO2NpKCkubWVtb2l6ZWRTdGF0ZT1hO3JldHVybltiLGFdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKCl7fSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9TixlPWNpKCk7aWYoSSl7aWYodm9pZCAwPT09Yyl0aHJvdyBFcnJvcihwKDQwNykpO2M9YygpfWVsc2V7Yz1iKCk7aWYobnVsbD09PVIpdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KFJoJjMwKXx8bmkoZCxiLGMpfWUubWVtb2l6ZWRTdGF0ZT1jO3ZhciBmPXt2YWx1ZTpjLGdldFNuYXBzaG90OmJ9O2UucXVldWU9Zjt2aShraS5iaW5kKG51bGwsZCxcbmYsYSksW2FdKTtkLmZsYWdzfD0yMDQ4O2xpKDksbWkuYmluZChudWxsLGQsZixjLGIpLHZvaWQgMCxudWxsKTtyZXR1cm4gY30sdXNlSWQ6ZnVuY3Rpb24oKXt2YXIgYT1jaSgpLGI9Ui5pZGVudGlmaWVyUHJlZml4O2lmKEkpe3ZhciBjPXNnO3ZhciBkPXJnO2M9KGQmfigxPDwzMi1vYyhkKS0xKSkudG9TdHJpbmcoMzIpK2M7Yj1cIjpcIitiK1wiUlwiK2M7Yz1VaCsrOzA8YyYmKGIrPVwiSFwiK2MudG9TdHJpbmcoMzIpKTtiKz1cIjpcIn1lbHNlIGM9VmgrKyxiPVwiOlwiK2IrXCJyXCIrYy50b1N0cmluZygzMikrXCI6XCI7cmV0dXJuIGEubWVtb2l6ZWRTdGF0ZT1ifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFpoPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpCaSx1c2VDb250ZXh0OlZnLHVzZUVmZmVjdDpqaSx1c2VJbXBlcmF0aXZlSGFuZGxlOnppLHVzZUluc2VydGlvbkVmZmVjdDp3aSx1c2VMYXlvdXRFZmZlY3Q6eGksdXNlTWVtbzpDaSx1c2VSZWR1Y2VyOmZpLHVzZVJlZjpzaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBmaShlaSl9LFxudXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWRpKCk7cmV0dXJuIERpKGIsTy5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9ZmkoZWkpWzBdLGI9ZGkoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmhpLHVzZVN5bmNFeHRlcm5hbFN0b3JlOmlpLHVzZUlkOkZpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sJGg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOkJpLHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OmppLHVzZUltcGVyYXRpdmVIYW5kbGU6emksdXNlSW5zZXJ0aW9uRWZmZWN0OndpLHVzZUxheW91dEVmZmVjdDp4aSx1c2VNZW1vOkNpLHVzZVJlZHVjZXI6Z2ksdXNlUmVmOnNpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGdpKGVpKX0sdXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWRpKCk7cmV0dXJuIG51bGw9PT1cbk8/Yi5tZW1vaXplZFN0YXRlPWE6RGkoYixPLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1naShlaSlbMF0sYj1kaSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6aGksdXNlU3luY0V4dGVybmFsU3RvcmU6aWksdXNlSWQ6RmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfTtmdW5jdGlvbiBLaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1QYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZSxkaWdlc3Q6bnVsbH19ZnVuY3Rpb24gTGkoYSxiLGMpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpudWxsLHN0YWNrOm51bGwhPWM/YzpudWxsLGRpZ2VzdDpudWxsIT1iP2I6bnVsbH19XG5mdW5jdGlvbiBNaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgTmk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gT2koYSxiLGMpe2M9Y2goLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UGl8fChQaT0hMCxRaT1kKTtNaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFJpKGEsYixjKXtjPWNoKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX07Yy5jYWxsYmFjaz1mdW5jdGlvbigpe01pKGEsYil9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtNaShhLGIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVNpP1NpPW5ldyBTZXQoW3RoaXNdKTpTaS5hZGQodGhpcykpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gVGkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO2lmKG51bGw9PT1kKXtkPWEucGluZ0NhY2hlPW5ldyBOaTt2YXIgZT1uZXcgU2V0O2Quc2V0KGIsZSl9ZWxzZSBlPWQuZ2V0KGIpLHZvaWQgMD09PWUmJihlPW5ldyBTZXQsZC5zZXQoYixlKSk7ZS5oYXMoYyl8fChlLmFkZChjKSxhPVVpLmJpbmQobnVsbCxhLGIsYyksYi50aGVuKGEsYSkpfWZ1bmN0aW9uIFZpKGEpe2Rve3ZhciBiO2lmKGI9MTM9PT1hLnRhZyliPWEubWVtb2l6ZWRTdGF0ZSxiPW51bGwhPT1iP251bGwhPT1iLmRlaHlkcmF0ZWQ/ITA6ITE6ITA7aWYoYilyZXR1cm4gYTthPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFdpKGEsYixjLGQsZSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIGE9PT1iP2EuZmxhZ3N8PTY1NTM2OihhLmZsYWdzfD0xMjgsYy5mbGFnc3w9MTMxMDcyLGMuZmxhZ3MmPS01MjgwNSwxPT09Yy50YWcmJihudWxsPT09Yy5hbHRlcm5hdGU/Yy50YWc9MTc6KGI9Y2goLTEsMSksYi50YWc9MixkaChjLGIsMSkpKSxjLmxhbmVzfD0xKSxhO2EuZmxhZ3N8PTY1NTM2O2EubGFuZXM9ZTtyZXR1cm4gYX12YXIgWGk9dWEuUmVhY3RDdXJyZW50T3duZXIsVWc9ITE7ZnVuY3Rpb24gWWkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9DaChiLG51bGwsYyxkKTpCaChiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIFppKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtUZyhiLGUpO2Q9WGgoYSxiLGMsZCxmLGUpO2M9YmkoKTtpZihudWxsIT09YSYmIVVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsJGkoYSxiLGUpO0kmJmMmJnZnKGIpO2IuZmxhZ3N8PTE7WWkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBhaihhLGIsYyxkLGUpe2lmKG51bGw9PT1hKXt2YXIgZj1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJiFiaihmKSYmdm9pZCAwPT09Zi5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZixjaihhLGIsZixkLGUpO2E9eWgoYy50eXBlLG51bGwsZCxiLGIubW9kZSxlKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zj1hLmNoaWxkO2lmKDA9PT0oYS5sYW5lcyZlKSl7dmFyIGc9Zi5tZW1vaXplZFByb3BzO2M9Yy5jb21wYXJlO2M9bnVsbCE9PWM/YzpJZTtpZihjKGcsZCkmJmEucmVmPT09Yi5yZWYpcmV0dXJuICRpKGEsYixlKX1iLmZsYWdzfD0xO2E9d2goZixkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBjaihhLGIsYyxkLGUpe2lmKG51bGwhPT1hKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoSWUoZixkKSYmYS5yZWY9PT1iLnJlZilpZihVZz0hMSxiLnBlbmRpbmdQcm9wcz1kPWYsMCE9PShhLmxhbmVzJmUpKTAhPT0oYS5mbGFncyYxMzEwNzIpJiYoVWc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcywkaShhLGIsZSl9cmV0dXJuIGRqKGEsYixjLGQsZSl9XG5mdW5jdGlvbiBlaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZSlpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LEcoZmosZ2opLGdqfD1jO2Vsc2V7aWYoMD09PShjJjEwNzM3NDE4MjQpKXJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sYi51cGRhdGVRdWV1ZT1udWxsLEcoZmosZ2opLGdqfD1hLG51bGw7Yi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfTtkPW51bGwhPT1mP2YuYmFzZUxhbmVzOmM7Ryhmaixnaik7Z2p8PWR9ZWxzZSBudWxsIT09XG5mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxHKGZqLGdqKSxnanw9ZDtZaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mn1mdW5jdGlvbiBkaihhLGIsYyxkLGUpe3ZhciBmPVpmKGMpP1hmOkguY3VycmVudDtmPVlmKGIsZik7VGcoYixlKTtjPVhoKGEsYixjLGQsZixlKTtkPWJpKCk7aWYobnVsbCE9PWEmJiFVZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLCRpKGEsYixlKTtJJiZkJiZ2ZyhiKTtiLmZsYWdzfD0xO1lpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWooYSxiLGMsZCxlKXtpZihaZihjKSl7dmFyIGY9ITA7Y2coYil9ZWxzZSBmPSExO1RnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKWpqKGEsYikscGgoYixjLGQpLHJoKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPVZnKGwpOihsPVpmKGMpP1hmOkguY3VycmVudCxsPVlmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihoIT09ZHx8ayE9PWwpJiZxaChiLGcsZCxsKTskZz0hMTt2YXIgcj1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1yO2doKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxyIT09a3x8V2YuY3VycmVudHx8JGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoa2goYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPSRnfHxvaChiLGMsaCxkLHIsayxsKSk/KHF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSk6XG4oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTtiaChhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOkxnKGIudHlwZSxoKTtnLnByb3BzPWw7cT1iLnBlbmRpbmdQcm9wcztyPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPVZnKGspOihrPVpmKGMpP1hmOkguY3VycmVudCxrPVlmKGIsaykpO3ZhciB5PWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhtPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB5fHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09cXx8ciE9PWspJiZxaChiLGcsZCxrKTskZz0hMTtyPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7Z2goYixkLGcsZSk7dmFyIG49Yi5tZW1vaXplZFN0YXRlO2ghPT1xfHxyIT09bnx8V2YuY3VycmVudHx8JGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB5JiYoa2goYixjLHksZCksbj1iLm1lbW9pemVkU3RhdGUpLChsPSRnfHxvaChiLGMsbCxkLHIsbixrKXx8ITEpPyhtfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLG4sayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLG4saykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MTAyNCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1uKSxnLnByb3BzPWQsZy5zdGF0ZT1uLGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PVxuYS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxkPSExKX1yZXR1cm4ga2ooYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24ga2ooYSxiLGMsZCxlLGYpe2hqKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjEyOCk7aWYoIWQmJiFnKXJldHVybiBlJiZkZyhiLGMsITEpLCRpKGEsYixmKTtkPWIuc3RhdGVOb2RlO1hpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9QmgoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1CaChiLG51bGwsaCxmKSk6WWkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmZGcoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBsaihhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P2FnKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJmFnKGEsYi5jb250ZXh0LCExKTtJaChhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBtaihhLGIsYyxkLGUpe0lnKCk7SmcoZSk7Yi5mbGFnc3w9MjU2O1lpKGEsYixjLGQpO3JldHVybiBiLmNoaWxkfXZhciBuaj17ZGVoeWRyYXRlZDpudWxsLHRyZWVDb250ZXh0Om51bGwscmV0cnlMYW5lOjB9O2Z1bmN0aW9uIG9qKGEpe3JldHVybntiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfX1cbmZ1bmN0aW9uIHBqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPU0uY3VycmVudCxmPSExLGc9MCE9PShiLmZsYWdzJjEyOCksaDsoaD1nKXx8KGg9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtpZihoKWY9ITAsYi5mbGFncyY9LTEyOTtlbHNlIGlmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKWV8PTE7RyhNLGUmMSk7aWYobnVsbD09PWEpe0VnKGIpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiYoYT1hLmRlaHlkcmF0ZWQsbnVsbCE9PWEpKXJldHVybiAwPT09KGIubW9kZSYxKT9iLmxhbmVzPTE6XCIkIVwiPT09YS5kYXRhP2IubGFuZXM9ODpiLmxhbmVzPTEwNzM3NDE4MjQsbnVsbDtnPWQuY2hpbGRyZW47YT1kLmZhbGxiYWNrO3JldHVybiBmPyhkPWIubW9kZSxmPWIuY2hpbGQsZz17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmd9LDA9PT0oZCYxKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPVxuZyk6Zj1xaihnLGQsMCxudWxsKSxhPUFoKGEsZCxjLG51bGwpLGYucmV0dXJuPWIsYS5yZXR1cm49YixmLnNpYmxpbmc9YSxiLmNoaWxkPWYsYi5jaGlsZC5tZW1vaXplZFN0YXRlPW9qKGMpLGIubWVtb2l6ZWRTdGF0ZT1uaixhKTpyaihiLGcpfWU9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lJiYoaD1lLmRlaHlkcmF0ZWQsbnVsbCE9PWgpKXJldHVybiBzaihhLGIsZyxkLGgsZSxjKTtpZihmKXtmPWQuZmFsbGJhY2s7Zz1iLm1vZGU7ZT1hLmNoaWxkO2g9ZS5zaWJsaW5nO3ZhciBrPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn07MD09PShnJjEpJiZiLmNoaWxkIT09ZT8oZD1iLmNoaWxkLGQuY2hpbGRMYW5lcz0wLGQucGVuZGluZ1Byb3BzPWssYi5kZWxldGlvbnM9bnVsbCk6KGQ9d2goZSxrKSxkLnN1YnRyZWVGbGFncz1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCk7bnVsbCE9PWg/Zj13aChoLGYpOihmPUFoKGYsZyxjLG51bGwpLGYuZmxhZ3N8PTIpO2YucmV0dXJuPVxuYjtkLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDtkPWY7Zj1iLmNoaWxkO2c9YS5jaGlsZC5tZW1vaXplZFN0YXRlO2c9bnVsbD09PWc/b2ooYyk6e2Jhc2VMYW5lczpnLmJhc2VMYW5lc3xjLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9O2YubWVtb2l6ZWRTdGF0ZT1nO2YuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmM7Yi5tZW1vaXplZFN0YXRlPW5qO3JldHVybiBkfWY9YS5jaGlsZDthPWYuc2libGluZztkPXdoKGYse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0pOzA9PT0oYi5tb2RlJjEpJiYoZC5sYW5lcz1jKTtkLnJldHVybj1iO2Quc2libGluZz1udWxsO251bGwhPT1hJiYoYz1iLmRlbGV0aW9ucyxudWxsPT09Yz8oYi5kZWxldGlvbnM9W2FdLGIuZmxhZ3N8PTE2KTpjLnB1c2goYSkpO2IuY2hpbGQ9ZDtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gZH1cbmZ1bmN0aW9uIHJqKGEsYil7Yj1xaih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpifSxhLm1vZGUsMCxudWxsKTtiLnJldHVybj1hO3JldHVybiBhLmNoaWxkPWJ9ZnVuY3Rpb24gdGooYSxiLGMsZCl7bnVsbCE9PWQmJkpnKGQpO0JoKGIsYS5jaGlsZCxudWxsLGMpO2E9cmooYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbik7YS5mbGFnc3w9MjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYX1cbmZ1bmN0aW9uIHNqKGEsYixjLGQsZSxmLGcpe2lmKGMpe2lmKGIuZmxhZ3MmMjU2KXJldHVybiBiLmZsYWdzJj0tMjU3LGQ9TGkoRXJyb3IocCg0MjIpKSksdGooYSxiLGcsZCk7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYi5jaGlsZD1hLmNoaWxkLGIuZmxhZ3N8PTEyOCxudWxsO2Y9ZC5mYWxsYmFjaztlPWIubW9kZTtkPXFqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59LGUsMCxudWxsKTtmPUFoKGYsZSxnLG51bGwpO2YuZmxhZ3N8PTI7ZC5yZXR1cm49YjtmLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDswIT09KGIubW9kZSYxKSYmQmgoYixhLmNoaWxkLG51bGwsZyk7Yi5jaGlsZC5tZW1vaXplZFN0YXRlPW9qKGcpO2IubWVtb2l6ZWRTdGF0ZT1uajtyZXR1cm4gZn1pZigwPT09KGIubW9kZSYxKSlyZXR1cm4gdGooYSxiLGcsbnVsbCk7aWYoXCIkIVwiPT09ZS5kYXRhKXtkPWUubmV4dFNpYmxpbmcmJmUubmV4dFNpYmxpbmcuZGF0YXNldDtcbmlmKGQpdmFyIGg9ZC5kZ3N0O2Q9aDtmPUVycm9yKHAoNDE5KSk7ZD1MaShmLGQsdm9pZCAwKTtyZXR1cm4gdGooYSxiLGcsZCl9aD0wIT09KGcmYS5jaGlsZExhbmVzKTtpZihVZ3x8aCl7ZD1SO2lmKG51bGwhPT1kKXtzd2l0Y2goZyYtZyl7Y2FzZSA0OmU9MjticmVhaztjYXNlIDE2OmU9ODticmVhaztjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOmNhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6ZT0zMjticmVhaztjYXNlIDUzNjg3MDkxMjplPTI2ODQzNTQ1NjticmVhaztkZWZhdWx0OmU9MH1lPTAhPT0oZSYoZC5zdXNwZW5kZWRMYW5lc3xnKSk/MDplO1xuMCE9PWUmJmUhPT1mLnJldHJ5TGFuZSYmKGYucmV0cnlMYW5lPWUsWmcoYSxlKSxtaChkLGEsZSwtMSkpfXVqKCk7ZD1MaShFcnJvcihwKDQyMSkpKTtyZXR1cm4gdGooYSxiLGcsZCl9aWYoXCIkP1wiPT09ZS5kYXRhKXJldHVybiBiLmZsYWdzfD0xMjgsYi5jaGlsZD1hLmNoaWxkLGI9dmouYmluZChudWxsLGEpLGUuX3JlYWN0UmV0cnk9YixudWxsO2E9Zi50cmVlQ29udGV4dDt5Zz1MZihlLm5leHRTaWJsaW5nKTt4Zz1iO0k9ITA7emc9bnVsbDtudWxsIT09YSYmKG9nW3BnKytdPXJnLG9nW3BnKytdPXNnLG9nW3BnKytdPXFnLHJnPWEuaWQsc2c9YS5vdmVyZmxvdyxxZz1iKTtiPXJqKGIsZC5jaGlsZHJlbik7Yi5mbGFnc3w9NDA5NjtyZXR1cm4gYn1mdW5jdGlvbiB3aihhLGIsYyl7YS5sYW5lc3w9Yjt2YXIgZD1hLmFsdGVybmF0ZTtudWxsIT09ZCYmKGQubGFuZXN8PWIpO1NnKGEucmV0dXJuLGIsYyl9XG5mdW5jdGlvbiB4aihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zj9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplfTooZi5pc0JhY2t3YXJkcz1iLGYucmVuZGVyaW5nPW51bGwsZi5yZW5kZXJpbmdTdGFydFRpbWU9MCxmLmxhc3Q9ZCxmLnRhaWw9YyxmLnRhaWxNb2RlPWUpfVxuZnVuY3Rpb24geWooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtZaShhLGIsZC5jaGlsZHJlbixjKTtkPU0uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD0xMjg7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ3aihhLGMsYik7ZWxzZSBpZigxOT09PWEudGFnKXdqKGEsYyxiKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9RyhNLGQpO2lmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1NaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3hqKGIsITEsZSxjLGYpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09TWgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXhqKGIsITAsYyxudWxsLGYpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnhqKGIsITEsbnVsbCxudWxsLHZvaWQgMCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGpqKGEsYil7MD09PShiLm1vZGUmMSkmJm51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpfWZ1bmN0aW9uICRpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtoaHw9Yi5sYW5lcztpZigwPT09KGMmYi5jaGlsZExhbmVzKSlyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IocCgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9d2goYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPXdoKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB6aihhLGIsYyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6bGooYik7SWcoKTticmVhaztjYXNlIDU6S2goYik7YnJlYWs7Y2FzZSAxOlpmKGIudHlwZSkmJmNnKGIpO2JyZWFrO2Nhc2UgNDpJaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5tZW1vaXplZFByb3BzLnZhbHVlO0coTWcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZTticmVhaztjYXNlIDEzOmQ9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kKXtpZihudWxsIT09ZC5kZWh5ZHJhdGVkKXJldHVybiBHKE0sTS5jdXJyZW50JjEpLGIuZmxhZ3N8PTEyOCxudWxsO2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiBwaihhLGIsYyk7RyhNLE0uY3VycmVudCYxKTthPSRpKGEsYixjKTtyZXR1cm4gbnVsbCE9PWE/YS5zaWJsaW5nOm51bGx9RyhNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJlxuYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmMTI4KSl7aWYoZClyZXR1cm4geWooYSxiLGMpO2IuZmxhZ3N8PTEyOH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0coTSxNLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIGIubGFuZXM9MCxlaihhLGIsYyl9cmV0dXJuICRpKGEsYixjKX12YXIgQWosQmosQ2osRGo7XG5Baj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Qmo9ZnVuY3Rpb24oKXt9O1xuQ2o9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO0hoKEVoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1BKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXViKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09bCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJlxuKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fChjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxcbmMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZEKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtEaj1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtcbmZ1bmN0aW9uIEVqKGEsYil7aWYoIUkpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIFMoYSl7dmFyIGI9bnVsbCE9PWEuYWx0ZXJuYXRlJiZhLmFsdGVybmF0ZS5jaGlsZD09PWEuY2hpbGQsYz0wLGQ9MDtpZihiKWZvcih2YXIgZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCxkfD1lLmZsYWdzJjE0NjgwMDY0LGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7ZWxzZSBmb3IoZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyxkfD1lLmZsYWdzLGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7YS5zdWJ0cmVlRmxhZ3N8PWQ7YS5jaGlsZExhbmVzPWM7cmV0dXJuIGJ9XG5mdW5jdGlvbiBGaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gUyhiKSxudWxsO2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAzOmQ9Yi5zdGF0ZU5vZGU7SmgoKTtFKFdmKTtFKEgpO09oKCk7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKUdnKGIpP2IuZmxhZ3N8PTQ6bnVsbD09PWF8fGEubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJjA9PT0oYi5mbGFncyYyNTYpfHwoYi5mbGFnc3w9MTAyNCxudWxsIT09emcmJihHaih6Zyksemc9bnVsbCkpO0JqKGEsYik7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDU6TGgoYik7dmFyIGU9SGgoR2guY3VycmVudCk7XG5jPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpQ2ooYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO1MoYik7cmV0dXJuIG51bGx9YT1IaChFaC5jdXJyZW50KTtpZihHZyhiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtkW1BmXT1mO2E9MCE9PShiLm1vZGUmMSk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsZCk7RChcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuZCk7RChcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRChcImludmFsaWRcIixkKX11YihjLGYpO2U9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxoLGEpLGU9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxcbmgsYSksZT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOmVhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZcIm9uU2Nyb2xsXCI9PT1nJiZEKFwic2Nyb2xsXCIsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2RiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9QmYpfWQ9ZTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hJiYoYT1rYihjKSk7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcblwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW09mXT1iO2FbUGZdPWQ7QWooYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2E6e2c9dmIoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixhKTtEKFwiY2xvc2VcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8bGYubGVuZ3RoO2UrKylEKGxmW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuYSk7RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZDticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1nYihhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dWIoYyxlKTtoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/c2IoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm5iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1cbmN8fFwiXCIhPT1rKSYmb2IoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJm9iKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoZWEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRChcInNjcm9sbFwiLGEpOm51bGwhPWsmJnRhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7ZGIoYSxkLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsXG4hMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPUJmKX1zd2l0Y2goYyl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpkPSEhZC5hdXRvRm9jdXM7YnJlYWsgYTtjYXNlIFwiaW1nXCI6ZD0hMDticmVhayBhO2RlZmF1bHQ6ZD0hMX19ZCYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKX1TKGIpO3JldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlEaihhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtjPUhoKEdoLmN1cnJlbnQpO0hoKEVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi5tZW1vaXplZFByb3BzO2RbT2ZdPWI7aWYoZj1kLm5vZGVWYWx1ZSE9PWMpaWYoYT1cbnhnLG51bGwhPT1hKXN3aXRjaChhLnRhZyl7Y2FzZSAzOkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpO2JyZWFrO2Nhc2UgNTohMCE9PWEubWVtb2l6ZWRQcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpfWYmJihiLmZsYWdzfD00KX1lbHNlIGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW09mXT1iLGIuc3RhdGVOb2RlPWR9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDEzOkUoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7aWYoSSYmbnVsbCE9PXlnJiYwIT09KGIubW9kZSYxKSYmMD09PShiLmZsYWdzJjEyOCkpSGcoKSxJZygpLGIuZmxhZ3N8PTk4NTYwLGY9ITE7ZWxzZSBpZihmPUdnKGIpLG51bGwhPT1kJiZudWxsIT09ZC5kZWh5ZHJhdGVkKXtpZihudWxsPT09XG5hKXtpZighZil0aHJvdyBFcnJvcihwKDMxOCkpO2Y9Yi5tZW1vaXplZFN0YXRlO2Y9bnVsbCE9PWY/Zi5kZWh5ZHJhdGVkOm51bGw7aWYoIWYpdGhyb3cgRXJyb3IocCgzMTcpKTtmW09mXT1ifWVsc2UgSWcoKSwwPT09KGIuZmxhZ3MmMTI4KSYmKGIubWVtb2l6ZWRTdGF0ZT1udWxsKSxiLmZsYWdzfD00O1MoYik7Zj0hMX1lbHNlIG51bGwhPT16ZyYmKEdqKHpnKSx6Zz1udWxsKSxmPSEwO2lmKCFmKXJldHVybiBiLmZsYWdzJjY1NTM2P2I6bnVsbH1pZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtkIT09KG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlKSYmZCYmKGIuY2hpbGQuZmxhZ3N8PTgxOTIsMCE9PShiLm1vZGUmMSkmJihudWxsPT09YXx8MCE9PShNLmN1cnJlbnQmMSk/MD09PVQmJihUPTMpOnVqKCkpKTtudWxsIT09Yi51cGRhdGVRdWV1ZSYmKGIuZmxhZ3N8PTQpO1MoYik7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBKaCgpLFxuQmooYSxiKSxudWxsPT09YSYmc2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksUyhiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFJnKGIudHlwZS5fY29udGV4dCksUyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksUyhiKSxudWxsO2Nhc2UgMTk6RShNKTtmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZilyZXR1cm4gUyhiKSxudWxsO2Q9MCE9PShiLmZsYWdzJjEyOCk7Zz1mLnJlbmRlcmluZztpZihudWxsPT09ZylpZihkKUVqKGYsITEpO2Vsc2V7aWYoMCE9PVR8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1NaChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9MTI4O0VqKGYsITEpO2Q9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9ZCxiLmZsYWdzfD00KTtiLnN1YnRyZWVGbGFncz0wO2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTE0NjgwMDY2LFxuZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLnN1YnRyZWVGbGFncz0wLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5zdWJ0cmVlRmxhZ3M9MCxmLmRlbGV0aW9ucz1udWxsLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLGYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7RyhNLE0uY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9XG5hLnNpYmxpbmd9bnVsbCE9PWYudGFpbCYmQigpPkhqJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRWooZiwhMSksYi5sYW5lcz00MTk0MzA0KX1lbHNle2lmKCFkKWlmKGE9TWgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTEyOCxkPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxFaihmLCEwKSxudWxsPT09Zi50YWlsJiZcImhpZGRlblwiPT09Zi50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhSSlyZXR1cm4gUyhiKSxudWxsfWVsc2UgMipCKCktZi5yZW5kZXJpbmdTdGFydFRpbWU+SGomJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRWooZiwhMSksYi5sYW5lcz00MTk0MzA0KTtmLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWYubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZi5sYXN0PWcpfWlmKG51bGwhPT1mLnRhaWwpcmV0dXJuIGI9Zi50YWlsLGYucmVuZGVyaW5nPVxuYixmLnRhaWw9Yi5zaWJsaW5nLGYucmVuZGVyaW5nU3RhcnRUaW1lPUIoKSxiLnNpYmxpbmc9bnVsbCxjPU0uY3VycmVudCxHKE0sZD9jJjF8MjpjJjEpLGI7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIElqKCksZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09ZCYmKGIuZmxhZ3N8PTgxOTIpLGQmJjAhPT0oYi5tb2RlJjEpPzAhPT0oZ2omMTA3Mzc0MTgyNCkmJihTKGIpLGIuc3VidHJlZUZsYWdzJjYmJihiLmZsYWdzfD04MTkyKSk6UyhiKSxudWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7Y2FzZSAyNTpyZXR1cm4gbnVsbH10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIEpqKGEsYil7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksYT1iLmZsYWdzLGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAzOnJldHVybiBKaCgpLEUoV2YpLEUoSCksT2goKSxhPWIuZmxhZ3MsMCE9PShhJjY1NTM2KSYmMD09PShhJjEyOCk/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSA1OnJldHVybiBMaChiKSxudWxsO2Nhc2UgMTM6RShNKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7aWYobnVsbD09PWIuYWx0ZXJuYXRlKXRocm93IEVycm9yKHAoMzQwKSk7SWcoKX1hPWIuZmxhZ3M7cmV0dXJuIGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAxOTpyZXR1cm4gRShNKSxudWxsO2Nhc2UgNDpyZXR1cm4gSmgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFJnKGIudHlwZS5fY29udGV4dCksbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIElqKCksXG5udWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19dmFyIEtqPSExLFU9ITEsTGo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQsVj1udWxsO2Z1bmN0aW9uIE1qKGEsYil7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMpdHJ5e2MobnVsbCl9Y2F0Y2goZCl7VyhhLGIsZCl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBOaihhLGIsYyl7dHJ5e2MoKX1jYXRjaChkKXtXKGEsYixkKX19dmFyIE9qPSExO1xuZnVuY3Rpb24gUGooYSxiKXtDZj1kZDthPU1lKCk7aWYoTmUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGM9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2M9KGM9YS5vd25lckRvY3VtZW50KSYmYy5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBkPWMuZ2V0U2VsZWN0aW9uJiZjLmdldFNlbGVjdGlvbigpO2lmKGQmJjAhPT1kLnJhbmdlQ291bnQpe2M9ZC5hbmNob3JOb2RlO3ZhciBlPWQuYW5jaG9yT2Zmc2V0LGY9ZC5mb2N1c05vZGU7ZD1kLmZvY3VzT2Zmc2V0O3RyeXtjLm5vZGVUeXBlLGYubm9kZVR5cGV9Y2F0Y2goRil7Yz1udWxsO2JyZWFrIGF9dmFyIGc9MCxoPS0xLGs9LTEsbD0wLG09MCxxPWEscj1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHk7Oyl7cSE9PWN8fDAhPT1lJiYzIT09cS5ub2RlVHlwZXx8KGg9ZytlKTtxIT09Znx8MCE9PWQmJjMhPT1xLm5vZGVUeXBlfHwoaz1nK2QpOzM9PT1xLm5vZGVUeXBlJiYoZys9XG5xLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oeT1xLmZpcnN0Q2hpbGQpKWJyZWFrO3I9cTtxPXl9Zm9yKDs7KXtpZihxPT09YSlicmVhayBiO3I9PT1jJiYrK2w9PT1lJiYoaD1nKTtyPT09ZiYmKyttPT09ZCYmKGs9Zyk7aWYobnVsbCE9PSh5PXEubmV4dFNpYmxpbmcpKWJyZWFrO3E9cjtyPXEucGFyZW50Tm9kZX1xPXl9Yz0tMT09PWh8fC0xPT09az9udWxsOntzdGFydDpoLGVuZDprfX1lbHNlIGM9bnVsbH1jPWN8fHtzdGFydDowLGVuZDowfX1lbHNlIGM9bnVsbDtEZj17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpjfTtkZD0hMTtmb3IoVj1iO251bGwhPT1WOylpZihiPVYsYT1iLmNoaWxkLDAhPT0oYi5zdWJ0cmVlRmxhZ3MmMTAyOCkmJm51bGwhPT1hKWEucmV0dXJuPWIsVj1hO2Vsc2UgZm9yKDtudWxsIT09Vjspe2I9Vjt0cnl7dmFyIG49Yi5hbHRlcm5hdGU7aWYoMCE9PShiLmZsYWdzJjEwMjQpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpicmVhaztcbmNhc2UgMTppZihudWxsIT09bil7dmFyIHQ9bi5tZW1vaXplZFByb3BzLEo9bi5tZW1vaXplZFN0YXRlLHg9Yi5zdGF0ZU5vZGUsdz14LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/dDpMZyhiLnR5cGUsdCksSik7eC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT13fWJyZWFrO2Nhc2UgMzp2YXIgdT1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOzE9PT11Lm5vZGVUeXBlP3UudGV4dENvbnRlbnQ9XCJcIjo5PT09dS5ub2RlVHlwZSYmdS5kb2N1bWVudEVsZW1lbnQmJnUucmVtb3ZlQ2hpbGQodS5kb2N1bWVudEVsZW1lbnQpO2JyZWFrO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO319Y2F0Y2goRil7VyhiLGIucmV0dXJuLEYpfWE9Yi5zaWJsaW5nO2lmKG51bGwhPT1hKXthLnJldHVybj1iLnJldHVybjtWPWE7YnJlYWt9Vj1iLnJldHVybn1uPU9qO09qPSExO3JldHVybiBufVxuZnVuY3Rpb24gUWooYSxiLGMpe3ZhciBkPWIudXBkYXRlUXVldWU7ZD1udWxsIT09ZD9kLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09ZCl7dmFyIGU9ZD1kLm5leHQ7ZG97aWYoKGUudGFnJmEpPT09YSl7dmFyIGY9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZiYmTmooYixjLGYpfWU9ZS5uZXh0fXdoaWxlKGUhPT1kKX19ZnVuY3Rpb24gUmooYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIFNqKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWM7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19XG5mdW5jdGlvbiBUaihhKXt2YXIgYj1hLmFsdGVybmF0ZTtudWxsIT09YiYmKGEuYWx0ZXJuYXRlPW51bGwsVGooYikpO2EuY2hpbGQ9bnVsbDthLmRlbGV0aW9ucz1udWxsO2Euc2libGluZz1udWxsOzU9PT1hLnRhZyYmKGI9YS5zdGF0ZU5vZGUsbnVsbCE9PWImJihkZWxldGUgYltPZl0sZGVsZXRlIGJbUGZdLGRlbGV0ZSBiW29mXSxkZWxldGUgYltRZl0sZGVsZXRlIGJbUmZdKSk7YS5zdGF0ZU5vZGU9bnVsbDthLnJldHVybj1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBVaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFZqKGEpe2E6Zm9yKDs7KXtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fFVqKGEucmV0dXJuKSlyZXR1cm4gbnVsbDthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47Zm9yKGE9YS5zaWJsaW5nOzUhPT1hLnRhZyYmNiE9PWEudGFnJiYxOCE9PWEudGFnOyl7aWYoYS5mbGFncyYyKWNvbnRpbnVlIGE7aWYobnVsbD09PWEuY2hpbGR8fDQ9PT1hLnRhZyljb250aW51ZSBhO2Vsc2UgYS5jaGlsZC5yZXR1cm49YSxhPWEuY2hpbGR9aWYoIShhLmZsYWdzJjIpKXJldHVybiBhLnN0YXRlTm9kZX19XG5mdW5jdGlvbiBXaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9QmYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoV2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylXaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBYaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspWGooYSxiLGMpLGE9YS5zaWJsaW5nfXZhciBYPW51bGwsWWo9ITE7ZnVuY3Rpb24gWmooYSxiLGMpe2ZvcihjPWMuY2hpbGQ7bnVsbCE9PWM7KWFrKGEsYixjKSxjPWMuc2libGluZ31cbmZ1bmN0aW9uIGFrKGEsYixjKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtsYy5vbkNvbW1pdEZpYmVyVW5tb3VudChrYyxjKX1jYXRjaChoKXt9c3dpdGNoKGMudGFnKXtjYXNlIDU6VXx8TWooYyxiKTtjYXNlIDY6dmFyIGQ9WCxlPVlqO1g9bnVsbDtaaihhLGIsYyk7WD1kO1lqPWU7bnVsbCE9PVgmJihZaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpOmEucmVtb3ZlQ2hpbGQoYykpOlgucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDE4Om51bGwhPT1YJiYoWWo/KGE9WCxjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP0tmKGEucGFyZW50Tm9kZSxjKToxPT09YS5ub2RlVHlwZSYmS2YoYSxjKSxiZChhKSk6S2YoWCxjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgNDpkPVg7ZT1ZajtYPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7XG5aaihhLGIsYyk7WD1kO1lqPWU7YnJlYWs7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmlmKCFVJiYoZD1jLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiYoZD1kLmxhc3RFZmZlY3QsbnVsbCE9PWQpKSl7ZT1kPWQubmV4dDtkb3t2YXIgZj1lLGc9Zi5kZXN0cm95O2Y9Zi50YWc7dm9pZCAwIT09ZyYmKDAhPT0oZiYyKT9OaihjLGIsZyk6MCE9PShmJjQpJiZOaihjLGIsZykpO2U9ZS5uZXh0fXdoaWxlKGUhPT1kKX1aaihhLGIsYyk7YnJlYWs7Y2FzZSAxOmlmKCFVJiYoTWooYyxiKSxkPWMuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVbm1vdW50KSl0cnl7ZC5wcm9wcz1jLm1lbW9pemVkUHJvcHMsZC5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsZC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGgpe1coYyxiLGgpfVpqKGEsYixjKTticmVhaztjYXNlIDIxOlpqKGEsYixjKTticmVhaztjYXNlIDIyOmMubW9kZSYxPyhVPShkPVUpfHxudWxsIT09XG5jLm1lbW9pemVkU3RhdGUsWmooYSxiLGMpLFU9ZCk6WmooYSxiLGMpO2JyZWFrO2RlZmF1bHQ6WmooYSxiLGMpfX1mdW5jdGlvbiBiayhhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBMaik7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWNrLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gZGsoYSxiKXt2YXIgYz1iLmRlbGV0aW9ucztpZihudWxsIT09Yylmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTt0cnl7dmFyIGY9YSxnPWIsaD1nO2E6Zm9yKDtudWxsIT09aDspe3N3aXRjaChoLnRhZyl7Y2FzZSA1Olg9aC5zdGF0ZU5vZGU7WWo9ITE7YnJlYWsgYTtjYXNlIDM6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO2JyZWFrIGE7Y2FzZSA0Olg9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDticmVhayBhfWg9aC5yZXR1cm59aWYobnVsbD09PVgpdGhyb3cgRXJyb3IocCgxNjApKTthayhmLGcsZSk7WD1udWxsO1lqPSExO3ZhciBrPWUuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5yZXR1cm49bnVsbCk7ZS5yZXR1cm49bnVsbH1jYXRjaChsKXtXKGUsYixsKX19aWYoYi5zdWJ0cmVlRmxhZ3MmMTI4NTQpZm9yKGI9Yi5jaGlsZDtudWxsIT09YjspZWsoYixhKSxiPWIuc2libGluZ31cbmZ1bmN0aW9uIGVrKGEsYil7dmFyIGM9YS5hbHRlcm5hdGUsZD1hLmZsYWdzO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmRrKGIsYSk7ZmsoYSk7aWYoZCY0KXt0cnl7UWooMyxhLGEucmV0dXJuKSxSaigzLGEpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX10cnl7UWooNSxhLGEucmV0dXJuKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMTpkayhiLGEpO2ZrKGEpO2QmNTEyJiZudWxsIT09YyYmTWooYyxjLnJldHVybik7YnJlYWs7Y2FzZSA1OmRrKGIsYSk7ZmsoYSk7ZCY1MTImJm51bGwhPT1jJiZNaihjLGMucmV0dXJuKTtpZihhLmZsYWdzJjMyKXt2YXIgZT1hLnN0YXRlTm9kZTt0cnl7b2IoZSxcIlwiKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWlmKGQmNCYmKGU9YS5zdGF0ZU5vZGUsbnVsbCE9ZSkpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcyxnPW51bGwhPT1jP2MubWVtb2l6ZWRQcm9wczpmLGg9YS50eXBlLGs9YS51cGRhdGVRdWV1ZTtcbmEudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09ayl0cnl7XCJpbnB1dFwiPT09aCYmXCJyYWRpb1wiPT09Zi50eXBlJiZudWxsIT1mLm5hbWUmJmFiKGUsZik7dmIoaCxnKTt2YXIgbD12YihoLGYpO2ZvcihnPTA7ZzxrLmxlbmd0aDtnKz0yKXt2YXIgbT1rW2ddLHE9a1tnKzFdO1wic3R5bGVcIj09PW0/c2IoZSxxKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1tP25iKGUscSk6XCJjaGlsZHJlblwiPT09bT9vYihlLHEpOnRhKGUsbSxxLGwpfXN3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjpiYihlLGYpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGUsZik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnZhciByPWUuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZTtlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFmLm11bHRpcGxlO3ZhciB5PWYudmFsdWU7bnVsbCE9eT9mYihlLCEhZi5tdWx0aXBsZSx5LCExKTpyIT09ISFmLm11bHRpcGxlJiYobnVsbCE9Zi5kZWZhdWx0VmFsdWU/ZmIoZSwhIWYubXVsdGlwbGUsXG5mLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoZSwhIWYubXVsdGlwbGUsZi5tdWx0aXBsZT9bXTpcIlwiLCExKSl9ZVtQZl09Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgNjpkayhiLGEpO2ZrKGEpO2lmKGQmNCl7aWYobnVsbD09PWEuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTYyKSk7ZT1hLnN0YXRlTm9kZTtmPWEubWVtb2l6ZWRQcm9wczt0cnl7ZS5ub2RlVmFsdWU9Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMzpkayhiLGEpO2ZrKGEpO2lmKGQmNCYmbnVsbCE9PWMmJmMubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpdHJ5e2JkKGIuY29udGFpbmVySW5mbyl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfWJyZWFrO2Nhc2UgNDpkayhiLGEpO2ZrKGEpO2JyZWFrO2Nhc2UgMTM6ZGsoYixhKTtmayhhKTtlPWEuY2hpbGQ7ZS5mbGFncyY4MTkyJiYoZj1udWxsIT09ZS5tZW1vaXplZFN0YXRlLGUuc3RhdGVOb2RlLmlzSGlkZGVuPWYsIWZ8fFxubnVsbCE9PWUuYWx0ZXJuYXRlJiZudWxsIT09ZS5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZXx8KGdrPUIoKSkpO2QmNCYmYmsoYSk7YnJlYWs7Y2FzZSAyMjptPW51bGwhPT1jJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlO2EubW9kZSYxPyhVPShsPVUpfHxtLGRrKGIsYSksVT1sKTpkayhiLGEpO2ZrKGEpO2lmKGQmODE5Mil7bD1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKChhLnN0YXRlTm9kZS5pc0hpZGRlbj1sKSYmIW0mJjAhPT0oYS5tb2RlJjEpKWZvcihWPWEsbT1hLmNoaWxkO251bGwhPT1tOyl7Zm9yKHE9Vj1tO251bGwhPT1WOyl7cj1WO3k9ci5jaGlsZDtzd2l0Y2goci50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpRaig0LHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMTpNaihyLHIucmV0dXJuKTt2YXIgbj1yLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnRXaWxsVW5tb3VudCl7ZD1yO2M9ci5yZXR1cm47dHJ5e2I9ZCxuLnByb3BzPVxuYi5tZW1vaXplZFByb3BzLG4uc3RhdGU9Yi5tZW1vaXplZFN0YXRlLG4uY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaCh0KXtXKGQsYyx0KX19YnJlYWs7Y2FzZSA1Ok1qKHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMjI6aWYobnVsbCE9PXIubWVtb2l6ZWRTdGF0ZSl7aGsocSk7Y29udGludWV9fW51bGwhPT15Pyh5LnJldHVybj1yLFY9eSk6aGsocSl9bT1tLnNpYmxpbmd9YTpmb3IobT1udWxsLHE9YTs7KXtpZig1PT09cS50YWcpe2lmKG51bGw9PT1tKXttPXE7dHJ5e2U9cS5zdGF0ZU5vZGUsbD8oZj1lLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooaD1xLnN0YXRlTm9kZSxrPXEubWVtb2l6ZWRQcm9wcy5zdHlsZSxnPXZvaWQgMCE9PWsmJm51bGwhPT1rJiZrLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9rLmRpc3BsYXk6bnVsbCxoLnN0eWxlLmRpc3BsYXk9XG5yYihcImRpc3BsYXlcIixnKSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX19ZWxzZSBpZig2PT09cS50YWcpe2lmKG51bGw9PT1tKXRyeXtxLnN0YXRlTm9kZS5ub2RlVmFsdWU9bD9cIlwiOnEubWVtb2l6ZWRQcm9wc31jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWVsc2UgaWYoKDIyIT09cS50YWcmJjIzIT09cS50YWd8fG51bGw9PT1xLm1lbW9pemVkU3RhdGV8fHE9PT1hKSYmbnVsbCE9PXEuY2hpbGQpe3EuY2hpbGQucmV0dXJuPXE7cT1xLmNoaWxkO2NvbnRpbnVlfWlmKHE9PT1hKWJyZWFrIGE7Zm9yKDtudWxsPT09cS5zaWJsaW5nOyl7aWYobnVsbD09PXEucmV0dXJufHxxLnJldHVybj09PWEpYnJlYWsgYTttPT09cSYmKG09bnVsbCk7cT1xLnJldHVybn1tPT09cSYmKG09bnVsbCk7cS5zaWJsaW5nLnJldHVybj1xLnJldHVybjtxPXEuc2libGluZ319YnJlYWs7Y2FzZSAxOTpkayhiLGEpO2ZrKGEpO2QmNCYmYmsoYSk7YnJlYWs7Y2FzZSAyMTpicmVhaztkZWZhdWx0OmRrKGIsXG5hKSxmayhhKX19ZnVuY3Rpb24gZmsoYSl7dmFyIGI9YS5mbGFncztpZihiJjIpe3RyeXthOntmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZihVaihjKSl7dmFyIGQ9YzticmVhayBhfWM9Yy5yZXR1cm59dGhyb3cgRXJyb3IocCgxNjApKTt9c3dpdGNoKGQudGFnKXtjYXNlIDU6dmFyIGU9ZC5zdGF0ZU5vZGU7ZC5mbGFncyYzMiYmKG9iKGUsXCJcIiksZC5mbGFncyY9LTMzKTt2YXIgZj1WaihhKTtYaihhLGYsZSk7YnJlYWs7Y2FzZSAzOmNhc2UgNDp2YXIgZz1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGg9VmooYSk7V2ooYSxoLGcpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjEpKTt9fWNhdGNoKGspe1coYSxhLnJldHVybixrKX1hLmZsYWdzJj0tM31iJjQwOTYmJihhLmZsYWdzJj0tNDA5Nyl9ZnVuY3Rpb24gaWsoYSxiLGMpe1Y9YTtqayhhLGIsYyl9XG5mdW5jdGlvbiBqayhhLGIsYyl7Zm9yKHZhciBkPTAhPT0oYS5tb2RlJjEpO251bGwhPT1WOyl7dmFyIGU9VixmPWUuY2hpbGQ7aWYoMjI9PT1lLnRhZyYmZCl7dmFyIGc9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZXx8S2o7aWYoIWcpe3ZhciBoPWUuYWx0ZXJuYXRlLGs9bnVsbCE9PWgmJm51bGwhPT1oLm1lbW9pemVkU3RhdGV8fFU7aD1Lajt2YXIgbD1VO0tqPWc7aWYoKFU9aykmJiFsKWZvcihWPWU7bnVsbCE9PVY7KWc9VixrPWcuY2hpbGQsMjI9PT1nLnRhZyYmbnVsbCE9PWcubWVtb2l6ZWRTdGF0ZT9rayhlKTpudWxsIT09az8oay5yZXR1cm49ZyxWPWspOmtrKGUpO2Zvcig7bnVsbCE9PWY7KVY9ZixqayhmLGIsYyksZj1mLnNpYmxpbmc7Vj1lO0tqPWg7VT1sfWxrKGEsYixjKX1lbHNlIDAhPT0oZS5zdWJ0cmVlRmxhZ3MmODc3MikmJm51bGwhPT1mPyhmLnJldHVybj1lLFY9Zik6bGsoYSxiLGMpfX1cbmZ1bmN0aW9uIGxrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKDAhPT0oYi5mbGFncyY4NzcyKSl7dmFyIGM9Yi5hbHRlcm5hdGU7dHJ5e2lmKDAhPT0oYi5mbGFncyY4NzcyKSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6VXx8UmooNSxiKTticmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoYi5mbGFncyY0JiYhVSlpZihudWxsPT09YylkLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZT1iLmVsZW1lbnRUeXBlPT09Yi50eXBlP2MubWVtb2l6ZWRQcm9wczpMZyhiLnR5cGUsYy5tZW1vaXplZFByb3BzKTtkLmNvbXBvbmVudERpZFVwZGF0ZShlLGMubWVtb2l6ZWRTdGF0ZSxkLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgZj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiZpaChiLGYsZCk7YnJlYWs7Y2FzZSAzOnZhciBnPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWcpe2M9bnVsbDtpZihudWxsIT09Yi5jaGlsZClzd2l0Y2goYi5jaGlsZC50YWcpe2Nhc2UgNTpjPVxuYi5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmM9Yi5jaGlsZC5zdGF0ZU5vZGV9aWgoYixnLGMpfWJyZWFrO2Nhc2UgNTp2YXIgaD1iLnN0YXRlTm9kZTtpZihudWxsPT09YyYmYi5mbGFncyY0KXtjPWg7dmFyIGs9Yi5tZW1vaXplZFByb3BzO3N3aXRjaChiLnR5cGUpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ay5hdXRvRm9jdXMmJmMuZm9jdXMoKTticmVhaztjYXNlIFwiaW1nXCI6ay5zcmMmJihjLnNyYz1rLnNyYyl9fWJyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmKG51bGw9PT1iLm1lbW9pemVkU3RhdGUpe3ZhciBsPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1sKXt2YXIgbT1sLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PW0pe3ZhciBxPW0uZGVoeWRyYXRlZDtudWxsIT09cSYmYmQocSl9fX1icmVhaztjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMTpjYXNlIDIyOmNhc2UgMjM6Y2FzZSAyNTpicmVhaztcbmRlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9VXx8Yi5mbGFncyY1MTImJlNqKGIpfWNhdGNoKHIpe1coYixiLnJldHVybixyKX19aWYoYj09PWEpe1Y9bnVsbDticmVha31jPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47Vj1jO2JyZWFrfVY9Yi5yZXR1cm59fWZ1bmN0aW9uIGhrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKGI9PT1hKXtWPW51bGw7YnJlYWt9dmFyIGM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19XG5mdW5jdGlvbiBrayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9Vjt0cnl7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnZhciBjPWIucmV0dXJuO3RyeXtSaig0LGIpfWNhdGNoKGspe1coYixjLGspfWJyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCl7dmFyIGU9Yi5yZXR1cm47dHJ5e2QuY29tcG9uZW50RGlkTW91bnQoKX1jYXRjaChrKXtXKGIsZSxrKX19dmFyIGY9Yi5yZXR1cm47dHJ5e1NqKGIpfWNhdGNoKGspe1coYixmLGspfWJyZWFrO2Nhc2UgNTp2YXIgZz1iLnJldHVybjt0cnl7U2ooYil9Y2F0Y2goayl7VyhiLGcsayl9fX1jYXRjaChrKXtXKGIsYi5yZXR1cm4sayl9aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgaD1iLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWIucmV0dXJuO1Y9aDticmVha31WPWIucmV0dXJufX1cbnZhciBtaz1NYXRoLmNlaWwsbms9dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixvaz11YS5SZWFjdEN1cnJlbnRPd25lcixwaz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxLPTAsUj1udWxsLFk9bnVsbCxaPTAsZ2o9MCxmaj1VZigwKSxUPTAscWs9bnVsbCxoaD0wLHJrPTAsc2s9MCx0az1udWxsLHVrPW51bGwsZ2s9MCxIaj1JbmZpbml0eSx2az1udWxsLFBpPSExLFFpPW51bGwsU2k9bnVsbCx3az0hMSx4az1udWxsLHlrPTAsems9MCxBaz1udWxsLEJrPS0xLENrPTA7ZnVuY3Rpb24gTCgpe3JldHVybiAwIT09KEsmNik/QigpOi0xIT09Qms/Qms6Qms9QigpfVxuZnVuY3Rpb24gbGgoYSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIDE7aWYoMCE9PShLJjIpJiYwIT09WilyZXR1cm4gWiYtWjtpZihudWxsIT09S2cudHJhbnNpdGlvbilyZXR1cm4gMD09PUNrJiYoQ2s9eWMoKSksQ2s7YT1DO2lmKDAhPT1hKXJldHVybiBhO2E9d2luZG93LmV2ZW50O2E9dm9pZCAwPT09YT8xNjpqZChhLnR5cGUpO3JldHVybiBhfWZ1bmN0aW9uIG1oKGEsYixjLGQpe2lmKDUwPHprKXRocm93IHprPTAsQWs9bnVsbCxFcnJvcihwKDE4NSkpO0FjKGEsYyxkKTtpZigwPT09KEsmMil8fGEhPT1SKWE9PT1SJiYoMD09PShLJjIpJiYocmt8PWMpLDQ9PT1UJiZEayhhLFopKSxFayhhLGQpLDE9PT1jJiYwPT09SyYmMD09PShiLm1vZGUmMSkmJihIaj1CKCkrNTAwLGZnJiZqZygpKX1cbmZ1bmN0aW9uIEVrKGEsYil7dmFyIGM9YS5jYWxsYmFja05vZGU7d2MoYSxiKTt2YXIgZD11YyhhLGE9PT1SP1o6MCk7aWYoMD09PWQpbnVsbCE9PWMmJmJjKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTA7ZWxzZSBpZihiPWQmLWQsYS5jYWxsYmFja1ByaW9yaXR5IT09Yil7bnVsbCE9YyYmYmMoYyk7aWYoMT09PWIpMD09PWEudGFnP2lnKEZrLmJpbmQobnVsbCxhKSk6aGcoRmsuYmluZChudWxsLGEpKSxKZihmdW5jdGlvbigpezA9PT0oSyY2KSYmamcoKX0pLGM9bnVsbDtlbHNle3N3aXRjaChEYyhkKSl7Y2FzZSAxOmM9ZmM7YnJlYWs7Y2FzZSA0OmM9Z2M7YnJlYWs7Y2FzZSAxNjpjPWhjO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmM9amM7YnJlYWs7ZGVmYXVsdDpjPWhjfWM9R2soYyxIay5iaW5kKG51bGwsYSkpfWEuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gSGsoYSxiKXtCaz0tMTtDaz0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO3ZhciBjPWEuY2FsbGJhY2tOb2RlO2lmKElrKCkmJmEuY2FsbGJhY2tOb2RlIT09YylyZXR1cm4gbnVsbDt2YXIgZD11YyhhLGE9PT1SP1o6MCk7aWYoMD09PWQpcmV0dXJuIG51bGw7aWYoMCE9PShkJjMwKXx8MCE9PShkJmEuZXhwaXJlZExhbmVzKXx8YiliPUprKGEsZCk7ZWxzZXtiPWQ7dmFyIGU9SztLfD0yO3ZhciBmPUtrKCk7aWYoUiE9PWF8fFohPT1iKXZrPW51bGwsSGo9QigpKzUwMCxMayhhLGIpO2RvIHRyeXtNaygpO2JyZWFrfWNhdGNoKGgpe05rKGEsaCl9d2hpbGUoMSk7UWcoKTtuay5jdXJyZW50PWY7Sz1lO251bGwhPT1ZP2I9MDooUj1udWxsLFo9MCxiPVQpfWlmKDAhPT1iKXsyPT09YiYmKGU9eGMoYSksMCE9PWUmJihkPWUsYj1PayhhLGUpKSk7aWYoMT09PWIpdGhyb3cgYz1xayxMayhhLDApLERrKGEsZCksRWsoYSxCKCkpLGM7aWYoNj09PWIpRGsoYSxkKTtcbmVsc2V7ZT1hLmN1cnJlbnQuYWx0ZXJuYXRlO2lmKDA9PT0oZCYzMCkmJiFQayhlKSYmKGI9SmsoYSxkKSwyPT09YiYmKGY9eGMoYSksMCE9PWYmJihkPWYsYj1PayhhLGYpKSksMT09PWIpKXRocm93IGM9cWssTGsoYSwwKSxEayhhLGQpLEVrKGEsQigpKSxjO2EuZmluaXNoZWRXb3JrPWU7YS5maW5pc2hlZExhbmVzPWQ7c3dpdGNoKGIpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IocCgzNDUpKTtjYXNlIDI6UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSAzOkRrKGEsZCk7aWYoKGQmMTMwMDIzNDI0KT09PWQmJihiPWdrKzUwMC1CKCksMTA8Yikpe2lmKDAhPT11YyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZkKSE9PWQpe0woKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUZmKFFrLmJpbmQobnVsbCxhLHVrLHZrKSxiKTticmVha31RayhhLHVrLHZrKTticmVhaztjYXNlIDQ6RGsoYSxkKTtpZigoZCY0MTk0MjQwKT09PVxuZClicmVhaztiPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGQ7KXt2YXIgZz0zMS1vYyhkKTtmPTE8PGc7Zz1iW2ddO2c+ZSYmKGU9Zyk7ZCY9fmZ9ZD1lO2Q9QigpLWQ7ZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCptayhkLzE5NjApKS1kO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1GZihRay5iaW5kKG51bGwsYSx1ayx2ayksZCk7YnJlYWt9UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSA1OlFrKGEsdWssdmspO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMjkpKTt9fX1FayhhLEIoKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yz9Iay5iaW5kKG51bGwsYSk6bnVsbH1cbmZ1bmN0aW9uIE9rKGEsYil7dmFyIGM9dGs7YS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYoTGsoYSxiKS5mbGFnc3w9MjU2KTthPUprKGEsYik7MiE9PWEmJihiPXVrLHVrPWMsbnVsbCE9PWImJkdqKGIpKTtyZXR1cm4gYX1mdW5jdGlvbiBHaihhKXtudWxsPT09dWs/dWs9YTp1ay5wdXNoLmFwcGx5KHVrLGEpfVxuZnVuY3Rpb24gUGsoYSl7Zm9yKHZhciBiPWE7Oyl7aWYoYi5mbGFncyYxNjM4NCl7dmFyIGM9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YyYmKGM9Yy5zdG9yZXMsbnVsbCE9PWMpKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLGY9ZS5nZXRTbmFwc2hvdDtlPWUudmFsdWU7dHJ5e2lmKCFIZShmKCksZSkpcmV0dXJuITF9Y2F0Y2goZyl7cmV0dXJuITF9fX1jPWIuY2hpbGQ7aWYoYi5zdWJ0cmVlRmxhZ3MmMTYzODQmJm51bGwhPT1jKWMucmV0dXJuPWIsYj1jO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuITA7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4hMH1cbmZ1bmN0aW9uIERrKGEsYil7YiY9fnNrO2ImPX5yazthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLW9jKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1mdW5jdGlvbiBGayhhKXtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtJaygpO3ZhciBiPXVjKGEsMCk7aWYoMD09PShiJjEpKXJldHVybiBFayhhLEIoKSksbnVsbDt2YXIgYz1KayhhLGIpO2lmKDAhPT1hLnRhZyYmMj09PWMpe3ZhciBkPXhjKGEpOzAhPT1kJiYoYj1kLGM9T2soYSxkKSl9aWYoMT09PWMpdGhyb3cgYz1xayxMayhhLDApLERrKGEsYiksRWsoYSxCKCkpLGM7aWYoNj09PWMpdGhyb3cgRXJyb3IocCgzNDUpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1FrKGEsdWssdmspO0VrKGEsQigpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJrKGEsYil7dmFyIGM9SztLfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0s9YywwPT09SyYmKEhqPUIoKSs1MDAsZmcmJmpnKCkpfX1mdW5jdGlvbiBTayhhKXtudWxsIT09eGsmJjA9PT14ay50YWcmJjA9PT0oSyY2KSYmSWsoKTt2YXIgYj1LO0t8PTE7dmFyIGM9cGsudHJhbnNpdGlvbixkPUM7dHJ5e2lmKHBrLnRyYW5zaXRpb249bnVsbCxDPTEsYSlyZXR1cm4gYSgpfWZpbmFsbHl7Qz1kLHBrLnRyYW5zaXRpb249YyxLPWIsMD09PShLJjYpJiZqZygpfX1mdW5jdGlvbiBJaigpe2dqPWZqLmN1cnJlbnQ7RShmail9XG5mdW5jdGlvbiBMayhhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxHZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3dnKGQpO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiYkZigpO2JyZWFrO2Nhc2UgMzpKaCgpO0UoV2YpO0UoSCk7T2goKTticmVhaztjYXNlIDU6TGgoZCk7YnJlYWs7Y2FzZSA0OkpoKCk7YnJlYWs7Y2FzZSAxMzpFKE0pO2JyZWFrO2Nhc2UgMTk6RShNKTticmVhaztjYXNlIDEwOlJnKGQudHlwZS5fY29udGV4dCk7YnJlYWs7Y2FzZSAyMjpjYXNlIDIzOklqKCl9Yz1jLnJldHVybn1SPWE7WT1hPXdoKGEuY3VycmVudCxudWxsKTtaPWdqPWI7VD0wO3FrPW51bGw7c2s9cms9aGg9MDt1az10az1udWxsO2lmKG51bGwhPT1XZyl7Zm9yKGI9XG4wO2I8V2cubGVuZ3RoO2IrKylpZihjPVdnW2JdLGQ9Yy5pbnRlcmxlYXZlZCxudWxsIT09ZCl7Yy5pbnRlcmxlYXZlZD1udWxsO3ZhciBlPWQubmV4dCxmPWMucGVuZGluZztpZihudWxsIT09Zil7dmFyIGc9Zi5uZXh0O2YubmV4dD1lO2QubmV4dD1nfWMucGVuZGluZz1kfVdnPW51bGx9cmV0dXJuIGF9XG5mdW5jdGlvbiBOayhhLGIpe2Rve3ZhciBjPVk7dHJ5e1FnKCk7UGguY3VycmVudD1haTtpZihTaCl7Zm9yKHZhciBkPU4ubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9U2g9ITF9Umg9MDtQPU89Tj1udWxsO1RoPSExO1VoPTA7b2suY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Q9MTtxaz1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVo7aC5mbGFnc3w9MzI3Njg7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9ayxtPWgscT1tLnRhZztpZigwPT09KG0ubW9kZSYxKSYmKDA9PT1xfHwxMT09PXF8fDE1PT09cSkpe3ZhciByPW0uYWx0ZXJuYXRlO3I/KG0udXBkYXRlUXVldWU9ci51cGRhdGVRdWV1ZSxtLm1lbW9pemVkU3RhdGU9ci5tZW1vaXplZFN0YXRlLFxubS5sYW5lcz1yLmxhbmVzKToobS51cGRhdGVRdWV1ZT1udWxsLG0ubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgeT1WaShnKTtpZihudWxsIT09eSl7eS5mbGFncyY9LTI1NztXaSh5LGcsaCxmLGIpO3kubW9kZSYxJiZUaShmLGwsYik7Yj15O2s9bDt2YXIgbj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1uKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO2IudXBkYXRlUXVldWU9dH1lbHNlIG4uYWRkKGspO2JyZWFrIGF9ZWxzZXtpZigwPT09KGImMSkpe1RpKGYsbCxiKTt1aigpO2JyZWFrIGF9az1FcnJvcihwKDQyNikpfX1lbHNlIGlmKEkmJmgubW9kZSYxKXt2YXIgSj1WaShnKTtpZihudWxsIT09Sil7MD09PShKLmZsYWdzJjY1NTM2KSYmKEouZmxhZ3N8PTI1Nik7V2koSixnLGgsZixiKTtKZyhLaShrLGgpKTticmVhayBhfX1mPWs9S2koayxoKTs0IT09VCYmKFQ9Mik7bnVsbD09PXRrP3RrPVtmXTp0ay5wdXNoKGYpO2Y9Zztkb3tzd2l0Y2goZi50YWcpe2Nhc2UgMzpmLmZsYWdzfD02NTUzNjtcbmImPS1iO2YubGFuZXN8PWI7dmFyIHg9T2koZixrLGIpO2ZoKGYseCk7YnJlYWsgYTtjYXNlIDE6aD1rO3ZhciB3PWYudHlwZSx1PWYuc3RhdGVOb2RlO2lmKDA9PT0oZi5mbGFncyYxMjgpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHUuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09U2l8fCFTaS5oYXModSkpKSl7Zi5mbGFnc3w9NjU1MzY7YiY9LWI7Zi5sYW5lc3w9Yjt2YXIgRj1SaShmLGgsYik7ZmgoZixGKTticmVhayBhfX1mPWYucmV0dXJufXdoaWxlKG51bGwhPT1mKX1UayhjKX1jYXRjaChuYSl7Yj1uYTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIEtrKCl7dmFyIGE9bmsuY3VycmVudDtuay5jdXJyZW50PWFpO3JldHVybiBudWxsPT09YT9haTphfVxuZnVuY3Rpb24gdWooKXtpZigwPT09VHx8Mz09PVR8fDI9PT1UKVQ9NDtudWxsPT09Unx8MD09PShoaCYyNjg0MzU0NTUpJiYwPT09KHJrJjI2ODQzNTQ1NSl8fERrKFIsWil9ZnVuY3Rpb24gSmsoYSxiKXt2YXIgYz1LO0t8PTI7dmFyIGQ9S2soKTtpZihSIT09YXx8WiE9PWIpdms9bnVsbCxMayhhLGIpO2RvIHRyeXtVaygpO2JyZWFrfWNhdGNoKGUpe05rKGEsZSl9d2hpbGUoMSk7UWcoKTtLPWM7bmsuY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHAoMjYxKSk7Uj1udWxsO1o9MDtyZXR1cm4gVH1mdW5jdGlvbiBVaygpe2Zvcig7bnVsbCE9PVk7KVZrKFkpfWZ1bmN0aW9uIE1rKCl7Zm9yKDtudWxsIT09WSYmIWNjKCk7KVZrKFkpfWZ1bmN0aW9uIFZrKGEpe3ZhciBiPVdrKGEuYWx0ZXJuYXRlLGEsZ2opO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9UayhhKTpZPWI7b2suY3VycmVudD1udWxsfVxuZnVuY3Rpb24gVGsoYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYzMjc2OCkpe2lmKGM9RmooYyxiLGdqKSxudWxsIT09Yyl7WT1jO3JldHVybn19ZWxzZXtjPUpqKGMsYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTMyNzY3O1k9YztyZXR1cm59aWYobnVsbCE9PWEpYS5mbGFnc3w9MzI3NjgsYS5zdWJ0cmVlRmxhZ3M9MCxhLmRlbGV0aW9ucz1udWxsO2Vsc2V7VD02O1k9bnVsbDtyZXR1cm59fWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09VCYmKFQ9NSl9ZnVuY3Rpb24gUWsoYSxiLGMpe3ZhciBkPUMsZT1way50cmFuc2l0aW9uO3RyeXtway50cmFuc2l0aW9uPW51bGwsQz0xLFhrKGEsYixjLGQpfWZpbmFsbHl7cGsudHJhbnNpdGlvbj1lLEM9ZH1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFhrKGEsYixjLGQpe2RvIElrKCk7d2hpbGUobnVsbCE9PXhrKTtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtjPWEuZmluaXNoZWRXb3JrO3ZhciBlPWEuZmluaXNoZWRMYW5lcztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IocCgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tQcmlvcml0eT0wO3ZhciBmPWMubGFuZXN8Yy5jaGlsZExhbmVzO0JjKGEsZik7YT09PVImJihZPVI9bnVsbCxaPTApOzA9PT0oYy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJjA9PT0oYy5mbGFncyYyMDY0KXx8d2t8fCh3az0hMCxHayhoYyxmdW5jdGlvbigpe0lrKCk7cmV0dXJuIG51bGx9KSk7Zj0wIT09KGMuZmxhZ3MmMTU5OTApO2lmKDAhPT0oYy5zdWJ0cmVlRmxhZ3MmMTU5OTApfHxmKXtmPXBrLnRyYW5zaXRpb247cGsudHJhbnNpdGlvbj1udWxsO1xudmFyIGc9QztDPTE7dmFyIGg9SztLfD00O29rLmN1cnJlbnQ9bnVsbDtQaihhLGMpO2VrKGMsYSk7T2UoRGYpO2RkPSEhQ2Y7RGY9Q2Y9bnVsbDthLmN1cnJlbnQ9YztpayhjLGEsZSk7ZGMoKTtLPWg7Qz1nO3BrLnRyYW5zaXRpb249Zn1lbHNlIGEuY3VycmVudD1jO3drJiYod2s9ITEseGs9YSx5az1lKTtmPWEucGVuZGluZ0xhbmVzOzA9PT1mJiYoU2k9bnVsbCk7bWMoYy5zdGF0ZU5vZGUsZCk7RWsoYSxCKCkpO2lmKG51bGwhPT1iKWZvcihkPWEub25SZWNvdmVyYWJsZUVycm9yLGM9MDtjPGIubGVuZ3RoO2MrKyllPWJbY10sZChlLnZhbHVlLHtjb21wb25lbnRTdGFjazplLnN0YWNrLGRpZ2VzdDplLmRpZ2VzdH0pO2lmKFBpKXRocm93IFBpPSExLGE9UWksUWk9bnVsbCxhOzAhPT0oeWsmMSkmJjAhPT1hLnRhZyYmSWsoKTtmPWEucGVuZGluZ0xhbmVzOzAhPT0oZiYxKT9hPT09QWs/emsrKzooems9MCxBaz1hKTp6az0wO2pnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBJaygpe2lmKG51bGwhPT14ayl7dmFyIGE9RGMoeWspLGI9cGsudHJhbnNpdGlvbixjPUM7dHJ5e3BrLnRyYW5zaXRpb249bnVsbDtDPTE2PmE/MTY6YTtpZihudWxsPT09eGspdmFyIGQ9ITE7ZWxzZXthPXhrO3hrPW51bGw7eWs9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMzEpKTt2YXIgZT1LO0t8PTQ7Zm9yKFY9YS5jdXJyZW50O251bGwhPT1WOyl7dmFyIGY9VixnPWYuY2hpbGQ7aWYoMCE9PShWLmZsYWdzJjE2KSl7dmFyIGg9Zi5kZWxldGlvbnM7aWYobnVsbCE9PWgpe2Zvcih2YXIgaz0wO2s8aC5sZW5ndGg7aysrKXt2YXIgbD1oW2tdO2ZvcihWPWw7bnVsbCE9PVY7KXt2YXIgbT1WO3N3aXRjaChtLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig4LG0sZil9dmFyIHE9bS5jaGlsZDtpZihudWxsIT09cSlxLnJldHVybj1tLFY9cTtlbHNlIGZvcig7bnVsbCE9PVY7KXttPVY7dmFyIHI9bS5zaWJsaW5nLHk9bS5yZXR1cm47VGoobSk7aWYobT09PVxubCl7Vj1udWxsO2JyZWFrfWlmKG51bGwhPT1yKXtyLnJldHVybj15O1Y9cjticmVha31WPXl9fX12YXIgbj1mLmFsdGVybmF0ZTtpZihudWxsIT09bil7dmFyIHQ9bi5jaGlsZDtpZihudWxsIT09dCl7bi5jaGlsZD1udWxsO2Rve3ZhciBKPXQuc2libGluZzt0LnNpYmxpbmc9bnVsbDt0PUp9d2hpbGUobnVsbCE9PXQpfX1WPWZ9fWlmKDAhPT0oZi5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1nKWcucmV0dXJuPWYsVj1nO2Vsc2UgYjpmb3IoO251bGwhPT1WOyl7Zj1WO2lmKDAhPT0oZi5mbGFncyYyMDQ4KSlzd2l0Y2goZi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UWooOSxmLGYucmV0dXJuKX12YXIgeD1mLnNpYmxpbmc7aWYobnVsbCE9PXgpe3gucmV0dXJuPWYucmV0dXJuO1Y9eDticmVhayBifVY9Zi5yZXR1cm59fXZhciB3PWEuY3VycmVudDtmb3IoVj13O251bGwhPT1WOyl7Zz1WO3ZhciB1PWcuY2hpbGQ7aWYoMCE9PShnLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PVxudSl1LnJldHVybj1nLFY9dTtlbHNlIGI6Zm9yKGc9dztudWxsIT09Vjspe2g9VjtpZigwIT09KGguZmxhZ3MmMjA0OCkpdHJ5e3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpSaig5LGgpfX1jYXRjaChuYSl7VyhoLGgucmV0dXJuLG5hKX1pZihoPT09Zyl7Vj1udWxsO2JyZWFrIGJ9dmFyIEY9aC5zaWJsaW5nO2lmKG51bGwhPT1GKXtGLnJldHVybj1oLnJldHVybjtWPUY7YnJlYWsgYn1WPWgucmV0dXJufX1LPWU7amcoKTtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uUG9zdENvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Qb3N0Q29tbWl0RmliZXJSb290KGtjLGEpfWNhdGNoKG5hKXt9ZD0hMH1yZXR1cm4gZH1maW5hbGx5e0M9Yyxway50cmFuc2l0aW9uPWJ9fXJldHVybiExfWZ1bmN0aW9uIFlrKGEsYixjKXtiPUtpKGMsYik7Yj1PaShhLGIsMSk7YT1kaChhLGIsMSk7Yj1MKCk7bnVsbCE9PWEmJihBYyhhLDEsYiksRWsoYSxiKSl9XG5mdW5jdGlvbiBXKGEsYixjKXtpZigzPT09YS50YWcpWWsoYSxhLGMpO2Vsc2UgZm9yKDtudWxsIT09Yjspe2lmKDM9PT1iLnRhZyl7WWsoYixhLGMpO2JyZWFrfWVsc2UgaWYoMT09PWIudGFnKXt2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09U2l8fCFTaS5oYXMoZCkpKXthPUtpKGMsYSk7YT1SaShiLGEsMSk7Yj1kaChiLGEsMSk7YT1MKCk7bnVsbCE9PWImJihBYyhiLDEsYSksRWsoYixhKSk7YnJlYWt9fWI9Yi5yZXR1cm59fVxuZnVuY3Rpb24gVWkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUwoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7Uj09PWEmJihaJmMpPT09YyYmKDQ9PT1UfHwzPT09VCYmKFomMTMwMDIzNDI0KT09PVomJjUwMD5CKCktZ2s/TGsoYSwwKTpza3w9Yyk7RWsoYSxiKX1mdW5jdGlvbiBaayhhLGIpezA9PT1iJiYoMD09PShhLm1vZGUmMSk/Yj0xOihiPXNjLHNjPDw9MSwwPT09KHNjJjEzMDAyMzQyNCkmJihzYz00MTk0MzA0KSkpO3ZhciBjPUwoKTthPVpnKGEsYik7bnVsbCE9PWEmJihBYyhhLGIsYyksRWsoYSxjKSl9ZnVuY3Rpb24gdmooYSl7dmFyIGI9YS5tZW1vaXplZFN0YXRlLGM9MDtudWxsIT09YiYmKGM9Yi5yZXRyeUxhbmUpO1prKGEsYyl9XG5mdW5jdGlvbiBjayhhLGIpe3ZhciBjPTA7c3dpdGNoKGEudGFnKXtjYXNlIDEzOnZhciBkPWEuc3RhdGVOb2RlO3ZhciBlPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGM9ZS5yZXRyeUxhbmUpO2JyZWFrO2Nhc2UgMTk6ZD1hLnN0YXRlTm9kZTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzE0KSk7fW51bGwhPT1kJiZkLmRlbGV0ZShiKTtaayhhLGMpfXZhciBXaztcbldrPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8V2YuY3VycmVudClVZz0hMDtlbHNle2lmKDA9PT0oYS5sYW5lcyZjKSYmMD09PShiLmZsYWdzJjEyOCkpcmV0dXJuIFVnPSExLHpqKGEsYixjKTtVZz0wIT09KGEuZmxhZ3MmMTMxMDcyKT8hMDohMX1lbHNlIFVnPSExLEkmJjAhPT0oYi5mbGFncyYxMDQ4NTc2KSYmdWcoYixuZyxiLmluZGV4KTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6dmFyIGQ9Yi50eXBlO2pqKGEsYik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1ZZihiLEguY3VycmVudCk7VGcoYixjKTtlPVhoKG51bGwsYixkLGEsZSxjKTt2YXIgZj1iaSgpO2IuZmxhZ3N8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mPyhiLnRhZz0xLGIubWVtb2l6ZWRTdGF0ZT1udWxsLGIudXBkYXRlUXVldWU9XG5udWxsLFpmKGQpPyhmPSEwLGNnKGIpKTpmPSExLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGwsYWgoYiksZS51cGRhdGVyPW5oLGIuc3RhdGVOb2RlPWUsZS5fcmVhY3RJbnRlcm5hbHM9YixyaChiLGQsYSxjKSxiPWtqKG51bGwsYixkLCEwLGYsYykpOihiLnRhZz0wLEkmJmYmJnZnKGIpLFlpKG51bGwsYixlLGMpLGI9Yi5jaGlsZCk7cmV0dXJuIGI7Y2FzZSAxNjpkPWIuZWxlbWVudFR5cGU7YTp7amooYSxiKTthPWIucGVuZGluZ1Byb3BzO2U9ZC5faW5pdDtkPWUoZC5fcGF5bG9hZCk7Yi50eXBlPWQ7ZT1iLnRhZz0kayhkKTthPUxnKGQsYSk7c3dpdGNoKGUpe2Nhc2UgMDpiPWRqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1paihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPVppKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9YWoobnVsbCxiLGQsTGcoZC50eXBlLGEpLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgzMDYsXG5kLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGRqKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGlqKGEsYixkLGUsYyk7Y2FzZSAzOmE6e2xqKGIpO2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzg3KSk7ZD1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRTdGF0ZTtlPWYuZWxlbWVudDtiaChhLGIpO2doKGIsZCxudWxsLGMpO3ZhciBnPWIubWVtb2l6ZWRTdGF0ZTtkPWcuZWxlbWVudDtpZihmLmlzRGVoeWRyYXRlZClpZihmPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOiExLGNhY2hlOmcuY2FjaGUscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpnLnBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc30sYi51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9XG5mLGIubWVtb2l6ZWRTdGF0ZT1mLGIuZmxhZ3MmMjU2KXtlPUtpKEVycm9yKHAoNDIzKSksYik7Yj1taihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBpZihkIT09ZSl7ZT1LaShFcnJvcihwKDQyNCkpLGIpO2I9bWooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgZm9yKHlnPUxmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCkseGc9YixJPSEwLHpnPW51bGwsYz1DaChiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDQwOTYsYz1jLnNpYmxpbmc7ZWxzZXtJZygpO2lmKGQ9PT1lKXtiPSRpKGEsYixjKTticmVhayBhfVlpKGEsYixkLGMpfWI9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIEtoKGIpLG51bGw9PT1hJiZFZyhiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLEVmKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZFZihkLGYpJiYoYi5mbGFnc3w9MzIpLFxuaGooYSxiKSxZaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkVnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gcGooYSxiLGMpO2Nhc2UgNDpyZXR1cm4gSWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9QmgoYixudWxsLGQsYyk6WWkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLFppKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBZaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRQcm9wcztcbmc9ZS52YWx1ZTtHKE1nLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWc7aWYobnVsbCE9PWYpaWYoSGUoZi52YWx1ZSxnKSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFXZi5jdXJyZW50KXtiPSRpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihmPWIuY2hpbGQsbnVsbCE9PWYmJihmLnJldHVybj1iKTtudWxsIT09Zjspe3ZhciBoPWYuZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1oKXtnPWYuY2hpbGQ7Zm9yKHZhciBrPWguZmlyc3RDb250ZXh0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCl7aWYoMT09PWYudGFnKXtrPWNoKC0xLGMmLWMpO2sudGFnPTI7dmFyIGw9Zi51cGRhdGVRdWV1ZTtpZihudWxsIT09bCl7bD1sLnNoYXJlZDt2YXIgbT1sLnBlbmRpbmc7bnVsbD09PW0/ay5uZXh0PWs6KGsubmV4dD1tLm5leHQsbS5uZXh0PWspO2wucGVuZGluZz1rfX1mLmxhbmVzfD1jO2s9Zi5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLmxhbmVzfD1jKTtTZyhmLnJldHVybixcbmMsYik7aC5sYW5lc3w9YzticmVha31rPWsubmV4dH19ZWxzZSBpZigxMD09PWYudGFnKWc9Zi50eXBlPT09Yi50eXBlP251bGw6Zi5jaGlsZDtlbHNlIGlmKDE4PT09Zi50YWcpe2c9Zi5yZXR1cm47aWYobnVsbD09PWcpdGhyb3cgRXJyb3IocCgzNDEpKTtnLmxhbmVzfD1jO2g9Zy5hbHRlcm5hdGU7bnVsbCE9PWgmJihoLmxhbmVzfD1jKTtTZyhnLGMsYik7Zz1mLnNpYmxpbmd9ZWxzZSBnPWYuY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49ZjtlbHNlIGZvcihnPWY7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWY9Zy5zaWJsaW5nO2lmKG51bGwhPT1mKXtmLnJldHVybj1nLnJldHVybjtnPWY7YnJlYWt9Zz1nLnJldHVybn1mPWd9WWkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZD1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixUZyhiLGMpLGU9VmcoZSksZD1kKGUpLGIuZmxhZ3N8PTEsWWkoYSxiLGQsYyksXG5iLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGQ9Yi50eXBlLGU9TGcoZCxiLnBlbmRpbmdQcm9wcyksZT1MZyhkLnR5cGUsZSksYWooYSxiLGQsZSxjKTtjYXNlIDE1OnJldHVybiBjaihhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksamooYSxiKSxiLnRhZz0xLFpmKGQpPyhhPSEwLGNnKGIpKTphPSExLFRnKGIsYykscGgoYixkLGUpLHJoKGIsZCxlLGMpLGtqKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4geWooYSxiLGMpO2Nhc2UgMjI6cmV0dXJuIGVqKGEsYixjKX10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO307ZnVuY3Rpb24gR2soYSxiKXtyZXR1cm4gYWMoYSxiKX1cbmZ1bmN0aW9uIGFsKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5zdWJ0cmVlRmxhZ3M9dGhpcy5mbGFncz0wO3RoaXMuZGVsZXRpb25zPW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIEJnKGEsYixjLGQpe3JldHVybiBuZXcgYWwoYSxiLGMsZCl9ZnVuY3Rpb24gYmooYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uICRrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBiaihhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09RGEpcmV0dXJuIDExO2lmKGE9PT1HYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiB3aChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPUJnKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMuc3VidHJlZUZsYWdzPTAsYy5kZWxldGlvbnM9bnVsbCk7Yy5mbGFncz1hLmZsYWdzJjE0NjgwMDY0O2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB5aChhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYmooYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuIEFoKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgemE6Zz04O2V8PTg7YnJlYWs7Y2FzZSBBYTpyZXR1cm4gYT1CZygxMixjLGIsZXwyKSxhLmVsZW1lbnRUeXBlPUFhLGEubGFuZXM9ZixhO2Nhc2UgRWE6cmV0dXJuIGE9QmcoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9RWEsYS5sYW5lcz1mLGE7Y2FzZSBGYTpyZXR1cm4gYT1CZygxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1GYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiBxaihjLGUsZixiKTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQmE6Zz0xMDticmVhayBhO2Nhc2UgQ2E6Zz05O2JyZWFrIGE7Y2FzZSBEYTpnPTExO1xuYnJlYWsgYTtjYXNlIEdhOmc9MTQ7YnJlYWsgYTtjYXNlIEhhOmc9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1CZyhnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIEFoKGEsYixjLGQpe2E9QmcoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHFqKGEsYixjLGQpe2E9QmcoMjIsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO2Euc3RhdGVOb2RlPXtpc0hpZGRlbjohMX07cmV0dXJuIGF9ZnVuY3Rpb24geGgoYSxiLGMpe2E9QmcoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gemgoYSxiLGMpe2I9QmcoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBibChhLGIsYyxkLGUpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMuY2FsbGJhY2tOb2RlPXRoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPXpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPXpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPXpjKDApO3RoaXMuaWRlbnRpZmllclByZWZpeD1kO3RoaXMub25SZWNvdmVyYWJsZUVycm9yPWU7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVxubnVsbH1mdW5jdGlvbiBjbChhLGIsYyxkLGUsZixnLGgsayl7YT1uZXcgYmwoYSxiLGMsaCxrKTsxPT09Yj8oYj0xLCEwPT09ZiYmKGJ8PTgpKTpiPTA7Zj1CZygzLG51bGwsbnVsbCxiKTthLmN1cnJlbnQ9ZjtmLnN0YXRlTm9kZT1hO2YubWVtb2l6ZWRTdGF0ZT17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDpjLGNhY2hlOm51bGwsdHJhbnNpdGlvbnM6bnVsbCxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOm51bGx9O2FoKGYpO3JldHVybiBhfWZ1bmN0aW9uIGRsKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6d2Esa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBlbChhKXtpZighYSlyZXR1cm4gVmY7YT1hLl9yZWFjdEludGVybmFsczthOntpZihWYihhKSE9PWF8fDEhPT1hLnRhZyl0aHJvdyBFcnJvcihwKDE3MCkpO3ZhciBiPWE7ZG97c3dpdGNoKGIudGFnKXtjYXNlIDM6Yj1iLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGE7Y2FzZSAxOmlmKFpmKGIudHlwZSkpe2I9Yi5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYX19Yj1iLnJldHVybn13aGlsZShudWxsIT09Yik7dGhyb3cgRXJyb3IocCgxNzEpKTt9aWYoMT09PWEudGFnKXt2YXIgYz1hLnR5cGU7aWYoWmYoYykpcmV0dXJuIGJnKGEsYyxiKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGZsKGEsYixjLGQsZSxmLGcsaCxrKXthPWNsKGMsZCwhMCxhLGUsZixnLGgsayk7YS5jb250ZXh0PWVsKG51bGwpO2M9YS5jdXJyZW50O2Q9TCgpO2U9bGgoYyk7Zj1jaChkLGUpO2YuY2FsbGJhY2s9dm9pZCAwIT09YiYmbnVsbCE9PWI/YjpudWxsO2RoKGMsZixlKTthLmN1cnJlbnQubGFuZXM9ZTtBYyhhLGUsZCk7RWsoYSxkKTtyZXR1cm4gYX1mdW5jdGlvbiBnbChhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1MKCksZz1saChlKTtjPWVsKGMpO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9Y2goZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7YT1kaChlLGIsZyk7bnVsbCE9PWEmJihtaChhLGUsZyxmKSxlaChhLGUsZykpO3JldHVybiBnfVxuZnVuY3Rpb24gaGwoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBpbChhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gamwoYSxiKXtpbChhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmaWwoYSxiKX1mdW5jdGlvbiBrbCgpe3JldHVybiBudWxsfXZhciBsbD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVwb3J0RXJyb3I/cmVwb3J0RXJyb3I6ZnVuY3Rpb24oYSl7Y29uc29sZS5lcnJvcihhKX07ZnVuY3Rpb24gbWwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5ubC5wcm90b3R5cGUucmVuZGVyPW1sLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoNDA5KSk7Z2woYSxiLG51bGwsbnVsbCl9O25sLnByb3RvdHlwZS51bm1vdW50PW1sLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGwhPT1hKXt0aGlzLl9pbnRlcm5hbFJvb3Q9bnVsbDt2YXIgYj1hLmNvbnRhaW5lckluZm87U2soZnVuY3Rpb24oKXtnbChudWxsLGEsbnVsbCxudWxsKX0pO2JbdWZdPW51bGx9fTtmdW5jdGlvbiBubChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm5sLnByb3RvdHlwZS51bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbj1mdW5jdGlvbihhKXtpZihhKXt2YXIgYj1IYygpO2E9e2Jsb2NrZWRPbjpudWxsLHRhcmdldDphLHByaW9yaXR5OmJ9O2Zvcih2YXIgYz0wO2M8UWMubGVuZ3RoJiYwIT09YiYmYjxRY1tjXS5wcmlvcml0eTtjKyspO1FjLnNwbGljZShjLDAsYSk7MD09PWMmJlZjKGEpfX07ZnVuY3Rpb24gb2woYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUpfWZ1bmN0aW9uIHBsKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBxbCgpe31cbmZ1bmN0aW9uIHJsKGEsYixjLGQsZSl7aWYoZSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBmPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWhsKGcpO2YuY2FsbChhKX19dmFyIGc9ZmwoYixkLGEsMCxudWxsLCExLCExLFwiXCIscWwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1nO2FbdWZdPWcuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7U2soKTtyZXR1cm4gZ31mb3IoO2U9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoZSk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBoPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWhsKGspO2guY2FsbChhKX19dmFyIGs9Y2woYSwwLCExLG51bGwsbnVsbCwhMSwhMSxcIlwiLHFsKTthLl9yZWFjdFJvb3RDb250YWluZXI9azthW3VmXT1rLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1NrKGZ1bmN0aW9uKCl7Z2woYixrLGMsZCl9KTtyZXR1cm4ga31cbmZ1bmN0aW9uIHNsKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWY7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWhsKGcpO2guY2FsbChhKX19Z2woYixnLGEsZSl9ZWxzZSBnPXJsKGMsYixhLGUsZCk7cmV0dXJuIGhsKGcpfUVjPWZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAzOnZhciBiPWEuc3RhdGVOb2RlO2lmKGIuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7dmFyIGM9dGMoYi5wZW5kaW5nTGFuZXMpOzAhPT1jJiYoQ2MoYixjfDEpLEVrKGIsQigpKSwwPT09KEsmNikmJihIaj1CKCkrNTAwLGpnKCkpKX1icmVhaztjYXNlIDEzOlNrKGZ1bmN0aW9uKCl7dmFyIGI9WmcoYSwxKTtpZihudWxsIT09Yil7dmFyIGM9TCgpO21oKGIsYSwxLGMpfX0pLGpsKGEsMSl9fTtcbkZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPVpnKGEsMTM0MjE3NzI4KTtpZihudWxsIT09Yil7dmFyIGM9TCgpO21oKGIsYSwxMzQyMTc3MjgsYyl9amwoYSwxMzQyMTc3MjgpfX07R2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9bGgoYSksYz1aZyhhLGIpO2lmKG51bGwhPT1jKXt2YXIgZD1MKCk7bWgoYyxhLGIsZCl9amwoYSxiKX19O0hjPWZ1bmN0aW9uKCl7cmV0dXJuIEN9O0ljPWZ1bmN0aW9uKGEsYil7dmFyIGM9Qzt0cnl7cmV0dXJuIEM9YSxiKCl9ZmluYWxseXtDPWN9fTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YmIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHAoOTApKTtXYShkKTtiYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9Ums7SGI9U2s7XG52YXIgdGw9e3VzaW5nQ2xpZW50RW50cnlQb2ludDohMSxFdmVudHM6W0NiLHVlLERiLEViLEZiLFJrXX0sdWw9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOldjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTguMi4wXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB2bD17YnVuZGxlVHlwZTp1bC5idW5kbGVUeXBlLHZlcnNpb246dWwudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOnVsLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6dWwucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldEVycm9ySGFuZGxlcjpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPVpiKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp1bC5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5rbCxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsLHJlY29uY2lsZXJWZXJzaW9uOlwiMTguMi4wLW5leHQtOWUzYjc3MmI4LTIwMjIwNjA4XCJ9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgd2w9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF3bC5pc0Rpc2FibGVkJiZ3bC5zdXBwb3J0c0ZpYmVyKXRyeXtrYz13bC5pbmplY3QodmwpLGxjPXdsfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD10bDtcbmV4cG9ydHMuY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIW9sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIGRsKGEsYixudWxsLGMpfTtleHBvcnRzLmNyZWF0ZVJvb3Q9ZnVuY3Rpb24oYSxiKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCgyOTkpKTt2YXIgYz0hMSxkPVwiXCIsZT1sbDtudWxsIT09YiYmdm9pZCAwIT09YiYmKCEwPT09Yi51bnN0YWJsZV9zdHJpY3RNb2RlJiYoYz0hMCksdm9pZCAwIT09Yi5pZGVudGlmaWVyUHJlZml4JiYoZD1iLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWIub25SZWNvdmVyYWJsZUVycm9yJiYoZT1iLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9Y2woYSwxLCExLG51bGwsbnVsbCxjLCExLGQsZSk7YVt1Zl09Yi5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtyZXR1cm4gbmV3IG1sKGIpfTtcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IocCgxODgpKTthPU9iamVjdC5rZXlzKGEpLmpvaW4oXCIsXCIpO3Rocm93IEVycm9yKHAoMjY4LGEpKTt9YT1aYihiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEpe3JldHVybiBTayhhKX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighcGwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gc2wobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5oeWRyYXRlUm9vdD1mdW5jdGlvbihhLGIsYyl7aWYoIW9sKGEpKXRocm93IEVycm9yKHAoNDA1KSk7dmFyIGQ9bnVsbCE9YyYmYy5oeWRyYXRlZFNvdXJjZXN8fG51bGwsZT0hMSxmPVwiXCIsZz1sbDtudWxsIT09YyYmdm9pZCAwIT09YyYmKCEwPT09Yy51bnN0YWJsZV9zdHJpY3RNb2RlJiYoZT0hMCksdm9pZCAwIT09Yy5pZGVudGlmaWVyUHJlZml4JiYoZj1jLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWMub25SZWNvdmVyYWJsZUVycm9yJiYoZz1jLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9ZmwoYixudWxsLGEsMSxudWxsIT1jP2M6bnVsbCxlLCExLGYsZyk7YVt1Zl09Yi5jdXJyZW50O3NmKGEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyljPWRbYV0sZT1jLl9nZXRWZXJzaW9uLGU9ZShjLl9zb3VyY2UpLG51bGw9PWIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2MsZV06Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYyxcbmUpO3JldHVybiBuZXcgbmwoYil9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighcGwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gc2wobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighcGwoYSkpdGhyb3cgRXJyb3IocCg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFNrKGZ1bmN0aW9uKCl7c2wobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW3VmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9Ums7XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFwbChjKSl0aHJvdyBFcnJvcihwKDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHAoMzgpKTtyZXR1cm4gc2woYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjIuMC1uZXh0LTllM2I3NzJiOC0yMDIyMDYwOFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gbS5jcmVhdGVSb290O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gbS5oeWRyYXRlUm9vdDtcbn0gZWxzZSB7XG4gIHZhciBpID0gbS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24oYywgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uY3JlYXRlUm9vdChjLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbihjLCBoLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5oeWRyYXRlUm9vdChjLCBoLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGI9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksYz1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLGQ9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLGU9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLGY9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLGc9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLGg9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksaz1TeW1ib2wuZm9yKFwicmVhY3Quc2VydmVyX2NvbnRleHRcIiksbD1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksbT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksbj1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksdD1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpLHU7dT1TeW1ib2wuZm9yKFwicmVhY3QubW9kdWxlLnJlZmVyZW5jZVwiKTtcbmZ1bmN0aW9uIHYoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHI9YS4kJHR5cGVvZjtzd2l0Y2gocil7Y2FzZSBiOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGQ6Y2FzZSBmOmNhc2UgZTpjYXNlIG06Y2FzZSBuOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBoOmNhc2UgbDpjYXNlIHE6Y2FzZSBwOmNhc2UgZzpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiByfX1jYXNlIGM6cmV0dXJuIHJ9fX1leHBvcnRzLkNvbnRleHRDb25zdW1lcj1oO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWc7ZXhwb3J0cy5FbGVtZW50PWI7ZXhwb3J0cy5Gb3J3YXJkUmVmPWw7ZXhwb3J0cy5GcmFnbWVudD1kO2V4cG9ydHMuTGF6eT1xO2V4cG9ydHMuTWVtbz1wO2V4cG9ydHMuUG9ydGFsPWM7ZXhwb3J0cy5Qcm9maWxlcj1mO2V4cG9ydHMuU3RyaWN0TW9kZT1lO2V4cG9ydHMuU3VzcGVuc2U9bTtcbmV4cG9ydHMuU3VzcGVuc2VMaXN0PW47ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWh9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1nfTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Yn07ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1sfTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1kfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PXF9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09cH07XG5leHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Y307ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Zn07ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1lfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1tfTtleHBvcnRzLmlzU3VzcGVuc2VMaXN0PWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bn07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZHx8YT09PWZ8fGE9PT1lfHxhPT09bXx8YT09PW58fGE9PT10fHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1wfHxhLiQkdHlwZW9mPT09Z3x8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1sfHxhLiQkdHlwZW9mPT09dXx8dm9pZCAwIT09YS5nZXRNb2R1bGVJZCk/ITA6ITF9O2V4cG9ydHMudHlwZU9mPXY7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZj1yZXF1aXJlKFwicmVhY3RcIiksaz1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxsPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxtPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbj1mLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLHA9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIHEoYyxhLGcpe3ZhciBiLGQ9e30sZT1udWxsLGg9bnVsbDt2b2lkIDAhPT1nJiYoZT1cIlwiK2cpO3ZvaWQgMCE9PWEua2V5JiYoZT1cIlwiK2Eua2V5KTt2b2lkIDAhPT1hLnJlZiYmKGg9YS5yZWYpO2ZvcihiIGluIGEpbS5jYWxsKGEsYikmJiFwLmhhc093blByb3BlcnR5KGIpJiYoZFtiXT1hW2JdKTtpZihjJiZjLmRlZmF1bHRQcm9wcylmb3IoYiBpbiBhPWMuZGVmYXVsdFByb3BzLGEpdm9pZCAwPT09ZFtiXSYmKGRbYl09YVtiXSk7cmV0dXJueyQkdHlwZW9mOmssdHlwZTpjLGtleTplLHJlZjpoLHByb3BzOmQsX293bmVyOm4uY3VycmVudH19ZXhwb3J0cy5GcmFnbWVudD1sO2V4cG9ydHMuanN4PXE7ZXhwb3J0cy5qc3hzPXE7XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbj1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHA9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHI9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHU9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksdj1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksdz1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikseD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSx5PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHo9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbnZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPU9iamVjdC5hc3NpZ24sRD17fTtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtcbkUucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO0MoSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST1BcnJheS5pc0FycmF5LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtjdXJyZW50Om51bGx9LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBkLGM9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1iW2RdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtjLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWNbZF0mJihjW2RdPWdbZF0pO3JldHVybnskJHR5cGVvZjpsLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpjLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZztmdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gUihhLGIsZSxkLGMpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBsOmNhc2UgbjpoPSEwfX1pZihoKXJldHVybiBoPWEsYz1jKGgpLGE9XCJcIj09PWQ/XCIuXCIrUShoLDApOmQsSShjKT8oZT1cIlwiLG51bGwhPWEmJihlPWEucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSxSKGMsYixlLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9YyYmKE8oYykmJihjPU4oYyxlKyghYy5rZXl8fGgmJmgua2V5PT09Yy5rZXk/XCJcIjooXCJcIitjLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGMpKSwxO2g9MDtkPVwiXCI9PT1kP1wiLlwiOmQrXCI6XCI7aWYoSShhKSlmb3IodmFyIGc9MDtnPGEubGVuZ3RoO2crKyl7az1cbmFbZ107dmFyIGY9ZCtRKGssZyk7aCs9UihrLGIsZSxmLGMpfWVsc2UgaWYoZj1BKGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1kK1EoayxnKyspLGgrPVIoayxiLGUsZixjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9U3RyaW5nKGEpLEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikrXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO3JldHVybiBofVxuZnVuY3Rpb24gUyhhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXSxjPTA7UihhLGQsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoZSxhLGMrKyl9KTtyZXR1cm4gZH1mdW5jdGlvbiBUKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1ifSxmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yn0pOy0xPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTAsYS5fcmVzdWx0PWIpfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdC5kZWZhdWx0O3Rocm93IGEuX3Jlc3VsdDt9XG52YXIgVT17Y3VycmVudDpudWxsfSxWPXt0cmFuc2l0aW9uOm51bGx9LFc9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6VSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpWLFJlYWN0Q3VycmVudE93bmVyOkt9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpTLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe1MoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtTKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUyhhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9RTtleHBvcnRzLkZyYWdtZW50PXA7XG5leHBvcnRzLlByb2ZpbGVyPXI7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUc7ZXhwb3J0cy5TdHJpY3RNb2RlPXE7ZXhwb3J0cy5TdXNwZW5zZT13O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VztcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiK2ErXCIuXCIpO3ZhciBkPUMoe30sYS5wcm9wcyksYz1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGM9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilKLmNhbGwoYixmKSYmIUwuaGFzT3duUHJvcGVydHkoZikmJihkW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO1xuZm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YyxyZWY6ayxwcm9wczpkLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe2E9eyQkdHlwZW9mOnUsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsLF9kZWZhdWx0VmFsdWU6bnVsbCxfZ2xvYmFsTmFtZTpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp0LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07XG5leHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87ZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6VH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp4LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy5zdGFydFRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9Vi50cmFuc2l0aW9uO1YudHJhbnNpdGlvbj17fTt0cnl7YSgpfWZpbmFsbHl7Vi50cmFuc2l0aW9uPWJ9fTtleHBvcnRzLnVuc3RhYmxlX2FjdD1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7fTtcbmV4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNvbnRleHQoYSl9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlRGVmZXJyZWRWYWx1ZShhKX07ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VJZCgpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZSl9O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUluc2VydGlvbkVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLGIsZSl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSl9O2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlU3luY0V4dGVybmFsU3RvcmUoYSxiLGUpfTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlVHJhbnNpdGlvbigpfTtleHBvcnRzLnZlcnNpb249XCIxOC4yLjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGYoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzA8Yzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKDA8ZyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gaChhKXtyZXR1cm4gMD09PWEubGVuZ3RoP251bGw6YVswXX1mdW5jdGlvbiBrKGEpe2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYj1hWzBdLGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aCx3PWU+Pj4xO2Q8dzspe3ZhciBtPTIqKGQrMSktMSxDPWFbbV0sbj1tKzEseD1hW25dO2lmKDA+ZyhDLGMpKW48ZSYmMD5nKHgsQyk/KGFbZF09eCxhW25dPWMsZD1uKTooYVtkXT1DLGFbbV09YyxkPW0pO2Vsc2UgaWYobjxlJiYwPmcoeCxjKSlhW2RdPXgsYVtuXT1jLGQ9bjtlbHNlIGJyZWFrIGF9fXJldHVybiBifVxuZnVuY3Rpb24gZyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH1pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19dmFyIHI9W10sdD1bXSx1PTEsdj1udWxsLHk9Myx6PSExLEE9ITEsQj0hMSxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bnVsbCxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om51bGwsRj1cInVuZGVmaW5lZFwiIT09dHlwZW9mIHNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGU6bnVsbDtcblwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZyYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcmJm5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nLmJpbmQobmF2aWdhdG9yLnNjaGVkdWxpbmcpO2Z1bmN0aW9uIEcoYSl7Zm9yKHZhciBiPWgodCk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylrKHQpO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpayh0KSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLGYocixiKTtlbHNlIGJyZWFrO2I9aCh0KX19ZnVuY3Rpb24gSChhKXtCPSExO0coYSk7aWYoIUEpaWYobnVsbCE9PWgocikpQT0hMCxJKEopO2Vsc2V7dmFyIGI9aCh0KTtudWxsIT09YiYmSyhILGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIEooYSxiKXtBPSExO0ImJihCPSExLEUoTCksTD0tMSk7ej0hMDt2YXIgYz15O3RyeXtHKGIpO2Zvcih2PWgocik7bnVsbCE9PXYmJighKHYuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFNKCkpOyl7dmFyIGQ9di5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7di5jYWxsYmFjaz1udWxsO3k9di5wcmlvcml0eUxldmVsO3ZhciBlPWQodi5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP3YuY2FsbGJhY2s9ZTp2PT09aChyKSYmayhyKTtHKGIpfWVsc2UgayhyKTt2PWgocil9aWYobnVsbCE9PXYpdmFyIHc9ITA7ZWxzZXt2YXIgbT1oKHQpO251bGwhPT1tJiZLKEgsbS5zdGFydFRpbWUtYik7dz0hMX1yZXR1cm4gd31maW5hbGx5e3Y9bnVsbCx5PWMsej0hMX19dmFyIE49ITEsTz1udWxsLEw9LTEsUD01LFE9LTE7XG5mdW5jdGlvbiBNKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCktUTxQPyExOiEwfWZ1bmN0aW9uIFIoKXtpZihudWxsIT09Tyl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtRPWE7dmFyIGI9ITA7dHJ5e2I9TyghMCxhKX1maW5hbGx5e2I/UygpOihOPSExLE89bnVsbCl9fWVsc2UgTj0hMX12YXIgUztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRilTPWZ1bmN0aW9uKCl7RihSKX07ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPVI7Uz1mdW5jdGlvbigpe1UucG9zdE1lc3NhZ2UobnVsbCl9fWVsc2UgUz1mdW5jdGlvbigpe0QoUiwwKX07ZnVuY3Rpb24gSShhKXtPPWE7Tnx8KE49ITAsUygpKX1mdW5jdGlvbiBLKGEsYil7TD1EKGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7QXx8enx8KEE9ITAsSShKKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6UD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiB5fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGgocil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goeSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9eX12YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e3k9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9eTt5PWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXt5PWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6dSsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsZih0LGEpLG51bGw9PT1oKHIpJiZhPT09aCh0KSYmKEI/KEUoTCksTD0tMSk6Qj0hMCxLKEgsYy1kKSkpOihhLnNvcnRJbmRleD1lLGYocixhKSxBfHx6fHwoQT0hMCxJKEopKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1NO2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPXk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e3k9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCLCBjb21wYXJlLCBjb21wYXJlQ29udGV4dCkge1xuICB2YXIgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgb2JqQSwgb2JqQikgOiB2b2lkIDA7XG5cbiAgaWYgKHJldCAhPT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuICEhcmV0O1xuICB9XG5cbiAgaWYgKG9iakEgPT09IG9iakIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gXCJvYmplY3RcIiB8fCAhb2JqQSB8fCB0eXBlb2Ygb2JqQiAhPT0gXCJvYmplY3RcIiB8fCAhb2JqQikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgYkhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5iaW5kKG9iakIpO1xuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGtleXNBLmxlbmd0aDsgaWR4KyspIHtcbiAgICB2YXIga2V5ID0ga2V5c0FbaWR4XTtcblxuICAgIGlmICghYkhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVBID0gb2JqQVtrZXldO1xuICAgIHZhciB2YWx1ZUIgPSBvYmpCW2tleV07XG5cbiAgICByZXQgPSBjb21wYXJlID8gY29tcGFyZS5jYWxsKGNvbXBhcmVDb250ZXh0LCB2YWx1ZUEsIHZhbHVlQiwga2V5KSA6IHZvaWQgMDtcblxuICAgIGlmIChyZXQgPT09IGZhbHNlIHx8IChyZXQgPT09IHZvaWQgMCAmJiB2YWx1ZUEgIT09IHZhbHVlQikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiB1c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZT1yZXF1aXJlKFwicmVhY3RcIik7ZnVuY3Rpb24gaChhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIGs9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6aCxsPWUudXNlU3RhdGUsbT1lLnVzZUVmZmVjdCxuPWUudXNlTGF5b3V0RWZmZWN0LHA9ZS51c2VEZWJ1Z1ZhbHVlO2Z1bmN0aW9uIHEoYSxiKXt2YXIgZD1iKCksZj1sKHtpbnN0Ont2YWx1ZTpkLGdldFNuYXBzaG90OmJ9fSksYz1mWzBdLmluc3QsZz1mWzFdO24oZnVuY3Rpb24oKXtjLnZhbHVlPWQ7Yy5nZXRTbmFwc2hvdD1iO3IoYykmJmcoe2luc3Q6Y30pfSxbYSxkLGJdKTttKGZ1bmN0aW9uKCl7cihjKSYmZyh7aW5zdDpjfSk7cmV0dXJuIGEoZnVuY3Rpb24oKXtyKGMpJiZnKHtpbnN0OmN9KX0pfSxbYV0pO3AoZCk7cmV0dXJuIGR9XG5mdW5jdGlvbiByKGEpe3ZhciBiPWEuZ2V0U25hcHNob3Q7YT1hLnZhbHVlO3RyeXt2YXIgZD1iKCk7cmV0dXJuIWsoYSxkKX1jYXRjaChmKXtyZXR1cm4hMH19ZnVuY3Rpb24gdChhLGIpe3JldHVybiBiKCl9dmFyIHU9XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50P3Q6cTtleHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlPXZvaWQgMCE9PWUudXNlU3luY0V4dGVybmFsU3RvcmU/ZS51c2VTeW5jRXh0ZXJuYWxTdG9yZTp1O1xuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS93aXRoLXNlbGVjdG9yLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgaD1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwidXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvc2hpbVwiKTtmdW5jdGlvbiBwKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgcT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpwLHI9bi51c2VTeW5jRXh0ZXJuYWxTdG9yZSx0PWgudXNlUmVmLHU9aC51c2VFZmZlY3Qsdj1oLnVzZU1lbW8sdz1oLnVzZURlYnVnVmFsdWU7XG5leHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yPWZ1bmN0aW9uKGEsYixlLGwsZyl7dmFyIGM9dChudWxsKTtpZihudWxsPT09Yy5jdXJyZW50KXt2YXIgZj17aGFzVmFsdWU6ITEsdmFsdWU6bnVsbH07Yy5jdXJyZW50PWZ9ZWxzZSBmPWMuY3VycmVudDtjPXYoZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEpe2lmKCFjKXtjPSEwO2Q9YTthPWwoYSk7aWYodm9pZCAwIT09ZyYmZi5oYXNWYWx1ZSl7dmFyIGI9Zi52YWx1ZTtpZihnKGIsYSkpcmV0dXJuIGs9Yn1yZXR1cm4gaz1hfWI9aztpZihxKGQsYSkpcmV0dXJuIGI7dmFyIGU9bChhKTtpZih2b2lkIDAhPT1nJiZnKGIsZSkpcmV0dXJuIGI7ZD1hO3JldHVybiBrPWV9dmFyIGM9ITEsZCxrLG09dm9pZCAwPT09ZT9udWxsOmU7cmV0dXJuW2Z1bmN0aW9uKCl7cmV0dXJuIGEoYigpKX0sbnVsbD09PW0/dm9pZCAwOmZ1bmN0aW9uKCl7cmV0dXJuIGEobSgpKX1dfSxbYixlLGwsZ10pO3ZhciBkPXIoYSxjWzBdLGNbMV0pO1xudShmdW5jdGlvbigpe2YuaGFzVmFsdWU9ITA7Zi52YWx1ZT1kfSxbZF0pO3coZCk7cmV0dXJuIGR9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Nqcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Nqcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0vd2l0aC1zZWxlY3Rvci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS93aXRoLXNlbGVjdG9yLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZTsgfTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiLyoqXG4gKiBAcmVtaXgtcnVuL3JvdXRlciB2MS4zLjNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFR5cGVzIGFuZCBDb25zdGFudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQWN0aW9ucyByZXByZXNlbnQgdGhlIHR5cGUgb2YgY2hhbmdlIHRvIGEgbG9jYXRpb24gdmFsdWUuXG4gKi9cbnZhciBBY3Rpb247XG5cbihmdW5jdGlvbiAoQWN0aW9uKSB7XG4gIC8qKlxuICAgKiBBIFBPUCBpbmRpY2F0ZXMgYSBjaGFuZ2UgdG8gYW4gYXJiaXRyYXJ5IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoXG4gICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlXG4gICAqIG5hdmlnYXRpb24sIG9ubHkgdGhhdCB0aGUgY3VycmVudCBpbmRleCBjaGFuZ2VkLlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuXG4gICAqL1xuICBBY3Rpb25bXCJQb3BcIl0gPSBcIlBPUFwiO1xuICAvKipcbiAgICogQSBQVVNIIGluZGljYXRlcyBhIG5ldyBlbnRyeSBiZWluZyBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaywgc3VjaCBhcyB3aGVuXG4gICAqIGEgbGluayBpcyBjbGlja2VkIGFuZCBhIG5ldyBwYWdlIGxvYWRzLiBXaGVuIHRoaXMgaGFwcGVucywgYWxsIHN1YnNlcXVlbnRcbiAgICogZW50cmllcyBpbiB0aGUgc3RhY2sgYXJlIGxvc3QuXG4gICAqL1xuXG4gIEFjdGlvbltcIlB1c2hcIl0gPSBcIlBVU0hcIjtcbiAgLyoqXG4gICAqIEEgUkVQTEFDRSBpbmRpY2F0ZXMgdGhlIGVudHJ5IGF0IHRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrXG4gICAqIGJlaW5nIHJlcGxhY2VkIGJ5IGEgbmV3IG9uZS5cbiAgICovXG5cbiAgQWN0aW9uW1wiUmVwbGFjZVwiXSA9IFwiUkVQTEFDRVwiO1xufSkoQWN0aW9uIHx8IChBY3Rpb24gPSB7fSkpO1xuXG5jb25zdCBQb3BTdGF0ZUV2ZW50VHlwZSA9IFwicG9wc3RhdGVcIjtcbi8qKlxuICogTWVtb3J5IGhpc3Rvcnkgc3RvcmVzIHRoZSBjdXJyZW50IGxvY2F0aW9uIGluIG1lbW9yeS4gSXQgaXMgZGVzaWduZWQgZm9yIHVzZVxuICogaW4gc3RhdGVmdWwgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzIGxpa2UgdGVzdHMgYW5kIFJlYWN0IE5hdGl2ZS5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGxldCB7XG4gICAgaW5pdGlhbEVudHJpZXMgPSBbXCIvXCJdLFxuICAgIGluaXRpYWxJbmRleCxcbiAgICB2NUNvbXBhdCA9IGZhbHNlXG4gIH0gPSBvcHRpb25zO1xuICBsZXQgZW50cmllczsgLy8gRGVjbGFyZSBzbyB3ZSBjYW4gYWNjZXNzIGZyb20gY3JlYXRlTWVtb3J5TG9jYXRpb25cblxuICBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKChlbnRyeSwgaW5kZXgpID0+IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKGVudHJ5LCB0eXBlb2YgZW50cnkgPT09IFwic3RyaW5nXCIgPyBudWxsIDogZW50cnkuc3RhdGUsIGluZGV4ID09PSAwID8gXCJkZWZhdWx0XCIgOiB1bmRlZmluZWQpKTtcbiAgbGV0IGluZGV4ID0gY2xhbXBJbmRleChpbml0aWFsSW5kZXggPT0gbnVsbCA/IGVudHJpZXMubGVuZ3RoIC0gMSA6IGluaXRpYWxJbmRleCk7XG4gIGxldCBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICBsZXQgbGlzdGVuZXIgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGNsYW1wSW5kZXgobikge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCAwKSwgZW50cmllcy5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbigpIHtcbiAgICByZXR1cm4gZW50cmllc1tpbmRleF07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUsIGtleSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oZW50cmllcyA/IGdldEN1cnJlbnRMb2NhdGlvbigpLnBhdGhuYW1lIDogXCIvXCIsIHRvLCBzdGF0ZSwga2V5KTtcbiAgICB3YXJuaW5nJDEobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSBcIi9cIiwgXCJyZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gbWVtb3J5IGhpc3Rvcnk6IFwiICsgSlNPTi5zdHJpbmdpZnkodG8pKTtcbiAgICByZXR1cm4gbG9jYXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgaW5kZXgoKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfSxcblxuICAgIGdldCBhY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0Q3VycmVudExvY2F0aW9uKCk7XG4gICAgfSxcblxuICAgIGNyZWF0ZUhyZWYsXG5cbiAgICBjcmVhdGVVUkwodG8pIHtcbiAgICAgIHJldHVybiBuZXcgVVJMKGNyZWF0ZUhyZWYodG8pLCBcImh0dHA6Ly9sb2NhbGhvc3RcIik7XG4gICAgfSxcblxuICAgIGVuY29kZUxvY2F0aW9uKHRvKSB7XG4gICAgICBsZXQgcGF0aCA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhuYW1lOiBwYXRoLnBhdGhuYW1lIHx8IFwiXCIsXG4gICAgICAgIHNlYXJjaDogcGF0aC5zZWFyY2ggfHwgXCJcIixcbiAgICAgICAgaGFzaDogcGF0aC5oYXNoIHx8IFwiXCJcbiAgICAgIH07XG4gICAgfSxcblxuICAgIHB1c2godG8sIHN0YXRlKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUpO1xuICAgICAgaW5kZXggKz0gMTtcbiAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCBlbnRyaWVzLmxlbmd0aCwgbmV4dExvY2F0aW9uKTtcblxuICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YTogMVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVwbGFjZSh0bywgc3RhdGUpIHtcbiAgICAgIGFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgICAgbGV0IG5leHRMb2NhdGlvbiA9IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKHRvLCBzdGF0ZSk7XG4gICAgICBlbnRyaWVzW2luZGV4XSA9IG5leHRMb2NhdGlvbjtcblxuICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YTogMFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZ28oZGVsdGEpIHtcbiAgICAgIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgICBsZXQgbmV4dEluZGV4ID0gY2xhbXBJbmRleChpbmRleCArIGRlbHRhKTtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBlbnRyaWVzW25leHRJbmRleF07XG4gICAgICBpbmRleCA9IG5leHRJbmRleDtcblxuICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgbGlzdGVuKGZuKSB7XG4gICAgICBsaXN0ZW5lciA9IGZuO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbGlzdGVuZXIgPSBudWxsO1xuICAgICAgfTtcbiAgICB9XG5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG4vKipcbiAqIEJyb3dzZXIgaGlzdG9yeSBzdG9yZXMgdGhlIGxvY2F0aW9uIGluIHJlZ3VsYXIgVVJMcy4gVGhpcyBpcyB0aGUgc3RhbmRhcmQgZm9yXG4gKiBtb3N0IHdlYiBhcHBzLCBidXQgaXQgcmVxdWlyZXMgc29tZSBjb25maWd1cmF0aW9uIG9uIHRoZSBzZXJ2ZXIgdG8gZW5zdXJlIHlvdVxuICogc2VydmUgdGhlIHNhbWUgYXBwIGF0IG11bHRpcGxlIFVSTHMuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVicm93c2VyaGlzdG9yeVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpIHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24oXCJcIiwge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSwgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzXG4gICAgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzciB8fCBudWxsLCBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5IHx8IFwiZGVmYXVsdFwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIcmVmKHdpbmRvdywgdG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgfVxuXG4gIHJldHVybiBnZXRVcmxCYXNlZEhpc3RvcnkoY3JlYXRlQnJvd3NlckxvY2F0aW9uLCBjcmVhdGVCcm93c2VySHJlZiwgbnVsbCwgb3B0aW9ucyk7XG59XG4vKipcbiAqIEhhc2ggaGlzdG9yeSBzdG9yZXMgdGhlIGxvY2F0aW9uIGluIHdpbmRvdy5sb2NhdGlvbi5oYXNoLiBUaGlzIG1ha2VzIGl0IGlkZWFsXG4gKiBmb3Igc2l0dWF0aW9ucyB3aGVyZSB5b3UgZG9uJ3Qgd2FudCB0byBzZW5kIHRoZSBsb2NhdGlvbiB0byB0aGUgc2VydmVyIGZvclxuICogc29tZSByZWFzb24sIGVpdGhlciBiZWNhdXNlIHlvdSBkbyBjYW5ub3QgY29uZmlndXJlIGl0IG9yIHRoZSBVUkwgc3BhY2UgaXNcbiAqIHJlc2VydmVkIGZvciBzb21ldGhpbmcgZWxzZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZWhhc2hoaXN0b3J5XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSGFzaExvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSkge1xuICAgIGxldCB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgICAgc2VhcmNoID0gXCJcIixcbiAgICAgIGhhc2ggPSBcIlwiXG4gICAgfSA9IHBhcnNlUGF0aCh3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSkpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihcIlwiLCB7XG4gICAgICBwYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2hcbiAgICB9LCAvLyBzdGF0ZSBkZWZhdWx0cyB0byBgbnVsbGAgYmVjYXVzZSBgd2luZG93Lmhpc3Rvcnkuc3RhdGVgIGRvZXNcbiAgICBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUudXNyIHx8IG51bGwsIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS5rZXkgfHwgXCJkZWZhdWx0XCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSGFzaEhyZWYod2luZG93LCB0bykge1xuICAgIGxldCBiYXNlID0gd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJiYXNlXCIpO1xuICAgIGxldCBocmVmID0gXCJcIjtcblxuICAgIGlmIChiYXNlICYmIGJhc2UuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSkge1xuICAgICAgbGV0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgbGV0IGhhc2hJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcbiAgICAgIGhyZWYgPSBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWYgKyBcIiNcIiArICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlSGFzaExvY2F0aW9uKGxvY2F0aW9uLCB0bykge1xuICAgIHdhcm5pbmckMShsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09IFwiL1wiLCBcInJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBoYXNoIGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKTtcbiAgfVxuXG4gIHJldHVybiBnZXRVcmxCYXNlZEhpc3RvcnkoY3JlYXRlSGFzaExvY2F0aW9uLCBjcmVhdGVIYXNoSHJlZiwgdmFsaWRhdGVIYXNoTG9jYXRpb24sIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gaW52YXJpYW50KHZhbHVlLCBtZXNzYWdlKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdhcm5pbmckMShjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gV2VsY29tZSB0byBkZWJ1Z2dpbmcgaGlzdG9yeSFcbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGVycm9yIGlzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHlvdSBjYW4gbW9yZSBlYXNpbHlcbiAgICAgIC8vIGZpbmQgdGhlIHNvdXJjZSBmb3IgYSB3YXJuaW5nIHRoYXQgYXBwZWFycyBpbiB0aGUgY29uc29sZSBieVxuICAgICAgLy8gZW5hYmxpbmcgXCJwYXVzZSBvbiBleGNlcHRpb25zXCIgaW4geW91ciBKYXZhU2NyaXB0IGRlYnVnZ2VyLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA4KTtcbn1cbi8qKlxuICogRm9yIGJyb3dzZXItYmFzZWQgaGlzdG9yaWVzLCB3ZSBjb21iaW5lIHRoZSBzdGF0ZSBhbmQga2V5IGludG8gYW4gb2JqZWN0XG4gKi9cblxuXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KSB7XG4gIHJldHVybiB7XG4gICAgdXNyOiBsb2NhdGlvbi5zdGF0ZSxcbiAgICBrZXk6IGxvY2F0aW9uLmtleSxcbiAgICBpZHg6IGluZGV4XG4gIH07XG59XG4vKipcbiAqIENyZWF0ZXMgYSBMb2NhdGlvbiBvYmplY3Qgd2l0aCBhIHVuaXF1ZSBrZXkgZnJvbSB0aGUgZ2l2ZW4gUGF0aFxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24oY3VycmVudCwgdG8sIHN0YXRlLCBrZXkpIHtcbiAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICBzdGF0ZSA9IG51bGw7XG4gIH1cblxuICBsZXQgbG9jYXRpb24gPSBfZXh0ZW5kcyh7XG4gICAgcGF0aG5hbWU6IHR5cGVvZiBjdXJyZW50ID09PSBcInN0cmluZ1wiID8gY3VycmVudCA6IGN1cnJlbnQucGF0aG5hbWUsXG4gICAgc2VhcmNoOiBcIlwiLFxuICAgIGhhc2g6IFwiXCJcbiAgfSwgdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvLCB7XG4gICAgc3RhdGUsXG4gICAgLy8gVE9ETzogVGhpcyBjb3VsZCBiZSBjbGVhbmVkIHVwLiAgcHVzaC9yZXBsYWNlIHNob3VsZCBwcm9iYWJseSBqdXN0IHRha2VcbiAgICAvLyBmdWxsIExvY2F0aW9ucyBub3cgYW5kIGF2b2lkIHRoZSBuZWVkIHRvIHJ1biB0aHJvdWdoIHRoaXMgZmxvdyBhdCBhbGxcbiAgICAvLyBCdXQgdGhhdCdzIGEgcHJldHR5IGJpZyByZWZhY3RvciB0byB0aGUgY3VycmVudCB0ZXN0IHN1aXRlIHNvIGdvaW5nIHRvXG4gICAgLy8ga2VlcCBhcyBpcyBmb3IgdGhlIHRpbWUgYmVpbmcgYW5kIGp1c3QgbGV0IGFueSBpbmNvbWluZyBrZXlzIHRha2UgcHJlY2VkZW5jZVxuICAgIGtleTogdG8gJiYgdG8ua2V5IHx8IGtleSB8fCBjcmVhdGVLZXkoKVxuICB9KTtcblxuICByZXR1cm4gbG9jYXRpb247XG59XG4vKipcbiAqIENyZWF0ZXMgYSBzdHJpbmcgVVJMIHBhdGggZnJvbSB0aGUgZ2l2ZW4gcGF0aG5hbWUsIHNlYXJjaCwgYW5kIGhhc2ggY29tcG9uZW50cy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVQYXRoKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCJcbiAgfSA9IF9yZWY7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSBcIj9cIikgcGF0aG5hbWUgKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gXCI/XCIgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gXCIjXCIpIHBhdGhuYW1lICs9IGhhc2guY2hhckF0KDApID09PSBcIiNcIiA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRobmFtZTtcbn1cbi8qKlxuICogUGFyc2VzIGEgc3RyaW5nIFVSTCBwYXRoIGludG8gaXRzIHNlcGFyYXRlIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgbGV0IHBhcnNlZFBhdGggPSB7fTtcblxuICBpZiAocGF0aCkge1xuICAgIGxldCBoYXNoSW5kZXggPSBwYXRoLmluZGV4T2YoXCIjXCIpO1xuXG4gICAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLmhhc2ggPSBwYXRoLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuXG4gICAgbGV0IHNlYXJjaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiP1wiKTtcblxuICAgIGlmIChzZWFyY2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLnNlYXJjaCA9IHBhdGguc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHBhcnNlZFBhdGgucGF0aG5hbWUgPSBwYXRoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJzZWRQYXRoO1xufVxuXG5mdW5jdGlvbiBnZXRVcmxCYXNlZEhpc3RvcnkoZ2V0TG9jYXRpb24sIGNyZWF0ZUhyZWYsIHZhbGlkYXRlTG9jYXRpb24sIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGxldCB7XG4gICAgd2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcsXG4gICAgdjVDb21wYXQgPSBmYWxzZVxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgbGV0IGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIGxldCBsaXN0ZW5lciA9IG51bGw7XG4gIGxldCBpbmRleCA9IGdldEluZGV4KCk7IC8vIEluZGV4IHNob3VsZCBvbmx5IGJlIG51bGwgd2hlbiB3ZSBpbml0aWFsaXplLiBJZiBub3QsIGl0J3MgYmVjYXVzZSB0aGVcbiAgLy8gdXNlciBjYWxsZWQgaGlzdG9yeS5wdXNoU3RhdGUgb3IgaGlzdG9yeS5yZXBsYWNlU3RhdGUgZGlyZWN0bHksIGluIHdoaWNoXG4gIC8vIGNhc2Ugd2Ugc2hvdWxkIGxvZyBhIHdhcm5pbmcgYXMgaXQgd2lsbCByZXN1bHQgaW4gYnVncy5cblxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSwge1xuICAgICAgaWR4OiBpbmRleFxuICAgIH0pLCBcIlwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEluZGV4KCkge1xuICAgIGxldCBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwge1xuICAgICAgaWR4OiBudWxsXG4gICAgfTtcbiAgICByZXR1cm4gc3RhdGUuaWR4O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKCkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgbGV0IG5leHRJbmRleCA9IGdldEluZGV4KCk7XG4gICAgbGV0IGRlbHRhID0gbmV4dEluZGV4ID09IG51bGwgPyBudWxsIDogbmV4dEluZGV4IC0gaW5kZXg7XG4gICAgaW5kZXggPSBuZXh0SW5kZXg7XG5cbiAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGFcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2godG8sIHN0YXRlKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oaGlzdG9yeS5sb2NhdGlvbiwgdG8sIHN0YXRlKTtcbiAgICBpZiAodmFsaWRhdGVMb2NhdGlvbikgdmFsaWRhdGVMb2NhdGlvbihsb2NhdGlvbiwgdG8pO1xuICAgIGluZGV4ID0gZ2V0SW5kZXgoKSArIDE7XG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpO1xuICAgIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pOyAvLyB0cnkuLi5jYXRjaCBiZWNhdXNlIGlPUyBsaW1pdHMgdXMgdG8gMTAwIHB1c2hTdGF0ZSBjYWxscyA6L1xuXG4gICAgdHJ5IHtcbiAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKGhpc3RvcnlTdGF0ZSwgXCJcIiwgdXJsKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gVGhleSBhcmUgZ29pbmcgdG8gbG9zZSBzdGF0ZSBoZXJlLCBidXQgdGhlcmUgaXMgbm8gcmVhbFxuICAgICAgLy8gd2F5IHRvIHdhcm4gdGhlbSBhYm91dCBpdCBzaW5jZSB0aGUgcGFnZSB3aWxsIHJlZnJlc2guLi5cbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24odXJsKTtcbiAgICB9XG5cbiAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGE6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oaGlzdG9yeS5sb2NhdGlvbiwgdG8sIHN0YXRlKTtcbiAgICBpZiAodmFsaWRhdGVMb2NhdGlvbikgdmFsaWRhdGVMb2NhdGlvbihsb2NhdGlvbiwgdG8pO1xuICAgIGluZGV4ID0gZ2V0SW5kZXgoKTtcbiAgICBsZXQgaGlzdG9yeVN0YXRlID0gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uLCBpbmRleCk7XG4gICAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoaGlzdG9yeVN0YXRlLCBcIlwiLCB1cmwpO1xuXG4gICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcih7XG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgIGRlbHRhOiAwXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVVUkwodG8pIHtcbiAgICAvLyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIGlzIFwibnVsbFwiICh0aGUgbGl0ZXJhbCBzdHJpbmcgdmFsdWUpIGluIEZpcmVmb3hcbiAgICAvLyB1bmRlciBjZXJ0YWluIGNvbmRpdGlvbnMsIG5vdGFibHkgd2hlbiBzZXJ2aW5nIGZyb20gYSBsb2NhbCBIVE1MIGZpbGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODc4Mjk3XG4gICAgbGV0IGJhc2UgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICE9PSBcIm51bGxcIiA/IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gOiB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICBsZXQgaHJlZiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gICAgaW52YXJpYW50KGJhc2UsIFwiTm8gd2luZG93LmxvY2F0aW9uLihvcmlnaW58aHJlZikgYXZhaWxhYmxlIHRvIGNyZWF0ZSBVUkwgZm9yIGhyZWY6IFwiICsgaHJlZik7XG4gICAgcmV0dXJuIG5ldyBVUkwoaHJlZiwgYmFzZSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGdldExvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSk7XG4gICAgfSxcblxuICAgIGxpc3Rlbihmbikge1xuICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkEgaGlzdG9yeSBvbmx5IGFjY2VwdHMgb25lIGFjdGl2ZSBsaXN0ZW5lclwiKTtcbiAgICAgIH1cblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudFR5cGUsIGhhbmRsZVBvcCk7XG4gICAgICBsaXN0ZW5lciA9IGZuO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudFR5cGUsIGhhbmRsZVBvcCk7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcblxuICAgIGNyZWF0ZUhyZWYodG8pIHtcbiAgICAgIHJldHVybiBjcmVhdGVIcmVmKHdpbmRvdywgdG8pO1xuICAgIH0sXG5cbiAgICBjcmVhdGVVUkwsXG5cbiAgICBlbmNvZGVMb2NhdGlvbih0bykge1xuICAgICAgLy8gRW5jb2RlIGEgTG9jYXRpb24gdGhlIHNhbWUgd2F5IHdpbmRvdy5sb2NhdGlvbiB3b3VsZFxuICAgICAgbGV0IHVybCA9IGNyZWF0ZVVSTCh0byk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZTogdXJsLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2g6IHVybC5zZWFyY2gsXG4gICAgICAgIGhhc2g6IHVybC5oYXNoXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBwdXNoLFxuICAgIHJlcGxhY2UsXG5cbiAgICBnbyhuKSB7XG4gICAgICByZXR1cm4gZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgICB9XG5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59IC8vI2VuZHJlZ2lvblxuXG52YXIgUmVzdWx0VHlwZTtcblxuKGZ1bmN0aW9uIChSZXN1bHRUeXBlKSB7XG4gIFJlc3VsdFR5cGVbXCJkYXRhXCJdID0gXCJkYXRhXCI7XG4gIFJlc3VsdFR5cGVbXCJkZWZlcnJlZFwiXSA9IFwiZGVmZXJyZWRcIjtcbiAgUmVzdWx0VHlwZVtcInJlZGlyZWN0XCJdID0gXCJyZWRpcmVjdFwiO1xuICBSZXN1bHRUeXBlW1wiZXJyb3JcIl0gPSBcImVycm9yXCI7XG59KShSZXN1bHRUeXBlIHx8IChSZXN1bHRUeXBlID0ge30pKTtcblxuZnVuY3Rpb24gaXNJbmRleFJvdXRlKHJvdXRlKSB7XG4gIHJldHVybiByb3V0ZS5pbmRleCA9PT0gdHJ1ZTtcbn0gLy8gV2FsayB0aGUgcm91dGUgdHJlZSBnZW5lcmF0aW5nIHVuaXF1ZSBJRHMgd2hlcmUgbmVjZXNzYXJ5IHNvIHdlIGFyZSB3b3JraW5nXG4vLyBzb2xlbHkgd2l0aCBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdCdzIHdpdGhpbiB0aGUgUm91dGVyXG5cblxuZnVuY3Rpb24gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZXMsIHBhcmVudFBhdGgsIGFsbElkcykge1xuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFtdO1xuICB9XG5cbiAgaWYgKGFsbElkcyA9PT0gdm9pZCAwKSB7XG4gICAgYWxsSWRzID0gbmV3IFNldCgpO1xuICB9XG5cbiAgcmV0dXJuIHJvdXRlcy5tYXAoKHJvdXRlLCBpbmRleCkgPT4ge1xuICAgIGxldCB0cmVlUGF0aCA9IFsuLi5wYXJlbnRQYXRoLCBpbmRleF07XG4gICAgbGV0IGlkID0gdHlwZW9mIHJvdXRlLmlkID09PSBcInN0cmluZ1wiID8gcm91dGUuaWQgOiB0cmVlUGF0aC5qb2luKFwiLVwiKTtcbiAgICBpbnZhcmlhbnQocm91dGUuaW5kZXggIT09IHRydWUgfHwgIXJvdXRlLmNoaWxkcmVuLCBcIkNhbm5vdCBzcGVjaWZ5IGNoaWxkcmVuIG9uIGFuIGluZGV4IHJvdXRlXCIpO1xuICAgIGludmFyaWFudCghYWxsSWRzLmhhcyhpZCksIFwiRm91bmQgYSByb3V0ZSBpZCBjb2xsaXNpb24gb24gaWQgXFxcIlwiICsgaWQgKyBcIlxcXCIuICBSb3V0ZSBcIiArIFwiaWQncyBtdXN0IGJlIGdsb2JhbGx5IHVuaXF1ZSB3aXRoaW4gRGF0YSBSb3V0ZXIgdXNhZ2VzXCIpO1xuICAgIGFsbElkcy5hZGQoaWQpO1xuXG4gICAgaWYgKGlzSW5kZXhSb3V0ZShyb3V0ZSkpIHtcbiAgICAgIGxldCBpbmRleFJvdXRlID0gX2V4dGVuZHMoe30sIHJvdXRlLCB7XG4gICAgICAgIGlkXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGluZGV4Um91dGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXRoT3JMYXlvdXRSb3V0ZSA9IF9leHRlbmRzKHt9LCByb3V0ZSwge1xuICAgICAgICBpZCxcbiAgICAgICAgY2hpbGRyZW46IHJvdXRlLmNoaWxkcmVuID8gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgdHJlZVBhdGgsIGFsbElkcykgOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcGF0aE9yTGF5b3V0Um91dGU7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogTWF0Y2hlcyB0aGUgZ2l2ZW4gcm91dGVzIHRvIGEgbG9jYXRpb24gYW5kIHJldHVybnMgdGhlIG1hdGNoIGRhdGEuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9tYXRjaC1yb3V0ZXNcbiAqL1xuXG5mdW5jdGlvbiBtYXRjaFJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IHZvaWQgMCkge1xuICAgIGJhc2VuYW1lID0gXCIvXCI7XG4gIH1cblxuICBsZXQgbG9jYXRpb24gPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gIGxldCBwYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCIsIGJhc2VuYW1lKTtcblxuICBpZiAocGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbGV0IGJyYW5jaGVzID0gZmxhdHRlblJvdXRlcyhyb3V0ZXMpO1xuICByYW5rUm91dGVCcmFuY2hlcyhicmFuY2hlcyk7XG4gIGxldCBtYXRjaGVzID0gbnVsbDtcblxuICBmb3IgKGxldCBpID0gMDsgbWF0Y2hlcyA9PSBudWxsICYmIGkgPCBicmFuY2hlcy5sZW5ndGg7ICsraSkge1xuICAgIG1hdGNoZXMgPSBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaGVzW2ldLCAvLyBJbmNvbWluZyBwYXRobmFtZXMgYXJlIGdlbmVyYWxseSBlbmNvZGVkIGZyb20gZWl0aGVyIHdpbmRvdy5sb2NhdGlvblxuICAgIC8vIG9yIGZyb20gcm91dGVyLm5hdmlnYXRlLCBidXQgd2Ugd2FudCB0byBtYXRjaCBhZ2FpbnN0IHRoZSB1bmVuY29kZWRcbiAgICAvLyBwYXRocyBpbiB0aGUgcm91dGUgZGVmaW5pdGlvbnMuICBNZW1vcnkgcm91dGVyIGxvY2F0aW9ucyB3b24ndCBiZVxuICAgIC8vIGVuY29kZWQgaGVyZSBidXQgdGhlcmUgYWxzbyBzaG91bGRuJ3QgYmUgYW55dGhpbmcgdG8gZGVjb2RlIHNvIHRoaXNcbiAgICAvLyBzaG91bGQgYmUgYSBzYWZlIG9wZXJhdGlvbi4gIFRoaXMgYXZvaWRzIG5lZWRpbmcgbWF0Y2hSb3V0ZXMgdG8gYmVcbiAgICAvLyBoaXN0b3J5LWF3YXJlLlxuICAgIHNhZmVseURlY29kZVVSSShwYXRobmFtZSkpO1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5Sb3V0ZXMocm91dGVzLCBicmFuY2hlcywgcGFyZW50c01ldGEsIHBhcmVudFBhdGgpIHtcbiAgaWYgKGJyYW5jaGVzID09PSB2b2lkIDApIHtcbiAgICBicmFuY2hlcyA9IFtdO1xuICB9XG5cbiAgaWYgKHBhcmVudHNNZXRhID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRzTWV0YSA9IFtdO1xuICB9XG5cbiAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhcmVudFBhdGggPSBcIlwiO1xuICB9XG5cbiAgbGV0IGZsYXR0ZW5Sb3V0ZSA9IChyb3V0ZSwgaW5kZXgsIHJlbGF0aXZlUGF0aCkgPT4ge1xuICAgIGxldCBtZXRhID0ge1xuICAgICAgcmVsYXRpdmVQYXRoOiByZWxhdGl2ZVBhdGggPT09IHVuZGVmaW5lZCA/IHJvdXRlLnBhdGggfHwgXCJcIiA6IHJlbGF0aXZlUGF0aCxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IHJvdXRlLmNhc2VTZW5zaXRpdmUgPT09IHRydWUsXG4gICAgICBjaGlsZHJlbkluZGV4OiBpbmRleCxcbiAgICAgIHJvdXRlXG4gICAgfTtcblxuICAgIGlmIChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgaW52YXJpYW50KG1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgocGFyZW50UGF0aCksIFwiQWJzb2x1dGUgcm91dGUgcGF0aCBcXFwiXCIgKyBtZXRhLnJlbGF0aXZlUGF0aCArIFwiXFxcIiBuZXN0ZWQgdW5kZXIgcGF0aCBcIiArIChcIlxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCIgaXMgbm90IHZhbGlkLiBBbiBhYnNvbHV0ZSBjaGlsZCByb3V0ZSBwYXRoIFwiKSArIFwibXVzdCBzdGFydCB3aXRoIHRoZSBjb21iaW5lZCBwYXRoIG9mIGFsbCBpdHMgcGFyZW50IHJvdXRlcy5cIik7XG4gICAgICBtZXRhLnJlbGF0aXZlUGF0aCA9IG1ldGEucmVsYXRpdmVQYXRoLnNsaWNlKHBhcmVudFBhdGgubGVuZ3RoKTtcbiAgICB9XG5cbiAgICBsZXQgcGF0aCA9IGpvaW5QYXRocyhbcGFyZW50UGF0aCwgbWV0YS5yZWxhdGl2ZVBhdGhdKTtcbiAgICBsZXQgcm91dGVzTWV0YSA9IHBhcmVudHNNZXRhLmNvbmNhdChtZXRhKTsgLy8gQWRkIHRoZSBjaGlsZHJlbiBiZWZvcmUgYWRkaW5nIHRoaXMgcm91dGUgdG8gdGhlIGFycmF5IHNvIHdlIHRyYXZlcnNlIHRoZVxuICAgIC8vIHJvdXRlIHRyZWUgZGVwdGgtZmlyc3QgYW5kIGNoaWxkIHJvdXRlcyBhcHBlYXIgYmVmb3JlIHRoZWlyIHBhcmVudHMgaW5cbiAgICAvLyB0aGUgXCJmbGF0dGVuZWRcIiB2ZXJzaW9uLlxuXG4gICAgaWYgKHJvdXRlLmNoaWxkcmVuICYmIHJvdXRlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIGludmFyaWFudCggLy8gT3VyIHR5cGVzIGtub3cgYmV0dGVyLCBidXQgcnVudGltZSBKUyBtYXkgbm90IVxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgcm91dGUuaW5kZXggIT09IHRydWUsIFwiSW5kZXggcm91dGVzIG11c3Qgbm90IGhhdmUgY2hpbGQgcm91dGVzLiBQbGVhc2UgcmVtb3ZlIFwiICsgKFwiYWxsIGNoaWxkIHJvdXRlcyBmcm9tIHJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIi5cIikpO1xuICAgICAgZmxhdHRlblJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgYnJhbmNoZXMsIHJvdXRlc01ldGEsIHBhdGgpO1xuICAgIH0gLy8gUm91dGVzIHdpdGhvdXQgYSBwYXRoIHNob3VsZG4ndCBldmVyIG1hdGNoIGJ5IHRoZW1zZWx2ZXMgdW5sZXNzIHRoZXkgYXJlXG4gICAgLy8gaW5kZXggcm91dGVzLCBzbyBkb24ndCBhZGQgdGhlbSB0byB0aGUgbGlzdCBvZiBwb3NzaWJsZSBicmFuY2hlcy5cblxuXG4gICAgaWYgKHJvdXRlLnBhdGggPT0gbnVsbCAmJiAhcm91dGUuaW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBicmFuY2hlcy5wdXNoKHtcbiAgICAgIHBhdGgsXG4gICAgICBzY29yZTogY29tcHV0ZVNjb3JlKHBhdGgsIHJvdXRlLmluZGV4KSxcbiAgICAgIHJvdXRlc01ldGFcbiAgICB9KTtcbiAgfTtcblxuICByb3V0ZXMuZm9yRWFjaCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgdmFyIF9yb3V0ZSRwYXRoO1xuXG4gICAgLy8gY29hcnNlLWdyYWluIGNoZWNrIGZvciBvcHRpb25hbCBwYXJhbXNcbiAgICBpZiAocm91dGUucGF0aCA9PT0gXCJcIiB8fCAhKChfcm91dGUkcGF0aCA9IHJvdXRlLnBhdGgpICE9IG51bGwgJiYgX3JvdXRlJHBhdGguaW5jbHVkZXMoXCI/XCIpKSkge1xuICAgICAgZmxhdHRlblJvdXRlKHJvdXRlLCBpbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGV4cGxvZGVkIG9mIGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHJvdXRlLnBhdGgpKSB7XG4gICAgICAgIGZsYXR0ZW5Sb3V0ZShyb3V0ZSwgaW5kZXgsIGV4cGxvZGVkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYnJhbmNoZXM7XG59XG4vKipcbiAqIENvbXB1dGVzIGFsbCBjb21iaW5hdGlvbnMgb2Ygb3B0aW9uYWwgcGF0aCBzZWdtZW50cyBmb3IgYSBnaXZlbiBwYXRoLFxuICogZXhjbHVkaW5nIGNvbWJpbmF0aW9ucyB0aGF0IGFyZSBhbWJpZ3VvdXMgYW5kIG9mIGxvd2VyIHByaW9yaXR5LlxuICpcbiAqIEZvciBleGFtcGxlLCBgL29uZS86dHdvPy90aHJlZS86Zm91cj8vOmZpdmU/YCBleHBsb2RlcyB0bzpcbiAqIC0gYC9vbmUvdGhyZWVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWVgXG4gKiAtIGAvb25lL3RocmVlLzpmb3VyYFxuICogLSBgL29uZS90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zm91cmBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvdGhyZWUvOmZvdXIvOmZpdmVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZvdXIvOmZpdmVgXG4gKi9cblxuXG5mdW5jdGlvbiBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhwYXRoKSB7XG4gIGxldCBzZWdtZW50cyA9IHBhdGguc3BsaXQoXCIvXCIpO1xuICBpZiAoc2VnbWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gW107XG4gIGxldCBbZmlyc3QsIC4uLnJlc3RdID0gc2VnbWVudHM7IC8vIE9wdGlvbmFsIHBhdGggc2VnbWVudHMgYXJlIGRlbm90ZWQgYnkgYSB0cmFpbGluZyBgP2BcblxuICBsZXQgaXNPcHRpb25hbCA9IGZpcnN0LmVuZHNXaXRoKFwiP1wiKTsgLy8gQ29tcHV0ZSB0aGUgY29ycmVzcG9uZGluZyByZXF1aXJlZCBzZWdtZW50OiBgZm9vP2AgLT4gYGZvb2BcblxuICBsZXQgcmVxdWlyZWQgPSBmaXJzdC5yZXBsYWNlKC9cXD8kLywgXCJcIik7XG5cbiAgaWYgKHJlc3QubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSW50ZXByZXQgZW1wdHkgc3RyaW5nIGFzIG9taXR0aW5nIGFuIG9wdGlvbmFsIHNlZ21lbnRcbiAgICAvLyBgW1wib25lXCIsIFwiXCIsIFwidGhyZWVcIl1gIGNvcnJlc3BvbmRzIHRvIG9taXR0aW5nIGA6dHdvYCBmcm9tIGAvb25lLzp0d28/L3RocmVlYCAtPiBgL29uZS90aHJlZWBcbiAgICByZXR1cm4gaXNPcHRpb25hbCA/IFtyZXF1aXJlZCwgXCJcIl0gOiBbcmVxdWlyZWRdO1xuICB9XG5cbiAgbGV0IHJlc3RFeHBsb2RlZCA9IGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHJlc3Quam9pbihcIi9cIikpO1xuICBsZXQgcmVzdWx0ID0gW107IC8vIEFsbCBjaGlsZCBwYXRocyB3aXRoIHRoZSBwcmVmaXguICBEbyB0aGlzIGZvciBhbGwgY2hpbGRyZW4gYmVmb3JlIHRoZVxuICAvLyBvcHRpb25hbCB2ZXJzaW9uIGZvciBhbGwgY2hpbGRyZW4gc28gd2UgZ2V0IGNvbnNpc3RlbnQgb3JkZXJpbmcgd2hlcmUgdGhlXG4gIC8vIHBhcmVudCBvcHRpb25hbCBhc3BlY3QgaXMgcHJlZmVycmVkIGFzIHJlcXVpcmVkLiAgT3RoZXJ3aXNlLCB3ZSBjYW4gZ2V0XG4gIC8vIGNoaWxkIHNlY3Rpb25zIGludGVyc3BlcnNlZCB3aGVyZSBkZWVwZXIgb3B0aW9uYWwgc2VnbWVudHMgYXJlIGhpZ2hlciB0aGFuXG4gIC8vIHBhcmVudCBvcHRpb25hbCBzZWdtZW50cywgd2hlcmUgZm9yIGV4YW1wbGUsIC86dHdvIHdvdWxkIGV4cGxvZGVzIF9lYXJsaWVyX1xuICAvLyB0aGVuIC86b25lLiAgQnkgYWx3YXlzIGluY2x1ZGluZyB0aGUgcGFyZW50IGFzIHJlcXVpcmVkIF9mb3IgYWxsIGNoaWxkcmVuX1xuICAvLyBmaXJzdCwgd2UgYXZvaWQgdGhpcyBpc3N1ZVxuXG4gIHJlc3VsdC5wdXNoKC4uLnJlc3RFeHBsb2RlZC5tYXAoc3VicGF0aCA9PiBzdWJwYXRoID09PSBcIlwiID8gcmVxdWlyZWQgOiBbcmVxdWlyZWQsIHN1YnBhdGhdLmpvaW4oXCIvXCIpKSk7IC8vIFRoZW4gaWYgdGhpcyBpcyBhbiBvcHRpb25hbCB2YWx1ZSwgYWRkIGFsbCBjaGlsZCB2ZXJzaW9ucyB3aXRob3V0XG5cbiAgaWYgKGlzT3B0aW9uYWwpIHtcbiAgICByZXN1bHQucHVzaCguLi5yZXN0RXhwbG9kZWQpO1xuICB9IC8vIGZvciBhYnNvbHV0ZSBwYXRocywgZW5zdXJlIGAvYCBpbnN0ZWFkIG9mIGVtcHR5IHNlZ21lbnRcblxuXG4gIHJldHVybiByZXN1bHQubWFwKGV4cGxvZGVkID0+IHBhdGguc3RhcnRzV2l0aChcIi9cIikgJiYgZXhwbG9kZWQgPT09IFwiXCIgPyBcIi9cIiA6IGV4cGxvZGVkKTtcbn1cblxuZnVuY3Rpb24gcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpIHtcbiAgYnJhbmNoZXMuc29ydCgoYSwgYikgPT4gYS5zY29yZSAhPT0gYi5zY29yZSA/IGIuc2NvcmUgLSBhLnNjb3JlIC8vIEhpZ2hlciBzY29yZSBmaXJzdFxuICA6IGNvbXBhcmVJbmRleGVzKGEucm91dGVzTWV0YS5tYXAobWV0YSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpLCBiLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSkpO1xufVxuXG5jb25zdCBwYXJhbVJlID0gL146XFx3KyQvO1xuY29uc3QgZHluYW1pY1NlZ21lbnRWYWx1ZSA9IDM7XG5jb25zdCBpbmRleFJvdXRlVmFsdWUgPSAyO1xuY29uc3QgZW1wdHlTZWdtZW50VmFsdWUgPSAxO1xuY29uc3Qgc3RhdGljU2VnbWVudFZhbHVlID0gMTA7XG5jb25zdCBzcGxhdFBlbmFsdHkgPSAtMjtcblxuY29uc3QgaXNTcGxhdCA9IHMgPT4gcyA9PT0gXCIqXCI7XG5cbmZ1bmN0aW9uIGNvbXB1dGVTY29yZShwYXRoLCBpbmRleCkge1xuICBsZXQgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgbGV0IGluaXRpYWxTY29yZSA9IHNlZ21lbnRzLmxlbmd0aDtcblxuICBpZiAoc2VnbWVudHMuc29tZShpc1NwbGF0KSkge1xuICAgIGluaXRpYWxTY29yZSArPSBzcGxhdFBlbmFsdHk7XG4gIH1cblxuICBpZiAoaW5kZXgpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gaW5kZXhSb3V0ZVZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzLmZpbHRlcihzID0+ICFpc1NwbGF0KHMpKS5yZWR1Y2UoKHNjb3JlLCBzZWdtZW50KSA9PiBzY29yZSArIChwYXJhbVJlLnRlc3Qoc2VnbWVudCkgPyBkeW5hbWljU2VnbWVudFZhbHVlIDogc2VnbWVudCA9PT0gXCJcIiA/IGVtcHR5U2VnbWVudFZhbHVlIDogc3RhdGljU2VnbWVudFZhbHVlKSwgaW5pdGlhbFNjb3JlKTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZUluZGV4ZXMoYSwgYikge1xuICBsZXQgc2libGluZ3MgPSBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5zbGljZSgwLCAtMSkuZXZlcnkoKG4sIGkpID0+IG4gPT09IGJbaV0pO1xuICByZXR1cm4gc2libGluZ3MgPyAvLyBJZiB0d28gcm91dGVzIGFyZSBzaWJsaW5ncywgd2Ugc2hvdWxkIHRyeSB0byBtYXRjaCB0aGUgZWFybGllciBzaWJsaW5nXG4gIC8vIGZpcnN0LiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gaGF2ZSBmaW5lLWdyYWluZWQgY29udHJvbCBvdmVyIHRoZSBtYXRjaGluZ1xuICAvLyBiZWhhdmlvciBieSBzaW1wbHkgcHV0dGluZyByb3V0ZXMgd2l0aCBpZGVudGljYWwgcGF0aHMgaW4gdGhlIG9yZGVyIHRoZXlcbiAgLy8gd2FudCB0aGVtIHRyaWVkLlxuICBhW2EubGVuZ3RoIC0gMV0gLSBiW2IubGVuZ3RoIC0gMV0gOiAvLyBPdGhlcndpc2UsIGl0IGRvZXNuJ3QgcmVhbGx5IG1ha2Ugc2Vuc2UgdG8gcmFuayBub24tc2libGluZ3MgYnkgaW5kZXgsXG4gIC8vIHNvIHRoZXkgc29ydCBlcXVhbGx5LlxuICAwO1xufVxuXG5mdW5jdGlvbiBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaCwgcGF0aG5hbWUpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXNNZXRhXG4gIH0gPSBicmFuY2g7XG4gIGxldCBtYXRjaGVkUGFyYW1zID0ge307XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBcIi9cIjtcbiAgbGV0IG1hdGNoZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdXRlc01ldGEubGVuZ3RoOyArK2kpIHtcbiAgICBsZXQgbWV0YSA9IHJvdXRlc01ldGFbaV07XG4gICAgbGV0IGVuZCA9IGkgPT09IHJvdXRlc01ldGEubGVuZ3RoIC0gMTtcbiAgICBsZXQgcmVtYWluaW5nUGF0aG5hbWUgPSBtYXRjaGVkUGF0aG5hbWUgPT09IFwiL1wiID8gcGF0aG5hbWUgOiBwYXRobmFtZS5zbGljZShtYXRjaGVkUGF0aG5hbWUubGVuZ3RoKSB8fCBcIi9cIjtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaFBhdGgoe1xuICAgICAgcGF0aDogbWV0YS5yZWxhdGl2ZVBhdGgsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBtZXRhLmNhc2VTZW5zaXRpdmUsXG4gICAgICBlbmRcbiAgICB9LCByZW1haW5pbmdQYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgT2JqZWN0LmFzc2lnbihtYXRjaGVkUGFyYW1zLCBtYXRjaC5wYXJhbXMpO1xuICAgIGxldCByb3V0ZSA9IG1ldGEucm91dGU7XG4gICAgbWF0Y2hlcy5wdXNoKHtcbiAgICAgIC8vIFRPRE86IENhbiB0aGlzIGFzIGJlIGF2b2lkZWQ/XG4gICAgICBwYXJhbXM6IG1hdGNoZWRQYXJhbXMsXG4gICAgICBwYXRobmFtZTogam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lXSksXG4gICAgICBwYXRobmFtZUJhc2U6IG5vcm1hbGl6ZVBhdGhuYW1lKGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKSksXG4gICAgICByb3V0ZVxuICAgIH0pO1xuXG4gICAgaWYgKG1hdGNoLnBhdGhuYW1lQmFzZSAhPT0gXCIvXCIpIHtcbiAgICAgIG1hdGNoZWRQYXRobmFtZSA9IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlcztcbn1cbi8qKlxuICogUmV0dXJucyBhIHBhdGggd2l0aCBwYXJhbXMgaW50ZXJwb2xhdGVkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvZ2VuZXJhdGUtcGF0aFxuICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKG9yaWdpbmFsUGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgbGV0IHBhdGggPSBvcmlnaW5hbFBhdGg7XG5cbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIqXCIpICYmIHBhdGggIT09IFwiKlwiICYmICFwYXRoLmVuZHNXaXRoKFwiLypcIikpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCBcIlJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIiB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSBcIiArIChcIlxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIgYmVjYXVzZSB0aGUgYCpgIGNoYXJhY3RlciBtdXN0IFwiKSArIFwiYWx3YXlzIGZvbGxvdyBhIGAvYCBpbiB0aGUgcGF0dGVybi4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIFwiICsgKFwicGxlYXNlIGNoYW5nZSB0aGUgcm91dGUgcGF0aCB0byBcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiLlwiKSk7XG4gICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIik7XG4gIH1cblxuICByZXR1cm4gcGF0aC5yZXBsYWNlKC9eOihcXHcrKShcXD8/KS9nLCAoXywga2V5LCBvcHRpb25hbCkgPT4ge1xuICAgIGxldCBwYXJhbSA9IHBhcmFtc1trZXldO1xuXG4gICAgaWYgKG9wdGlvbmFsID09PSBcIj9cIikge1xuICAgICAgcmV0dXJuIHBhcmFtID09IG51bGwgPyBcIlwiIDogcGFyYW07XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtID09IG51bGwpIHtcbiAgICAgIGludmFyaWFudChmYWxzZSwgXCJNaXNzaW5nIFxcXCI6XCIgKyBrZXkgKyBcIlxcXCIgcGFyYW1cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmFtO1xuICB9KS5yZXBsYWNlKC9cXC86KFxcdyspKFxcPz8pL2csIChfLCBrZXksIG9wdGlvbmFsKSA9PiB7XG4gICAgbGV0IHBhcmFtID0gcGFyYW1zW2tleV07XG5cbiAgICBpZiAob3B0aW9uYWwgPT09IFwiP1wiKSB7XG4gICAgICByZXR1cm4gcGFyYW0gPT0gbnVsbCA/IFwiXCIgOiBcIi9cIiArIHBhcmFtO1xuICAgIH1cblxuICAgIGlmIChwYXJhbSA9PSBudWxsKSB7XG4gICAgICBpbnZhcmlhbnQoZmFsc2UsIFwiTWlzc2luZyBcXFwiOlwiICsga2V5ICsgXCJcXFwiIHBhcmFtXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBcIi9cIiArIHBhcmFtO1xuICB9KSAvLyBSZW1vdmUgYW55IG9wdGlvbmFsIG1hcmtlcnMgZnJvbSBvcHRpb25hbCBzdGF0aWMgc2VnbWVudHNcbiAgLnJlcGxhY2UoL1xcPy9nLCBcIlwiKS5yZXBsYWNlKC8oXFwvPylcXCovLCAoXywgcHJlZml4LCBfXywgc3RyKSA9PiB7XG4gICAgY29uc3Qgc3RhciA9IFwiKlwiO1xuXG4gICAgaWYgKHBhcmFtc1tzdGFyXSA9PSBudWxsKSB7XG4gICAgICAvLyBJZiBubyBzcGxhdCB3YXMgcHJvdmlkZWQsIHRyaW0gdGhlIHRyYWlsaW5nIHNsYXNoIF91bmxlc3NfIGl0J3NcbiAgICAgIC8vIHRoZSBlbnRpcmUgcGF0aFxuICAgICAgcmV0dXJuIHN0ciA9PT0gXCIvKlwiID8gXCIvXCIgOiBcIlwiO1xuICAgIH0gLy8gQXBwbHkgdGhlIHNwbGF0XG5cblxuICAgIHJldHVybiBcIlwiICsgcHJlZml4ICsgcGFyYW1zW3N0YXJdO1xuICB9KTtcbn1cbi8qKlxuICogUGVyZm9ybXMgcGF0dGVybiBtYXRjaGluZyBvbiBhIFVSTCBwYXRobmFtZSBhbmQgcmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dFxuICogdGhlIG1hdGNoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvbWF0Y2gtcGF0aFxuICovXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSkge1xuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09IFwic3RyaW5nXCIpIHtcbiAgICBwYXR0ZXJuID0ge1xuICAgICAgcGF0aDogcGF0dGVybixcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlLFxuICAgICAgZW5kOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIGxldCBbbWF0Y2hlciwgcGFyYW1OYW1lc10gPSBjb21waWxlUGF0aChwYXR0ZXJuLnBhdGgsIHBhdHRlcm4uY2FzZVNlbnNpdGl2ZSwgcGF0dGVybi5lbmQpO1xuICBsZXQgbWF0Y2ggPSBwYXRobmFtZS5tYXRjaChtYXRjaGVyKTtcbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBtYXRjaFswXTtcbiAgbGV0IHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gIGxldCBjYXB0dXJlR3JvdXBzID0gbWF0Y2guc2xpY2UoMSk7XG4gIGxldCBwYXJhbXMgPSBwYXJhbU5hbWVzLnJlZHVjZSgobWVtbywgcGFyYW1OYW1lLCBpbmRleCkgPT4ge1xuICAgIC8vIFdlIG5lZWQgdG8gY29tcHV0ZSB0aGUgcGF0aG5hbWVCYXNlIGhlcmUgdXNpbmcgdGhlIHJhdyBzcGxhdCB2YWx1ZVxuICAgIC8vIGluc3RlYWQgb2YgdXNpbmcgcGFyYW1zW1wiKlwiXSBsYXRlciBiZWNhdXNlIGl0IHdpbGwgYmUgZGVjb2RlZCB0aGVuXG4gICAgaWYgKHBhcmFtTmFtZSA9PT0gXCIqXCIpIHtcbiAgICAgIGxldCBzcGxhdFZhbHVlID0gY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIjtcbiAgICAgIHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5zbGljZSgwLCBtYXRjaGVkUGF0aG5hbWUubGVuZ3RoIC0gc3BsYXRWYWx1ZS5sZW5ndGgpLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgICB9XG5cbiAgICBtZW1vW3BhcmFtTmFtZV0gPSBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQoY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIiwgcGFyYW1OYW1lKTtcbiAgICByZXR1cm4gbWVtbztcbiAgfSwge30pO1xuICByZXR1cm4ge1xuICAgIHBhcmFtcyxcbiAgICBwYXRobmFtZTogbWF0Y2hlZFBhdGhuYW1lLFxuICAgIHBhdGhuYW1lQmFzZSxcbiAgICBwYXR0ZXJuXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIGNhc2VTZW5zaXRpdmUsIGVuZCkge1xuICBpZiAoY2FzZVNlbnNpdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdm9pZCAwKSB7XG4gICAgZW5kID0gdHJ1ZTtcbiAgfVxuXG4gIHdhcm5pbmcocGF0aCA9PT0gXCIqXCIgfHwgIXBhdGguZW5kc1dpdGgoXCIqXCIpIHx8IHBhdGguZW5kc1dpdGgoXCIvKlwiKSwgXCJSb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdlcmUgXCIgKyAoXCJcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiIGJlY2F1c2UgdGhlIGAqYCBjaGFyYWN0ZXIgbXVzdCBcIikgKyBcImFsd2F5cyBmb2xsb3cgYSBgL2AgaW4gdGhlIHBhdHRlcm4uIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCBcIiArIChcInBsZWFzZSBjaGFuZ2UgdGhlIHJvdXRlIHBhdGggdG8gXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIi5cIikpO1xuICBsZXQgcGFyYW1OYW1lcyA9IFtdO1xuICBsZXQgcmVnZXhwU291cmNlID0gXCJeXCIgKyBwYXRoLnJlcGxhY2UoL1xcLypcXCo/JC8sIFwiXCIpIC8vIElnbm9yZSB0cmFpbGluZyAvIGFuZCAvKiwgd2UnbGwgaGFuZGxlIGl0IGJlbG93XG4gIC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKSAvLyBNYWtlIHN1cmUgaXQgaGFzIGEgbGVhZGluZyAvXG4gIC5yZXBsYWNlKC9bXFxcXC4qK14kP3t9fCgpW1xcXV0vZywgXCJcXFxcJCZcIikgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcnNcbiAgLnJlcGxhY2UoL1xcLzooXFx3KykvZywgKF8sIHBhcmFtTmFtZSkgPT4ge1xuICAgIHBhcmFtTmFtZXMucHVzaChwYXJhbU5hbWUpO1xuICAgIHJldHVybiBcIi8oW15cXFxcL10rKVwiO1xuICB9KTtcblxuICBpZiAocGF0aC5lbmRzV2l0aChcIipcIikpIHtcbiAgICBwYXJhbU5hbWVzLnB1c2goXCIqXCIpO1xuICAgIHJlZ2V4cFNvdXJjZSArPSBwYXRoID09PSBcIipcIiB8fCBwYXRoID09PSBcIi8qXCIgPyBcIiguKikkXCIgLy8gQWxyZWFkeSBtYXRjaGVkIHRoZSBpbml0aWFsIC8sIGp1c3QgbWF0Y2ggdGhlIHJlc3RcbiAgICA6IFwiKD86XFxcXC8oLispfFxcXFwvKikkXCI7IC8vIERvbid0IGluY2x1ZGUgdGhlIC8gaW4gcGFyYW1zW1wiKlwiXVxuICB9IGVsc2UgaWYgKGVuZCkge1xuICAgIC8vIFdoZW4gbWF0Y2hpbmcgdG8gdGhlIGVuZCwgaWdub3JlIHRyYWlsaW5nIHNsYXNoZXNcbiAgICByZWdleHBTb3VyY2UgKz0gXCJcXFxcLyokXCI7XG4gIH0gZWxzZSBpZiAocGF0aCAhPT0gXCJcIiAmJiBwYXRoICE9PSBcIi9cIikge1xuICAgIC8vIElmIG91ciBwYXRoIGlzIG5vbi1lbXB0eSBhbmQgY29udGFpbnMgYW55dGhpbmcgYmV5b25kIGFuIGluaXRpYWwgc2xhc2gsXG4gICAgLy8gdGhlbiB3ZSBoYXZlIF9zb21lXyBmb3JtIG9mIHBhdGggaW4gb3VyIHJlZ2V4IHNvIHdlIHNob3VsZCBleHBlY3QgdG9cbiAgICAvLyBtYXRjaCBvbmx5IGlmIHdlIGZpbmQgdGhlIGVuZCBvZiB0aGlzIHBhdGggc2VnbWVudC4gIExvb2sgZm9yIGFuIG9wdGlvbmFsXG4gICAgLy8gbm9uLWNhcHR1cmVkIHRyYWlsaW5nIHNsYXNoICh0byBtYXRjaCBhIHBvcnRpb24gb2YgdGhlIFVSTCkgb3IgdGhlIGVuZFxuICAgIC8vIG9mIHRoZSBwYXRoIChpZiB3ZSd2ZSBtYXRjaGVkIHRvIHRoZSBlbmQpLiAgV2UgdXNlZCB0byBkbyB0aGlzIHdpdGggYVxuICAgIC8vIHdvcmQgYm91bmRhcnkgYnV0IHRoYXQgZ2l2ZXMgZmFsc2UgcG9zaXRpdmVzIG9uIHJvdXRlcyBsaWtlXG4gICAgLy8gL3VzZXItcHJlZmVyZW5jZXMgc2luY2UgYC1gIGNvdW50cyBhcyBhIHdvcmQgYm91bmRhcnkuXG4gICAgcmVnZXhwU291cmNlICs9IFwiKD86KD89XFxcXC98JCkpXCI7XG4gIH0gZWxzZSA7XG5cbiAgbGV0IG1hdGNoZXIgPSBuZXcgUmVnRXhwKHJlZ2V4cFNvdXJjZSwgY2FzZVNlbnNpdGl2ZSA/IHVuZGVmaW5lZCA6IFwiaVwiKTtcbiAgcmV0dXJuIFttYXRjaGVyLCBwYXJhbU5hbWVzXTtcbn1cblxuZnVuY3Rpb24gc2FmZWx5RGVjb2RlVVJJKHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSSh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgd2FybmluZyhmYWxzZSwgXCJUaGUgVVJMIHBhdGggXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgY291bGQgbm90IGJlIGRlY29kZWQgYmVjYXVzZSBpdCBpcyBpcyBhIFwiICsgXCJtYWxmb3JtZWQgVVJMIHNlZ21lbnQuIFRoaXMgaXMgcHJvYmFibHkgZHVlIHRvIGEgYmFkIHBlcmNlbnQgXCIgKyAoXCJlbmNvZGluZyAoXCIgKyBlcnJvciArIFwiKS5cIikpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQodmFsdWUsIHBhcmFtTmFtZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdhcm5pbmcoZmFsc2UsIFwiVGhlIHZhbHVlIGZvciB0aGUgVVJMIHBhcmFtIFxcXCJcIiArIHBhcmFtTmFtZSArIFwiXFxcIiB3aWxsIG5vdCBiZSBkZWNvZGVkIGJlY2F1c2VcIiArIChcIiB0aGUgc3RyaW5nIFxcXCJcIiArIHZhbHVlICsgXCJcXFwiIGlzIGEgbWFsZm9ybWVkIFVSTCBzZWdtZW50LiBUaGlzIGlzIHByb2JhYmx5XCIpICsgKFwiIGR1ZSB0byBhIGJhZCBwZXJjZW50IGVuY29kaW5nIChcIiArIGVycm9yICsgXCIpLlwiKSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSByZXR1cm4gcGF0aG5hbWU7XG5cbiAgaWYgKCFwYXRobmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoYmFzZW5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBXZSB3YW50IHRvIGxlYXZlIHRyYWlsaW5nIHNsYXNoIGJlaGF2aW9yIGluIHRoZSB1c2VyJ3MgY29udHJvbCwgc28gaWYgdGhleVxuICAvLyBzcGVjaWZ5IGEgYmFzZW5hbWUgd2l0aCBhIHRyYWlsaW5nIHNsYXNoLCB3ZSBzaG91bGQgc3VwcG9ydCBpdFxuXG5cbiAgbGV0IHN0YXJ0SW5kZXggPSBiYXNlbmFtZS5lbmRzV2l0aChcIi9cIikgPyBiYXNlbmFtZS5sZW5ndGggLSAxIDogYmFzZW5hbWUubGVuZ3RoO1xuICBsZXQgbmV4dENoYXIgPSBwYXRobmFtZS5jaGFyQXQoc3RhcnRJbmRleCk7XG5cbiAgaWYgKG5leHRDaGFyICYmIG5leHRDaGFyICE9PSBcIi9cIikge1xuICAgIC8vIHBhdGhuYW1lIGRvZXMgbm90IHN0YXJ0IHdpdGggYmFzZW5hbWUvXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcGF0aG5hbWUuc2xpY2Uoc3RhcnRJbmRleCkgfHwgXCIvXCI7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gd2FybmluZyhjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gV2VsY29tZSB0byBkZWJ1Z2dpbmcgQHJlbWl4LXJ1bi9yb3V0ZXIhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIGEgcmVzb2x2ZWQgcGF0aCBvYmplY3QgcmVsYXRpdmUgdG8gdGhlIGdpdmVuIHBhdGhuYW1lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvcmVzb2x2ZS1wYXRoXG4gKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVBhdGgodG8sIGZyb21QYXRobmFtZSkge1xuICBpZiAoZnJvbVBhdGhuYW1lID09PSB2b2lkIDApIHtcbiAgICBmcm9tUGF0aG5hbWUgPSBcIi9cIjtcbiAgfVxuXG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IHRvUGF0aG5hbWUsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIlxuICB9ID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvO1xuICBsZXQgcGF0aG5hbWUgPSB0b1BhdGhuYW1lID8gdG9QYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKSA/IHRvUGF0aG5hbWUgOiByZXNvbHZlUGF0aG5hbWUodG9QYXRobmFtZSwgZnJvbVBhdGhuYW1lKSA6IGZyb21QYXRobmFtZTtcbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2g6IG5vcm1hbGl6ZVNlYXJjaChzZWFyY2gpLFxuICAgIGhhc2g6IG5vcm1hbGl6ZUhhc2goaGFzaClcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHJlbGF0aXZlUGF0aCwgZnJvbVBhdGhuYW1lKSB7XG4gIGxldCBzZWdtZW50cyA9IGZyb21QYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgbGV0IHJlbGF0aXZlU2VnbWVudHMgPSByZWxhdGl2ZVBhdGguc3BsaXQoXCIvXCIpO1xuICByZWxhdGl2ZVNlZ21lbnRzLmZvckVhY2goc2VnbWVudCA9PiB7XG4gICAgaWYgKHNlZ21lbnQgPT09IFwiLi5cIikge1xuICAgICAgLy8gS2VlcCB0aGUgcm9vdCBcIlwiIHNlZ21lbnQgc28gdGhlIHBhdGhuYW1lIHN0YXJ0cyBhdCAvXG4gICAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gMSkgc2VnbWVudHMucG9wKCk7XG4gICAgfSBlbHNlIGlmIChzZWdtZW50ICE9PSBcIi5cIikge1xuICAgICAgc2VnbWVudHMucHVzaChzZWdtZW50KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc2VnbWVudHMubGVuZ3RoID4gMSA/IHNlZ21lbnRzLmpvaW4oXCIvXCIpIDogXCIvXCI7XG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWRQYXRoRXJyb3IoY2hhciwgZmllbGQsIGRlc3QsIHBhdGgpIHtcbiAgcmV0dXJuIFwiQ2Fubm90IGluY2x1ZGUgYSAnXCIgKyBjaGFyICsgXCInIGNoYXJhY3RlciBpbiBhIG1hbnVhbGx5IHNwZWNpZmllZCBcIiArIChcImB0by5cIiArIGZpZWxkICsgXCJgIGZpZWxkIFtcIiArIEpTT04uc3RyaW5naWZ5KHBhdGgpICsgXCJdLiAgUGxlYXNlIHNlcGFyYXRlIGl0IG91dCB0byB0aGUgXCIpICsgKFwiYHRvLlwiICsgZGVzdCArIFwiYCBmaWVsZC4gQWx0ZXJuYXRpdmVseSB5b3UgbWF5IHByb3ZpZGUgdGhlIGZ1bGwgcGF0aCBhcyBcIikgKyBcImEgc3RyaW5nIGluIDxMaW5rIHRvPVxcXCIuLi5cXFwiPiBhbmQgdGhlIHJvdXRlciB3aWxsIHBhcnNlIGl0IGZvciB5b3UuXCI7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKlxuICogV2hlbiBwcm9jZXNzaW5nIHJlbGF0aXZlIG5hdmlnYXRpb24gd2Ugd2FudCB0byBpZ25vcmUgYW5jZXN0b3Igcm91dGVzIHRoYXRcbiAqIGRvIG5vdCBjb250cmlidXRlIHRvIHRoZSBwYXRoLCBzdWNoIHRoYXQgaW5kZXgvcGF0aGxlc3MgbGF5b3V0IHJvdXRlcyBkb24ndFxuICogaW50ZXJmZXJlLlxuICpcbiAqIEZvciBleGFtcGxlLCB3aGVuIG1vdmluZyBhIHJvdXRlIGVsZW1lbnQgaW50byBhbiBpbmRleCByb3V0ZSBhbmQvb3IgYVxuICogcGF0aGxlc3MgbGF5b3V0IHJvdXRlLCByZWxhdGl2ZSBsaW5rIGJlaGF2aW9yIGNvbnRhaW5lZCB3aXRoaW4gc2hvdWxkIHN0YXlcbiAqIHRoZSBzYW1lLiAgQm90aCBvZiB0aGUgZm9sbG93aW5nIGV4YW1wbGVzIHNob3VsZCBsaW5rIGJhY2sgdG8gdGhlIHJvb3Q6XG4gKlxuICogICA8Um91dGUgcGF0aD1cIi9cIj5cbiAqICAgICA8Um91dGUgcGF0aD1cImFjY291bnRzXCIgZWxlbWVudD17PExpbmsgdG89XCIuLlwifT5cbiAqICAgPC9Sb3V0ZT5cbiAqXG4gKiAgIDxSb3V0ZSBwYXRoPVwiL1wiPlxuICogICAgIDxSb3V0ZSBwYXRoPVwiYWNjb3VudHNcIj5cbiAqICAgICAgIDxSb3V0ZSBlbGVtZW50PXs8QWNjb3VudHNMYXlvdXQgLz59PiAgICAgICAvLyA8LS0gRG9lcyBub3QgY29udHJpYnV0ZVxuICogICAgICAgICA8Um91dGUgaW5kZXggZWxlbWVudD17PExpbmsgdG89XCIuLlwifSAvPiAgLy8gPC0tIERvZXMgbm90IGNvbnRyaWJ1dGVcbiAqICAgICAgIDwvUm91dGVcbiAqICAgICA8L1JvdXRlPlxuICogICA8L1JvdXRlPlxuICovXG5cblxuZnVuY3Rpb24gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykge1xuICByZXR1cm4gbWF0Y2hlcy5maWx0ZXIoKG1hdGNoLCBpbmRleCkgPT4gaW5kZXggPT09IDAgfHwgbWF0Y2gucm91dGUucGF0aCAmJiBtYXRjaC5yb3V0ZS5wYXRoLmxlbmd0aCA+IDApO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUbyh0b0FyZywgcm91dGVQYXRobmFtZXMsIGxvY2F0aW9uUGF0aG5hbWUsIGlzUGF0aFJlbGF0aXZlKSB7XG4gIGlmIChpc1BhdGhSZWxhdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgaXNQYXRoUmVsYXRpdmUgPSBmYWxzZTtcbiAgfVxuXG4gIGxldCB0bztcblxuICBpZiAodHlwZW9mIHRvQXJnID09PSBcInN0cmluZ1wiKSB7XG4gICAgdG8gPSBwYXJzZVBhdGgodG9BcmcpO1xuICB9IGVsc2Uge1xuICAgIHRvID0gX2V4dGVuZHMoe30sIHRvQXJnKTtcbiAgICBpbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIj9cIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCI/XCIsIFwicGF0aG5hbWVcIiwgXCJzZWFyY2hcIiwgdG8pKTtcbiAgICBpbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIiNcIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCIjXCIsIFwicGF0aG5hbWVcIiwgXCJoYXNoXCIsIHRvKSk7XG4gICAgaW52YXJpYW50KCF0by5zZWFyY2ggfHwgIXRvLnNlYXJjaC5pbmNsdWRlcyhcIiNcIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCIjXCIsIFwic2VhcmNoXCIsIFwiaGFzaFwiLCB0bykpO1xuICB9XG5cbiAgbGV0IGlzRW1wdHlQYXRoID0gdG9BcmcgPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCI7XG4gIGxldCB0b1BhdGhuYW1lID0gaXNFbXB0eVBhdGggPyBcIi9cIiA6IHRvLnBhdGhuYW1lO1xuICBsZXQgZnJvbTsgLy8gUm91dGluZyBpcyByZWxhdGl2ZSB0byB0aGUgY3VycmVudCBwYXRobmFtZSBpZiBleHBsaWNpdGx5IHJlcXVlc3RlZC5cbiAgLy9cbiAgLy8gSWYgYSBwYXRobmFtZSBpcyBleHBsaWNpdGx5IHByb3ZpZGVkIGluIGB0b2AsIGl0IHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGVcbiAgLy8gcm91dGUgY29udGV4dC4gVGhpcyBpcyBleHBsYWluZWQgaW4gYE5vdGUgb24gYDxMaW5rIHRvPmAgdmFsdWVzYCBpbiBvdXJcbiAgLy8gbWlncmF0aW9uIGd1aWRlIGZyb20gdjUgYXMgYSBtZWFucyBvZiBkaXNhbWJpZ3VhdGlvbiBiZXR3ZWVuIGB0b2AgdmFsdWVzXG4gIC8vIHRoYXQgYmVnaW4gd2l0aCBgL2AgYW5kIHRob3NlIHRoYXQgZG8gbm90LiBIb3dldmVyLCB0aGlzIGlzIHByb2JsZW1hdGljIGZvclxuICAvLyBgdG9gIHZhbHVlcyB0aGF0IGRvIG5vdCBwcm92aWRlIGEgcGF0aG5hbWUuIGB0b2AgY2FuIHNpbXBseSBiZSBhIHNlYXJjaCBvclxuICAvLyBoYXNoIHN0cmluZywgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgYXNzdW1lIHRoYXQgdGhlIG5hdmlnYXRpb24gaXMgcmVsYXRpdmVcbiAgLy8gdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24ncyBwYXRobmFtZSBhbmQgKm5vdCogdGhlIHJvdXRlIHBhdGhuYW1lLlxuXG4gIGlmIChpc1BhdGhSZWxhdGl2ZSB8fCB0b1BhdGhuYW1lID09IG51bGwpIHtcbiAgICBmcm9tID0gbG9jYXRpb25QYXRobmFtZTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcm91dGVQYXRobmFtZUluZGV4ID0gcm91dGVQYXRobmFtZXMubGVuZ3RoIC0gMTtcblxuICAgIGlmICh0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIuLlwiKSkge1xuICAgICAgbGV0IHRvU2VnbWVudHMgPSB0b1BhdGhuYW1lLnNwbGl0KFwiL1wiKTsgLy8gRWFjaCBsZWFkaW5nIC4uIHNlZ21lbnQgbWVhbnMgXCJnbyB1cCBvbmUgcm91dGVcIiBpbnN0ZWFkIG9mIFwiZ28gdXAgb25lXG4gICAgICAvLyBVUkwgc2VnbWVudFwiLiAgVGhpcyBpcyBhIGtleSBkaWZmZXJlbmNlIGZyb20gaG93IDxhIGhyZWY+IHdvcmtzIGFuZCBhXG4gICAgICAvLyBtYWpvciByZWFzb24gd2UgY2FsbCB0aGlzIGEgXCJ0b1wiIHZhbHVlIGluc3RlYWQgb2YgYSBcImhyZWZcIi5cblxuICAgICAgd2hpbGUgKHRvU2VnbWVudHNbMF0gPT09IFwiLi5cIikge1xuICAgICAgICB0b1NlZ21lbnRzLnNoaWZ0KCk7XG4gICAgICAgIHJvdXRlUGF0aG5hbWVJbmRleCAtPSAxO1xuICAgICAgfVxuXG4gICAgICB0by5wYXRobmFtZSA9IHRvU2VnbWVudHMuam9pbihcIi9cIik7XG4gICAgfSAvLyBJZiB0aGVyZSBhcmUgbW9yZSBcIi4uXCIgc2VnbWVudHMgdGhhbiBwYXJlbnQgcm91dGVzLCByZXNvbHZlIHJlbGF0aXZlIHRvXG4gICAgLy8gdGhlIHJvb3QgLyBVUkwuXG5cblxuICAgIGZyb20gPSByb3V0ZVBhdGhuYW1lSW5kZXggPj0gMCA/IHJvdXRlUGF0aG5hbWVzW3JvdXRlUGF0aG5hbWVJbmRleF0gOiBcIi9cIjtcbiAgfVxuXG4gIGxldCBwYXRoID0gcmVzb2x2ZVBhdGgodG8sIGZyb20pOyAvLyBFbnN1cmUgdGhlIHBhdGhuYW1lIGhhcyBhIHRyYWlsaW5nIHNsYXNoIGlmIHRoZSBvcmlnaW5hbCBcInRvXCIgaGFkIG9uZVxuXG4gIGxldCBoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggPSB0b1BhdGhuYW1lICYmIHRvUGF0aG5hbWUgIT09IFwiL1wiICYmIHRvUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpOyAvLyBPciBpZiB0aGlzIHdhcyBhIGxpbmsgdG8gdGhlIGN1cnJlbnQgcGF0aCB3aGljaCBoYXMgYSB0cmFpbGluZyBzbGFzaFxuXG4gIGxldCBoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCA9IChpc0VtcHR5UGF0aCB8fCB0b1BhdGhuYW1lID09PSBcIi5cIikgJiYgbG9jYXRpb25QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7XG5cbiAgaWYgKCFwYXRoLnBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSAmJiAoaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoIHx8IGhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoKSkge1xuICAgIHBhdGgucGF0aG5hbWUgKz0gXCIvXCI7XG4gIH1cblxuICByZXR1cm4gcGF0aDtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRUb1BhdGhuYW1lKHRvKSB7XG4gIC8vIEVtcHR5IHN0cmluZ3Mgc2hvdWxkIGJlIHRyZWF0ZWQgdGhlIHNhbWUgYXMgLyBwYXRoc1xuICByZXR1cm4gdG8gPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCIgPyBcIi9cIiA6IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykucGF0aG5hbWUgOiB0by5wYXRobmFtZTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jb25zdCBqb2luUGF0aHMgPSBwYXRocyA9PiBwYXRocy5qb2luKFwiL1wiKS5yZXBsYWNlKC9cXC9cXC8rL2csIFwiL1wiKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jb25zdCBub3JtYWxpemVQYXRobmFtZSA9IHBhdGhuYW1lID0+IHBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikucmVwbGFjZSgvXlxcLyovLCBcIi9cIik7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuY29uc3Qgbm9ybWFsaXplU2VhcmNoID0gc2VhcmNoID0+ICFzZWFyY2ggfHwgc2VhcmNoID09PSBcIj9cIiA/IFwiXCIgOiBzZWFyY2guc3RhcnRzV2l0aChcIj9cIikgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jb25zdCBub3JtYWxpemVIYXNoID0gaGFzaCA9PiAhaGFzaCB8fCBoYXNoID09PSBcIiNcIiA/IFwiXCIgOiBoYXNoLnN0YXJ0c1dpdGgoXCIjXCIpID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbi8qKlxuICogVGhpcyBpcyBhIHNob3J0Y3V0IGZvciBjcmVhdGluZyBgYXBwbGljYXRpb24vanNvbmAgcmVzcG9uc2VzLiBDb252ZXJ0cyBgZGF0YWBcbiAqIHRvIEpTT04gYW5kIHNldHMgdGhlIGBDb250ZW50LVR5cGVgIGhlYWRlci5cbiAqL1xuXG5jb25zdCBqc29uID0gZnVuY3Rpb24ganNvbihkYXRhLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0ge307XG4gIH1cblxuICBsZXQgcmVzcG9uc2VJbml0ID0gdHlwZW9mIGluaXQgPT09IFwibnVtYmVyXCIgPyB7XG4gICAgc3RhdHVzOiBpbml0XG4gIH0gOiBpbml0O1xuICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHJlc3BvbnNlSW5pdC5oZWFkZXJzKTtcblxuICBpZiAoIWhlYWRlcnMuaGFzKFwiQ29udGVudC1UeXBlXCIpKSB7XG4gICAgaGVhZGVycy5zZXQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShkYXRhKSwgX2V4dGVuZHMoe30sIHJlc3BvbnNlSW5pdCwge1xuICAgIGhlYWRlcnNcbiAgfSkpO1xufTtcbmNsYXNzIEFib3J0ZWREZWZlcnJlZEVycm9yIGV4dGVuZHMgRXJyb3Ige31cbmNsYXNzIERlZmVycmVkRGF0YSB7XG4gIGNvbnN0cnVjdG9yKGRhdGEsIHJlc3BvbnNlSW5pdCkge1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLmRlZmVycmVkS2V5cyA9IFtdO1xuICAgIGludmFyaWFudChkYXRhICYmIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KGRhdGEpLCBcImRlZmVyKCkgb25seSBhY2NlcHRzIHBsYWluIG9iamVjdHNcIik7IC8vIFNldCB1cCBhbiBBYm9ydENvbnRyb2xsZXIgKyBQcm9taXNlIHdlIGNhbiByYWNlIGFnYWluc3QgdG8gZXhpdCBlYXJseVxuICAgIC8vIGNhbmNlbGxhdGlvblxuXG4gICAgbGV0IHJlamVjdDtcbiAgICB0aGlzLmFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgICBsZXQgb25BYm9ydCA9ICgpID0+IHJlamVjdChuZXcgQWJvcnRlZERlZmVycmVkRXJyb3IoXCJEZWZlcnJlZCBkYXRhIGFib3J0ZWRcIikpO1xuXG4gICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsID0gKCkgPT4gdGhpcy5jb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG5cbiAgICB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB0aGlzLmRhdGEgPSBPYmplY3QuZW50cmllcyhkYXRhKS5yZWR1Y2UoKGFjYywgX3JlZikgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWY7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgW2tleV06IHRoaXMudHJhY2tQcm9taXNlKGtleSwgdmFsdWUpXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG5cbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAvLyBBbGwgaW5jb21pbmcgdmFsdWVzIHdlcmUgcmVzb2x2ZWRcbiAgICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCgpO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdCA9IHJlc3BvbnNlSW5pdDtcbiAgfVxuXG4gIHRyYWNrUHJvbWlzZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHRoaXMuZGVmZXJyZWRLZXlzLnB1c2goa2V5KTtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmFkZChrZXkpOyAvLyBXZSBzdG9yZSBhIGxpdHRsZSB3cmFwcGVyIHByb21pc2UgdGhhdCB3aWxsIGJlIGV4dGVuZGVkIHdpdGhcbiAgICAvLyBfZGF0YS9fZXJyb3IgcHJvcHMgdXBvbiByZXNvbHZlL3JlamVjdFxuXG4gICAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJhY2UoW3ZhbHVlLCB0aGlzLmFib3J0UHJvbWlzZV0pLnRoZW4oZGF0YSA9PiB0aGlzLm9uU2V0dGxlKHByb21pc2UsIGtleSwgbnVsbCwgZGF0YSksIGVycm9yID0+IHRoaXMub25TZXR0bGUocHJvbWlzZSwga2V5LCBlcnJvcikpOyAvLyBSZWdpc3RlciByZWplY3Rpb24gbGlzdGVuZXJzIHRvIGF2b2lkIHVuY2F1Z2h0IHByb21pc2UgcmVqZWN0aW9ucyBvblxuICAgIC8vIGVycm9ycyBvciBhYm9ydGVkIGRlZmVycmVkIHZhbHVlc1xuXG4gICAgcHJvbWlzZS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBvblNldHRsZShwcm9taXNlLCBrZXksIGVycm9yLCBkYXRhKSB7XG4gICAgaWYgKHRoaXMuY29udHJvbGxlci5zaWduYWwuYWJvcnRlZCAmJiBlcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yKSB7XG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmRlbGV0ZShrZXkpO1xuXG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gTm90aGluZyBsZWZ0IHRvIGFib3J0IVxuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgfVxuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZW1pdChmYWxzZSwga2V5KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2RhdGFcIiwge1xuICAgICAgZ2V0OiAoKSA9PiBkYXRhXG4gICAgfSk7XG4gICAgdGhpcy5lbWl0KGZhbHNlLCBrZXkpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgZW1pdChhYm9ydGVkLCBzZXR0bGVkS2V5KSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKHN1YnNjcmliZXIgPT4gc3Vic2NyaWJlcihhYm9ydGVkLCBzZXR0bGVkS2V5KSk7XG4gIH1cblxuICBzdWJzY3JpYmUoZm4pIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHRoaXMuc3Vic2NyaWJlcnMuZGVsZXRlKGZuKTtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmZvckVhY2goKHYsIGspID0+IHRoaXMucGVuZGluZ0tleXNTZXQuZGVsZXRlKGspKTtcbiAgICB0aGlzLmVtaXQodHJ1ZSk7XG4gIH1cblxuICBhc3luYyByZXNvbHZlRGF0YShzaWduYWwpIHtcbiAgICBsZXQgYWJvcnRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKCF0aGlzLmRvbmUpIHtcbiAgICAgIGxldCBvbkFib3J0ID0gKCkgPT4gdGhpcy5jYW5jZWwoKTtcblxuICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICAgIGFib3J0ZWQgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmUoYWJvcnRlZCA9PiB7XG4gICAgICAgICAgc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcblxuICAgICAgICAgIGlmIChhYm9ydGVkIHx8IHRoaXMuZG9uZSkge1xuICAgICAgICAgICAgcmVzb2x2ZShhYm9ydGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFib3J0ZWQ7XG4gIH1cblxuICBnZXQgZG9uZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wZW5kaW5nS2V5c1NldC5zaXplID09PSAwO1xuICB9XG5cbiAgZ2V0IHVud3JhcHBlZERhdGEoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuZGF0YSAhPT0gbnVsbCAmJiB0aGlzLmRvbmUsIFwiQ2FuIG9ubHkgdW53cmFwIGRhdGEgb24gaW5pdGlhbGl6ZWQgYW5kIHNldHRsZWQgZGVmZXJyZWRzXCIpO1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLmRhdGEpLnJlZHVjZSgoYWNjLCBfcmVmMikgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWYyO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgIFtrZXldOiB1bndyYXBUcmFja2VkUHJvbWlzZSh2YWx1ZSlcbiAgICAgIH0pO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIGdldCBwZW5kaW5nS2V5cygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnBlbmRpbmdLZXlzU2V0KTtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIGlzVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSAmJiB2YWx1ZS5fdHJhY2tlZCA9PT0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gdW53cmFwVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgaWYgKCFpc1RyYWNrZWRQcm9taXNlKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGlmICh2YWx1ZS5fZXJyb3IpIHtcbiAgICB0aHJvdyB2YWx1ZS5fZXJyb3I7XG4gIH1cblxuICByZXR1cm4gdmFsdWUuX2RhdGE7XG59XG5cbmNvbnN0IGRlZmVyID0gZnVuY3Rpb24gZGVmZXIoZGF0YSwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IHt9O1xuICB9XG5cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IHR5cGVvZiBpbml0ID09PSBcIm51bWJlclwiID8ge1xuICAgIHN0YXR1czogaW5pdFxuICB9IDogaW5pdDtcbiAgcmV0dXJuIG5ldyBEZWZlcnJlZERhdGEoZGF0YSwgcmVzcG9uc2VJbml0KTtcbn07XG4vKipcbiAqIEEgcmVkaXJlY3QgcmVzcG9uc2UuIFNldHMgdGhlIHN0YXR1cyBjb2RlIGFuZCB0aGUgYExvY2F0aW9uYCBoZWFkZXIuXG4gKiBEZWZhdWx0cyB0byBcIjMwMiBGb3VuZFwiLlxuICovXG5cbmNvbnN0IHJlZGlyZWN0ID0gZnVuY3Rpb24gcmVkaXJlY3QodXJsLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0gMzAyO1xuICB9XG5cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IGluaXQ7XG5cbiAgaWYgKHR5cGVvZiByZXNwb25zZUluaXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXNwb25zZUluaXQgPSB7XG4gICAgICBzdGF0dXM6IHJlc3BvbnNlSW5pdFxuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHJlc3BvbnNlSW5pdC5zdGF0dXMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXNwb25zZUluaXQuc3RhdHVzID0gMzAyO1xuICB9XG5cbiAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7XG4gIGhlYWRlcnMuc2V0KFwiTG9jYXRpb25cIiwgdXJsKTtcbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCBfZXh0ZW5kcyh7fSwgcmVzcG9uc2VJbml0LCB7XG4gICAgaGVhZGVyc1xuICB9KSk7XG59O1xuLyoqXG4gKiBAcHJpdmF0ZVxuICogVXRpbGl0eSBjbGFzcyB3ZSB1c2UgdG8gaG9sZCBhdXRvLXVud3JhcHBlZCA0eHgvNXh4IFJlc3BvbnNlIGJvZGllc1xuICovXG5cbmNsYXNzIEVycm9yUmVzcG9uc2Uge1xuICBjb25zdHJ1Y3RvcihzdGF0dXMsIHN0YXR1c1RleHQsIGRhdGEsIGludGVybmFsKSB7XG4gICAgaWYgKGludGVybmFsID09PSB2b2lkIDApIHtcbiAgICAgIGludGVybmFsID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dCB8fCBcIlwiO1xuICAgIHRoaXMuaW50ZXJuYWwgPSBpbnRlcm5hbDtcblxuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGEudG9TdHJpbmcoKTtcbiAgICAgIHRoaXMuZXJyb3IgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgfVxuXG59XG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlcnJvciBpcyBhbiBFcnJvclJlc3BvbnNlIGdlbmVyYXRlZCBmcm9tIGEgNHh4LzV4eFxuICogUmVzcG9uc2UgdGhyb3duIGZyb20gYW4gYWN0aW9uL2xvYWRlclxuICovXG5cbmZ1bmN0aW9uIGlzUm91dGVFcnJvclJlc3BvbnNlKGVycm9yKSB7XG4gIHJldHVybiBlcnJvciAhPSBudWxsICYmIHR5cGVvZiBlcnJvci5zdGF0dXMgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIGVycm9yLnN0YXR1c1RleHQgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIGVycm9yLmludGVybmFsID09PSBcImJvb2xlYW5cIiAmJiBcImRhdGFcIiBpbiBlcnJvcjtcbn1cblxuY29uc3QgdmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIgPSBbXCJwb3N0XCIsIFwicHV0XCIsIFwicGF0Y2hcIiwgXCJkZWxldGVcIl07XG5jb25zdCB2YWxpZE11dGF0aW9uTWV0aG9kcyA9IG5ldyBTZXQodmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIpO1xuY29uc3QgdmFsaWRSZXF1ZXN0TWV0aG9kc0FyciA9IFtcImdldFwiLCAuLi52YWxpZE11dGF0aW9uTWV0aG9kc0Fycl07XG5jb25zdCB2YWxpZFJlcXVlc3RNZXRob2RzID0gbmV3IFNldCh2YWxpZFJlcXVlc3RNZXRob2RzQXJyKTtcbmNvbnN0IHJlZGlyZWN0U3RhdHVzQ29kZXMgPSBuZXcgU2V0KFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF0pO1xuY29uc3QgcmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzID0gbmV3IFNldChbMzA3LCAzMDhdKTtcbmNvbnN0IElETEVfTkFWSUdBVElPTiA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBsb2NhdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgZm9ybURhdGE6IHVuZGVmaW5lZFxufTtcbmNvbnN0IElETEVfRkVUQ0hFUiA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBkYXRhOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkXG59O1xuY29uc3QgSURMRV9CTE9DS0VSID0ge1xuICBzdGF0ZTogXCJ1bmJsb2NrZWRcIixcbiAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICByZXNldDogdW5kZWZpbmVkLFxuICBsb2NhdGlvbjogdW5kZWZpbmVkXG59O1xuY29uc3QgQUJTT0xVVEVfVVJMX1JFR0VYID0gL14oPzpbYS16XVthLXowLTkrLi1dKjp8XFwvXFwvKS9pO1xuY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbmNvbnN0IGlzU2VydmVyID0gIWlzQnJvd3NlcjsgLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIGNyZWF0ZVJvdXRlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBDcmVhdGUgYSByb3V0ZXIgYW5kIGxpc3RlbiB0byBoaXN0b3J5IFBPUCBuYXZpZ2F0aW9uc1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlcihpbml0KSB7XG4gIGludmFyaWFudChpbml0LnJvdXRlcy5sZW5ndGggPiAwLCBcIllvdSBtdXN0IHByb3ZpZGUgYSBub24tZW1wdHkgcm91dGVzIGFycmF5IHRvIGNyZWF0ZVJvdXRlclwiKTtcbiAgbGV0IGRhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKGluaXQucm91dGVzKTtcbiAgbGV0IGluRmxpZ2h0RGF0YVJvdXRlczsgLy8gQ2xlYW51cCBmdW5jdGlvbiBmb3IgaGlzdG9yeVxuXG4gIGxldCB1bmxpc3Rlbkhpc3RvcnkgPSBudWxsOyAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9ucyB0byBjYWxsIG9uIGFsbCBzdGF0ZSBjaGFuZ2VzXG5cbiAgbGV0IHN1YnNjcmliZXJzID0gbmV3IFNldCgpOyAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIG9iamVjdCB0byBob2xkIHNjcm9sbCByZXN0b3JhdGlvbiBsb2NhdGlvbnMgZHVyaW5nIHJvdXRpbmdcblxuICBsZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBudWxsOyAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBzY3JvbGwgcmVzdG9yYXRpb24ga2V5c1xuXG4gIGxldCBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IG51bGw7IC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb24gdG8gZ2V0IGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXG5cbiAgbGV0IGdldFNjcm9sbFBvc2l0aW9uID0gbnVsbDsgLy8gT25lLXRpbWUgZmxhZyB0byBjb250cm9sIHRoZSBpbml0aWFsIGh5ZHJhdGlvbiBzY3JvbGwgcmVzdG9yYXRpb24uICBCZWNhdXNlXG4gIC8vIHdlIGRvbid0IGdldCB0aGUgc2F2ZWQgcG9zaXRpb25zIGZyb20gPFNjcm9sbFJlc3RvcmF0aW9uIC8+IHVudGlsIF9hZnRlcl9cbiAgLy8gdGhlIGluaXRpYWwgcmVuZGVyLCB3ZSBuZWVkIHRvIG1hbnVhbGx5IHRyaWdnZXIgYSBzZXBhcmF0ZSB1cGRhdGVTdGF0ZSB0b1xuICAvLyBzZW5kIGFsb25nIHRoZSByZXN0b3JlU2Nyb2xsUG9zaXRpb25cbiAgLy8gU2V0IHRvIHRydWUgaWYgd2UgaGF2ZSBgaHlkcmF0aW9uRGF0YWAgc2luY2Ugd2UgYXNzdW1lIHdlIHdlcmUgU1NSJ2QgYW5kIHRoYXRcbiAgLy8gU1NSIGRpZCB0aGUgaW5pdGlhbCBzY3JvbGwgcmVzdG9yYXRpb24uXG5cbiAgbGV0IGluaXRpYWxTY3JvbGxSZXN0b3JlZCA9IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsO1xuICBsZXQgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBpbml0Lmhpc3RvcnkubG9jYXRpb24sIGluaXQuYmFzZW5hbWUpO1xuICBsZXQgaW5pdGlhbEVycm9ycyA9IG51bGw7XG5cbiAgaWYgKGluaXRpYWxNYXRjaGVzID09IG51bGwpIHtcbiAgICAvLyBJZiB3ZSBkbyBub3QgbWF0Y2ggYSB1c2VyLXByb3ZpZGVkLXJvdXRlLCBmYWxsIGJhY2sgdG8gdGhlIHJvb3RcbiAgICAvLyB0byBhbGxvdyB0aGUgZXJyb3IgYm91bmRhcnkgdG8gdGFrZSBvdmVyXG4gICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgIHBhdGhuYW1lOiBpbml0Lmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWVcbiAgICB9KTtcbiAgICBsZXQge1xuICAgICAgbWF0Y2hlcyxcbiAgICAgIHJvdXRlXG4gICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGluaXRpYWxFcnJvcnMgPSB7XG4gICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgIH07XG4gIH1cblxuICBsZXQgaW5pdGlhbGl6ZWQgPSAhaW5pdGlhbE1hdGNoZXMuc29tZShtID0+IG0ucm91dGUubG9hZGVyKSB8fCBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbDtcbiAgbGV0IHJvdXRlcjtcbiAgbGV0IHN0YXRlID0ge1xuICAgIGhpc3RvcnlBY3Rpb246IGluaXQuaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGluaXQuaGlzdG9yeS5sb2NhdGlvbixcbiAgICBtYXRjaGVzOiBpbml0aWFsTWF0Y2hlcyxcbiAgICBpbml0aWFsaXplZCxcbiAgICBuYXZpZ2F0aW9uOiBJRExFX05BVklHQVRJT04sXG4gICAgLy8gRG9uJ3QgcmVzdG9yZSBvbiBpbml0aWFsIHVwZGF0ZVN0YXRlKCkgaWYgd2Ugd2VyZSBTU1InZFxuICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGwgPyBmYWxzZSA6IG51bGwsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0OiBmYWxzZSxcbiAgICByZXZhbGlkYXRpb246IFwiaWRsZVwiLFxuICAgIGxvYWRlckRhdGE6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEubG9hZGVyRGF0YSB8fCB7fSxcbiAgICBhY3Rpb25EYXRhOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmFjdGlvbkRhdGEgfHwgbnVsbCxcbiAgICBlcnJvcnM6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEuZXJyb3JzIHx8IGluaXRpYWxFcnJvcnMsXG4gICAgZmV0Y2hlcnM6IG5ldyBNYXAoKSxcbiAgICBibG9ja2VyczogbmV3IE1hcCgpXG4gIH07IC8vIC0tIFN0YXRlZnVsIGludGVybmFsIHZhcmlhYmxlcyB0byBtYW5hZ2UgbmF2aWdhdGlvbnMgLS1cbiAgLy8gQ3VycmVudCBuYXZpZ2F0aW9uIGluIHByb2dyZXNzICh0byBiZSBjb21taXR0ZWQgaW4gY29tcGxldGVOYXZpZ2F0aW9uKVxuXG4gIGxldCBwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlBvcDsgLy8gU2hvdWxkIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gcHJldmVudCB0aGUgc2Nyb2xsIHJlc2V0IGlmIHNjcm9sbCBjYW5ub3RcbiAgLy8gYmUgcmVzdG9yZWQ/XG5cbiAgbGV0IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSBmYWxzZTsgLy8gQWJvcnRDb250cm9sbGVyIGZvciB0aGUgYWN0aXZlIG5hdmlnYXRpb25cblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyOyAvLyBXZSB1c2UgdGhpcyB0byBhdm9pZCB0b3VjaGluZyBoaXN0b3J5IGluIGNvbXBsZXRlTmF2aWdhdGlvbiBpZiBhXG4gIC8vIHJldmFsaWRhdGlvbiBpcyBlbnRpcmVseSB1bmludGVycnVwdGVkXG5cbiAgbGV0IGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IGZhbHNlOyAvLyBVc2UgdGhpcyBpbnRlcm5hbCBmbGFnIHRvIGZvcmNlIHJldmFsaWRhdGlvbiBvZiBhbGwgbG9hZGVyczpcbiAgLy8gIC0gc3VibWlzc2lvbnMgKGNvbXBsZXRlZCBvciBpbnRlcnJ1cHRlZClcbiAgLy8gIC0gdXNlUmV2YWxpZGF0ZSgpXG4gIC8vICAtIFgtUmVtaXgtUmV2YWxpZGF0ZSAoZnJvbSByZWRpcmVjdClcblxuICBsZXQgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlOyAvLyBVc2UgdGhpcyBpbnRlcm5hbCBhcnJheSB0byBjYXB0dXJlIHJvdXRlcyB0aGF0IHJlcXVpcmUgcmV2YWxpZGF0aW9uIGR1ZVxuICAvLyB0byBhIGNhbmNlbGxlZCBkZWZlcnJlZCBvbiBhY3Rpb24gc3VibWlzc2lvblxuXG4gIGxldCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcyA9IFtdOyAvLyBVc2UgdGhpcyBpbnRlcm5hbCBhcnJheSB0byBjYXB0dXJlIGZldGNoZXIgbG9hZHMgdGhhdCB3ZXJlIGNhbmNlbGxlZCBieSBhblxuICAvLyBhY3Rpb24gbmF2aWdhdGlvbiBhbmQgcmVxdWlyZSByZXZhbGlkYXRpb25cblxuICBsZXQgY2FuY2VsbGVkRmV0Y2hlckxvYWRzID0gW107IC8vIEFib3J0Q29udHJvbGxlcnMgZm9yIGFueSBpbi1mbGlnaHQgZmV0Y2hlcnNcblxuICBsZXQgZmV0Y2hDb250cm9sbGVycyA9IG5ldyBNYXAoKTsgLy8gVHJhY2sgbG9hZHMgYmFzZWQgb24gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgc3RhcnRlZFxuXG4gIGxldCBpbmNyZW1lbnRpbmdMb2FkSWQgPSAwOyAvLyBUcmFjayB0aGUgb3V0c3RhbmRpbmcgcGVuZGluZyBuYXZpZ2F0aW9uIGRhdGEgbG9hZCB0byBiZSBjb21wYXJlZCBhZ2FpbnN0XG4gIC8vIHRoZSBnbG9iYWxseSBpbmNyZW1lbnRpbmcgbG9hZCB3aGVuIGEgZmV0Y2hlciBsb2FkIGxhbmRzIGFmdGVyIGEgY29tcGxldGVkXG4gIC8vIG5hdmlnYXRpb25cblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPSAtMTsgLy8gRmV0Y2hlcnMgdGhhdCB0cmlnZ2VyZWQgZGF0YSByZWxvYWRzIGFzIGEgcmVzdWx0IG9mIHRoZWlyIGFjdGlvbnNcblxuICBsZXQgZmV0Y2hSZWxvYWRJZHMgPSBuZXcgTWFwKCk7IC8vIEZldGNoZXJzIHRoYXQgdHJpZ2dlcmVkIHJlZGlyZWN0IG5hdmlnYXRpb25zIGZyb20gdGhlaXIgYWN0aW9uc1xuXG4gIGxldCBmZXRjaFJlZGlyZWN0SWRzID0gbmV3IFNldCgpOyAvLyBNb3N0IHJlY2VudCBocmVmL21hdGNoIGZvciBmZXRjaGVyLmxvYWQgY2FsbHMgZm9yIGZldGNoZXJzXG5cbiAgbGV0IGZldGNoTG9hZE1hdGNoZXMgPSBuZXcgTWFwKCk7IC8vIFN0b3JlIERlZmVycmVkRGF0YSBpbnN0YW5jZXMgZm9yIGFjdGl2ZSByb3V0ZSBtYXRjaGVzLiAgV2hlbiBhXG4gIC8vIHJvdXRlIGxvYWRlciByZXR1cm5zIGRlZmVyKCkgd2Ugc3RpY2sgb25lIGluIGhlcmUuICBUaGVuLCB3aGVuIGEgbmVzdGVkXG4gIC8vIHByb21pc2UgcmVzb2x2ZXMgd2UgdXBkYXRlIGxvYWRlckRhdGEuICBJZiBhIG5ldyBuYXZpZ2F0aW9uIHN0YXJ0cyB3ZVxuICAvLyBjYW5jZWwgYWN0aXZlIGRlZmVycmVkcyBmb3IgZWxpbWluYXRlZCByb3V0ZXMuXG5cbiAgbGV0IGFjdGl2ZURlZmVycmVkcyA9IG5ldyBNYXAoKTsgLy8gU3RvcmUgYmxvY2tlciBmdW5jdGlvbnMgaW4gYSBzZXBhcmF0ZSBNYXAgb3V0c2lkZSBvZiByb3V0ZXIgc3RhdGUgc2luY2VcbiAgLy8gd2UgZG9uJ3QgbmVlZCB0byB1cGRhdGUgVUkgc3RhdGUgaWYgdGhleSBjaGFuZ2VcblxuICBsZXQgYmxvY2tlckZ1bmN0aW9ucyA9IG5ldyBNYXAoKTsgLy8gRmxhZyB0byBpZ25vcmUgdGhlIG5leHQgaGlzdG9yeSB1cGRhdGUsIHNvIHdlIGNhbiByZXZlcnQgdGhlIFVSTCBjaGFuZ2Ugb25cbiAgLy8gYSBQT1AgbmF2aWdhdGlvbiB0aGF0IHdhcyBibG9ja2VkIGJ5IHRoZSB1c2VyIHdpdGhvdXQgdG91Y2hpbmcgcm91dGVyIHN0YXRlXG5cbiAgbGV0IGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gZmFsc2U7IC8vIEluaXRpYWxpemUgdGhlIHJvdXRlciwgYWxsIHNpZGUgZWZmZWN0cyBzaG91bGQgYmUga2lja2VkIG9mZiBmcm9tIGhlcmUuXG4gIC8vIEltcGxlbWVudGVkIGFzIGEgRmx1ZW50IEFQSSBmb3IgZWFzZSBvZjpcbiAgLy8gICBsZXQgcm91dGVyID0gY3JlYXRlUm91dGVyKGluaXQpLmluaXRpYWxpemUoKTtcblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIC8vIElmIGhpc3RvcnkgaW5mb3JtcyB1cyBvZiBhIFBPUCBuYXZpZ2F0aW9uLCBzdGFydCB0aGUgbmF2aWdhdGlvbiBidXQgZG8gbm90IHVwZGF0ZVxuICAgIC8vIHN0YXRlLiAgV2UnbGwgdXBkYXRlIG91ciBvd24gc3RhdGUgb25jZSB0aGUgbmF2aWdhdGlvbiBjb21wbGV0ZXNcbiAgICB1bmxpc3Rlbkhpc3RvcnkgPSBpbml0Lmhpc3RvcnkubGlzdGVuKF9yZWYgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgYWN0aW9uOiBoaXN0b3J5QWN0aW9uLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgZGVsdGFcbiAgICAgIH0gPSBfcmVmO1xuXG4gICAgICAvLyBJZ25vcmUgdGhpcyBldmVudCBpZiBpdCB3YXMganVzdCB1cyByZXNldHRpbmcgdGhlIFVSTCBmcm9tIGFcbiAgICAgIC8vIGJsb2NrZWQgUE9QIG5hdmlnYXRpb25cbiAgICAgIGlmIChpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSkge1xuICAgICAgICBpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHdhcm5pbmcoYmxvY2tlckZ1bmN0aW9ucy5zaXplID09PSAwIHx8IGRlbHRhICE9IG51bGwsIFwiWW91IGFyZSB0cnlpbmcgdG8gdXNlIGEgYmxvY2tlciBvbiBhIFBPUCBuYXZpZ2F0aW9uIHRvIGEgbG9jYXRpb24gXCIgKyBcInRoYXQgd2FzIG5vdCBjcmVhdGVkIGJ5IEByZW1peC1ydW4vcm91dGVyLiBUaGlzIHdpbGwgZmFpbCBzaWxlbnRseSBpbiBcIiArIFwicHJvZHVjdGlvbi4gVGhpcyBjYW4gaGFwcGVuIGlmIHlvdSBhcmUgbmF2aWdhdGluZyBvdXRzaWRlIHRoZSByb3V0ZXIgXCIgKyBcInZpYSBgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlYC9gd2luZG93LmxvY2F0aW9uLmhhc2hgIGluc3RlYWQgb2YgdXNpbmcgXCIgKyBcInJvdXRlciBuYXZpZ2F0aW9uIEFQSXMuICBUaGlzIGNhbiBhbHNvIGhhcHBlbiBpZiB5b3UgYXJlIHVzaW5nIFwiICsgXCJjcmVhdGVIYXNoUm91dGVyIGFuZCB0aGUgdXNlciBtYW51YWxseSBjaGFuZ2VzIHRoZSBVUkwuXCIpO1xuICAgICAgbGV0IGJsb2NrZXJLZXkgPSBzaG91bGRCbG9ja05hdmlnYXRpb24oe1xuICAgICAgICBjdXJyZW50TG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBuZXh0TG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBoaXN0b3J5QWN0aW9uXG4gICAgICB9KTtcblxuICAgICAgaWYgKGJsb2NrZXJLZXkgJiYgZGVsdGEgIT0gbnVsbCkge1xuICAgICAgICAvLyBSZXN0b3JlIHRoZSBVUkwgdG8gbWF0Y2ggdGhlIGN1cnJlbnQgVUksIGJ1dCBkb24ndCB1cGRhdGUgcm91dGVyIHN0YXRlXG4gICAgICAgIGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgaW5pdC5oaXN0b3J5LmdvKGRlbHRhICogLTEpOyAvLyBQdXQgdGhlIGJsb2NrZXIgaW50byBhIGJsb2NrZWQgc3RhdGVcblxuICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICBzdGF0ZTogXCJibG9ja2VkXCIsXG4gICAgICAgICAgbG9jYXRpb24sXG5cbiAgICAgICAgICBwcm9jZWVkKCkge1xuICAgICAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgICAgICAgIHN0YXRlOiBcInByb2NlZWRpbmdcIixcbiAgICAgICAgICAgICAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICByZXNldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBsb2NhdGlvblxuICAgICAgICAgICAgfSk7IC8vIFJlLWRvIHRoZSBzYW1lIFBPUCBuYXZpZ2F0aW9uIHdlIGp1c3QgYmxvY2tlZFxuXG4gICAgICAgICAgICBpbml0Lmhpc3RvcnkuZ28oZGVsdGEpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICByZXNldCgpIHtcbiAgICAgICAgICAgIGRlbGV0ZUJsb2NrZXIoYmxvY2tlcktleSk7XG4gICAgICAgICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgICAgICAgIGJsb2NrZXJzOiBuZXcgTWFwKHJvdXRlci5zdGF0ZS5ibG9ja2VycylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIGxvY2F0aW9uKTtcbiAgICB9KTsgLy8gS2ljayBvZmYgaW5pdGlhbCBkYXRhIGxvYWQgaWYgbmVlZGVkLiAgVXNlIFBvcCB0byBhdm9pZCBtb2RpZnlpbmcgaGlzdG9yeVxuXG4gICAgaWYgKCFzdGF0ZS5pbml0aWFsaXplZCkge1xuICAgICAgc3RhcnROYXZpZ2F0aW9uKEFjdGlvbi5Qb3AsIHN0YXRlLmxvY2F0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm91dGVyO1xuICB9IC8vIENsZWFuIHVwIGEgcm91dGVyIGFuZCBpdCdzIHNpZGUgZWZmZWN0c1xuXG5cbiAgZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodW5saXN0ZW5IaXN0b3J5KSB7XG4gICAgICB1bmxpc3Rlbkhpc3RvcnkoKTtcbiAgICB9XG5cbiAgICBzdWJzY3JpYmVycy5jbGVhcigpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5mb3JFYWNoKChfLCBrZXkpID0+IGRlbGV0ZUZldGNoZXIoa2V5KSk7XG4gICAgc3RhdGUuYmxvY2tlcnMuZm9yRWFjaCgoXywga2V5KSA9PiBkZWxldGVCbG9ja2VyKGtleSkpO1xuICB9IC8vIFN1YnNjcmliZSB0byBzdGF0ZSB1cGRhdGVzIGZvciB0aGUgcm91dGVyXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUoZm4pIHtcbiAgICBzdWJzY3JpYmVycy5hZGQoZm4pO1xuICAgIHJldHVybiAoKSA9PiBzdWJzY3JpYmVycy5kZWxldGUoZm4pO1xuICB9IC8vIFVwZGF0ZSBvdXIgc3RhdGUgYW5kIG5vdGlmeSB0aGUgY2FsbGluZyBjb250ZXh0IG9mIHRoZSBjaGFuZ2VcblxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVN0YXRlKG5ld1N0YXRlKSB7XG4gICAgc3RhdGUgPSBfZXh0ZW5kcyh7fSwgc3RhdGUsIG5ld1N0YXRlKTtcbiAgICBzdWJzY3JpYmVycy5mb3JFYWNoKHN1YnNjcmliZXIgPT4gc3Vic2NyaWJlcihzdGF0ZSkpO1xuICB9IC8vIENvbXBsZXRlIGEgbmF2aWdhdGlvbiByZXR1cm5pbmcgdGhlIHN0YXRlLm5hdmlnYXRpb24gYmFjayB0byB0aGUgSURMRV9OQVZJR0FUSU9OXG4gIC8vIGFuZCBzZXR0aW5nIHN0YXRlLltoaXN0b3J5QWN0aW9uL2xvY2F0aW9uL21hdGNoZXNdIHRvIHRoZSBuZXcgcm91dGUuXG4gIC8vIC0gTG9jYXRpb24gaXMgYSByZXF1aXJlZCBwYXJhbVxuICAvLyAtIE5hdmlnYXRpb24gd2lsbCBhbHdheXMgYmUgc2V0IHRvIElETEVfTkFWSUdBVElPTlxuICAvLyAtIENhbiBwYXNzIGFueSBvdGhlciBzdGF0ZSBpbiBuZXdTdGF0ZVxuXG5cbiAgZnVuY3Rpb24gY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBuZXdTdGF0ZSkge1xuICAgIHZhciBfbG9jYXRpb24kc3RhdGUsIF9sb2NhdGlvbiRzdGF0ZTI7XG5cbiAgICAvLyBEZWR1Y2UgaWYgd2UncmUgaW4gYSBsb2FkaW5nL2FjdGlvblJlbG9hZCBzdGF0ZTpcbiAgICAvLyAtIFdlIGhhdmUgY29tbWl0dGVkIGFjdGlvbkRhdGEgaW4gdGhlIHN0b3JlXG4gICAgLy8gLSBUaGUgY3VycmVudCBuYXZpZ2F0aW9uIHdhcyBhIG11dGF0aW9uIHN1Ym1pc3Npb25cbiAgICAvLyAtIFdlJ3JlIHBhc3QgdGhlIHN1Ym1pdHRpbmcgc3RhdGUgYW5kIGludG8gdGhlIGxvYWRpbmcgc3RhdGVcbiAgICAvLyAtIFRoZSBsb2NhdGlvbiBiZWluZyBsb2FkZWQgaXMgbm90IHRoZSByZXN1bHQgb2YgYSByZWRpcmVjdFxuICAgIGxldCBpc0FjdGlvblJlbG9hZCA9IHN0YXRlLmFjdGlvbkRhdGEgIT0gbnVsbCAmJiBzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QgIT0gbnVsbCAmJiBpc011dGF0aW9uTWV0aG9kKHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCkgJiYgc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgKChfbG9jYXRpb24kc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sb2NhdGlvbiRzdGF0ZS5faXNSZWRpcmVjdCkgIT09IHRydWU7XG4gICAgbGV0IGFjdGlvbkRhdGE7XG5cbiAgICBpZiAobmV3U3RhdGUuYWN0aW9uRGF0YSkge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKG5ld1N0YXRlLmFjdGlvbkRhdGEpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYWN0aW9uRGF0YSA9IG5ld1N0YXRlLmFjdGlvbkRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBFbXB0eSBhY3Rpb25EYXRhIC0+IGNsZWFyIHByaW9yIGFjdGlvbkRhdGEgZHVlIHRvIGFuIGFjdGlvbiBlcnJvclxuICAgICAgICBhY3Rpb25EYXRhID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQWN0aW9uUmVsb2FkKSB7XG4gICAgICAvLyBLZWVwIHRoZSBjdXJyZW50IGRhdGEgaWYgd2UncmUgd3JhcHBpbmcgdXAgdGhlIGFjdGlvbiByZWxvYWRcbiAgICAgIGFjdGlvbkRhdGEgPSBzdGF0ZS5hY3Rpb25EYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDbGVhciBhY3Rpb25EYXRhIG9uIGFueSBvdGhlciBjb21wbGV0ZWQgbmF2aWdhdGlvbnNcbiAgICAgIGFjdGlvbkRhdGEgPSBudWxsO1xuICAgIH0gLy8gQWx3YXlzIHByZXNlcnZlIGFueSBleGlzdGluZyBsb2FkZXJEYXRhIGZyb20gcmUtdXNlZCByb3V0ZXNcblxuXG4gICAgbGV0IGxvYWRlckRhdGEgPSBuZXdTdGF0ZS5sb2FkZXJEYXRhID8gbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIG5ld1N0YXRlLmxvYWRlckRhdGEsIG5ld1N0YXRlLm1hdGNoZXMgfHwgW10sIG5ld1N0YXRlLmVycm9ycykgOiBzdGF0ZS5sb2FkZXJEYXRhOyAvLyBPbiBhIHN1Y2Nlc3NmdWwgbmF2aWdhdGlvbiB3ZSBjYW4gYXNzdW1lIHdlIGdvdCB0aHJvdWdoIGFsbCBibG9ja2Vyc1xuICAgIC8vIHNvIHdlIGNhbiBzdGFydCBmcmVzaFxuXG4gICAgZm9yIChsZXQgW2tleV0gb2YgYmxvY2tlckZ1bmN0aW9ucykge1xuICAgICAgZGVsZXRlQmxvY2tlcihrZXkpO1xuICAgIH0gLy8gQWx3YXlzIHJlc3BlY3QgdGhlIHVzZXIgZmxhZy4gIE90aGVyd2lzZSBkb24ndCByZXNldCBvbiBtdXRhdGlvblxuICAgIC8vIHN1Ym1pc3Npb24gbmF2aWdhdGlvbnMgdW5sZXNzIHRoZXkgcmVkaXJlY3RcblxuXG4gICAgbGV0IHByZXZlbnRTY3JvbGxSZXNldCA9IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUgfHwgc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kICE9IG51bGwgJiYgaXNNdXRhdGlvbk1ldGhvZChzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QpICYmICgoX2xvY2F0aW9uJHN0YXRlMiA9IGxvY2F0aW9uLnN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2xvY2F0aW9uJHN0YXRlMi5faXNSZWRpcmVjdCkgIT09IHRydWU7XG5cbiAgICBpZiAoaW5GbGlnaHREYXRhUm91dGVzKSB7XG4gICAgICBkYXRhUm91dGVzID0gaW5GbGlnaHREYXRhUm91dGVzO1xuICAgICAgaW5GbGlnaHREYXRhUm91dGVzID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHVwZGF0ZVN0YXRlKF9leHRlbmRzKHt9LCBuZXdTdGF0ZSwge1xuICAgICAgYWN0aW9uRGF0YSxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBoaXN0b3J5QWN0aW9uOiBwZW5kaW5nQWN0aW9uLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBpbml0aWFsaXplZDogdHJ1ZSxcbiAgICAgIG5hdmlnYXRpb246IElETEVfTkFWSUdBVElPTixcbiAgICAgIHJldmFsaWRhdGlvbjogXCJpZGxlXCIsXG4gICAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IGdldFNhdmVkU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG5ld1N0YXRlLm1hdGNoZXMgfHwgc3RhdGUubWF0Y2hlcyksXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICBibG9ja2VyczogbmV3IE1hcChzdGF0ZS5ibG9ja2VycylcbiAgICB9KSk7XG5cbiAgICBpZiAoaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSA7IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5Qb3ApIDsgZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlB1c2gpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5wdXNoKGxvY2F0aW9uLCBsb2NhdGlvbi5zdGF0ZSk7XG4gICAgfSBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUmVwbGFjZSkge1xuICAgICAgaW5pdC5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIGxvY2F0aW9uLnN0YXRlKTtcbiAgICB9IC8vIFJlc2V0IHN0YXRlZnVsIG5hdmlnYXRpb24gdmFyc1xuXG5cbiAgICBwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gZmFsc2U7XG4gICAgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gZmFsc2U7XG4gICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO1xuICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzID0gW107XG4gICAgY2FuY2VsbGVkRmV0Y2hlckxvYWRzID0gW107XG4gIH0gLy8gVHJpZ2dlciBhIG5hdmlnYXRpb24gZXZlbnQsIHdoaWNoIGNhbiBlaXRoZXIgYmUgYSBudW1lcmljYWwgUE9QIG9yIGEgUFVTSFxuICAvLyByZXBsYWNlIHdpdGggYW4gb3B0aW9uYWwgc3VibWlzc2lvblxuXG5cbiAgYXN5bmMgZnVuY3Rpb24gbmF2aWdhdGUodG8sIG9wdHMpIHtcbiAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpbml0Lmhpc3RvcnkuZ28odG8pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCB7XG4gICAgICBwYXRoLFxuICAgICAgc3VibWlzc2lvbixcbiAgICAgIGVycm9yXG4gICAgfSA9IG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyh0bywgb3B0cyk7XG4gICAgbGV0IGN1cnJlbnRMb2NhdGlvbiA9IHN0YXRlLmxvY2F0aW9uO1xuICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihzdGF0ZS5sb2NhdGlvbiwgcGF0aCwgb3B0cyAmJiBvcHRzLnN0YXRlKTsgLy8gV2hlbiB1c2luZyBuYXZpZ2F0ZSBhcyBhIFBVU0gvUkVQTEFDRSB3ZSBhcmVuJ3QgcmVhZGluZyBhbiBhbHJlYWR5LWVuY29kZWRcbiAgICAvLyBVUkwgZnJvbSB3aW5kb3cubG9jYXRpb24sIHNvIHdlIG5lZWQgdG8gZW5jb2RlIGl0IGhlcmUgc28gdGhlIGJlaGF2aW9yXG4gICAgLy8gcmVtYWlucyB0aGUgc2FtZSBhcyBQT1AgYW5kIG5vbi1kYXRhLXJvdXRlciB1c2FnZXMuICBuZXcgVVJMKCkgZG9lcyBhbGxcbiAgICAvLyB0aGUgc2FtZSBlbmNvZGluZyB3ZSdkIGdldCBmcm9tIGEgaGlzdG9yeS5wdXNoU3RhdGUvd2luZG93LmxvY2F0aW9uIHJlYWRcbiAgICAvLyB3aXRob3V0IGhhdmluZyB0byB0b3VjaCBoaXN0b3J5XG5cbiAgICBuZXh0TG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgbmV4dExvY2F0aW9uLCBpbml0Lmhpc3RvcnkuZW5jb2RlTG9jYXRpb24obmV4dExvY2F0aW9uKSk7XG4gICAgbGV0IHVzZXJSZXBsYWNlID0gb3B0cyAmJiBvcHRzLnJlcGxhY2UgIT0gbnVsbCA/IG9wdHMucmVwbGFjZSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgaGlzdG9yeUFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuXG4gICAgaWYgKHVzZXJSZXBsYWNlID09PSB0cnVlKSB7XG4gICAgICBoaXN0b3J5QWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgfSBlbHNlIGlmICh1c2VyUmVwbGFjZSA9PT0gZmFsc2UpIDsgZWxzZSBpZiAoc3VibWlzc2lvbiAhPSBudWxsICYmIGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSAmJiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24gPT09IHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lICsgc3RhdGUubG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICAvLyBCeSBkZWZhdWx0IG9uIHN1Ym1pc3Npb25zIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uIHdlIFJFUExBQ0Ugc28gdGhhdFxuICAgICAgLy8gdXNlcnMgZG9uJ3QgaGF2ZSB0byBkb3VibGUtY2xpY2sgdGhlIGJhY2sgYnV0dG9uIHRvIGdldCB0byB0aGUgcHJpb3JcbiAgICAgIC8vIGxvY2F0aW9uLiAgSWYgdGhlIHVzZXIgcmVkaXJlY3RzIHRvIGEgZGlmZmVyZW50IGxvY2F0aW9uIGZyb20gdGhlXG4gICAgICAvLyBhY3Rpb24vbG9hZGVyIHRoaXMgd2lsbCBiZSBpZ25vcmVkIGFuZCB0aGUgcmVkaXJlY3Qgd2lsbCBiZSBhIFBVU0hcbiAgICAgIGhpc3RvcnlBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB9XG5cbiAgICBsZXQgcHJldmVudFNjcm9sbFJlc2V0ID0gb3B0cyAmJiBcInByZXZlbnRTY3JvbGxSZXNldFwiIGluIG9wdHMgPyBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgYmxvY2tlcktleSA9IHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSk7XG5cbiAgICBpZiAoYmxvY2tlcktleSkge1xuICAgICAgLy8gUHV0IHRoZSBibG9ja2VyIGludG8gYSBibG9ja2VkIHN0YXRlXG4gICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgc3RhdGU6IFwiYmxvY2tlZFwiLFxuICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuXG4gICAgICAgIHByb2NlZWQoKSB7XG4gICAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgICAgICBzdGF0ZTogXCJwcm9jZWVkaW5nXCIsXG4gICAgICAgICAgICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICByZXNldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvblxuICAgICAgICAgIH0pOyAvLyBTZW5kIHRoZSBzYW1lIG5hdmlnYXRpb24gdGhyb3VnaFxuXG4gICAgICAgICAgbmF2aWdhdGUodG8sIG9wdHMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgIGRlbGV0ZUJsb2NrZXIoYmxvY2tlcktleSk7XG4gICAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgICAgYmxvY2tlcnM6IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIGF3YWl0IHN0YXJ0TmF2aWdhdGlvbihoaXN0b3J5QWN0aW9uLCBuZXh0TG9jYXRpb24sIHtcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICAvLyBTZW5kIHRocm91Z2ggdGhlIGZvcm1EYXRhIHNlcmlhbGl6YXRpb24gZXJyb3IgaWYgd2UgaGF2ZSBvbmUgc28gd2UgY2FuXG4gICAgICAvLyByZW5kZXIgYXQgdGhlIHJpZ2h0IGVycm9yIGJvdW5kYXJ5IGFmdGVyIHdlIG1hdGNoIHJvdXRlc1xuICAgICAgcGVuZGluZ0Vycm9yOiBlcnJvcixcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHJlcGxhY2U6IG9wdHMgJiYgb3B0cy5yZXBsYWNlXG4gICAgfSk7XG4gIH0gLy8gUmV2YWxpZGF0ZSBhbGwgY3VycmVudCBsb2FkZXJzLiAgSWYgYSBuYXZpZ2F0aW9uIGlzIGluIHByb2dyZXNzIG9yIGlmIHRoaXNcbiAgLy8gaXMgaW50ZXJydXB0ZWQgYnkgYSBuYXZpZ2F0aW9uLCBhbGxvdyB0aGlzIHRvIFwic3VjY2VlZFwiIGJ5IGNhbGxpbmcgYWxsXG4gIC8vIGxvYWRlcnMgZHVyaW5nIHRoZSBuZXh0IGxvYWRlciByb3VuZFxuXG5cbiAgZnVuY3Rpb24gcmV2YWxpZGF0ZSgpIHtcbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIHJldmFsaWRhdGlvbjogXCJsb2FkaW5nXCJcbiAgICB9KTsgLy8gSWYgd2UncmUgY3VycmVudGx5IHN1Ym1pdHRpbmcgYW4gYWN0aW9uLCB3ZSBkb24ndCBuZWVkIHRvIHN0YXJ0IGEgbmV3XG4gICAgLy8gbmF2aWdhdGlvbiwgd2UnbGwganVzdCBsZXQgdGhlIGZvbGxvdyB1cCBsb2FkZXIgZXhlY3V0aW9uIGNhbGwgYWxsIGxvYWRlcnNcblxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcInN1Ym1pdHRpbmdcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gSWYgd2UncmUgY3VycmVudGx5IGluIGFuIGlkbGUgc3RhdGUsIHN0YXJ0IGEgbmV3IG5hdmlnYXRpb24gZm9yIHRoZSBjdXJyZW50XG4gICAgLy8gYWN0aW9uL2xvY2F0aW9uIGFuZCBtYXJrIGl0IGFzIHVuaW50ZXJydXB0ZWQsIHdoaWNoIHdpbGwgc2tpcCB0aGUgaGlzdG9yeVxuICAgIC8vIHVwZGF0ZSBpbiBjb21wbGV0ZU5hdmlnYXRpb25cblxuXG4gICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICBzdGFydE5hdmlnYXRpb24oc3RhdGUuaGlzdG9yeUFjdGlvbiwgc3RhdGUubG9jYXRpb24sIHtcbiAgICAgICAgc3RhcnRVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIE90aGVyd2lzZSwgaWYgd2UncmUgY3VycmVudGx5IGluIGEgbG9hZGluZyBzdGF0ZSwganVzdCBzdGFydCBhIG5ld1xuICAgIC8vIG5hdmlnYXRpb24gdG8gdGhlIG5hdmlnYXRpb24ubG9jYXRpb24gYnV0IGRvIG5vdCB0cmlnZ2VyIGFuIHVuaW50ZXJydXB0ZWRcbiAgICAvLyByZXZhbGlkYXRpb24gc28gdGhhdCBoaXN0b3J5IGNvcnJlY3RseSB1cGRhdGVzIG9uY2UgdGhlIG5hdmlnYXRpb24gY29tcGxldGVzXG5cblxuICAgIHN0YXJ0TmF2aWdhdGlvbihwZW5kaW5nQWN0aW9uIHx8IHN0YXRlLmhpc3RvcnlBY3Rpb24sIHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIHtcbiAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbjogc3RhdGUubmF2aWdhdGlvblxuICAgIH0pO1xuICB9IC8vIFN0YXJ0IGEgbmF2aWdhdGlvbiB0byB0aGUgZ2l2ZW4gYWN0aW9uL2xvY2F0aW9uLiAgQ2FuIG9wdGlvbmFsbHkgcHJvdmlkZSBhXG4gIC8vIG92ZXJyaWRlTmF2aWdhdGlvbiB3aGljaCB3aWxsIG92ZXJyaWRlIHRoZSBub3JtYWxMb2FkIGluIHRoZSBjYXNlIG9mIGEgcmVkaXJlY3RcbiAgLy8gbmF2aWdhdGlvblxuXG5cbiAgYXN5bmMgZnVuY3Rpb24gc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIGxvY2F0aW9uLCBvcHRzKSB7XG4gICAgLy8gQWJvcnQgYW55IGluLXByb2dyZXNzIG5hdmlnYXRpb25zIGFuZCBzdGFydCBhIG5ldyBvbmUuIFVuc2V0IGFueSBvbmdvaW5nXG4gICAgLy8gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb25zIHVubGVzcyB0b2xkIG90aGVyd2lzZSwgc2luY2Ugd2Ugd2FudCB0aGlzXG4gICAgLy8gbmV3IG5hdmlnYXRpb24gdG8gdXBkYXRlIGhpc3Rvcnkgbm9ybWFsbHlcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICBwZW5kaW5nQWN0aW9uID0gaGlzdG9yeUFjdGlvbjtcbiAgICBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSAob3B0cyAmJiBvcHRzLnN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbikgPT09IHRydWU7IC8vIFNhdmUgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIGV2ZXJ5IHRpbWUgd2Ugc3RhcnQgYSBuZXcgbmF2aWdhdGlvbixcbiAgICAvLyBhbmQgdHJhY2sgd2hldGhlciB3ZSBzaG91bGQgcmVzZXQgc2Nyb2xsIG9uIGNvbXBsZXRpb25cblxuICAgIHNhdmVTY3JvbGxQb3NpdGlvbihzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlcyk7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IChvcHRzICYmIG9wdHMucHJldmVudFNjcm9sbFJlc2V0KSA9PT0gdHJ1ZTtcbiAgICBsZXQgcm91dGVzVG9Vc2UgPSBpbkZsaWdodERhdGFSb3V0ZXMgfHwgZGF0YVJvdXRlcztcbiAgICBsZXQgbG9hZGluZ05hdmlnYXRpb24gPSBvcHRzICYmIG9wdHMub3ZlcnJpZGVOYXZpZ2F0aW9uO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIGxvY2F0aW9uLCBpbml0LmJhc2VuYW1lKTsgLy8gU2hvcnQgY2lyY3VpdCB3aXRoIGEgNDA0IG9uIHRoZSByb290IGVycm9yIGJvdW5kYXJ5IGlmIHdlIG1hdGNoIG5vdGhpbmdcblxuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgcm91dGVcbiAgICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlc1RvVXNlKTsgLy8gQ2FuY2VsIGFsbCBwZW5kaW5nIGRlZmVycmVkIG9uIDQwNHMgc2luY2Ugd2UgZG9uJ3Qga2VlcCBhbnkgcm91dGVzXG5cbiAgICAgIGNhbmNlbEFjdGl2ZURlZmVycmVkcygpO1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCB7XG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gU2hvcnQgY2lyY3VpdCBpZiBpdCdzIG9ubHkgYSBoYXNoIGNoYW5nZSBhbmQgbm90IGEgbXV0YXRpb24gc3VibWlzc2lvblxuICAgIC8vIEZvciBleGFtcGxlLCBvbiAvcGFnZSNoYXNoIGFuZCBzdWJtaXQgYSA8Rm9ybSBtZXRob2Q9XCJwb3N0XCI+IHdoaWNoIHdpbGxcbiAgICAvLyBkZWZhdWx0IHRvIGEgbmF2aWdhdGlvbiB0byAvcGFnZVxuXG5cbiAgICBpZiAoaXNIYXNoQ2hhbmdlT25seShzdGF0ZS5sb2NhdGlvbiwgbG9jYXRpb24pICYmICEob3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChvcHRzLnN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpKSB7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlc1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBDcmVhdGUgYSBjb250cm9sbGVyL1JlcXVlc3QgZm9yIHRoaXMgbmF2aWdhdGlvblxuXG5cbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IHJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIGxvY2F0aW9uLCBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuc2lnbmFsLCBvcHRzICYmIG9wdHMuc3VibWlzc2lvbik7XG4gICAgbGV0IHBlbmRpbmdBY3Rpb25EYXRhO1xuICAgIGxldCBwZW5kaW5nRXJyb3I7XG5cbiAgICBpZiAob3B0cyAmJiBvcHRzLnBlbmRpbmdFcnJvcikge1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBlbmRpbmdFcnJvciwgaXQgbWVhbnMgdGhlIHVzZXIgYXR0ZW1wdGVkIGEgR0VUIHN1Ym1pc3Npb25cbiAgICAgIC8vIHdpdGggYmluYXJ5IEZvcm1EYXRhIHNvIGFzc2lnbiBoZXJlIGFuZCBza2lwIHRvIGhhbmRsZUxvYWRlcnMuICBUaGF0XG4gICAgICAvLyB3YXkgd2UgaGFuZGxlIGNhbGxpbmcgbG9hZGVycyBhYm92ZSB0aGUgYm91bmRhcnkgZXRjLiAgSXQncyBub3QgcmVhbGx5XG4gICAgICAvLyBkaWZmZXJlbnQgZnJvbSBhbiBhY3Rpb25FcnJvciBpbiB0aGF0IHNlbnNlLlxuICAgICAgcGVuZGluZ0Vycm9yID0ge1xuICAgICAgICBbZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzKS5yb3V0ZS5pZF06IG9wdHMucGVuZGluZ0Vycm9yXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAob3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChvcHRzLnN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICAgIC8vIENhbGwgYWN0aW9uIGlmIHdlIHJlY2VpdmVkIGFuIGFjdGlvbiBzdWJtaXNzaW9uXG4gICAgICBsZXQgYWN0aW9uT3V0cHV0ID0gYXdhaXQgaGFuZGxlQWN0aW9uKHJlcXVlc3QsIGxvY2F0aW9uLCBvcHRzLnN1Ym1pc3Npb24sIG1hdGNoZXMsIHtcbiAgICAgICAgcmVwbGFjZTogb3B0cy5yZXBsYWNlXG4gICAgICB9KTtcblxuICAgICAgaWYgKGFjdGlvbk91dHB1dC5zaG9ydENpcmN1aXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHBlbmRpbmdBY3Rpb25EYXRhID0gYWN0aW9uT3V0cHV0LnBlbmRpbmdBY3Rpb25EYXRhO1xuICAgICAgcGVuZGluZ0Vycm9yID0gYWN0aW9uT3V0cHV0LnBlbmRpbmdBY3Rpb25FcnJvcjtcblxuICAgICAgbGV0IG5hdmlnYXRpb24gPSBfZXh0ZW5kcyh7XG4gICAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgICAgbG9jYXRpb25cbiAgICAgIH0sIG9wdHMuc3VibWlzc2lvbik7XG5cbiAgICAgIGxvYWRpbmdOYXZpZ2F0aW9uID0gbmF2aWdhdGlvbjsgLy8gQ3JlYXRlIGEgR0VUIHJlcXVlc3QgZm9yIHRoZSBsb2FkZXJzXG5cbiAgICAgIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChyZXF1ZXN0LnVybCwge1xuICAgICAgICBzaWduYWw6IHJlcXVlc3Quc2lnbmFsXG4gICAgICB9KTtcbiAgICB9IC8vIENhbGwgbG9hZGVyc1xuXG5cbiAgICBsZXQge1xuICAgICAgc2hvcnRDaXJjdWl0ZWQsXG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IGF3YWl0IGhhbmRsZUxvYWRlcnMocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIGxvYWRpbmdOYXZpZ2F0aW9uLCBvcHRzICYmIG9wdHMuc3VibWlzc2lvbiwgb3B0cyAmJiBvcHRzLnJlcGxhY2UsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IpO1xuXG4gICAgaWYgKHNob3J0Q2lyY3VpdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBDbGVhbiB1cCBub3cgdGhhdCB0aGUgYWN0aW9uL2xvYWRlcnMgaGF2ZSBjb21wbGV0ZWQuICBEb24ndCBjbGVhbiB1cCBpZlxuICAgIC8vIHdlIHNob3J0IGNpcmN1aXRlZCBiZWNhdXNlIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciB3aWxsIGhhdmUgYWxyZWFkeVxuICAgIC8vIGJlZW4gYXNzaWduZWQgdG8gYSBuZXcgY29udHJvbGxlciBmb3IgdGhlIG5leHQgbmF2aWdhdGlvblxuXG5cbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwgX2V4dGVuZHMoe1xuICAgICAgbWF0Y2hlc1xuICAgIH0sIHBlbmRpbmdBY3Rpb25EYXRhID8ge1xuICAgICAgYWN0aW9uRGF0YTogcGVuZGluZ0FjdGlvbkRhdGFcbiAgICB9IDoge30sIHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9KSk7XG4gIH0gLy8gQ2FsbCB0aGUgYWN0aW9uIG1hdGNoZWQgYnkgdGhlIGxlYWYgcm91dGUgZm9yIHRoaXMgbmF2aWdhdGlvbiBhbmQgaGFuZGxlXG4gIC8vIHJlZGlyZWN0cy9lcnJvcnNcblxuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUFjdGlvbihyZXF1ZXN0LCBsb2NhdGlvbiwgc3VibWlzc2lvbiwgbWF0Y2hlcywgb3B0cykge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7IC8vIFB1dCB1cyBpbiBhIHN1Ym1pdHRpbmcgc3RhdGVcblxuICAgIGxldCBuYXZpZ2F0aW9uID0gX2V4dGVuZHMoe1xuICAgICAgc3RhdGU6IFwic3VibWl0dGluZ1wiLFxuICAgICAgbG9jYXRpb25cbiAgICB9LCBzdWJtaXNzaW9uKTtcblxuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIG5hdmlnYXRpb25cbiAgICB9KTsgLy8gQ2FsbCBvdXIgYWN0aW9uIGFuZCBnZXQgdGhlIHJlc3VsdFxuXG4gICAgbGV0IHJlc3VsdDtcbiAgICBsZXQgYWN0aW9uTWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbik7XG5cbiAgICBpZiAoIWFjdGlvbk1hdGNoLnJvdXRlLmFjdGlvbikge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgICByb3V0ZUlkOiBhY3Rpb25NYXRjaC5yb3V0ZS5pZFxuICAgICAgICB9KVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFwiYWN0aW9uXCIsIHJlcXVlc3QsIGFjdGlvbk1hdGNoLCBtYXRjaGVzLCByb3V0ZXIuYmFzZW5hbWUpO1xuXG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IHJlcGxhY2U7XG5cbiAgICAgIGlmIChvcHRzICYmIG9wdHMucmVwbGFjZSAhPSBudWxsKSB7XG4gICAgICAgIHJlcGxhY2UgPSBvcHRzLnJlcGxhY2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiB0aGUgdXNlciBkaWRuJ3QgZXhwbGljaXR5IGluZGljYXRlIHJlcGxhY2UgYmVoYXZpb3IsIHJlcGxhY2UgaWZcbiAgICAgICAgLy8gd2UgcmVkaXJlY3RlZCB0byB0aGUgZXhhY3Qgc2FtZSBsb2NhdGlvbiB3ZSdyZSBjdXJyZW50bHkgYXQgdG8gYXZvaWRcbiAgICAgICAgLy8gZG91YmxlIGJhY2stYnV0dG9uc1xuICAgICAgICByZXBsYWNlID0gcmVzdWx0LmxvY2F0aW9uID09PSBzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSArIHN0YXRlLmxvY2F0aW9uLnNlYXJjaDtcbiAgICAgIH1cblxuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlc3VsdCwge1xuICAgICAgICBzdWJtaXNzaW9uLFxuICAgICAgICByZXBsYWNlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTsgLy8gQnkgZGVmYXVsdCwgYWxsIHN1Ym1pc3Npb25zIGFyZSBSRVBMQUNFIG5hdmlnYXRpb25zLCBidXQgaWYgdGhlXG4gICAgICAvLyBhY3Rpb24gdGhyZXcgYW4gZXJyb3IgdGhhdCdsbCBiZSByZW5kZXJlZCBpbiBhbiBlcnJvckVsZW1lbnQsIHdlIGZhbGxcbiAgICAgIC8vIGJhY2sgdG8gUFVTSCBzbyB0aGF0IHRoZSB1c2VyIGNhbiB1c2UgdGhlIGJhY2sgYnV0dG9uIHRvIGdldCBiYWNrIHRvXG4gICAgICAvLyB0aGUgcHJlLXN1Ym1pc3Npb24gZm9ybSBsb2NhdGlvbiB0byB0cnkgYWdhaW5cblxuICAgICAgaWYgKChvcHRzICYmIG9wdHMucmVwbGFjZSkgIT09IHRydWUpIHtcbiAgICAgICAgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAvLyBTZW5kIGJhY2sgYW4gZW1wdHkgb2JqZWN0IHdlIGNhbiB1c2UgdG8gY2xlYXIgb3V0IGFueSBwcmlvciBhY3Rpb25EYXRhXG4gICAgICAgIHBlbmRpbmdBY3Rpb25EYXRhOiB7fSxcbiAgICAgICAgcGVuZGluZ0FjdGlvbkVycm9yOiB7XG4gICAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZXJyb3JcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICB0eXBlOiBcImRlZmVyLWFjdGlvblwiXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGVuZGluZ0FjdGlvbkRhdGE6IHtcbiAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmRhdGFcbiAgICAgIH1cbiAgICB9O1xuICB9IC8vIENhbGwgYWxsIGFwcGxpY2FibGUgbG9hZGVycyBmb3IgdGhlIGdpdmVuIG1hdGNoZXMsIGhhbmRsaW5nIHJlZGlyZWN0cyxcbiAgLy8gZXJyb3JzLCBldGMuXG5cblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVMb2FkZXJzKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCBvdmVycmlkZU5hdmlnYXRpb24sIHN1Ym1pc3Npb24sIHJlcGxhY2UsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IpIHtcbiAgICAvLyBGaWd1cmUgb3V0IHRoZSByaWdodCBuYXZpZ2F0aW9uIHdlIHdhbnQgdG8gdXNlIGZvciBkYXRhIGxvYWRpbmdcbiAgICBsZXQgbG9hZGluZ05hdmlnYXRpb24gPSBvdmVycmlkZU5hdmlnYXRpb247XG5cbiAgICBpZiAoIWxvYWRpbmdOYXZpZ2F0aW9uKSB7XG4gICAgICBsZXQgbmF2aWdhdGlvbiA9IF9leHRlbmRzKHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWRcbiAgICAgIH0sIHN1Ym1pc3Npb24pO1xuXG4gICAgICBsb2FkaW5nTmF2aWdhdGlvbiA9IG5hdmlnYXRpb247XG4gICAgfSAvLyBJZiB0aGlzIHdhcyBhIHJlZGlyZWN0IGZyb20gYW4gYWN0aW9uIHdlIGRvbid0IGhhdmUgYSBcInN1Ym1pc3Npb25cIiBidXRcbiAgICAvLyB3ZSBoYXZlIGl0IG9uIHRoZSBsb2FkaW5nIG5hdmlnYXRpb24gc28gdXNlIHRoYXQgaWYgYXZhaWxhYmxlXG5cblxuICAgIGxldCBhY3RpdmVTdWJtaXNzaW9uID0gc3VibWlzc2lvbiA/IHN1Ym1pc3Npb24gOiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtTWV0aG9kICYmIGxvYWRpbmdOYXZpZ2F0aW9uLmZvcm1BY3Rpb24gJiYgbG9hZGluZ05hdmlnYXRpb24uZm9ybURhdGEgJiYgbG9hZGluZ05hdmlnYXRpb24uZm9ybUVuY1R5cGUgPyB7XG4gICAgICBmb3JtTWV0aG9kOiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbjogbG9hZGluZ05hdmlnYXRpb24uZm9ybUFjdGlvbixcbiAgICAgIGZvcm1EYXRhOiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtRGF0YSxcbiAgICAgIGZvcm1FbmNUeXBlOiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtRW5jVHlwZVxuICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IFttYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVyc10gPSBnZXRNYXRjaGVzVG9Mb2FkKGluaXQuaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIGFjdGl2ZVN1Ym1pc3Npb24sIGxvY2F0aW9uLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcywgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLCBmZXRjaExvYWRNYXRjaGVzLCByb3V0ZXNUb1VzZSwgaW5pdC5iYXNlbmFtZSwgcGVuZGluZ0FjdGlvbkRhdGEsIHBlbmRpbmdFcnJvcik7IC8vIENhbmNlbCBwZW5kaW5nIGRlZmVycmVkcyBmb3Igbm8tbG9uZ2VyLW1hdGNoZWQgcm91dGVzIG9yIHJvdXRlcyB3ZSdyZVxuICAgIC8vIGFib3V0IHRvIHJlbG9hZC4gIE5vdGUgdGhhdCBpZiB0aGlzIGlzIGFuIGFjdGlvbiByZWxvYWQgd2Ugd291bGQgaGF2ZVxuICAgIC8vIGFscmVhZHkgY2FuY2VsbGVkIGFsbCBwZW5kaW5nIGRlZmVycmVkcyBzbyB0aGlzIHdvdWxkIGJlIGEgbm8tb3BcblxuICAgIGNhbmNlbEFjdGl2ZURlZmVycmVkcyhyb3V0ZUlkID0+ICEobWF0Y2hlcyAmJiBtYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSkgfHwgbWF0Y2hlc1RvTG9hZCAmJiBtYXRjaGVzVG9Mb2FkLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSk7IC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1blxuXG4gICAgaWYgKG1hdGNoZXNUb0xvYWQubGVuZ3RoID09PSAwICYmIHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBfZXh0ZW5kcyh7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICAvLyBDb21taXQgcGVuZGluZyBlcnJvciBpZiB3ZSdyZSBzaG9ydCBjaXJjdWl0aW5nXG4gICAgICAgIGVycm9yczogcGVuZGluZ0Vycm9yIHx8IG51bGxcbiAgICAgIH0sIHBlbmRpbmdBY3Rpb25EYXRhID8ge1xuICAgICAgICBhY3Rpb25EYXRhOiBwZW5kaW5nQWN0aW9uRGF0YVxuICAgICAgfSA6IHt9KSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9IC8vIElmIHRoaXMgaXMgYW4gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb24sIHdlIHJlbWFpbiBpbiBvdXIgY3VycmVudCBpZGxlXG4gICAgLy8gc3RhdGUuICBJZiBub3QsIHdlIG5lZWQgdG8gc3dpdGNoIHRvIG91ciBsb2FkaW5nIHN0YXRlIGFuZCBsb2FkIGRhdGEsXG4gICAgLy8gcHJlc2VydmluZyBhbnkgbmV3IGFjdGlvbiBkYXRhIG9yIGV4aXN0aW5nIGFjdGlvbiBkYXRhIChpbiB0aGUgY2FzZSBvZlxuICAgIC8vIGEgcmV2YWxpZGF0aW9uIGludGVycnVwdGluZyBhbiBhY3Rpb25SZWxvYWQpXG5cblxuICAgIGlmICghaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQocmYua2V5KTtcbiAgICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSB7XG4gICAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICAgIGRhdGE6IGZldGNoZXIgJiYgZmV0Y2hlci5kYXRhLFxuICAgICAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHN0YXRlLmZldGNoZXJzLnNldChyZi5rZXksIHJldmFsaWRhdGluZ0ZldGNoZXIpO1xuICAgICAgfSk7XG4gICAgICBsZXQgYWN0aW9uRGF0YSA9IHBlbmRpbmdBY3Rpb25EYXRhIHx8IHN0YXRlLmFjdGlvbkRhdGE7XG4gICAgICB1cGRhdGVTdGF0ZShfZXh0ZW5kcyh7XG4gICAgICAgIG5hdmlnYXRpb246IGxvYWRpbmdOYXZpZ2F0aW9uXG4gICAgICB9LCBhY3Rpb25EYXRhID8gT2JqZWN0LmtleXMoYWN0aW9uRGF0YSkubGVuZ3RoID09PSAwID8ge1xuICAgICAgICBhY3Rpb25EYXRhOiBudWxsXG4gICAgICB9IDoge1xuICAgICAgICBhY3Rpb25EYXRhXG4gICAgICB9IDoge30sIHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA+IDAgPyB7XG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSA6IHt9KSk7XG4gICAgfVxuXG4gICAgcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IGZldGNoQ29udHJvbGxlcnMuc2V0KHJmLmtleSwgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyKSk7XG4gICAgbGV0IHtcbiAgICAgIHJlc3VsdHMsXG4gICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgZmV0Y2hlclJlc3VsdHNcbiAgICB9ID0gYXdhaXQgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKHN0YXRlLm1hdGNoZXMsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCByZXF1ZXN0KTtcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9IC8vIENsZWFuIHVwIF9hZnRlcl8gbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmIHdlIHNob3J0XG4gICAgLy8gY2lyY3VpdGVkIGJlY2F1c2UgZmV0Y2hDb250cm9sbGVycyB3b3VsZCBoYXZlIGJlZW4gYWJvcnRlZCBhbmRcbiAgICAvLyByZWFzc2lnbmVkIHRvIG5ldyBjb250cm9sbGVycyBmb3IgdGhlIG5leHQgbmF2aWdhdGlvblxuXG5cbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKHJmLmtleSkpOyAvLyBJZiBhbnkgbG9hZGVycyByZXR1cm5lZCBhIHJlZGlyZWN0IFJlc3BvbnNlLCBzdGFydCBhIG5ldyBSRVBMQUNFIG5hdmlnYXRpb25cblxuICAgIGxldCByZWRpcmVjdCA9IGZpbmRSZWRpcmVjdChyZXN1bHRzKTtcblxuICAgIGlmIChyZWRpcmVjdCkge1xuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0LCB7XG4gICAgICAgIHJlcGxhY2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfSAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuXG5cbiAgICBsZXQge1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0gPSBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgbG9hZGVyUmVzdWx0cywgcGVuZGluZ0Vycm9yLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcyk7IC8vIFdpcmUgdXAgc3Vic2NyaWJlcnMgdG8gdXBkYXRlIGxvYWRlckRhdGEgYXMgcHJvbWlzZXMgc2V0dGxlXG5cbiAgICBhY3RpdmVEZWZlcnJlZHMuZm9yRWFjaCgoZGVmZXJyZWREYXRhLCByb3V0ZUlkKSA9PiB7XG4gICAgICBkZWZlcnJlZERhdGEuc3Vic2NyaWJlKGFib3J0ZWQgPT4ge1xuICAgICAgICAvLyBOb3RlOiBObyBuZWVkIHRvIHVwZGF0ZVN0YXRlIGhlcmUgc2luY2UgdGhlIFRyYWNrZWRQcm9taXNlIG9uXG4gICAgICAgIC8vIGxvYWRlckRhdGEgaXMgc3RhYmxlIGFjcm9zcyByZXNvbHZlL3JlamVjdFxuICAgICAgICAvLyBSZW1vdmUgdGhpcyBpbnN0YW5jZSBpZiB3ZSB3ZXJlIGFib3J0ZWQgb3IgaWYgcHJvbWlzZXMgaGF2ZSBzZXR0bGVkXG4gICAgICAgIGlmIChhYm9ydGVkIHx8IGRlZmVycmVkRGF0YS5kb25lKSB7XG4gICAgICAgICAgYWN0aXZlRGVmZXJyZWRzLmRlbGV0ZShyb3V0ZUlkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpO1xuICAgIGxldCBkaWRBYm9ydEZldGNoTG9hZHMgPSBhYm9ydFN0YWxlRmV0Y2hMb2FkcyhwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9LCBkaWRBYm9ydEZldGNoTG9hZHMgfHwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID4gMCA/IHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0gOiB7fSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRGZXRjaGVyKGtleSkge1xuICAgIHJldHVybiBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KSB8fCBJRExFX0ZFVENIRVI7XG4gIH0gLy8gVHJpZ2dlciBhIGZldGNoZXIgbG9hZC9zdWJtaXQgZm9yIHRoZSBnaXZlbiBmZXRjaGVyIGtleVxuXG5cbiAgZnVuY3Rpb24gZmV0Y2goa2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKSB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyb3V0ZXIuZmV0Y2goKSB3YXMgY2FsbGVkIGR1cmluZyB0aGUgc2VydmVyIHJlbmRlciwgYnV0IGl0IHNob3VsZG4ndCBiZS4gXCIgKyBcIllvdSBhcmUgbGlrZWx5IGNhbGxpbmcgYSB1c2VGZXRjaGVyKCkgbWV0aG9kIGluIHRoZSBib2R5IG9mIHlvdXIgY29tcG9uZW50LiBcIiArIFwiVHJ5IG1vdmluZyBpdCB0byBhIHVzZUVmZmVjdCBvciBhIGNhbGxiYWNrLlwiKTtcbiAgICB9XG5cbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSkgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgaHJlZiwgaW5pdC5iYXNlbmFtZSk7XG5cbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBocmVmXG4gICAgICB9KSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uXG4gICAgfSA9IG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyhocmVmLCBvcHRzLCB0cnVlKTtcbiAgICBsZXQgbWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBwYXRoKTtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gKG9wdHMgJiYgb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQpID09PSB0cnVlO1xuXG4gICAgaWYgKHN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICBoYW5kbGVGZXRjaGVyQWN0aW9uKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIHN1Ym1pc3Npb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gU3RvcmUgb2ZmIHRoZSBtYXRjaCBzbyB3ZSBjYW4gY2FsbCBpdCdzIHNob3VsZFJldmFsaWRhdGUgb24gc3Vic2VxdWVudFxuICAgIC8vIHJldmFsaWRhdGlvbnNcblxuXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5zZXQoa2V5LCB7XG4gICAgICByb3V0ZUlkLFxuICAgICAgcGF0aFxuICAgIH0pO1xuICAgIGhhbmRsZUZldGNoZXJMb2FkZXIoa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgc3VibWlzc2lvbik7XG4gIH0gLy8gQ2FsbCB0aGUgYWN0aW9uIGZvciB0aGUgbWF0Y2hlZCBmZXRjaGVyLnN1Ym1pdCgpLCBhbmQgdGhlbiBoYW5kbGUgcmVkaXJlY3RzLFxuICAvLyBlcnJvcnMsIGFuZCByZXZhbGlkYXRpb25cblxuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUZldGNoZXJBY3Rpb24oa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgcmVxdWVzdE1hdGNoZXMsIHN1Ym1pc3Npb24pIHtcbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuICAgIGZldGNoTG9hZE1hdGNoZXMuZGVsZXRlKGtleSk7XG5cbiAgICBpZiAoIW1hdGNoLnJvdXRlLmFjdGlvbikge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBwYXRoLFxuICAgICAgICByb3V0ZUlkOiByb3V0ZUlkXG4gICAgICB9KTtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFB1dCB0aGlzIGZldGNoZXIgaW50byBpdCdzIHN1Ym1pdHRpbmcgc3RhdGVcblxuXG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuXG4gICAgbGV0IGZldGNoZXIgPSBfZXh0ZW5kcyh7XG4gICAgICBzdGF0ZTogXCJzdWJtaXR0aW5nXCJcbiAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICBkYXRhOiBleGlzdGluZ0ZldGNoZXIgJiYgZXhpc3RpbmdGZXRjaGVyLmRhdGEsXG4gICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgIH0pO1xuXG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7IC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIGZldGNoZXJcblxuICAgIGxldCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IGZldGNoUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgcGF0aCwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCwgc3VibWlzc2lvbik7XG4gICAgZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBhYm9ydENvbnRyb2xsZXIpO1xuICAgIGxldCBhY3Rpb25SZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgZmV0Y2hSZXF1ZXN0LCBtYXRjaCwgcmVxdWVzdE1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSk7XG5cbiAgICBpZiAoZmV0Y2hSZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAvLyBXZSBjYW4gZGVsZXRlIHRoaXMgc28gbG9uZyBhcyB3ZSB3ZXJlbid0IGFib3J0ZWQgYnkgb3Ugb3VyIG93biBmZXRjaGVyXG4gICAgICAvLyByZS1zdWJtaXQgd2hpY2ggd291bGQgaGF2ZSBwdXQgX25ld18gY29udHJvbGxlciBpcyBpbiBmZXRjaENvbnRyb2xsZXJzXG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoa2V5KTtcblxuICAgICAgbGV0IGxvYWRpbmdGZXRjaGVyID0gX2V4dGVuZHMoe1xuICAgICAgICBzdGF0ZTogXCJsb2FkaW5nXCJcbiAgICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgICAgZGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGxvYWRpbmdGZXRjaGVyKTtcbiAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgYWN0aW9uUmVzdWx0LCB7XG4gICAgICAgIGlzRmV0Y2hBY3Rpb25SZWRpcmVjdDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSAvLyBQcm9jZXNzIGFueSBub24tcmVkaXJlY3QgZXJyb3JzIHRocm93blxuXG5cbiAgICBpZiAoaXNFcnJvclJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBhY3Rpb25SZXN1bHQuZXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIHR5cGU6IFwiZGVmZXItYWN0aW9uXCJcbiAgICAgIH0pO1xuICAgIH0gLy8gU3RhcnQgdGhlIGRhdGEgbG9hZCBmb3IgY3VycmVudCBtYXRjaGVzLCBvciB0aGUgbmV4dCBsb2NhdGlvbiBpZiB3ZSdyZVxuICAgIC8vIGluIHRoZSBtaWRkbGUgb2YgYSBuYXZpZ2F0aW9uXG5cblxuICAgIGxldCBuZXh0TG9jYXRpb24gPSBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uIHx8IHN0YXRlLmxvY2F0aW9uO1xuICAgIGxldCByZXZhbGlkYXRpb25SZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBuZXh0TG9jYXRpb24sIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBtYXRjaGVzID0gc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSAhPT0gXCJpZGxlXCIgPyBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwgaW5pdC5iYXNlbmFtZSkgOiBzdGF0ZS5tYXRjaGVzO1xuICAgIGludmFyaWFudChtYXRjaGVzLCBcIkRpZG4ndCBmaW5kIGFueSBtYXRjaGVzIGFmdGVyIGZldGNoZXIgYWN0aW9uXCIpO1xuICAgIGxldCBsb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcbiAgICBmZXRjaFJlbG9hZElkcy5zZXQoa2V5LCBsb2FkSWQpO1xuXG4gICAgbGV0IGxvYWRGZXRjaGVyID0gX2V4dGVuZHMoe1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgZGF0YTogYWN0aW9uUmVzdWx0LmRhdGFcbiAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgIH0pO1xuXG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgbG9hZEZldGNoZXIpO1xuICAgIGxldCBbbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdID0gZ2V0TWF0Y2hlc1RvTG9hZChpbml0Lmhpc3RvcnksIHN0YXRlLCBtYXRjaGVzLCBzdWJtaXNzaW9uLCBuZXh0TG9jYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGZldGNoTG9hZE1hdGNoZXMsIHJvdXRlc1RvVXNlLCBpbml0LmJhc2VuYW1lLCB7XG4gICAgICBbbWF0Y2gucm91dGUuaWRdOiBhY3Rpb25SZXN1bHQuZGF0YVxuICAgIH0sIHVuZGVmaW5lZCAvLyBObyBuZWVkIHRvIHNlbmQgdGhyb3VnaCBlcnJvcnMgc2luY2Ugd2Ugc2hvcnQgY2lyY3VpdCBhYm92ZVxuICAgICk7IC8vIFB1dCBhbGwgcmV2YWxpZGF0aW5nIGZldGNoZXJzIGludG8gdGhlIGxvYWRpbmcgc3RhdGUsIGV4Y2VwdCBmb3IgdGhlXG4gICAgLy8gY3VycmVudCBmZXRjaGVyIHdoaWNoIHdlIHdhbnQgdG8ga2VlcCBpbiBpdCdzIGN1cnJlbnQgbG9hZGluZyBzdGF0ZSB3aGljaFxuICAgIC8vIGNvbnRhaW5zIGl0J3MgYWN0aW9uIHN1Ym1pc3Npb24gaW5mbyArIGFjdGlvbiBkYXRhXG5cbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5maWx0ZXIocmYgPT4gcmYua2V5ICE9PSBrZXkpLmZvckVhY2gocmYgPT4ge1xuICAgICAgbGV0IHN0YWxlS2V5ID0gcmYua2V5O1xuICAgICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChzdGFsZUtleSk7XG4gICAgICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlciA9IHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICBkYXRhOiBleGlzdGluZ0ZldGNoZXIgJiYgZXhpc3RpbmdGZXRjaGVyLmRhdGEsXG4gICAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChzdGFsZUtleSwgcmV2YWxpZGF0aW5nRmV0Y2hlcik7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLnNldChzdGFsZUtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICB9KTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgICBsZXQge1xuICAgICAgcmVzdWx0cyxcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH0gPSBhd2FpdCBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoc3RhdGUubWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIHJldmFsaWRhdGlvblJlcXVlc3QpO1xuXG4gICAgaWYgKGFib3J0Q29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyID0+IGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKHIua2V5KSk7XG4gICAgbGV0IHJlZGlyZWN0ID0gZmluZFJlZGlyZWN0KHJlc3VsdHMpO1xuXG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICByZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0KTtcbiAgICB9IC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG5cblxuICAgIGxldCB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBzdGF0ZS5tYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCB1bmRlZmluZWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKTtcbiAgICBsZXQgZG9uZUZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJpZGxlXCIsXG4gICAgICBkYXRhOiBhY3Rpb25SZXN1bHQuZGF0YSxcbiAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgXCIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgXCI6IHRydWVcbiAgICB9O1xuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICBsZXQgZGlkQWJvcnRGZXRjaExvYWRzID0gYWJvcnRTdGFsZUZldGNoTG9hZHMobG9hZElkKTsgLy8gSWYgd2UgYXJlIGN1cnJlbnRseSBpbiBhIG5hdmlnYXRpb24gbG9hZGluZyBzdGF0ZSBhbmQgdGhpcyBmZXRjaGVyIGlzXG4gICAgLy8gbW9yZSByZWNlbnQgdGhhbiB0aGUgbmF2aWdhdGlvbiwgd2Ugd2FudCB0aGUgbmV3ZXIgZGF0YSBzbyBhYm9ydCB0aGVcbiAgICAvLyBuYXZpZ2F0aW9uIGFuZCBjb21wbGV0ZSBpdCB3aXRoIHRoZSBmZXRjaGVyIGRhdGFcblxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJiBsb2FkSWQgPiBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCkge1xuICAgICAgaW52YXJpYW50KHBlbmRpbmdBY3Rpb24sIFwiRXhwZWN0ZWQgcGVuZGluZyBhY3Rpb25cIik7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24oc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhLFxuICAgICAgICBlcnJvcnMsXG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG90aGVyd2lzZSBqdXN0IHVwZGF0ZSB3aXRoIHRoZSBmZXRjaGVyIGRhdGEsIHByZXNlcnZpbmcgYW55IGV4aXN0aW5nXG4gICAgICAvLyBsb2FkZXJEYXRhIGZvciBsb2FkZXJzIHRoYXQgZGlkIG5vdCBuZWVkIHRvIHJlbG9hZC4gIFdlIGhhdmUgdG9cbiAgICAgIC8vIG1hbnVhbGx5IG1lcmdlIGhlcmUgc2luY2Ugd2UgYXJlbid0IGdvaW5nIHRocm91Z2ggY29tcGxldGVOYXZpZ2F0aW9uXG4gICAgICB1cGRhdGVTdGF0ZShfZXh0ZW5kcyh7XG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgbG9hZGVyRGF0YTogbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIGxvYWRlckRhdGEsIG1hdGNoZXMsIGVycm9ycylcbiAgICAgIH0sIGRpZEFib3J0RmV0Y2hMb2FkcyA/IHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9IDoge30pKTtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH0gLy8gQ2FsbCB0aGUgbWF0Y2hlZCBsb2FkZXIgZm9yIGZldGNoZXIubG9hZCgpLCBoYW5kbGluZyByZWRpcmVjdHMsIGVycm9ycywgZXRjLlxuXG5cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlRmV0Y2hlckxvYWRlcihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzLCBzdWJtaXNzaW9uKSB7XG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpOyAvLyBQdXQgdGhpcyBmZXRjaGVyIGludG8gaXQncyBsb2FkaW5nIHN0YXRlXG5cbiAgICBsZXQgbG9hZGluZ0ZldGNoZXIgPSBfZXh0ZW5kcyh7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZFxuICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgIGRhdGE6IGV4aXN0aW5nRmV0Y2hlciAmJiBleGlzdGluZ0ZldGNoZXIuZGF0YSxcbiAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgfSk7XG5cbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkaW5nRmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7IC8vIENhbGwgdGhlIGxvYWRlciBmb3IgdGhpcyBmZXRjaGVyIHJvdXRlIG1hdGNoXG5cbiAgICBsZXQgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBmZXRjaFJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIHBhdGgsIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KGtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFwibG9hZGVyXCIsIGZldGNoUmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSk7IC8vIERlZmVycmVkIGlzbid0IHN1cHBvcnRlZCBmb3IgZmV0Y2hlciBsb2FkcywgYXdhaXQgZXZlcnl0aGluZyBhbmQgdHJlYXQgaXRcbiAgICAvLyBhcyBhIG5vcm1hbCBsb2FkLiAgcmVzb2x2ZURlZmVycmVkRGF0YSB3aWxsIHJldHVybiB1bmRlZmluZWQgaWYgdGhpc1xuICAgIC8vIGZldGNoZXIgZ2V0cyBhYm9ydGVkLCBzbyB3ZSBqdXN0IGxlYXZlIHJlc3VsdCB1bnRvdWNoZWQgYW5kIHNob3J0IGNpcmN1aXRcbiAgICAvLyBiZWxvdyBpZiB0aGF0IGhhcHBlbnNcblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdCA9IChhd2FpdCByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgZmV0Y2hSZXF1ZXN0LnNpZ25hbCwgdHJ1ZSkpIHx8IHJlc3VsdDtcbiAgICB9IC8vIFdlIGNhbiBkZWxldGUgdGhpcyBzbyBsb25nIGFzIHdlIHdlcmVuJ3QgYWJvcnRlZCBieSBvdSBvdXIgb3duIGZldGNoZXJcbiAgICAvLyByZS1sb2FkIHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuXG5cbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIH1cblxuICAgIGlmIChmZXRjaFJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElmIHRoZSBsb2FkZXIgdGhyZXcgYSByZWRpcmVjdCBSZXNwb25zZSwgc3RhcnQgYSBuZXcgUkVQTEFDRSBuYXZpZ2F0aW9uXG5cblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZXN1bHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gUHJvY2VzcyBhbnkgbm9uLXJlZGlyZWN0IGVycm9ycyB0aHJvd25cblxuXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KHN0YXRlLm1hdGNoZXMsIHJvdXRlSWQpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7IC8vIFRPRE86IEluIHJlbWl4LCB0aGlzIHdvdWxkIHJlc2V0IHRvIElETEVfTkFWSUdBVElPTiBpZiBpdCB3YXMgYSBjYXRjaCAtXG4gICAgICAvLyBkbyB3ZSBuZWVkIHRvIGJlaGF2ZSBhbnkgZGlmZmVyZW50bHkgd2l0aCBvdXIgbm9uLXJlZGlyZWN0IGVycm9ycz9cbiAgICAgIC8vIFdoYXQgaWYgaXQgd2FzIGEgbm9uLXJlZGlyZWN0IFJlc3BvbnNlP1xuXG4gICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKSxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW52YXJpYW50KCFpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCksIFwiVW5oYW5kbGVkIGZldGNoZXIgZGVmZXJyZWQgZGF0YVwiKTsgLy8gUHV0IHRoZSBmZXRjaGVyIGJhY2sgaW50byBhbiBpZGxlIHN0YXRlXG5cbiAgICBsZXQgZG9uZUZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJpZGxlXCIsXG4gICAgICBkYXRhOiByZXN1bHQuZGF0YSxcbiAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgXCIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgXCI6IHRydWVcbiAgICB9O1xuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVXRpbGl0eSBmdW5jdGlvbiB0byBoYW5kbGUgcmVkaXJlY3RzIHJldHVybmVkIGZyb20gYW4gYWN0aW9uIG9yIGxvYWRlci5cbiAgICogTm9ybWFsbHksIGEgcmVkaXJlY3QgXCJyZXBsYWNlc1wiIHRoZSBuYXZpZ2F0aW9uIHRoYXQgdHJpZ2dlcmVkIGl0LiAgU28sIGZvclxuICAgKiBleGFtcGxlOlxuICAgKlxuICAgKiAgLSB1c2VyIGlzIG9uIC9hXG4gICAqICAtIHVzZXIgY2xpY2tzIGEgbGluayB0byAvYlxuICAgKiAgLSBsb2FkZXIgZm9yIC9iIHJlZGlyZWN0cyB0byAvY1xuICAgKlxuICAgKiBJbiBhIG5vbi1KUyBhcHAgdGhlIGJyb3dzZXIgd291bGQgdHJhY2sgdGhlIGluLWZsaWdodCBuYXZpZ2F0aW9uIHRvIC9iIGFuZFxuICAgKiB0aGVuIHJlcGxhY2UgaXQgd2l0aCAvYyB3aGVuIGl0IGVuY291bnRlcmVkIHRoZSByZWRpcmVjdCByZXNwb25zZS4gIEluXG4gICAqIHRoZSBlbmQgaXQgd291bGQgb25seSBldmVyIHVwZGF0ZSB0aGUgVVJMIGJhciB3aXRoIC9jLlxuICAgKlxuICAgKiBJbiBjbGllbnQtc2lkZSByb3V0aW5nIHVzaW5nIHB1c2hTdGF0ZS9yZXBsYWNlU3RhdGUsIHdlIGFpbSB0byBlbXVsYXRlXG4gICAqIHRoaXMgYmVoYXZpb3IgYW5kIHdlIGFsc28gZG8gbm90IHVwZGF0ZSBoaXN0b3J5IHVudGlsIHRoZSBlbmQgb2YgdGhlXG4gICAqIG5hdmlnYXRpb24gKGluY2x1ZGluZyBwcm9jZXNzZWQgcmVkaXJlY3RzKS4gIFRoaXMgbWVhbnMgdGhhdCB3ZSBuZXZlclxuICAgKiBhY3R1YWxseSB0b3VjaCBoaXN0b3J5IHVudGlsIHdlJ3ZlIHByb2Nlc3NlZCByZWRpcmVjdHMsIHNvIHdlIGp1c3QgdXNlXG4gICAqIHRoZSBoaXN0b3J5IGFjdGlvbiBmcm9tIHRoZSBvcmlnaW5hbCBuYXZpZ2F0aW9uIChQVVNIIG9yIFJFUExBQ0UpLlxuICAgKi9cblxuXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZWRpcmVjdCwgX3RlbXApIHtcbiAgICB2YXIgX3dpbmRvdztcblxuICAgIGxldCB7XG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgcmVwbGFjZSxcbiAgICAgIGlzRmV0Y2hBY3Rpb25SZWRpcmVjdFxuICAgIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcblxuICAgIGlmIChyZWRpcmVjdC5yZXZhbGlkYXRlKSB7XG4gICAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgcmVkaXJlY3RMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHN0YXRlLmxvY2F0aW9uLCByZWRpcmVjdC5sb2NhdGlvbiwgLy8gVE9ETzogVGhpcyBjYW4gYmUgcmVtb3ZlZCBvbmNlIHdlIGdldCByaWQgb2YgdXNlVHJhbnNpdGlvbiBpbiBSZW1peCB2MlxuICAgIF9leHRlbmRzKHtcbiAgICAgIF9pc1JlZGlyZWN0OiB0cnVlXG4gICAgfSwgaXNGZXRjaEFjdGlvblJlZGlyZWN0ID8ge1xuICAgICAgX2lzRmV0Y2hBY3Rpb25SZWRpcmVjdDogdHJ1ZVxuICAgIH0gOiB7fSkpO1xuICAgIGludmFyaWFudChyZWRpcmVjdExvY2F0aW9uLCBcIkV4cGVjdGVkIGEgbG9jYXRpb24gb24gdGhlIHJlZGlyZWN0IG5hdmlnYXRpb25cIik7IC8vIENoZWNrIGlmIHRoaXMgYW4gYWJzb2x1dGUgZXh0ZXJuYWwgcmVkaXJlY3QgdGhhdCBnb2VzIHRvIGEgbmV3IG9yaWdpblxuXG4gICAgaWYgKEFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KHJlZGlyZWN0LmxvY2F0aW9uKSAmJiBpc0Jyb3dzZXIgJiYgdHlwZW9mICgoX3dpbmRvdyA9IHdpbmRvdykgPT0gbnVsbCA/IHZvaWQgMCA6IF93aW5kb3cubG9jYXRpb24pICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBsZXQgdXJsID0gaW5pdC5oaXN0b3J5LmNyZWF0ZVVSTChyZWRpcmVjdC5sb2NhdGlvbik7XG4gICAgICBsZXQgaXNEaWZmZXJlbnRCYXNlbmFtZSA9IHN0cmlwQmFzZW5hbWUodXJsLnBhdGhuYW1lLCBpbml0LmJhc2VuYW1lIHx8IFwiL1wiKSA9PSBudWxsO1xuXG4gICAgICBpZiAod2luZG93LmxvY2F0aW9uLm9yaWdpbiAhPT0gdXJsLm9yaWdpbiB8fCBpc0RpZmZlcmVudEJhc2VuYW1lKSB7XG4gICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UocmVkaXJlY3QubG9jYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24ocmVkaXJlY3QubG9jYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gLy8gVGhlcmUncyBubyBuZWVkIHRvIGFib3J0IG9uIHJlZGlyZWN0cywgc2luY2Ugd2UgZG9uJ3QgZGV0ZWN0IHRoZVxuICAgIC8vIHJlZGlyZWN0IHVudGlsIHRoZSBhY3Rpb24vbG9hZGVycyBoYXZlIHNldHRsZWRcblxuXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICBsZXQgcmVkaXJlY3RIaXN0b3J5QWN0aW9uID0gcmVwbGFjZSA9PT0gdHJ1ZSA/IEFjdGlvbi5SZXBsYWNlIDogQWN0aW9uLlB1c2g7IC8vIFVzZSB0aGUgaW5jb21pbmcgc3VibWlzc2lvbiBpZiBwcm92aWRlZCwgZmFsbGJhY2sgb24gdGhlIGFjdGl2ZSBvbmUgaW5cbiAgICAvLyBzdGF0ZS5uYXZpZ2F0aW9uXG5cbiAgICBsZXQge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhXG4gICAgfSA9IHN0YXRlLm5hdmlnYXRpb247XG5cbiAgICBpZiAoIXN1Ym1pc3Npb24gJiYgZm9ybU1ldGhvZCAmJiBmb3JtQWN0aW9uICYmIGZvcm1EYXRhICYmIGZvcm1FbmNUeXBlKSB7XG4gICAgICBzdWJtaXNzaW9uID0ge1xuICAgICAgICBmb3JtTWV0aG9kLFxuICAgICAgICBmb3JtQWN0aW9uLFxuICAgICAgICBmb3JtRW5jVHlwZSxcbiAgICAgICAgZm9ybURhdGFcbiAgICAgIH07XG4gICAgfSAvLyBJZiB0aGlzIHdhcyBhIDMwNy8zMDggc3VibWlzc2lvbiB3ZSB3YW50IHRvIHByZXNlcnZlIHRoZSBIVFRQIG1ldGhvZCBhbmRcbiAgICAvLyByZS1zdWJtaXQgdGhlIEdFVC9QT1NUL1BVVC9QQVRDSC9ERUxFVEUgYXMgYSBzdWJtaXNzaW9uIG5hdmlnYXRpb24gdG8gdGhlXG4gICAgLy8gcmVkaXJlY3RlZCBsb2NhdGlvblxuXG5cbiAgICBpZiAocmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzLmhhcyhyZWRpcmVjdC5zdGF0dXMpICYmIHN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIHN1Ym1pc3Npb246IF9leHRlbmRzKHt9LCBzdWJtaXNzaW9uLCB7XG4gICAgICAgICAgZm9ybUFjdGlvbjogcmVkaXJlY3QubG9jYXRpb25cbiAgICAgICAgfSksXG4gICAgICAgIC8vIFByZXNlcnZlIHRoaXMgZmxhZyBhY3Jvc3MgcmVkaXJlY3RzXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSwgd2Uga2ljayBvZmYgYSBuZXcgbG9hZGluZyBuYXZpZ2F0aW9uLCBwcmVzZXJ2aW5nIHRoZVxuICAgICAgLy8gc3VibWlzc2lvbiBpbmZvIGZvciB0aGUgZHVyYXRpb24gb2YgdGhpcyBuYXZpZ2F0aW9uXG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbjoge1xuICAgICAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgICAgICBsb2NhdGlvbjogcmVkaXJlY3RMb2NhdGlvbixcbiAgICAgICAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uID8gc3VibWlzc2lvbi5mb3JtTWV0aG9kIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24gPyBzdWJtaXNzaW9uLmZvcm1BY3Rpb24gOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24gPyBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uID8gc3VibWlzc2lvbi5mb3JtRGF0YSA6IHVuZGVmaW5lZFxuICAgICAgICB9LFxuICAgICAgICAvLyBQcmVzZXJ2ZSB0aGlzIGZsYWcgYWNyb3NzIHJlZGlyZWN0c1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YShjdXJyZW50TWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgZmV0Y2hlcnNUb0xvYWQsIHJlcXVlc3QpIHtcbiAgICAvLyBDYWxsIGFsbCBuYXZpZ2F0aW9uIGxvYWRlcnMgYW5kIHJldmFsaWRhdGluZyBmZXRjaGVyIGxvYWRlcnMgaW4gcGFyYWxsZWwsXG4gICAgLy8gdGhlbiBzbGljZSBvZmYgdGhlIHJlc3VsdHMgaW50byBzZXBhcmF0ZSBhcnJheXMgc28gd2UgY2FuIGhhbmRsZSB0aGVtXG4gICAgLy8gYWNjb3JkaW5nbHlcbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFsuLi5tYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgcmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSkpLCAuLi5mZXRjaGVyc1RvTG9hZC5tYXAoZiA9PiB7XG4gICAgICBpZiAoZi5tYXRjaGVzICYmIGYubWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIGYucGF0aCwgcmVxdWVzdC5zaWduYWwpLCBmLm1hdGNoLCBmLm1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgZXJyb3IgPSB7XG4gICAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgICAgIHBhdGhuYW1lOiBmLnBhdGhcbiAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICB9XG4gICAgfSldKTtcbiAgICBsZXQgbG9hZGVyUmVzdWx0cyA9IHJlc3VsdHMuc2xpY2UoMCwgbWF0Y2hlc1RvTG9hZC5sZW5ndGgpO1xuICAgIGxldCBmZXRjaGVyUmVzdWx0cyA9IHJlc3VsdHMuc2xpY2UobWF0Y2hlc1RvTG9hZC5sZW5ndGgpO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFtyZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCByZXF1ZXN0LnNpZ25hbCwgZmFsc2UsIHN0YXRlLmxvYWRlckRhdGEpLCByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBmZXRjaGVyc1RvTG9hZC5tYXAoZiA9PiBmLm1hdGNoKSwgZmV0Y2hlclJlc3VsdHMsIHJlcXVlc3Quc2lnbmFsLCB0cnVlKV0pO1xuICAgIHJldHVybiB7XG4gICAgICByZXN1bHRzLFxuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycnVwdEFjdGl2ZUxvYWRzKCkge1xuICAgIC8vIEV2ZXJ5IGludGVycnVwdGlvbiB0cmlnZ2VycyBhIHJldmFsaWRhdGlvblxuICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSB0cnVlOyAvLyBDYW5jZWwgcGVuZGluZyByb3V0ZS1sZXZlbCBkZWZlcnJlZHMgYW5kIG1hcmsgY2FuY2VsbGVkIHJvdXRlcyBmb3JcbiAgICAvLyByZXZhbGlkYXRpb25cblxuICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLnB1c2goLi4uY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCkpOyAvLyBBYm9ydCBpbi1mbGlnaHQgZmV0Y2hlciBsb2Fkc1xuXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChfLCBrZXkpID0+IHtcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSB7XG4gICAgICAgIGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5wdXNoKGtleSk7XG4gICAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZXJyb3IpIHtcbiAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgcm91dGVJZCk7XG4gICAgZGVsZXRlRmV0Y2hlcihrZXkpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGVycm9yczoge1xuICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IGVycm9yXG4gICAgICB9LFxuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWxldGVGZXRjaGVyKGtleSkge1xuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICBmZXRjaExvYWRNYXRjaGVzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoUmVkaXJlY3RJZHMuZGVsZXRlKGtleSk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBhYm9ydEZldGNoZXIoa2V5KSB7XG4gICAgbGV0IGNvbnRyb2xsZXIgPSBmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpO1xuICAgIGludmFyaWFudChjb250cm9sbGVyLCBcIkV4cGVjdGVkIGZldGNoIGNvbnRyb2xsZXI6IFwiICsga2V5KTtcbiAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcmtGZXRjaGVyc0RvbmUoa2V5cykge1xuICAgIGZvciAobGV0IGtleSBvZiBrZXlzKSB7XG4gICAgICBsZXQgZmV0Y2hlciA9IGdldEZldGNoZXIoa2V5KTtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IHtcbiAgICAgICAgc3RhdGU6IFwiaWRsZVwiLFxuICAgICAgICBkYXRhOiBmZXRjaGVyLmRhdGEsXG4gICAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtYXJrRmV0Y2hSZWRpcmVjdHNEb25lKCkge1xuICAgIGxldCBkb25lS2V5cyA9IFtdO1xuXG4gICAgZm9yIChsZXQga2V5IG9mIGZldGNoUmVkaXJlY3RJZHMpIHtcbiAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICBpbnZhcmlhbnQoZmV0Y2hlciwgXCJFeHBlY3RlZCBmZXRjaGVyOiBcIiArIGtleSk7XG5cbiAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSBcImxvYWRpbmdcIikge1xuICAgICAgICBmZXRjaFJlZGlyZWN0SWRzLmRlbGV0ZShrZXkpO1xuICAgICAgICBkb25lS2V5cy5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWFya0ZldGNoZXJzRG9uZShkb25lS2V5cyk7XG4gIH1cblxuICBmdW5jdGlvbiBhYm9ydFN0YWxlRmV0Y2hMb2FkcyhsYW5kZWRJZCkge1xuICAgIGxldCB5ZWV0ZWRLZXlzID0gW107XG5cbiAgICBmb3IgKGxldCBba2V5LCBpZF0gb2YgZmV0Y2hSZWxvYWRJZHMpIHtcbiAgICAgIGlmIChpZCA8IGxhbmRlZElkKSB7XG4gICAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICAgIGludmFyaWFudChmZXRjaGVyLCBcIkV4cGVjdGVkIGZldGNoZXI6IFwiICsga2V5KTtcblxuICAgICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICAgICAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICB5ZWV0ZWRLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIG1hcmtGZXRjaGVyc0RvbmUoeWVldGVkS2V5cyk7XG4gICAgcmV0dXJuIHllZXRlZEtleXMubGVuZ3RoID4gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEJsb2NrZXIoa2V5LCBmbikge1xuICAgIGxldCBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGtleSkgfHwgSURMRV9CTE9DS0VSO1xuXG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbnMuZ2V0KGtleSkgIT09IGZuKSB7XG4gICAgICBibG9ja2VyRnVuY3Rpb25zLnNldChrZXksIGZuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmxvY2tlcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGV0ZUJsb2NrZXIoa2V5KSB7XG4gICAgc3RhdGUuYmxvY2tlcnMuZGVsZXRlKGtleSk7XG4gICAgYmxvY2tlckZ1bmN0aW9ucy5kZWxldGUoa2V5KTtcbiAgfSAvLyBVdGlsaXR5IGZ1bmN0aW9uIHRvIHVwZGF0ZSBibG9ja2VycywgZW5zdXJpbmcgdmFsaWQgc3RhdGUgdHJhbnNpdGlvbnNcblxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUJsb2NrZXIoa2V5LCBuZXdCbG9ja2VyKSB7XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoa2V5KSB8fCBJRExFX0JMT0NLRVI7IC8vIFBvb3IgbWFucyBzdGF0ZSBtYWNoaW5lIDopXG4gICAgLy8gaHR0cHM6Ly9tZXJtYWlkLmxpdmUvZWRpdCNwYWtvOmVOcVZrYzlPd3pBTXhsOGw4bm5qQVlyRXRESU9IRUJJZ3d2S0pUUmVHeTNfbERwSXFPMjdrNmF3TUcwWGNyTGxuejg3bndkb25FU29nS1hYQnVFNzlycTc1WFpPMy15SGRzMFJKVnV2NzBZclBsVXJDRWUySGZyT1JTM3J1YnFaZnVodHBnNUM5d2s1dFo0VktjUlVxODhxOVo4UlMwLTQ4Y0UxaUhKa0wwdWdiSHVGTHVzOUw2c3BaeThuWDlNUDJDTmRvbVZhcG9zcXUzZkdheVQ4VDgtakpRd2hlcG9fVXRwZ0JRYURFVW9tMDRkWmhBTjFhSkJEbFVLSkJ4RTFjZUIyU21qME1sbi1JQlc1QUZVMmR3VWlrdHRfMlFhcTJkQmZhS2RFdXA4NVVWN1lkLWRLamxua2FibDJQdnIwRFRrVHJlTVxuXG4gICAgaW52YXJpYW50KGJsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiLCBcIkludmFsaWQgYmxvY2tlciBzdGF0ZSB0cmFuc2l0aW9uOiBcIiArIGJsb2NrZXIuc3RhdGUgKyBcIiAtPiBcIiArIG5ld0Jsb2NrZXIuc3RhdGUpO1xuICAgIHN0YXRlLmJsb2NrZXJzLnNldChrZXksIG5ld0Jsb2NrZXIpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGJsb2NrZXJzOiBuZXcgTWFwKHN0YXRlLmJsb2NrZXJzKVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkQmxvY2tOYXZpZ2F0aW9uKF9yZWYyKSB7XG4gICAgbGV0IHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbixcbiAgICAgIG5leHRMb2NhdGlvbixcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9ID0gX3JlZjI7XG5cbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBXZSBvbnkgc3VwcG9ydCBhIHNpbmdsZSBhY3RpdmUgYmxvY2tlciBhdCB0aGUgbW9tZW50IHNpbmNlIHdlIGRvbid0IGhhdmVcbiAgICAvLyBhbnkgY29tcGVsbGluZyB1c2UgY2FzZXMgZm9yIG11bHRpLWJsb2NrZXIgeWV0XG5cblxuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLnNpemUgPiAxKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIkEgcm91dGVyIG9ubHkgc3VwcG9ydHMgb25lIGJsb2NrZXIgYXQgYSB0aW1lXCIpO1xuICAgIH1cblxuICAgIGxldCBlbnRyaWVzID0gQXJyYXkuZnJvbShibG9ja2VyRnVuY3Rpb25zLmVudHJpZXMoKSk7XG4gICAgbGV0IFtibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb25dID0gZW50cmllc1tlbnRyaWVzLmxlbmd0aCAtIDFdO1xuICAgIGxldCBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGJsb2NrZXJLZXkpO1xuXG4gICAgaWYgKGJsb2NrZXIgJiYgYmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIpIHtcbiAgICAgIC8vIElmIHRoZSBibG9ja2VyIGlzIGN1cnJlbnRseSBwcm9jZWVkaW5nLCB3ZSBkb24ndCBuZWVkIHRvIHJlLWNoZWNrXG4gICAgICAvLyBpdCBhbmQgY2FuIGxldCB0aGlzIG5hdmlnYXRpb24gY29udGludWVcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEF0IHRoaXMgcG9pbnQsIHdlIGtub3cgd2UncmUgdW5ibG9ja2VkL2Jsb2NrZWQgc28gd2UgbmVlZCB0byBjaGVjayB0aGVcbiAgICAvLyB1c2VyLXByb3ZpZGVkIGJsb2NrZXIgZnVuY3Rpb25cblxuXG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbih7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSkpIHtcbiAgICAgIHJldHVybiBibG9ja2VyS2V5O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbEFjdGl2ZURlZmVycmVkcyhwcmVkaWNhdGUpIHtcbiAgICBsZXQgY2FuY2VsbGVkUm91dGVJZHMgPSBbXTtcbiAgICBhY3RpdmVEZWZlcnJlZHMuZm9yRWFjaCgoZGZkLCByb3V0ZUlkKSA9PiB7XG4gICAgICBpZiAoIXByZWRpY2F0ZSB8fCBwcmVkaWNhdGUocm91dGVJZCkpIHtcbiAgICAgICAgLy8gQ2FuY2VsIHRoZSBkZWZlcnJlZCAtIGJ1dCBkbyBub3QgcmVtb3ZlIGZyb20gYWN0aXZlRGVmZXJyZWRzIGhlcmUgLVxuICAgICAgICAvLyB3ZSByZWx5IG9uIHRoZSBzdWJzY3JpYmVycyB0byBkbyB0aGF0IHNvIG91ciB0ZXN0cyBjYW4gYXNzZXJ0IHByb3BlclxuICAgICAgICAvLyBjbGVhbnVwIHZpYSBfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHNcbiAgICAgICAgZGZkLmNhbmNlbCgpO1xuICAgICAgICBjYW5jZWxsZWRSb3V0ZUlkcy5wdXNoKHJvdXRlSWQpO1xuICAgICAgICBhY3RpdmVEZWZlcnJlZHMuZGVsZXRlKHJvdXRlSWQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjYW5jZWxsZWRSb3V0ZUlkcztcbiAgfSAvLyBPcHQgaW4gdG8gY2FwdHVyaW5nIGFuZCByZXBvcnRpbmcgc2Nyb2xsIHBvc2l0aW9ucyBkdXJpbmcgbmF2aWdhdGlvbnMsXG4gIC8vIHVzZWQgYnkgdGhlIDxTY3JvbGxSZXN0b3JhdGlvbj4gY29tcG9uZW50XG5cblxuICBmdW5jdGlvbiBlbmFibGVTY3JvbGxSZXN0b3JhdGlvbihwb3NpdGlvbnMsIGdldFBvc2l0aW9uLCBnZXRLZXkpIHtcbiAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IHBvc2l0aW9ucztcbiAgICBnZXRTY3JvbGxQb3NpdGlvbiA9IGdldFBvc2l0aW9uO1xuXG4gICAgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBnZXRLZXkgfHwgKGxvY2F0aW9uID0+IGxvY2F0aW9uLmtleSk7IC8vIFBlcmZvcm0gaW5pdGlhbCBoeWRyYXRpb24gc2Nyb2xsIHJlc3RvcmF0aW9uLCBzaW5jZSB3ZSBtaXNzIHRoZSBib2F0IG9uXG4gICAgLy8gdGhlIGluaXRpYWwgdXBkYXRlU3RhdGUoKSBiZWNhdXNlIHdlJ3ZlIG5vdCB5ZXQgcmVuZGVyZWQgPFNjcm9sbFJlc3RvcmF0aW9uLz5cbiAgICAvLyBhbmQgdGhlcmVmb3JlIGhhdmUgbm8gc2F2ZWRTY3JvbGxQb3NpdGlvbnMgYXZhaWxhYmxlXG5cblxuICAgIGlmICghaW5pdGlhbFNjcm9sbFJlc3RvcmVkICYmIHN0YXRlLm5hdmlnYXRpb24gPT09IElETEVfTkFWSUdBVElPTikge1xuICAgICAgaW5pdGlhbFNjcm9sbFJlc3RvcmVkID0gdHJ1ZTtcbiAgICAgIGxldCB5ID0gZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlcyk7XG5cbiAgICAgIGlmICh5ICE9IG51bGwpIHtcbiAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogeVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBudWxsO1xuICAgICAgZ2V0U2Nyb2xsUG9zaXRpb24gPSBudWxsO1xuICAgICAgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBudWxsO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzYXZlU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG1hdGNoZXMpIHtcbiAgICBpZiAoc2F2ZWRTY3JvbGxQb3NpdGlvbnMgJiYgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgJiYgZ2V0U2Nyb2xsUG9zaXRpb24pIHtcbiAgICAgIGxldCB1c2VyTWF0Y2hlcyA9IG1hdGNoZXMubWFwKG0gPT4gY3JlYXRlVXNlTWF0Y2hlc01hdGNoKG0sIHN0YXRlLmxvYWRlckRhdGEpKTtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxSZXN0b3JhdGlvbktleShsb2NhdGlvbiwgdXNlck1hdGNoZXMpIHx8IGxvY2F0aW9uLmtleTtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV0gPSBnZXRTY3JvbGxQb3NpdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNhdmVkU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG1hdGNoZXMpIHtcbiAgICBpZiAoc2F2ZWRTY3JvbGxQb3NpdGlvbnMgJiYgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgJiYgZ2V0U2Nyb2xsUG9zaXRpb24pIHtcbiAgICAgIGxldCB1c2VyTWF0Y2hlcyA9IG1hdGNoZXMubWFwKG0gPT4gY3JlYXRlVXNlTWF0Y2hlc01hdGNoKG0sIHN0YXRlLmxvYWRlckRhdGEpKTtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxSZXN0b3JhdGlvbktleShsb2NhdGlvbiwgdXNlck1hdGNoZXMpIHx8IGxvY2F0aW9uLmtleTtcbiAgICAgIGxldCB5ID0gc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XTtcblxuICAgICAgaWYgKHR5cGVvZiB5ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiB5O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ludGVybmFsU2V0Um91dGVzKG5ld1JvdXRlcykge1xuICAgIGluRmxpZ2h0RGF0YVJvdXRlcyA9IG5ld1JvdXRlcztcbiAgfVxuXG4gIHJvdXRlciA9IHtcbiAgICBnZXQgYmFzZW5hbWUoKSB7XG4gICAgICByZXR1cm4gaW5pdC5iYXNlbmFtZTtcbiAgICB9LFxuXG4gICAgZ2V0IHN0YXRlKCkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH0sXG5cbiAgICBnZXQgcm91dGVzKCkge1xuICAgICAgcmV0dXJuIGRhdGFSb3V0ZXM7XG4gICAgfSxcblxuICAgIGluaXRpYWxpemUsXG4gICAgc3Vic2NyaWJlLFxuICAgIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uLFxuICAgIG5hdmlnYXRlLFxuICAgIGZldGNoLFxuICAgIHJldmFsaWRhdGUsXG4gICAgLy8gUGFzc3Rocm91Z2ggdG8gaGlzdG9yeS1hd2FyZSBjcmVhdGVIcmVmIHVzZWQgYnkgdXNlSHJlZiBzbyB3ZSBnZXQgcHJvcGVyXG4gICAgLy8gaGFzaC1hd2FyZSBVUkxzIGluIERPTSBwYXRoc1xuICAgIGNyZWF0ZUhyZWY6IHRvID0+IGluaXQuaGlzdG9yeS5jcmVhdGVIcmVmKHRvKSxcbiAgICBlbmNvZGVMb2NhdGlvbjogdG8gPT4gaW5pdC5oaXN0b3J5LmVuY29kZUxvY2F0aW9uKHRvKSxcbiAgICBnZXRGZXRjaGVyLFxuICAgIGRlbGV0ZUZldGNoZXIsXG4gICAgZGlzcG9zZSxcbiAgICBnZXRCbG9ja2VyLFxuICAgIGRlbGV0ZUJsb2NrZXIsXG4gICAgX2ludGVybmFsRmV0Y2hDb250cm9sbGVyczogZmV0Y2hDb250cm9sbGVycyxcbiAgICBfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkcyxcbiAgICAvLyBUT0RPOiBSZW1vdmUgc2V0Um91dGVzLCBpdCdzIHRlbXBvcmFyeSB0byBhdm9pZCBkZWFsaW5nIHdpdGhcbiAgICAvLyB1cGRhdGluZyB0aGUgdHJlZSB3aGlsZSB2YWxpZGF0aW5nIHRoZSB1cGRhdGUgYWxnb3JpdGhtLlxuICAgIF9pbnRlcm5hbFNldFJvdXRlc1xuICB9O1xuICByZXR1cm4gcm91dGVyO1xufSAvLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gY3JlYXRlU3RhdGljSGFuZGxlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuY29uc3QgVU5TQUZFX0RFRkVSUkVEX1NZTUJPTCA9IFN5bWJvbChcImRlZmVycmVkXCIpO1xuZnVuY3Rpb24gY3JlYXRlU3RhdGljSGFuZGxlcihyb3V0ZXMsIG9wdHMpIHtcbiAgaW52YXJpYW50KHJvdXRlcy5sZW5ndGggPiAwLCBcIllvdSBtdXN0IHByb3ZpZGUgYSBub24tZW1wdHkgcm91dGVzIGFycmF5IHRvIGNyZWF0ZVN0YXRpY0hhbmRsZXJcIik7XG4gIGxldCBkYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZXMpO1xuICBsZXQgYmFzZW5hbWUgPSAob3B0cyA/IG9wdHMuYmFzZW5hbWUgOiBudWxsKSB8fCBcIi9cIjtcbiAgLyoqXG4gICAqIFRoZSBxdWVyeSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZG9jdW1lbnQgcmVxdWVzdHMsIGluIHdoaWNoIHdlIHdhbnQgdG9cbiAgICogY2FsbCBhbiBvcHRpb25hbCBhY3Rpb24gYW5kIHBvdGVudGlhbGx5IG11bHRpcGxlIGxvYWRlcnMgZm9yIGFsbCBuZXN0ZWRcbiAgICogcm91dGVzLiAgSXQgcmV0dXJucyBhIFN0YXRpY0hhbmRsZXJDb250ZXh0IG9iamVjdCwgd2hpY2ggaXMgdmVyeSBzaW1pbGFyXG4gICAqIHRvIHRoZSByb3V0ZXIgc3RhdGUgKGxvY2F0aW9uLCBsb2FkZXJEYXRhLCBhY3Rpb25EYXRhLCBlcnJvcnMsIGV0Yy4pIGFuZFxuICAgKiBhbHNvIGFkZHMgU1NSLXNwZWNpZmljIGluZm9ybWF0aW9uIHN1Y2ggYXMgdGhlIHN0YXR1c0NvZGUgYW5kIGhlYWRlcnNcbiAgICogZnJvbSBhY3Rpb24vbG9hZGVycyBSZXNwb25zZXMuXG4gICAqXG4gICAqIEl0IF9zaG91bGRfIG5ldmVyIHRocm93IGFuZCBzaG91bGQgcmVwb3J0IGFsbCBlcnJvcnMgdGhyb3VnaCB0aGVcbiAgICogcmV0dXJuZWQgY29udGV4dC5lcnJvcnMgb2JqZWN0LCBwcm9wZXJseSBhc3NvY2lhdGluZyBlcnJvcnMgdG8gdGhlaXIgZXJyb3JcbiAgICogYm91bmRhcnkuICBBZGRpdGlvbmFsbHksIGl0IHRyYWNrcyBfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB3aGljaCBjYW4gYmVcbiAgICogdXNlZCB0byBlbXVsYXRlIFJlYWN0IGVycm9yIGJvdW5kYXJpZXMgZHVyaW5nIFNTciBieSBwZXJmb3JtaW5nIGEgc2Vjb25kXG4gICAqIHBhc3Mgb25seSBkb3duIHRvIHRoZSBib3VuZGFyeUlkLlxuICAgKlxuICAgKiBUaGUgb25lIGV4Y2VwdGlvbiB3aGVyZSB3ZSBkbyBub3QgcmV0dXJuIGEgU3RhdGljSGFuZGxlckNvbnRleHQgaXMgd2hlbiBhXG4gICAqIHJlZGlyZWN0IHJlc3BvbnNlIGlzIHJldHVybmVkIG9yIHRocm93biBmcm9tIGFueSBhY3Rpb24vbG9hZGVyLiAgV2VcbiAgICogcHJvcGFnYXRlIHRoYXQgb3V0IGFuZCByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBzbyB0aGUgSFRUUCBzZXJ2ZXIgY2FuXG4gICAqIHJldHVybiBpdCBkaXJlY3RseS5cbiAgICovXG5cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnkocmVxdWVzdCwgX3RlbXAyKSB7XG4gICAgbGV0IHtcbiAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKFwiXCIsIGNyZWF0ZVBhdGgodXJsKSwgbnVsbCwgXCJkZWZhdWx0XCIpO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgbG9jYXRpb24sIGJhc2VuYW1lKTsgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcblxuICAgIGlmICghaXNWYWxpZE1ldGhvZChtZXRob2QpICYmIG1ldGhvZCAhPT0gXCJoZWFkXCIpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZFxuICAgICAgfSk7XG4gICAgICBsZXQge1xuICAgICAgICBtYXRjaGVzOiBtZXRob2ROb3RBbGxvd2VkTWF0Y2hlcyxcbiAgICAgICAgcm91dGVcbiAgICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKGRhdGFSb3V0ZXMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYmFzZW5hbWUsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBtYXRjaGVzOiBtZXRob2ROb3RBbGxvd2VkTWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1c0NvZGU6IGVycm9yLnN0YXR1cyxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGxcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICghbWF0Y2hlcykge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgcm91dGVcbiAgICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKGRhdGFSb3V0ZXMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYmFzZW5hbWUsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSBhd2FpdCBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0KTtcblxuICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSAvLyBXaGVuIHJldHVybmluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCwgd2UgcGF0Y2ggYmFjayBpbiB0aGUgbG9jYXRpb24gaGVyZVxuICAgIC8vIHNpbmNlIHdlIG5lZWQgaXQgZm9yIFJlYWN0IENvbnRleHQuICBCdXQgdGhpcyBoZWxwcyBrZWVwIG91ciBzdWJtaXQgYW5kXG4gICAgLy8gbG9hZFJvdXRlRGF0YSBvcGVyYXRpbmcgb24gYSBSZXF1ZXN0IGluc3RlYWQgb2YgYSBMb2NhdGlvblxuXG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgbG9jYXRpb24sXG4gICAgICBiYXNlbmFtZVxuICAgIH0sIHJlc3VsdCk7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBxdWVyeVJvdXRlKCkgbWV0aG9kIGlzIGludGVuZGVkIGZvciB0YXJnZXRlZCByb3V0ZSByZXF1ZXN0cywgZWl0aGVyXG4gICAqIGZvciBmZXRjaCA/X2RhdGEgcmVxdWVzdHMgb3IgcmVzb3VyY2Ugcm91dGUgcmVxdWVzdHMuICBJbiB0aGlzIGNhc2UsIHdlXG4gICAqIGFyZSBvbmx5IGV2ZXIgY2FsbGluZyBhIHNpbmdsZSBhY3Rpb24gb3IgbG9hZGVyLCBhbmQgd2UgYXJlIHJldHVybmluZyB0aGVcbiAgICogcmV0dXJuZWQgdmFsdWUgZGlyZWN0bHkuICBJbiBtb3N0IGNhc2VzLCB0aGlzIHdpbGwgYmUgYSBSZXNwb25zZSByZXR1cm5lZFxuICAgKiBmcm9tIHRoZSBhY3Rpb24vbG9hZGVyLCBidXQgaXQgbWF5IGJlIGEgcHJpbWl0aXZlIG9yIG90aGVyIHZhbHVlIGFzIHdlbGwgLVxuICAgKiBhbmQgaW4gc3VjaCBjYXNlcyB0aGUgY2FsbGluZyBjb250ZXh0IHNob3VsZCBoYW5kbGUgdGhhdCBhY2NvcmRpbmdseS5cbiAgICpcbiAgICogV2UgZG8gcmVzcGVjdCB0aGUgdGhyb3cvcmV0dXJuIGRpZmZlcmVudGlhdGlvbiwgc28gaWYgYW4gYWN0aW9uL2xvYWRlclxuICAgKiB0aHJvd3MsIHRoZW4gdGhpcyBtZXRob2Qgd2lsbCB0aHJvdyB0aGUgdmFsdWUuICBUaGlzIGlzIGltcG9ydGFudCBzbyB3ZVxuICAgKiBjYW4gZG8gcHJvcGVyIGJvdW5kYXJ5IGlkZW50aWZpY2F0aW9uIGluIFJlbWl4IHdoZXJlIGEgdGhyb3duIFJlc3BvbnNlXG4gICAqIG11c3QgZ28gdG8gdGhlIENhdGNoIEJvdW5kYXJ5IGJ1dCBhIHJldHVybmVkIFJlc3BvbnNlIGlzIGhhcHB5LXBhdGguXG4gICAqXG4gICAqIE9uZSB0aGluZyB0byBub3RlIGlzIHRoYXQgYW55IFJvdXRlci1pbml0aWF0ZWQgRXJyb3JzIHRoYXQgbWFrZSBzZW5zZVxuICAgKiB0byBhc3NvY2lhdGUgd2l0aCBhIHN0YXR1cyBjb2RlIHdpbGwgYmUgdGhyb3duIGFzIGFuIEVycm9yUmVzcG9uc2VcbiAgICogaW5zdGFuY2Ugd2hpY2ggaW5jbHVkZSB0aGUgcmF3IEVycm9yLCBzdWNoIHRoYXQgdGhlIGNhbGxpbmcgY29udGV4dCBjYW5cbiAgICogc2VyaWFsaXplIHRoZSBlcnJvciBhcyB0aGV5IHNlZSBmaXQgd2hpbGUgaW5jbHVkaW5nIHRoZSBwcm9wZXIgcmVzcG9uc2VcbiAgICogY29kZS4gIEV4YW1wbGVzIGhlcmUgYXJlIDQwNCBhbmQgNDA1IGVycm9ycyB0aGF0IG9jY3VyIHByaW9yIHRvIHJlYWNoaW5nXG4gICAqIGFueSB1c2VyLWRlZmluZWQgbG9hZGVycy5cbiAgICovXG5cblxuICBhc3luYyBmdW5jdGlvbiBxdWVyeVJvdXRlKHJlcXVlc3QsIF90ZW1wMykge1xuICAgIGxldCB7XG4gICAgICByb3V0ZUlkLFxuICAgICAgcmVxdWVzdENvbnRleHRcbiAgICB9ID0gX3RlbXAzID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMztcbiAgICBsZXQgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgbGV0IG1ldGhvZCA9IHJlcXVlc3QubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oXCJcIiwgY3JlYXRlUGF0aCh1cmwpLCBudWxsLCBcImRlZmF1bHRcIik7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgYmFzZW5hbWUpOyAvLyBTU1Igc3VwcG9ydHMgSEVBRCByZXF1ZXN0cyB3aGlsZSBTUEEgZG9lc24ndFxuXG4gICAgaWYgKCFpc1ZhbGlkTWV0aG9kKG1ldGhvZCkgJiYgbWV0aG9kICE9PSBcImhlYWRcIiAmJiBtZXRob2QgIT09IFwib3B0aW9uc1wiKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2RcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IG1hdGNoID0gcm91dGVJZCA/IG1hdGNoZXMuZmluZChtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpIDogZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuXG4gICAgaWYgKHJvdXRlSWQgJiYgIW1hdGNoKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMywge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoKSB7XG4gICAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoaXQgSSBkb24ndCB0aGluaz9cbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHF1ZXJ5SW1wbChyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIG1hdGNoKTtcblxuICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9ycyA/IE9iamVjdC52YWx1ZXMocmVzdWx0LmVycm9ycylbMF0gOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoZXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gSWYgd2UgZ290IGJhY2sgcmVzdWx0LmVycm9ycywgdGhhdCBtZWFucyB0aGUgbG9hZGVyL2FjdGlvbiB0aHJld1xuICAgICAgLy8gX3NvbWV0aGluZ18gdGhhdCB3YXNuJ3QgYSBSZXNwb25zZSwgYnV0IGl0J3Mgbm90IGd1YXJhbnRlZWQvcmVxdWlyZWRcbiAgICAgIC8vIHRvIGJlIGFuIGBpbnN0YW5jZW9mIEVycm9yYCBlaXRoZXIsIHNvIHdlIGhhdmUgdG8gdXNlIHRocm93IGhlcmUgdG9cbiAgICAgIC8vIHByZXNlcnZlIHRoZSBcImVycm9yXCIgc3RhdGUgb3V0c2lkZSBvZiBxdWVyeUltcGwuXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9IC8vIFBpY2sgb2ZmIHRoZSByaWdodCBzdGF0ZSB2YWx1ZSB0byByZXR1cm5cblxuXG4gICAgaWYgKHJlc3VsdC5hY3Rpb25EYXRhKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZXN1bHQuYWN0aW9uRGF0YSlbMF07XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdC5sb2FkZXJEYXRhKSB7XG4gICAgICB2YXIgX3Jlc3VsdCRhY3RpdmVEZWZlcnJlO1xuXG4gICAgICBsZXQgZGF0YSA9IE9iamVjdC52YWx1ZXMocmVzdWx0LmxvYWRlckRhdGEpWzBdO1xuXG4gICAgICBpZiAoKF9yZXN1bHQkYWN0aXZlRGVmZXJyZSA9IHJlc3VsdC5hY3RpdmVEZWZlcnJlZHMpICE9IG51bGwgJiYgX3Jlc3VsdCRhY3RpdmVEZWZlcnJlW21hdGNoLnJvdXRlLmlkXSkge1xuICAgICAgICBkYXRhW1VOU0FGRV9ERUZFUlJFRF9TWU1CT0xdID0gcmVzdWx0LmFjdGl2ZURlZmVycmVkc1ttYXRjaC5yb3V0ZS5pZF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoKSB7XG4gICAgaW52YXJpYW50KHJlcXVlc3Quc2lnbmFsLCBcInF1ZXJ5KCkvcXVlcnlSb3V0ZSgpIHJlcXVlc3RzIG11c3QgY29udGFpbiBhbiBBYm9ydENvbnRyb2xsZXIgc2lnbmFsXCIpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc011dGF0aW9uTWV0aG9kKHJlcXVlc3QubWV0aG9kLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBzdWJtaXQocmVxdWVzdCwgbWF0Y2hlcywgcm91dGVNYXRjaCB8fCBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbiksIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoICE9IG51bGwpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgcm91dGVNYXRjaCk7XG4gICAgICByZXR1cm4gaXNSZXNwb25zZShyZXN1bHQpID8gcmVzdWx0IDogX2V4dGVuZHMoe30sIHJlc3VsdCwge1xuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSWYgdGhlIHVzZXIgdGhyZXcvcmV0dXJuZWQgYSBSZXNwb25zZSBpbiBjYWxsTG9hZGVyT3JBY3Rpb24sIHdlIHRocm93XG4gICAgICAvLyBpdCB0byBiYWlsIG91dCBhbmQgdGhlbiByZXR1cm4gb3IgdGhyb3cgaGVyZSBiYXNlZCBvbiB3aGV0aGVyIHRoZSB1c2VyXG4gICAgICAvLyByZXR1cm5lZCBvciB0aHJld1xuICAgICAgaWYgKGlzUXVlcnlSb3V0ZVJlc3BvbnNlKGUpKSB7XG4gICAgICAgIGlmIChlLnR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IgJiYgIWlzUmVkaXJlY3RSZXNwb25zZShlLnJlc3BvbnNlKSkge1xuICAgICAgICAgIHRocm93IGUucmVzcG9uc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZS5yZXNwb25zZTtcbiAgICAgIH0gLy8gUmVkaXJlY3RzIGFyZSBhbHdheXMgcmV0dXJuZWQgc2luY2UgdGhleSBkb24ndCBwcm9wYWdhdGUgdG8gY2F0Y2hcbiAgICAgIC8vIGJvdW5kYXJpZXNcblxuXG4gICAgICBpZiAoaXNSZWRpcmVjdFJlc3BvbnNlKGUpKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHN1Ym1pdChyZXF1ZXN0LCBtYXRjaGVzLCBhY3Rpb25NYXRjaCwgcmVxdWVzdENvbnRleHQsIGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgbGV0IHJlc3VsdDtcblxuICAgIGlmICghYWN0aW9uTWF0Y2gucm91dGUuYWN0aW9uKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICBwYXRobmFtZTogbmV3IFVSTChyZXF1ZXN0LnVybCkucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWQ6IGFjdGlvbk1hdGNoLnJvdXRlLmlkXG4gICAgICB9KTtcblxuICAgICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgcmVxdWVzdCwgYWN0aW9uTWF0Y2gsIG1hdGNoZXMsIGJhc2VuYW1lLCB0cnVlLCBpc1JvdXRlUmVxdWVzdCwgcmVxdWVzdENvbnRleHQpO1xuXG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICBsZXQgbWV0aG9kID0gaXNSb3V0ZVJlcXVlc3QgPyBcInF1ZXJ5Um91dGVcIiA6IFwicXVlcnlcIjtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArIFwiKCkgY2FsbCBhYm9ydGVkXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFVoaGhoIC0gdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLCB3ZSBzaG91bGQgYWx3YXlzIHRocm93IHRoZXNlIGZyb21cbiAgICAgIC8vIGNhbGxMb2FkZXJPckFjdGlvbiwgYnV0IHRoZSB0eXBlIG5hcnJvd2luZyBoZXJlIGtlZXBzIFRTIGhhcHB5IGFuZCB3ZVxuICAgICAgLy8gY2FuIGdldCBiYWNrIG9uIHRoZSBcInRocm93IGFsbCByZWRpcmVjdCByZXNwb25zZXNcIiB0cmFpbiBoZXJlIHNob3VsZFxuICAgICAgLy8gdGhpcyBldmVyIGhhcHBlbiA6L1xuICAgICAgdGhyb3cgbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiByZXN1bHQuc3RhdHVzLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246IHJlc3VsdC5sb2NhdGlvblxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICB0eXBlOiBcImRlZmVyLWFjdGlvblwiXG4gICAgICB9KTtcblxuICAgICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgLy8gTm90ZTogVGhpcyBzaG91bGQgb25seSBiZSBub24tUmVzcG9uc2UgdmFsdWVzIGlmIHdlIGdldCBoZXJlLCBzaW5jZVxuICAgICAgLy8gaXNSb3V0ZVJlcXVlc3Qgc2hvdWxkIHRocm93IGFueSBSZXNwb25zZSByZWNlaXZlZCBpbiBjYWxsTG9hZGVyT3JBY3Rpb25cbiAgICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaGVzOiBbYWN0aW9uTWF0Y2hdLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YToge1xuICAgICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yczogbnVsbCxcbiAgICAgICAgLy8gTm90ZTogc3RhdHVzQ29kZSArIGhlYWRlcnMgYXJlIHVudXNlZCBoZXJlIHNpbmNlIHF1ZXJ5Um91dGUgd2lsbFxuICAgICAgICAvLyByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBvciB2YWx1ZVxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgdW5kZWZpbmVkLCB7XG4gICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICB9KTsgLy8gYWN0aW9uIHN0YXR1cyBjb2RlcyB0YWtlIHByZWNlZGVuY2Ugb3ZlciBsb2FkZXIgc3RhdHVzIGNvZGVzXG5cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgICAgICBzdGF0dXNDb2RlOiBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpID8gcmVzdWx0LmVycm9yLnN0YXR1cyA6IDUwMCxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5oZWFkZXJzXG4gICAgICAgIH0gOiB7fSlcbiAgICAgIH0pO1xuICAgIH0gLy8gQ3JlYXRlIGEgR0VUIHJlcXVlc3QgZm9yIHRoZSBsb2FkZXJzXG5cblxuICAgIGxldCBsb2FkZXJSZXF1ZXN0ID0gbmV3IFJlcXVlc3QocmVxdWVzdC51cmwsIHtcbiAgICAgIGhlYWRlcnM6IHJlcXVlc3QuaGVhZGVycyxcbiAgICAgIHJlZGlyZWN0OiByZXF1ZXN0LnJlZGlyZWN0LFxuICAgICAgc2lnbmFsOiByZXF1ZXN0LnNpZ25hbFxuICAgIH0pO1xuICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShsb2FkZXJSZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCByZXN1bHQuc3RhdHVzQ29kZSA/IHtcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXNDb2RlXG4gICAgfSA6IHt9LCB7XG4gICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICB9LFxuICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVyc1xuICAgICAgfSA6IHt9KVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgcm91dGVNYXRjaCwgcGVuZGluZ0FjdGlvbkVycm9yKSB7XG4gICAgbGV0IGlzUm91dGVSZXF1ZXN0ID0gcm91dGVNYXRjaCAhPSBudWxsOyAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5Um91dGUoKSlcblxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCAmJiAhKHJvdXRlTWF0Y2ggIT0gbnVsbCAmJiByb3V0ZU1hdGNoLnJvdXRlLmxvYWRlcikpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBuZXcgVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZDogcm91dGVNYXRjaCA9PSBudWxsID8gdm9pZCAwIDogcm91dGVNYXRjaC5yb3V0ZS5pZFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3RNYXRjaGVzID0gcm91dGVNYXRjaCA/IFtyb3V0ZU1hdGNoXSA6IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIE9iamVjdC5rZXlzKHBlbmRpbmdBY3Rpb25FcnJvciB8fCB7fSlbMF0pO1xuICAgIGxldCBtYXRjaGVzVG9Mb2FkID0gcmVxdWVzdE1hdGNoZXMuZmlsdGVyKG0gPT4gbS5yb3V0ZS5sb2FkZXIpOyAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5KCkpXG5cbiAgICBpZiAobWF0Y2hlc1RvTG9hZC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIC8vIEFkZCBhIG51bGwgZm9yIGFsbCBtYXRjaGVkIHJvdXRlcyBmb3IgcHJvcGVyIHJldmFsaWRhdGlvbiBvbiB0aGUgY2xpZW50XG4gICAgICAgIGxvYWRlckRhdGE6IG1hdGNoZXMucmVkdWNlKChhY2MsIG0pID0+IE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgICAgW20ucm91dGUuaWRdOiBudWxsXG4gICAgICAgIH0pLCB7fSksXG4gICAgICAgIGVycm9yczogcGVuZGluZ0FjdGlvbkVycm9yIHx8IG51bGwsXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFsuLi5tYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgcmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIGJhc2VuYW1lLCB0cnVlLCBpc1JvdXRlUmVxdWVzdCwgcmVxdWVzdENvbnRleHQpKV0pO1xuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIGxldCBtZXRob2QgPSBpc1JvdXRlUmVxdWVzdCA/IFwicXVlcnlSb3V0ZVwiIDogXCJxdWVyeVwiO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArIFwiKCkgY2FsbCBhYm9ydGVkXCIpO1xuICAgIH0gLy8gUHJvY2VzcyBhbmQgY29tbWl0IG91dHB1dCBmcm9tIGxvYWRlcnNcblxuXG4gICAgbGV0IGFjdGl2ZURlZmVycmVkcyA9IG5ldyBNYXAoKTtcbiAgICBsZXQgY29udGV4dCA9IHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0FjdGlvbkVycm9yLCBhY3RpdmVEZWZlcnJlZHMpOyAvLyBBZGQgYSBudWxsIGZvciBhbnkgbm9uLWxvYWRlciBtYXRjaGVzIGZvciBwcm9wZXIgcmV2YWxpZGF0aW9uIG9uIHRoZSBjbGllbnRcblxuICAgIGxldCBleGVjdXRlZExvYWRlcnMgPSBuZXcgU2V0KG1hdGNoZXNUb0xvYWQubWFwKG1hdGNoID0+IG1hdGNoLnJvdXRlLmlkKSk7XG4gICAgbWF0Y2hlcy5mb3JFYWNoKG1hdGNoID0+IHtcbiAgICAgIGlmICghZXhlY3V0ZWRMb2FkZXJzLmhhcyhtYXRjaC5yb3V0ZS5pZCkpIHtcbiAgICAgICAgY29udGV4dC5sb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgYWN0aXZlRGVmZXJyZWRzOiBhY3RpdmVEZWZlcnJlZHMuc2l6ZSA+IDAgPyBPYmplY3QuZnJvbUVudHJpZXMoYWN0aXZlRGVmZXJyZWRzLmVudHJpZXMoKSkgOiBudWxsXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGRhdGFSb3V0ZXMsXG4gICAgcXVlcnksXG4gICAgcXVlcnlSb3V0ZVxuICB9O1xufSAvLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSGVscGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBHaXZlbiBhbiBleGlzdGluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCBhbmQgYW4gZXJyb3IgdGhyb3duIGF0IHJlbmRlciB0aW1lLFxuICogcHJvdmlkZSBhbiB1cGRhdGVkIFN0YXRpY0hhbmRsZXJDb250ZXh0IHN1aXRhYmxlIGZvciBhIHNlY29uZCBTU1IgcmVuZGVyXG4gKi9cblxuZnVuY3Rpb24gZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvcihyb3V0ZXMsIGNvbnRleHQsIGVycm9yKSB7XG4gIGxldCBuZXdDb250ZXh0ID0gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgZXJyb3JzOiB7XG4gICAgICBbY29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB8fCByb3V0ZXNbMF0uaWRdOiBlcnJvclxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG5ld0NvbnRleHQ7XG59XG5cbmZ1bmN0aW9uIGlzU3VibWlzc2lvbk5hdmlnYXRpb24ob3B0cykge1xuICByZXR1cm4gb3B0cyAhPSBudWxsICYmIFwiZm9ybURhdGFcIiBpbiBvcHRzO1xufSAvLyBOb3JtYWxpemUgbmF2aWdhdGlvbiBvcHRpb25zIGJ5IGNvbnZlcnRpbmcgZm9ybU1ldGhvZD1HRVQgZm9ybURhdGEgb2JqZWN0cyB0b1xuLy8gVVJMU2VhcmNoUGFyYW1zIHNvIHRoZXkgYmVoYXZlIGlkZW50aWNhbGx5IHRvIGxpbmtzIHdpdGggcXVlcnkgcGFyYW1zXG5cblxuZnVuY3Rpb24gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKHRvLCBvcHRzLCBpc0ZldGNoZXIpIHtcbiAgaWYgKGlzRmV0Y2hlciA9PT0gdm9pZCAwKSB7XG4gICAgaXNGZXRjaGVyID0gZmFsc2U7XG4gIH1cblxuICBsZXQgcGF0aCA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7IC8vIFJldHVybiBsb2NhdGlvbiB2ZXJiYXRpbSBvbiBub24tc3VibWlzc2lvbiBuYXZpZ2F0aW9uc1xuXG4gIGlmICghb3B0cyB8fCAhaXNTdWJtaXNzaW9uTmF2aWdhdGlvbihvcHRzKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoXG4gICAgfTtcbiAgfVxuXG4gIGlmIChvcHRzLmZvcm1NZXRob2QgJiYgIWlzVmFsaWRNZXRob2Qob3B0cy5mb3JtTWV0aG9kKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoLFxuICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZDogb3B0cy5mb3JtTWV0aG9kXG4gICAgICB9KVxuICAgIH07XG4gIH0gLy8gQ3JlYXRlIGEgU3VibWlzc2lvbiBvbiBub24tR0VUIG5hdmlnYXRpb25zXG5cblxuICBsZXQgc3VibWlzc2lvbjtcblxuICBpZiAob3B0cy5mb3JtRGF0YSkge1xuICAgIHN1Ym1pc3Npb24gPSB7XG4gICAgICBmb3JtTWV0aG9kOiBvcHRzLmZvcm1NZXRob2QgfHwgXCJnZXRcIixcbiAgICAgIGZvcm1BY3Rpb246IHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpLFxuICAgICAgZm9ybUVuY1R5cGU6IG9wdHMgJiYgb3B0cy5mb3JtRW5jVHlwZSB8fCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLFxuICAgICAgZm9ybURhdGE6IG9wdHMuZm9ybURhdGFcbiAgICB9O1xuXG4gICAgaWYgKGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aCxcbiAgICAgICAgc3VibWlzc2lvblxuICAgICAgfTtcbiAgICB9XG4gIH0gLy8gRmxhdHRlbiBzdWJtaXNzaW9uIG9udG8gVVJMU2VhcmNoUGFyYW1zIGZvciBHRVQgc3VibWlzc2lvbnNcblxuXG4gIGxldCBwYXJzZWRQYXRoID0gcGFyc2VQYXRoKHBhdGgpO1xuICBsZXQgc2VhcmNoUGFyYW1zID0gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMob3B0cy5mb3JtRGF0YSk7IC8vIFNpbmNlIGZldGNoZXIgR0VUIHN1Ym1pc3Npb25zIG9ubHkgcnVuIGEgc2luZ2xlIGxvYWRlciAoYXMgb3Bwb3NlZCB0b1xuICAvLyBuYXZpZ2F0aW9uIEdFVCBzdWJtaXNzaW9ucyB3aGljaCBydW4gYWxsIGxvYWRlcnMpLCB3ZSBuZWVkIHRvIHByZXNlcnZlXG4gIC8vIGFueSBpbmNvbWluZyA/aW5kZXggcGFyYW1zXG5cbiAgaWYgKGlzRmV0Y2hlciAmJiBwYXJzZWRQYXRoLnNlYXJjaCAmJiBoYXNOYWtlZEluZGV4UXVlcnkocGFyc2VkUGF0aC5zZWFyY2gpKSB7XG4gICAgc2VhcmNoUGFyYW1zLmFwcGVuZChcImluZGV4XCIsIFwiXCIpO1xuICB9XG5cbiAgcGFyc2VkUGF0aC5zZWFyY2ggPSBcIj9cIiArIHNlYXJjaFBhcmFtcztcbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBjcmVhdGVQYXRoKHBhcnNlZFBhdGgpLFxuICAgIHN1Ym1pc3Npb25cbiAgfTtcbn0gLy8gRmlsdGVyIG91dCBhbGwgcm91dGVzIGJlbG93IGFueSBjYXVnaHQgZXJyb3IgYXMgdGhleSBhcmVuJ3QgZ29pbmcgdG9cbi8vIHJlbmRlciBzbyB3ZSBkb24ndCBuZWVkIHRvIGxvYWQgdGhlbVxuXG5cbmZ1bmN0aW9uIGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIGJvdW5kYXJ5SWQpIHtcbiAgbGV0IGJvdW5kYXJ5TWF0Y2hlcyA9IG1hdGNoZXM7XG5cbiAgaWYgKGJvdW5kYXJ5SWQpIHtcbiAgICBsZXQgaW5kZXggPSBtYXRjaGVzLmZpbmRJbmRleChtID0+IG0ucm91dGUuaWQgPT09IGJvdW5kYXJ5SWQpO1xuXG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIGJvdW5kYXJ5TWF0Y2hlcyA9IG1hdGNoZXMuc2xpY2UoMCwgaW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZGFyeU1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIGdldE1hdGNoZXNUb0xvYWQoaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIHN1Ym1pc3Npb24sIGxvY2F0aW9uLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcywgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLCBmZXRjaExvYWRNYXRjaGVzLCByb3V0ZXNUb1VzZSwgYmFzZW5hbWUsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IpIHtcbiAgbGV0IGFjdGlvblJlc3VsdCA9IHBlbmRpbmdFcnJvciA/IE9iamVjdC52YWx1ZXMocGVuZGluZ0Vycm9yKVswXSA6IHBlbmRpbmdBY3Rpb25EYXRhID8gT2JqZWN0LnZhbHVlcyhwZW5kaW5nQWN0aW9uRGF0YSlbMF0gOiB1bmRlZmluZWQ7XG4gIGxldCBjdXJyZW50VXJsID0gaGlzdG9yeS5jcmVhdGVVUkwoc3RhdGUubG9jYXRpb24pO1xuICBsZXQgbmV4dFVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKGxvY2F0aW9uKTtcbiAgbGV0IGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlID0gLy8gRm9yY2VkIHJldmFsaWRhdGlvbiBkdWUgdG8gc3VibWlzc2lvbiwgdXNlUmV2YWxpZGF0ZSwgb3IgWC1SZW1peC1SZXZhbGlkYXRlXG4gIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgfHwgLy8gQ2xpY2tlZCB0aGUgc2FtZSBsaW5rLCByZXN1Ym1pdHRlZCBhIEdFVCBmb3JtXG4gIGN1cnJlbnRVcmwudG9TdHJpbmcoKSA9PT0gbmV4dFVybC50b1N0cmluZygpIHx8IC8vIFNlYXJjaCBwYXJhbXMgYWZmZWN0IGFsbCBsb2FkZXJzXG4gIGN1cnJlbnRVcmwuc2VhcmNoICE9PSBuZXh0VXJsLnNlYXJjaDsgLy8gUGljayBuYXZpZ2F0aW9uIG1hdGNoZXMgdGhhdCBhcmUgbmV0LW5ldyBvciBxdWFsaWZ5IGZvciByZXZhbGlkYXRpb25cblxuICBsZXQgYm91bmRhcnlJZCA9IHBlbmRpbmdFcnJvciA/IE9iamVjdC5rZXlzKHBlbmRpbmdFcnJvcilbMF0gOiB1bmRlZmluZWQ7XG4gIGxldCBib3VuZGFyeU1hdGNoZXMgPSBnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeShtYXRjaGVzLCBib3VuZGFyeUlkKTtcbiAgbGV0IG5hdmlnYXRpb25NYXRjaGVzID0gYm91bmRhcnlNYXRjaGVzLmZpbHRlcigobWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgaWYgKG1hdGNoLnJvdXRlLmxvYWRlciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBBbHdheXMgY2FsbCB0aGUgbG9hZGVyIG9uIG5ldyByb3V0ZSBpbnN0YW5jZXMgYW5kIHBlbmRpbmcgZGVmZXIgY2FuY2VsbGF0aW9uc1xuXG5cbiAgICBpZiAoaXNOZXdMb2FkZXIoc3RhdGUubG9hZGVyRGF0YSwgc3RhdGUubWF0Y2hlc1tpbmRleF0sIG1hdGNoKSB8fCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5zb21lKGlkID0+IGlkID09PSBtYXRjaC5yb3V0ZS5pZCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8gVGhpcyBpcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBmb3Igd2hlbiB3ZSByZXZhbGlkYXRlLiAgSWYgdGhlIHJvdXRlXG4gICAgLy8gcHJvdmlkZXMgaXQncyBvd24gaW1wbGVtZW50YXRpb24sIHRoZW4gd2UgZ2l2ZSB0aGVtIGZ1bGwgY29udHJvbCBidXRcbiAgICAvLyBwcm92aWRlIHRoaXMgdmFsdWUgc28gdGhleSBjYW4gbGV2ZXJhZ2UgaXQgaWYgbmVlZGVkIGFmdGVyIHRoZXkgY2hlY2tcbiAgICAvLyB0aGVpciBvd24gc3BlY2lmaWMgdXNlIGNhc2VzXG5cblxuICAgIGxldCBjdXJyZW50Um91dGVNYXRjaCA9IHN0YXRlLm1hdGNoZXNbaW5kZXhdO1xuICAgIGxldCBuZXh0Um91dGVNYXRjaCA9IG1hdGNoO1xuICAgIHJldHVybiBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKG1hdGNoLCBfZXh0ZW5kcyh7XG4gICAgICBjdXJyZW50VXJsLFxuICAgICAgY3VycmVudFBhcmFtczogY3VycmVudFJvdXRlTWF0Y2gucGFyYW1zLFxuICAgICAgbmV4dFVybCxcbiAgICAgIG5leHRQYXJhbXM6IG5leHRSb3V0ZU1hdGNoLnBhcmFtc1xuICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgIGFjdGlvblJlc3VsdCxcbiAgICAgIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlOiBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZSB8fCBpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudFJvdXRlTWF0Y2gsIG5leHRSb3V0ZU1hdGNoKVxuICAgIH0pKTtcbiAgfSk7IC8vIFBpY2sgZmV0Y2hlci5sb2FkcyB0aGF0IG5lZWQgdG8gYmUgcmV2YWxpZGF0ZWRcblxuICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlcnMgPSBbXTtcbiAgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChmLCBrZXkpID0+IHtcbiAgICAvLyBEb24ndCByZXZhbGlkYXRlIGlmIGZldGNoZXIgd29uJ3QgYmUgcHJlc2VudCBpbiB0aGUgc3Vic2VxdWVudCByZW5kZXJcbiAgICBpZiAoIW1hdGNoZXMuc29tZShtID0+IG0ucm91dGUuaWQgPT09IGYucm91dGVJZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgZmV0Y2hlck1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgZi5wYXRoLCBiYXNlbmFtZSk7IC8vIElmIHRoZSBmZXRjaGVyIHBhdGggbm8gbG9uZ2VyIG1hdGNoZXMsIHB1c2ggaXQgaW4gd2l0aCBudWxsIG1hdGNoZXMgc29cbiAgICAvLyB3ZSBjYW4gdHJpZ2dlciBhIDQwNCBpbiBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGFcblxuICAgIGlmICghZmV0Y2hlck1hdGNoZXMpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goX2V4dGVuZHMoe1xuICAgICAgICBrZXlcbiAgICAgIH0sIGYsIHtcbiAgICAgICAgbWF0Y2hlczogbnVsbCxcbiAgICAgICAgbWF0Y2g6IG51bGxcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgZmV0Y2hlck1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2goZmV0Y2hlck1hdGNoZXMsIGYucGF0aCk7XG5cbiAgICBpZiAoY2FuY2VsbGVkRmV0Y2hlckxvYWRzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goX2V4dGVuZHMoe1xuICAgICAgICBrZXksXG4gICAgICAgIG1hdGNoZXM6IGZldGNoZXJNYXRjaGVzLFxuICAgICAgICBtYXRjaDogZmV0Y2hlck1hdGNoXG4gICAgICB9LCBmKSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBSZXZhbGlkYXRpbmcgZmV0Y2hlcnMgYXJlIGRlY291cGxlZCBmcm9tIHRoZSByb3V0ZSBtYXRjaGVzIHNpbmNlIHRoZXlcbiAgICAvLyBoaXQgYSBzdGF0aWMgaHJlZiwgc28gdGhleSBfYWx3YXlzXyBjaGVjayBzaG91bGRSZXZhbGlkYXRlIGFuZCB0aGVcbiAgICAvLyBkZWZhdWx0IGlzIHN0cmljdGx5IGlmIGEgcmV2YWxpZGF0aW9uIGlzIGV4cGxpY2l0bHkgcmVxdWlyZWQgKGFjdGlvblxuICAgIC8vIHN1Ym1pc3Npb25zLCB1c2VSZXZhbGlkYXRvciwgWC1SZW1peC1SZXZhbGlkYXRlKS5cblxuXG4gICAgbGV0IHNob3VsZFJldmFsaWRhdGUgPSBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGZldGNoZXJNYXRjaCwgX2V4dGVuZHMoe1xuICAgICAgY3VycmVudFVybCxcbiAgICAgIGN1cnJlbnRQYXJhbXM6IHN0YXRlLm1hdGNoZXNbc3RhdGUubWF0Y2hlcy5sZW5ndGggLSAxXS5wYXJhbXMsXG4gICAgICBuZXh0VXJsLFxuICAgICAgbmV4dFBhcmFtczogbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnBhcmFtc1xuICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgIGFjdGlvblJlc3VsdCxcbiAgICAgIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlXG4gICAgfSkpO1xuXG4gICAgaWYgKHNob3VsZFJldmFsaWRhdGUpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goX2V4dGVuZHMoe1xuICAgICAgICBrZXksXG4gICAgICAgIG1hdGNoZXM6IGZldGNoZXJNYXRjaGVzLFxuICAgICAgICBtYXRjaDogZmV0Y2hlck1hdGNoXG4gICAgICB9LCBmKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIFtuYXZpZ2F0aW9uTWF0Y2hlcywgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdO1xufVxuXG5mdW5jdGlvbiBpc05ld0xvYWRlcihjdXJyZW50TG9hZGVyRGF0YSwgY3VycmVudE1hdGNoLCBtYXRjaCkge1xuICBsZXQgaXNOZXcgPSAvLyBbYV0gLT4gW2EsIGJdXG4gICFjdXJyZW50TWF0Y2ggfHwgLy8gW2EsIGJdIC0+IFthLCBjXVxuICBtYXRjaC5yb3V0ZS5pZCAhPT0gY3VycmVudE1hdGNoLnJvdXRlLmlkOyAvLyBIYW5kbGUgdGhlIGNhc2UgdGhhdCB3ZSBkb24ndCBoYXZlIGRhdGEgZm9yIGEgcmUtdXNlZCByb3V0ZSwgcG90ZW50aWFsbHlcbiAgLy8gZnJvbSBhIHByaW9yIGVycm9yIG9yIGZyb20gYSBjYW5jZWxsZWQgcGVuZGluZyBkZWZlcnJlZFxuXG4gIGxldCBpc01pc3NpbmdEYXRhID0gY3VycmVudExvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdID09PSB1bmRlZmluZWQ7IC8vIEFsd2F5cyBsb2FkIGlmIHRoaXMgaXMgYSBuZXQtbmV3IHJvdXRlIG9yIHdlIGRvbid0IHlldCBoYXZlIGRhdGFcblxuICByZXR1cm4gaXNOZXcgfHwgaXNNaXNzaW5nRGF0YTtcbn1cblxuZnVuY3Rpb24gaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRNYXRjaCwgbWF0Y2gpIHtcbiAgbGV0IGN1cnJlbnRQYXRoID0gY3VycmVudE1hdGNoLnJvdXRlLnBhdGg7XG4gIHJldHVybiAoLy8gcGFyYW0gY2hhbmdlIGZvciB0aGlzIG1hdGNoLCAvdXNlcnMvMTIzIC0+IC91c2Vycy80NTZcbiAgICBjdXJyZW50TWF0Y2gucGF0aG5hbWUgIT09IG1hdGNoLnBhdGhuYW1lIHx8IC8vIHNwbGF0IHBhcmFtIGNoYW5nZWQsIHdoaWNoIGlzIG5vdCBwcmVzZW50IGluIG1hdGNoLnBhdGhcbiAgICAvLyBlLmcuIC9maWxlcy9pbWFnZXMvYXZhdGFyLmpwZyAtPiBmaWxlcy9maW5hbmNlcy54bHNcbiAgICBjdXJyZW50UGF0aCAhPSBudWxsICYmIGN1cnJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSAmJiBjdXJyZW50TWF0Y2gucGFyYW1zW1wiKlwiXSAhPT0gbWF0Y2gucGFyYW1zW1wiKlwiXVxuICApO1xufVxuXG5mdW5jdGlvbiBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGxvYWRlck1hdGNoLCBhcmcpIHtcbiAgaWYgKGxvYWRlck1hdGNoLnJvdXRlLnNob3VsZFJldmFsaWRhdGUpIHtcbiAgICBsZXQgcm91dGVDaG9pY2UgPSBsb2FkZXJNYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKGFyZyk7XG5cbiAgICBpZiAodHlwZW9mIHJvdXRlQ2hvaWNlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgcmV0dXJuIHJvdXRlQ2hvaWNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhcmcuZGVmYXVsdFNob3VsZFJldmFsaWRhdGU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNhbGxMb2FkZXJPckFjdGlvbih0eXBlLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgYmFzZW5hbWUsIGlzU3RhdGljUmVxdWVzdCwgaXNSb3V0ZVJlcXVlc3QsIHJlcXVlc3RDb250ZXh0KSB7XG4gIGlmIChiYXNlbmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgYmFzZW5hbWUgPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChpc1N0YXRpY1JlcXVlc3QgPT09IHZvaWQgMCkge1xuICAgIGlzU3RhdGljUmVxdWVzdCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzUm91dGVSZXF1ZXN0ID09PSB2b2lkIDApIHtcbiAgICBpc1JvdXRlUmVxdWVzdCA9IGZhbHNlO1xuICB9XG5cbiAgbGV0IHJlc3VsdFR5cGU7XG4gIGxldCByZXN1bHQ7IC8vIFNldHVwIGEgcHJvbWlzZSB3ZSBjYW4gcmFjZSBhZ2FpbnN0IHNvIHRoYXQgYWJvcnQgc2lnbmFscyBzaG9ydCBjaXJjdWl0XG5cbiAgbGV0IHJlamVjdDtcbiAgbGV0IGFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTtcblxuICBsZXQgb25SZWplY3QgPSAoKSA9PiByZWplY3QoKTtcblxuICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25SZWplY3QpO1xuXG4gIHRyeSB7XG4gICAgbGV0IGhhbmRsZXIgPSBtYXRjaC5yb3V0ZVt0eXBlXTtcbiAgICBpbnZhcmlhbnQoaGFuZGxlciwgXCJDb3VsZCBub3QgZmluZCB0aGUgXCIgKyB0eXBlICsgXCIgdG8gcnVuIG9uIHRoZSBcXFwiXCIgKyBtYXRjaC5yb3V0ZS5pZCArIFwiXFxcIiByb3V0ZVwiKTtcbiAgICByZXN1bHQgPSBhd2FpdCBQcm9taXNlLnJhY2UoW2hhbmRsZXIoe1xuICAgICAgcmVxdWVzdCxcbiAgICAgIHBhcmFtczogbWF0Y2gucGFyYW1zLFxuICAgICAgY29udGV4dDogcmVxdWVzdENvbnRleHRcbiAgICB9KSwgYWJvcnRQcm9taXNlXSk7XG4gICAgaW52YXJpYW50KHJlc3VsdCAhPT0gdW5kZWZpbmVkLCBcIllvdSBkZWZpbmVkIFwiICsgKHR5cGUgPT09IFwiYWN0aW9uXCIgPyBcImFuIGFjdGlvblwiIDogXCJhIGxvYWRlclwiKSArIFwiIGZvciByb3V0ZSBcIiArIChcIlxcXCJcIiArIG1hdGNoLnJvdXRlLmlkICsgXCJcXFwiIGJ1dCBkaWRuJ3QgcmV0dXJuIGFueXRoaW5nIGZyb20geW91ciBgXCIgKyB0eXBlICsgXCJgIFwiKSArIFwiZnVuY3Rpb24uIFBsZWFzZSByZXR1cm4gYSB2YWx1ZSBvciBgbnVsbGAuXCIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmVzdWx0VHlwZSA9IFJlc3VsdFR5cGUuZXJyb3I7XG4gICAgcmVzdWx0ID0gZTtcbiAgfSBmaW5hbGx5IHtcbiAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25SZWplY3QpO1xuICB9XG5cbiAgaWYgKGlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgIGxldCBzdGF0dXMgPSByZXN1bHQuc3RhdHVzOyAvLyBQcm9jZXNzIHJlZGlyZWN0c1xuXG4gICAgaWYgKHJlZGlyZWN0U3RhdHVzQ29kZXMuaGFzKHN0YXR1cykpIHtcbiAgICAgIGxldCBsb2NhdGlvbiA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICAgICAgaW52YXJpYW50KGxvY2F0aW9uLCBcIlJlZGlyZWN0cyByZXR1cm5lZC90aHJvd24gZnJvbSBsb2FkZXJzL2FjdGlvbnMgbXVzdCBoYXZlIGEgTG9jYXRpb24gaGVhZGVyXCIpOyAvLyBTdXBwb3J0IHJlbGF0aXZlIHJvdXRpbmcgaW4gaW50ZXJuYWwgcmVkaXJlY3RzXG5cbiAgICAgIGlmICghQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QobG9jYXRpb24pKSB7XG4gICAgICAgIGxldCBhY3RpdmVNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgwLCBtYXRjaGVzLmluZGV4T2YobWF0Y2gpICsgMSk7XG4gICAgICAgIGxldCByb3V0ZVBhdGhuYW1lcyA9IGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKGFjdGl2ZU1hdGNoZXMpLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpO1xuICAgICAgICBsZXQgcmVzb2x2ZWRMb2NhdGlvbiA9IHJlc29sdmVUbyhsb2NhdGlvbiwgcm91dGVQYXRobmFtZXMsIG5ldyBVUkwocmVxdWVzdC51cmwpLnBhdGhuYW1lKTtcbiAgICAgICAgaW52YXJpYW50KGNyZWF0ZVBhdGgocmVzb2x2ZWRMb2NhdGlvbiksIFwiVW5hYmxlIHRvIHJlc29sdmUgcmVkaXJlY3QgbG9jYXRpb246IFwiICsgbG9jYXRpb24pOyAvLyBQcmVwZW5kIHRoZSBiYXNlbmFtZSB0byB0aGUgcmVkaXJlY3QgbG9jYXRpb24gaWYgd2UgaGF2ZSBvbmVcblxuICAgICAgICBpZiAoYmFzZW5hbWUpIHtcbiAgICAgICAgICBsZXQgcGF0aCA9IHJlc29sdmVkTG9jYXRpb24ucGF0aG5hbWU7XG4gICAgICAgICAgcmVzb2x2ZWRMb2NhdGlvbi5wYXRobmFtZSA9IHBhdGggPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoXSk7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhdGlvbiA9IGNyZWF0ZVBhdGgocmVzb2x2ZWRMb2NhdGlvbik7XG4gICAgICB9IGVsc2UgaWYgKCFpc1N0YXRpY1JlcXVlc3QpIHtcbiAgICAgICAgLy8gU3RyaXAgb2ZmIHRoZSBwcm90b2NvbCtvcmlnaW4gZm9yIHNhbWUtb3JpZ2luICsgc2FtZS1iYXNlbmFtZSBhYnNvbHV0ZVxuICAgICAgICAvLyByZWRpcmVjdHMuIElmIHRoaXMgaXMgYSBzdGF0aWMgcmVxdWVzdCwgd2UgY2FuIGxldCBpdCBnbyBiYWNrIHRvIHRoZVxuICAgICAgICAvLyBicm93c2VyIGFzLWlzXG4gICAgICAgIGxldCBjdXJyZW50VXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgICAgIGxldCB1cmwgPSBsb2NhdGlvbi5zdGFydHNXaXRoKFwiLy9cIikgPyBuZXcgVVJMKGN1cnJlbnRVcmwucHJvdG9jb2wgKyBsb2NhdGlvbikgOiBuZXcgVVJMKGxvY2F0aW9uKTtcbiAgICAgICAgbGV0IGlzU2FtZUJhc2VuYW1lID0gc3RyaXBCYXNlbmFtZSh1cmwucGF0aG5hbWUsIGJhc2VuYW1lKSAhPSBudWxsO1xuXG4gICAgICAgIGlmICh1cmwub3JpZ2luID09PSBjdXJyZW50VXJsLm9yaWdpbiAmJiBpc1NhbWVCYXNlbmFtZSkge1xuICAgICAgICAgIGxvY2F0aW9uID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaCArIHVybC5oYXNoO1xuICAgICAgICB9XG4gICAgICB9IC8vIERvbid0IHByb2Nlc3MgcmVkaXJlY3RzIGluIHRoZSByb3V0ZXIgZHVyaW5nIHN0YXRpYyByZXF1ZXN0cyByZXF1ZXN0cy5cbiAgICAgIC8vIEluc3RlYWQsIHRocm93IHRoZSBSZXNwb25zZSBhbmQgbGV0IHRoZSBzZXJ2ZXIgaGFuZGxlIGl0IHdpdGggYW4gSFRUUFxuICAgICAgLy8gcmVkaXJlY3QuICBXZSBhbHNvIHVwZGF0ZSB0aGUgTG9jYXRpb24gaGVhZGVyIGluIHBsYWNlIGluIHRoaXMgZmxvdyBzb1xuICAgICAgLy8gYmFzZW5hbWUgYW5kIHJlbGF0aXZlIHJvdXRpbmcgaXMgdGFrZW4gaW50byBhY2NvdW50XG5cblxuICAgICAgaWYgKGlzU3RhdGljUmVxdWVzdCkge1xuICAgICAgICByZXN1bHQuaGVhZGVycy5zZXQoXCJMb2NhdGlvblwiLCBsb2NhdGlvbik7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5yZWRpcmVjdCxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgcmV2YWxpZGF0ZTogcmVzdWx0LmhlYWRlcnMuZ2V0KFwiWC1SZW1peC1SZXZhbGlkYXRlXCIpICE9PSBudWxsXG4gICAgICB9O1xuICAgIH0gLy8gRm9yIFNTUiBzaW5nbGUtcm91dGUgcmVxdWVzdHMsIHdlIHdhbnQgdG8gaGFuZCBSZXNwb25zZXMgYmFjayBkaXJlY3RseVxuICAgIC8vIHdpdGhvdXQgdW53cmFwcGluZy4gIFdlIGRvIHRoaXMgd2l0aCB0aGUgUXVlcnlSb3V0ZVJlc3BvbnNlIHdyYXBwZXJcbiAgICAvLyBpbnRlcmZhY2Ugc28gd2UgY2FuIGtub3cgd2hldGhlciBpdCB3YXMgcmV0dXJuZWQgb3IgdGhyb3duXG5cblxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgICAgIHRocm93IHtcbiAgICAgICAgdHlwZTogcmVzdWx0VHlwZSB8fCBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgIHJlc3BvbnNlOiByZXN1bHRcbiAgICAgIH07XG4gICAgfVxuXG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGNvbnRlbnRUeXBlID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpOyAvLyBDaGVjayBiZXR3ZWVuIHdvcmQgYm91bmRhcmllcyBpbnN0ZWFkIG9mIHN0YXJ0c1dpdGgoKSBkdWUgdG8gdGhlIGxhc3RcbiAgICAvLyBwYXJhZ3JhcGggb2YgaHR0cHM6Ly9odHRwd2cub3JnL3NwZWNzL3JmYzkxMTAuaHRtbCNmaWVsZC5jb250ZW50LXR5cGVcblxuICAgIGlmIChjb250ZW50VHlwZSAmJiAvXFxiYXBwbGljYXRpb25cXC9qc29uXFxiLy50ZXN0KGNvbnRlbnRUeXBlKSkge1xuICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC5qc29uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBhd2FpdCByZXN1bHQudGV4dCgpO1xuICAgIH1cblxuICAgIGlmIChyZXN1bHRUeXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiByZXN1bHRUeXBlLFxuICAgICAgICBlcnJvcjogbmV3IEVycm9yUmVzcG9uc2Uoc3RhdHVzLCByZXN1bHQuc3RhdHVzVGV4dCwgZGF0YSksXG4gICAgICAgIGhlYWRlcnM6IHJlc3VsdC5oZWFkZXJzXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICBkYXRhLFxuICAgICAgc3RhdHVzQ29kZTogcmVzdWx0LnN0YXR1cyxcbiAgICAgIGhlYWRlcnM6IHJlc3VsdC5oZWFkZXJzXG4gICAgfTtcbiAgfVxuXG4gIGlmIChyZXN1bHRUeXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IHJlc3VsdFR5cGUsXG4gICAgICBlcnJvcjogcmVzdWx0XG4gICAgfTtcbiAgfVxuXG4gIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBEZWZlcnJlZERhdGEpIHtcbiAgICB2YXIgX3Jlc3VsdCRpbml0LCBfcmVzdWx0JGluaXQyO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGVmZXJyZWQsXG4gICAgICBkZWZlcnJlZERhdGE6IHJlc3VsdCxcbiAgICAgIHN0YXR1c0NvZGU6IChfcmVzdWx0JGluaXQgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdC5zdGF0dXMsXG4gICAgICBoZWFkZXJzOiAoKF9yZXN1bHQkaW5pdDIgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdDIuaGVhZGVycykgJiYgbmV3IEhlYWRlcnMocmVzdWx0LmluaXQuaGVhZGVycylcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0XG4gIH07XG59IC8vIFV0aWxpdHkgbWV0aG9kIGZvciBjcmVhdGluZyB0aGUgUmVxdWVzdCBpbnN0YW5jZXMgZm9yIGxvYWRlcnMvYWN0aW9ucyBkdXJpbmdcbi8vIGNsaWVudC1zaWRlIG5hdmlnYXRpb25zIGFuZCBmZXRjaGVzLiAgRHVyaW5nIFNTUiB3ZSB3aWxsIGFsd2F5cyBoYXZlIGFcbi8vIFJlcXVlc3QgaW5zdGFuY2UgZnJvbSB0aGUgc3RhdGljIGhhbmRsZXIgKHF1ZXJ5L3F1ZXJ5Um91dGUpXG5cblxuZnVuY3Rpb24gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaGlzdG9yeSwgbG9jYXRpb24sIHNpZ25hbCwgc3VibWlzc2lvbikge1xuICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVVUkwoc3RyaXBIYXNoRnJvbVBhdGgobG9jYXRpb24pKS50b1N0cmluZygpO1xuICBsZXQgaW5pdCA9IHtcbiAgICBzaWduYWxcbiAgfTtcblxuICBpZiAoc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICBsZXQge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGFcbiAgICB9ID0gc3VibWlzc2lvbjtcbiAgICBpbml0Lm1ldGhvZCA9IGZvcm1NZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICBpbml0LmJvZHkgPSBmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiA/IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKGZvcm1EYXRhKSA6IGZvcm1EYXRhO1xuICB9IC8vIENvbnRlbnQtVHlwZSBpcyBpbmZlcnJlZCAoaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0KVxuXG5cbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHVybCwgaW5pdCk7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKGZvcm1EYXRhKSB7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG5cbiAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIGZvcm1EYXRhLmVudHJpZXMoKSkge1xuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2NvbnZlcnRpbmctYW4tZW50cnktbGlzdC10by1hLWxpc3Qtb2YtbmFtZS12YWx1ZS1wYWlyc1xuICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSBpbnN0YW5jZW9mIEZpbGUgPyB2YWx1ZS5uYW1lIDogdmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nRXJyb3IsIGFjdGl2ZURlZmVycmVkcykge1xuICAvLyBGaWxsIGluIGxvYWRlckRhdGEvZXJyb3JzIGZyb20gb3VyIGxvYWRlcnNcbiAgbGV0IGxvYWRlckRhdGEgPSB7fTtcbiAgbGV0IGVycm9ycyA9IG51bGw7XG4gIGxldCBzdGF0dXNDb2RlO1xuICBsZXQgZm91bmRFcnJvciA9IGZhbHNlO1xuICBsZXQgbG9hZGVySGVhZGVycyA9IHt9OyAvLyBQcm9jZXNzIGxvYWRlciByZXN1bHRzIGludG8gc3RhdGUubG9hZGVyRGF0YS9zdGF0ZS5lcnJvcnNcblxuICByZXN1bHRzLmZvckVhY2goKHJlc3VsdCwgaW5kZXgpID0+IHtcbiAgICBsZXQgaWQgPSBtYXRjaGVzVG9Mb2FkW2luZGV4XS5yb3V0ZS5pZDtcbiAgICBpbnZhcmlhbnQoIWlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSwgXCJDYW5ub3QgaGFuZGxlIHJlZGlyZWN0IHJlc3VsdHMgaW4gcHJvY2Vzc0xvYWRlckRhdGFcIik7XG5cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBMb29rIHVwd2FyZHMgZnJvbSB0aGUgbWF0Y2hlZCByb3V0ZSBmb3IgdGhlIGNsb3Nlc3QgYW5jZXN0b3JcbiAgICAgIC8vIGVycm9yIGJvdW5kYXJ5LCBkZWZhdWx0aW5nIHRvIHRoZSByb290IG1hdGNoXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgaWQpO1xuICAgICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9yOyAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZyBhY3Rpb24gZXJyb3IsIHdlIHJlcG9ydCBpdCBhdCB0aGUgaGlnaGVzdC1yb3V0ZVxuICAgICAgLy8gdGhhdCB0aHJvd3MgYSBsb2FkZXIgZXJyb3IsIGFuZCB0aGVuIGNsZWFyIGl0IG91dCB0byBpbmRpY2F0ZSB0aGF0XG4gICAgICAvLyBpdCB3YXMgY29uc3VtZWRcblxuICAgICAgaWYgKHBlbmRpbmdFcnJvcikge1xuICAgICAgICBlcnJvciA9IE9iamVjdC52YWx1ZXMocGVuZGluZ0Vycm9yKVswXTtcbiAgICAgICAgcGVuZGluZ0Vycm9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBlcnJvcnMgPSBlcnJvcnMgfHwge307IC8vIFByZWZlciBoaWdoZXIgZXJyb3IgdmFsdWVzIGlmIGxvd2VyIGVycm9ycyBidWJibGUgdG8gdGhlIHNhbWUgYm91bmRhcnlcblxuICAgICAgaWYgKGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSA9PSBudWxsKSB7XG4gICAgICAgIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSA9IGVycm9yO1xuICAgICAgfSAvLyBDbGVhciBvdXIgYW55IHByaW9yIGxvYWRlckRhdGEgZm9yIHRoZSB0aHJvd2luZyByb3V0ZVxuXG5cbiAgICAgIGxvYWRlckRhdGFbaWRdID0gdW5kZWZpbmVkOyAvLyBPbmNlIHdlIGZpbmQgb3VyIGZpcnN0IChoaWdoZXN0KSBlcnJvciwgd2Ugc2V0IHRoZSBzdGF0dXMgY29kZSBhbmRcbiAgICAgIC8vIHByZXZlbnQgZGVlcGVyIHN0YXR1cyBjb2RlcyBmcm9tIG92ZXJyaWRpbmdcblxuICAgICAgaWYgKCFmb3VuZEVycm9yKSB7XG4gICAgICAgIGZvdW5kRXJyb3IgPSB0cnVlO1xuICAgICAgICBzdGF0dXNDb2RlID0gaXNSb3V0ZUVycm9yUmVzcG9uc2UocmVzdWx0LmVycm9yKSA/IHJlc3VsdC5lcnJvci5zdGF0dXMgOiA1MDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXN1bHQuaGVhZGVycykge1xuICAgICAgICBsb2FkZXJIZWFkZXJzW2lkXSA9IHJlc3VsdC5oZWFkZXJzO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5zZXQoaWQsIHJlc3VsdC5kZWZlcnJlZERhdGEpO1xuICAgICAgICBsb2FkZXJEYXRhW2lkXSA9IHJlc3VsdC5kZWZlcnJlZERhdGEuZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRlckRhdGFbaWRdID0gcmVzdWx0LmRhdGE7XG4gICAgICB9IC8vIEVycm9yIHN0YXR1cyBjb2RlcyBhbHdheXMgb3ZlcnJpZGUgc3VjY2VzcyBzdGF0dXMgY29kZXMsIGJ1dCBpZiBhbGxcbiAgICAgIC8vIGxvYWRlcnMgYXJlIHN1Y2Nlc3NmdWwgd2UgdGFrZSB0aGUgZGVlcGVzdCBzdGF0dXMgY29kZS5cblxuXG4gICAgICBpZiAocmVzdWx0LnN0YXR1c0NvZGUgIT0gbnVsbCAmJiByZXN1bHQuc3RhdHVzQ29kZSAhPT0gMjAwICYmICFmb3VuZEVycm9yKSB7XG4gICAgICAgIHN0YXR1c0NvZGUgPSByZXN1bHQuc3RhdHVzQ29kZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfVxuICB9KTsgLy8gSWYgd2UgZGlkbid0IGNvbnN1bWUgdGhlIHBlbmRpbmcgYWN0aW9uIGVycm9yIChpLmUuLCBhbGwgbG9hZGVyc1xuICAvLyByZXNvbHZlZCksIHRoZW4gY29uc3VtZSBpdCBoZXJlLiAgQWxzbyBjbGVhciBvdXQgYW55IGxvYWRlckRhdGEgZm9yIHRoZVxuICAvLyB0aHJvd2luZyByb3V0ZVxuXG4gIGlmIChwZW5kaW5nRXJyb3IpIHtcbiAgICBlcnJvcnMgPSBwZW5kaW5nRXJyb3I7XG4gICAgbG9hZGVyRGF0YVtPYmplY3Qua2V5cyhwZW5kaW5nRXJyb3IpWzBdXSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnMsXG4gICAgc3RhdHVzQ29kZTogc3RhdHVzQ29kZSB8fCAyMDAsXG4gICAgbG9hZGVySGVhZGVyc1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcykge1xuICBsZXQge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH0gPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdFcnJvciwgYWN0aXZlRGVmZXJyZWRzKTsgLy8gUHJvY2VzcyByZXN1bHRzIGZyb20gb3VyIHJldmFsaWRhdGluZyBmZXRjaGVyc1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBsZXQge1xuICAgICAga2V5LFxuICAgICAgbWF0Y2hcbiAgICB9ID0gcmV2YWxpZGF0aW5nRmV0Y2hlcnNbaW5kZXhdO1xuICAgIGludmFyaWFudChmZXRjaGVyUmVzdWx0cyAhPT0gdW5kZWZpbmVkICYmIGZldGNoZXJSZXN1bHRzW2luZGV4XSAhPT0gdW5kZWZpbmVkLCBcIkRpZCBub3QgZmluZCBjb3JyZXNwb25kaW5nIGZldGNoZXIgcmVzdWx0XCIpO1xuICAgIGxldCByZXN1bHQgPSBmZXRjaGVyUmVzdWx0c1tpbmRleF07IC8vIFByb2Nlc3MgZmV0Y2hlciBub24tcmVkaXJlY3QgZXJyb3JzXG5cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgbWF0Y2ggPT0gbnVsbCA/IHZvaWQgMCA6IG1hdGNoLnJvdXRlLmlkKTtcblxuICAgICAgaWYgKCEoZXJyb3JzICYmIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSkpIHtcbiAgICAgICAgZXJyb3JzID0gX2V4dGVuZHMoe30sIGVycm9ycywge1xuICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICB9IGVsc2UgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLCByZWRpcmVjdHMgc2hvdWxkIGdldCBwcm9jZXNzZWQgYWJvdmUsIGJ1dCB3ZVxuICAgICAgLy8ga2VlcCB0aGlzIHRvIHR5cGUgbmFycm93IHRvIGEgc3VjY2VzcyByZXN1bHQgaW4gdGhlIGVsc2VcbiAgICAgIGludmFyaWFudChmYWxzZSwgXCJVbmhhbmRsZWQgZmV0Y2hlciByZXZhbGlkYXRpb24gcmVkaXJlY3RcIik7XG4gICAgfSBlbHNlIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFNob3VsZCBuZXZlciBnZXQgaGVyZSwgZGVmZXJyZWQgZGF0YSBzaG91bGQgYmUgYXdhaXRlZCBmb3IgZmV0Y2hlcnNcbiAgICAgIC8vIGluIHJlc29sdmVEZWZlcnJlZFJlc3VsdHNcbiAgICAgIGludmFyaWFudChmYWxzZSwgXCJVbmhhbmRsZWQgZmV0Y2hlciBkZWZlcnJlZCBkYXRhXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgZG9uZUZldGNoZXIgPSB7XG4gICAgICAgIHN0YXRlOiBcImlkbGVcIixcbiAgICAgICAgZGF0YTogcmVzdWx0LmRhdGEsXG4gICAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1lcmdlTG9hZGVyRGF0YShsb2FkZXJEYXRhLCBuZXdMb2FkZXJEYXRhLCBtYXRjaGVzLCBlcnJvcnMpIHtcbiAgbGV0IG1lcmdlZExvYWRlckRhdGEgPSBfZXh0ZW5kcyh7fSwgbmV3TG9hZGVyRGF0YSk7XG5cbiAgZm9yIChsZXQgbWF0Y2ggb2YgbWF0Y2hlcykge1xuICAgIGxldCBpZCA9IG1hdGNoLnJvdXRlLmlkO1xuXG4gICAgaWYgKG5ld0xvYWRlckRhdGEuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICBpZiAobmV3TG9hZGVyRGF0YVtpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtZXJnZWRMb2FkZXJEYXRhW2lkXSA9IG5ld0xvYWRlckRhdGFbaWRdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobG9hZGVyRGF0YVtpZF0gIT09IHVuZGVmaW5lZCAmJiBtYXRjaC5yb3V0ZS5sb2FkZXIpIHtcbiAgICAgIC8vIFByZXNlcnZlIGV4aXN0aW5nIGtleXMgbm90IGluY2x1ZGVkIGluIG5ld0xvYWRlckRhdGEgYW5kIHdoZXJlIGEgbG9hZGVyXG4gICAgICAvLyB3YXNuJ3QgcmVtb3ZlZCBieSBITVJcbiAgICAgIG1lcmdlZExvYWRlckRhdGFbaWRdID0gbG9hZGVyRGF0YVtpZF07XG4gICAgfVxuXG4gICAgaWYgKGVycm9ycyAmJiBlcnJvcnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAvLyBEb24ndCBrZWVwIGFueSBsb2FkZXIgZGF0YSBiZWxvdyB0aGUgYm91bmRhcnlcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtZXJnZWRMb2FkZXJEYXRhO1xufSAvLyBGaW5kIHRoZSBuZWFyZXN0IGVycm9yIGJvdW5kYXJ5LCBsb29raW5nIHVwd2FyZHMgZnJvbSB0aGUgbGVhZiByb3V0ZSAob3IgdGhlXG4vLyByb3V0ZSBzcGVjaWZpZWQgYnkgcm91dGVJZCkgZm9yIHRoZSBjbG9zZXN0IGFuY2VzdG9yIGVycm9yIGJvdW5kYXJ5LFxuLy8gZGVmYXVsdGluZyB0byB0aGUgcm9vdCBtYXRjaFxuXG5cbmZ1bmN0aW9uIGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgcm91dGVJZCkge1xuICBsZXQgZWxpZ2libGVNYXRjaGVzID0gcm91dGVJZCA/IG1hdGNoZXMuc2xpY2UoMCwgbWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSArIDEpIDogWy4uLm1hdGNoZXNdO1xuICByZXR1cm4gZWxpZ2libGVNYXRjaGVzLnJldmVyc2UoKS5maW5kKG0gPT4gbS5yb3V0ZS5oYXNFcnJvckJvdW5kYXJ5ID09PSB0cnVlKSB8fCBtYXRjaGVzWzBdO1xufVxuXG5mdW5jdGlvbiBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlcykge1xuICAvLyBQcmVmZXIgYSByb290IGxheW91dCByb3V0ZSBpZiBwcmVzZW50LCBvdGhlcndpc2Ugc2hpbSBpbiBhIHJvdXRlIG9iamVjdFxuICBsZXQgcm91dGUgPSByb3V0ZXMuZmluZChyID0+IHIuaW5kZXggfHwgIXIucGF0aCB8fCByLnBhdGggPT09IFwiL1wiKSB8fCB7XG4gICAgaWQ6IFwiX19zaGltLWVycm9yLXJvdXRlX19cIlxuICB9O1xuICByZXR1cm4ge1xuICAgIG1hdGNoZXM6IFt7XG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgcGF0aG5hbWU6IFwiXCIsXG4gICAgICBwYXRobmFtZUJhc2U6IFwiXCIsXG4gICAgICByb3V0ZVxuICAgIH1dLFxuICAgIHJvdXRlXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEludGVybmFsUm91dGVyRXJyb3Ioc3RhdHVzLCBfdGVtcDQpIHtcbiAgbGV0IHtcbiAgICBwYXRobmFtZSxcbiAgICByb3V0ZUlkLFxuICAgIG1ldGhvZCxcbiAgICB0eXBlXG4gIH0gPSBfdGVtcDQgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA0O1xuICBsZXQgc3RhdHVzVGV4dCA9IFwiVW5rbm93biBTZXJ2ZXIgRXJyb3JcIjtcbiAgbGV0IGVycm9yTWVzc2FnZSA9IFwiVW5rbm93biBAcmVtaXgtcnVuL3JvdXRlciBlcnJvclwiO1xuXG4gIGlmIChzdGF0dXMgPT09IDQwMCkge1xuICAgIHN0YXR1c1RleHQgPSBcIkJhZCBSZXF1ZXN0XCI7XG5cbiAgICBpZiAobWV0aG9kICYmIHBhdGhuYW1lICYmIHJvdXRlSWQpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiWW91IG1hZGUgYSBcIiArIG1ldGhvZCArIFwiIHJlcXVlc3QgdG8gXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCIgYnV0IFwiICsgKFwiZGlkIG5vdCBwcm92aWRlIGEgYGxvYWRlcmAgZm9yIHJvdXRlIFxcXCJcIiArIHJvdXRlSWQgKyBcIlxcXCIsIFwiKSArIFwic28gdGhlcmUgaXMgbm8gd2F5IHRvIGhhbmRsZSB0aGUgcmVxdWVzdC5cIjtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiZGVmZXItYWN0aW9uXCIpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiZGVmZXIoKSBpcyBub3Qgc3VwcG9ydGVkIGluIGFjdGlvbnNcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDMpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJGb3JiaWRkZW5cIjtcbiAgICBlcnJvck1lc3NhZ2UgPSBcIlJvdXRlIFxcXCJcIiArIHJvdXRlSWQgKyBcIlxcXCIgZG9lcyBub3QgbWF0Y2ggVVJMIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiXCI7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDQpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJOb3QgRm91bmRcIjtcbiAgICBlcnJvck1lc3NhZ2UgPSBcIk5vIHJvdXRlIG1hdGNoZXMgVVJMIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiXCI7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDUpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJNZXRob2QgTm90IEFsbG93ZWRcIjtcblxuICAgIGlmIChtZXRob2QgJiYgcGF0aG5hbWUgJiYgcm91dGVJZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJZb3UgbWFkZSBhIFwiICsgbWV0aG9kLnRvVXBwZXJDYXNlKCkgKyBcIiByZXF1ZXN0IHRvIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiIGJ1dCBcIiArIChcImRpZCBub3QgcHJvdmlkZSBhbiBgYWN0aW9uYCBmb3Igcm91dGUgXFxcIlwiICsgcm91dGVJZCArIFwiXFxcIiwgXCIpICsgXCJzbyB0aGVyZSBpcyBubyB3YXkgdG8gaGFuZGxlIHRoZSByZXF1ZXN0LlwiO1xuICAgIH0gZWxzZSBpZiAobWV0aG9kKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgcmVxdWVzdCBtZXRob2QgXFxcIlwiICsgbWV0aG9kLnRvVXBwZXJDYXNlKCkgKyBcIlxcXCJcIjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IEVycm9yUmVzcG9uc2Uoc3RhdHVzIHx8IDUwMCwgc3RhdHVzVGV4dCwgbmV3IEVycm9yKGVycm9yTWVzc2FnZSksIHRydWUpO1xufSAvLyBGaW5kIGFueSByZXR1cm5lZCByZWRpcmVjdCBlcnJvcnMsIHN0YXJ0aW5nIGZyb20gdGhlIGxvd2VzdCBtYXRjaFxuXG5cbmZ1bmN0aW9uIGZpbmRSZWRpcmVjdChyZXN1bHRzKSB7XG4gIGZvciAobGV0IGkgPSByZXN1bHRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaV07XG5cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzdHJpcEhhc2hGcm9tUGF0aChwYXRoKSB7XG4gIGxldCBwYXJzZWRQYXRoID0gdHlwZW9mIHBhdGggPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgocGF0aCkgOiBwYXRoO1xuICByZXR1cm4gY3JlYXRlUGF0aChfZXh0ZW5kcyh7fSwgcGFyc2VkUGF0aCwge1xuICAgIGhhc2g6IFwiXCJcbiAgfSkpO1xufVxuXG5mdW5jdGlvbiBpc0hhc2hDaGFuZ2VPbmx5KGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCAhPT0gYi5oYXNoO1xufVxuXG5mdW5jdGlvbiBpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gcmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZGVmZXJyZWQ7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3JSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiByZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcjtcbn1cblxuZnVuY3Rpb24gaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIChyZXN1bHQgJiYgcmVzdWx0LnR5cGUpID09PSBSZXN1bHRUeXBlLnJlZGlyZWN0O1xufVxuXG5mdW5jdGlvbiBpc1Jlc3BvbnNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZS5zdGF0dXMgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIHZhbHVlLnN0YXR1c1RleHQgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHZhbHVlLmhlYWRlcnMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlLmJvZHkgIT09IFwidW5kZWZpbmVkXCI7XG59XG5cbmZ1bmN0aW9uIGlzUmVkaXJlY3RSZXNwb25zZShyZXN1bHQpIHtcbiAgaWYgKCFpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBsZXQgc3RhdHVzID0gcmVzdWx0LnN0YXR1cztcbiAgbGV0IGxvY2F0aW9uID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIik7XG4gIHJldHVybiBzdGF0dXMgPj0gMzAwICYmIHN0YXR1cyA8PSAzOTkgJiYgbG9jYXRpb24gIT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNRdWVyeVJvdXRlUmVzcG9uc2Uob2JqKSB7XG4gIHJldHVybiBvYmogJiYgaXNSZXNwb25zZShvYmoucmVzcG9uc2UpICYmIChvYmoudHlwZSA9PT0gUmVzdWx0VHlwZS5kYXRhIHx8IFJlc3VsdFR5cGUuZXJyb3IpO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkTWV0aG9kKG1ldGhvZCkge1xuICByZXR1cm4gdmFsaWRSZXF1ZXN0TWV0aG9kcy5oYXMobWV0aG9kKTtcbn1cblxuZnVuY3Rpb24gaXNNdXRhdGlvbk1ldGhvZChtZXRob2QpIHtcbiAgcmV0dXJuIHZhbGlkTXV0YXRpb25NZXRob2RzLmhhcyhtZXRob2QpO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBzaWduYWwsIGlzRmV0Y2hlciwgY3VycmVudExvYWRlckRhdGEpIHtcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJlc3VsdHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaW5kZXhdO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdOyAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgbWF0Y2gsIHRoZW4gd2UgY2FuIGhhdmUgYSBkZWZlcnJlZCByZXN1bHQgdG8gZG9cbiAgICAvLyBhbnl0aGluZyB3aXRoLiAgVGhpcyBpcyBmb3IgcmV2YWxpZGF0aW5nIGZldGNoZXJzIHdoZXJlIHRoZSByb3V0ZSB3YXNcbiAgICAvLyByZW1vdmVkIGR1cmluZyBITVJcblxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGxldCBjdXJyZW50TWF0Y2ggPSBjdXJyZW50TWF0Y2hlcy5maW5kKG0gPT4gbS5yb3V0ZS5pZCA9PT0gbWF0Y2gucm91dGUuaWQpO1xuICAgIGxldCBpc1JldmFsaWRhdGluZ0xvYWRlciA9IGN1cnJlbnRNYXRjaCAhPSBudWxsICYmICFpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudE1hdGNoLCBtYXRjaCkgJiYgKGN1cnJlbnRMb2FkZXJEYXRhICYmIGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSkgIT09IHVuZGVmaW5lZDtcblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkgJiYgKGlzRmV0Y2hlciB8fCBpc1JldmFsaWRhdGluZ0xvYWRlcikpIHtcbiAgICAgIC8vIE5vdGU6IHdlIGRvIG5vdCBoYXZlIHRvIHRvdWNoIGFjdGl2ZURlZmVycmVkcyBoZXJlIHNpbmNlIHdlIHJhY2UgdGhlbVxuICAgICAgLy8gYWdhaW5zdCB0aGUgc2lnbmFsIGluIHJlc29sdmVEZWZlcnJlZERhdGEgYW5kIHRoZXknbGwgZ2V0IGFib3J0ZWRcbiAgICAgIC8vIHRoZXJlIGlmIG5lZWRlZFxuICAgICAgYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIHNpZ25hbCwgaXNGZXRjaGVyKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IHJlc3VsdCB8fCByZXN1bHRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBzaWduYWwsIHVud3JhcCkge1xuICBpZiAodW53cmFwID09PSB2b2lkIDApIHtcbiAgICB1bndyYXAgPSBmYWxzZTtcbiAgfVxuXG4gIGxldCBhYm9ydGVkID0gYXdhaXQgcmVzdWx0LmRlZmVycmVkRGF0YS5yZXNvbHZlRGF0YShzaWduYWwpO1xuXG4gIGlmIChhYm9ydGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHVud3JhcCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEudW53cmFwcGVkRGF0YVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBIYW5kbGUgYW55IFRyYWNrZWRQcm9taXNlLl9lcnJvciB2YWx1ZXMgZW5jb3VudGVyZWQgd2hpbGUgdW53cmFwcGluZ1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGVcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhXG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2gpIHtcbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMoc2VhcmNoKS5nZXRBbGwoXCJpbmRleFwiKS5zb21lKHYgPT4gdiA9PT0gXCJcIik7XG59IC8vIE5vdGU6IFRoaXMgc2hvdWxkIG1hdGNoIHRoZSBmb3JtYXQgZXhwb3J0ZWQgYnkgdXNlTWF0Y2hlcywgc28gaWYgeW91IGNoYW5nZVxuLy8gdGhpcyBwbGVhc2UgYWxzbyBjaGFuZ2UgdGhhdCA6KSAgRXZlbnR1YWxseSB3ZSdsbCBEUlkgdGhpcyB1cFxuXG5cbmZ1bmN0aW9uIGNyZWF0ZVVzZU1hdGNoZXNNYXRjaChtYXRjaCwgbG9hZGVyRGF0YSkge1xuICBsZXQge1xuICAgIHJvdXRlLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtc1xuICB9ID0gbWF0Y2g7XG4gIHJldHVybiB7XG4gICAgaWQ6IHJvdXRlLmlkLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtcyxcbiAgICBkYXRhOiBsb2FkZXJEYXRhW3JvdXRlLmlkXSxcbiAgICBoYW5kbGU6IHJvdXRlLmhhbmRsZVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbikge1xuICBsZXQgc2VhcmNoID0gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uKS5zZWFyY2ggOiBsb2NhdGlvbi5zZWFyY2g7XG5cbiAgaWYgKG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5pbmRleCAmJiBoYXNOYWtlZEluZGV4UXVlcnkoc2VhcmNoIHx8IFwiXCIpKSB7XG4gICAgLy8gUmV0dXJuIHRoZSBsZWFmIGluZGV4IHJvdXRlIHdoZW4gaW5kZXggaXMgcHJlc2VudFxuICAgIHJldHVybiBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIH0gLy8gT3RoZXJ3aXNlIGdyYWIgdGhlIGRlZXBlc3QgXCJwYXRoIGNvbnRyaWJ1dGluZ1wiIG1hdGNoIChpZ25vcmluZyBpbmRleCBhbmRcbiAgLy8gcGF0aGxlc3MgbGF5b3V0IHJvdXRlcylcblxuXG4gIGxldCBwYXRoTWF0Y2hlcyA9IGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpO1xuICByZXR1cm4gcGF0aE1hdGNoZXNbcGF0aE1hdGNoZXMubGVuZ3RoIC0gMV07XG59IC8vI2VuZHJlZ2lvblxuXG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQWN0aW9uLCBFcnJvclJlc3BvbnNlLCBJRExFX0JMT0NLRVIsIElETEVfRkVUQ0hFUiwgSURMRV9OQVZJR0FUSU9OLCBVTlNBRkVfREVGRVJSRURfU1lNQk9MLCBEZWZlcnJlZERhdGEgYXMgVU5TQUZFX0RlZmVycmVkRGF0YSwgY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyBhcyBVTlNBRkVfY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcywgZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMgYXMgVU5TQUZFX2dldFBhdGhDb250cmlidXRpbmdNYXRjaGVzLCBpbnZhcmlhbnQgYXMgVU5TQUZFX2ludmFyaWFudCwgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVQYXRoLCBjcmVhdGVSb3V0ZXIsIGNyZWF0ZVN0YXRpY0hhbmRsZXIsIGRlZmVyLCBnZW5lcmF0ZVBhdGgsIGdldFN0YXRpY0NvbnRleHRGcm9tRXJyb3IsIGdldFRvUGF0aG5hbWUsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBqb2luUGF0aHMsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIG5vcm1hbGl6ZVBhdGhuYW1lLCBwYXJzZVBhdGgsIHJlZGlyZWN0LCByZXNvbHZlUGF0aCwgcmVzb2x2ZVRvLCBzdHJpcEJhc2VuYW1lLCB3YXJuaW5nIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZXIuanMubWFwXG4iLCIvKipcbiAqIFJlYWN0IFJvdXRlciB2Ni44LjJcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0IHsgVU5TQUZFX2ludmFyaWFudCwgam9pblBhdGhzLCBtYXRjaFBhdGgsIFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcywgd2FybmluZywgcmVzb2x2ZVRvLCBwYXJzZVBhdGgsIG1hdGNoUm91dGVzLCBBY3Rpb24sIGlzUm91dGVFcnJvclJlc3BvbnNlLCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBzdHJpcEJhc2VuYW1lLCBBYm9ydGVkRGVmZXJyZWRFcnJvciwgY3JlYXRlUm91dGVyIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiBhcyBOYXZpZ2F0aW9uVHlwZSwgY3JlYXRlUGF0aCwgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlc29sdmVQYXRoIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cblxuZnVuY3Rpb24gaXNQb2x5ZmlsbCh4LCB5KSB7XG4gIHJldHVybiB4ID09PSB5ICYmICh4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSkgfHwgeCAhPT0geCAmJiB5ICE9PSB5IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIDtcbn1cblxuY29uc3QgaXMgPSB0eXBlb2YgT2JqZWN0LmlzID09PSBcImZ1bmN0aW9uXCIgPyBPYmplY3QuaXMgOiBpc1BvbHlmaWxsOyAvLyBJbnRlbnRpb25hbGx5IG5vdCB1c2luZyBuYW1lZCBpbXBvcnRzIGJlY2F1c2UgUm9sbHVwIHVzZXMgZHluYW1pY1xuLy8gZGlzcGF0Y2ggZm9yIENvbW1vbkpTIGludGVyb3AgbmFtZWQgaW1wb3J0cy5cblxuY29uc3Qge1xuICB1c2VTdGF0ZSxcbiAgdXNlRWZmZWN0LFxuICB1c2VMYXlvdXRFZmZlY3QsXG4gIHVzZURlYnVnVmFsdWVcbn0gPSBSZWFjdDtcbmxldCBkaWRXYXJuT2xkMThBbHBoYSA9IGZhbHNlO1xubGV0IGRpZFdhcm5VbmNhY2hlZEdldFNuYXBzaG90ID0gZmFsc2U7IC8vIERpc2NsYWltZXI6IFRoaXMgc2hpbSBicmVha3MgbWFueSBvZiB0aGUgcnVsZXMgb2YgUmVhY3QsIGFuZCBvbmx5IHdvcmtzXG4vLyBiZWNhdXNlIG9mIGEgdmVyeSBwYXJ0aWN1bGFyIHNldCBvZiBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIGFuZCBhc3N1bXB0aW9uc1xuLy8gLS0gY2hhbmdlIGFueSBvbmUgb2YgdGhlbSBhbmQgaXQgd2lsbCBicmVhay4gVGhlIG1vc3QgaW1wb3J0YW50IGFzc3VtcHRpb25cbi8vIGlzIHRoYXQgdXBkYXRlcyBhcmUgYWx3YXlzIHN5bmNocm9ub3VzLCBiZWNhdXNlIGNvbmN1cnJlbnQgcmVuZGVyaW5nIGlzXG4vLyBvbmx5IGF2YWlsYWJsZSBpbiB2ZXJzaW9ucyBvZiBSZWFjdCB0aGF0IGFsc28gaGF2ZSBhIGJ1aWx0LWluXG4vLyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSBBUEkuIEFuZCB3ZSBvbmx5IHVzZSB0aGlzIHNoaW0gd2hlbiB0aGUgYnVpbHQtaW4gQVBJXG4vLyBkb2VzIG5vdCBleGlzdC5cbi8vXG4vLyBEbyBub3QgYXNzdW1lIHRoYXQgdGhlIGNsZXZlciBoYWNrcyB1c2VkIGJ5IHRoaXMgaG9vayBhbHNvIHdvcmsgaW4gZ2VuZXJhbC5cbi8vIFRoZSBwb2ludCBvZiB0aGlzIHNoaW0gaXMgdG8gcmVwbGFjZSB0aGUgbmVlZCBmb3IgaGFja3MgYnkgb3RoZXIgbGlicmFyaWVzLlxuXG5mdW5jdGlvbiB1c2VTeW5jRXh0ZXJuYWxTdG9yZSQyKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIC8vIE5vdGU6IFRoZSBzaGltIGRvZXMgbm90IHVzZSBnZXRTZXJ2ZXJTbmFwc2hvdCwgYmVjYXVzZSBwcmUtMTggdmVyc2lvbnMgb2Zcbi8vIFJlYWN0IGRvIG5vdCBleHBvc2UgYSB3YXkgdG8gY2hlY2sgaWYgd2UncmUgaHlkcmF0aW5nLiBTbyB1c2VycyBvZiB0aGUgc2hpbVxuLy8gd2lsbCBuZWVkIHRvIHRyYWNrIHRoYXQgdGhlbXNlbHZlcyBhbmQgcmV0dXJuIHRoZSBjb3JyZWN0IHZhbHVlXG4vLyBmcm9tIGBnZXRTbmFwc2hvdGAuXG5nZXRTZXJ2ZXJTbmFwc2hvdCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKCFkaWRXYXJuT2xkMThBbHBoYSkge1xuICAgICAgaWYgKFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QpIHtcbiAgICAgICAgZGlkV2Fybk9sZDE4QWxwaGEgPSB0cnVlO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91IGFyZSB1c2luZyBhbiBvdXRkYXRlZCwgcHJlLXJlbGVhc2UgYWxwaGEgb2YgUmVhY3QgMTggdGhhdCBcIiArIFwiZG9lcyBub3Qgc3VwcG9ydCB1c2VTeW5jRXh0ZXJuYWxTdG9yZS4gVGhlIFwiICsgXCJ1c2Utc3luYy1leHRlcm5hbC1zdG9yZSBzaGltIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5LiBVcGdyYWRlIFwiICsgXCJ0byBhIG5ld2VyIHByZS1yZWxlYXNlLlwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gUmVhZCB0aGUgY3VycmVudCBzbmFwc2hvdCBmcm9tIHRoZSBzdG9yZSBvbiBldmVyeSByZW5kZXIuIEFnYWluLCB0aGlzXG4gIC8vIGJyZWFrcyB0aGUgcnVsZXMgb2YgUmVhY3QsIGFuZCBvbmx5IHdvcmtzIGhlcmUgYmVjYXVzZSBvZiBzcGVjaWZpY1xuICAvLyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzLCBtb3N0IGltcG9ydGFudGx5IHRoYXQgdXBkYXRlcyBhcmVcbiAgLy8gYWx3YXlzIHN5bmNocm9ub3VzLlxuXG5cbiAgY29uc3QgdmFsdWUgPSBnZXRTbmFwc2hvdCgpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAoIWRpZFdhcm5VbmNhY2hlZEdldFNuYXBzaG90KSB7XG4gICAgICBjb25zdCBjYWNoZWRWYWx1ZSA9IGdldFNuYXBzaG90KCk7XG5cbiAgICAgIGlmICghaXModmFsdWUsIGNhY2hlZFZhbHVlKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhlIHJlc3VsdCBvZiBnZXRTbmFwc2hvdCBzaG91bGQgYmUgY2FjaGVkIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3BcIik7XG4gICAgICAgIGRpZFdhcm5VbmNhY2hlZEdldFNuYXBzaG90ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gQmVjYXVzZSB1cGRhdGVzIGFyZSBzeW5jaHJvbm91cywgd2UgZG9uJ3QgcXVldWUgdGhlbS4gSW5zdGVhZCB3ZSBmb3JjZSBhXG4gIC8vIHJlLXJlbmRlciB3aGVuZXZlciB0aGUgc3Vic2NyaWJlZCBzdGF0ZSBjaGFuZ2VzIGJ5IHVwZGF0aW5nIGFuIHNvbWVcbiAgLy8gYXJiaXRyYXJ5IHVzZVN0YXRlIGhvb2suIFRoZW4sIGR1cmluZyByZW5kZXIsIHdlIGNhbGwgZ2V0U25hcHNob3QgdG8gcmVhZFxuICAvLyB0aGUgY3VycmVudCB2YWx1ZS5cbiAgLy9cbiAgLy8gQmVjYXVzZSB3ZSBkb24ndCBhY3R1YWxseSB1c2UgdGhlIHN0YXRlIHJldHVybmVkIGJ5IHRoZSB1c2VTdGF0ZSBob29rLCB3ZVxuICAvLyBjYW4gc2F2ZSBhIGJpdCBvZiBtZW1vcnkgYnkgc3RvcmluZyBvdGhlciBzdHVmZiBpbiB0aGF0IHNsb3QuXG4gIC8vXG4gIC8vIFRvIGltcGxlbWVudCB0aGUgZWFybHkgYmFpbG91dCwgd2UgbmVlZCB0byB0cmFjayBzb21lIHRoaW5ncyBvbiBhIG11dGFibGVcbiAgLy8gb2JqZWN0LiBVc3VhbGx5LCB3ZSB3b3VsZCBwdXQgdGhhdCBpbiBhIHVzZVJlZiBob29rLCBidXQgd2UgY2FuIHN0YXNoIGl0IGluXG4gIC8vIG91ciB1c2VTdGF0ZSBob29rIGluc3RlYWQuXG4gIC8vXG4gIC8vIFRvIGZvcmNlIGEgcmUtcmVuZGVyLCB3ZSBjYWxsIGZvcmNlVXBkYXRlKHtpbnN0fSkuIFRoYXQgd29ya3MgYmVjYXVzZSB0aGVcbiAgLy8gbmV3IG9iamVjdCBhbHdheXMgZmFpbHMgYW4gZXF1YWxpdHkgY2hlY2suXG5cblxuICBjb25zdCBbe1xuICAgIGluc3RcbiAgfSwgZm9yY2VVcGRhdGVdID0gdXNlU3RhdGUoe1xuICAgIGluc3Q6IHtcbiAgICAgIHZhbHVlLFxuICAgICAgZ2V0U25hcHNob3RcbiAgICB9XG4gIH0pOyAvLyBUcmFjayB0aGUgbGF0ZXN0IGdldFNuYXBzaG90IGZ1bmN0aW9uIHdpdGggYSByZWYuIFRoaXMgbmVlZHMgdG8gYmUgdXBkYXRlZFxuICAvLyBpbiB0aGUgbGF5b3V0IHBoYXNlIHNvIHdlIGNhbiBhY2Nlc3MgaXQgZHVyaW5nIHRoZSB0ZWFyaW5nIGNoZWNrIHRoYXRcbiAgLy8gaGFwcGVucyBvbiBzdWJzY3JpYmUuXG5cbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBpbnN0LnZhbHVlID0gdmFsdWU7XG4gICAgaW5zdC5nZXRTbmFwc2hvdCA9IGdldFNuYXBzaG90OyAvLyBXaGVuZXZlciBnZXRTbmFwc2hvdCBvciBzdWJzY3JpYmUgY2hhbmdlcywgd2UgbmVlZCB0byBjaGVjayBpbiB0aGVcbiAgICAvLyBjb21taXQgcGhhc2UgaWYgdGhlcmUgd2FzIGFuIGludGVybGVhdmVkIG11dGF0aW9uLiBJbiBjb25jdXJyZW50IG1vZGVcbiAgICAvLyB0aGlzIGNhbiBoYXBwZW4gYWxsIHRoZSB0aW1lLCBidXQgZXZlbiBpbiBzeW5jaHJvbm91cyBtb2RlLCBhbiBlYXJsaWVyXG4gICAgLy8gZWZmZWN0IG1heSBoYXZlIG11dGF0ZWQgdGhlIHN0b3JlLlxuXG4gICAgaWYgKGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkpIHtcbiAgICAgIC8vIEZvcmNlIGEgcmUtcmVuZGVyLlxuICAgICAgZm9yY2VVcGRhdGUoe1xuICAgICAgICBpbnN0XG4gICAgICB9KTtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcblxuICB9LCBbc3Vic2NyaWJlLCB2YWx1ZSwgZ2V0U25hcHNob3RdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBDaGVjayBmb3IgY2hhbmdlcyByaWdodCBiZWZvcmUgc3Vic2NyaWJpbmcuIFN1YnNlcXVlbnQgY2hhbmdlcyB3aWxsIGJlXG4gICAgLy8gZGV0ZWN0ZWQgaW4gdGhlIHN1YnNjcmlwdGlvbiBoYW5kbGVyLlxuICAgIGlmIChjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpKSB7XG4gICAgICAvLyBGb3JjZSBhIHJlLXJlbmRlci5cbiAgICAgIGZvcmNlVXBkYXRlKHtcbiAgICAgICAgaW5zdFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGFuZGxlU3RvcmVDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAvLyBUT0RPOiBCZWNhdXNlIHRoZXJlIGlzIG5vIGNyb3NzLXJlbmRlcmVyIEFQSSBmb3IgYmF0Y2hpbmcgdXBkYXRlcywgaXQnc1xuICAgICAgLy8gdXAgdG8gdGhlIGNvbnN1bWVyIG9mIHRoaXMgbGlicmFyeSB0byB3cmFwIHRoZWlyIHN1YnNjcmlwdGlvbiBldmVudFxuICAgICAgLy8gd2l0aCB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcy4gU2hvdWxkIHdlIHRyeSB0byBkZXRlY3Qgd2hlbiB0aGlzIGlzbid0XG4gICAgICAvLyB0aGUgY2FzZSBhbmQgcHJpbnQgYSB3YXJuaW5nIGluIGRldmVsb3BtZW50P1xuICAgICAgLy8gVGhlIHN0b3JlIGNoYW5nZWQuIENoZWNrIGlmIHRoZSBzbmFwc2hvdCBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgd2VcbiAgICAgIC8vIHJlYWQgZnJvbSB0aGUgc3RvcmUuXG4gICAgICBpZiAoY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSkge1xuICAgICAgICAvLyBGb3JjZSBhIHJlLXJlbmRlci5cbiAgICAgICAgZm9yY2VVcGRhdGUoe1xuICAgICAgICAgIGluc3RcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTsgLy8gU3Vic2NyaWJlIHRvIHRoZSBzdG9yZSBhbmQgcmV0dXJuIGEgY2xlYW4tdXAgZnVuY3Rpb24uXG5cblxuICAgIHJldHVybiBzdWJzY3JpYmUoaGFuZGxlU3RvcmVDaGFuZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtzdWJzY3JpYmVdKTtcbiAgdXNlRGVidWdWYWx1ZSh2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSB7XG4gIGNvbnN0IGxhdGVzdEdldFNuYXBzaG90ID0gaW5zdC5nZXRTbmFwc2hvdDtcbiAgY29uc3QgcHJldlZhbHVlID0gaW5zdC52YWx1ZTtcblxuICB0cnkge1xuICAgIGNvbnN0IG5leHRWYWx1ZSA9IGxhdGVzdEdldFNuYXBzaG90KCk7XG4gICAgcmV0dXJuICFpcyhwcmV2VmFsdWUsIG5leHRWYWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5mdW5jdGlvbiB1c2VTeW5jRXh0ZXJuYWxTdG9yZSQxKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KSB7XG4gIC8vIE5vdGU6IFRoZSBzaGltIGRvZXMgbm90IHVzZSBnZXRTZXJ2ZXJTbmFwc2hvdCwgYmVjYXVzZSBwcmUtMTggdmVyc2lvbnMgb2ZcbiAgLy8gUmVhY3QgZG8gbm90IGV4cG9zZSBhIHdheSB0byBjaGVjayBpZiB3ZSdyZSBoeWRyYXRpbmcuIFNvIHVzZXJzIG9mIHRoZSBzaGltXG4gIC8vIHdpbGwgbmVlZCB0byB0cmFjayB0aGF0IHRoZW1zZWx2ZXMgYW5kIHJldHVybiB0aGUgY29ycmVjdCB2YWx1ZVxuICAvLyBmcm9tIGBnZXRTbmFwc2hvdGAuXG4gIHJldHVybiBnZXRTbmFwc2hvdCgpO1xufVxuXG4vKipcbiAqIElubGluZWQgaW50byB0aGUgcmVhY3Qtcm91dGVyIHJlcG8gc2luY2UgdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUgZG9lcyBub3RcbiAqIHByb3ZpZGUgYSBVTUQtY29tcGF0aWJsZSBwYWNrYWdlLCBzbyB3ZSBuZWVkIHRoaXMgdG8gYmUgYWJsZSB0byBkaXN0cmlidXRlXG4gKiBVTUQgcmVhY3Qtcm91dGVyIGJ1bmRsZXNcbiAqL1xuY29uc3QgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIik7XG5jb25zdCBpc1NlcnZlckVudmlyb25tZW50ID0gIWNhblVzZURPTTtcbmNvbnN0IHNoaW0gPSBpc1NlcnZlckVudmlyb25tZW50ID8gdXNlU3luY0V4dGVybmFsU3RvcmUkMSA6IHVzZVN5bmNFeHRlcm5hbFN0b3JlJDI7XG5jb25zdCB1c2VTeW5jRXh0ZXJuYWxTdG9yZSA9IFwidXNlU3luY0V4dGVybmFsU3RvcmVcIiBpbiBSZWFjdCA/IChtb2R1bGUgPT4gbW9kdWxlLnVzZVN5bmNFeHRlcm5hbFN0b3JlKShSZWFjdCkgOiBzaGltO1xuXG5jb25zdCBEYXRhUm91dGVyQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIERhdGFSb3V0ZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyXCI7XG59XG5cbmNvbnN0IERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBEYXRhUm91dGVyU3RhdGVDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyU3RhdGVcIjtcbn1cblxuY29uc3QgQXdhaXRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQXdhaXRDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJBd2FpdFwiO1xufVxuXG5jb25zdCBOYXZpZ2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdmlnYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJOYXZpZ2F0aW9uXCI7XG59XG5cbmNvbnN0IExvY2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExvY2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTG9jYXRpb25cIjtcbn1cblxuY29uc3QgUm91dGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBvdXRsZXQ6IG51bGwsXG4gIG1hdGNoZXM6IFtdXG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlXCI7XG59XG5cbmNvbnN0IFJvdXRlRXJyb3JDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVFcnJvckNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlRXJyb3JcIjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmdWxsIGhyZWYgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUuIFRoaXMgaXMgdXNlZnVsIGZvciBidWlsZGluZ1xuICogY3VzdG9tIGxpbmtzIHRoYXQgYXJlIGFsc28gYWNjZXNzaWJsZSBhbmQgcHJlc2VydmUgcmlnaHQtY2xpY2sgYmVoYXZpb3IuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtaHJlZlxuICovXG5cbmZ1bmN0aW9uIHVzZUhyZWYodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUhyZWYoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgaGFzaCxcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2hcbiAgfSA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZTsgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgaHJlZi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2UgdGhlIHJhd1xuICAvLyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlXG4gIC8vIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBsaW5rc1xuXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBqb2luZWRQYXRobmFtZSA9IHBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aG5hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBuYXZpZ2F0b3IuY3JlYXRlSHJlZih7XG4gICAgcGF0aG5hbWU6IGpvaW5lZFBhdGhuYW1lLFxuICAgIHNlYXJjaCxcbiAgICBoYXNoXG4gIH0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGEgPFJvdXRlcj4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtaW4tcm91dGVyLWNvbnRleHRcbiAqL1xuXG5mdW5jdGlvbiB1c2VJblJvdXRlckNvbnRleHQoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkgIT0gbnVsbDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBsb2NhdGlvbiBvYmplY3QsIHdoaWNoIHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgVVJMIGluIHdlYlxuICogYnJvd3NlcnMuXG4gKlxuICogTm90ZTogSWYgeW91J3JlIHVzaW5nIHRoaXMgaXQgbWF5IG1lYW4geW91J3JlIGRvaW5nIHNvbWUgb2YgeW91ciBvd25cbiAqIFwicm91dGluZ1wiIGluIHlvdXIgYXBwLCBhbmQgd2UnZCBsaWtlIHRvIGtub3cgd2hhdCB5b3VyIHVzZSBjYXNlIGlzLiBXZSBtYXlcbiAqIGJlIGFibGUgdG8gcHJvdmlkZSBzb21ldGhpbmcgaGlnaGVyLWxldmVsIHRvIGJldHRlciBzdWl0IHlvdXIgbmVlZHMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbG9jYXRpb25cbiAqL1xuXG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VMb2NhdGlvbigpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubG9jYXRpb247XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBhY3Rpb24gd2hpY2ggZGVzY3JpYmVzIGhvdyB0aGUgcm91dGVyIGNhbWUgdG9cbiAqIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBlaXRoZXIgYnkgYSBwb3AsIHB1c2gsIG9yIHJlcGxhY2Ugb24gdGhlIGhpc3Rvcnkgc3RhY2suXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbmF2aWdhdGlvbi10eXBlXG4gKi9cblxuZnVuY3Rpb24gdXNlTmF2aWdhdGlvblR5cGUoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubmF2aWdhdGlvblR5cGU7XG59XG4vKipcbiAqIFJldHVybnMgYSBQYXRoTWF0Y2ggb2JqZWN0IGlmIHRoZSBnaXZlbiBwYXR0ZXJuIG1hdGNoZXMgdGhlIGN1cnJlbnQgVVJMLlxuICogVGhpcyBpcyB1c2VmdWwgZm9yIGNvbXBvbmVudHMgdGhhdCBuZWVkIHRvIGtub3cgXCJhY3RpdmVcIiBzdGF0ZSwgZS5nLlxuICogPE5hdkxpbms+LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW1hdGNoXG4gKi9cblxuZnVuY3Rpb24gdXNlTWF0Y2gocGF0dGVybikge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU1hdGNoKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBwYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gbWF0Y2hQYXRoKHBhdHRlcm4sIHBhdGhuYW1lKSwgW3BhdGhuYW1lLCBwYXR0ZXJuXSk7XG59XG4vKipcbiAqIFRoZSBpbnRlcmZhY2UgZm9yIHRoZSBuYXZpZ2F0ZSgpIGZ1bmN0aW9uIHJldHVybmVkIGZyb20gdXNlTmF2aWdhdGUoKS5cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYW4gaW1wZXJhdGl2ZSBtZXRob2QgZm9yIGNoYW5naW5nIHRoZSBsb2NhdGlvbi4gVXNlZCBieSA8TGluaz5zLCBidXRcbiAqIG1heSBhbHNvIGJlIHVzZWQgYnkgb3RoZXIgZWxlbWVudHMgdG8gY2hhbmdlIHRoZSBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1uYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0ZSgpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VOYXZpZ2F0ZSgpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShVTlNBRkVfZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykubWFwKG1hdGNoID0+IG1hdGNoLnBhdGhuYW1lQmFzZSkpO1xuICBsZXQgYWN0aXZlUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuICBsZXQgbmF2aWdhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodG8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhhY3RpdmVSZWYuY3VycmVudCwgXCJZb3Ugc2hvdWxkIGNhbGwgbmF2aWdhdGUoKSBpbiBhIFJlYWN0LnVzZUVmZmVjdCgpLCBub3Qgd2hlbiBcIiArIFwieW91ciBjb21wb25lbnQgaXMgZmlyc3QgcmVuZGVyZWQuXCIpIDogdm9pZCAwO1xuICAgIGlmICghYWN0aXZlUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIG5hdmlnYXRvci5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8sIEpTT04ucGFyc2Uocm91dGVQYXRobmFtZXNKc29uKSwgbG9jYXRpb25QYXRobmFtZSwgb3B0aW9ucy5yZWxhdGl2ZSA9PT0gXCJwYXRoXCIpOyAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gICAgLy8gdG8gaGFuZGluZyBvZmYgdG8gaGlzdG9yeS4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4gd2VcbiAgICAvLyBuYXZpZ2F0ZSB0byB0aGUgcmF3IGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsXG4gICAgLy8gY29udHJvbCBvdmVyIHRoZSBwcmVzZW5jZSBvZiBhIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgbGlua3NcblxuICAgIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICAgIH1cblxuICAgICghIW9wdGlvbnMucmVwbGFjZSA/IG5hdmlnYXRvci5yZXBsYWNlIDogbmF2aWdhdG9yLnB1c2gpKHBhdGgsIG9wdGlvbnMuc3RhdGUsIG9wdGlvbnMpO1xuICB9LCBbYmFzZW5hbWUsIG5hdmlnYXRvciwgcm91dGVQYXRobmFtZXNKc29uLCBsb2NhdGlvblBhdGhuYW1lXSk7XG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cbmNvbnN0IE91dGxldENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbi8qKlxuICogUmV0dXJucyB0aGUgY29udGV4dCAoaWYgcHJvdmlkZWQpIGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS5cbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW91dGxldC1jb250ZXh0XG4gKi9cblxuZnVuY3Rpb24gdXNlT3V0bGV0Q29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoT3V0bGV0Q29udGV4dCk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGVsZW1lbnQgZm9yIHRoZSBjaGlsZCByb3V0ZSBhdCB0aGlzIGxldmVsIG9mIHRoZSByb3V0ZVxuICogaGllcmFyY2h5LiBVc2VkIGludGVybmFsbHkgYnkgPE91dGxldD4gdG8gcmVuZGVyIGNoaWxkIHJvdXRlcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1vdXRsZXRcbiAqL1xuXG5mdW5jdGlvbiB1c2VPdXRsZXQoY29udGV4dCkge1xuICBsZXQgb3V0bGV0ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpLm91dGxldDtcblxuICBpZiAob3V0bGV0KSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE91dGxldENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0XG4gICAgfSwgb3V0bGV0KTtcbiAgfVxuXG4gIHJldHVybiBvdXRsZXQ7XG59XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIGtleS92YWx1ZSBwYWlycyBvZiB0aGUgZHluYW1pYyBwYXJhbXMgZnJvbSB0aGUgY3VycmVudFxuICogVVJMIHRoYXQgd2VyZSBtYXRjaGVkIGJ5IHRoZSByb3V0ZSBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXBhcmFtc1xuICovXG5cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZU1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGFyYW1zIDoge307XG59XG4vKipcbiAqIFJlc29sdmVzIHRoZSBwYXRobmFtZSBvZiB0aGUgZ2l2ZW4gYHRvYCB2YWx1ZSBhZ2FpbnN0IHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXJlc29sdmVkLXBhdGhcbiAqL1xuXG5mdW5jdGlvbiB1c2VSZXNvbHZlZFBhdGgodG8sIF90ZW1wMikge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKS5tYXAobWF0Y2ggPT4gbWF0Y2gucGF0aG5hbWVCYXNlKSk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IHJlc29sdmVUbyh0bywgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLCBsb2NhdGlvblBhdGhuYW1lLCByZWxhdGl2ZSA9PT0gXCJwYXRoXCIpLCBbdG8sIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmVdKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgcm91dGUgdGhhdCBtYXRjaGVkIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBwcmVwYXJlZFxuICogd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0IHRvIHJlbmRlciB0aGUgcmVtYWluZGVyIG9mIHRoZSByb3V0ZSB0cmVlLiBSb3V0ZVxuICogZWxlbWVudHMgaW4gdGhlIHRyZWUgbXVzdCByZW5kZXIgYW4gPE91dGxldD4gdG8gcmVuZGVyIHRoZWlyIGNoaWxkIHJvdXRlJ3NcbiAqIGVsZW1lbnQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utcm91dGVzXG4gKi9cblxuZnVuY3Rpb24gdXNlUm91dGVzKHJvdXRlcywgbG9jYXRpb25BcmcpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VSb3V0ZXMoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCBkYXRhUm91dGVyU3RhdGVDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBtYXRjaGVzOiBwYXJlbnRNYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZU1hdGNoID0gcGFyZW50TWF0Y2hlc1twYXJlbnRNYXRjaGVzLmxlbmd0aCAtIDFdO1xuICBsZXQgcGFyZW50UGFyYW1zID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGFyYW1zIDoge307XG4gIGxldCBwYXJlbnRQYXRobmFtZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lIDogXCIvXCI7XG4gIGxldCBwYXJlbnRQYXRobmFtZUJhc2UgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZUJhc2UgOiBcIi9cIjtcbiAgbGV0IHBhcmVudFJvdXRlID0gcm91dGVNYXRjaCAmJiByb3V0ZU1hdGNoLnJvdXRlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyBZb3Ugd29uJ3QgZ2V0IGEgd2FybmluZyBhYm91dCAyIGRpZmZlcmVudCA8Um91dGVzPiB1bmRlciBhIDxSb3V0ZT5cbiAgICAvLyB3aXRob3V0IGEgdHJhaWxpbmcgKiwgYnV0IHRoaXMgaXMgYSBiZXN0LWVmZm9ydCB3YXJuaW5nIGFueXdheSBzaW5jZSB3ZVxuICAgIC8vIGNhbm5vdCBldmVuIGdpdmUgdGhlIHdhcm5pbmcgdW5sZXNzIHRoZXkgbGFuZCBhdCB0aGUgcGFyZW50IHJvdXRlLlxuICAgIC8vXG4gICAgLy8gRXhhbXBsZTpcbiAgICAvL1xuICAgIC8vIDxSb3V0ZXM+XG4gICAgLy8gICB7LyogVGhpcyByb3V0ZSBwYXRoIE1VU1QgZW5kIHdpdGggLyogYmVjYXVzZSBvdGhlcndpc2VcbiAgICAvLyAgICAgICBpdCB3aWxsIG5ldmVyIG1hdGNoIC9ibG9nL3Bvc3QvMTIzICovfVxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nXCIgZWxlbWVudD17PEJsb2cgLz59IC8+XG4gICAgLy8gICA8Um91dGUgcGF0aD1cImJsb2cvZmVlZFwiIGVsZW1lbnQ9ezxCbG9nRmVlZCAvPn0gLz5cbiAgICAvLyA8L1JvdXRlcz5cbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uIEJsb2coKSB7XG4gICAgLy8gICByZXR1cm4gKFxuICAgIC8vICAgICA8Um91dGVzPlxuICAgIC8vICAgICAgIDxSb3V0ZSBwYXRoPVwicG9zdC86aWRcIiBlbGVtZW50PXs8UG9zdCAvPn0gLz5cbiAgICAvLyAgICAgPC9Sb3V0ZXM+XG4gICAgLy8gICApO1xuICAgIC8vIH1cbiAgICBsZXQgcGFyZW50UGF0aCA9IHBhcmVudFJvdXRlICYmIHBhcmVudFJvdXRlLnBhdGggfHwgXCJcIjtcbiAgICB3YXJuaW5nT25jZShwYXJlbnRQYXRobmFtZSwgIXBhcmVudFJvdXRlIHx8IHBhcmVudFBhdGguZW5kc1dpdGgoXCIqXCIpLCBcIllvdSByZW5kZXJlZCBkZXNjZW5kYW50IDxSb3V0ZXM+IChvciBjYWxsZWQgYHVzZVJvdXRlcygpYCkgYXQgXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRobmFtZSArIFwiXFxcIiAodW5kZXIgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4pIGJ1dCB0aGUgXCIpICsgXCJwYXJlbnQgcm91dGUgcGF0aCBoYXMgbm8gdHJhaWxpbmcgXFxcIipcXFwiLiBUaGlzIG1lYW5zIGlmIHlvdSBuYXZpZ2F0ZSBcIiArIFwiZGVlcGVyLCB0aGUgcGFyZW50IHdvbid0IG1hdGNoIGFueW1vcmUgYW5kIHRoZXJlZm9yZSB0aGUgY2hpbGQgXCIgKyBcInJvdXRlcyB3aWxsIG5ldmVyIHJlbmRlci5cXG5cXG5cIiArIChcIlBsZWFzZSBjaGFuZ2UgdGhlIHBhcmVudCA8Um91dGUgcGF0aD1cXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiPiB0byA8Um91dGUgXCIpICsgKFwicGF0aD1cXFwiXCIgKyAocGFyZW50UGF0aCA9PT0gXCIvXCIgPyBcIipcIiA6IHBhcmVudFBhdGggKyBcIi8qXCIpICsgXCJcXFwiPi5cIikpO1xuICB9XG5cbiAgbGV0IGxvY2F0aW9uRnJvbUNvbnRleHQgPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbG9jYXRpb247XG5cbiAgaWYgKGxvY2F0aW9uQXJnKSB7XG4gICAgdmFyIF9wYXJzZWRMb2NhdGlvbkFyZyRwYTtcblxuICAgIGxldCBwYXJzZWRMb2NhdGlvbkFyZyA9IHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcbiAgICAhKHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgfHwgKChfcGFyc2VkTG9jYXRpb25BcmckcGEgPSBwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYXJzZWRMb2NhdGlvbkFyZyRwYS5zdGFydHNXaXRoKHBhcmVudFBhdGhuYW1lQmFzZSkpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiV2hlbiBvdmVycmlkaW5nIHRoZSBsb2NhdGlvbiB1c2luZyBgPFJvdXRlcyBsb2NhdGlvbj5gIG9yIGB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbilgLCBcIiArIFwidGhlIGxvY2F0aW9uIHBhdGhuYW1lIG11c3QgYmVnaW4gd2l0aCB0aGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIFwiICsgKFwibWF0Y2hlZCBieSBhbGwgcGFyZW50IHJvdXRlcy4gVGhlIGN1cnJlbnQgcGF0aG5hbWUgYmFzZSBpcyBcXFwiXCIgKyBwYXJlbnRQYXRobmFtZUJhc2UgKyBcIlxcXCIgXCIpICsgKFwiYnV0IHBhdGhuYW1lIFxcXCJcIiArIHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lICsgXCJcXFwiIHdhcyBnaXZlbiBpbiB0aGUgYGxvY2F0aW9uYCBwcm9wLlwiKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBsb2NhdGlvbiA9IHBhcnNlZExvY2F0aW9uQXJnO1xuICB9IGVsc2Uge1xuICAgIGxvY2F0aW9uID0gbG9jYXRpb25Gcm9tQ29udGV4dDtcbiAgfVxuXG4gIGxldCBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lIHx8IFwiL1wiO1xuICBsZXQgcmVtYWluaW5nUGF0aG5hbWUgPSBwYXJlbnRQYXRobmFtZUJhc2UgPT09IFwiL1wiID8gcGF0aG5hbWUgOiBwYXRobmFtZS5zbGljZShwYXJlbnRQYXRobmFtZUJhc2UubGVuZ3RoKSB8fCBcIi9cIjtcbiAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXMsIHtcbiAgICBwYXRobmFtZTogcmVtYWluaW5nUGF0aG5hbWVcbiAgfSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocGFyZW50Um91dGUgfHwgbWF0Y2hlcyAhPSBudWxsLCBcIk5vIHJvdXRlcyBtYXRjaGVkIGxvY2F0aW9uIFxcXCJcIiArIGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoICsgbG9jYXRpb24uaGFzaCArIFwiXFxcIiBcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhtYXRjaGVzID09IG51bGwgfHwgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmVsZW1lbnQgIT09IHVuZGVmaW5lZCwgXCJNYXRjaGVkIGxlYWYgcm91dGUgYXQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIGRvZXMgbm90IGhhdmUgYW4gZWxlbWVudC4gXCIgKyBcIlRoaXMgbWVhbnMgaXQgd2lsbCByZW5kZXIgYW4gPE91dGxldCAvPiB3aXRoIGEgbnVsbCB2YWx1ZSBieSBkZWZhdWx0IHJlc3VsdGluZyBpbiBhbiBcXFwiZW1wdHlcXFwiIHBhZ2UuXCIpIDogdm9pZCAwO1xuICB9XG5cbiAgbGV0IHJlbmRlcmVkTWF0Y2hlcyA9IF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMgJiYgbWF0Y2hlcy5tYXAobWF0Y2ggPT4gT2JqZWN0LmFzc2lnbih7fSwgbWF0Y2gsIHtcbiAgICBwYXJhbXM6IE9iamVjdC5hc3NpZ24oe30sIHBhcmVudFBhcmFtcywgbWF0Y2gucGFyYW1zKSxcbiAgICBwYXRobmFtZTogam9pblBhdGhzKFtwYXJlbnRQYXRobmFtZUJhc2UsIC8vIFJlLWVuY29kZSBwYXRobmFtZXMgdGhhdCB3ZXJlIGRlY29kZWQgaW5zaWRlIG1hdGNoUm91dGVzXG4gICAgbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKG1hdGNoLnBhdGhuYW1lKS5wYXRobmFtZSA6IG1hdGNoLnBhdGhuYW1lXSksXG4gICAgcGF0aG5hbWVCYXNlOiBtYXRjaC5wYXRobmFtZUJhc2UgPT09IFwiL1wiID8gcGFyZW50UGF0aG5hbWVCYXNlIDogam9pblBhdGhzKFtwYXJlbnRQYXRobmFtZUJhc2UsIC8vIFJlLWVuY29kZSBwYXRobmFtZXMgdGhhdCB3ZXJlIGRlY29kZWQgaW5zaWRlIG1hdGNoUm91dGVzXG4gICAgbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKG1hdGNoLnBhdGhuYW1lQmFzZSkucGF0aG5hbWUgOiBtYXRjaC5wYXRobmFtZUJhc2VdKVxuICB9KSksIHBhcmVudE1hdGNoZXMsIGRhdGFSb3V0ZXJTdGF0ZUNvbnRleHQgfHwgdW5kZWZpbmVkKTsgLy8gV2hlbiBhIHVzZXIgcGFzc2VzIGluIGEgYGxvY2F0aW9uQXJnYCwgdGhlIGFzc29jaWF0ZWQgcm91dGVzIG5lZWQgdG9cbiAgLy8gYmUgd3JhcHBlZCBpbiBhIG5ldyBgTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyYCBpbiBvcmRlciBmb3IgYHVzZUxvY2F0aW9uYFxuICAvLyB0byB1c2UgdGhlIHNjb3BlZCBsb2NhdGlvbiBpbnN0ZWFkIG9mIHRoZSBnbG9iYWwgbG9jYXRpb24uXG5cblxuICBpZiAobG9jYXRpb25BcmcgJiYgcmVuZGVyZWRNYXRjaGVzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExvY2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgbG9jYXRpb246IF9leHRlbmRzKHtcbiAgICAgICAgICBwYXRobmFtZTogXCIvXCIsXG4gICAgICAgICAgc2VhcmNoOiBcIlwiLFxuICAgICAgICAgIGhhc2g6IFwiXCIsXG4gICAgICAgICAgc3RhdGU6IG51bGwsXG4gICAgICAgICAga2V5OiBcImRlZmF1bHRcIlxuICAgICAgICB9LCBsb2NhdGlvbiksXG4gICAgICAgIG5hdmlnYXRpb25UeXBlOiBBY3Rpb24uUG9wXG4gICAgICB9XG4gICAgfSwgcmVuZGVyZWRNYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIERlZmF1bHRFcnJvckVsZW1lbnQoKSB7XG4gIGxldCBlcnJvciA9IHVzZVJvdXRlRXJyb3IoKTtcbiAgbGV0IG1lc3NhZ2UgPSBpc1JvdXRlRXJyb3JSZXNwb25zZShlcnJvcikgPyBlcnJvci5zdGF0dXMgKyBcIiBcIiArIGVycm9yLnN0YXR1c1RleHQgOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IEpTT04uc3RyaW5naWZ5KGVycm9yKTtcbiAgbGV0IHN0YWNrID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLnN0YWNrIDogbnVsbDtcbiAgbGV0IGxpZ2h0Z3JleSA9IFwicmdiYSgyMDAsMjAwLDIwMCwgMC41KVwiO1xuICBsZXQgcHJlU3R5bGVzID0ge1xuICAgIHBhZGRpbmc6IFwiMC41cmVtXCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXlcbiAgfTtcbiAgbGV0IGNvZGVTdHlsZXMgPSB7XG4gICAgcGFkZGluZzogXCIycHggNHB4XCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXlcbiAgfTtcbiAgbGV0IGRldkluZm8gPSBudWxsO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBkZXZJbmZvID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLCBcIlxcdUQ4M0RcXHVEQ0JGIEhleSBkZXZlbG9wZXIgXFx1RDgzRFxcdURDNEJcIiksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLCBcIllvdSBjYW4gcHJvdmlkZSBhIHdheSBiZXR0ZXIgVVggdGhhbiB0aGlzIHdoZW4geW91ciBhcHAgdGhyb3dzIGVycm9ycyBieSBwcm92aWRpbmcgeW91ciBvd25cXHhBMFwiLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNvZGVcIiwge1xuICAgICAgc3R5bGU6IGNvZGVTdHlsZXNcbiAgICB9LCBcImVycm9yRWxlbWVudFwiKSwgXCIgcHJvcHMgb25cXHhBMFwiLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNvZGVcIiwge1xuICAgICAgc3R5bGU6IGNvZGVTdHlsZXNcbiAgICB9LCBcIjxSb3V0ZT5cIikpKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoMlwiLCBudWxsLCBcIlVuZXhwZWN0ZWQgQXBwbGljYXRpb24gRXJyb3IhXCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImgzXCIsIHtcbiAgICBzdHlsZToge1xuICAgICAgZm9udFN0eWxlOiBcIml0YWxpY1wiXG4gICAgfVxuICB9LCBtZXNzYWdlKSwgc3RhY2sgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInByZVwiLCB7XG4gICAgc3R5bGU6IHByZVN0eWxlc1xuICB9LCBzdGFjaykgOiBudWxsLCBkZXZJbmZvKTtcbn1cblxuY2xhc3MgUmVuZGVyRXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMubG9jYXRpb24sXG4gICAgICBlcnJvcjogcHJvcHMuZXJyb3JcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogZXJyb3JcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhwcm9wcywgc3RhdGUpIHtcbiAgICAvLyBXaGVuIHdlIGdldCBpbnRvIGFuIGVycm9yIHN0YXRlLCB0aGUgdXNlciB3aWxsIGxpa2VseSBjbGljayBcImJhY2tcIiB0byB0aGVcbiAgICAvLyBwcmV2aW91cyBwYWdlIHRoYXQgZGlkbid0IGhhdmUgYW4gZXJyb3IuIEJlY2F1c2UgdGhpcyB3cmFwcyB0aGUgZW50aXJlXG4gICAgLy8gYXBwbGljYXRpb24sIHRoYXQgd2lsbCBoYXZlIG5vIGVmZmVjdC0tdGhlIGVycm9yIHBhZ2UgY29udGludWVzIHRvIGRpc3BsYXkuXG4gICAgLy8gVGhpcyBnaXZlcyB1cyBhIG1lY2hhbmlzbSB0byByZWNvdmVyIGZyb20gdGhlIGVycm9yIHdoZW4gdGhlIGxvY2F0aW9uIGNoYW5nZXMuXG4gICAgLy9cbiAgICAvLyBXaGV0aGVyIHdlJ3JlIGluIGFuIGVycm9yIHN0YXRlIG9yIG5vdCwgd2UgdXBkYXRlIHRoZSBsb2NhdGlvbiBpbiBzdGF0ZVxuICAgIC8vIHNvIHRoYXQgd2hlbiB3ZSBhcmUgaW4gYW4gZXJyb3Igc3RhdGUsIGl0IGdldHMgcmVzZXQgd2hlbiBhIG5ldyBsb2NhdGlvblxuICAgIC8vIGNvbWVzIGluIGFuZCB0aGUgdXNlciByZWNvdmVycyBmcm9tIHRoZSBlcnJvci5cbiAgICBpZiAoc3RhdGUubG9jYXRpb24gIT09IHByb3BzLmxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjogcHJvcHMuZXJyb3IsXG4gICAgICAgIGxvY2F0aW9uOiBwcm9wcy5sb2NhdGlvblxuICAgICAgfTtcbiAgICB9IC8vIElmIHdlJ3JlIG5vdCBjaGFuZ2luZyBsb2NhdGlvbnMsIHByZXNlcnZlIHRoZSBsb2NhdGlvbiBidXQgc3RpbGwgc3VyZmFjZVxuICAgIC8vIGFueSBuZXcgZXJyb3JzIHRoYXQgbWF5IGNvbWUgdGhyb3VnaC4gV2UgcmV0YWluIHRoZSBleGlzdGluZyBlcnJvciwgd2UgZG9cbiAgICAvLyB0aGlzIGJlY2F1c2UgdGhlIGVycm9yIHByb3ZpZGVkIGZyb20gdGhlIGFwcCBzdGF0ZSBtYXkgYmUgY2xlYXJlZCB3aXRob3V0XG4gICAgLy8gdGhlIGxvY2F0aW9uIGNoYW5naW5nLlxuXG5cbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IHByb3BzLmVycm9yIHx8IHN0YXRlLmVycm9yLFxuICAgICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZENhdGNoKGVycm9yLCBlcnJvckluZm8pIHtcbiAgICBjb25zb2xlLmVycm9yKFwiUmVhY3QgUm91dGVyIGNhdWdodCB0aGUgZm9sbG93aW5nIGVycm9yIGR1cmluZyByZW5kZXJcIiwgZXJyb3IsIGVycm9ySW5mbyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZXJyb3IgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnJvdXRlQ29udGV4dFxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlRXJyb3JDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5lcnJvcixcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgIH0pKSA6IHRoaXMucHJvcHMuY2hpbGRyZW47XG4gIH1cblxufVxuXG5mdW5jdGlvbiBSZW5kZXJlZFJvdXRlKF9yZWYpIHtcbiAgbGV0IHtcbiAgICByb3V0ZUNvbnRleHQsXG4gICAgbWF0Y2gsXG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpOyAvLyBUcmFjayBob3cgZGVlcCB3ZSBnb3QgaW4gb3VyIHJlbmRlciBwYXNzIHRvIGVtdWxhdGUgU1NSIGNvbXBvbmVudERpZENhdGNoXG4gIC8vIGluIGEgRGF0YVN0YXRpY1JvdXRlclxuXG4gIGlmIChkYXRhUm91dGVyQ29udGV4dCAmJiBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWMgJiYgZGF0YVJvdXRlckNvbnRleHQuc3RhdGljQ29udGV4dCAmJiBtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQpIHtcbiAgICBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWNDb250ZXh0Ll9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkID0gbWF0Y2gucm91dGUuaWQ7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHJvdXRlQ29udGV4dFxuICB9LCBjaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMsIHBhcmVudE1hdGNoZXMsIGRhdGFSb3V0ZXJTdGF0ZSkge1xuICBpZiAocGFyZW50TWF0Y2hlcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50TWF0Y2hlcyA9IFtdO1xuICB9XG5cbiAgaWYgKG1hdGNoZXMgPT0gbnVsbCkge1xuICAgIGlmIChkYXRhUm91dGVyU3RhdGUgIT0gbnVsbCAmJiBkYXRhUm91dGVyU3RhdGUuZXJyb3JzKSB7XG4gICAgICAvLyBEb24ndCBiYWlsIGlmIHdlIGhhdmUgZGF0YSByb3V0ZXIgZXJyb3JzIHNvIHdlIGNhbiByZW5kZXIgdGhlbSBpbiB0aGVcbiAgICAgIC8vIGJvdW5kYXJ5LiAgVXNlIHRoZSBwcmUtbWF0Y2hlZCAob3Igc2hpbW1lZCkgbWF0Y2hlc1xuICAgICAgbWF0Y2hlcyA9IGRhdGFSb3V0ZXJTdGF0ZS5tYXRjaGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBsZXQgcmVuZGVyZWRNYXRjaGVzID0gbWF0Y2hlczsgLy8gSWYgd2UgaGF2ZSBkYXRhIGVycm9ycywgdHJpbSBtYXRjaGVzIHRvIHRoZSBoaWdoZXN0IGVycm9yIGJvdW5kYXJ5XG5cbiAgbGV0IGVycm9ycyA9IGRhdGFSb3V0ZXJTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogZGF0YVJvdXRlclN0YXRlLmVycm9ycztcblxuICBpZiAoZXJyb3JzICE9IG51bGwpIHtcbiAgICBsZXQgZXJyb3JJbmRleCA9IHJlbmRlcmVkTWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkICYmIChlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yc1ttLnJvdXRlLmlkXSkpO1xuICAgICEoZXJyb3JJbmRleCA+PSAwKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiQ291bGQgbm90IGZpbmQgYSBtYXRjaGluZyByb3V0ZSBmb3IgdGhlIGN1cnJlbnQgZXJyb3JzOiBcIiArIGVycm9ycykgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZW5kZXJlZE1hdGNoZXMgPSByZW5kZXJlZE1hdGNoZXMuc2xpY2UoMCwgTWF0aC5taW4ocmVuZGVyZWRNYXRjaGVzLmxlbmd0aCwgZXJyb3JJbmRleCArIDEpKTtcbiAgfVxuXG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXMucmVkdWNlUmlnaHQoKG91dGxldCwgbWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgbGV0IGVycm9yID0gbWF0Y2gucm91dGUuaWQgPyBlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yc1ttYXRjaC5yb3V0ZS5pZF0gOiBudWxsOyAvLyBPbmx5IGRhdGEgcm91dGVycyBoYW5kbGUgZXJyb3JzXG5cbiAgICBsZXQgZXJyb3JFbGVtZW50ID0gZGF0YVJvdXRlclN0YXRlID8gbWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRFcnJvckVsZW1lbnQsIG51bGwpIDogbnVsbDtcbiAgICBsZXQgbWF0Y2hlcyA9IHBhcmVudE1hdGNoZXMuY29uY2F0KHJlbmRlcmVkTWF0Y2hlcy5zbGljZSgwLCBpbmRleCArIDEpKTtcblxuICAgIGxldCBnZXRDaGlsZHJlbiA9ICgpID0+IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlbmRlcmVkUm91dGUsIHtcbiAgICAgIG1hdGNoOiBtYXRjaCxcbiAgICAgIHJvdXRlQ29udGV4dDoge1xuICAgICAgICBvdXRsZXQsXG4gICAgICAgIG1hdGNoZXNcbiAgICAgIH1cbiAgICB9LCBlcnJvciA/IGVycm9yRWxlbWVudCA6IG1hdGNoLnJvdXRlLmVsZW1lbnQgIT09IHVuZGVmaW5lZCA/IG1hdGNoLnJvdXRlLmVsZW1lbnQgOiBvdXRsZXQpOyAvLyBPbmx5IHdyYXAgaW4gYW4gZXJyb3IgYm91bmRhcnkgd2l0aGluIGRhdGEgcm91dGVyIHVzYWdlcyB3aGVuIHdlIGhhdmUgYW5cbiAgICAvLyBlcnJvckVsZW1lbnQgb24gdGhpcyByb3V0ZS4gIE90aGVyd2lzZSBsZXQgaXQgYnViYmxlIHVwIHRvIGFuIGFuY2VzdG9yXG4gICAgLy8gZXJyb3JFbGVtZW50XG5cblxuICAgIHJldHVybiBkYXRhUm91dGVyU3RhdGUgJiYgKG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCBpbmRleCA9PT0gMCkgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZW5kZXJFcnJvckJvdW5kYXJ5LCB7XG4gICAgICBsb2NhdGlvbjogZGF0YVJvdXRlclN0YXRlLmxvY2F0aW9uLFxuICAgICAgY29tcG9uZW50OiBlcnJvckVsZW1lbnQsXG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgICBjaGlsZHJlbjogZ2V0Q2hpbGRyZW4oKSxcbiAgICAgIHJvdXRlQ29udGV4dDoge1xuICAgICAgICBvdXRsZXQ6IG51bGwsXG4gICAgICAgIG1hdGNoZXNcbiAgICAgIH1cbiAgICB9KSA6IGdldENoaWxkcmVuKCk7XG4gIH0sIG51bGwpO1xufVxudmFyIERhdGFSb3V0ZXJIb29rO1xuXG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJIb29rKSB7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlQmxvY2tlclwiXSA9IFwidXNlQmxvY2tlclwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZVJldmFsaWRhdG9yXCJdID0gXCJ1c2VSZXZhbGlkYXRvclwiO1xufSkoRGF0YVJvdXRlckhvb2sgfHwgKERhdGFSb3V0ZXJIb29rID0ge30pKTtcblxudmFyIERhdGFSb3V0ZXJTdGF0ZUhvb2s7XG5cbihmdW5jdGlvbiAoRGF0YVJvdXRlclN0YXRlSG9vaykge1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTG9hZGVyRGF0YVwiXSA9IFwidXNlTG9hZGVyRGF0YVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlQWN0aW9uRGF0YVwiXSA9IFwidXNlQWN0aW9uRGF0YVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUm91dGVFcnJvclwiXSA9IFwidXNlUm91dGVFcnJvclwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTmF2aWdhdGlvblwiXSA9IFwidXNlTmF2aWdhdGlvblwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUm91dGVMb2FkZXJEYXRhXCJdID0gXCJ1c2VSb3V0ZUxvYWRlckRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZU1hdGNoZXNcIl0gPSBcInVzZU1hdGNoZXNcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJldmFsaWRhdG9yXCJdID0gXCJ1c2VSZXZhbGlkYXRvclwiO1xufSkoRGF0YVJvdXRlclN0YXRlSG9vayB8fCAoRGF0YVJvdXRlclN0YXRlSG9vayA9IHt9KSk7XG5cbmZ1bmN0aW9uIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpIHtcbiAgcmV0dXJuIGhvb2tOYW1lICsgXCIgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGRhdGEgcm91dGVyLiAgU2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5cIjtcbn1cblxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuICAhY3R4ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBjdHg7XG59XG5cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJTdGF0ZShob29rTmFtZSkge1xuICBsZXQgc3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICAhc3RhdGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG5mdW5jdGlvbiB1c2VSb3V0ZUNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHJvdXRlO1xufVxuXG5mdW5jdGlvbiB1c2VDdXJyZW50Um91dGVJZChob29rTmFtZSkge1xuICBsZXQgcm91dGUgPSB1c2VSb3V0ZUNvbnRleHQoaG9va05hbWUpO1xuICBsZXQgdGhpc1JvdXRlID0gcm91dGUubWF0Y2hlc1tyb3V0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdO1xuICAhdGhpc1JvdXRlLnJvdXRlLmlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgaG9va05hbWUgKyBcIiBjYW4gb25seSBiZSB1c2VkIG9uIHJvdXRlcyB0aGF0IGNvbnRhaW4gYSB1bmlxdWUgXFxcImlkXFxcIlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gdGhpc1JvdXRlLnJvdXRlLmlkO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IG5hdmlnYXRpb24sIGRlZmF1bHRpbmcgdG8gYW4gXCJpZGxlXCIgbmF2aWdhdGlvbiB3aGVuXG4gKiBubyBuYXZpZ2F0aW9uIGlzIGluIHByb2dyZXNzXG4gKi9cblxuXG5mdW5jdGlvbiB1c2VOYXZpZ2F0aW9uKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VOYXZpZ2F0aW9uKTtcbiAgcmV0dXJuIHN0YXRlLm5hdmlnYXRpb247XG59XG4vKipcbiAqIFJldHVybnMgYSByZXZhbGlkYXRlIGZ1bmN0aW9uIGZvciBtYW51YWxseSB0cmlnZ2VyaW5nIHJldmFsaWRhdGlvbiwgYXMgd2VsbFxuICogYXMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgYW55IG1hbnVhbCByZXZhbGlkYXRpb25zXG4gKi9cblxuZnVuY3Rpb24gdXNlUmV2YWxpZGF0b3IoKSB7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVJldmFsaWRhdG9yKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUmV2YWxpZGF0b3IpO1xuICByZXR1cm4ge1xuICAgIHJldmFsaWRhdGU6IGRhdGFSb3V0ZXJDb250ZXh0LnJvdXRlci5yZXZhbGlkYXRlLFxuICAgIHN0YXRlOiBzdGF0ZS5yZXZhbGlkYXRpb25cbiAgfTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aXZlIHJvdXRlIG1hdGNoZXMsIHVzZWZ1bCBmb3IgYWNjZXNzaW5nIGxvYWRlckRhdGEgZm9yXG4gKiBwYXJlbnQvY2hpbGQgcm91dGVzIG9yIHRoZSByb3V0ZSBcImhhbmRsZVwiIHByb3BlcnR5XG4gKi9cblxuZnVuY3Rpb24gdXNlTWF0Y2hlcygpIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzLFxuICAgIGxvYWRlckRhdGFcbiAgfSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZU1hdGNoZXMpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiBtYXRjaGVzLm1hcChtYXRjaCA9PiB7XG4gICAgbGV0IHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IG1hdGNoOyAvLyBOb3RlOiBUaGlzIHN0cnVjdHVyZSBtYXRjaGVzIHRoYXQgY3JlYXRlZCBieSBjcmVhdGVVc2VNYXRjaGVzTWF0Y2hcbiAgICAvLyBpbiB0aGUgQHJlbWl4LXJ1bi9yb3V0ZXIgLCBzbyBpZiB5b3UgY2hhbmdlIHRoaXMgcGxlYXNlIGFsc28gY2hhbmdlXG4gICAgLy8gdGhhdCA6KSAgRXZlbnR1YWxseSB3ZSdsbCBEUlkgdGhpcyB1cFxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBtYXRjaC5yb3V0ZS5pZCxcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgcGFyYW1zLFxuICAgICAgZGF0YTogbG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0sXG4gICAgICBoYW5kbGU6IG1hdGNoLnJvdXRlLmhhbmRsZVxuICAgIH07XG4gIH0pLCBbbWF0Y2hlcywgbG9hZGVyRGF0YV0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBsb2FkZXIgZGF0YSBmb3IgdGhlIG5lYXJlc3QgYW5jZXN0b3IgUm91dGUgbG9hZGVyXG4gKi9cblxuZnVuY3Rpb24gdXNlTG9hZGVyRGF0YSgpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTG9hZGVyRGF0YSk7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcblxuICBpZiAoc3RhdGUuZXJyb3JzICYmIHN0YXRlLmVycm9yc1tyb3V0ZUlkXSAhPSBudWxsKSB7XG4gICAgY29uc29sZS5lcnJvcihcIllvdSBjYW5ub3QgYHVzZUxvYWRlckRhdGFgIGluIGFuIGVycm9yRWxlbWVudCAocm91dGVJZDogXCIgKyByb3V0ZUlkICsgXCIpXCIpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZUlkXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyRGF0YSBmb3IgdGhlIGdpdmVuIHJvdXRlSWRcbiAqL1xuXG5mdW5jdGlvbiB1c2VSb3V0ZUxvYWRlckRhdGEocm91dGVJZCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUxvYWRlckRhdGEpO1xuICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZUlkXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aW9uIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGFjdGlvblxuICovXG5cbmZ1bmN0aW9uIHVzZUFjdGlvbkRhdGEoKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUFjdGlvbkRhdGEpO1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlQWN0aW9uRGF0YSBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBPYmplY3QudmFsdWVzKChzdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogc3RhdGUuYWN0aW9uRGF0YSkgfHwge30pWzBdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGVycm9yLCB3aGljaCBjb3VsZCBiZSBhIGxvYWRlci9hY3Rpb25cbiAqIGVycm9yIG9yIGEgcmVuZGVyIGVycm9yLiAgVGhpcyBpcyBpbnRlbmRlZCB0byBiZSBjYWxsZWQgZnJvbSB5b3VyXG4gKiBlcnJvckVsZW1lbnQgdG8gZGlzcGxheSBhIHByb3BlciBlcnJvciBtZXNzYWdlLlxuICovXG5cbmZ1bmN0aW9uIHVzZVJvdXRlRXJyb3IoKSB7XG4gIHZhciBfc3RhdGUkZXJyb3JzO1xuXG4gIGxldCBlcnJvciA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVFcnJvckNvbnRleHQpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUVycm9yKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlRXJyb3IpOyAvLyBJZiB0aGlzIHdhcyBhIHJlbmRlciBlcnJvciwgd2UgcHV0IGl0IGluIGEgUm91dGVFcnJvciBjb250ZXh0IGluc2lkZVxuICAvLyBvZiBSZW5kZXJFcnJvckJvdW5kYXJ5XG5cbiAgaWYgKGVycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9IC8vIE90aGVyd2lzZSBsb29rIGZvciBlcnJvcnMgZnJvbSBvdXIgZGF0YSByb3V0ZXIgc3RhdGVcblxuXG4gIHJldHVybiAoX3N0YXRlJGVycm9ycyA9IHN0YXRlLmVycm9ycykgPT0gbnVsbCA/IHZvaWQgMCA6IF9zdGF0ZSRlcnJvcnNbcm91dGVJZF07XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGhhcHB5LXBhdGggZGF0YSBmcm9tIHRoZSBuZWFyZXN0IGFuY2VzdG9yIDxBd2FpdCAvPiB2YWx1ZVxuICovXG5cbmZ1bmN0aW9uIHVzZUFzeW5jVmFsdWUoKSB7XG4gIGxldCB2YWx1ZSA9IFJlYWN0LnVzZUNvbnRleHQoQXdhaXRDb250ZXh0KTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB2b2lkIDAgOiB2YWx1ZS5fZGF0YTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZXJyb3IgZnJvbSB0aGUgbmVhcmVzdCBhbmNlc3RvciA8QXdhaXQgLz4gdmFsdWVcbiAqL1xuXG5mdW5jdGlvbiB1c2VBc3luY0Vycm9yKCkge1xuICBsZXQgdmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KEF3YWl0Q29udGV4dCk7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdm9pZCAwIDogdmFsdWUuX2Vycm9yO1xufVxubGV0IGJsb2NrZXJJZCA9IDA7XG4vKipcbiAqIEFsbG93IHRoZSBhcHBsaWNhdGlvbiB0byBibG9jayBuYXZpZ2F0aW9ucyB3aXRoaW4gdGhlIFNQQSBhbmQgcHJlc2VudCB0aGVcbiAqIHVzZXIgYSBjb25maXJtYXRpb24gZGlhbG9nIHRvIGNvbmZpcm0gdGhlIG5hdmlnYXRpb24uICBNb3N0bHkgdXNlZCB0byBhdm9pZFxuICogdXNpbmcgaGFsZi1maWxsZWQgZm9ybSBkYXRhLiAgVGhpcyBkb2VzIG5vdCBoYW5kbGUgaGFyZC1yZWxvYWRzIG9yXG4gKiBjcm9zcy1vcmlnaW4gbmF2aWdhdGlvbnMuXG4gKi9cblxuZnVuY3Rpb24gdXNlQmxvY2tlcihzaG91bGRCbG9jaykge1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlQmxvY2tlcik7XG4gIGxldCBbYmxvY2tlcktleV0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiBTdHJpbmcoKytibG9ja2VySWQpKTtcbiAgbGV0IGJsb2NrZXJGdW5jdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKGFyZ3MgPT4ge1xuICAgIHJldHVybiB0eXBlb2Ygc2hvdWxkQmxvY2sgPT09IFwiZnVuY3Rpb25cIiA/ICEhc2hvdWxkQmxvY2soYXJncykgOiAhIXNob3VsZEJsb2NrO1xuICB9LCBbc2hvdWxkQmxvY2tdKTtcbiAgbGV0IGJsb2NrZXIgPSByb3V0ZXIuZ2V0QmxvY2tlcihibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb24pOyAvLyBDbGVhbnVwIG9uIHVubW91bnRcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gKCkgPT4gcm91dGVyLmRlbGV0ZUJsb2NrZXIoYmxvY2tlcktleSksIFtyb3V0ZXIsIGJsb2NrZXJLZXldKTtcbiAgcmV0dXJuIGJsb2NrZXI7XG59XG5jb25zdCBhbHJlYWR5V2FybmVkID0ge307XG5cbmZ1bmN0aW9uIHdhcm5pbmdPbmNlKGtleSwgY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQgJiYgIWFscmVhZHlXYXJuZWRba2V5XSkge1xuICAgIGFscmVhZHlXYXJuZWRba2V5XSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgbWVzc2FnZSkgOiB2b2lkIDA7XG4gIH1cbn1cblxuLyoqXG4gKiBHaXZlbiBhIFJlbWl4IFJvdXRlciBpbnN0YW5jZSwgcmVuZGVyIHRoZSBhcHByb3ByaWF0ZSBVSVxuICovXG5mdW5jdGlvbiBSb3V0ZXJQcm92aWRlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgZmFsbGJhY2tFbGVtZW50LFxuICAgIHJvdXRlclxuICB9ID0gX3JlZjtcbiAgLy8gU3luYyByb3V0ZXIgc3RhdGUgdG8gb3VyIGNvbXBvbmVudCBzdGF0ZSB0byBmb3JjZSByZS1yZW5kZXJzXG4gIGxldCBzdGF0ZSA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlKHJvdXRlci5zdWJzY3JpYmUsICgpID0+IHJvdXRlci5zdGF0ZSwgLy8gV2UgaGF2ZSB0byBwcm92aWRlIHRoaXMgc28gUmVhY3RAMTggZG9lc24ndCBjb21wbGFpbiBkdXJpbmcgaHlkcmF0aW9uLFxuICAvLyBidXQgd2UgcGFzcyBvdXIgc2VyaWFsaXplZCBoeWRyYXRpb24gZGF0YSBpbnRvIHRoZSByb3V0ZXIgc28gc3RhdGUgaGVyZVxuICAvLyBpcyBhbHJlYWR5IHN5bmNlZCB3aXRoIHdoYXQgdGhlIHNlcnZlciBzYXdcbiAgKCkgPT4gcm91dGVyLnN0YXRlKTtcbiAgbGV0IG5hdmlnYXRvciA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVIcmVmOiByb3V0ZXIuY3JlYXRlSHJlZixcbiAgICAgIGVuY29kZUxvY2F0aW9uOiByb3V0ZXIuZW5jb2RlTG9jYXRpb24sXG4gICAgICBnbzogbiA9PiByb3V0ZXIubmF2aWdhdGUobiksXG4gICAgICBwdXNoOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pLFxuICAgICAgcmVwbGFjZTogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KVxuICAgIH07XG4gIH0sIFtyb3V0ZXJdKTtcbiAgbGV0IGJhc2VuYW1lID0gcm91dGVyLmJhc2VuYW1lIHx8IFwiL1wiOyAvLyBUaGUgZnJhZ21lbnQgYW5kIHtudWxsfSBoZXJlIGFyZSBpbXBvcnRhbnQhICBXZSBuZWVkIHRoZW0gdG8ga2VlcCBSZWFjdCAxOCdzXG4gIC8vIHVzZUlkIGhhcHB5IHdoZW4gd2UgYXJlIHNlcnZlci1yZW5kZXJpbmcgc2luY2Ugd2UgbWF5IGhhdmUgYSA8c2NyaXB0PiBoZXJlXG4gIC8vIGNvbnRhaW5pbmcgdGhlIGh5ZHJhdGVkIHNlcnZlci1zaWRlIHN0YXRpY0NvbnRleHQgKGZyb20gU3RhdGljUm91dGVyUHJvdmlkZXIpLlxuICAvLyB1c2VJZCByZWxpZXMgb24gdGhlIGNvbXBvbmVudCB0cmVlIHN0cnVjdHVyZSB0byBnZW5lcmF0ZSBkZXRlcm1pbmlzdGljIGlkJ3NcbiAgLy8gc28gd2UgbmVlZCB0byBlbnN1cmUgaXQgcmVtYWlucyB0aGUgc2FtZSBvbiB0aGUgY2xpZW50IGV2ZW4gdGhvdWdoXG4gIC8vIHdlIGRvbid0IG5lZWQgdGhlIDxzY3JpcHQ+IHRhZ1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZToge1xuICAgICAgcm91dGVyLFxuICAgICAgbmF2aWdhdG9yLFxuICAgICAgc3RhdGljOiBmYWxzZSxcbiAgICAgIC8vIERvIHdlIG5lZWQgdGhpcz9cbiAgICAgIGJhc2VuYW1lXG4gICAgfVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhUm91dGVyU3RhdGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHN0YXRlXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiByb3V0ZXIuYmFzZW5hbWUsXG4gICAgbG9jYXRpb246IHJvdXRlci5zdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogcm91dGVyLnN0YXRlLmhpc3RvcnlBY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBuYXZpZ2F0b3JcbiAgfSwgcm91dGVyLnN0YXRlLmluaXRpYWxpemVkID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVzLCBudWxsKSA6IGZhbGxiYWNrRWxlbWVudCkpKSwgbnVsbCk7XG59XG5cbi8qKlxuICogQSA8Um91dGVyPiB0aGF0IHN0b3JlcyBhbGwgZW50cmllcyBpbiBtZW1vcnkuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9yb3V0ZXItY29tcG9uZW50cy9tZW1vcnktcm91dGVyXG4gKi9cbmZ1bmN0aW9uIE1lbW9yeVJvdXRlcihfcmVmMikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGluaXRpYWxFbnRyaWVzLFxuICAgIGluaXRpYWxJbmRleFxuICB9ID0gX3JlZjI7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlTWVtb3J5SGlzdG9yeSh7XG4gICAgICBpbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxJbmRleCxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cblxuLyoqXG4gKiBDaGFuZ2VzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIE5vdGU6IFRoaXMgQVBJIGlzIG1vc3RseSB1c2VmdWwgaW4gUmVhY3QuQ29tcG9uZW50IHN1YmNsYXNzZXMgdGhhdCBhcmUgbm90XG4gKiBhYmxlIHRvIHVzZSBob29rcy4gSW4gZnVuY3Rpb25hbCBjb21wb25lbnRzLCB3ZSByZWNvbW1lbmQgeW91IHVzZSB0aGVcbiAqIGB1c2VOYXZpZ2F0ZWAgaG9vayBpbnN0ZWFkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9uYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiBOYXZpZ2F0ZShfcmVmMykge1xuICBsZXQge1xuICAgIHRvLFxuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgcmVsYXRpdmVcbiAgfSA9IF9yZWYzO1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZlxuICAvLyB0aGUgcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcIjxOYXZpZ2F0ZT4gbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCkuc3RhdGljLCBcIjxOYXZpZ2F0ZT4gbXVzdCBub3QgYmUgdXNlZCBvbiB0aGUgaW5pdGlhbCByZW5kZXIgaW4gYSA8U3RhdGljUm91dGVyPi4gXCIgKyBcIlRoaXMgaXMgYSBuby1vcCwgYnV0IHlvdSBzaG91bGQgbW9kaWZ5IHlvdXIgY29kZSBzbyB0aGUgPE5hdmlnYXRlPiBpcyBcIiArIFwib25seSBldmVyIHJlbmRlcmVkIGluIHJlc3BvbnNlIHRvIHNvbWUgdXNlciBpbnRlcmFjdGlvbiBvciBzdGF0ZSBjaGFuZ2UuXCIpIDogdm9pZCAwO1xuICBsZXQgZGF0YVJvdXRlclN0YXRlID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBBdm9pZCBraWNraW5nIG9mZiBtdWx0aXBsZSBuYXZpZ2F0aW9ucyBpZiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGFcbiAgICAvLyBkYXRhLXJvdXRlciBuYXZpZ2F0aW9uLCBzaW5jZSBjb21wb25lbnRzIGdldCByZS1yZW5kZXJlZCB3aGVuIHdlIGVudGVyXG4gICAgLy8gYSBzdWJtaXR0aW5nL2xvYWRpbmcgc3RhdGVcbiAgICBpZiAoZGF0YVJvdXRlclN0YXRlICYmIGRhdGFSb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlICE9PSBcImlkbGVcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG5hdmlnYXRlKHRvLCB7XG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGUsXG4gICAgICByZWxhdGl2ZVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogUmVuZGVycyB0aGUgY2hpbGQgcm91dGUncyBlbGVtZW50LCBpZiB0aGVyZSBpcyBvbmUuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL291dGxldFxuICovXG5mdW5jdGlvbiBPdXRsZXQocHJvcHMpIHtcbiAgcmV0dXJuIHVzZU91dGxldChwcm9wcy5jb250ZXh0KTtcbn1cblxuLyoqXG4gKiBEZWNsYXJlcyBhbiBlbGVtZW50IHRoYXQgc2hvdWxkIGJlIHJlbmRlcmVkIGF0IGEgY2VydGFpbiBVUkwgcGF0aC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvcm91dGVcbiAqL1xuZnVuY3Rpb24gUm91dGUoX3Byb3BzKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiQSA8Um91dGU+IGlzIG9ubHkgZXZlciB0byBiZSB1c2VkIGFzIHRoZSBjaGlsZCBvZiA8Um91dGVzPiBlbGVtZW50LCBcIiArIFwibmV2ZXIgcmVuZGVyZWQgZGlyZWN0bHkuIFBsZWFzZSB3cmFwIHlvdXIgPFJvdXRlPiBpbiBhIDxSb3V0ZXM+LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDtcbn1cblxuLyoqXG4gKiBQcm92aWRlcyBsb2NhdGlvbiBjb250ZXh0IGZvciB0aGUgcmVzdCBvZiB0aGUgYXBwLlxuICpcbiAqIE5vdGU6IFlvdSB1c3VhbGx5IHdvbid0IHJlbmRlciBhIDxSb3V0ZXI+IGRpcmVjdGx5LiBJbnN0ZWFkLCB5b3UnbGwgcmVuZGVyIGFcbiAqIHJvdXRlciB0aGF0IGlzIG1vcmUgc3BlY2lmaWMgdG8geW91ciBlbnZpcm9ubWVudCBzdWNoIGFzIGEgPEJyb3dzZXJSb3V0ZXI+XG4gKiBpbiB3ZWIgYnJvd3NlcnMgb3IgYSA8U3RhdGljUm91dGVyPiBmb3Igc2VydmVyIHJlbmRlcmluZy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlci1jb21wb25lbnRzL3JvdXRlclxuICovXG5mdW5jdGlvbiBSb3V0ZXIoX3JlZjQpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWVQcm9wID0gXCIvXCIsXG4gICAgY2hpbGRyZW4gPSBudWxsLFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvblByb3AsXG4gICAgbmF2aWdhdGlvblR5cGUgPSBBY3Rpb24uUG9wLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IHN0YXRpY1Byb3AgPSBmYWxzZVxuICB9ID0gX3JlZjQ7XG4gICEhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgcmVuZGVyIGEgPFJvdXRlcj4gaW5zaWRlIGFub3RoZXIgPFJvdXRlcj4uXCIgKyBcIiBZb3Ugc2hvdWxkIG5ldmVyIGhhdmUgbW9yZSB0aGFuIG9uZSBpbiB5b3VyIGFwcC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsgLy8gUHJlc2VydmUgdHJhaWxpbmcgc2xhc2hlcyBvbiBiYXNlbmFtZSwgc28gd2UgY2FuIGxldCB0aGUgdXNlciBjb250cm9sXG4gIC8vIHRoZSBlbmZvcmNlbWVudCBvZiB0cmFpbGluZyBzbGFzaGVzIHRocm91Z2hvdXQgdGhlIGFwcFxuXG4gIGxldCBiYXNlbmFtZSA9IGJhc2VuYW1lUHJvcC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcbiAgbGV0IG5hdmlnYXRpb25Db250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IHN0YXRpY1Byb3BcbiAgfSksIFtiYXNlbmFtZSwgbmF2aWdhdG9yLCBzdGF0aWNQcm9wXSk7XG5cbiAgaWYgKHR5cGVvZiBsb2NhdGlvblByb3AgPT09IFwic3RyaW5nXCIpIHtcbiAgICBsb2NhdGlvblByb3AgPSBwYXJzZVBhdGgobG9jYXRpb25Qcm9wKTtcbiAgfVxuXG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiLFxuICAgIHN0YXRlID0gbnVsbCxcbiAgICBrZXkgPSBcImRlZmF1bHRcIlxuICB9ID0gbG9jYXRpb25Qcm9wO1xuICBsZXQgbG9jYXRpb24gPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgdHJhaWxpbmdQYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUocGF0aG5hbWUsIGJhc2VuYW1lKTtcblxuICAgIGlmICh0cmFpbGluZ1BhdGhuYW1lID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwYXRobmFtZTogdHJhaWxpbmdQYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2gsXG4gICAgICBzdGF0ZSxcbiAgICAgIGtleVxuICAgIH07XG4gIH0sIFtiYXNlbmFtZSwgcGF0aG5hbWUsIHNlYXJjaCwgaGFzaCwgc3RhdGUsIGtleV0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGxvY2F0aW9uICE9IG51bGwsIFwiPFJvdXRlciBiYXNlbmFtZT1cXFwiXCIgKyBiYXNlbmFtZSArIFwiXFxcIj4gaXMgbm90IGFibGUgdG8gbWF0Y2ggdGhlIFVSTCBcIiArIChcIlxcXCJcIiArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaCArIFwiXFxcIiBiZWNhdXNlIGl0IGRvZXMgbm90IHN0YXJ0IHdpdGggdGhlIFwiKSArIFwiYmFzZW5hbWUsIHNvIHRoZSA8Um91dGVyPiB3b24ndCByZW5kZXIgYW55dGhpbmcuXCIpIDogdm9pZCAwO1xuXG4gIGlmIChsb2NhdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2aWdhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogbmF2aWdhdGlvbkNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIHZhbHVlOiB7XG4gICAgICBsb2NhdGlvbixcbiAgICAgIG5hdmlnYXRpb25UeXBlXG4gICAgfVxuICB9KSk7XG59XG5cbi8qKlxuICogQSBjb250YWluZXIgZm9yIGEgbmVzdGVkIHRyZWUgb2YgPFJvdXRlPiBlbGVtZW50cyB0aGF0IHJlbmRlcnMgdGhlIGJyYW5jaFxuICogdGhhdCBiZXN0IG1hdGNoZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL3JvdXRlc1xuICovXG5mdW5jdGlvbiBSb3V0ZXMoX3JlZjUpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlbixcbiAgICBsb2NhdGlvblxuICB9ID0gX3JlZjU7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpOyAvLyBXaGVuIGluIGEgRGF0YVJvdXRlckNvbnRleHQgX3dpdGhvdXRfIGNoaWxkcmVuLCB3ZSB1c2UgdGhlIHJvdXRlciByb3V0ZXNcbiAgLy8gZGlyZWN0bHkuICBJZiB3ZSBoYXZlIGNoaWxkcmVuLCB0aGVuIHdlJ3JlIGluIGEgZGVzY2VuZGFudCB0cmVlIGFuZCB3ZVxuICAvLyBuZWVkIHRvIHVzZSBjaGlsZCByb3V0ZXMuXG5cbiAgbGV0IHJvdXRlcyA9IGRhdGFSb3V0ZXJDb250ZXh0ICYmICFjaGlsZHJlbiA/IGRhdGFSb3V0ZXJDb250ZXh0LnJvdXRlci5yb3V0ZXMgOiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICByZXR1cm4gdXNlUm91dGVzKHJvdXRlcywgbG9jYXRpb24pO1xufVxuXG4vKipcbiAqIENvbXBvbmVudCB0byB1c2UgZm9yIHJlbmRlcmluZyBsYXppbHkgbG9hZGVkIGRhdGEgZnJvbSByZXR1cm5pbmcgZGVmZXIoKVxuICogaW4gYSBsb2FkZXIgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gQXdhaXQoX3JlZjYpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlbixcbiAgICBlcnJvckVsZW1lbnQsXG4gICAgcmVzb2x2ZVxuICB9ID0gX3JlZjY7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdEVycm9yQm91bmRhcnksIHtcbiAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgIGVycm9yRWxlbWVudDogZXJyb3JFbGVtZW50XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlc29sdmVBd2FpdCwgbnVsbCwgY2hpbGRyZW4pKTtcbn1cbnZhciBBd2FpdFJlbmRlclN0YXR1cztcblxuKGZ1bmN0aW9uIChBd2FpdFJlbmRlclN0YXR1cykge1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInBlbmRpbmdcIl0gPSAwXSA9IFwicGVuZGluZ1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInN1Y2Nlc3NcIl0gPSAxXSA9IFwic3VjY2Vzc1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcImVycm9yXCJdID0gMl0gPSBcImVycm9yXCI7XG59KShBd2FpdFJlbmRlclN0YXR1cyB8fCAoQXdhaXRSZW5kZXJTdGF0dXMgPSB7fSkpO1xuXG5jb25zdCBuZXZlclNldHRsZWRQcm9taXNlID0gbmV3IFByb21pc2UoKCkgPT4ge30pO1xuXG5jbGFzcyBBd2FpdEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZXJyb3I6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvclxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRDYXRjaChlcnJvciwgZXJyb3JJbmZvKSB7XG4gICAgY29uc29sZS5lcnJvcihcIjxBd2FpdD4gY2F1Z2h0IHRoZSBmb2xsb3dpbmcgZXJyb3IgZHVyaW5nIHJlbmRlclwiLCBlcnJvciwgZXJyb3JJbmZvKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBlcnJvckVsZW1lbnQsXG4gICAgICByZXNvbHZlXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IHByb21pc2UgPSBudWxsO1xuICAgIGxldCBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuXG4gICAgaWYgKCEocmVzb2x2ZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAvLyBEaWRuJ3QgZ2V0IGEgcHJvbWlzZSAtIHByb3ZpZGUgYXMgYSByZXNvbHZlZCBwcm9taXNlXG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2RhdGFcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgLy8gQ2F1Z2h0IGEgcmVuZGVyIGVycm9yLCBwcm92aWRlIGl0IGFzIGEgcmVqZWN0ZWQgcHJvbWlzZVxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3I7XG4gICAgICBsZXQgcmVuZGVyRXJyb3IgPSB0aGlzLnN0YXRlLmVycm9yO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KCkuY2F0Y2goKCkgPT4ge30pOyAvLyBBdm9pZCB1bmhhbmRsZWQgcmVqZWN0aW9uIHdhcm5pbmdzXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gcmVuZGVyRXJyb3JcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocmVzb2x2ZS5fdHJhY2tlZCkge1xuICAgICAgLy8gQWxyZWFkeSB0cmFja2VkIHByb21pc2UgLSBjaGVjayBjb250ZW50c1xuICAgICAgcHJvbWlzZSA9IHJlc29sdmU7XG4gICAgICBzdGF0dXMgPSBwcm9taXNlLl9lcnJvciAhPT0gdW5kZWZpbmVkID8gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgOiBwcm9taXNlLl9kYXRhICE9PSB1bmRlZmluZWQgPyBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzIDogQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmF3ICh1bnRyYWNrZWQpIHByb21pc2UgLSB0cmFjayBpdFxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHByb21pc2UgPSByZXNvbHZlLnRoZW4oZGF0YSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfZGF0YVwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZGF0YVxuICAgICAgfSksIGVycm9yID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciAmJiBwcm9taXNlLl9lcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yKSB7XG4gICAgICAvLyBGcmVlemUgdGhlIFVJIGJ5IHRocm93aW5nIGEgbmV2ZXIgcmVzb2x2ZWQgcHJvbWlzZVxuICAgICAgdGhyb3cgbmV2ZXJTZXR0bGVkUHJvbWlzZTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciAmJiAhZXJyb3JFbGVtZW50KSB7XG4gICAgICAvLyBObyBlcnJvckVsZW1lbnQsIHRocm93IHRvIHRoZSBuZWFyZXN0IHJvdXRlLWxldmVsIGVycm9yIGJvdW5kYXJ5XG4gICAgICB0aHJvdyBwcm9taXNlLl9lcnJvcjtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvcikge1xuICAgICAgLy8gUmVuZGVyIHZpYSBvdXIgZXJyb3JFbGVtZW50XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9taXNlLFxuICAgICAgICBjaGlsZHJlbjogZXJyb3JFbGVtZW50XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzKSB7XG4gICAgICAvLyBSZW5kZXIgY2hpbGRyZW4gd2l0aCByZXNvbHZlZCB2YWx1ZVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvbWlzZSxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KTtcbiAgICB9IC8vIFRocm93IHRvIHRoZSBzdXNwZW5zZSBib3VuZGFyeVxuXG5cbiAgICB0aHJvdyBwcm9taXNlO1xuICB9XG5cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqIEluZGlyZWN0aW9uIHRvIGxldmVyYWdlIHVzZUFzeW5jVmFsdWUgZm9yIGEgcmVuZGVyLXByb3AgQVBJIG9uIDxBd2FpdD5cbiAqL1xuXG5cbmZ1bmN0aW9uIFJlc29sdmVBd2FpdChfcmVmNykge1xuICBsZXQge1xuICAgIGNoaWxkcmVuXG4gIH0gPSBfcmVmNztcbiAgbGV0IGRhdGEgPSB1c2VBc3luY1ZhbHVlKCk7XG4gIGxldCB0b1JlbmRlciA9IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gY2hpbGRyZW4oZGF0YSkgOiBjaGlsZHJlbjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCB0b1JlbmRlcik7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFVUSUxTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQ3JlYXRlcyBhIHJvdXRlIGNvbmZpZyBmcm9tIGEgUmVhY3QgXCJjaGlsZHJlblwiIG9iamVjdCwgd2hpY2ggaXMgdXN1YWxseVxuICogZWl0aGVyIGEgYDxSb3V0ZT5gIGVsZW1lbnQgb3IgYW4gYXJyYXkgb2YgdGhlbS4gVXNlZCBpbnRlcm5hbGx5IGJ5XG4gKiBgPFJvdXRlcz5gIHRvIGNyZWF0ZSBhIHJvdXRlIGNvbmZpZyBmcm9tIGl0cyBjaGlsZHJlbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL2NyZWF0ZS1yb3V0ZXMtZnJvbS1jaGlsZHJlblxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRQYXRoKSB7XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gW107XG4gIH1cblxuICBsZXQgcm91dGVzID0gW107XG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgIGlmICghIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgLy8gSWdub3JlIG5vbi1lbGVtZW50cy4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIG1vcmUgZWFzaWx5IGlubGluZVxuICAgICAgLy8gY29uZGl0aW9uYWxzIGluIHRoZWlyIHJvdXRlIGNvbmZpZy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC50eXBlID09PSBSZWFjdC5GcmFnbWVudCkge1xuICAgICAgLy8gVHJhbnNwYXJlbnRseSBzdXBwb3J0IFJlYWN0LkZyYWdtZW50IGFuZCBpdHMgY2hpbGRyZW4uXG4gICAgICByb3V0ZXMucHVzaC5hcHBseShyb3V0ZXMsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuLCBwYXJlbnRQYXRoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgIShlbGVtZW50LnR5cGUgPT09IFJvdXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiW1wiICsgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09IFwic3RyaW5nXCIgPyBlbGVtZW50LnR5cGUgOiBlbGVtZW50LnR5cGUubmFtZSkgKyBcIl0gaXMgbm90IGEgPFJvdXRlPiBjb21wb25lbnQuIEFsbCBjb21wb25lbnQgY2hpbGRyZW4gb2YgPFJvdXRlcz4gbXVzdCBiZSBhIDxSb3V0ZT4gb3IgPFJlYWN0LkZyYWdtZW50PlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEoIWVsZW1lbnQucHJvcHMuaW5kZXggfHwgIWVsZW1lbnQucHJvcHMuY2hpbGRyZW4pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJBbiBpbmRleCByb3V0ZSBjYW5ub3QgaGF2ZSBjaGlsZCByb3V0ZXMuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbGV0IHRyZWVQYXRoID0gWy4uLnBhcmVudFBhdGgsIGluZGV4XTtcbiAgICBsZXQgcm91dGUgPSB7XG4gICAgICBpZDogZWxlbWVudC5wcm9wcy5pZCB8fCB0cmVlUGF0aC5qb2luKFwiLVwiKSxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGVsZW1lbnQucHJvcHMuY2FzZVNlbnNpdGl2ZSxcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQucHJvcHMuZWxlbWVudCxcbiAgICAgIGluZGV4OiBlbGVtZW50LnByb3BzLmluZGV4LFxuICAgICAgcGF0aDogZWxlbWVudC5wcm9wcy5wYXRoLFxuICAgICAgbG9hZGVyOiBlbGVtZW50LnByb3BzLmxvYWRlcixcbiAgICAgIGFjdGlvbjogZWxlbWVudC5wcm9wcy5hY3Rpb24sXG4gICAgICBlcnJvckVsZW1lbnQ6IGVsZW1lbnQucHJvcHMuZXJyb3JFbGVtZW50LFxuICAgICAgaGFzRXJyb3JCb3VuZGFyeTogZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQgIT0gbnVsbCxcbiAgICAgIHNob3VsZFJldmFsaWRhdGU6IGVsZW1lbnQucHJvcHMuc2hvdWxkUmV2YWxpZGF0ZSxcbiAgICAgIGhhbmRsZTogZWxlbWVudC5wcm9wcy5oYW5kbGVcbiAgICB9O1xuXG4gICAgaWYgKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIHJvdXRlLmNoaWxkcmVuID0gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sIHRyZWVQYXRoKTtcbiAgICB9XG5cbiAgICByb3V0ZXMucHVzaChyb3V0ZSk7XG4gIH0pO1xuICByZXR1cm4gcm91dGVzO1xufVxuLyoqXG4gKiBSZW5kZXJzIHRoZSByZXN1bHQgb2YgYG1hdGNoUm91dGVzKClgIGludG8gYSBSZWFjdCBlbGVtZW50LlxuICovXG5cbmZ1bmN0aW9uIHJlbmRlck1hdGNoZXMobWF0Y2hlcykge1xuICByZXR1cm4gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKiBXYWxrIHRoZSByb3V0ZSB0cmVlIGFuZCBhZGQgaGFzRXJyb3JCb3VuZGFyeSBpZiBpdCdzIG5vdCBwcm92aWRlZCwgc28gdGhhdFxuICogdXNlcnMgcHJvdmlkaW5nIG1hbnVhbCByb3V0ZSBhcnJheXMgY2FuIGp1c3Qgc3BlY2lmeSBlcnJvckVsZW1lbnRcbiAqL1xuXG5mdW5jdGlvbiBlbmhhbmNlTWFudWFsUm91dGVPYmplY3RzKHJvdXRlcykge1xuICByZXR1cm4gcm91dGVzLm1hcChyb3V0ZSA9PiB7XG4gICAgbGV0IHJvdXRlQ2xvbmUgPSBfZXh0ZW5kcyh7fSwgcm91dGUpO1xuXG4gICAgaWYgKHJvdXRlQ2xvbmUuaGFzRXJyb3JCb3VuZGFyeSA9PSBudWxsKSB7XG4gICAgICByb3V0ZUNsb25lLmhhc0Vycm9yQm91bmRhcnkgPSByb3V0ZUNsb25lLmVycm9yRWxlbWVudCAhPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChyb3V0ZUNsb25lLmNoaWxkcmVuKSB7XG4gICAgICByb3V0ZUNsb25lLmNoaWxkcmVuID0gZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cyhyb3V0ZUNsb25lLmNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm91dGVDbG9uZTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeVJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgaGlzdG9yeTogY3JlYXRlTWVtb3J5SGlzdG9yeSh7XG4gICAgICBpbml0aWFsRW50cmllczogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxJbmRleDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5pbml0aWFsSW5kZXhcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmh5ZHJhdGlvbkRhdGEsXG4gICAgcm91dGVzOiBlbmhhbmNlTWFudWFsUm91dGVPYmplY3RzKHJvdXRlcylcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmV4cG9ydCB7IEF3YWl0LCBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlclByb3ZpZGVyLCBSb3V0ZXMsIERhdGFSb3V0ZXJDb250ZXh0IGFzIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCwgRGF0YVJvdXRlclN0YXRlQ29udGV4dCBhcyBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgTG9jYXRpb25Db250ZXh0IGFzIFVOU0FGRV9Mb2NhdGlvbkNvbnRleHQsIE5hdmlnYXRpb25Db250ZXh0IGFzIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgUm91dGVDb250ZXh0IGFzIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIGVuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMgYXMgVU5TQUZFX2VuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMsIGNyZWF0ZU1lbW9yeVJvdXRlciwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4gYXMgY3JlYXRlUm91dGVzRnJvbUVsZW1lbnRzLCByZW5kZXJNYXRjaGVzLCB1c2VCbG9ja2VyIGFzIHVuc3RhYmxlX3VzZUJsb2NrZXIsIHVzZUFjdGlvbkRhdGEsIHVzZUFzeW5jRXJyb3IsIHVzZUFzeW5jVmFsdWUsIHVzZUhyZWYsIHVzZUluUm91dGVyQ29udGV4dCwgdXNlTG9hZGVyRGF0YSwgdXNlTG9jYXRpb24sIHVzZU1hdGNoLCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0ZSwgdXNlTmF2aWdhdGlvbiwgdXNlTmF2aWdhdGlvblR5cGUsIHVzZU91dGxldCwgdXNlT3V0bGV0Q29udGV4dCwgdXNlUGFyYW1zLCB1c2VSZXNvbHZlZFBhdGgsIHVzZVJldmFsaWRhdG9yLCB1c2VSb3V0ZUVycm9yLCB1c2VSb3V0ZUxvYWRlckRhdGEsIHVzZVJvdXRlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIvKipcbiAqIFJlYWN0IFJvdXRlciBET00gdjYuOC4yXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFVOU0FGRV9lbmhhbmNlTWFudWFsUm91dGVPYmplY3RzLCBSb3V0ZXIsIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgdXNlSHJlZiwgdXNlUmVzb2x2ZWRQYXRoLCB1c2VMb2NhdGlvbiwgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIHVzZU5hdmlnYXRlLCBjcmVhdGVQYXRoLCBVTlNBRkVfUm91dGVDb250ZXh0LCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0aW9uLCB1bnN0YWJsZV91c2VCbG9ja2VyLCBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEF3YWl0LCBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBOYXZpZ2F0aW9uVHlwZSwgT3V0bGV0LCBSb3V0ZSwgUm91dGVyLCBSb3V0ZXJQcm92aWRlciwgUm91dGVzLCBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIFVOU0FGRV9lbmhhbmNlTWFudWFsUm91dGVPYmplY3RzLCBjcmVhdGVNZW1vcnlSb3V0ZXIsIGNyZWF0ZVBhdGgsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgY3JlYXRlUm91dGVzRnJvbUVsZW1lbnRzLCBkZWZlciwgZ2VuZXJhdGVQYXRoLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwganNvbiwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgcGFyc2VQYXRoLCByZWRpcmVjdCwgcmVuZGVyTWF0Y2hlcywgcmVzb2x2ZVBhdGgsIHVuc3RhYmxlX3VzZUJsb2NrZXIsIHVzZUFjdGlvbkRhdGEsIHVzZUFzeW5jRXJyb3IsIHVzZUFzeW5jVmFsdWUsIHVzZUhyZWYsIHVzZUluUm91dGVyQ29udGV4dCwgdXNlTG9hZGVyRGF0YSwgdXNlTG9jYXRpb24sIHVzZU1hdGNoLCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0ZSwgdXNlTmF2aWdhdGlvbiwgdXNlTmF2aWdhdGlvblR5cGUsIHVzZU91dGxldCwgdXNlT3V0bGV0Q29udGV4dCwgdXNlUGFyYW1zLCB1c2VSZXNvbHZlZFBhdGgsIHVzZVJldmFsaWRhdG9yLCB1c2VSb3V0ZUVycm9yLCB1c2VSb3V0ZUxvYWRlckRhdGEsIHVzZVJvdXRlcyB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgeyBjcmVhdGVSb3V0ZXIsIGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgRXJyb3JSZXNwb25zZSwgc3RyaXBCYXNlbmFtZSwgVU5TQUZFX2ludmFyaWFudCwgam9pblBhdGhzIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5jb25zdCBkZWZhdWx0TWV0aG9kID0gXCJnZXRcIjtcbmNvbnN0IGRlZmF1bHRFbmNUeXBlID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcbmZ1bmN0aW9uIGlzSHRtbEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0LnRhZ05hbWUgPT09IFwic3RyaW5nXCI7XG59XG5mdW5jdGlvbiBpc0J1dHRvbkVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJidXR0b25cIjtcbn1cbmZ1bmN0aW9uIGlzRm9ybUVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmb3JtXCI7XG59XG5mdW5jdGlvbiBpc0lucHV0RWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCI7XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFByb2Nlc3NMaW5rQ2xpY2soZXZlbnQsIHRhcmdldCkge1xuICByZXR1cm4gZXZlbnQuYnV0dG9uID09PSAwICYmICggLy8gSWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIExldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIElnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gIDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QgdXNpbmcgdGhlIGdpdmVuIGluaXRpYWxpemVyLlxuICpcbiAqIFRoaXMgaXMgaWRlbnRpY2FsIHRvIGBuZXcgVVJMU2VhcmNoUGFyYW1zKGluaXQpYCBleGNlcHQgaXQgYWxzb1xuICogc3VwcG9ydHMgYXJyYXlzIGFzIHZhbHVlcyBpbiB0aGUgb2JqZWN0IGZvcm0gb2YgdGhlIGluaXRpYWxpemVyXG4gKiBpbnN0ZWFkIG9mIGp1c3Qgc3RyaW5ncy4gVGhpcyBpcyBjb252ZW5pZW50IHdoZW4geW91IG5lZWQgbXVsdGlwbGVcbiAqIHZhbHVlcyBmb3IgYSBnaXZlbiBrZXksIGJ1dCBkb24ndCB3YW50IHRvIHVzZSBhbiBhcnJheSBpbml0aWFsaXplci5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZjpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKFtcbiAqICAgICBbJ3NvcnQnLCAnbmFtZSddLFxuICogICAgIFsnc29ydCcsICdwcmljZSddXG4gKiAgIF0pO1xuICpcbiAqIHlvdSBjYW4gZG86XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKHtcbiAqICAgICBzb3J0OiBbJ25hbWUnLCAncHJpY2UnXVxuICogICB9KTtcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTZWFyY2hQYXJhbXMoaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IFwiXCI7XG4gIH1cblxuICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyh0eXBlb2YgaW5pdCA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KGluaXQpIHx8IGluaXQgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMgPyBpbml0IDogT2JqZWN0LmtleXMoaW5pdCkucmVkdWNlKChtZW1vLCBrZXkpID0+IHtcbiAgICBsZXQgdmFsdWUgPSBpbml0W2tleV07XG4gICAgcmV0dXJuIG1lbW8uY29uY2F0KEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKHYgPT4gW2tleSwgdl0pIDogW1trZXksIHZhbHVlXV0pO1xuICB9LCBbXSkpO1xufVxuZnVuY3Rpb24gZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24obG9jYXRpb25TZWFyY2gsIGRlZmF1bHRTZWFyY2hQYXJhbXMpIHtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyhsb2NhdGlvblNlYXJjaCk7XG5cbiAgaWYgKGRlZmF1bHRTZWFyY2hQYXJhbXMpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgZGVmYXVsdFNlYXJjaFBhcmFtcy5rZXlzKCkpIHtcbiAgICAgIGlmICghc2VhcmNoUGFyYW1zLmhhcyhrZXkpKSB7XG4gICAgICAgIGRlZmF1bHRTZWFyY2hQYXJhbXMuZ2V0QWxsKGtleSkuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbn1cbmZ1bmN0aW9uIGdldEZvcm1TdWJtaXNzaW9uSW5mbyh0YXJnZXQsIGRlZmF1bHRBY3Rpb24sIG9wdGlvbnMpIHtcbiAgbGV0IG1ldGhvZDtcbiAgbGV0IGFjdGlvbjtcbiAgbGV0IGVuY1R5cGU7XG4gIGxldCBmb3JtRGF0YTtcblxuICBpZiAoaXNGb3JtRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgbGV0IHN1Ym1pc3Npb25UcmlnZ2VyID0gb3B0aW9ucy5zdWJtaXNzaW9uVHJpZ2dlcjtcbiAgICBtZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwibWV0aG9kXCIpIHx8IGRlZmF1bHRNZXRob2Q7XG4gICAgYWN0aW9uID0gb3B0aW9ucy5hY3Rpb24gfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImFjdGlvblwiKSB8fCBkZWZhdWx0QWN0aW9uO1xuICAgIGVuY1R5cGUgPSBvcHRpb25zLmVuY1R5cGUgfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImVuY3R5cGVcIikgfHwgZGVmYXVsdEVuY1R5cGU7XG4gICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEodGFyZ2V0KTtcblxuICAgIGlmIChzdWJtaXNzaW9uVHJpZ2dlciAmJiBzdWJtaXNzaW9uVHJpZ2dlci5uYW1lKSB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoc3VibWlzc2lvblRyaWdnZXIubmFtZSwgc3VibWlzc2lvblRyaWdnZXIudmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0J1dHRvbkVsZW1lbnQodGFyZ2V0KSB8fCBpc0lucHV0RWxlbWVudCh0YXJnZXQpICYmICh0YXJnZXQudHlwZSA9PT0gXCJzdWJtaXRcIiB8fCB0YXJnZXQudHlwZSA9PT0gXCJpbWFnZVwiKSkge1xuICAgIGxldCBmb3JtID0gdGFyZ2V0LmZvcm07XG5cbiAgICBpZiAoZm9ybSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc3VibWl0IGEgPGJ1dHRvbj4gb3IgPGlucHV0IHR5cGU9XFxcInN1Ym1pdFxcXCI+IHdpdGhvdXQgYSA8Zm9ybT5cIik7XG4gICAgfSAvLyA8YnV0dG9uPi88aW5wdXQgdHlwZT1cInN1Ym1pdFwiPiBtYXkgb3ZlcnJpZGUgYXR0cmlidXRlcyBvZiA8Zm9ybT5cblxuXG4gICAgbWV0aG9kID0gb3B0aW9ucy5tZXRob2QgfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBhY3Rpb24gPSBvcHRpb25zLmFjdGlvbiB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybWFjdGlvblwiKSB8fCBmb3JtLmdldEF0dHJpYnV0ZShcImFjdGlvblwiKSB8fCBkZWZhdWx0QWN0aW9uO1xuICAgIGVuY1R5cGUgPSBvcHRpb25zLmVuY1R5cGUgfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1lbmN0eXBlXCIpIHx8IGZvcm0uZ2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiKSB8fCBkZWZhdWx0RW5jVHlwZTtcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtKTsgLy8gSW5jbHVkZSBuYW1lICsgdmFsdWUgZnJvbSBhIDxidXR0b24+LCBhcHBlbmRpbmcgaW4gY2FzZSB0aGUgYnV0dG9uIG5hbWVcbiAgICAvLyBtYXRjaGVzIGFuIGV4aXN0aW5nIGlucHV0IG5hbWVcblxuICAgIGlmICh0YXJnZXQubmFtZSkge1xuICAgICAgZm9ybURhdGEuYXBwZW5kKHRhcmdldC5uYW1lLCB0YXJnZXQudmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0h0bWxFbGVtZW50KHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc3VibWl0IGVsZW1lbnQgdGhhdCBpcyBub3QgPGZvcm0+LCA8YnV0dG9uPiwgb3IgXCIgKyBcIjxpbnB1dCB0eXBlPVxcXCJzdWJtaXR8aW1hZ2VcXFwiPlwiKTtcbiAgfSBlbHNlIHtcbiAgICBtZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCBkZWZhdWx0TWV0aG9kO1xuICAgIGFjdGlvbiA9IG9wdGlvbnMuYWN0aW9uIHx8IGRlZmF1bHRBY3Rpb247XG4gICAgZW5jVHlwZSA9IG9wdGlvbnMuZW5jVHlwZSB8fCBkZWZhdWx0RW5jVHlwZTtcblxuICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBGb3JtRGF0YSkge1xuICAgICAgZm9ybURhdGEgPSB0YXJnZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG5cbiAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMpIHtcbiAgICAgICAgZm9yIChsZXQgW25hbWUsIHZhbHVlXSBvZiB0YXJnZXQpIHtcbiAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAobGV0IG5hbWUgb2YgT2JqZWN0LmtleXModGFyZ2V0KSkge1xuICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCB0YXJnZXRbbmFtZV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbGV0IHtcbiAgICBwcm90b2NvbCxcbiAgICBob3N0XG4gIH0gPSB3aW5kb3cubG9jYXRpb247XG4gIGxldCB1cmwgPSBuZXcgVVJMKGFjdGlvbiwgcHJvdG9jb2wgKyBcIi8vXCIgKyBob3N0KTtcbiAgcmV0dXJuIHtcbiAgICB1cmwsXG4gICAgbWV0aG9kOiBtZXRob2QudG9Mb3dlckNhc2UoKSxcbiAgICBlbmNUeXBlLFxuICAgIGZvcm1EYXRhXG4gIH07XG59XG5cbmNvbnN0IF9leGNsdWRlZCA9IFtcIm9uQ2xpY2tcIiwgXCJyZWxhdGl2ZVwiLCBcInJlbG9hZERvY3VtZW50XCIsIFwicmVwbGFjZVwiLCBcInN0YXRlXCIsIFwidGFyZ2V0XCIsIFwidG9cIiwgXCJwcmV2ZW50U2Nyb2xsUmVzZXRcIl0sXG4gICAgICBfZXhjbHVkZWQyID0gW1wiYXJpYS1jdXJyZW50XCIsIFwiY2FzZVNlbnNpdGl2ZVwiLCBcImNsYXNzTmFtZVwiLCBcImVuZFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJjaGlsZHJlblwiXSxcbiAgICAgIF9leGNsdWRlZDMgPSBbXCJyZWxvYWREb2N1bWVudFwiLCBcInJlcGxhY2VcIiwgXCJtZXRob2RcIiwgXCJhY3Rpb25cIiwgXCJvblN1Ym1pdFwiLCBcImZldGNoZXJLZXlcIiwgXCJyb3V0ZUlkXCIsIFwicmVsYXRpdmVcIiwgXCJwcmV2ZW50U2Nyb2xsUmVzZXRcIl07XG4vLyNyZWdpb24gUm91dGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3NlclJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgaGlzdG9yeTogY3JlYXRlQnJvd3Nlckhpc3Rvcnkoe1xuICAgICAgd2luZG93OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLndpbmRvd1xuICAgIH0pLFxuICAgIGh5ZHJhdGlvbkRhdGE6IChvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmh5ZHJhdGlvbkRhdGEpIHx8IHBhcnNlSHlkcmF0aW9uRGF0YSgpLFxuICAgIHJvdXRlczogVU5TQUZFX2VuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMocm91dGVzKVxuICB9KS5pbml0aWFsaXplKCk7XG59XG5mdW5jdGlvbiBjcmVhdGVIYXNoUm91dGVyKHJvdXRlcywgb3B0cykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBoaXN0b3J5OiBjcmVhdGVIYXNoSGlzdG9yeSh7XG4gICAgICB3aW5kb3c6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMud2luZG93XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSkgfHwgcGFyc2VIeWRyYXRpb25EYXRhKCksXG4gICAgcm91dGVzOiBVTlNBRkVfZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cyhyb3V0ZXMpXG4gIH0pLmluaXRpYWxpemUoKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VIeWRyYXRpb25EYXRhKCkge1xuICB2YXIgX3dpbmRvdztcblxuICBsZXQgc3RhdGUgPSAoX3dpbmRvdyA9IHdpbmRvdykgPT0gbnVsbCA/IHZvaWQgMCA6IF93aW5kb3cuX19zdGF0aWNSb3V0ZXJIeWRyYXRpb25EYXRhO1xuXG4gIGlmIChzdGF0ZSAmJiBzdGF0ZS5lcnJvcnMpIHtcbiAgICBzdGF0ZSA9IF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgZXJyb3JzOiBkZXNlcmlhbGl6ZUVycm9ycyhzdGF0ZS5lcnJvcnMpXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc3RhdGU7XG59XG5cbmZ1bmN0aW9uIGRlc2VyaWFsaXplRXJyb3JzKGVycm9ycykge1xuICBpZiAoIWVycm9ycykgcmV0dXJuIG51bGw7XG4gIGxldCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoZXJyb3JzKTtcbiAgbGV0IHNlcmlhbGl6ZWQgPSB7fTtcblxuICBmb3IgKGxldCBba2V5LCB2YWxdIG9mIGVudHJpZXMpIHtcbiAgICAvLyBIZXkgeW91ISAgSWYgeW91IGNoYW5nZSB0aGlzLCBwbGVhc2UgY2hhbmdlIHRoZSBjb3JyZXNwb25kaW5nIGxvZ2ljIGluXG4gICAgLy8gc2VyaWFsaXplRXJyb3JzIGluIHJlYWN0LXJvdXRlci1kb20vc2VydmVyLnRzeCA6KVxuICAgIGlmICh2YWwgJiYgdmFsLl9fdHlwZSA9PT0gXCJSb3V0ZUVycm9yUmVzcG9uc2VcIikge1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gbmV3IEVycm9yUmVzcG9uc2UodmFsLnN0YXR1cywgdmFsLnN0YXR1c1RleHQsIHZhbC5kYXRhLCB2YWwuaW50ZXJuYWwgPT09IHRydWUpO1xuICAgIH0gZWxzZSBpZiAodmFsICYmIHZhbC5fX3R5cGUgPT09IFwiRXJyb3JcIikge1xuICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yKHZhbC5tZXNzYWdlKTsgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoXG4gICAgICAvLyBiZWNhdXNlIHdlIGRvbid0IHNlcmlhbGl6ZSBTU1Igc3RhY2sgdHJhY2VzIGZvciBzZWN1cml0eSByZWFzb25zXG5cbiAgICAgIGVycm9yLnN0YWNrID0gXCJcIjtcbiAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IGVycm9yO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXJpYWxpemVkW2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNlcmlhbGl6ZWQ7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCBmb3IgdXNlIGluIHdlYiBicm93c2Vycy4gUHJvdmlkZXMgdGhlIGNsZWFuZXN0IFVSTHMuXG4gKi9cblxuXG5mdW5jdGlvbiBCcm93c2VyUm91dGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICB3aW5kb3dcbiAgfSA9IF9yZWY7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlQnJvd3Nlckhpc3Rvcnkoe1xuICAgICAgd2luZG93LFxuICAgICAgdjVDb21wYXQ6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFN0b3JlcyB0aGUgbG9jYXRpb24gaW4gdGhlIGhhc2hcbiAqIHBvcnRpb24gb2YgdGhlIFVSTCBzbyBpdCBpcyBub3Qgc2VudCB0byB0aGUgc2VydmVyLlxuICovXG5cbmZ1bmN0aW9uIEhhc2hSb3V0ZXIoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICB3aW5kb3dcbiAgfSA9IF9yZWYyO1xuICBsZXQgaGlzdG9yeVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuXG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdyxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIHRoYXQgYWNjZXB0cyBhIHByZS1pbnN0YW50aWF0ZWQgaGlzdG9yeSBvYmplY3QuIEl0J3MgaW1wb3J0YW50XG4gKiB0byBub3RlIHRoYXQgdXNpbmcgeW91ciBvd24gaGlzdG9yeSBvYmplY3QgaXMgaGlnaGx5IGRpc2NvdXJhZ2VkIGFuZCBtYXkgYWRkXG4gKiB0d28gdmVyc2lvbnMgb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0byB5b3VyIGJ1bmRsZXMgdW5sZXNzIHlvdSB1c2UgdGhlIHNhbWVcbiAqIHZlcnNpb24gb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0aGF0IFJlYWN0IFJvdXRlciB1c2VzIGludGVybmFsbHkuXG4gKi9cblxuZnVuY3Rpb24gSGlzdG9yeVJvdXRlcihfcmVmMykge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGhpc3RvcnlcbiAgfSA9IF9yZWYzO1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGlzdG9yeVJvdXRlci5kaXNwbGF5TmFtZSA9IFwidW5zdGFibGVfSGlzdG9yeVJvdXRlclwiO1xufVxuY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbmNvbnN0IEFCU09MVVRFX1VSTF9SRUdFWCA9IC9eKD86W2Etel1bYS16MC05Ky4tXSo6fFxcL1xcLykvaTtcbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cbmNvbnN0IExpbmsgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaW5rV2l0aFJlZihfcmVmNCwgcmVmKSB7XG4gIGxldCB7XG4gICAgb25DbGljayxcbiAgICByZWxhdGl2ZSxcbiAgICByZWxvYWREb2N1bWVudCxcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHRhcmdldCxcbiAgICB0byxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgfSA9IF9yZWY0LFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY0LCBfZXhjbHVkZWQpO1xuXG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTsgLy8gUmVuZGVyZWQgaW50byA8YSBocmVmPiBmb3IgYWJzb2x1dGUgVVJMc1xuXG4gIGxldCBhYnNvbHV0ZUhyZWY7XG4gIGxldCBpc0V4dGVybmFsID0gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiAmJiBBQlNPTFVURV9VUkxfUkVHRVgudGVzdCh0bykpIHtcbiAgICAvLyBSZW5kZXIgdGhlIGFic29sdXRlIGhyZWYgc2VydmVyLSBhbmQgY2xpZW50LXNpZGVcbiAgICBhYnNvbHV0ZUhyZWYgPSB0bzsgLy8gT25seSBjaGVjayBmb3IgZXh0ZXJuYWwgb3JpZ2lucyBjbGllbnQtc2lkZVxuXG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgbGV0IGN1cnJlbnRVcmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgIGxldCB0YXJnZXRVcmwgPSB0by5zdGFydHNXaXRoKFwiLy9cIikgPyBuZXcgVVJMKGN1cnJlbnRVcmwucHJvdG9jb2wgKyB0bykgOiBuZXcgVVJMKHRvKTtcbiAgICAgIGxldCBwYXRoID0gc3RyaXBCYXNlbmFtZSh0YXJnZXRVcmwucGF0aG5hbWUsIGJhc2VuYW1lKTtcblxuICAgICAgaWYgKHRhcmdldFVybC5vcmlnaW4gPT09IGN1cnJlbnRVcmwub3JpZ2luICYmIHBhdGggIT0gbnVsbCkge1xuICAgICAgICAvLyBTdHJpcCB0aGUgcHJvdG9jb2wvb3JpZ2luL2Jhc2VuYW1lIGZvciBzYW1lLW9yaWdpbiBhYnNvbHV0ZSBVUkxzXG4gICAgICAgIHRvID0gcGF0aCArIHRhcmdldFVybC5zZWFyY2ggKyB0YXJnZXRVcmwuaGFzaDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlzRXh0ZXJuYWwgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBSZW5kZXJlZCBpbnRvIDxhIGhyZWY+IGZvciByZWxhdGl2ZSBVUkxzXG5cblxuICBsZXQgaHJlZiA9IHVzZUhyZWYodG8sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGludGVybmFsT25DbGljayA9IHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIHtcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHRhcmdldCxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgcmVsYXRpdmVcbiAgfSk7XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAob25DbGljaykgb25DbGljayhldmVudCk7XG5cbiAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIGludGVybmFsT25DbGljayhldmVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBhYnNvbHV0ZUhyZWYgfHwgaHJlZixcbiAgICAgIG9uQ2xpY2s6IGlzRXh0ZXJuYWwgfHwgcmVsb2FkRG9jdW1lbnQgPyBvbkNsaWNrIDogaGFuZGxlQ2xpY2ssXG4gICAgICByZWY6IHJlZixcbiAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgfSkpXG4gICk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG59XG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5cblxuY29uc3QgTmF2TGluayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5hdkxpbmtXaXRoUmVmKF9yZWY1LCByZWYpIHtcbiAgbGV0IHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFByb3AgPSBcInBhZ2VcIixcbiAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2UsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVQcm9wID0gXCJcIixcbiAgICBlbmQgPSBmYWxzZSxcbiAgICBzdHlsZTogc3R5bGVQcm9wLFxuICAgIHRvLFxuICAgIGNoaWxkcmVuXG4gIH0gPSBfcmVmNSxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmNSwgX2V4Y2x1ZGVkMik7XG5cbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZTogcmVzdC5yZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlclN0YXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbmF2aWdhdG9yXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB0b1BhdGhuYW1lID0gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKHBhdGgpLnBhdGhuYW1lIDogcGF0aC5wYXRobmFtZTtcbiAgbGV0IGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZTtcbiAgbGV0IG5leHRMb2NhdGlvblBhdGhuYW1lID0gcm91dGVyU3RhdGUgJiYgcm91dGVyU3RhdGUubmF2aWdhdGlvbiAmJiByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uID8gcm91dGVyU3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbi5wYXRobmFtZSA6IG51bGw7XG5cbiAgaWYgKCFjYXNlU2Vuc2l0aXZlKSB7XG4gICAgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBuZXh0TG9jYXRpb25QYXRobmFtZSA9IG5leHRMb2NhdGlvblBhdGhuYW1lID8gbmV4dExvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKSA6IG51bGw7XG4gICAgdG9QYXRobmFtZSA9IHRvUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIGxldCBpc0FjdGl2ZSA9IGxvY2F0aW9uUGF0aG5hbWUgPT09IHRvUGF0aG5hbWUgfHwgIWVuZCAmJiBsb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiYgbG9jYXRpb25QYXRobmFtZS5jaGFyQXQodG9QYXRobmFtZS5sZW5ndGgpID09PSBcIi9cIjtcbiAgbGV0IGlzUGVuZGluZyA9IG5leHRMb2NhdGlvblBhdGhuYW1lICE9IG51bGwgJiYgKG5leHRMb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8ICFlbmQgJiYgbmV4dExvY2F0aW9uUGF0aG5hbWUuc3RhcnRzV2l0aCh0b1BhdGhuYW1lKSAmJiBuZXh0TG9jYXRpb25QYXRobmFtZS5jaGFyQXQodG9QYXRobmFtZS5sZW5ndGgpID09PSBcIi9cIik7XG4gIGxldCBhcmlhQ3VycmVudCA9IGlzQWN0aXZlID8gYXJpYUN1cnJlbnRQcm9wIDogdW5kZWZpbmVkO1xuICBsZXQgY2xhc3NOYW1lO1xuXG4gIGlmICh0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lUHJvcCh7XG4gICAgICBpc0FjdGl2ZSxcbiAgICAgIGlzUGVuZGluZ1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHRoZSBjbGFzc05hbWUgcHJvcCBpcyBub3QgYSBmdW5jdGlvbiwgd2UgdXNlIGEgZGVmYXVsdCBgYWN0aXZlYFxuICAgIC8vIGNsYXNzIGZvciA8TmF2TGluayAvPnMgdGhhdCBhcmUgYWN0aXZlLiBJbiB2NSBgYWN0aXZlYCB3YXMgdGhlIGRlZmF1bHRcbiAgICAvLyB2YWx1ZSBmb3IgYGFjdGl2ZUNsYXNzTmFtZWAsIGJ1dCB3ZSBhcmUgcmVtb3ZpbmcgdGhhdCBBUEkgYW5kIGNhbiBzdGlsbFxuICAgIC8vIHVzZSB0aGUgb2xkIGRlZmF1bHQgYmVoYXZpb3IgZm9yIGEgY2xlYW5lciB1cGdyYWRlIHBhdGggYW5kIGtlZXAgdGhlXG4gICAgLy8gc2ltcGxlIHN0eWxpbmcgcnVsZXMgd29ya2luZyBhcyB0aGV5IGN1cnJlbnRseSBkby5cbiAgICBjbGFzc05hbWUgPSBbY2xhc3NOYW1lUHJvcCwgaXNBY3RpdmUgPyBcImFjdGl2ZVwiIDogbnVsbCwgaXNQZW5kaW5nID8gXCJwZW5kaW5nXCIgOiBudWxsXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIik7XG4gIH1cblxuICBsZXQgc3R5bGUgPSB0eXBlb2Ygc3R5bGVQcm9wID09PSBcImZ1bmN0aW9uXCIgPyBzdHlsZVByb3Aoe1xuICAgIGlzQWN0aXZlLFxuICAgIGlzUGVuZGluZ1xuICB9KSA6IHN0eWxlUHJvcDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgcmVmOiByZWYsXG4gICAgc3R5bGU6IHN0eWxlLFxuICAgIHRvOiB0b1xuICB9KSwgdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBjaGlsZHJlbih7XG4gICAgaXNBY3RpdmUsXG4gICAgaXNQZW5kaW5nXG4gIH0pIDogY2hpbGRyZW4pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTmF2TGluay5kaXNwbGF5TmFtZSA9IFwiTmF2TGlua1wiO1xufVxuLyoqXG4gKiBBIGBAcmVtaXgtcnVuL3JvdXRlcmAtYXdhcmUgYDxmb3JtPmAuIEl0IGJlaGF2ZXMgbGlrZSBhIG5vcm1hbCBmb3JtIGV4Y2VwdFxuICogdGhhdCB0aGUgaW50ZXJhY3Rpb24gd2l0aCB0aGUgc2VydmVyIGlzIHdpdGggYGZldGNoYCBpbnN0ZWFkIG9mIG5ldyBkb2N1bWVudFxuICogcmVxdWVzdHMsIGFsbG93aW5nIGNvbXBvbmVudHMgdG8gYWRkIG5pY2VyIFVYIHRvIHRoZSBwYWdlIGFzIHRoZSBmb3JtIGlzXG4gKiBzdWJtaXR0ZWQgYW5kIHJldHVybnMgd2l0aCBkYXRhLlxuICovXG5cblxuY29uc3QgRm9ybSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtSW1wbCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgcmVmOiByZWZcbiAgfSkpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgRm9ybS5kaXNwbGF5TmFtZSA9IFwiRm9ybVwiO1xufVxuXG5jb25zdCBGb3JtSW1wbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKChfcmVmNiwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gIGxldCB7XG4gICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgcmVwbGFjZSxcbiAgICBtZXRob2QgPSBkZWZhdWx0TWV0aG9kLFxuICAgIGFjdGlvbixcbiAgICBvblN1Ym1pdCxcbiAgICBmZXRjaGVyS2V5LFxuICAgIHJvdXRlSWQsXG4gICAgcmVsYXRpdmUsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0XG4gIH0gPSBfcmVmNixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjYsIF9leGNsdWRlZDMpO1xuXG4gIGxldCBzdWJtaXQgPSB1c2VTdWJtaXRJbXBsKGZldGNoZXJLZXksIHJvdXRlSWQpO1xuICBsZXQgZm9ybU1ldGhvZCA9IG1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBcImdldFwiID8gXCJnZXRcIiA6IFwicG9zdFwiO1xuICBsZXQgZm9ybUFjdGlvbiA9IHVzZUZvcm1BY3Rpb24oYWN0aW9uLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG5cbiAgbGV0IHN1Ym1pdEhhbmRsZXIgPSBldmVudCA9PiB7XG4gICAgb25TdWJtaXQgJiYgb25TdWJtaXQoZXZlbnQpO1xuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBsZXQgc3VibWl0dGVyID0gZXZlbnQubmF0aXZlRXZlbnQuc3VibWl0dGVyO1xuICAgIGxldCBzdWJtaXRNZXRob2QgPSAoc3VibWl0dGVyID09IG51bGwgPyB2b2lkIDAgOiBzdWJtaXR0ZXIuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSkgfHwgbWV0aG9kO1xuICAgIHN1Ym1pdChzdWJtaXR0ZXIgfHwgZXZlbnQuY3VycmVudFRhcmdldCwge1xuICAgICAgbWV0aG9kOiBzdWJtaXRNZXRob2QsXG4gICAgICByZXBsYWNlLFxuICAgICAgcmVsYXRpdmUsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIsIF9leHRlbmRzKHtcbiAgICByZWY6IGZvcndhcmRlZFJlZixcbiAgICBtZXRob2Q6IGZvcm1NZXRob2QsXG4gICAgYWN0aW9uOiBmb3JtQWN0aW9uLFxuICAgIG9uU3VibWl0OiByZWxvYWREb2N1bWVudCA/IG9uU3VibWl0IDogc3VibWl0SGFuZGxlclxuICB9LCBwcm9wcykpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgRm9ybUltcGwuZGlzcGxheU5hbWUgPSBcIkZvcm1JbXBsXCI7XG59XG4vKipcbiAqIFRoaXMgY29tcG9uZW50IHdpbGwgZW11bGF0ZSB0aGUgYnJvd3NlcidzIHNjcm9sbCByZXN0b3JhdGlvbiBvbiBsb2NhdGlvblxuICogY2hhbmdlcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIFNjcm9sbFJlc3RvcmF0aW9uKF9yZWY3KSB7XG4gIGxldCB7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSA9IF9yZWY3O1xuICB1c2VTY3JvbGxSZXN0b3JhdGlvbih7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSk7XG4gIHJldHVybiBudWxsO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFNjcm9sbFJlc3RvcmF0aW9uLmRpc3BsYXlOYW1lID0gXCJTY3JvbGxSZXN0b3JhdGlvblwiO1xufSAvLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSG9va3Ncbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxudmFyIERhdGFSb3V0ZXJIb29rO1xuXG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJIb29rKSB7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlU2Nyb2xsUmVzdG9yYXRpb25cIl0gPSBcInVzZVNjcm9sbFJlc3RvcmF0aW9uXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlU3VibWl0SW1wbFwiXSA9IFwidXNlU3VibWl0SW1wbFwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZUZldGNoZXJcIl0gPSBcInVzZUZldGNoZXJcIjtcbn0pKERhdGFSb3V0ZXJIb29rIHx8IChEYXRhUm91dGVySG9vayA9IHt9KSk7XG5cbnZhciBEYXRhUm91dGVyU3RhdGVIb29rO1xuXG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJTdGF0ZUhvb2spIHtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUZldGNoZXJzXCJdID0gXCJ1c2VGZXRjaGVyc1wiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlU2Nyb2xsUmVzdG9yYXRpb25cIl0gPSBcInVzZVNjcm9sbFJlc3RvcmF0aW9uXCI7XG59KShEYXRhUm91dGVyU3RhdGVIb29rIHx8IChEYXRhUm91dGVyU3RhdGVIb29rID0ge30pKTtcblxuZnVuY3Rpb24gZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkge1xuICByZXR1cm4gaG9va05hbWUgKyBcIiBtdXN0IGJlIHVzZWQgd2l0aGluIGEgZGF0YSByb3V0ZXIuICBTZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVycy9waWNraW5nLWEtcm91dGVyLlwiO1xufVxuXG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyQ29udGV4dChob29rTmFtZSkge1xuICBsZXQgY3R4ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQpO1xuICAhY3R4ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBjdHg7XG59XG5cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJTdGF0ZShob29rTmFtZSkge1xuICBsZXQgc3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgIXN0YXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBzdGF0ZTtcbn1cbi8qKlxuICogSGFuZGxlcyB0aGUgY2xpY2sgYmVoYXZpb3IgZm9yIHJvdXRlciBgPExpbms+YCBjb21wb25lbnRzLiBUaGlzIGlzIHVzZWZ1bCBpZlxuICogeW91IG5lZWQgdG8gY3JlYXRlIGN1c3RvbSBgPExpbms+YCBjb21wb25lbnRzIHdpdGggdGhlIHNhbWUgY2xpY2sgYmVoYXZpb3Igd2VcbiAqIHVzZSBpbiBvdXIgZXhwb3J0ZWQgYDxMaW5rPmAuXG4gKi9cblxuXG5mdW5jdGlvbiB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCBfdGVtcCkge1xuICBsZXQge1xuICAgIHRhcmdldCxcbiAgICByZXBsYWNlOiByZXBsYWNlUHJvcCxcbiAgICBzdGF0ZSxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGlmIChzaG91bGRQcm9jZXNzTGlua0NsaWNrKGV2ZW50LCB0YXJnZXQpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBJZiB0aGUgVVJMIGhhc24ndCBjaGFuZ2VkLCBhIHJlZ3VsYXIgPGE+IHdpbGwgZG8gYSByZXBsYWNlIGluc3RlYWQgb2ZcbiAgICAgIC8vIGEgcHVzaCwgc28gZG8gdGhlIHNhbWUgaGVyZSB1bmxlc3MgdGhlIHJlcGxhY2UgcHJvcCBpcyBleHBsaWNpdGx5IHNldFxuXG4gICAgICBsZXQgcmVwbGFjZSA9IHJlcGxhY2VQcm9wICE9PSB1bmRlZmluZWQgPyByZXBsYWNlUHJvcCA6IGNyZWF0ZVBhdGgobG9jYXRpb24pID09PSBjcmVhdGVQYXRoKHBhdGgpO1xuICAgICAgbmF2aWdhdGUodG8sIHtcbiAgICAgICAgcmVwbGFjZSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgcmVsYXRpdmVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2xvY2F0aW9uLCBuYXZpZ2F0ZSwgcGF0aCwgcmVwbGFjZVByb3AsIHN0YXRlLCB0YXJnZXQsIHRvLCBwcmV2ZW50U2Nyb2xsUmVzZXQsIHJlbGF0aXZlXSk7XG59XG4vKipcbiAqIEEgY29udmVuaWVudCB3cmFwcGVyIGZvciByZWFkaW5nIGFuZCB3cml0aW5nIHNlYXJjaCBwYXJhbWV0ZXJzIHZpYSB0aGVcbiAqIFVSTFNlYXJjaFBhcmFtcyBpbnRlcmZhY2UuXG4gKi9cblxuZnVuY3Rpb24gdXNlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gXCJ1bmRlZmluZWRcIiwgXCJZb3UgY2Fubm90IHVzZSB0aGUgYHVzZVNlYXJjaFBhcmFtc2AgaG9vayBpbiBhIGJyb3dzZXIgdGhhdCBkb2VzIG5vdCBcIiArIFwic3VwcG9ydCB0aGUgVVJMU2VhcmNoUGFyYW1zIEFQSS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydCBJbnRlcm5ldCBcIiArIFwiRXhwbG9yZXIgMTEsIHdlIHJlY29tbWVuZCB5b3UgbG9hZCBhIHBvbHlmaWxsIHN1Y2ggYXMgXCIgKyBcImh0dHBzOi8vZ2l0aHViLmNvbS91bmdhcC91cmwtc2VhcmNoLXBhcmFtc1xcblxcblwiICsgXCJJZiB5b3UncmUgdW5zdXJlIGhvdyB0byBsb2FkIHBvbHlmaWxscywgd2UgcmVjb21tZW5kIHlvdSBjaGVjayBvdXQgXCIgKyBcImh0dHBzOi8vcG9seWZpbGwuaW8vdjMvIHdoaWNoIHByb3ZpZGVzIHNvbWUgcmVjb21tZW5kYXRpb25zIGFib3V0IGhvdyBcIiArIFwidG8gbG9hZCBwb2x5ZmlsbHMgb25seSBmb3IgdXNlcnMgdGhhdCBuZWVkIHRoZW0sIGluc3RlYWQgb2YgZm9yIGV2ZXJ5IFwiICsgXCJ1c2VyLlwiKSA6IHZvaWQgMDtcbiAgbGV0IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoY3JlYXRlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSk7XG4gIGxldCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgc2VhcmNoUGFyYW1zID0gUmVhY3QudXNlTWVtbygoKSA9PiAvLyBPbmx5IG1lcmdlIGluIHRoZSBkZWZhdWx0cyBpZiB3ZSBoYXZlbid0IHlldCBjYWxsZWQgc2V0U2VhcmNoUGFyYW1zLlxuICAvLyBPbmNlIHdlIGNhbGwgdGhhdCB3ZSB3YW50IHRob3NlIHRvIHRha2UgcHJlY2VkZW5jZSwgb3RoZXJ3aXNlIHlvdSBjYW4ndFxuICAvLyByZW1vdmUgYSBwYXJhbSB3aXRoIHNldFNlYXJjaFBhcmFtcyh7fSkgaWYgaXQgaGFzIGFuIGluaXRpYWwgdmFsdWVcbiAgZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24obG9jYXRpb24uc2VhcmNoLCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCA/IG51bGwgOiBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQpLCBbbG9jYXRpb24uc2VhcmNoXSk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBzZXRTZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VDYWxsYmFjaygobmV4dEluaXQsIG5hdmlnYXRlT3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IG5ld1NlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyh0eXBlb2YgbmV4dEluaXQgPT09IFwiZnVuY3Rpb25cIiA/IG5leHRJbml0KHNlYXJjaFBhcmFtcykgOiBuZXh0SW5pdCk7XG4gICAgaGFzU2V0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIG5hdmlnYXRlKFwiP1wiICsgbmV3U2VhcmNoUGFyYW1zLCBuYXZpZ2F0ZU9wdGlvbnMpO1xuICB9LCBbbmF2aWdhdGUsIHNlYXJjaFBhcmFtc10pO1xuICByZXR1cm4gW3NlYXJjaFBhcmFtcywgc2V0U2VhcmNoUGFyYW1zXTtcbn1cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gcHJvZ3JhbW1hdGljYWxseSBzdWJtaXQgYSBmb3JtIChvclxuICogc29tZSBhcmJpdHJhcnkgZGF0YSkgdG8gdGhlIHNlcnZlci5cbiAqL1xuXG5mdW5jdGlvbiB1c2VTdWJtaXQoKSB7XG4gIHJldHVybiB1c2VTdWJtaXRJbXBsKCk7XG59XG5cbmZ1bmN0aW9uIHVzZVN1Ym1pdEltcGwoZmV0Y2hlcktleSwgcm91dGVJZCkge1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU3VibWl0SW1wbCk7XG4gIGxldCBkZWZhdWx0QWN0aW9uID0gdXNlRm9ybUFjdGlvbigpO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRhcmdldCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGNhbGxpbmcgc3VibWl0IGR1cmluZyB0aGUgc2VydmVyIHJlbmRlci4gXCIgKyBcIlRyeSBjYWxsaW5nIHN1Ym1pdCB3aXRoaW4gYSBgdXNlRWZmZWN0YCBvciBjYWxsYmFjayBpbnN0ZWFkLlwiKTtcbiAgICB9XG5cbiAgICBsZXQge1xuICAgICAgbWV0aG9kLFxuICAgICAgZW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhLFxuICAgICAgdXJsXG4gICAgfSA9IGdldEZvcm1TdWJtaXNzaW9uSW5mbyh0YXJnZXQsIGRlZmF1bHRBY3Rpb24sIG9wdGlvbnMpO1xuICAgIGxldCBocmVmID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaDtcbiAgICBsZXQgb3B0cyA9IHtcbiAgICAgIHJlcGxhY2U6IG9wdGlvbnMucmVwbGFjZSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0aW9ucy5wcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGZvcm1NZXRob2Q6IG1ldGhvZCxcbiAgICAgIGZvcm1FbmNUeXBlOiBlbmNUeXBlXG4gICAgfTtcblxuICAgIGlmIChmZXRjaGVyS2V5KSB7XG4gICAgICAhKHJvdXRlSWQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIk5vIHJvdXRlSWQgYXZhaWxhYmxlIGZvciB1c2VGZXRjaGVyKClcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJvdXRlci5mZXRjaChmZXRjaGVyS2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm91dGVyLm5hdmlnYXRlKGhyZWYsIG9wdHMpO1xuICAgIH1cbiAgfSwgW2RlZmF1bHRBY3Rpb24sIHJvdXRlciwgZmV0Y2hlcktleSwgcm91dGVJZF0pO1xufVxuXG5mdW5jdGlvbiB1c2VGb3JtQWN0aW9uKGFjdGlvbiwgX3RlbXAyKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHJvdXRlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX1JvdXRlQ29udGV4dCk7XG4gICFyb3V0ZUNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZvcm1BY3Rpb24gbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgW21hdGNoXSA9IHJvdXRlQ29udGV4dC5tYXRjaGVzLnNsaWNlKC0xKTsgLy8gU2hhbGxvdyBjbG9uZSBwYXRoIHNvIHdlIGNhbiBtb2RpZnkgaXQgYmVsb3csIG90aGVyd2lzZSB3ZSBtb2RpZnkgdGhlXG4gIC8vIG9iamVjdCByZWZlcmVuY2VkIGJ5IHVzZU1lbW8gaW5zaWRlIHVzZVJlc29sdmVkUGF0aFxuXG4gIGxldCBwYXRoID0gX2V4dGVuZHMoe30sIHVzZVJlc29sdmVkUGF0aChhY3Rpb24gPyBhY3Rpb24gOiBcIi5cIiwge1xuICAgIHJlbGF0aXZlXG4gIH0pKTsgLy8gUHJldmlvdXNseSB3ZSBzZXQgdGhlIGRlZmF1bHQgYWN0aW9uIHRvIFwiLlwiLiBUaGUgcHJvYmxlbSB3aXRoIHRoaXMgaXMgdGhhdFxuICAvLyBgdXNlUmVzb2x2ZWRQYXRoKFwiLlwiKWAgZXhjbHVkZXMgc2VhcmNoIHBhcmFtcyBhbmQgdGhlIGhhc2ggb2YgdGhlIHJlc29sdmVkXG4gIC8vIFVSTC4gVGhpcyBpcyB0aGUgaW50ZW5kZWQgYmVoYXZpb3Igb2Ygd2hlbiBcIi5cIiBpcyBzcGVjaWZpY2FsbHkgcHJvdmlkZWQgYXNcbiAgLy8gdGhlIGZvcm0gYWN0aW9uLCBidXQgaW5jb25zaXN0ZW50IHcvIGJyb3dzZXJzIHdoZW4gdGhlIGFjdGlvbiBpcyBvbWl0dGVkLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlbWl4L2lzc3Vlcy85MjdcblxuXG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG5cbiAgaWYgKGFjdGlvbiA9PSBudWxsKSB7XG4gICAgLy8gU2FmZSB0byB3cml0ZSB0byB0aGVzZSBkaXJlY3RseSBoZXJlIHNpbmNlIGlmIGFjdGlvbiB3YXMgdW5kZWZpbmVkLCB3ZVxuICAgIC8vIHdvdWxkIGhhdmUgY2FsbGVkIHVzZVJlc29sdmVkUGF0aChcIi5cIikgd2hpY2ggd2lsbCBuZXZlciBpbmNsdWRlIGEgc2VhcmNoXG4gICAgLy8gb3IgaGFzaFxuICAgIHBhdGguc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuICAgIHBhdGguaGFzaCA9IGxvY2F0aW9uLmhhc2g7IC8vIFdoZW4gZ3JhYmJpbmcgc2VhcmNoIHBhcmFtcyBmcm9tIHRoZSBVUkwsIHJlbW92ZSB0aGUgYXV0b21hdGljYWxseVxuICAgIC8vIGluc2VydGVkID9pbmRleCBwYXJhbSBzbyB3ZSBtYXRjaCB0aGUgdXNlUmVzb2x2ZWRQYXRoIHNlYXJjaCBiZWhhdmlvclxuICAgIC8vIHdoaWNoIHdvdWxkIG5vdCBpbmNsdWRlID9pbmRleFxuXG4gICAgaWYgKG1hdGNoLnJvdXRlLmluZGV4KSB7XG4gICAgICBsZXQgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXRoLnNlYXJjaCk7XG4gICAgICBwYXJhbXMuZGVsZXRlKFwiaW5kZXhcIik7XG4gICAgICBwYXRoLnNlYXJjaCA9IHBhcmFtcy50b1N0cmluZygpID8gXCI/XCIgKyBwYXJhbXMudG9TdHJpbmcoKSA6IFwiXCI7XG4gICAgfVxuICB9XG5cbiAgaWYgKCghYWN0aW9uIHx8IGFjdGlvbiA9PT0gXCIuXCIpICYmIG1hdGNoLnJvdXRlLmluZGV4KSB7XG4gICAgcGF0aC5zZWFyY2ggPSBwYXRoLnNlYXJjaCA/IHBhdGguc2VhcmNoLnJlcGxhY2UoL15cXD8vLCBcIj9pbmRleCZcIikgOiBcIj9pbmRleFwiO1xuICB9IC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgLy8gdG8gY3JlYXRpbmcgdGhlIGZvcm0gYWN0aW9uLiAgSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZVxuICAvLyB0aGUgcmF3IGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGVcbiAgLy8gcHJlc2VuY2Ugb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGFjdGlvbnNcblxuXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBwYXRoLnBhdGhuYW1lID0gcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVQYXRoKHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGZXRjaGVyRm9ybShmZXRjaGVyS2V5LCByb3V0ZUlkKSB7XG4gIGxldCBGZXRjaGVyRm9ybSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1JbXBsLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIHJlZjogcmVmLFxuICAgICAgZmV0Y2hlcktleTogZmV0Y2hlcktleSxcbiAgICAgIHJvdXRlSWQ6IHJvdXRlSWRcbiAgICB9KSk7XG4gIH0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBGZXRjaGVyRm9ybS5kaXNwbGF5TmFtZSA9IFwiZmV0Y2hlci5Gb3JtXCI7XG4gIH1cblxuICByZXR1cm4gRmV0Y2hlckZvcm07XG59XG5cbmxldCBmZXRjaGVySWQgPSAwO1xuLyoqXG4gKiBJbnRlcmFjdHMgd2l0aCByb3V0ZSBsb2FkZXJzIGFuZCBhY3Rpb25zIHdpdGhvdXQgY2F1c2luZyBhIG5hdmlnYXRpb24uIEdyZWF0XG4gKiBmb3IgYW55IGludGVyYWN0aW9uIHRoYXQgc3RheXMgb24gdGhlIHNhbWUgcGFnZS5cbiAqL1xuXG5mdW5jdGlvbiB1c2VGZXRjaGVyKCkge1xuICB2YXIgX3JvdXRlJG1hdGNoZXM7XG5cbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZUZldGNoZXIpO1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9Sb3V0ZUNvbnRleHQpO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgcm91dGVJZCA9IChfcm91dGUkbWF0Y2hlcyA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yb3V0ZSRtYXRjaGVzLnJvdXRlLmlkO1xuICAhKHJvdXRlSWQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgY2FuIG9ubHkgYmUgdXNlZCBvbiByb3V0ZXMgdGhhdCBjb250YWluIGEgdW5pcXVlIFxcXCJpZFxcXCJcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IFtmZXRjaGVyS2V5XSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IFN0cmluZygrK2ZldGNoZXJJZCkpO1xuICBsZXQgW0Zvcm1dID0gUmVhY3QudXNlU3RhdGUoKCkgPT4ge1xuICAgICFyb3V0ZUlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJObyByb3V0ZUlkIGF2YWlsYWJsZSBmb3IgZmV0Y2hlci5Gb3JtKClcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gY3JlYXRlRmV0Y2hlckZvcm0oZmV0Y2hlcktleSwgcm91dGVJZCk7XG4gIH0pO1xuICBsZXQgW2xvYWRdID0gUmVhY3QudXNlU3RhdGUoKCkgPT4gaHJlZiA9PiB7XG4gICAgIXJvdXRlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVyIGF2YWlsYWJsZSBmb3IgZmV0Y2hlci5sb2FkKClcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhcm91dGVJZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVJZCBhdmFpbGFibGUgZm9yIGZldGNoZXIubG9hZCgpXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcm91dGVyLmZldGNoKGZldGNoZXJLZXksIHJvdXRlSWQsIGhyZWYpO1xuICB9KTtcbiAgbGV0IHN1Ym1pdCA9IHVzZVN1Ym1pdEltcGwoZmV0Y2hlcktleSwgcm91dGVJZCk7XG4gIGxldCBmZXRjaGVyID0gcm91dGVyLmdldEZldGNoZXIoZmV0Y2hlcktleSk7XG4gIGxldCBmZXRjaGVyV2l0aENvbXBvbmVudHMgPSBSZWFjdC51c2VNZW1vKCgpID0+IF9leHRlbmRzKHtcbiAgICBGb3JtLFxuICAgIHN1Ym1pdCxcbiAgICBsb2FkXG4gIH0sIGZldGNoZXIpLCBbZmV0Y2hlciwgRm9ybSwgc3VibWl0LCBsb2FkXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gSXMgdGhpcyBidXN0ZWQgd2hlbiB0aGUgUmVhY3QgdGVhbSBnZXRzIHJlYWwgd2VpcmQgYW5kIGNhbGxzIGVmZmVjdHNcbiAgICAvLyB0d2ljZSBvbiBtb3VudD8gIFdlIHJlYWxseSBqdXN0IG5lZWQgdG8gZ2FyYmFnZSBjb2xsZWN0IGhlcmUgd2hlbiB0aGlzXG4gICAgLy8gZmV0Y2hlciBpcyBubyBsb25nZXIgYXJvdW5kLlxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoIXJvdXRlcikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJObyBmZXRjaGVyIGF2YWlsYWJsZSB0byBjbGVhbiB1cCBmcm9tIHVzZUZldGNoZXIoKVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByb3V0ZXIuZGVsZXRlRmV0Y2hlcihmZXRjaGVyS2V5KTtcbiAgICB9O1xuICB9LCBbcm91dGVyLCBmZXRjaGVyS2V5XSk7XG4gIHJldHVybiBmZXRjaGVyV2l0aENvbXBvbmVudHM7XG59XG4vKipcbiAqIFByb3ZpZGVzIGFsbCBmZXRjaGVycyBjdXJyZW50bHkgb24gdGhlIHBhZ2UuIFVzZWZ1bCBmb3IgbGF5b3V0cyBhbmQgcGFyZW50XG4gKiByb3V0ZXMgdGhhdCBuZWVkIHRvIHByb3ZpZGUgcGVuZGluZy9vcHRpbWlzdGljIFVJIHJlZ2FyZGluZyB0aGUgZmV0Y2guXG4gKi9cblxuZnVuY3Rpb24gdXNlRmV0Y2hlcnMoKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUZldGNoZXJzKTtcbiAgcmV0dXJuIFsuLi5zdGF0ZS5mZXRjaGVycy52YWx1ZXMoKV07XG59XG5jb25zdCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkgPSBcInJlYWN0LXJvdXRlci1zY3JvbGwtcG9zaXRpb25zXCI7XG5sZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSB7fTtcbi8qKlxuICogV2hlbiByZW5kZXJlZCBpbnNpZGUgYSBSb3V0ZXJQcm92aWRlciwgd2lsbCByZXN0b3JlIHNjcm9sbCBwb3NpdGlvbnMgb24gbmF2aWdhdGlvbnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VTY3JvbGxSZXN0b3JhdGlvbihfdGVtcDMpIHtcbiAgbGV0IHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9ID0gX3RlbXAzID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMztcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uKTtcbiAgbGV0IHtcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb24sXG4gICAgcHJldmVudFNjcm9sbFJlc2V0XG4gIH0gPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VTY3JvbGxSZXN0b3JhdGlvbik7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBtYXRjaGVzID0gdXNlTWF0Y2hlcygpO1xuICBsZXQgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb24oKTsgLy8gVHJpZ2dlciBtYW51YWwgc2Nyb2xsIHJlc3RvcmF0aW9uIHdoaWxlIHdlJ3JlIGFjdGl2ZVxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcIm1hbnVhbFwiO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwiYXV0b1wiO1xuICAgIH07XG4gIH0sIFtdKTsgLy8gU2F2ZSBwb3NpdGlvbnMgb24gcGFnZWhpZGVcblxuICB1c2VQYWdlSGlkZShSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKG5hdmlnYXRpb24uc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICBsZXQga2V5ID0gKGdldEtleSA/IGdldEtleShsb2NhdGlvbiwgbWF0Y2hlcykgOiBudWxsKSB8fCBsb2NhdGlvbi5rZXk7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldID0gd2luZG93LnNjcm9sbFk7XG4gICAgfVxuXG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShzdG9yYWdlS2V5IHx8IFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkoc2F2ZWRTY3JvbGxQb3NpdGlvbnMpKTtcbiAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwiYXV0b1wiO1xuICB9LCBbc3RvcmFnZUtleSwgZ2V0S2V5LCBuYXZpZ2F0aW9uLnN0YXRlLCBsb2NhdGlvbiwgbWF0Y2hlc10pKTsgLy8gUmVhZCBpbiBhbnkgc2F2ZWQgc2Nyb2xsIGxvY2F0aW9uc1xuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IHNlc3Npb25Qb3NpdGlvbnMgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHN0b3JhZ2VLZXkgfHwgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZKTtcblxuICAgICAgICBpZiAoc2Vzc2lvblBvc2l0aW9ucykge1xuICAgICAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gSlNPTi5wYXJzZShzZXNzaW9uUG9zaXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkgey8vIG5vLW9wLCB1c2UgZGVmYXVsdCBlbXB0eSBvYmplY3RcbiAgICAgIH1cbiAgICB9LCBbc3RvcmFnZUtleV0pOyAvLyBFbmFibGUgc2Nyb2xsIHJlc3RvcmF0aW9uIGluIHRoZSByb3V0ZXJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcblxuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICBsZXQgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uID0gcm91dGVyID09IG51bGwgPyB2b2lkIDAgOiByb3V0ZXIuZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24oc2F2ZWRTY3JvbGxQb3NpdGlvbnMsICgpID0+IHdpbmRvdy5zY3JvbGxZLCBnZXRLZXkpO1xuICAgICAgcmV0dXJuICgpID0+IGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbiAmJiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24oKTtcbiAgICB9LCBbcm91dGVyLCBnZXRLZXldKTsgLy8gUmVzdG9yZSBzY3JvbGxpbmcgd2hlbiBzdGF0ZS5yZXN0b3JlU2Nyb2xsUG9zaXRpb24gY2hhbmdlc1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIC8vIEV4cGxpY2l0IGZhbHNlIG1lYW5zIGRvbid0IGRvIGFueXRoaW5nICh1c2VkIGZvciBzdWJtaXNzaW9ucylcbiAgICAgIGlmIChyZXN0b3JlU2Nyb2xsUG9zaXRpb24gPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gYmVlbiBoZXJlIGJlZm9yZSwgc2Nyb2xsIHRvIGl0XG5cblxuICAgICAgaWYgKHR5cGVvZiByZXN0b3JlU2Nyb2xsUG9zaXRpb24gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHJlc3RvcmVTY3JvbGxQb3NpdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gdHJ5IHRvIHNjcm9sbCB0byB0aGUgaGFzaFxuXG5cbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICAgIGxldCBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGxvY2F0aW9uLmhhc2guc2xpY2UoMSkpO1xuXG4gICAgICAgIGlmIChlbCkge1xuICAgICAgICAgIGVsLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IC8vIERvbid0IHJlc2V0IGlmIHRoaXMgbmF2aWdhdGlvbiBvcHRlZCBvdXRcblxuXG4gICAgICBpZiAocHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gb3RoZXJ3aXNlIGdvIHRvIHRoZSB0b3Agb24gbmV3IGxvY2F0aW9uc1xuXG5cbiAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICB9LCBbbG9jYXRpb24sIHJlc3RvcmVTY3JvbGxQb3NpdGlvbiwgcHJldmVudFNjcm9sbFJlc2V0XSk7XG4gIH1cbn1cbi8qKlxuICogU2V0dXAgYSBjYWxsYmFjayB0byBiZSBmaXJlZCBvbiB0aGUgd2luZG93J3MgYGJlZm9yZXVubG9hZGAgZXZlbnQuIFRoaXMgaXNcbiAqIHVzZWZ1bCBmb3Igc2F2aW5nIHNvbWUgZGF0YSB0byBgd2luZG93LmxvY2FsU3RvcmFnZWAganVzdCBiZWZvcmUgdGhlIHBhZ2VcbiAqIHJlZnJlc2hlcy5cbiAqXG4gKiBOb3RlOiBUaGUgYGNhbGxiYWNrYCBhcmd1bWVudCBzaG91bGQgYmUgYSBmdW5jdGlvbiBjcmVhdGVkIHdpdGhcbiAqIGBSZWFjdC51c2VDYWxsYmFjaygpYC5cbiAqL1xuXG5cbmZ1bmN0aW9uIHVzZUJlZm9yZVVubG9hZChjYWxsYmFjaywgb3B0aW9ucykge1xuICBsZXQge1xuICAgIGNhcHR1cmVcbiAgfSA9IG9wdGlvbnMgfHwge307XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IG9wdHMgPSBjYXB0dXJlICE9IG51bGwgPyB7XG4gICAgICBjYXB0dXJlXG4gICAgfSA6IHVuZGVmaW5lZDtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICB9O1xuICB9LCBbY2FsbGJhY2ssIGNhcHR1cmVdKTtcbn1cbi8qKlxuICogU2V0dXAgYSBjYWxsYmFjayB0byBiZSBmaXJlZCBvbiB0aGUgd2luZG93J3MgYHBhZ2VoaWRlYCBldmVudC4gVGhpcyBpc1xuICogdXNlZnVsIGZvciBzYXZpbmcgc29tZSBkYXRhIHRvIGB3aW5kb3cubG9jYWxTdG9yYWdlYCBqdXN0IGJlZm9yZSB0aGUgcGFnZVxuICogcmVmcmVzaGVzLiAgVGhpcyBldmVudCBpcyBiZXR0ZXIgc3VwcG9ydGVkIHRoYW4gYmVmb3JldW5sb2FkIGFjcm9zcyBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBUaGUgYGNhbGxiYWNrYCBhcmd1bWVudCBzaG91bGQgYmUgYSBmdW5jdGlvbiBjcmVhdGVkIHdpdGhcbiAqIGBSZWFjdC51c2VDYWxsYmFjaygpYC5cbiAqL1xuXG5mdW5jdGlvbiB1c2VQYWdlSGlkZShjYWxsYmFjaywgb3B0aW9ucykge1xuICBsZXQge1xuICAgIGNhcHR1cmVcbiAgfSA9IG9wdGlvbnMgfHwge307XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IG9wdHMgPSBjYXB0dXJlICE9IG51bGwgPyB7XG4gICAgICBjYXB0dXJlXG4gICAgfSA6IHVuZGVmaW5lZDtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgfTtcbiAgfSwgW2NhbGxiYWNrLCBjYXB0dXJlXSk7XG59XG4vKipcbiAqIFdyYXBwZXIgYXJvdW5kIHVzZUJsb2NrZXIgdG8gc2hvdyBhIHdpbmRvdy5jb25maXJtIHByb21wdCB0byB1c2VycyBpbnN0ZWFkXG4gKiBvZiBidWlsZGluZyBhIGN1c3RvbSBVSSB3aXRoIHVzZUJsb2NrZXIuXG4gKlxuICogV2FybmluZzogVGhpcyBoYXMgKmEgbG90IG9mIHJvdWdoIGVkZ2VzKiBhbmQgYmVoYXZlcyB2ZXJ5IGRpZmZlcmVudGx5IChhbmRcbiAqIHZlcnkgaW5jb3JyZWN0bHkgaW4gc29tZSBjYXNlcykgYWNyb3NzIGJyb3dzZXJzIGlmIHVzZXIgY2xpY2sgYWRkaXRpb25cbiAqIGJhY2svZm9yd2FyZCBuYXZpZ2F0aW9ucyB3aGlsZSB0aGUgY29uZmlybSBpcyBvcGVuLiAgVXNlIGF0IHlvdXIgb3duIHJpc2suXG4gKi9cblxuXG5mdW5jdGlvbiB1c2VQcm9tcHQoX3JlZjgpIHtcbiAgbGV0IHtcbiAgICB3aGVuLFxuICAgIG1lc3NhZ2VcbiAgfSA9IF9yZWY4O1xuICBsZXQgYmxvY2tlciA9IHVuc3RhYmxlX3VzZUJsb2NrZXIod2hlbik7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiICYmICF3aGVuKSB7XG4gICAgICBibG9ja2VyLnJlc2V0KCk7XG4gICAgfVxuICB9LCBbYmxvY2tlciwgd2hlbl0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIikge1xuICAgICAgbGV0IHByb2NlZWQgPSB3aW5kb3cuY29uZmlybShtZXNzYWdlKTtcblxuICAgICAgaWYgKHByb2NlZWQpIHtcbiAgICAgICAgc2V0VGltZW91dChibG9ja2VyLnByb2NlZWQsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmxvY2tlci5yZXNldCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2Jsb2NrZXIsIG1lc3NhZ2VdKTtcbn1cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gVXRpbHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IFJvdXRlciFcbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGVycm9yIGlzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHlvdSBjYW4gbW9yZSBlYXNpbHlcbiAgICAgIC8vIGZpbmQgdGhlIHNvdXJjZSBmb3IgYSB3YXJuaW5nIHRoYXQgYXBwZWFycyBpbiB0aGUgY29uc29sZSBieVxuICAgICAgLy8gZW5hYmxpbmcgXCJwYXVzZSBvbiBleGNlcHRpb25zXCIgaW4geW91ciBKYXZhU2NyaXB0IGRlYnVnZ2VyLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59IC8vI2VuZHJlZ2lvblxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBGb3JtLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rLCBTY3JvbGxSZXN0b3JhdGlvbiwgdXNlU2Nyb2xsUmVzdG9yYXRpb24gYXMgVU5TQUZFX3VzZVNjcm9sbFJlc3RvcmF0aW9uLCBjcmVhdGVCcm93c2VyUm91dGVyLCBjcmVhdGVIYXNoUm91dGVyLCBjcmVhdGVTZWFyY2hQYXJhbXMsIEhpc3RvcnlSb3V0ZXIgYXMgdW5zdGFibGVfSGlzdG9yeVJvdXRlciwgdXNlUHJvbXB0IGFzIHVuc3RhYmxlX3VzZVByb21wdCwgdXNlQmVmb3JlVW5sb2FkLCB1c2VGZXRjaGVyLCB1c2VGZXRjaGVycywgdXNlRm9ybUFjdGlvbiwgdXNlTGlua0NsaWNrSGFuZGxlciwgdXNlU2VhcmNoUGFyYW1zLCB1c2VTdWJtaXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjdhYzllZmI0N2Q5N2Q2ZWFhMjEwOTJhOTRiYjg2YmJiLnN2Z1wiOyIsImZ1bmN0aW9uIHN0eWxpc19taW4gKFcpIHtcbiAgZnVuY3Rpb24gTShkLCBjLCBlLCBoLCBhKSB7XG4gICAgZm9yICh2YXIgbSA9IDAsIGIgPSAwLCB2ID0gMCwgbiA9IDAsIHEsIGcsIHggPSAwLCBLID0gMCwgaywgdSA9IGsgPSBxID0gMCwgbCA9IDAsIHIgPSAwLCBJID0gMCwgdCA9IDAsIEIgPSBlLmxlbmd0aCwgSiA9IEIgLSAxLCB5LCBmID0gJycsIHAgPSAnJywgRiA9ICcnLCBHID0gJycsIEM7IGwgPCBCOykge1xuICAgICAgZyA9IGUuY2hhckNvZGVBdChsKTtcbiAgICAgIGwgPT09IEogJiYgMCAhPT0gYiArIG4gKyB2ICsgbSAmJiAoMCAhPT0gYiAmJiAoZyA9IDQ3ID09PSBiID8gMTAgOiA0NyksIG4gPSB2ID0gbSA9IDAsIEIrKywgSisrKTtcblxuICAgICAgaWYgKDAgPT09IGIgKyBuICsgdiArIG0pIHtcbiAgICAgICAgaWYgKGwgPT09IEogJiYgKDAgPCByICYmIChmID0gZi5yZXBsYWNlKE4sICcnKSksIDAgPCBmLnRyaW0oKS5sZW5ndGgpKSB7XG4gICAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgZiArPSBlLmNoYXJBdChsKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBnID0gNTk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgIGYgPSBmLnRyaW0oKTtcbiAgICAgICAgICAgIHEgPSBmLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICBrID0gMTtcblxuICAgICAgICAgICAgZm9yICh0ID0gKytsOyBsIDwgQjspIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChnID0gZS5jaGFyQ29kZUF0KGwpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICAgICAgICBrKys7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgICAgICAgICAgay0tO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgICAgc3dpdGNoIChnID0gZS5jaGFyQ29kZUF0KGwgKyAxKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodSA9IGwgKyAxOyB1IDwgSjsgKyt1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5jaGFyQ29kZUF0KHUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICg0MiA9PT0gZyAmJiA0MiA9PT0gZS5jaGFyQ29kZUF0KHUgLSAxKSAmJiBsICsgMiAhPT0gdSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gdSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICg0NyA9PT0gZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gdSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsID0gdTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDkxOlxuICAgICAgICAgICAgICAgICAgZysrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgICAgIGcrKztcblxuICAgICAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgICAgICAgIGZvciAoOyBsKysgPCBKICYmIGUuY2hhckNvZGVBdChsKSAhPT0gZzspIHtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKDAgPT09IGspIGJyZWFrO1xuICAgICAgICAgICAgICBsKys7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGsgPSBlLnN1YnN0cmluZyh0LCBsKTtcbiAgICAgICAgICAgIDAgPT09IHEgJiYgKHEgPSAoZiA9IGYucmVwbGFjZShjYSwgJycpLnRyaW0oKSkuY2hhckNvZGVBdCgwKSk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAocSkge1xuICAgICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAgIDAgPCByICYmIChmID0gZi5yZXBsYWNlKE4sICcnKSk7XG4gICAgICAgICAgICAgICAgZyA9IGYuY2hhckNvZGVBdCgxKTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgciA9IGM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByID0gTztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBrID0gTShjLCByLCBrLCBnLCBhICsgMSk7XG4gICAgICAgICAgICAgICAgdCA9IGsubGVuZ3RoO1xuICAgICAgICAgICAgICAgIDAgPCBBICYmIChyID0gWChPLCBmLCBJKSwgQyA9IEgoMywgaywgciwgYywgRCwgeiwgdCwgZywgYSwgaCksIGYgPSByLmpvaW4oJycpLCB2b2lkIDAgIT09IEMgJiYgMCA9PT0gKHQgPSAoayA9IEMudHJpbSgpKS5sZW5ndGgpICYmIChnID0gMCwgayA9ICcnKSk7XG4gICAgICAgICAgICAgICAgaWYgKDAgPCB0KSBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgICAgICAgICBmID0gZi5yZXBsYWNlKGRhLCBlYSk7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTAwOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgICAgICAgICBjYXNlIDQ1OlxuICAgICAgICAgICAgICAgICAgICBrID0gZiArICd7JyArIGsgKyAnfSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwNzpcbiAgICAgICAgICAgICAgICAgICAgZiA9IGYucmVwbGFjZShmYSwgJyQxICQyJyk7XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgJ3snICsgayArICd9JztcbiAgICAgICAgICAgICAgICAgICAgayA9IDEgPT09IHcgfHwgMiA9PT0gdyAmJiBMKCdAJyArIGssIDMpID8gJ0Atd2Via2l0LScgKyBrICsgJ0AnICsgayA6ICdAJyArIGs7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBrID0gZiArIGssIDExMiA9PT0gaCAmJiAoayA9IChwICs9IGssICcnKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGsgPSAnJztcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGsgPSBNKGMsIFgoYywgZiwgSSksIGssIGgsIGEgKyAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgRiArPSBrO1xuICAgICAgICAgICAgayA9IEkgPSByID0gdSA9IHEgPSAwO1xuICAgICAgICAgICAgZiA9ICcnO1xuICAgICAgICAgICAgZyA9IGUuY2hhckNvZGVBdCgrK2wpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgZiA9ICgwIDwgciA/IGYucmVwbGFjZShOLCAnJykgOiBmKS50cmltKCk7XG4gICAgICAgICAgICBpZiAoMSA8ICh0ID0gZi5sZW5ndGgpKSBzd2l0Y2ggKDAgPT09IHUgJiYgKHEgPSBmLmNoYXJDb2RlQXQoMCksIDQ1ID09PSBxIHx8IDk2IDwgcSAmJiAxMjMgPiBxKSAmJiAodCA9IChmID0gZi5yZXBsYWNlKCcgJywgJzonKSkubGVuZ3RoKSwgMCA8IEEgJiYgdm9pZCAwICE9PSAoQyA9IEgoMSwgZiwgYywgZCwgRCwgeiwgcC5sZW5ndGgsIGgsIGEsIGgpKSAmJiAwID09PSAodCA9IChmID0gQy50cmltKCkpLmxlbmd0aCkgJiYgKGYgPSAnXFx4MDBcXHgwMCcpLCBxID0gZi5jaGFyQ29kZUF0KDApLCBnID0gZi5jaGFyQ29kZUF0KDEpLCBxKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAgIGlmICgxMDUgPT09IGcgfHwgOTkgPT09IGcpIHtcbiAgICAgICAgICAgICAgICAgIEcgKz0gZiArIGUuY2hhckF0KGwpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgNTggIT09IGYuY2hhckNvZGVBdCh0IC0gMSkgJiYgKHAgKz0gUChmLCBxLCBnLCBmLmNoYXJDb2RlQXQoMikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEkgPSByID0gdSA9IHEgPSAwO1xuICAgICAgICAgICAgZiA9ICcnO1xuICAgICAgICAgICAgZyA9IGUuY2hhckNvZGVBdCgrK2wpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICBjYXNlIDEzOlxuICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgIDQ3ID09PSBiID8gYiA9IDAgOiAwID09PSAxICsgcSAmJiAxMDcgIT09IGggJiYgMCA8IGYubGVuZ3RoICYmIChyID0gMSwgZiArPSAnXFx4MDAnKTtcbiAgICAgICAgICAwIDwgQSAqIFkgJiYgSCgwLCBmLCBjLCBkLCBELCB6LCBwLmxlbmd0aCwgaCwgYSwgaCk7XG4gICAgICAgICAgeiA9IDE7XG4gICAgICAgICAgRCsrO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNTk6XG4gICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGlmICgwID09PSBiICsgbiArIHYgKyBtKSB7XG4gICAgICAgICAgICB6Kys7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB6Kys7XG4gICAgICAgICAgeSA9IGUuY2hhckF0KGwpO1xuXG4gICAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIG0gKyBiKSBzd2l0Y2ggKHgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDQ0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgICB5ID0gJyc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAzMiAhPT0gZyAmJiAoeSA9ICcgJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcMCc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFxmJztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXHYnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAzODpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyBtICYmIChyID0gSSA9IDEsIHkgPSAnXFxmJyArIHkpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMDg6XG4gICAgICAgICAgICAgIGlmICgwID09PSBuICsgYiArIG0gKyBFICYmIDAgPCB1KSBzd2l0Y2ggKGwgLSB1KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgMTEyID09PSB4ICYmIDU4ID09PSBlLmNoYXJDb2RlQXQobCAtIDMpICYmIChFID0geCk7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAxMTEgPT09IEsgJiYgKEUgPSBLKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA1ODpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyBtICYmICh1ID0gbCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQ0OlxuICAgICAgICAgICAgICAwID09PSBiICsgdiArIG4gKyBtICYmIChyID0gMSwgeSArPSAnXFxyJyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgICAgMCA9PT0gYiAmJiAobiA9IG4gPT09IGcgPyAwIDogMCA9PT0gbiA/IGcgOiBuKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgOTE6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgdiAmJiBtKys7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDkzOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIHYgJiYgbS0tO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MTpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyBtICYmIHYtLTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgIGlmICgwID09PSBuICsgYiArIG0pIHtcbiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gcSkgc3dpdGNoICgyICogeCArIDMgKiBLKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDUzMzpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHEgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2Kys7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgMCA9PT0gYiArIHYgKyBuICsgbSArIHUgKyBrICYmIChrID0gMSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgaWYgKCEoMCA8IG4gKyBtICsgdikpIHN3aXRjaCAoYikge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoMiAqIGcgKyAzICogZS5jaGFyQ29kZUF0KGwgKyAxKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDIzNTpcbiAgICAgICAgICAgICAgICAgICAgICBiID0gNDc7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICAgICAgICAgICAgdCA9IGwsIGIgPSA0MjtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgICAgICAgNDcgPT09IGcgJiYgNDIgPT09IHggJiYgdCArIDIgIT09IGwgJiYgKDMzID09PSBlLmNoYXJDb2RlQXQodCArIDIpICYmIChwICs9IGUuc3Vic3RyaW5nKHQsIGwgKyAxKSksIHkgPSAnJywgYiA9IDApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgMCA9PT0gYiAmJiAoZiArPSB5KTtcbiAgICAgIH1cblxuICAgICAgSyA9IHg7XG4gICAgICB4ID0gZztcbiAgICAgIGwrKztcbiAgICB9XG5cbiAgICB0ID0gcC5sZW5ndGg7XG5cbiAgICBpZiAoMCA8IHQpIHtcbiAgICAgIHIgPSBjO1xuICAgICAgaWYgKDAgPCBBICYmIChDID0gSCgyLCBwLCByLCBkLCBELCB6LCB0LCBoLCBhLCBoKSwgdm9pZCAwICE9PSBDICYmIDAgPT09IChwID0gQykubGVuZ3RoKSkgcmV0dXJuIEcgKyBwICsgRjtcbiAgICAgIHAgPSByLmpvaW4oJywnKSArICd7JyArIHAgKyAnfSc7XG5cbiAgICAgIGlmICgwICE9PSB3ICogRSkge1xuICAgICAgICAyICE9PSB3IHx8IEwocCwgMikgfHwgKEUgPSAwKTtcblxuICAgICAgICBzd2l0Y2ggKEUpIHtcbiAgICAgICAgICBjYXNlIDExMTpcbiAgICAgICAgICAgIHAgPSBwLnJlcGxhY2UoaGEsICc6LW1vei0kMScpICsgcDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMTI6XG4gICAgICAgICAgICBwID0gcC5yZXBsYWNlKFEsICc6Oi13ZWJraXQtaW5wdXQtJDEnKSArIHAucmVwbGFjZShRLCAnOjotbW96LSQxJykgKyBwLnJlcGxhY2UoUSwgJzotbXMtaW5wdXQtJDEnKSArIHA7XG4gICAgICAgIH1cblxuICAgICAgICBFID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gRyArIHAgKyBGO1xuICB9XG5cbiAgZnVuY3Rpb24gWChkLCBjLCBlKSB7XG4gICAgdmFyIGggPSBjLnRyaW0oKS5zcGxpdChpYSk7XG4gICAgYyA9IGg7XG4gICAgdmFyIGEgPSBoLmxlbmd0aCxcbiAgICAgICAgbSA9IGQubGVuZ3RoO1xuXG4gICAgc3dpdGNoIChtKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHZhciBiID0gMDtcblxuICAgICAgICBmb3IgKGQgPSAwID09PSBtID8gJycgOiBkWzBdICsgJyAnOyBiIDwgYTsgKytiKSB7XG4gICAgICAgICAgY1tiXSA9IFooZCwgY1tiXSwgZSkudHJpbSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHZhciB2ID0gYiA9IDA7XG5cbiAgICAgICAgZm9yIChjID0gW107IGIgPCBhOyArK2IpIHtcbiAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IG07ICsrbikge1xuICAgICAgICAgICAgY1t2KytdID0gWihkW25dICsgJyAnLCBoW2JdLCBlKS50cmltKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICByZXR1cm4gYztcbiAgfVxuXG4gIGZ1bmN0aW9uIFooZCwgYywgZSkge1xuICAgIHZhciBoID0gYy5jaGFyQ29kZUF0KDApO1xuICAgIDMzID4gaCAmJiAoaCA9IChjID0gYy50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgc3dpdGNoIChoKSB7XG4gICAgICBjYXNlIDM4OlxuICAgICAgICByZXR1cm4gYy5yZXBsYWNlKEYsICckMScgKyBkLnRyaW0oKSk7XG5cbiAgICAgIGNhc2UgNTg6XG4gICAgICAgIHJldHVybiBkLnRyaW0oKSArIGMucmVwbGFjZShGLCAnJDEnICsgZC50cmltKCkpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoMCA8IDEgKiBlICYmIDAgPCBjLmluZGV4T2YoJ1xcZicpKSByZXR1cm4gYy5yZXBsYWNlKEYsICg1OCA9PT0gZC5jaGFyQ29kZUF0KDApID8gJycgOiAnJDEnKSArIGQudHJpbSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZCArIGM7XG4gIH1cblxuICBmdW5jdGlvbiBQKGQsIGMsIGUsIGgpIHtcbiAgICB2YXIgYSA9IGQgKyAnOycsXG4gICAgICAgIG0gPSAyICogYyArIDMgKiBlICsgNCAqIGg7XG5cbiAgICBpZiAoOTQ0ID09PSBtKSB7XG4gICAgICBkID0gYS5pbmRleE9mKCc6JywgOSkgKyAxO1xuICAgICAgdmFyIGIgPSBhLnN1YnN0cmluZyhkLCBhLmxlbmd0aCAtIDEpLnRyaW0oKTtcbiAgICAgIGIgPSBhLnN1YnN0cmluZygwLCBkKS50cmltKCkgKyBiICsgJzsnO1xuICAgICAgcmV0dXJuIDEgPT09IHcgfHwgMiA9PT0gdyAmJiBMKGIsIDEpID8gJy13ZWJraXQtJyArIGIgKyBiIDogYjtcbiAgICB9XG5cbiAgICBpZiAoMCA9PT0gdyB8fCAyID09PSB3ICYmICFMKGEsIDEpKSByZXR1cm4gYTtcblxuICAgIHN3aXRjaCAobSkge1xuICAgICAgY2FzZSAxMDE1OlxuICAgICAgICByZXR1cm4gOTcgPT09IGEuY2hhckNvZGVBdCgxMCkgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk1MTpcbiAgICAgICAgcmV0dXJuIDExNiA9PT0gYS5jaGFyQ29kZUF0KDMpID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSA5NjM6XG4gICAgICAgIHJldHVybiAxMTAgPT09IGEuY2hhckNvZGVBdCg1KSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgMTAwOTpcbiAgICAgICAgaWYgKDEwMCAhPT0gYS5jaGFyQ29kZUF0KDQpKSBicmVhaztcblxuICAgICAgY2FzZSA5Njk6XG4gICAgICBjYXNlIDk0MjpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgYTtcblxuICAgICAgY2FzZSA5Nzg6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbW96LScgKyBhICsgYTtcblxuICAgICAgY2FzZSAxMDE5OlxuICAgICAgY2FzZSA5ODM6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbW96LScgKyBhICsgJy1tcy0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgODgzOlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg4KSkgcmV0dXJuICctd2Via2l0LScgKyBhICsgYTtcbiAgICAgICAgaWYgKDAgPCBhLmluZGV4T2YoJ2ltYWdlLXNldCgnLCAxMSkpIHJldHVybiBhLnJlcGxhY2UoamEsICckMS13ZWJraXQtJDInKSArIGE7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDkzMjpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoNCkpIHN3aXRjaCAoYS5jaGFyQ29kZUF0KDUpKSB7XG4gICAgICAgICAgY2FzZSAxMDM6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtYm94LScgKyBhLnJlcGxhY2UoJy1ncm93JywgJycpICsgJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ2dyb3cnLCAncG9zaXRpdmUnKSArIGE7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEucmVwbGFjZSgnc2hyaW5rJywgJ25lZ2F0aXZlJykgKyBhO1xuXG4gICAgICAgICAgY2FzZSA5ODpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEucmVwbGFjZSgnYmFzaXMnLCAncHJlZmVycmVkLXNpemUnKSArIGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgOTY0OlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDEwMjM6XG4gICAgICAgIGlmICg5OSAhPT0gYS5jaGFyQ29kZUF0KDgpKSBicmVhaztcbiAgICAgICAgYiA9IGEuc3Vic3RyaW5nKGEuaW5kZXhPZignOicsIDE1KSkucmVwbGFjZSgnZmxleC0nLCAnJykucmVwbGFjZSgnc3BhY2UtYmV0d2VlbicsICdqdXN0aWZ5Jyk7XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC1ib3gtcGFjaycgKyBiICsgJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtcGFjaycgKyBiICsgYTtcblxuICAgICAgY2FzZSAxMDA1OlxuICAgICAgICByZXR1cm4ga2EudGVzdChhKSA/IGEucmVwbGFjZShhYSwgJzotd2Via2l0LScpICsgYS5yZXBsYWNlKGFhLCAnOi1tb3otJykgKyBhIDogYTtcblxuICAgICAgY2FzZSAxZTM6XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZygxMykudHJpbSgpO1xuICAgICAgICBjID0gYi5pbmRleE9mKCctJykgKyAxO1xuXG4gICAgICAgIHN3aXRjaCAoYi5jaGFyQ29kZUF0KDApICsgYi5jaGFyQ29kZUF0KGMpKSB7XG4gICAgICAgICAgY2FzZSAyMjY6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICd0YicpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIzMjpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ3RiLXJsJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjIwOlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAnbHInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYiArIGE7XG5cbiAgICAgIGNhc2UgMTAxNzpcbiAgICAgICAgaWYgKC0xID09PSBhLmluZGV4T2YoJ3N0aWNreScsIDkpKSBicmVhaztcblxuICAgICAgY2FzZSA5NzU6XG4gICAgICAgIGMgPSAoYSA9IGQpLmxlbmd0aCAtIDEwO1xuICAgICAgICBiID0gKDMzID09PSBhLmNoYXJDb2RlQXQoYykgPyBhLnN1YnN0cmluZygwLCBjKSA6IGEpLnN1YnN0cmluZyhkLmluZGV4T2YoJzonLCA3KSArIDEpLnRyaW0oKTtcblxuICAgICAgICBzd2l0Y2ggKG0gPSBiLmNoYXJDb2RlQXQoMCkgKyAoYi5jaGFyQ29kZUF0KDcpIHwgMCkpIHtcbiAgICAgICAgICBjYXNlIDIwMzpcbiAgICAgICAgICAgIGlmICgxMTEgPiBiLmNoYXJDb2RlQXQoOCkpIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICBhID0gYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArICc7JyArIGE7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjA3OlxuICAgICAgICAgIGNhc2UgMTAyOlxuICAgICAgICAgICAgYSA9IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgKDEwMiA8IG0gPyAnaW5saW5lLScgOiAnJykgKyAnYm94JykgKyAnOycgKyBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArIGIpICsgJzsnICsgYS5yZXBsYWNlKGIsICctbXMtJyArIGIgKyAnYm94JykgKyAnOycgKyBhO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGEgKyAnOyc7XG5cbiAgICAgIGNhc2UgOTM4OlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg1KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNikpIHtcbiAgICAgICAgICBjYXNlIDEwNTpcbiAgICAgICAgICAgIHJldHVybiBiID0gYS5yZXBsYWNlKCctaXRlbXMnLCAnJyksICctd2Via2l0LScgKyBhICsgJy13ZWJraXQtYm94LScgKyBiICsgJy1tcy1mbGV4LScgKyBiICsgYTtcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LWl0ZW0tJyArIGEucmVwbGFjZShiYSwgJycpICsgYTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtbGluZS1wYWNrJyArIGEucmVwbGFjZSgnYWxpZ24tY29udGVudCcsICcnKS5yZXBsYWNlKGJhLCAnJykgKyBhO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDk3MzpcbiAgICAgIGNhc2UgOTg5OlxuICAgICAgICBpZiAoNDUgIT09IGEuY2hhckNvZGVBdCgzKSB8fCAxMjIgPT09IGEuY2hhckNvZGVBdCg0KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTMxOlxuICAgICAgY2FzZSA5NTM6XG4gICAgICAgIGlmICghMCA9PT0gbGEudGVzdChkKSkgcmV0dXJuIDExNSA9PT0gKGIgPSBkLnN1YnN0cmluZyhkLmluZGV4T2YoJzonKSArIDEpKS5jaGFyQ29kZUF0KDApID8gUChkLnJlcGxhY2UoJ3N0cmV0Y2gnLCAnZmlsbC1hdmFpbGFibGUnKSwgYywgZSwgaCkucmVwbGFjZSgnOmZpbGwtYXZhaWxhYmxlJywgJzpzdHJldGNoJykgOiBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArIGIpICsgYS5yZXBsYWNlKGIsICctbW96LScgKyBiLnJlcGxhY2UoJ2ZpbGwtJywgJycpKSArIGE7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDk2MjpcbiAgICAgICAgaWYgKGEgPSAnLXdlYmtpdC0nICsgYSArICgxMDIgPT09IGEuY2hhckNvZGVBdCg1KSA/ICctbXMtJyArIGEgOiAnJykgKyBhLCAyMTEgPT09IGUgKyBoICYmIDEwNSA9PT0gYS5jaGFyQ29kZUF0KDEzKSAmJiAwIDwgYS5pbmRleE9mKCd0cmFuc2Zvcm0nLCAxMCkpIHJldHVybiBhLnN1YnN0cmluZygwLCBhLmluZGV4T2YoJzsnLCAyNykgKyAxKS5yZXBsYWNlKG1hLCAnJDEtd2Via2l0LSQyJykgKyBhO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9XG5cbiAgZnVuY3Rpb24gTChkLCBjKSB7XG4gICAgdmFyIGUgPSBkLmluZGV4T2YoMSA9PT0gYyA/ICc6JyA6ICd7JyksXG4gICAgICAgIGggPSBkLnN1YnN0cmluZygwLCAzICE9PSBjID8gZSA6IDEwKTtcbiAgICBlID0gZC5zdWJzdHJpbmcoZSArIDEsIGQubGVuZ3RoIC0gMSk7XG4gICAgcmV0dXJuIFIoMiAhPT0gYyA/IGggOiBoLnJlcGxhY2UobmEsICckMScpLCBlLCBjKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVhKGQsIGMpIHtcbiAgICB2YXIgZSA9IFAoYywgYy5jaGFyQ29kZUF0KDApLCBjLmNoYXJDb2RlQXQoMSksIGMuY2hhckNvZGVBdCgyKSk7XG4gICAgcmV0dXJuIGUgIT09IGMgKyAnOycgPyBlLnJlcGxhY2Uob2EsICcgb3IgKCQxKScpLnN1YnN0cmluZyg0KSA6ICcoJyArIGMgKyAnKSc7XG4gIH1cblxuICBmdW5jdGlvbiBIKGQsIGMsIGUsIGgsIGEsIG0sIGIsIHYsIG4sIHEpIHtcbiAgICBmb3IgKHZhciBnID0gMCwgeCA9IGMsIHc7IGcgPCBBOyArK2cpIHtcbiAgICAgIHN3aXRjaCAodyA9IFNbZ10uY2FsbChCLCBkLCB4LCBlLCBoLCBhLCBtLCBiLCB2LCBuLCBxKSkge1xuICAgICAgICBjYXNlIHZvaWQgMDpcbiAgICAgICAgY2FzZSAhMTpcbiAgICAgICAgY2FzZSAhMDpcbiAgICAgICAgY2FzZSBudWxsOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgeCA9IHc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHggIT09IGMpIHJldHVybiB4O1xuICB9XG5cbiAgZnVuY3Rpb24gVChkKSB7XG4gICAgc3dpdGNoIChkKSB7XG4gICAgICBjYXNlIHZvaWQgMDpcbiAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgQSA9IFMubGVuZ3RoID0gMDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZCkgU1tBKytdID0gZDtlbHNlIGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIGQpIGZvciAodmFyIGMgPSAwLCBlID0gZC5sZW5ndGg7IGMgPCBlOyArK2MpIHtcbiAgICAgICAgICBUKGRbY10pO1xuICAgICAgICB9IGVsc2UgWSA9ICEhZCB8IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIFQ7XG4gIH1cblxuICBmdW5jdGlvbiBVKGQpIHtcbiAgICBkID0gZC5wcmVmaXg7XG4gICAgdm9pZCAwICE9PSBkICYmIChSID0gbnVsbCwgZCA/ICdmdW5jdGlvbicgIT09IHR5cGVvZiBkID8gdyA9IDEgOiAodyA9IDIsIFIgPSBkKSA6IHcgPSAwKTtcbiAgICByZXR1cm4gVTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEIoZCwgYykge1xuICAgIHZhciBlID0gZDtcbiAgICAzMyA+IGUuY2hhckNvZGVBdCgwKSAmJiAoZSA9IGUudHJpbSgpKTtcbiAgICBWID0gZTtcbiAgICBlID0gW1ZdO1xuXG4gICAgaWYgKDAgPCBBKSB7XG4gICAgICB2YXIgaCA9IEgoLTEsIGMsIGUsIGUsIEQsIHosIDAsIDAsIDAsIDApO1xuICAgICAgdm9pZCAwICE9PSBoICYmICdzdHJpbmcnID09PSB0eXBlb2YgaCAmJiAoYyA9IGgpO1xuICAgIH1cblxuICAgIHZhciBhID0gTShPLCBlLCBjLCAwLCAwKTtcbiAgICAwIDwgQSAmJiAoaCA9IEgoLTIsIGEsIGUsIGUsIEQsIHosIGEubGVuZ3RoLCAwLCAwLCAwKSwgdm9pZCAwICE9PSBoICYmIChhID0gaCkpO1xuICAgIFYgPSAnJztcbiAgICBFID0gMDtcbiAgICB6ID0gRCA9IDE7XG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICB2YXIgY2EgPSAvXlxcMCsvZyxcbiAgICAgIE4gPSAvW1xcMFxcclxcZl0vZyxcbiAgICAgIGFhID0gLzogKi9nLFxuICAgICAga2EgPSAvem9vfGdyYS8sXG4gICAgICBtYSA9IC8oWyw6IF0pKHRyYW5zZm9ybSkvZyxcbiAgICAgIGlhID0gLyxcXHIrPy9nLFxuICAgICAgRiA9IC8oW1xcdFxcclxcbiBdKSpcXGY/Ji9nLFxuICAgICAgZmEgPSAvQChrXFx3KylcXHMqKFxcUyopXFxzKi8sXG4gICAgICBRID0gLzo6KHBsYWNlKS9nLFxuICAgICAgaGEgPSAvOihyZWFkLW9ubHkpL2csXG4gICAgICBHID0gL1tzdmhdXFx3Ky1bdGJscl17Mn0vLFxuICAgICAgZGEgPSAvXFwoXFxzKiguKilcXHMqXFwpL2csXG4gICAgICBvYSA9IC8oW1xcc1xcU10qPyk7L2csXG4gICAgICBiYSA9IC8tc2VsZnxmbGV4LS9nLFxuICAgICAgbmEgPSAvW15dKj8oOltycF1bZWxdYVtcXHctXSspW15dKi8sXG4gICAgICBsYSA9IC9zdHJldGNofDpcXHMqXFx3K1xcLSg/OmNvbnRlfGF2YWlsKS8sXG4gICAgICBqYSA9IC8oW14tXSkoaW1hZ2Utc2V0XFwoKS8sXG4gICAgICB6ID0gMSxcbiAgICAgIEQgPSAxLFxuICAgICAgRSA9IDAsXG4gICAgICB3ID0gMSxcbiAgICAgIE8gPSBbXSxcbiAgICAgIFMgPSBbXSxcbiAgICAgIEEgPSAwLFxuICAgICAgUiA9IG51bGwsXG4gICAgICBZID0gMCxcbiAgICAgIFYgPSAnJztcbiAgQi51c2UgPSBUO1xuICBCLnNldCA9IFU7XG4gIHZvaWQgMCAhPT0gVyAmJiBVKFcpO1xuICByZXR1cm4gQjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R5bGlzX21pbjtcbiIsInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBib3JkZXJJbWFnZU91dHNldDogMSxcbiAgYm9yZGVySW1hZ2VTbGljZTogMSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogMSxcbiAgYm94RmxleDogMSxcbiAgYm94RmxleEdyb3VwOiAxLFxuICBib3hPcmRpbmFsR3JvdXA6IDEsXG4gIGNvbHVtbkNvdW50OiAxLFxuICBjb2x1bW5zOiAxLFxuICBmbGV4OiAxLFxuICBmbGV4R3JvdzogMSxcbiAgZmxleFBvc2l0aXZlOiAxLFxuICBmbGV4U2hyaW5rOiAxLFxuICBmbGV4TmVnYXRpdmU6IDEsXG4gIGZsZXhPcmRlcjogMSxcbiAgZ3JpZFJvdzogMSxcbiAgZ3JpZFJvd0VuZDogMSxcbiAgZ3JpZFJvd1NwYW46IDEsXG4gIGdyaWRSb3dTdGFydDogMSxcbiAgZ3JpZENvbHVtbjogMSxcbiAgZ3JpZENvbHVtbkVuZDogMSxcbiAgZ3JpZENvbHVtblNwYW46IDEsXG4gIGdyaWRDb2x1bW5TdGFydDogMSxcbiAgbXNHcmlkUm93OiAxLFxuICBtc0dyaWRSb3dTcGFuOiAxLFxuICBtc0dyaWRDb2x1bW46IDEsXG4gIG1zR3JpZENvbHVtblNwYW46IDEsXG4gIGZvbnRXZWlnaHQ6IDEsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIG9wYWNpdHk6IDEsXG4gIG9yZGVyOiAxLFxuICBvcnBoYW5zOiAxLFxuICB0YWJTaXplOiAxLFxuICB3aWRvd3M6IDEsXG4gIHpJbmRleDogMSxcbiAgem9vbTogMSxcbiAgV2Via2l0TGluZUNsYW1wOiAxLFxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiAxLFxuICBmbG9vZE9wYWNpdHk6IDEsXG4gIHN0b3BPcGFjaXR5OiAxLFxuICBzdHJva2VEYXNoYXJyYXk6IDEsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IDEsXG4gIHN0cm9rZU1pdGVybGltaXQ6IDEsXG4gIHN0cm9rZU9wYWNpdHk6IDEsXG4gIHN0cm9rZVdpZHRoOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCB1bml0bGVzc0tleXM7XG4iLCJmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7XG4iLCJpbXBvcnQgbWVtb2l6ZSBmcm9tICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIHJlYWN0UHJvcHNSZWdleCA9IC9eKChjaGlsZHJlbnxkYW5nZXJvdXNseVNldElubmVySFRNTHxrZXl8cmVmfGF1dG9Gb2N1c3xkZWZhdWx0VmFsdWV8ZGVmYXVsdENoZWNrZWR8aW5uZXJIVE1MfHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ3xzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmd8dmFsdWVMaW5rfGFiYnJ8YWNjZXB0fGFjY2VwdENoYXJzZXR8YWNjZXNzS2V5fGFjdGlvbnxhbGxvd3xhbGxvd1VzZXJNZWRpYXxhbGxvd1BheW1lbnRSZXF1ZXN0fGFsbG93RnVsbFNjcmVlbnxhbGxvd1RyYW5zcGFyZW5jeXxhbHR8YXN5bmN8YXV0b0NvbXBsZXRlfGF1dG9QbGF5fGNhcHR1cmV8Y2VsbFBhZGRpbmd8Y2VsbFNwYWNpbmd8Y2hhbGxlbmdlfGNoYXJTZXR8Y2hlY2tlZHxjaXRlfGNsYXNzSUR8Y2xhc3NOYW1lfGNvbHN8Y29sU3Bhbnxjb250ZW50fGNvbnRlbnRFZGl0YWJsZXxjb250ZXh0TWVudXxjb250cm9sc3xjb250cm9sc0xpc3R8Y29vcmRzfGNyb3NzT3JpZ2lufGRhdGF8ZGF0ZVRpbWV8ZGVjb2Rpbmd8ZGVmYXVsdHxkZWZlcnxkaXJ8ZGlzYWJsZWR8ZGlzYWJsZVBpY3R1cmVJblBpY3R1cmV8ZG93bmxvYWR8ZHJhZ2dhYmxlfGVuY1R5cGV8ZW50ZXJLZXlIaW50fGZvcm18Zm9ybUFjdGlvbnxmb3JtRW5jVHlwZXxmb3JtTWV0aG9kfGZvcm1Ob1ZhbGlkYXRlfGZvcm1UYXJnZXR8ZnJhbWVCb3JkZXJ8aGVhZGVyc3xoZWlnaHR8aGlkZGVufGhpZ2h8aHJlZnxocmVmTGFuZ3xodG1sRm9yfGh0dHBFcXVpdnxpZHxpbnB1dE1vZGV8aW50ZWdyaXR5fGlzfGtleVBhcmFtc3xrZXlUeXBlfGtpbmR8bGFiZWx8bGFuZ3xsaXN0fGxvYWRpbmd8bG9vcHxsb3d8bWFyZ2luSGVpZ2h0fG1hcmdpbldpZHRofG1heHxtYXhMZW5ndGh8bWVkaWF8bWVkaWFHcm91cHxtZXRob2R8bWlufG1pbkxlbmd0aHxtdWx0aXBsZXxtdXRlZHxuYW1lfG5vbmNlfG5vVmFsaWRhdGV8b3BlbnxvcHRpbXVtfHBhdHRlcm58cGxhY2Vob2xkZXJ8cGxheXNJbmxpbmV8cG9zdGVyfHByZWxvYWR8cHJvZmlsZXxyYWRpb0dyb3VwfHJlYWRPbmx5fHJlZmVycmVyUG9saWN5fHJlbHxyZXF1aXJlZHxyZXZlcnNlZHxyb2xlfHJvd3N8cm93U3BhbnxzYW5kYm94fHNjb3BlfHNjb3BlZHxzY3JvbGxpbmd8c2VhbWxlc3N8c2VsZWN0ZWR8c2hhcGV8c2l6ZXxzaXplc3xzbG90fHNwYW58c3BlbGxDaGVja3xzcmN8c3JjRG9jfHNyY0xhbmd8c3JjU2V0fHN0YXJ0fHN0ZXB8c3R5bGV8c3VtbWFyeXx0YWJJbmRleHx0YXJnZXR8dGl0bGV8dHJhbnNsYXRlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5jcmVtZW50YWx8ZmFsbGJhY2t8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufG9wdGlvbnxyZXN1bHRzfHNlY3VyaXR5fHVuc2VsZWN0YWJsZXxhY2NlbnRIZWlnaHR8YWNjdW11bGF0ZXxhZGRpdGl2ZXxhbGlnbm1lbnRCYXNlbGluZXxhbGxvd1Jlb3JkZXJ8YWxwaGFiZXRpY3xhbXBsaXR1ZGV8YXJhYmljRm9ybXxhc2NlbnR8YXR0cmlidXRlTmFtZXxhdHRyaWJ1dGVUeXBlfGF1dG9SZXZlcnNlfGF6aW11dGh8YmFzZUZyZXF1ZW5jeXxiYXNlbGluZVNoaWZ0fGJhc2VQcm9maWxlfGJib3h8YmVnaW58Ymlhc3xieXxjYWxjTW9kZXxjYXBIZWlnaHR8Y2xpcHxjbGlwUGF0aFVuaXRzfGNsaXBQYXRofGNsaXBSdWxlfGNvbG9ySW50ZXJwb2xhdGlvbnxjb2xvckludGVycG9sYXRpb25GaWx0ZXJzfGNvbG9yUHJvZmlsZXxjb2xvclJlbmRlcmluZ3xjb250ZW50U2NyaXB0VHlwZXxjb250ZW50U3R5bGVUeXBlfGN1cnNvcnxjeHxjeXxkfGRlY2VsZXJhdGV8ZGVzY2VudHxkaWZmdXNlQ29uc3RhbnR8ZGlyZWN0aW9ufGRpc3BsYXl8ZGl2aXNvcnxkb21pbmFudEJhc2VsaW5lfGR1cnxkeHxkeXxlZGdlTW9kZXxlbGV2YXRpb258ZW5hYmxlQmFja2dyb3VuZHxlbmR8ZXhwb25lbnR8ZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZHxmaWxsfGZpbGxPcGFjaXR5fGZpbGxSdWxlfGZpbHRlcnxmaWx0ZXJSZXN8ZmlsdGVyVW5pdHN8Zmxvb2RDb2xvcnxmbG9vZE9wYWNpdHl8Zm9jdXNhYmxlfGZvbnRGYW1pbHl8Zm9udFNpemV8Zm9udFNpemVBZGp1c3R8Zm9udFN0cmV0Y2h8Zm9udFN0eWxlfGZvbnRWYXJpYW50fGZvbnRXZWlnaHR8Zm9ybWF0fGZyb218ZnJ8Znh8Znl8ZzF8ZzJ8Z2x5cGhOYW1lfGdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsfGdseXBoT3JpZW50YXRpb25WZXJ0aWNhbHxnbHlwaFJlZnxncmFkaWVudFRyYW5zZm9ybXxncmFkaWVudFVuaXRzfGhhbmdpbmd8aG9yaXpBZHZYfGhvcml6T3JpZ2luWHxpZGVvZ3JhcGhpY3xpbWFnZVJlbmRlcmluZ3xpbnxpbjJ8aW50ZXJjZXB0fGt8azF8azJ8azN8azR8a2VybmVsTWF0cml4fGtlcm5lbFVuaXRMZW5ndGh8a2VybmluZ3xrZXlQb2ludHN8a2V5U3BsaW5lc3xrZXlUaW1lc3xsZW5ndGhBZGp1c3R8bGV0dGVyU3BhY2luZ3xsaWdodGluZ0NvbG9yfGxpbWl0aW5nQ29uZUFuZ2xlfGxvY2FsfG1hcmtlckVuZHxtYXJrZXJNaWR8bWFya2VyU3RhcnR8bWFya2VySGVpZ2h0fG1hcmtlclVuaXRzfG1hcmtlcldpZHRofG1hc2t8bWFza0NvbnRlbnRVbml0c3xtYXNrVW5pdHN8bWF0aGVtYXRpY2FsfG1vZGV8bnVtT2N0YXZlc3xvZmZzZXR8b3BhY2l0eXxvcGVyYXRvcnxvcmRlcnxvcmllbnR8b3JpZW50YXRpb258b3JpZ2lufG92ZXJmbG93fG92ZXJsaW5lUG9zaXRpb258b3ZlcmxpbmVUaGlja25lc3N8cGFub3NlMXxwYWludE9yZGVyfHBhdGhMZW5ndGh8cGF0dGVybkNvbnRlbnRVbml0c3xwYXR0ZXJuVHJhbnNmb3JtfHBhdHRlcm5Vbml0c3xwb2ludGVyRXZlbnRzfHBvaW50c3xwb2ludHNBdFh8cG9pbnRzQXRZfHBvaW50c0F0WnxwcmVzZXJ2ZUFscGhhfHByZXNlcnZlQXNwZWN0UmF0aW98cHJpbWl0aXZlVW5pdHN8cnxyYWRpdXN8cmVmWHxyZWZZfHJlbmRlcmluZ0ludGVudHxyZXBlYXRDb3VudHxyZXBlYXREdXJ8cmVxdWlyZWRFeHRlbnNpb25zfHJlcXVpcmVkRmVhdHVyZXN8cmVzdGFydHxyZXN1bHR8cm90YXRlfHJ4fHJ5fHNjYWxlfHNlZWR8c2hhcGVSZW5kZXJpbmd8c2xvcGV8c3BhY2luZ3xzcGVjdWxhckNvbnN0YW50fHNwZWN1bGFyRXhwb25lbnR8c3BlZWR8c3ByZWFkTWV0aG9kfHN0YXJ0T2Zmc2V0fHN0ZERldmlhdGlvbnxzdGVtaHxzdGVtdnxzdGl0Y2hUaWxlc3xzdG9wQ29sb3J8c3RvcE9wYWNpdHl8c3RyaWtldGhyb3VnaFBvc2l0aW9ufHN0cmlrZXRocm91Z2hUaGlja25lc3N8c3RyaW5nfHN0cm9rZXxzdHJva2VEYXNoYXJyYXl8c3Ryb2tlRGFzaG9mZnNldHxzdHJva2VMaW5lY2FwfHN0cm9rZUxpbmVqb2lufHN0cm9rZU1pdGVybGltaXR8c3Ryb2tlT3BhY2l0eXxzdHJva2VXaWR0aHxzdXJmYWNlU2NhbGV8c3lzdGVtTGFuZ3VhZ2V8dGFibGVWYWx1ZXN8dGFyZ2V0WHx0YXJnZXRZfHRleHRBbmNob3J8dGV4dERlY29yYXRpb258dGV4dFJlbmRlcmluZ3x0ZXh0TGVuZ3RofHRvfHRyYW5zZm9ybXx1MXx1Mnx1bmRlcmxpbmVQb3NpdGlvbnx1bmRlcmxpbmVUaGlja25lc3N8dW5pY29kZXx1bmljb2RlQmlkaXx1bmljb2RlUmFuZ2V8dW5pdHNQZXJFbXx2QWxwaGFiZXRpY3x2SGFuZ2luZ3x2SWRlb2dyYXBoaWN8dk1hdGhlbWF0aWNhbHx2YWx1ZXN8dmVjdG9yRWZmZWN0fHZlcnNpb258dmVydEFkdll8dmVydE9yaWdpblh8dmVydE9yaWdpbll8dmlld0JveHx2aWV3VGFyZ2V0fHZpc2liaWxpdHl8d2lkdGhzfHdvcmRTcGFjaW5nfHdyaXRpbmdNb2RlfHh8eEhlaWdodHx4MXx4Mnx4Q2hhbm5lbFNlbGVjdG9yfHhsaW5rQWN0dWF0ZXx4bGlua0FyY3JvbGV8eGxpbmtIcmVmfHhsaW5rUm9sZXx4bGlua1Nob3d8eGxpbmtUaXRsZXx4bGlua1R5cGV8eG1sQmFzZXx4bWxuc3x4bWxuc1hsaW5rfHhtbExhbmd8eG1sU3BhY2V8eXx5MXx5Mnx5Q2hhbm5lbFNlbGVjdG9yfHp8em9vbUFuZFBhbnxmb3J8Y2xhc3N8YXV0b2ZvY3VzKXwoKFtEZF1bQWFdW1R0XVtBYV18W0FhXVtScl1bSWldW0FhXXx4KS0uKikpJC87IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWJmZWU2OGE0Y2Q3ZTYwMDllZjYxZDIzXG5cbnZhciBpc1Byb3BWYWxpZCA9IC8qICNfX1BVUkVfXyAqL21lbW9pemUoZnVuY3Rpb24gKHByb3ApIHtcbiAgcmV0dXJuIHJlYWN0UHJvcHNSZWdleC50ZXN0KHByb3ApIHx8IHByb3AuY2hhckNvZGVBdCgwKSA9PT0gMTExXG4gIC8qIG8gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDEpID09PSAxMTBcbiAgLyogbiAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMikgPCA5MTtcbn1cbi8qIForMSAqL1xuKTtcblxuZXhwb3J0IGRlZmF1bHQgaXNQcm9wVmFsaWQ7XG4iLCJpbXBvcnR7dHlwZU9mIGFzIGUsaXNFbGVtZW50IGFzIHQsaXNWYWxpZEVsZW1lbnRUeXBlIGFzIG59ZnJvbVwicmVhY3QtaXNcIjtpbXBvcnQgcix7dXNlU3RhdGUgYXMgbyx1c2VDb250ZXh0IGFzIHMsdXNlTWVtbyBhcyBpLHVzZUVmZmVjdCBhcyBhLHVzZVJlZiBhcyBjLGNyZWF0ZUVsZW1lbnQgYXMgdSx1c2VEZWJ1Z1ZhbHVlIGFzIGwsdXNlTGF5b3V0RWZmZWN0IGFzIGR9ZnJvbVwicmVhY3RcIjtpbXBvcnQgaCBmcm9tXCJzaGFsbG93ZXF1YWxcIjtpbXBvcnQgcCBmcm9tXCJAZW1vdGlvbi9zdHlsaXNcIjtpbXBvcnQgZiBmcm9tXCJAZW1vdGlvbi91bml0bGVzc1wiO2ltcG9ydCBtIGZyb21cIkBlbW90aW9uL2lzLXByb3AtdmFsaWRcIjtpbXBvcnQgeSBmcm9tXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiO2Z1bmN0aW9uIHYoKXtyZXR1cm4odj1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgbj1hcmd1bWVudHNbdF07Zm9yKHZhciByIGluIG4pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4scikmJihlW3JdPW5bcl0pfXJldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBnPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPVtlWzBdXSxyPTAsbz10Lmxlbmd0aDtyPG87cis9MSluLnB1c2godFtyXSxlW3IrMV0pO3JldHVybiBufSxTPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT09dCYmXCJvYmplY3RcIj09dHlwZW9mIHQmJlwiW29iamVjdCBPYmplY3RdXCI9PT0odC50b1N0cmluZz90LnRvU3RyaW5nKCk6T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKSYmIWUodCl9LHc9T2JqZWN0LmZyZWV6ZShbXSksRT1PYmplY3QuZnJlZXplKHt9KTtmdW5jdGlvbiBiKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV9ZnVuY3Rpb24gXyhlKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInN0cmluZ1wiPT10eXBlb2YgZSYmZXx8ZS5kaXNwbGF5TmFtZXx8ZS5uYW1lfHxcIkNvbXBvbmVudFwifWZ1bmN0aW9uIE4oZSl7cmV0dXJuIGUmJlwic3RyaW5nXCI9PXR5cGVvZiBlLnN0eWxlZENvbXBvbmVudElkfXZhciBBPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiZ2b2lkIDAhPT1wcm9jZXNzLmVudiYmKHByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19BVFRSfHxwcm9jZXNzLmVudi5TQ19BVFRSKXx8XCJkYXRhLXN0eWxlZFwiLEM9XCI1LjMuOFwiLEk9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmXCJIVE1MRWxlbWVudFwiaW4gd2luZG93LFA9Qm9vbGVhbihcImJvb2xlYW5cIj09dHlwZW9mIFNDX0RJU0FCTEVfU1BFRURZP1NDX0RJU0FCTEVfU1BFRURZOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiZ2b2lkIDAhPT1wcm9jZXNzLmVudiYmKHZvaWQgMCE9PXByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSYmXCJcIiE9PXByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWT9cImZhbHNlXCIhPT1wcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkmJnByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWTp2b2lkIDAhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWSYmXCJcIiE9PXByb2Nlc3MuZW52LlNDX0RJU0FCTEVfU1BFRURZP1wiZmFsc2VcIiE9PXByb2Nlc3MuZW52LlNDX0RJU0FCTEVfU1BFRURZJiZwcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWTpcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKSksTz17fSxSPVwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/ezE6XCJDYW5ub3QgY3JlYXRlIHN0eWxlZC1jb21wb25lbnQgZm9yIGNvbXBvbmVudDogJXMuXFxuXFxuXCIsMjpcIkNhbid0IGNvbGxlY3Qgc3R5bGVzIG9uY2UgeW91J3ZlIGNvbnN1bWVkIGEgYFNlcnZlclN0eWxlU2hlZXRgJ3Mgc3R5bGVzISBgU2VydmVyU3R5bGVTaGVldGAgaXMgYSBvbmUgb2ZmIGluc3RhbmNlIGZvciBlYWNoIHNlcnZlci1zaWRlIHJlbmRlciBjeWNsZS5cXG5cXG4tIEFyZSB5b3UgdHJ5aW5nIHRvIHJldXNlIGl0IGFjcm9zcyByZW5kZXJzP1xcbi0gQXJlIHlvdSBhY2NpZGVudGFsbHkgY2FsbGluZyBjb2xsZWN0U3R5bGVzIHR3aWNlP1xcblxcblwiLDM6XCJTdHJlYW1pbmcgU1NSIGlzIG9ubHkgc3VwcG9ydGVkIGluIGEgTm9kZS5qcyBlbnZpcm9ubWVudDsgUGxlYXNlIGRvIG5vdCB0cnkgdG8gY2FsbCB0aGlzIG1ldGhvZCBpbiB0aGUgYnJvd3Nlci5cXG5cXG5cIiw0OlwiVGhlIGBTdHlsZVNoZWV0TWFuYWdlcmAgZXhwZWN0cyBhIHZhbGlkIHRhcmdldCBvciBzaGVldCBwcm9wIVxcblxcbi0gRG9lcyB0aGlzIGVycm9yIG9jY3VyIG9uIHRoZSBjbGllbnQgYW5kIGlzIHlvdXIgdGFyZ2V0IGZhbHN5P1xcbi0gRG9lcyB0aGlzIGVycm9yIG9jY3VyIG9uIHRoZSBzZXJ2ZXIgYW5kIGlzIHRoZSBzaGVldCBmYWxzeT9cXG5cXG5cIiw1OlwiVGhlIGNsb25lIG1ldGhvZCBjYW5ub3QgYmUgdXNlZCBvbiB0aGUgY2xpZW50IVxcblxcbi0gQXJlIHlvdSBydW5uaW5nIGluIGEgY2xpZW50LWxpa2UgZW52aXJvbm1lbnQgb24gdGhlIHNlcnZlcj9cXG4tIEFyZSB5b3UgdHJ5aW5nIHRvIHJ1biBTU1Igb24gdGhlIGNsaWVudD9cXG5cXG5cIiw2OlwiVHJ5aW5nIHRvIGluc2VydCBhIG5ldyBzdHlsZSB0YWcsIGJ1dCB0aGUgZ2l2ZW4gTm9kZSBpcyB1bm1vdW50ZWQhXFxuXFxuLSBBcmUgeW91IHVzaW5nIGEgY3VzdG9tIHRhcmdldCB0aGF0IGlzbid0IG1vdW50ZWQ/XFxuLSBEb2VzIHlvdXIgZG9jdW1lbnQgbm90IGhhdmUgYSB2YWxpZCBoZWFkIGVsZW1lbnQ/XFxuLSBIYXZlIHlvdSBhY2NpZGVudGFsbHkgcmVtb3ZlZCBhIHN0eWxlIHRhZyBtYW51YWxseT9cXG5cXG5cIiw3OidUaGVtZVByb3ZpZGVyOiBQbGVhc2UgcmV0dXJuIGFuIG9iamVjdCBmcm9tIHlvdXIgXCJ0aGVtZVwiIHByb3AgZnVuY3Rpb24sIGUuZy5cXG5cXG5gYGBqc1xcbnRoZW1lPXsoKSA9PiAoe30pfVxcbmBgYFxcblxcbicsODonVGhlbWVQcm92aWRlcjogUGxlYXNlIG1ha2UgeW91ciBcInRoZW1lXCIgcHJvcCBhbiBvYmplY3QuXFxuXFxuJyw5OlwiTWlzc2luZyBkb2N1bWVudCBgPGhlYWQ+YFxcblxcblwiLDEwOlwiQ2Fubm90IGZpbmQgYSBTdHlsZVNoZWV0IGluc3RhbmNlLiBVc3VhbGx5IHRoaXMgaGFwcGVucyBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgY29waWVzIG9mIHN0eWxlZC1jb21wb25lbnRzIGxvYWRlZCBhdCBvbmNlLiBDaGVjayBvdXQgdGhpcyBpc3N1ZSBmb3IgaG93IHRvIHRyb3VibGVzaG9vdCBhbmQgZml4IHRoZSBjb21tb24gY2FzZXMgd2hlcmUgdGhpcyBzaXR1YXRpb24gY2FuIGhhcHBlbjogaHR0cHM6Ly9naXRodWIuY29tL3N0eWxlZC1jb21wb25lbnRzL3N0eWxlZC1jb21wb25lbnRzL2lzc3Vlcy8xOTQxI2lzc3VlY29tbWVudC00MTc4NjIwMjFcXG5cXG5cIiwxMTpcIl9UaGlzIGVycm9yIHdhcyByZXBsYWNlZCB3aXRoIGEgZGV2LXRpbWUgd2FybmluZywgaXQgd2lsbCBiZSBkZWxldGVkIGZvciB2NCBmaW5hbC5fIFtjcmVhdGVHbG9iYWxTdHlsZV0gcmVjZWl2ZWQgY2hpbGRyZW4gd2hpY2ggd2lsbCBub3QgYmUgcmVuZGVyZWQuIFBsZWFzZSB1c2UgdGhlIGNvbXBvbmVudCB3aXRob3V0IHBhc3NpbmcgY2hpbGRyZW4gZWxlbWVudHMuXFxuXFxuXCIsMTI6XCJJdCBzZWVtcyB5b3UgYXJlIGludGVycG9sYXRpbmcgYSBrZXlmcmFtZSBkZWNsYXJhdGlvbiAoJXMpIGludG8gYW4gdW50YWdnZWQgc3RyaW5nLiBUaGlzIHdhcyBzdXBwb3J0ZWQgaW4gc3R5bGVkLWNvbXBvbmVudHMgdjMsIGJ1dCBpcyBub3QgbG9uZ2VyIHN1cHBvcnRlZCBpbiB2NCBhcyBrZXlmcmFtZXMgYXJlIG5vdyBpbmplY3RlZCBvbi1kZW1hbmQuIFBsZWFzZSB3cmFwIHlvdXIgc3RyaW5nIGluIHRoZSBjc3NcXFxcYFxcXFxgIGhlbHBlciB3aGljaCBlbnN1cmVzIHRoZSBzdHlsZXMgYXJlIGluamVjdGVkIGNvcnJlY3RseS4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FwaSNjc3NcXG5cXG5cIiwxMzpcIiVzIGlzIG5vdCBhIHN0eWxlZCBjb21wb25lbnQgYW5kIGNhbm5vdCBiZSByZWZlcnJlZCB0byB2aWEgY29tcG9uZW50IHNlbGVjdG9yLiBTZWUgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYWR2YW5jZWQjcmVmZXJyaW5nLXRvLW90aGVyLWNvbXBvbmVudHMgZm9yIG1vcmUgZGV0YWlscy5cXG5cXG5cIiwxNDonVGhlbWVQcm92aWRlcjogXCJ0aGVtZVwiIHByb3AgaXMgcmVxdWlyZWQuXFxuXFxuJywxNTpcIkEgc3R5bGlzIHBsdWdpbiBoYXMgYmVlbiBzdXBwbGllZCB0aGF0IGlzIG5vdCBuYW1lZC4gV2UgbmVlZCBhIG5hbWUgZm9yIGVhY2ggcGx1Z2luIHRvIGJlIGFibGUgdG8gcHJldmVudCBzdHlsaW5nIGNvbGxpc2lvbnMgYmV0d2VlbiBkaWZmZXJlbnQgc3R5bGlzIGNvbmZpZ3VyYXRpb25zIHdpdGhpbiB0aGUgc2FtZSBhcHAuIEJlZm9yZSB5b3UgcGFzcyB5b3VyIHBsdWdpbiB0byBgPFN0eWxlU2hlZXRNYW5hZ2VyIHN0eWxpc1BsdWdpbnM9e1tdfT5gLCBwbGVhc2UgbWFrZSBzdXJlIGVhY2ggcGx1Z2luIGlzIHVuaXF1ZWx5LW5hbWVkLCBlLmcuXFxuXFxuYGBganNcXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoaW1wb3J0ZWRQbHVnaW4sICduYW1lJywgeyB2YWx1ZTogJ3NvbWUtdW5pcXVlLW5hbWUnIH0pO1xcbmBgYFxcblxcblwiLDE2OlwiUmVhY2hlZCB0aGUgbGltaXQgb2YgaG93IG1hbnkgc3R5bGVkIGNvbXBvbmVudHMgbWF5IGJlIGNyZWF0ZWQgYXQgZ3JvdXAgJXMuXFxuWW91IG1heSBvbmx5IGNyZWF0ZSB1cCB0byAxLDA3Myw3NDEsODI0IGNvbXBvbmVudHMuIElmIHlvdSdyZSBjcmVhdGluZyBjb21wb25lbnRzIGR5bmFtaWNhbGx5LFxcbmFzIGZvciBpbnN0YW5jZSBpbiB5b3VyIHJlbmRlciBtZXRob2QgdGhlbiB5b3UgbWF5IGJlIHJ1bm5pbmcgaW50byB0aGlzIGxpbWl0YXRpb24uXFxuXFxuXCIsMTc6XCJDU1NTdHlsZVNoZWV0IGNvdWxkIG5vdCBiZSBmb3VuZCBvbiBIVE1MU3R5bGVFbGVtZW50LlxcbkhhcyBzdHlsZWQtY29tcG9uZW50cycgc3R5bGUgdGFnIGJlZW4gdW5tb3VudGVkIG9yIGFsdGVyZWQgYnkgYW5vdGhlciBzY3JpcHQ/XFxuXCJ9Ont9O2Z1bmN0aW9uIEQoKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aDw9MD92b2lkIDA6YXJndW1lbnRzWzBdLHQ9W10sbj0xLHI9YXJndW1lbnRzLmxlbmd0aDtuPHI7bis9MSl0LnB1c2gobjwwfHxhcmd1bWVudHMubGVuZ3RoPD1uP3ZvaWQgMDphcmd1bWVudHNbbl0pO3JldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2U9ZS5yZXBsYWNlKC8lW2Etel0vLHQpfSkpLGV9ZnVuY3Rpb24gaihlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07dGhyb3dcInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WP25ldyBFcnJvcihcIkFuIGVycm9yIG9jY3VycmVkLiBTZWUgaHR0cHM6Ly9naXQuaW8vSlVJYUUjXCIrZStcIiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cIisobi5sZW5ndGg+MD9cIiBBcmdzOiBcIituLmpvaW4oXCIsIFwiKTpcIlwiKSk6bmV3IEVycm9yKEQuYXBwbHkodm9pZCAwLFtSW2VdXS5jb25jYXQobikpLnRyaW0oKSl9dmFyIFQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMuZ3JvdXBTaXplcz1uZXcgVWludDMyQXJyYXkoNTEyKSx0aGlzLmxlbmd0aD01MTIsdGhpcy50YWc9ZX12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5pbmRleE9mR3JvdXA9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAsbj0wO248ZTtuKyspdCs9dGhpcy5ncm91cFNpemVzW25dO3JldHVybiB0fSx0Lmluc2VydFJ1bGVzPWZ1bmN0aW9uKGUsdCl7aWYoZT49dGhpcy5ncm91cFNpemVzLmxlbmd0aCl7Zm9yKHZhciBuPXRoaXMuZ3JvdXBTaXplcyxyPW4ubGVuZ3RoLG89cjtlPj1vOykobzw8PTEpPDAmJmooMTYsXCJcIitlKTt0aGlzLmdyb3VwU2l6ZXM9bmV3IFVpbnQzMkFycmF5KG8pLHRoaXMuZ3JvdXBTaXplcy5zZXQobiksdGhpcy5sZW5ndGg9bztmb3IodmFyIHM9cjtzPG87cysrKXRoaXMuZ3JvdXBTaXplc1tzXT0wfWZvcih2YXIgaT10aGlzLmluZGV4T2ZHcm91cChlKzEpLGE9MCxjPXQubGVuZ3RoO2E8YzthKyspdGhpcy50YWcuaW5zZXJ0UnVsZShpLHRbYV0pJiYodGhpcy5ncm91cFNpemVzW2VdKyssaSsrKX0sdC5jbGVhckdyb3VwPWZ1bmN0aW9uKGUpe2lmKGU8dGhpcy5sZW5ndGgpe3ZhciB0PXRoaXMuZ3JvdXBTaXplc1tlXSxuPXRoaXMuaW5kZXhPZkdyb3VwKGUpLHI9bit0O3RoaXMuZ3JvdXBTaXplc1tlXT0wO2Zvcih2YXIgbz1uO288cjtvKyspdGhpcy50YWcuZGVsZXRlUnVsZShuKX19LHQuZ2V0R3JvdXA9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjtpZihlPj10aGlzLmxlbmd0aHx8MD09PXRoaXMuZ3JvdXBTaXplc1tlXSlyZXR1cm4gdDtmb3IodmFyIG49dGhpcy5ncm91cFNpemVzW2VdLHI9dGhpcy5pbmRleE9mR3JvdXAoZSksbz1yK24scz1yO3M8bztzKyspdCs9dGhpcy50YWcuZ2V0UnVsZShzKStcIi8qIXNjKi9cXG5cIjtyZXR1cm4gdH0sZX0oKSx4PW5ldyBNYXAsaz1uZXcgTWFwLFY9MSxCPWZ1bmN0aW9uKGUpe2lmKHguaGFzKGUpKXJldHVybiB4LmdldChlKTtmb3IoO2suaGFzKFYpOylWKys7dmFyIHQ9VisrO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJigoMHx0KTwwfHx0PjE8PDMwKSYmaigxNixcIlwiK3QpLHguc2V0KGUsdCksay5zZXQodCxlKSx0fSx6PWZ1bmN0aW9uKGUpe3JldHVybiBrLmdldChlKX0sTT1mdW5jdGlvbihlLHQpe3Q+PVYmJihWPXQrMSkseC5zZXQoZSx0KSxrLnNldCh0LGUpfSxHPVwic3R5bGVbXCIrQSsnXVtkYXRhLXN0eWxlZC12ZXJzaW9uPVwiNS4zLjhcIl0nLEw9bmV3IFJlZ0V4cChcIl5cIitBKydcXFxcLmcoXFxcXGQrKVxcXFxbaWQ9XCIoW1xcXFx3XFxcXGQtXSspXCJcXFxcXS4qP1wiKFteXCJdKiknKSxGPWZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHIsbz1uLnNwbGl0KFwiLFwiKSxzPTAsaT1vLmxlbmd0aDtzPGk7cysrKShyPW9bc10pJiZlLnJlZ2lzdGVyTmFtZSh0LHIpfSxZPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPSh0LnRleHRDb250ZW50fHxcIlwiKS5zcGxpdChcIi8qIXNjKi9cXG5cIikscj1bXSxvPTAscz1uLmxlbmd0aDtvPHM7bysrKXt2YXIgaT1uW29dLnRyaW0oKTtpZihpKXt2YXIgYT1pLm1hdGNoKEwpO2lmKGEpe3ZhciBjPTB8cGFyc2VJbnQoYVsxXSwxMCksdT1hWzJdOzAhPT1jJiYoTSh1LGMpLEYoZSx1LGFbM10pLGUuZ2V0VGFnKCkuaW5zZXJ0UnVsZXMoYyxyKSksci5sZW5ndGg9MH1lbHNlIHIucHVzaChpKX19fSxxPWZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIF9fd2VicGFja19ub25jZV9fP19fd2VicGFja19ub25jZV9fOm51bGx9LEg9ZnVuY3Rpb24oZSl7dmFyIHQ9ZG9jdW1lbnQuaGVhZCxuPWV8fHQscj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIiksbz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5jaGlsZE5vZGVzLG49dC5sZW5ndGg7bj49MDtuLS0pe3ZhciByPXRbbl07aWYociYmMT09PXIubm9kZVR5cGUmJnIuaGFzQXR0cmlidXRlKEEpKXJldHVybiByfX0obikscz12b2lkIDAhPT1vP28ubmV4dFNpYmxpbmc6bnVsbDtyLnNldEF0dHJpYnV0ZShBLFwiYWN0aXZlXCIpLHIuc2V0QXR0cmlidXRlKFwiZGF0YS1zdHlsZWQtdmVyc2lvblwiLFwiNS4zLjhcIik7dmFyIGk9cSgpO3JldHVybiBpJiZyLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsaSksbi5pbnNlcnRCZWZvcmUocixzKSxyfSwkPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgdD10aGlzLmVsZW1lbnQ9SChlKTt0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpKSx0aGlzLnNoZWV0PWZ1bmN0aW9uKGUpe2lmKGUuc2hlZXQpcmV0dXJuIGUuc2hlZXQ7Zm9yKHZhciB0PWRvY3VtZW50LnN0eWxlU2hlZXRzLG49MCxyPXQubGVuZ3RoO248cjtuKyspe3ZhciBvPXRbbl07aWYoby5vd25lck5vZGU9PT1lKXJldHVybiBvfWooMTcpfSh0KSx0aGlzLmxlbmd0aD0wfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0Lmluc2VydFJ1bGU9ZnVuY3Rpb24oZSx0KXt0cnl7cmV0dXJuIHRoaXMuc2hlZXQuaW5zZXJ0UnVsZSh0LGUpLHRoaXMubGVuZ3RoKyssITB9Y2F0Y2goZSl7cmV0dXJuITF9fSx0LmRlbGV0ZVJ1bGU9ZnVuY3Rpb24oZSl7dGhpcy5zaGVldC5kZWxldGVSdWxlKGUpLHRoaXMubGVuZ3RoLS19LHQuZ2V0UnVsZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLnNoZWV0LmNzc1J1bGVzW2VdO3JldHVybiB2b2lkIDAhPT10JiZcInN0cmluZ1wiPT10eXBlb2YgdC5jc3NUZXh0P3QuY3NzVGV4dDpcIlwifSxlfSgpLFc9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3ZhciB0PXRoaXMuZWxlbWVudD1IKGUpO3RoaXMubm9kZXM9dC5jaGlsZE5vZGVzLHRoaXMubGVuZ3RoPTB9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaW5zZXJ0UnVsZT1mdW5jdGlvbihlLHQpe2lmKGU8PXRoaXMubGVuZ3RoJiZlPj0wKXt2YXIgbj1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0KSxyPXRoaXMubm9kZXNbZV07cmV0dXJuIHRoaXMuZWxlbWVudC5pbnNlcnRCZWZvcmUobixyfHxudWxsKSx0aGlzLmxlbmd0aCsrLCEwfXJldHVybiExfSx0LmRlbGV0ZVJ1bGU9ZnVuY3Rpb24oZSl7dGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMubm9kZXNbZV0pLHRoaXMubGVuZ3RoLS19LHQuZ2V0UnVsZT1mdW5jdGlvbihlKXtyZXR1cm4gZTx0aGlzLmxlbmd0aD90aGlzLm5vZGVzW2VdLnRleHRDb250ZW50OlwiXCJ9LGV9KCksVT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5ydWxlcz1bXSx0aGlzLmxlbmd0aD0wfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0Lmluc2VydFJ1bGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZTw9dGhpcy5sZW5ndGgmJih0aGlzLnJ1bGVzLnNwbGljZShlLDAsdCksdGhpcy5sZW5ndGgrKywhMCl9LHQuZGVsZXRlUnVsZT1mdW5jdGlvbihlKXt0aGlzLnJ1bGVzLnNwbGljZShlLDEpLHRoaXMubGVuZ3RoLS19LHQuZ2V0UnVsZT1mdW5jdGlvbihlKXtyZXR1cm4gZTx0aGlzLmxlbmd0aD90aGlzLnJ1bGVzW2VdOlwiXCJ9LGV9KCksSj1JLFg9e2lzU2VydmVyOiFJLHVzZUNTU09NSW5qZWN0aW9uOiFQfSxaPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQsbil7dm9pZCAwPT09ZSYmKGU9RSksdm9pZCAwPT09dCYmKHQ9e30pLHRoaXMub3B0aW9ucz12KHt9LFgse30sZSksdGhpcy5ncz10LHRoaXMubmFtZXM9bmV3IE1hcChuKSx0aGlzLnNlcnZlcj0hIWUuaXNTZXJ2ZXIsIXRoaXMuc2VydmVyJiZJJiZKJiYoSj0hMSxmdW5jdGlvbihlKXtmb3IodmFyIHQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChHKSxuPTAscj10Lmxlbmd0aDtuPHI7bisrKXt2YXIgbz10W25dO28mJlwiYWN0aXZlXCIhPT1vLmdldEF0dHJpYnV0ZShBKSYmKFkoZSxvKSxvLnBhcmVudE5vZGUmJm8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKSl9fSh0aGlzKSl9ZS5yZWdpc3RlcklkPWZ1bmN0aW9uKGUpe3JldHVybiBCKGUpfTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5yZWNvbnN0cnVjdFdpdGhPcHRpb25zPWZ1bmN0aW9uKHQsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPSEwKSxuZXcgZSh2KHt9LHRoaXMub3B0aW9ucyx7fSx0KSx0aGlzLmdzLG4mJnRoaXMubmFtZXN8fHZvaWQgMCl9LHQuYWxsb2NhdGVHU0luc3RhbmNlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmdzW2VdPSh0aGlzLmdzW2VdfHwwKSsxfSx0LmdldFRhZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRhZ3x8KHRoaXMudGFnPShuPSh0PXRoaXMub3B0aW9ucykuaXNTZXJ2ZXIscj10LnVzZUNTU09NSW5qZWN0aW9uLG89dC50YXJnZXQsZT1uP25ldyBVKG8pOnI/bmV3ICQobyk6bmV3IFcobyksbmV3IFQoZSkpKTt2YXIgZSx0LG4scixvfSx0Lmhhc05hbWVGb3JJZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm5hbWVzLmhhcyhlKSYmdGhpcy5uYW1lcy5nZXQoZSkuaGFzKHQpfSx0LnJlZ2lzdGVyTmFtZT1mdW5jdGlvbihlLHQpe2lmKEIoZSksdGhpcy5uYW1lcy5oYXMoZSkpdGhpcy5uYW1lcy5nZXQoZSkuYWRkKHQpO2Vsc2V7dmFyIG49bmV3IFNldDtuLmFkZCh0KSx0aGlzLm5hbWVzLnNldChlLG4pfX0sdC5pbnNlcnRSdWxlcz1mdW5jdGlvbihlLHQsbil7dGhpcy5yZWdpc3Rlck5hbWUoZSx0KSx0aGlzLmdldFRhZygpLmluc2VydFJ1bGVzKEIoZSksbil9LHQuY2xlYXJOYW1lcz1mdW5jdGlvbihlKXt0aGlzLm5hbWVzLmhhcyhlKSYmdGhpcy5uYW1lcy5nZXQoZSkuY2xlYXIoKX0sdC5jbGVhclJ1bGVzPWZ1bmN0aW9uKGUpe3RoaXMuZ2V0VGFnKCkuY2xlYXJHcm91cChCKGUpKSx0aGlzLmNsZWFyTmFtZXMoZSl9LHQuY2xlYXJUYWc9ZnVuY3Rpb24oKXt0aGlzLnRhZz12b2lkIDB9LHQudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuZ2V0VGFnKCksbj10Lmxlbmd0aCxyPVwiXCIsbz0wO288bjtvKyspe3ZhciBzPXoobyk7aWYodm9pZCAwIT09cyl7dmFyIGk9ZS5uYW1lcy5nZXQocyksYT10LmdldEdyb3VwKG8pO2lmKGkmJmEmJmkuc2l6ZSl7dmFyIGM9QStcIi5nXCIrbysnW2lkPVwiJytzKydcIl0nLHU9XCJcIjt2b2lkIDAhPT1pJiZpLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UubGVuZ3RoPjAmJih1Kz1lK1wiLFwiKX0pKSxyKz1cIlwiK2ErYysne2NvbnRlbnQ6XCInK3UrJ1wifS8qIXNjKi9cXG4nfX19cmV0dXJuIHJ9KHRoaXMpfSxlfSgpLEs9LyhhKShkKS9naSxRPWZ1bmN0aW9uKGUpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGUrKGU+MjU/Mzk6OTcpKX07ZnVuY3Rpb24gZWUoZSl7dmFyIHQsbj1cIlwiO2Zvcih0PU1hdGguYWJzKGUpO3Q+NTI7dD10LzUyfDApbj1RKHQlNTIpK247cmV0dXJuKFEodCU1MikrbikucmVwbGFjZShLLFwiJDEtJDJcIil9dmFyIHRlPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPXQubGVuZ3RoO247KWU9MzMqZV50LmNoYXJDb2RlQXQoLS1uKTtyZXR1cm4gZX0sbmU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRlKDUzODEsZSl9O2Z1bmN0aW9uIHJlKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCs9MSl7dmFyIG49ZVt0XTtpZihiKG4pJiYhTihuKSlyZXR1cm4hMX1yZXR1cm4hMH12YXIgb2U9bmUoXCI1LjMuOFwiKSxzZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0LG4pe3RoaXMucnVsZXM9ZSx0aGlzLnN0YXRpY1J1bGVzSWQ9XCJcIix0aGlzLmlzU3RhdGljPVwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJih2b2lkIDA9PT1ufHxuLmlzU3RhdGljKSYmcmUoZSksdGhpcy5jb21wb25lbnRJZD10LHRoaXMuYmFzZUhhc2g9dGUob2UsdCksdGhpcy5iYXNlU3R5bGU9bixaLnJlZ2lzdGVySWQodCl9cmV0dXJuIGUucHJvdG90eXBlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzLmNvbXBvbmVudElkLG89W107aWYodGhpcy5iYXNlU3R5bGUmJm8ucHVzaCh0aGlzLmJhc2VTdHlsZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhlLHQsbikpLHRoaXMuaXNTdGF0aWMmJiFuLmhhc2gpaWYodGhpcy5zdGF0aWNSdWxlc0lkJiZ0Lmhhc05hbWVGb3JJZChyLHRoaXMuc3RhdGljUnVsZXNJZCkpby5wdXNoKHRoaXMuc3RhdGljUnVsZXNJZCk7ZWxzZXt2YXIgcz1OZSh0aGlzLnJ1bGVzLGUsdCxuKS5qb2luKFwiXCIpLGk9ZWUodGUodGhpcy5iYXNlSGFzaCxzKT4+PjApO2lmKCF0Lmhhc05hbWVGb3JJZChyLGkpKXt2YXIgYT1uKHMsXCIuXCIraSx2b2lkIDAscik7dC5pbnNlcnRSdWxlcyhyLGksYSl9by5wdXNoKGkpLHRoaXMuc3RhdGljUnVsZXNJZD1pfWVsc2V7Zm9yKHZhciBjPXRoaXMucnVsZXMubGVuZ3RoLHU9dGUodGhpcy5iYXNlSGFzaCxuLmhhc2gpLGw9XCJcIixkPTA7ZDxjO2QrKyl7dmFyIGg9dGhpcy5ydWxlc1tkXTtpZihcInN0cmluZ1wiPT10eXBlb2YgaClsKz1oLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJih1PXRlKHUsaCtkKSk7ZWxzZSBpZihoKXt2YXIgcD1OZShoLGUsdCxuKSxmPUFycmF5LmlzQXJyYXkocCk/cC5qb2luKFwiXCIpOnA7dT10ZSh1LGYrZCksbCs9Zn19aWYobCl7dmFyIG09ZWUodT4+PjApO2lmKCF0Lmhhc05hbWVGb3JJZChyLG0pKXt2YXIgeT1uKGwsXCIuXCIrbSx2b2lkIDAscik7dC5pbnNlcnRSdWxlcyhyLG0seSl9by5wdXNoKG0pfX1yZXR1cm4gby5qb2luKFwiIFwiKX0sZX0oKSxpZT0vXlxccypcXC9cXC8uKiQvZ20sYWU9W1wiOlwiLFwiW1wiLFwiLlwiLFwiI1wiXTtmdW5jdGlvbiBjZShlKXt2YXIgdCxuLHIsbyxzPXZvaWQgMD09PWU/RTplLGk9cy5vcHRpb25zLGE9dm9pZCAwPT09aT9FOmksYz1zLnBsdWdpbnMsdT12b2lkIDA9PT1jP3c6YyxsPW5ldyBwKGEpLGQ9W10saD1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe2lmKHQpdHJ5e2UodCtcIn1cIil9Y2F0Y2goZSl7fX1yZXR1cm4gZnVuY3Rpb24obixyLG8scyxpLGEsYyx1LGwsZCl7c3dpdGNoKG4pe2Nhc2UgMTppZigwPT09bCYmNjQ9PT1yLmNoYXJDb2RlQXQoMCkpcmV0dXJuIGUocitcIjtcIiksXCJcIjticmVhaztjYXNlIDI6aWYoMD09PXUpcmV0dXJuIHIrXCIvKnwqL1wiO2JyZWFrO2Nhc2UgMzpzd2l0Y2godSl7Y2FzZSAxMDI6Y2FzZSAxMTI6cmV0dXJuIGUob1swXStyKSxcIlwiO2RlZmF1bHQ6cmV0dXJuIHIrKDA9PT1kP1wiLyp8Ki9cIjpcIlwiKX1jYXNlLTI6ci5zcGxpdChcIi8qfCovfVwiKS5mb3JFYWNoKHQpfX19KChmdW5jdGlvbihlKXtkLnB1c2goZSl9KSksZj1mdW5jdGlvbihlLHIscyl7cmV0dXJuIDA9PT1yJiYtMSE9PWFlLmluZGV4T2Yoc1tuLmxlbmd0aF0pfHxzLm1hdGNoKG8pP2U6XCIuXCIrdH07ZnVuY3Rpb24gbShlLHMsaSxhKXt2b2lkIDA9PT1hJiYoYT1cIiZcIik7dmFyIGM9ZS5yZXBsYWNlKGllLFwiXCIpLHU9cyYmaT9pK1wiIFwiK3MrXCIgeyBcIitjK1wiIH1cIjpjO3JldHVybiB0PWEsbj1zLHI9bmV3IFJlZ0V4cChcIlxcXFxcIituK1wiXFxcXGJcIixcImdcIiksbz1uZXcgUmVnRXhwKFwiKFxcXFxcIituK1wiXFxcXGIpezIsfVwiKSxsKGl8fCFzP1wiXCI6cyx1KX1yZXR1cm4gbC51c2UoW10uY29uY2F0KHUsW2Z1bmN0aW9uKGUsdCxvKXsyPT09ZSYmby5sZW5ndGgmJm9bMF0ubGFzdEluZGV4T2Yobik+MCYmKG9bMF09b1swXS5yZXBsYWNlKHIsZikpfSxoLGZ1bmN0aW9uKGUpe2lmKC0yPT09ZSl7dmFyIHQ9ZDtyZXR1cm4gZD1bXSx0fX1dKSksbS5oYXNoPXUubGVuZ3RoP3UucmVkdWNlKChmdW5jdGlvbihlLHQpe3JldHVybiB0Lm5hbWV8fGooMTUpLHRlKGUsdC5uYW1lKX0pLDUzODEpLnRvU3RyaW5nKCk6XCJcIixtfXZhciB1ZT1yLmNyZWF0ZUNvbnRleHQoKSxsZT11ZS5Db25zdW1lcixkZT1yLmNyZWF0ZUNvbnRleHQoKSxoZT0oZGUuQ29uc3VtZXIsbmV3IFopLHBlPWNlKCk7ZnVuY3Rpb24gZmUoKXtyZXR1cm4gcyh1ZSl8fGhlfWZ1bmN0aW9uIG1lKCl7cmV0dXJuIHMoZGUpfHxwZX1mdW5jdGlvbiB5ZShlKXt2YXIgdD1vKGUuc3R5bGlzUGx1Z2lucyksbj10WzBdLHM9dFsxXSxjPWZlKCksdT1pKChmdW5jdGlvbigpe3ZhciB0PWM7cmV0dXJuIGUuc2hlZXQ/dD1lLnNoZWV0OmUudGFyZ2V0JiYodD10LnJlY29uc3RydWN0V2l0aE9wdGlvbnMoe3RhcmdldDplLnRhcmdldH0sITEpKSxlLmRpc2FibGVDU1NPTUluamVjdGlvbiYmKHQ9dC5yZWNvbnN0cnVjdFdpdGhPcHRpb25zKHt1c2VDU1NPTUluamVjdGlvbjohMX0pKSx0fSksW2UuZGlzYWJsZUNTU09NSW5qZWN0aW9uLGUuc2hlZXQsZS50YXJnZXRdKSxsPWkoKGZ1bmN0aW9uKCl7cmV0dXJuIGNlKHtvcHRpb25zOntwcmVmaXg6IWUuZGlzYWJsZVZlbmRvclByZWZpeGVzfSxwbHVnaW5zOm59KX0pLFtlLmRpc2FibGVWZW5kb3JQcmVmaXhlcyxuXSk7cmV0dXJuIGEoKGZ1bmN0aW9uKCl7aChuLGUuc3R5bGlzUGx1Z2lucyl8fHMoZS5zdHlsaXNQbHVnaW5zKX0pLFtlLnN0eWxpc1BsdWdpbnNdKSxyLmNyZWF0ZUVsZW1lbnQodWUuUHJvdmlkZXIse3ZhbHVlOnV9LHIuY3JlYXRlRWxlbWVudChkZS5Qcm92aWRlcix7dmFsdWU6bH0sXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9yLkNoaWxkcmVuLm9ubHkoZS5jaGlsZHJlbik6ZS5jaGlsZHJlbikpfXZhciB2ZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbj10aGlzO3RoaXMuaW5qZWN0PWZ1bmN0aW9uKGUsdCl7dm9pZCAwPT09dCYmKHQ9cGUpO3ZhciByPW4ubmFtZSt0Lmhhc2g7ZS5oYXNOYW1lRm9ySWQobi5pZCxyKXx8ZS5pbnNlcnRSdWxlcyhuLmlkLHIsdChuLnJ1bGVzLHIsXCJAa2V5ZnJhbWVzXCIpKX0sdGhpcy50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBqKDEyLFN0cmluZyhuLm5hbWUpKX0sdGhpcy5uYW1lPWUsdGhpcy5pZD1cInNjLWtleWZyYW1lcy1cIitlLHRoaXMucnVsZXM9dH1yZXR1cm4gZS5wcm90b3R5cGUuZ2V0TmFtZT1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9cGUpLHRoaXMubmFtZStlLmhhc2h9LGV9KCksZ2U9LyhbQS1aXSkvLFNlPS8oW0EtWl0pL2csd2U9L15tcy0vLEVlPWZ1bmN0aW9uKGUpe3JldHVyblwiLVwiK2UudG9Mb3dlckNhc2UoKX07ZnVuY3Rpb24gYmUoZSl7cmV0dXJuIGdlLnRlc3QoZSk/ZS5yZXBsYWNlKFNlLEVlKS5yZXBsYWNlKHdlLFwiLW1zLVwiKTplfXZhciBfZT1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZXx8ITE9PT1lfHxcIlwiPT09ZX07ZnVuY3Rpb24gTmUoZSxuLHIsbyl7aWYoQXJyYXkuaXNBcnJheShlKSl7Zm9yKHZhciBzLGk9W10sYT0wLGM9ZS5sZW5ndGg7YTxjO2ErPTEpXCJcIiE9PShzPU5lKGVbYV0sbixyLG8pKSYmKEFycmF5LmlzQXJyYXkocyk/aS5wdXNoLmFwcGx5KGkscyk6aS5wdXNoKHMpKTtyZXR1cm4gaX1pZihfZShlKSlyZXR1cm5cIlwiO2lmKE4oZSkpcmV0dXJuXCIuXCIrZS5zdHlsZWRDb21wb25lbnRJZDtpZihiKGUpKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZihsPWUpfHxsLnByb3RvdHlwZSYmbC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudHx8IW4pcmV0dXJuIGU7dmFyIHU9ZShuKTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ0KHUpJiZjb25zb2xlLndhcm4oXyhlKStcIiBpcyBub3QgYSBzdHlsZWQgY29tcG9uZW50IGFuZCBjYW5ub3QgYmUgcmVmZXJyZWQgdG8gdmlhIGNvbXBvbmVudCBzZWxlY3Rvci4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FkdmFuY2VkI3JlZmVycmluZy10by1vdGhlci1jb21wb25lbnRzIGZvciBtb3JlIGRldGFpbHMuXCIpLE5lKHUsbixyLG8pfXZhciBsO3JldHVybiBlIGluc3RhbmNlb2YgdmU/cj8oZS5pbmplY3QocixvKSxlLmdldE5hbWUobykpOmU6UyhlKT9mdW5jdGlvbiBlKHQsbil7dmFyIHIsbyxzPVtdO2Zvcih2YXIgaSBpbiB0KXQuaGFzT3duUHJvcGVydHkoaSkmJiFfZSh0W2ldKSYmKEFycmF5LmlzQXJyYXkodFtpXSkmJnRbaV0uaXNDc3N8fGIodFtpXSk/cy5wdXNoKGJlKGkpK1wiOlwiLHRbaV0sXCI7XCIpOlModFtpXSk/cy5wdXNoLmFwcGx5KHMsZSh0W2ldLGkpKTpzLnB1c2goYmUoaSkrXCI6IFwiKyhyPWksbnVsbD09KG89dFtpXSl8fFwiYm9vbGVhblwiPT10eXBlb2Ygb3x8XCJcIj09PW8/XCJcIjpcIm51bWJlclwiIT10eXBlb2Ygb3x8MD09PW98fHIgaW4gZj9TdHJpbmcobykudHJpbSgpOm8rXCJweFwiKStcIjtcIikpO3JldHVybiBuP1tuK1wiIHtcIl0uY29uY2F0KHMsW1wifVwiXSk6c30oZSk6ZS50b1N0cmluZygpfXZhciBBZT1mdW5jdGlvbihlKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKSYmKGUuaXNDc3M9ITApLGV9O2Z1bmN0aW9uIENlKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCkscj0xO3I8dDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTtyZXR1cm4gYihlKXx8UyhlKT9BZShOZShnKHcsW2VdLmNvbmNhdChuKSkpKTowPT09bi5sZW5ndGgmJjE9PT1lLmxlbmd0aCYmXCJzdHJpbmdcIj09dHlwZW9mIGVbMF0/ZTpBZShOZShnKGUsbikpKX12YXIgSWU9L2ludmFsaWQgaG9vayBjYWxsL2ksUGU9bmV3IFNldCxPZT1mdW5jdGlvbihlLHQpe2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpe3ZhciBuPVwiVGhlIGNvbXBvbmVudCBcIitlKyh0Pycgd2l0aCB0aGUgaWQgb2YgXCInK3QrJ1wiJzpcIlwiKStcIiBoYXMgYmVlbiBjcmVhdGVkIGR5bmFtaWNhbGx5LlxcbllvdSBtYXkgc2VlIHRoaXMgd2FybmluZyBiZWNhdXNlIHlvdSd2ZSBjYWxsZWQgc3R5bGVkIGluc2lkZSBhbm90aGVyIGNvbXBvbmVudC5cXG5UbyByZXNvbHZlIHRoaXMgb25seSBjcmVhdGUgbmV3IFN0eWxlZENvbXBvbmVudHMgb3V0c2lkZSBvZiBhbnkgcmVuZGVyIG1ldGhvZCBhbmQgZnVuY3Rpb24gY29tcG9uZW50LlwiLHI9Y29uc29sZS5lcnJvcjt0cnl7dmFyIG89ITA7Y29uc29sZS5lcnJvcj1mdW5jdGlvbihlKXtpZihJZS50ZXN0KGUpKW89ITEsUGUuZGVsZXRlKG4pO2Vsc2V7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgscz1uZXcgQXJyYXkodD4xP3QtMTowKSxpPTE7aTx0O2krKylzW2ktMV09YXJndW1lbnRzW2ldO3IuYXBwbHkodm9pZCAwLFtlXS5jb25jYXQocykpfX0sYygpLG8mJiFQZS5oYXMobikmJihjb25zb2xlLndhcm4obiksUGUuYWRkKG4pKX1jYXRjaChlKXtJZS50ZXN0KGUubWVzc2FnZSkmJlBlLmRlbGV0ZShuKX1maW5hbGx5e2NvbnNvbGUuZXJyb3I9cn19fSxSZT1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPUUpLGUudGhlbWUhPT1uLnRoZW1lJiZlLnRoZW1lfHx0fHxuLnRoZW1lfSxEZT0vWyFcIiMkJSYnKCkqKywuLzo7PD0+P0BbXFxcXFxcXV5ge3x9fi1dKy9nLGplPS8oXi18LSQpL2c7ZnVuY3Rpb24gVGUoZSl7cmV0dXJuIGUucmVwbGFjZShEZSxcIi1cIikucmVwbGFjZShqZSxcIlwiKX12YXIgeGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGVlKG5lKGUpPj4+MCl9O2Z1bmN0aW9uIGtlKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlJiYoXCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVnx8ZS5jaGFyQXQoMCk9PT1lLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpKX12YXIgVmU9ZnVuY3Rpb24oZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZXx8XCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPT1lJiYhQXJyYXkuaXNBcnJheShlKX0sQmU9ZnVuY3Rpb24oZSl7cmV0dXJuXCJfX3Byb3RvX19cIiE9PWUmJlwiY29uc3RydWN0b3JcIiE9PWUmJlwicHJvdG90eXBlXCIhPT1lfTtmdW5jdGlvbiB6ZShlLHQsbil7dmFyIHI9ZVtuXTtWZSh0KSYmVmUocik/TWUocix0KTplW25dPXR9ZnVuY3Rpb24gTWUoZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO2Zvcih2YXIgbz0wLHM9bjtvPHMubGVuZ3RoO28rKyl7dmFyIGk9c1tvXTtpZihWZShpKSlmb3IodmFyIGEgaW4gaSlCZShhKSYmemUoZSxpW2FdLGEpfXJldHVybiBlfXZhciBHZT1yLmNyZWF0ZUNvbnRleHQoKSxMZT1HZS5Db25zdW1lcjtmdW5jdGlvbiBGZShlKXt2YXIgdD1zKEdlKSxuPWkoKGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoIWUpcmV0dXJuIGooMTQpO2lmKGIoZSkpe3ZhciBuPWUodCk7cmV0dXJuXCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVnx8bnVsbCE9PW4mJiFBcnJheS5pc0FycmF5KG4pJiZcIm9iamVjdFwiPT10eXBlb2Ygbj9uOmooNyl9cmV0dXJuIEFycmF5LmlzQXJyYXkoZSl8fFwib2JqZWN0XCIhPXR5cGVvZiBlP2ooOCk6dD92KHt9LHQse30sZSk6ZX0oZS50aGVtZSx0KX0pLFtlLnRoZW1lLHRdKTtyZXR1cm4gZS5jaGlsZHJlbj9yLmNyZWF0ZUVsZW1lbnQoR2UuUHJvdmlkZXIse3ZhbHVlOm59LGUuY2hpbGRyZW4pOm51bGx9dmFyIFllPXt9O2Z1bmN0aW9uIHFlKGUsdCxuKXt2YXIgbz1OKGUpLGk9IWtlKGUpLGE9dC5hdHRycyxjPXZvaWQgMD09PWE/dzphLGQ9dC5jb21wb25lbnRJZCxoPXZvaWQgMD09PWQ/ZnVuY3Rpb24oZSx0KXt2YXIgbj1cInN0cmluZ1wiIT10eXBlb2YgZT9cInNjXCI6VGUoZSk7WWVbbl09KFllW25dfHwwKSsxO3ZhciByPW4rXCItXCIreGUoXCI1LjMuOFwiK24rWWVbbl0pO3JldHVybiB0P3QrXCItXCIrcjpyfSh0LmRpc3BsYXlOYW1lLHQucGFyZW50Q29tcG9uZW50SWQpOmQscD10LmRpc3BsYXlOYW1lLGY9dm9pZCAwPT09cD9mdW5jdGlvbihlKXtyZXR1cm4ga2UoZSk/XCJzdHlsZWQuXCIrZTpcIlN0eWxlZChcIitfKGUpK1wiKVwifShlKTpwLGc9dC5kaXNwbGF5TmFtZSYmdC5jb21wb25lbnRJZD9UZSh0LmRpc3BsYXlOYW1lKStcIi1cIit0LmNvbXBvbmVudElkOnQuY29tcG9uZW50SWR8fGgsUz1vJiZlLmF0dHJzP0FycmF5LnByb3RvdHlwZS5jb25jYXQoZS5hdHRycyxjKS5maWx0ZXIoQm9vbGVhbik6YyxBPXQuc2hvdWxkRm9yd2FyZFByb3A7byYmZS5zaG91bGRGb3J3YXJkUHJvcCYmKEE9dC5zaG91bGRGb3J3YXJkUHJvcD9mdW5jdGlvbihuLHIsbyl7cmV0dXJuIGUuc2hvdWxkRm9yd2FyZFByb3AobixyLG8pJiZ0LnNob3VsZEZvcndhcmRQcm9wKG4scixvKX06ZS5zaG91bGRGb3J3YXJkUHJvcCk7dmFyIEMsST1uZXcgc2UobixnLG8/ZS5jb21wb25lbnRTdHlsZTp2b2lkIDApLFA9SS5pc1N0YXRpYyYmMD09PWMubGVuZ3RoLE89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZnVuY3Rpb24oZSx0LG4scil7dmFyIG89ZS5hdHRycyxpPWUuY29tcG9uZW50U3R5bGUsYT1lLmRlZmF1bHRQcm9wcyxjPWUuZm9sZGVkQ29tcG9uZW50SWRzLGQ9ZS5zaG91bGRGb3J3YXJkUHJvcCxoPWUuc3R5bGVkQ29tcG9uZW50SWQscD1lLnRhcmdldDtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZsKGgpO3ZhciBmPWZ1bmN0aW9uKGUsdCxuKXt2b2lkIDA9PT1lJiYoZT1FKTt2YXIgcj12KHt9LHQse3RoZW1lOmV9KSxvPXt9O3JldHVybiBuLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciB0LG4scyxpPWU7Zm9yKHQgaW4gYihpKSYmKGk9aShyKSksaSlyW3RdPW9bdF09XCJjbGFzc05hbWVcIj09PXQ/KG49b1t0XSxzPWlbdF0sbiYmcz9uK1wiIFwiK3M6bnx8cyk6aVt0XX0pKSxbcixvXX0oUmUodCxzKEdlKSxhKXx8RSx0LG8pLHk9ZlswXSxnPWZbMV0sUz1mdW5jdGlvbihlLHQsbixyKXt2YXIgbz1mZSgpLHM9bWUoKSxpPXQ/ZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhFLG8scyk6ZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhuLG8scyk7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmbChpKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYhdCYmciYmcihpKSxpfShpLHIseSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2Uud2FyblRvb01hbnlDbGFzc2VzOnZvaWQgMCksdz1uLF89Zy4kYXN8fHQuJGFzfHxnLmFzfHx0LmFzfHxwLE49a2UoXyksQT1nIT09dD92KHt9LHQse30sZyk6dCxDPXt9O2Zvcih2YXIgSSBpbiBBKVwiJFwiIT09SVswXSYmXCJhc1wiIT09SSYmKFwiZm9yd2FyZGVkQXNcIj09PUk/Qy5hcz1BW0ldOihkP2QoSSxtLF8pOiFOfHxtKEkpKSYmKENbSV09QVtJXSkpO3JldHVybiB0LnN0eWxlJiZnLnN0eWxlIT09dC5zdHlsZSYmKEMuc3R5bGU9dih7fSx0LnN0eWxlLHt9LGcuc3R5bGUpKSxDLmNsYXNzTmFtZT1BcnJheS5wcm90b3R5cGUuY29uY2F0KGMsaCxTIT09aD9TOm51bGwsdC5jbGFzc05hbWUsZy5jbGFzc05hbWUpLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKSxDLnJlZj13LHUoXyxDKX0oQyxlLHQsUCl9O3JldHVybiBPLmRpc3BsYXlOYW1lPWYsKEM9ci5mb3J3YXJkUmVmKE8pKS5hdHRycz1TLEMuY29tcG9uZW50U3R5bGU9SSxDLmRpc3BsYXlOYW1lPWYsQy5zaG91bGRGb3J3YXJkUHJvcD1BLEMuZm9sZGVkQ29tcG9uZW50SWRzPW8/QXJyYXkucHJvdG90eXBlLmNvbmNhdChlLmZvbGRlZENvbXBvbmVudElkcyxlLnN0eWxlZENvbXBvbmVudElkKTp3LEMuc3R5bGVkQ29tcG9uZW50SWQ9ZyxDLnRhcmdldD1vP2UudGFyZ2V0OmUsQy53aXRoQ29tcG9uZW50PWZ1bmN0aW9uKGUpe3ZhciByPXQuY29tcG9uZW50SWQsbz1mdW5jdGlvbihlLHQpe2lmKG51bGw9PWUpcmV0dXJue307dmFyIG4scixvPXt9LHM9T2JqZWN0LmtleXMoZSk7Zm9yKHI9MDtyPHMubGVuZ3RoO3IrKyluPXNbcl0sdC5pbmRleE9mKG4pPj0wfHwob1tuXT1lW25dKTtyZXR1cm4gb30odCxbXCJjb21wb25lbnRJZFwiXSkscz1yJiZyK1wiLVwiKyhrZShlKT9lOlRlKF8oZSkpKTtyZXR1cm4gcWUoZSx2KHt9LG8se2F0dHJzOlMsY29tcG9uZW50SWQ6c30pLG4pfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQyxcImRlZmF1bHRQcm9wc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZm9sZGVkRGVmYXVsdFByb3BzfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fZm9sZGVkRGVmYXVsdFByb3BzPW8/TWUoe30sZS5kZWZhdWx0UHJvcHMsdCk6dH19KSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoT2UoZixnKSxDLndhcm5Ub29NYW55Q2xhc3Nlcz1mdW5jdGlvbihlLHQpe3ZhciBuPXt9LHI9ITE7cmV0dXJuIGZ1bmN0aW9uKG8pe2lmKCFyJiYobltvXT0hMCxPYmplY3Qua2V5cyhuKS5sZW5ndGg+PTIwMCkpe3ZhciBzPXQ/JyB3aXRoIHRoZSBpZCBvZiBcIicrdCsnXCInOlwiXCI7Y29uc29sZS53YXJuKFwiT3ZlciAyMDAgY2xhc3NlcyB3ZXJlIGdlbmVyYXRlZCBmb3IgY29tcG9uZW50IFwiK2UrcytcIi5cXG5Db25zaWRlciB1c2luZyB0aGUgYXR0cnMgbWV0aG9kLCB0b2dldGhlciB3aXRoIGEgc3R5bGUgb2JqZWN0IGZvciBmcmVxdWVudGx5IGNoYW5nZWQgc3R5bGVzLlxcbkV4YW1wbGU6XFxuICBjb25zdCBDb21wb25lbnQgPSBzdHlsZWQuZGl2LmF0dHJzKHByb3BzID0+ICh7XFxuICAgIHN0eWxlOiB7XFxuICAgICAgYmFja2dyb3VuZDogcHJvcHMuYmFja2dyb3VuZCxcXG4gICAgfSxcXG4gIH0pKWB3aWR0aDogMTAwJTtgXFxuXFxuICA8Q29tcG9uZW50IC8+XCIpLHI9ITAsbj17fX19fShmLGcpKSxDLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCIuXCIrQy5zdHlsZWRDb21wb25lbnRJZH0saSYmeShDLGUse2F0dHJzOiEwLGNvbXBvbmVudFN0eWxlOiEwLGRpc3BsYXlOYW1lOiEwLGZvbGRlZENvbXBvbmVudElkczohMCxzaG91bGRGb3J3YXJkUHJvcDohMCxzdHlsZWRDb21wb25lbnRJZDohMCx0YXJnZXQ6ITAsd2l0aENvbXBvbmVudDohMH0pLEN9dmFyIEhlPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbiBlKHQscixvKXtpZih2b2lkIDA9PT1vJiYobz1FKSwhbihyKSlyZXR1cm4gaigxLFN0cmluZyhyKSk7dmFyIHM9ZnVuY3Rpb24oKXtyZXR1cm4gdChyLG8sQ2UuYXBwbHkodm9pZCAwLGFyZ3VtZW50cykpfTtyZXR1cm4gcy53aXRoQ29uZmlnPWZ1bmN0aW9uKG4pe3JldHVybiBlKHQscix2KHt9LG8se30sbikpfSxzLmF0dHJzPWZ1bmN0aW9uKG4pe3JldHVybiBlKHQscix2KHt9LG8se2F0dHJzOkFycmF5LnByb3RvdHlwZS5jb25jYXQoby5hdHRycyxuKS5maWx0ZXIoQm9vbGVhbil9KSl9LHN9KHFlLGUpfTtbXCJhXCIsXCJhYmJyXCIsXCJhZGRyZXNzXCIsXCJhcmVhXCIsXCJhcnRpY2xlXCIsXCJhc2lkZVwiLFwiYXVkaW9cIixcImJcIixcImJhc2VcIixcImJkaVwiLFwiYmRvXCIsXCJiaWdcIixcImJsb2NrcXVvdGVcIixcImJvZHlcIixcImJyXCIsXCJidXR0b25cIixcImNhbnZhc1wiLFwiY2FwdGlvblwiLFwiY2l0ZVwiLFwiY29kZVwiLFwiY29sXCIsXCJjb2xncm91cFwiLFwiZGF0YVwiLFwiZGF0YWxpc3RcIixcImRkXCIsXCJkZWxcIixcImRldGFpbHNcIixcImRmblwiLFwiZGlhbG9nXCIsXCJkaXZcIixcImRsXCIsXCJkdFwiLFwiZW1cIixcImVtYmVkXCIsXCJmaWVsZHNldFwiLFwiZmlnY2FwdGlvblwiLFwiZmlndXJlXCIsXCJmb290ZXJcIixcImZvcm1cIixcImgxXCIsXCJoMlwiLFwiaDNcIixcImg0XCIsXCJoNVwiLFwiaDZcIixcImhlYWRcIixcImhlYWRlclwiLFwiaGdyb3VwXCIsXCJoclwiLFwiaHRtbFwiLFwiaVwiLFwiaWZyYW1lXCIsXCJpbWdcIixcImlucHV0XCIsXCJpbnNcIixcImtiZFwiLFwia2V5Z2VuXCIsXCJsYWJlbFwiLFwibGVnZW5kXCIsXCJsaVwiLFwibGlua1wiLFwibWFpblwiLFwibWFwXCIsXCJtYXJrXCIsXCJtYXJxdWVlXCIsXCJtZW51XCIsXCJtZW51aXRlbVwiLFwibWV0YVwiLFwibWV0ZXJcIixcIm5hdlwiLFwibm9zY3JpcHRcIixcIm9iamVjdFwiLFwib2xcIixcIm9wdGdyb3VwXCIsXCJvcHRpb25cIixcIm91dHB1dFwiLFwicFwiLFwicGFyYW1cIixcInBpY3R1cmVcIixcInByZVwiLFwicHJvZ3Jlc3NcIixcInFcIixcInJwXCIsXCJydFwiLFwicnVieVwiLFwic1wiLFwic2FtcFwiLFwic2NyaXB0XCIsXCJzZWN0aW9uXCIsXCJzZWxlY3RcIixcInNtYWxsXCIsXCJzb3VyY2VcIixcInNwYW5cIixcInN0cm9uZ1wiLFwic3R5bGVcIixcInN1YlwiLFwic3VtbWFyeVwiLFwic3VwXCIsXCJ0YWJsZVwiLFwidGJvZHlcIixcInRkXCIsXCJ0ZXh0YXJlYVwiLFwidGZvb3RcIixcInRoXCIsXCJ0aGVhZFwiLFwidGltZVwiLFwidGl0bGVcIixcInRyXCIsXCJ0cmFja1wiLFwidVwiLFwidWxcIixcInZhclwiLFwidmlkZW9cIixcIndiclwiLFwiY2lyY2xlXCIsXCJjbGlwUGF0aFwiLFwiZGVmc1wiLFwiZWxsaXBzZVwiLFwiZm9yZWlnbk9iamVjdFwiLFwiZ1wiLFwiaW1hZ2VcIixcImxpbmVcIixcImxpbmVhckdyYWRpZW50XCIsXCJtYXJrZXJcIixcIm1hc2tcIixcInBhdGhcIixcInBhdHRlcm5cIixcInBvbHlnb25cIixcInBvbHlsaW5lXCIsXCJyYWRpYWxHcmFkaWVudFwiLFwicmVjdFwiLFwic3RvcFwiLFwic3ZnXCIsXCJ0ZXh0XCIsXCJ0ZXh0UGF0aFwiLFwidHNwYW5cIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7SGVbZV09SGUoZSl9KSk7dmFyICRlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe3RoaXMucnVsZXM9ZSx0aGlzLmNvbXBvbmVudElkPXQsdGhpcy5pc1N0YXRpYz1yZShlKSxaLnJlZ2lzdGVySWQodGhpcy5jb21wb25lbnRJZCsxKX12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5jcmVhdGVTdHlsZXM9ZnVuY3Rpb24oZSx0LG4scil7dmFyIG89cihOZSh0aGlzLnJ1bGVzLHQsbixyKS5qb2luKFwiXCIpLFwiXCIpLHM9dGhpcy5jb21wb25lbnRJZCtlO24uaW5zZXJ0UnVsZXMocyxzLG8pfSx0LnJlbW92ZVN0eWxlcz1mdW5jdGlvbihlLHQpe3QuY2xlYXJSdWxlcyh0aGlzLmNvbXBvbmVudElkK2UpfSx0LnJlbmRlclN0eWxlcz1mdW5jdGlvbihlLHQsbixyKXtlPjImJloucmVnaXN0ZXJJZCh0aGlzLmNvbXBvbmVudElkK2UpLHRoaXMucmVtb3ZlU3R5bGVzKGUsbiksdGhpcy5jcmVhdGVTdHlsZXMoZSx0LG4scil9LGV9KCk7ZnVuY3Rpb24gV2UoZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxvPTE7bzx0O28rKyluW28tMV09YXJndW1lbnRzW29dO3ZhciBpPUNlLmFwcGx5KHZvaWQgMCxbZV0uY29uY2F0KG4pKSxhPVwic2MtZ2xvYmFsLVwiK3hlKEpTT04uc3RyaW5naWZ5KGkpKSx1PW5ldyAkZShpLGEpO2Z1bmN0aW9uIGwoZSl7dmFyIHQ9ZmUoKSxuPW1lKCksbz1zKEdlKSxsPWModC5hbGxvY2F0ZUdTSW5zdGFuY2UoYSkpLmN1cnJlbnQ7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmci5DaGlsZHJlbi5jb3VudChlLmNoaWxkcmVuKSYmY29uc29sZS53YXJuKFwiVGhlIGdsb2JhbCBzdHlsZSBjb21wb25lbnQgXCIrYStcIiB3YXMgZ2l2ZW4gY2hpbGQgSlNYLiBjcmVhdGVHbG9iYWxTdHlsZSBkb2VzIG5vdCByZW5kZXIgY2hpbGRyZW4uXCIpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmkuc29tZSgoZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJi0xIT09ZS5pbmRleE9mKFwiQGltcG9ydFwiKX0pKSYmY29uc29sZS53YXJuKFwiUGxlYXNlIGRvIG5vdCB1c2UgQGltcG9ydCBDU1Mgc3ludGF4IGluIGNyZWF0ZUdsb2JhbFN0eWxlIGF0IHRoaXMgdGltZSwgYXMgdGhlIENTU09NIEFQSXMgd2UgdXNlIGluIHByb2R1Y3Rpb24gZG8gbm90IGhhbmRsZSBpdCB3ZWxsLiBJbnN0ZWFkLCB3ZSByZWNvbW1lbmQgdXNpbmcgYSBsaWJyYXJ5IHN1Y2ggYXMgcmVhY3QtaGVsbWV0IHRvIGluamVjdCBhIHR5cGljYWwgPGxpbms+IG1ldGEgdGFnIHRvIHRoZSBzdHlsZXNoZWV0LCBvciBzaW1wbHkgZW1iZWRkaW5nIGl0IG1hbnVhbGx5IGluIHlvdXIgaW5kZXguaHRtbCA8aGVhZD4gc2VjdGlvbiBmb3IgYSBzaW1wbGVyIGFwcC5cIiksdC5zZXJ2ZXImJmgobCxlLHQsbyxuKSxkKChmdW5jdGlvbigpe2lmKCF0LnNlcnZlcilyZXR1cm4gaChsLGUsdCxvLG4pLGZ1bmN0aW9uKCl7cmV0dXJuIHUucmVtb3ZlU3R5bGVzKGwsdCl9fSksW2wsZSx0LG8sbl0pLG51bGx9ZnVuY3Rpb24gaChlLHQsbixyLG8pe2lmKHUuaXNTdGF0aWMpdS5yZW5kZXJTdHlsZXMoZSxPLG4sbyk7ZWxzZXt2YXIgcz12KHt9LHQse3RoZW1lOlJlKHQscixsLmRlZmF1bHRQcm9wcyl9KTt1LnJlbmRlclN0eWxlcyhlLHMsbixvKX19cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmT2UoYSksci5tZW1vKGwpfWZ1bmN0aW9uIFVlKGUpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3ImJlwiUmVhY3ROYXRpdmVcIj09PW5hdmlnYXRvci5wcm9kdWN0JiZjb25zb2xlLndhcm4oXCJga2V5ZnJhbWVzYCBjYW5ub3QgYmUgdXNlZCBvbiBSZWFjdE5hdGl2ZSwgb25seSBvbiB0aGUgd2ViLiBUbyBkbyBhbmltYXRpb24gaW4gUmVhY3ROYXRpdmUgcGxlYXNlIHVzZSBBbmltYXRlZC5cIik7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO3ZhciBvPUNlLmFwcGx5KHZvaWQgMCxbZV0uY29uY2F0KG4pKS5qb2luKFwiXCIpLHM9eGUobyk7cmV0dXJuIG5ldyB2ZShzLG8pfXZhciBKZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt2YXIgZT10aGlzO3RoaXMuX2VtaXRTaGVldENTUz1mdW5jdGlvbigpe3ZhciB0PWUuaW5zdGFuY2UudG9TdHJpbmcoKTtpZighdClyZXR1cm5cIlwiO3ZhciBuPXEoKTtyZXR1cm5cIjxzdHlsZSBcIitbbiYmJ25vbmNlPVwiJytuKydcIicsQSsnPVwidHJ1ZVwiJywnZGF0YS1zdHlsZWQtdmVyc2lvbj1cIjUuMy44XCInXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIikrXCI+XCIrdCtcIjwvc3R5bGU+XCJ9LHRoaXMuZ2V0U3R5bGVUYWdzPWZ1bmN0aW9uKCl7cmV0dXJuIGUuc2VhbGVkP2ooMik6ZS5fZW1pdFNoZWV0Q1NTKCl9LHRoaXMuZ2V0U3R5bGVFbGVtZW50PWZ1bmN0aW9uKCl7dmFyIHQ7aWYoZS5zZWFsZWQpcmV0dXJuIGooMik7dmFyIG49KCh0PXt9KVtBXT1cIlwiLHRbXCJkYXRhLXN0eWxlZC12ZXJzaW9uXCJdPVwiNS4zLjhcIix0LmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXtfX2h0bWw6ZS5pbnN0YW5jZS50b1N0cmluZygpfSx0KSxvPXEoKTtyZXR1cm4gbyYmKG4ubm9uY2U9byksW3IuY3JlYXRlRWxlbWVudChcInN0eWxlXCIsdih7fSxuLHtrZXk6XCJzYy0wLTBcIn0pKV19LHRoaXMuc2VhbD1mdW5jdGlvbigpe2Uuc2VhbGVkPSEwfSx0aGlzLmluc3RhbmNlPW5ldyBaKHtpc1NlcnZlcjohMH0pLHRoaXMuc2VhbGVkPSExfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNvbGxlY3RTdHlsZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuc2VhbGVkP2ooMik6ci5jcmVhdGVFbGVtZW50KHllLHtzaGVldDp0aGlzLmluc3RhbmNlfSxlKX0sdC5pbnRlcmxlYXZlV2l0aE5vZGVTdHJlYW09ZnVuY3Rpb24oZSl7cmV0dXJuIGooMyl9LGV9KCksWGU9ZnVuY3Rpb24oZSl7dmFyIHQ9ci5mb3J3YXJkUmVmKChmdW5jdGlvbih0LG4pe3ZhciBvPXMoR2UpLGk9ZS5kZWZhdWx0UHJvcHMsYT1SZSh0LG8saSk7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmdm9pZCAwPT09YSYmY29uc29sZS53YXJuKCdbd2l0aFRoZW1lXSBZb3UgYXJlIG5vdCB1c2luZyBhIFRoZW1lUHJvdmlkZXIgbm9yIHBhc3NpbmcgYSB0aGVtZSBwcm9wIG9yIGEgdGhlbWUgaW4gZGVmYXVsdFByb3BzIGluIGNvbXBvbmVudCBjbGFzcyBcIicrXyhlKSsnXCInKSxyLmNyZWF0ZUVsZW1lbnQoZSx2KHt9LHQse3RoZW1lOmEscmVmOm59KSl9KSk7cmV0dXJuIHkodCxlKSx0LmRpc3BsYXlOYW1lPVwiV2l0aFRoZW1lKFwiK18oZSkrXCIpXCIsdH0sWmU9ZnVuY3Rpb24oKXtyZXR1cm4gcyhHZSl9LEtlPXtTdHlsZVNoZWV0OlosbWFzdGVyU2hlZXQ6aGV9O1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3ImJlwiUmVhY3ROYXRpdmVcIj09PW5hdmlnYXRvci5wcm9kdWN0JiZjb25zb2xlLndhcm4oXCJJdCBsb29rcyBsaWtlIHlvdSd2ZSBpbXBvcnRlZCAnc3R5bGVkLWNvbXBvbmVudHMnIG9uIFJlYWN0IE5hdGl2ZS5cXG5QZXJoYXBzIHlvdSdyZSBsb29raW5nIHRvIGltcG9ydCAnc3R5bGVkLWNvbXBvbmVudHMvbmF0aXZlJz9cXG5SZWFkIG1vcmUgYWJvdXQgdGhpcyBhdCBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9iYXNpY3MjcmVhY3QtbmF0aXZlXCIpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwidGVzdFwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJih3aW5kb3dbXCJfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfX1wiXT13aW5kb3dbXCJfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfX1wiXXx8MCwxPT09d2luZG93W1wiX19zdHlsZWQtY29tcG9uZW50cy1pbml0X19cIl0mJmNvbnNvbGUud2FybihcIkl0IGxvb2tzIGxpa2UgdGhlcmUgYXJlIHNldmVyYWwgaW5zdGFuY2VzIG9mICdzdHlsZWQtY29tcG9uZW50cycgaW5pdGlhbGl6ZWQgaW4gdGhpcyBhcHBsaWNhdGlvbi4gVGhpcyBtYXkgY2F1c2UgZHluYW1pYyBzdHlsZXMgdG8gbm90IHJlbmRlciBwcm9wZXJseSwgZXJyb3JzIGR1cmluZyB0aGUgcmVoeWRyYXRpb24gcHJvY2VzcywgYSBtaXNzaW5nIHRoZW1lIHByb3AsIGFuZCBtYWtlcyB5b3VyIGFwcGxpY2F0aW9uIGJpZ2dlciB3aXRob3V0IGdvb2QgcmVhc29uLlxcblxcblNlZSBodHRwczovL3MtYy5zaC8yQkFYemVkIGZvciBtb3JlIGluZm8uXCIpLHdpbmRvd1tcIl9fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fXCJdKz0xKTtleHBvcnQgZGVmYXVsdCBIZTtleHBvcnR7SmUgYXMgU2VydmVyU3R5bGVTaGVldCxsZSBhcyBTdHlsZVNoZWV0Q29uc3VtZXIsdWUgYXMgU3R5bGVTaGVldENvbnRleHQseWUgYXMgU3R5bGVTaGVldE1hbmFnZXIsTGUgYXMgVGhlbWVDb25zdW1lcixHZSBhcyBUaGVtZUNvbnRleHQsRmUgYXMgVGhlbWVQcm92aWRlcixLZSBhcyBfX1BSSVZBVEVfXyxXZSBhcyBjcmVhdGVHbG9iYWxTdHlsZSxDZSBhcyBjc3MsTiBhcyBpc1N0eWxlZENvbXBvbmVudCxVZSBhcyBrZXlmcmFtZXMsWmUgYXMgdXNlVGhlbWUsQyBhcyB2ZXJzaW9uLFhlIGFzIHdpdGhUaGVtZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHlsZWQtY29tcG9uZW50cy5icm93c2VyLmVzbS5qcy5tYXBcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5cbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAxMDAlO1xuICBtYXgtd2lkdGg6IDE0NDBweDtcbiAgbWFyZ2luOiAwIGF1dG87XG4gIHBhZGRpbmc6ICR7KHByb3BzKSA9PiBwcm9wcy50aGVtZS5pbmRlbnR9O1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDg5Ljk0ZW0pIHtcbiAgICBwYWRkaW5nOiAkeyhwcm9wcykgPT4gcHJvcHMudGhlbWUuaW5kZW50RGVza3RvcH07XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA2My45NGVtKSB7XG4gICAgcGFkZGluZzogJHsocHJvcHMpID0+IHByb3BzLnRoZW1lLmluZGVudFRhYmxldH07XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgcGFkZGluZzogJHsocHJvcHMpID0+IHByb3BzLnRoZW1lLmluZGVudE1vYmlsZX07XG4gIH1cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRhaW5lcjtcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuXG5leHBvcnQgY29uc3QgUGVybWFuZW50TWFya2VyNDAwID0gY3NzYFxuICBmb250LWZhbWlseTogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5mZlBlcm1hbmVudE1hcmtlcn07XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbmA7XG5cbmV4cG9ydCBjb25zdCBJbnRlcjQwMCA9IGNzc2BcbiAgZm9udC1mYW1pbHk6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuZmZJbnRlcn07XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbmA7XG5cbmV4cG9ydCBjb25zdCBJbnRlcjUwMCA9IGNzc2BcbiAgZm9udC1mYW1pbHk6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuZmZJbnRlcn07XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbmA7XG5cbmV4cG9ydCBjb25zdCBJbnRlcjkwMCA9IGNzc2BcbiAgZm9udC1mYW1pbHk6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuZmZJbnRlcn07XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC13ZWlnaHQ6IDkwMDtcbmA7XG5cbmV4cG9ydCBjb25zdCBUaXRsZSA9IGNzc2BcbiAgbWFyZ2luOiAwO1xuXG4gICR7SW50ZXI5MDB9O1xuICBmb250LXNpemU6IDJlbTtcbiAgbGluZS1oZWlnaHQ6IDExNSU7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgY29sb3I6ICNlZTVjMDc7XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNjMuOTRlbSkge1xuICAgIGZvbnQtc2l6ZTogMS41ZW07XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgZm9udC1zaXplOiAxLjFlbTtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IGJ1dHRvblMgPSBjc3NgXG4gIGZvbnQtc2l6ZTogMS41ZW07XG4gIGxpbmUtaGVpZ2h0OiAxNTAlO1xuICBkaXNwbGF5OiBibG9jaztcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDIwcHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgYm9yZGVyOiBub25lO1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG5cbiAgYWxpZ24tc2VsZjogZW5kO1xuXG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG5cbiAgJjpob3ZlciB7XG4gICAgb3BhY2l0eTogMC44O1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogODkuOTRlbSkge1xuICAgIHBhZGRpbmc6IDE1cHg7XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA2My45NGVtKSB7XG4gICAgcGFkZGluZzogMTBweDtcbiAgICBmb250LXNpemU6IDFlbTtcbiAgfVxuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDQ3Ljk0ZW0pIHtcbiAgICBwYWRkaW5nOiA3cHg7XG4gICAgZm9udC1zaXplOiAwLjdlbTtcbiAgfVxuYDtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQgQ29udGFpbmVyICBmcm9tIFwiL3NyYy9jb21wb25lbnRzL3VpL2NvbnRhaW5lclwiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBQZXJtYW5lbnRNYXJrZXI0MDAgfSBmcm9tIFwiL3NyYy9zdHlsZS9taXhpbnNcIjtcblxuZXhwb3J0IGNvbnN0IEhlYWRlclN0eWxlID0gc3R5bGVkLmhlYWRlcmBcbiAgd2lkdGg6IDEwMCU7XG4gIHBvc2l0aW9uOiBzdGlja3k7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgei1pbmRleDogMTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5jb2xvcldoaXRlfTtcbiAgYm94LXNoYWRvdzogMHB4IDZweCAxOHB4IDBweCAjZDVkMWVhO1xuYDtcblxuZXhwb3J0IGNvbnN0IEhlYWRlckNvbnRhaW5lciA9IHN0eWxlZChDb250YWluZXIpYFxuICBwYWRkaW5nLXRvcDogMjBweDtcbiAgcGFkZGluZy1ib3R0b206IDIwcHg7XG5cbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDYzLjk0ZW0pIHtcbiAgICBwYWRkaW5nLXRvcDogMTVweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTVweDtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IExpbmtMb2dvID0gc3R5bGVkKExpbmspYFxuICAke1Blcm1hbmVudE1hcmtlcjQwMH07XG4gIGZvbnQtc2l6ZTogMS41ZW07XG4gIGNvbG9yOiAjODE3YWJmO1xuXG4gICY6aG92ZXIge1xuICAgIG9wYWNpdHk6IDAuNTtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IExpbmtDYXJ0ID0gc3R5bGVkKExpbmspYFxuICBwYWRkaW5nOiAxMHB4O1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG5cbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2MxYmRlMjtcbiAgfVxuYDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBiYXNrZXQgZnJvbSBcIi9zcmMvYXNzZXRzL2Jhc2tldC5zdmdcIjtcbmltcG9ydCAqIGFzIFMgZnJvbSBcIi4vc3R5bGVcIjtcblxuZnVuY3Rpb24gSGVhZGVyKCkge1xuXG4gIHJldHVybiAoXG4gICAgPFMuSGVhZGVyU3R5bGU+XG4gICAgICA8Uy5IZWFkZXJDb250YWluZXI+XG4gICAgICAgIDxTLkxpbmtMb2dvIHRvPXtcIi9cIn0+QmVlcjwvUy5MaW5rTG9nbz5cbiAgICAgICAgPFMuTGlua0NhcnQgdG89e1wiL2Jhc2tldFwifT5cbiAgICAgICAgICA8aW1nIHNyYz17YmFza2V0fSBhbHQ9XCJiYXNrZXRcIiB3aWR0aD17NDB9IGhlaWdodD17NDB9IC8+XG4gICAgICAgIDwvUy5MaW5rQ2FydD5cbiAgICAgIDwvUy5IZWFkZXJDb250YWluZXI+XG4gICAgPC9TLkhlYWRlclN0eWxlPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBIZWFkZXI7XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuaW1wb3J0IENvbnRhaW5lciBmcm9tIFwiL3NyYy9jb21wb25lbnRzL3VpL2NvbnRhaW5lclwiO1xuXG5leHBvcnQgY29uc3QgRm9vdGVyU3R5bGUgPSBzdHlsZWQuZm9vdGVyYFxuICB3aWR0aDogMTAwJTtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzgxN2FiZjtcbmA7XG5cbmV4cG9ydCBjb25zdCBDb250YWluZXJGb290ZXIgPSBzdHlsZWQoQ29udGFpbmVyKWBcbiAgcGFkZGluZy10b3A6IDEwcHg7XG4gIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuXG4gIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmNvbG9yV2hpdGV9O1xuXG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGp1c3RpZnktY29udGVudDogZW5kO1xuYDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIFMgZnJvbSBcIi4vc3R5bGVcIjtcblxuZnVuY3Rpb24gRm9vdGVyKCkge1xuICByZXR1cm4oXG4gICAgPFMuRm9vdGVyU3R5bGU+XG4gICAgICA8Uy5Db250YWluZXJGb290ZXI+XG4gICAgICAgIDxwPkNvcHlyaWdodCBARC5TdG9seWFyb3ZhPC9wPlxuICAgICAgPC9TLkNvbnRhaW5lckZvb3Rlcj5cbiAgICA8L1MuRm9vdGVyU3R5bGU+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvb3RlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBIZWFkZXIgZnJvbSBcIi4uL2hlYWRlclwiO1xuaW1wb3J0IEZvb3RlciBmcm9tIFwiLi4vZm9vdGVyXCI7XG5pbXBvcnQgeyBPdXRsZXQgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5mdW5jdGlvbiBMYXlvdXQoKSB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxIZWFkZXIgLz5cbiAgICAgIDxtYWluPlxuICAgICAgICA8T3V0bGV0IC8+XG4gICAgICA8L21haW4+XG4gICAgICA8Rm9vdGVyIC8+XG4gICAgPC8+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IExheW91dDtcbiIsImZ1bmN0aW9uIG4obil7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsdD1BcnJheShyPjE/ci0xOjApLGU9MTtlPHI7ZSsrKXRbZS0xXT1hcmd1bWVudHNbZV07aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIGk9WVtuXSxvPWk/XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KG51bGwsdCk6aTpcInVua25vd24gZXJyb3IgbnI6IFwiK247dGhyb3cgRXJyb3IoXCJbSW1tZXJdIFwiK28pfXRocm93IEVycm9yKFwiW0ltbWVyXSBtaW5pZmllZCBlcnJvciBucjogXCIrbisodC5sZW5ndGg/XCIgXCIrdC5tYXAoKGZ1bmN0aW9uKG4pe3JldHVyblwiJ1wiK24rXCInXCJ9KSkuam9pbihcIixcIik6XCJcIikrXCIuIEZpbmQgdGhlIGZ1bGwgZXJyb3IgYXQ6IGh0dHBzOi8vYml0Lmx5LzNjWEVLV2ZcIil9ZnVuY3Rpb24gcihuKXtyZXR1cm4hIW4mJiEhbltRXX1mdW5jdGlvbiB0KG4pe3ZhciByO3JldHVybiEhbiYmKGZ1bmN0aW9uKG4pe2lmKCFufHxcIm9iamVjdFwiIT10eXBlb2YgbilyZXR1cm4hMTt2YXIgcj1PYmplY3QuZ2V0UHJvdG90eXBlT2Yobik7aWYobnVsbD09PXIpcmV0dXJuITA7dmFyIHQ9T2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocixcImNvbnN0cnVjdG9yXCIpJiZyLmNvbnN0cnVjdG9yO3JldHVybiB0PT09T2JqZWN0fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiZGdW5jdGlvbi50b1N0cmluZy5jYWxsKHQpPT09Wn0obil8fEFycmF5LmlzQXJyYXkobil8fCEhbltMXXx8ISEobnVsbD09PShyPW4uY29uc3RydWN0b3IpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyW0xdKXx8cyhuKXx8dihuKSl9ZnVuY3Rpb24gZSh0KXtyZXR1cm4gcih0KXx8bigyMyx0KSx0W1FdLnR9ZnVuY3Rpb24gaShuLHIsdCl7dm9pZCAwPT09dCYmKHQ9ITEpLDA9PT1vKG4pPyh0P09iamVjdC5rZXlzOm5uKShuKS5mb3JFYWNoKChmdW5jdGlvbihlKXt0JiZcInN5bWJvbFwiPT10eXBlb2YgZXx8cihlLG5bZV0sbil9KSk6bi5mb3JFYWNoKChmdW5jdGlvbih0LGUpe3JldHVybiByKGUsdCxuKX0pKX1mdW5jdGlvbiBvKG4pe3ZhciByPW5bUV07cmV0dXJuIHI/ci5pPjM/ci5pLTQ6ci5pOkFycmF5LmlzQXJyYXkobik/MTpzKG4pPzI6dihuKT8zOjB9ZnVuY3Rpb24gdShuLHIpe3JldHVybiAyPT09byhuKT9uLmhhcyhyKTpPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixyKX1mdW5jdGlvbiBhKG4scil7cmV0dXJuIDI9PT1vKG4pP24uZ2V0KHIpOm5bcl19ZnVuY3Rpb24gZihuLHIsdCl7dmFyIGU9byhuKTsyPT09ZT9uLnNldChyLHQpOjM9PT1lP24uYWRkKHQpOm5bcl09dH1mdW5jdGlvbiBjKG4scil7cmV0dXJuIG49PT1yPzAhPT1ufHwxL249PTEvcjpuIT1uJiZyIT1yfWZ1bmN0aW9uIHMobil7cmV0dXJuIFgmJm4gaW5zdGFuY2VvZiBNYXB9ZnVuY3Rpb24gdihuKXtyZXR1cm4gcSYmbiBpbnN0YW5jZW9mIFNldH1mdW5jdGlvbiBwKG4pe3JldHVybiBuLm98fG4udH1mdW5jdGlvbiBsKG4pe2lmKEFycmF5LmlzQXJyYXkobikpcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG4pO3ZhciByPXJuKG4pO2RlbGV0ZSByW1FdO2Zvcih2YXIgdD1ubihyKSxlPTA7ZTx0Lmxlbmd0aDtlKyspe3ZhciBpPXRbZV0sbz1yW2ldOyExPT09by53cml0YWJsZSYmKG8ud3JpdGFibGU9ITAsby5jb25maWd1cmFibGU9ITApLChvLmdldHx8by5zZXQpJiYocltpXT17Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLGVudW1lcmFibGU6by5lbnVtZXJhYmxlLHZhbHVlOm5baV19KX1yZXR1cm4gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2Yobikscil9ZnVuY3Rpb24gZChuLGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0hMSkseShuKXx8cihuKXx8IXQobil8fChvKG4pPjEmJihuLnNldD1uLmFkZD1uLmNsZWFyPW4uZGVsZXRlPWgpLE9iamVjdC5mcmVlemUobiksZSYmaShuLChmdW5jdGlvbihuLHIpe3JldHVybiBkKHIsITApfSksITApKSxufWZ1bmN0aW9uIGgoKXtuKDIpfWZ1bmN0aW9uIHkobil7cmV0dXJuIG51bGw9PW58fFwib2JqZWN0XCIhPXR5cGVvZiBufHxPYmplY3QuaXNGcm96ZW4obil9ZnVuY3Rpb24gYihyKXt2YXIgdD10bltyXTtyZXR1cm4gdHx8bigxOCxyKSx0fWZ1bmN0aW9uIG0obixyKXt0bltuXXx8KHRuW25dPXIpfWZ1bmN0aW9uIF8oKXtyZXR1cm5cInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WfHxVfHxuKDApLFV9ZnVuY3Rpb24gaihuLHIpe3ImJihiKFwiUGF0Y2hlc1wiKSxuLnU9W10sbi5zPVtdLG4udj1yKX1mdW5jdGlvbiBnKG4pe08obiksbi5wLmZvckVhY2goUyksbi5wPW51bGx9ZnVuY3Rpb24gTyhuKXtuPT09VSYmKFU9bi5sKX1mdW5jdGlvbiB3KG4pe3JldHVybiBVPXtwOltdLGw6VSxoOm4sbTohMCxfOjB9fWZ1bmN0aW9uIFMobil7dmFyIHI9bltRXTswPT09ci5pfHwxPT09ci5pP3IuaigpOnIuZz0hMH1mdW5jdGlvbiBQKHIsZSl7ZS5fPWUucC5sZW5ndGg7dmFyIGk9ZS5wWzBdLG89dm9pZCAwIT09ciYmciE9PWk7cmV0dXJuIGUuaC5PfHxiKFwiRVM1XCIpLlMoZSxyLG8pLG8/KGlbUV0uUCYmKGcoZSksbig0KSksdChyKSYmKHI9TShlLHIpLGUubHx8eChlLHIpKSxlLnUmJmIoXCJQYXRjaGVzXCIpLk0oaVtRXS50LHIsZS51LGUucykpOnI9TShlLGksW10pLGcoZSksZS51JiZlLnYoZS51LGUucyksciE9PUg/cjp2b2lkIDB9ZnVuY3Rpb24gTShuLHIsdCl7aWYoeShyKSlyZXR1cm4gcjt2YXIgZT1yW1FdO2lmKCFlKXJldHVybiBpKHIsKGZ1bmN0aW9uKGksbyl7cmV0dXJuIEEobixlLHIsaSxvLHQpfSksITApLHI7aWYoZS5BIT09bilyZXR1cm4gcjtpZighZS5QKXJldHVybiB4KG4sZS50LCEwKSxlLnQ7aWYoIWUuSSl7ZS5JPSEwLGUuQS5fLS07dmFyIG89ND09PWUuaXx8NT09PWUuaT9lLm89bChlLmspOmUubyx1PW8sYT0hMTszPT09ZS5pJiYodT1uZXcgU2V0KG8pLG8uY2xlYXIoKSxhPSEwKSxpKHUsKGZ1bmN0aW9uKHIsaSl7cmV0dXJuIEEobixlLG8scixpLHQsYSl9KSkseChuLG8sITEpLHQmJm4udSYmYihcIlBhdGNoZXNcIikuTihlLHQsbi51LG4ucyl9cmV0dXJuIGUub31mdW5jdGlvbiBBKGUsaSxvLGEsYyxzLHYpe2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmM9PT1vJiZuKDUpLHIoYykpe3ZhciBwPU0oZSxjLHMmJmkmJjMhPT1pLmkmJiF1KGkuUixhKT9zLmNvbmNhdChhKTp2b2lkIDApO2lmKGYobyxhLHApLCFyKHApKXJldHVybjtlLm09ITF9ZWxzZSB2JiZvLmFkZChjKTtpZih0KGMpJiYheShjKSl7aWYoIWUuaC5EJiZlLl88MSlyZXR1cm47TShlLGMpLGkmJmkuQS5sfHx4KGUsYyl9fWZ1bmN0aW9uIHgobixyLHQpe3ZvaWQgMD09PXQmJih0PSExKSwhbi5sJiZuLmguRCYmbi5tJiZkKHIsdCl9ZnVuY3Rpb24geihuLHIpe3ZhciB0PW5bUV07cmV0dXJuKHQ/cCh0KTpuKVtyXX1mdW5jdGlvbiBJKG4scil7aWYociBpbiBuKWZvcih2YXIgdD1PYmplY3QuZ2V0UHJvdG90eXBlT2Yobik7dDspe3ZhciBlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtpZihlKXJldHVybiBlO3Q9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfX1mdW5jdGlvbiBrKG4pe24uUHx8KG4uUD0hMCxuLmwmJmsobi5sKSl9ZnVuY3Rpb24gRShuKXtuLm98fChuLm89bChuLnQpKX1mdW5jdGlvbiBOKG4scix0KXt2YXIgZT1zKHIpP2IoXCJNYXBTZXRcIikuRihyLHQpOnYocik/YihcIk1hcFNldFwiKS5UKHIsdCk6bi5PP2Z1bmN0aW9uKG4scil7dmFyIHQ9QXJyYXkuaXNBcnJheShuKSxlPXtpOnQ/MTowLEE6cj9yLkE6XygpLFA6ITEsSTohMSxSOnt9LGw6cix0Om4sazpudWxsLG86bnVsbCxqOm51bGwsQzohMX0saT1lLG89ZW47dCYmKGk9W2VdLG89b24pO3ZhciB1PVByb3h5LnJldm9jYWJsZShpLG8pLGE9dS5yZXZva2UsZj11LnByb3h5O3JldHVybiBlLms9ZixlLmo9YSxmfShyLHQpOmIoXCJFUzVcIikuSihyLHQpO3JldHVybih0P3QuQTpfKCkpLnAucHVzaChlKSxlfWZ1bmN0aW9uIFIoZSl7cmV0dXJuIHIoZSl8fG4oMjIsZSksZnVuY3Rpb24gbihyKXtpZighdChyKSlyZXR1cm4gcjt2YXIgZSx1PXJbUV0sYz1vKHIpO2lmKHUpe2lmKCF1LlAmJih1Lmk8NHx8IWIoXCJFUzVcIikuSyh1KSkpcmV0dXJuIHUudDt1Lkk9ITAsZT1EKHIsYyksdS5JPSExfWVsc2UgZT1EKHIsYyk7cmV0dXJuIGkoZSwoZnVuY3Rpb24ocix0KXt1JiZhKHUudCxyKT09PXR8fGYoZSxyLG4odCkpfSkpLDM9PT1jP25ldyBTZXQoZSk6ZX0oZSl9ZnVuY3Rpb24gRChuLHIpe3N3aXRjaChyKXtjYXNlIDI6cmV0dXJuIG5ldyBNYXAobik7Y2FzZSAzOnJldHVybiBBcnJheS5mcm9tKG4pfXJldHVybiBsKG4pfWZ1bmN0aW9uIEYoKXtmdW5jdGlvbiB0KG4scil7dmFyIHQ9c1tuXTtyZXR1cm4gdD90LmVudW1lcmFibGU9cjpzW25dPXQ9e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOnIsZ2V0OmZ1bmN0aW9uKCl7dmFyIHI9dGhpc1tRXTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKHIpLGVuLmdldChyLG4pfSxzZXQ6ZnVuY3Rpb24ocil7dmFyIHQ9dGhpc1tRXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKHQpLGVuLnNldCh0LG4scil9fSx0fWZ1bmN0aW9uIGUobil7Zm9yKHZhciByPW4ubGVuZ3RoLTE7cj49MDtyLS0pe3ZhciB0PW5bcl1bUV07aWYoIXQuUClzd2l0Y2godC5pKXtjYXNlIDU6YSh0KSYmayh0KTticmVhaztjYXNlIDQ6byh0KSYmayh0KX19fWZ1bmN0aW9uIG8obil7Zm9yKHZhciByPW4udCx0PW4uayxlPW5uKHQpLGk9ZS5sZW5ndGgtMTtpPj0wO2ktLSl7dmFyIG89ZVtpXTtpZihvIT09USl7dmFyIGE9cltvXTtpZih2b2lkIDA9PT1hJiYhdShyLG8pKXJldHVybiEwO3ZhciBmPXRbb10scz1mJiZmW1FdO2lmKHM/cy50IT09YTohYyhmLGEpKXJldHVybiEwfX12YXIgdj0hIXJbUV07cmV0dXJuIGUubGVuZ3RoIT09bm4ocikubGVuZ3RoKyh2PzA6MSl9ZnVuY3Rpb24gYShuKXt2YXIgcj1uLms7aWYoci5sZW5ndGghPT1uLnQubGVuZ3RoKXJldHVybiEwO3ZhciB0PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocixyLmxlbmd0aC0xKTtpZih0JiYhdC5nZXQpcmV0dXJuITA7Zm9yKHZhciBlPTA7ZTxyLmxlbmd0aDtlKyspaWYoIXIuaGFzT3duUHJvcGVydHkoZSkpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gZihyKXtyLmcmJm4oMyxKU09OLnN0cmluZ2lmeShwKHIpKSl9dmFyIHM9e307bShcIkVTNVwiLHtKOmZ1bmN0aW9uKG4scil7dmFyIGU9QXJyYXkuaXNBcnJheShuKSxpPWZ1bmN0aW9uKG4scil7aWYobil7Zm9yKHZhciBlPUFycmF5KHIubGVuZ3RoKSxpPTA7aTxyLmxlbmd0aDtpKyspT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJcIitpLHQoaSwhMCkpO3JldHVybiBlfXZhciBvPXJuKHIpO2RlbGV0ZSBvW1FdO2Zvcih2YXIgdT1ubihvKSxhPTA7YTx1Lmxlbmd0aDthKyspe3ZhciBmPXVbYV07b1tmXT10KGYsbnx8ISFvW2ZdLmVudW1lcmFibGUpfXJldHVybiBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihyKSxvKX0oZSxuKSxvPXtpOmU/NTo0LEE6cj9yLkE6XygpLFA6ITEsSTohMSxSOnt9LGw6cix0Om4sazppLG86bnVsbCxnOiExLEM6ITF9O3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoaSxRLHt2YWx1ZTpvLHdyaXRhYmxlOiEwfSksaX0sUzpmdW5jdGlvbihuLHQsbyl7bz9yKHQpJiZ0W1FdLkE9PT1uJiZlKG4ucCk6KG4udSYmZnVuY3Rpb24gbihyKXtpZihyJiZcIm9iamVjdFwiPT10eXBlb2Ygcil7dmFyIHQ9cltRXTtpZih0KXt2YXIgZT10LnQsbz10LmssZj10LlIsYz10Lmk7aWYoND09PWMpaShvLChmdW5jdGlvbihyKXtyIT09USYmKHZvaWQgMCE9PWVbcl18fHUoZSxyKT9mW3JdfHxuKG9bcl0pOihmW3JdPSEwLGsodCkpKX0pKSxpKGUsKGZ1bmN0aW9uKG4pe3ZvaWQgMCE9PW9bbl18fHUobyxuKXx8KGZbbl09ITEsayh0KSl9KSk7ZWxzZSBpZig1PT09Yyl7aWYoYSh0KSYmKGsodCksZi5sZW5ndGg9ITApLG8ubGVuZ3RoPGUubGVuZ3RoKWZvcih2YXIgcz1vLmxlbmd0aDtzPGUubGVuZ3RoO3MrKylmW3NdPSExO2Vsc2UgZm9yKHZhciB2PWUubGVuZ3RoO3Y8by5sZW5ndGg7disrKWZbdl09ITA7Zm9yKHZhciBwPU1hdGgubWluKG8ubGVuZ3RoLGUubGVuZ3RoKSxsPTA7bDxwO2wrKylvLmhhc093blByb3BlcnR5KGwpfHwoZltsXT0hMCksdm9pZCAwPT09ZltsXSYmbihvW2xdKX19fX0obi5wWzBdKSxlKG4ucCkpfSxLOmZ1bmN0aW9uKG4pe3JldHVybiA0PT09bi5pP28obik6YShuKX19KX1mdW5jdGlvbiBUKCl7ZnVuY3Rpb24gZShuKXtpZighdChuKSlyZXR1cm4gbjtpZihBcnJheS5pc0FycmF5KG4pKXJldHVybiBuLm1hcChlKTtpZihzKG4pKXJldHVybiBuZXcgTWFwKEFycmF5LmZyb20obi5lbnRyaWVzKCkpLm1hcCgoZnVuY3Rpb24obil7cmV0dXJuW25bMF0sZShuWzFdKV19KSkpO2lmKHYobikpcmV0dXJuIG5ldyBTZXQoQXJyYXkuZnJvbShuKS5tYXAoZSkpO3ZhciByPU9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG4pKTtmb3IodmFyIGkgaW4gbilyW2ldPWUobltpXSk7cmV0dXJuIHUobixMKSYmKHJbTF09bltMXSkscn1mdW5jdGlvbiBmKG4pe3JldHVybiByKG4pP2Uobik6bn12YXIgYz1cImFkZFwiO20oXCJQYXRjaGVzXCIseyQ6ZnVuY3Rpb24ocix0KXtyZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0KXtmb3IodmFyIGk9dC5wYXRoLHU9dC5vcCxmPXIscz0wO3M8aS5sZW5ndGgtMTtzKyspe3ZhciB2PW8oZikscD1pW3NdO1wic3RyaW5nXCIhPXR5cGVvZiBwJiZcIm51bWJlclwiIT10eXBlb2YgcCYmKHA9XCJcIitwKSwwIT09diYmMSE9PXZ8fFwiX19wcm90b19fXCIhPT1wJiZcImNvbnN0cnVjdG9yXCIhPT1wfHxuKDI0KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBmJiZcInByb3RvdHlwZVwiPT09cCYmbigyNCksXCJvYmplY3RcIiE9dHlwZW9mKGY9YShmLHApKSYmbigxNSxpLmpvaW4oXCIvXCIpKX12YXIgbD1vKGYpLGQ9ZSh0LnZhbHVlKSxoPWlbaS5sZW5ndGgtMV07c3dpdGNoKHUpe2Nhc2VcInJlcGxhY2VcIjpzd2l0Y2gobCl7Y2FzZSAyOnJldHVybiBmLnNldChoLGQpO2Nhc2UgMzpuKDE2KTtkZWZhdWx0OnJldHVybiBmW2hdPWR9Y2FzZSBjOnN3aXRjaChsKXtjYXNlIDE6cmV0dXJuXCItXCI9PT1oP2YucHVzaChkKTpmLnNwbGljZShoLDAsZCk7Y2FzZSAyOnJldHVybiBmLnNldChoLGQpO2Nhc2UgMzpyZXR1cm4gZi5hZGQoZCk7ZGVmYXVsdDpyZXR1cm4gZltoXT1kfWNhc2VcInJlbW92ZVwiOnN3aXRjaChsKXtjYXNlIDE6cmV0dXJuIGYuc3BsaWNlKGgsMSk7Y2FzZSAyOnJldHVybiBmLmRlbGV0ZShoKTtjYXNlIDM6cmV0dXJuIGYuZGVsZXRlKHQudmFsdWUpO2RlZmF1bHQ6cmV0dXJuIGRlbGV0ZSBmW2hdfWRlZmF1bHQ6bigxNyx1KX19KSkscn0sTjpmdW5jdGlvbihuLHIsdCxlKXtzd2l0Y2gobi5pKXtjYXNlIDA6Y2FzZSA0OmNhc2UgMjpyZXR1cm4gZnVuY3Rpb24obixyLHQsZSl7dmFyIG89bi50LHM9bi5vO2kobi5SLChmdW5jdGlvbihuLGkpe3ZhciB2PWEobyxuKSxwPWEocyxuKSxsPWk/dShvLG4pP1wicmVwbGFjZVwiOmM6XCJyZW1vdmVcIjtpZih2IT09cHx8XCJyZXBsYWNlXCIhPT1sKXt2YXIgZD1yLmNvbmNhdChuKTt0LnB1c2goXCJyZW1vdmVcIj09PWw/e29wOmwscGF0aDpkfTp7b3A6bCxwYXRoOmQsdmFsdWU6cH0pLGUucHVzaChsPT09Yz97b3A6XCJyZW1vdmVcIixwYXRoOmR9OlwicmVtb3ZlXCI9PT1sP3tvcDpjLHBhdGg6ZCx2YWx1ZTpmKHYpfTp7b3A6XCJyZXBsYWNlXCIscGF0aDpkLHZhbHVlOmYodil9KX19KSl9KG4scix0LGUpO2Nhc2UgNTpjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKG4scix0LGUpe3ZhciBpPW4udCxvPW4uUix1PW4ubztpZih1Lmxlbmd0aDxpLmxlbmd0aCl7dmFyIGE9W3UsaV07aT1hWzBdLHU9YVsxXTt2YXIgcz1bZSx0XTt0PXNbMF0sZT1zWzFdfWZvcih2YXIgdj0wO3Y8aS5sZW5ndGg7disrKWlmKG9bdl0mJnVbdl0hPT1pW3ZdKXt2YXIgcD1yLmNvbmNhdChbdl0pO3QucHVzaCh7b3A6XCJyZXBsYWNlXCIscGF0aDpwLHZhbHVlOmYodVt2XSl9KSxlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6cCx2YWx1ZTpmKGlbdl0pfSl9Zm9yKHZhciBsPWkubGVuZ3RoO2w8dS5sZW5ndGg7bCsrKXt2YXIgZD1yLmNvbmNhdChbbF0pO3QucHVzaCh7b3A6YyxwYXRoOmQsdmFsdWU6Zih1W2xdKX0pfWkubGVuZ3RoPHUubGVuZ3RoJiZlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6ci5jb25jYXQoW1wibGVuZ3RoXCJdKSx2YWx1ZTppLmxlbmd0aH0pfShuLHIsdCxlKTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKG4scix0LGUpe3ZhciBpPW4udCxvPW4ubyx1PTA7aS5mb3JFYWNoKChmdW5jdGlvbihuKXtpZighby5oYXMobikpe3ZhciBpPXIuY29uY2F0KFt1XSk7dC5wdXNoKHtvcDpcInJlbW92ZVwiLHBhdGg6aSx2YWx1ZTpufSksZS51bnNoaWZ0KHtvcDpjLHBhdGg6aSx2YWx1ZTpufSl9dSsrfSkpLHU9MCxvLmZvckVhY2goKGZ1bmN0aW9uKG4pe2lmKCFpLmhhcyhuKSl7dmFyIG89ci5jb25jYXQoW3VdKTt0LnB1c2goe29wOmMscGF0aDpvLHZhbHVlOm59KSxlLnVuc2hpZnQoe29wOlwicmVtb3ZlXCIscGF0aDpvLHZhbHVlOm59KX11Kyt9KSl9KG4scix0LGUpfX0sTTpmdW5jdGlvbihuLHIsdCxlKXt0LnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6W10sdmFsdWU6cj09PUg/dm9pZCAwOnJ9KSxlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6W10sdmFsdWU6bn0pfX0pfWZ1bmN0aW9uIEMoKXtmdW5jdGlvbiByKG4scil7ZnVuY3Rpb24gdCgpe3RoaXMuY29uc3RydWN0b3I9bn1hKG4sciksbi5wcm90b3R5cGU9KHQucHJvdG90eXBlPXIucHJvdG90eXBlLG5ldyB0KX1mdW5jdGlvbiBlKG4pe24ub3x8KG4uUj1uZXcgTWFwLG4ubz1uZXcgTWFwKG4udCkpfWZ1bmN0aW9uIG8obil7bi5vfHwobi5vPW5ldyBTZXQsbi50LmZvckVhY2goKGZ1bmN0aW9uKHIpe2lmKHQocikpe3ZhciBlPU4obi5BLmgscixuKTtuLnAuc2V0KHIsZSksbi5vLmFkZChlKX1lbHNlIG4uby5hZGQocil9KSkpfWZ1bmN0aW9uIHUocil7ci5nJiZuKDMsSlNPTi5zdHJpbmdpZnkocChyKSkpfXZhciBhPWZ1bmN0aW9uKG4scil7cmV0dXJuKGE9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKG4scil7bi5fX3Byb3RvX189cn18fGZ1bmN0aW9uKG4scil7Zm9yKHZhciB0IGluIHIpci5oYXNPd25Qcm9wZXJ0eSh0KSYmKG5bdF09clt0XSl9KShuLHIpfSxmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuLHIpe3JldHVybiB0aGlzW1FdPXtpOjIsbDpyLEE6cj9yLkE6XygpLFA6ITEsSTohMSxvOnZvaWQgMCxSOnZvaWQgMCx0Om4sazp0aGlzLEM6ITEsZzohMX0sdGhpc31yKG4sTWFwKTt2YXIgbz1uLnByb3RvdHlwZTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJzaXplXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLnNpemV9fSksby5oYXM9ZnVuY3Rpb24obil7cmV0dXJuIHAodGhpc1tRXSkuaGFzKG4pfSxvLnNldD1mdW5jdGlvbihuLHIpe3ZhciB0PXRoaXNbUV07cmV0dXJuIHUodCkscCh0KS5oYXMobikmJnAodCkuZ2V0KG4pPT09cnx8KGUodCksayh0KSx0LlIuc2V0KG4sITApLHQuby5zZXQobixyKSx0LlIuc2V0KG4sITApKSx0aGlzfSxvLmRlbGV0ZT1mdW5jdGlvbihuKXtpZighdGhpcy5oYXMobikpcmV0dXJuITE7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxlKHIpLGsociksci50LmhhcyhuKT9yLlIuc2V0KG4sITEpOnIuUi5kZWxldGUobiksci5vLmRlbGV0ZShuKSwhMH0sby5jbGVhcj1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07dShuKSxwKG4pLnNpemUmJihlKG4pLGsobiksbi5SPW5ldyBNYXAsaShuLnQsKGZ1bmN0aW9uKHIpe24uUi5zZXQociwhMSl9KSksbi5vLmNsZWFyKCkpfSxvLmZvckVhY2g9ZnVuY3Rpb24obixyKXt2YXIgdD10aGlzO3AodGhpc1tRXSkuZm9yRWFjaCgoZnVuY3Rpb24oZSxpKXtuLmNhbGwocix0LmdldChpKSxpLHQpfSkpfSxvLmdldD1mdW5jdGlvbihuKXt2YXIgcj10aGlzW1FdO3Uocik7dmFyIGk9cChyKS5nZXQobik7aWYoci5JfHwhdChpKSlyZXR1cm4gaTtpZihpIT09ci50LmdldChuKSlyZXR1cm4gaTt2YXIgbz1OKHIuQS5oLGkscik7cmV0dXJuIGUociksci5vLnNldChuLG8pLG99LG8ua2V5cz1mdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLmtleXMoKX0sby52YWx1ZXM9ZnVuY3Rpb24oKXt2YXIgbixyPXRoaXMsdD10aGlzLmtleXMoKTtyZXR1cm4obj17fSlbVl09ZnVuY3Rpb24oKXtyZXR1cm4gci52YWx1ZXMoKX0sbi5uZXh0PWZ1bmN0aW9uKCl7dmFyIG49dC5uZXh0KCk7cmV0dXJuIG4uZG9uZT9uOntkb25lOiExLHZhbHVlOnIuZ2V0KG4udmFsdWUpfX0sbn0sby5lbnRyaWVzPWZ1bmN0aW9uKCl7dmFyIG4scj10aGlzLHQ9dGhpcy5rZXlzKCk7cmV0dXJuKG49e30pW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHIuZW50cmllcygpfSxuLm5leHQ9ZnVuY3Rpb24oKXt2YXIgbj10Lm5leHQoKTtpZihuLmRvbmUpcmV0dXJuIG47dmFyIGU9ci5nZXQobi52YWx1ZSk7cmV0dXJue2RvbmU6ITEsdmFsdWU6W24udmFsdWUsZV19fSxufSxvW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW50cmllcygpfSxufSgpLGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKG4scil7cmV0dXJuIHRoaXNbUV09e2k6MyxsOnIsQTpyP3IuQTpfKCksUDohMSxJOiExLG86dm9pZCAwLHQ6bixrOnRoaXMscDpuZXcgTWFwLGc6ITEsQzohMX0sdGhpc31yKG4sU2V0KTt2YXIgdD1uLnByb3RvdHlwZTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJzaXplXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLnNpemV9fSksdC5oYXM9ZnVuY3Rpb24obil7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxyLm8/ISFyLm8uaGFzKG4pfHwhKCFyLnAuaGFzKG4pfHwhci5vLmhhcyhyLnAuZ2V0KG4pKSk6ci50LmhhcyhuKX0sdC5hZGQ9ZnVuY3Rpb24obil7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSx0aGlzLmhhcyhuKXx8KG8ociksayhyKSxyLm8uYWRkKG4pKSx0aGlzfSx0LmRlbGV0ZT1mdW5jdGlvbihuKXtpZighdGhpcy5oYXMobikpcmV0dXJuITE7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxvKHIpLGsociksci5vLmRlbGV0ZShuKXx8ISFyLnAuaGFzKG4pJiZyLm8uZGVsZXRlKHIucC5nZXQobikpfSx0LmNsZWFyPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTt1KG4pLHAobikuc2l6ZSYmKG8obiksayhuKSxuLm8uY2xlYXIoKSl9LHQudmFsdWVzPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTtyZXR1cm4gdShuKSxvKG4pLG4uby52YWx1ZXMoKX0sdC5lbnRyaWVzPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTtyZXR1cm4gdShuKSxvKG4pLG4uby5lbnRyaWVzKCl9LHQua2V5cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlcygpfSx0W1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWVzKCl9LHQuZm9yRWFjaD1mdW5jdGlvbihuLHIpe2Zvcih2YXIgdD10aGlzLnZhbHVlcygpLGU9dC5uZXh0KCk7IWUuZG9uZTspbi5jYWxsKHIsZS52YWx1ZSxlLnZhbHVlLHRoaXMpLGU9dC5uZXh0KCl9LG59KCk7bShcIk1hcFNldFwiLHtGOmZ1bmN0aW9uKG4scil7cmV0dXJuIG5ldyBmKG4scil9LFQ6ZnVuY3Rpb24obixyKXtyZXR1cm4gbmV3IGMobixyKX19KX1mdW5jdGlvbiBKKCl7RigpLEMoKSxUKCl9ZnVuY3Rpb24gSyhuKXtyZXR1cm4gbn1mdW5jdGlvbiAkKG4pe3JldHVybiBufXZhciBHLFUsVz1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sKFwieFwiKSxYPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBNYXAscT1cInVuZGVmaW5lZFwiIT10eXBlb2YgU2V0LEI9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb3h5JiZ2b2lkIDAhPT1Qcm94eS5yZXZvY2FibGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0LEg9Vz9TeW1ib2wuZm9yKFwiaW1tZXItbm90aGluZ1wiKTooKEc9e30pW1wiaW1tZXItbm90aGluZ1wiXT0hMCxHKSxMPVc/U3ltYm9sLmZvcihcImltbWVyLWRyYWZ0YWJsZVwiKTpcIl9fJGltbWVyX2RyYWZ0YWJsZVwiLFE9Vz9TeW1ib2wuZm9yKFwiaW1tZXItc3RhdGVcIik6XCJfXyRpbW1lcl9zdGF0ZVwiLFY9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yfHxcIkBAaXRlcmF0b3JcIixZPXswOlwiSWxsZWdhbCBzdGF0ZVwiLDE6XCJJbW1lciBkcmFmdHMgY2Fubm90IGhhdmUgY29tcHV0ZWQgcHJvcGVydGllc1wiLDI6XCJUaGlzIG9iamVjdCBoYXMgYmVlbiBmcm96ZW4gYW5kIHNob3VsZCBub3QgYmUgbXV0YXRlZFwiLDM6ZnVuY3Rpb24obil7cmV0dXJuXCJDYW5ub3QgdXNlIGEgcHJveHkgdGhhdCBoYXMgYmVlbiByZXZva2VkLiBEaWQgeW91IHBhc3MgYW4gb2JqZWN0IGZyb20gaW5zaWRlIGFuIGltbWVyIGZ1bmN0aW9uIHRvIGFuIGFzeW5jIHByb2Nlc3M/IFwiK259LDQ6XCJBbiBpbW1lciBwcm9kdWNlciByZXR1cm5lZCBhIG5ldyB2YWx1ZSAqYW5kKiBtb2RpZmllZCBpdHMgZHJhZnQuIEVpdGhlciByZXR1cm4gYSBuZXcgdmFsdWUgKm9yKiBtb2RpZnkgdGhlIGRyYWZ0LlwiLDU6XCJJbW1lciBmb3JiaWRzIGNpcmN1bGFyIHJlZmVyZW5jZXNcIiw2OlwiVGhlIGZpcnN0IG9yIHNlY29uZCBhcmd1bWVudCB0byBgcHJvZHVjZWAgbXVzdCBiZSBhIGZ1bmN0aW9uXCIsNzpcIlRoZSB0aGlyZCBhcmd1bWVudCB0byBgcHJvZHVjZWAgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIHVuZGVmaW5lZFwiLDg6XCJGaXJzdCBhcmd1bWVudCB0byBgY3JlYXRlRHJhZnRgIG11c3QgYmUgYSBwbGFpbiBvYmplY3QsIGFuIGFycmF5LCBvciBhbiBpbW1lcmFibGUgb2JqZWN0XCIsOTpcIkZpcnN0IGFyZ3VtZW50IHRvIGBmaW5pc2hEcmFmdGAgbXVzdCBiZSBhIGRyYWZ0IHJldHVybmVkIGJ5IGBjcmVhdGVEcmFmdGBcIiwxMDpcIlRoZSBnaXZlbiBkcmFmdCBpcyBhbHJlYWR5IGZpbmFsaXplZFwiLDExOlwiT2JqZWN0LmRlZmluZVByb3BlcnR5KCkgY2Fubm90IGJlIHVzZWQgb24gYW4gSW1tZXIgZHJhZnRcIiwxMjpcIk9iamVjdC5zZXRQcm90b3R5cGVPZigpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIsMTM6XCJJbW1lciBvbmx5IHN1cHBvcnRzIGRlbGV0aW5nIGFycmF5IGluZGljZXNcIiwxNDpcIkltbWVyIG9ubHkgc3VwcG9ydHMgc2V0dGluZyBhcnJheSBpbmRpY2VzIGFuZCB0aGUgJ2xlbmd0aCcgcHJvcGVydHlcIiwxNTpmdW5jdGlvbihuKXtyZXR1cm5cIkNhbm5vdCBhcHBseSBwYXRjaCwgcGF0aCBkb2Vzbid0IHJlc29sdmU6IFwiK259LDE2OidTZXRzIGNhbm5vdCBoYXZlIFwicmVwbGFjZVwiIHBhdGNoZXMuJywxNzpmdW5jdGlvbihuKXtyZXR1cm5cIlVuc3VwcG9ydGVkIHBhdGNoIG9wZXJhdGlvbjogXCIrbn0sMTg6ZnVuY3Rpb24obil7cmV0dXJuXCJUaGUgcGx1Z2luIGZvciAnXCIrbitcIicgaGFzIG5vdCBiZWVuIGxvYWRlZCBpbnRvIEltbWVyLiBUbyBlbmFibGUgdGhlIHBsdWdpbiwgaW1wb3J0IGFuZCBjYWxsIGBlbmFibGVcIituK1wiKClgIHdoZW4gaW5pdGlhbGl6aW5nIHlvdXIgYXBwbGljYXRpb24uXCJ9LDIwOlwiQ2Fubm90IHVzZSBwcm94aWVzIGlmIFByb3h5LCBQcm94eS5yZXZvY2FibGUgb3IgUmVmbGVjdCBhcmUgbm90IGF2YWlsYWJsZVwiLDIxOmZ1bmN0aW9uKG4pe3JldHVyblwicHJvZHVjZSBjYW4gb25seSBiZSBjYWxsZWQgb24gdGhpbmdzIHRoYXQgYXJlIGRyYWZ0YWJsZTogcGxhaW4gb2JqZWN0cywgYXJyYXlzLCBNYXAsIFNldCBvciBjbGFzc2VzIHRoYXQgYXJlIG1hcmtlZCB3aXRoICdbaW1tZXJhYmxlXTogdHJ1ZScuIEdvdCAnXCIrbitcIidcIn0sMjI6ZnVuY3Rpb24obil7cmV0dXJuXCInY3VycmVudCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6IFwiK259LDIzOmZ1bmN0aW9uKG4pe3JldHVyblwiJ29yaWdpbmFsJyBleHBlY3RzIGEgZHJhZnQsIGdvdDogXCIrbn0sMjQ6XCJQYXRjaGluZyByZXNlcnZlZCBhdHRyaWJ1dGVzIGxpa2UgX19wcm90b19fLCBwcm90b3R5cGUgYW5kIGNvbnN0cnVjdG9yIGlzIG5vdCBhbGxvd2VkXCJ9LFo9XCJcIitPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLG5uPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0Lm93bktleXM/UmVmbGVjdC5vd25LZXlzOnZvaWQgMCE9PU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM/ZnVuY3Rpb24obil7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG4pLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG4pKX06T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMscm49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnN8fGZ1bmN0aW9uKG4pe3ZhciByPXt9O3JldHVybiBubihuKS5mb3JFYWNoKChmdW5jdGlvbih0KXtyW3RdPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iobix0KX0pKSxyfSx0bj17fSxlbj17Z2V0OmZ1bmN0aW9uKG4scil7aWYocj09PVEpcmV0dXJuIG47dmFyIGU9cChuKTtpZighdShlLHIpKXJldHVybiBmdW5jdGlvbihuLHIsdCl7dmFyIGUsaT1JKHIsdCk7cmV0dXJuIGk/XCJ2YWx1ZVwiaW4gaT9pLnZhbHVlOm51bGw9PT0oZT1pLmdldCl8fHZvaWQgMD09PWU/dm9pZCAwOmUuY2FsbChuLmspOnZvaWQgMH0obixlLHIpO3ZhciBpPWVbcl07cmV0dXJuIG4uSXx8IXQoaSk/aTppPT09eihuLnQscik/KEUobiksbi5vW3JdPU4obi5BLmgsaSxuKSk6aX0saGFzOmZ1bmN0aW9uKG4scil7cmV0dXJuIHIgaW4gcChuKX0sb3duS2V5czpmdW5jdGlvbihuKXtyZXR1cm4gUmVmbGVjdC5vd25LZXlzKHAobikpfSxzZXQ6ZnVuY3Rpb24obixyLHQpe3ZhciBlPUkocChuKSxyKTtpZihudWxsPT1lP3ZvaWQgMDplLnNldClyZXR1cm4gZS5zZXQuY2FsbChuLmssdCksITA7aWYoIW4uUCl7dmFyIGk9eihwKG4pLHIpLG89bnVsbD09aT92b2lkIDA6aVtRXTtpZihvJiZvLnQ9PT10KXJldHVybiBuLm9bcl09dCxuLlJbcl09ITEsITA7aWYoYyh0LGkpJiYodm9pZCAwIT09dHx8dShuLnQscikpKXJldHVybiEwO0UobiksayhuKX1yZXR1cm4gbi5vW3JdPT09dCYmKHZvaWQgMCE9PXR8fHIgaW4gbi5vKXx8TnVtYmVyLmlzTmFOKHQpJiZOdW1iZXIuaXNOYU4obi5vW3JdKXx8KG4ub1tyXT10LG4uUltyXT0hMCksITB9LGRlbGV0ZVByb3BlcnR5OmZ1bmN0aW9uKG4scil7cmV0dXJuIHZvaWQgMCE9PXoobi50LHIpfHxyIGluIG4udD8obi5SW3JdPSExLEUobiksayhuKSk6ZGVsZXRlIG4uUltyXSxuLm8mJmRlbGV0ZSBuLm9bcl0sITB9LGdldE93blByb3BlcnR5RGVzY3JpcHRvcjpmdW5jdGlvbihuLHIpe3ZhciB0PXAobiksZT1SZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LHIpO3JldHVybiBlP3t3cml0YWJsZTohMCxjb25maWd1cmFibGU6MSE9PW4uaXx8XCJsZW5ndGhcIiE9PXIsZW51bWVyYWJsZTplLmVudW1lcmFibGUsdmFsdWU6dFtyXX06ZX0sZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24oKXtuKDExKX0sZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24obil7cmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuLnQpfSxzZXRQcm90b3R5cGVPZjpmdW5jdGlvbigpe24oMTIpfX0sb249e307aShlbiwoZnVuY3Rpb24obixyKXtvbltuXT1mdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbMF09YXJndW1lbnRzWzBdWzBdLHIuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0pKSxvbi5kZWxldGVQcm9wZXJ0eT1mdW5jdGlvbihyLHQpe3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmlzTmFOKHBhcnNlSW50KHQpKSYmbigxMyksb24uc2V0LmNhbGwodGhpcyxyLHQsdm9pZCAwKX0sb24uc2V0PWZ1bmN0aW9uKHIsdCxlKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcImxlbmd0aFwiIT09dCYmaXNOYU4ocGFyc2VJbnQodCkpJiZuKDE0KSxlbi5zZXQuY2FsbCh0aGlzLHJbMF0sdCxlLHJbMF0pfTt2YXIgdW49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHIpe3ZhciBlPXRoaXM7dGhpcy5PPUIsdGhpcy5EPSEwLHRoaXMucHJvZHVjZT1mdW5jdGlvbihyLGksbyl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgciYmXCJmdW5jdGlvblwiIT10eXBlb2YgaSl7dmFyIHU9aTtpPXI7dmFyIGE9ZTtyZXR1cm4gZnVuY3Rpb24obil7dmFyIHI9dGhpczt2b2lkIDA9PT1uJiYobj11KTtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxlPUFycmF5KHQ+MT90LTE6MCksbz0xO288dDtvKyspZVtvLTFdPWFyZ3VtZW50c1tvXTtyZXR1cm4gYS5wcm9kdWNlKG4sKGZ1bmN0aW9uKG4pe3ZhciB0O3JldHVybih0PWkpLmNhbGwuYXBwbHkodCxbcixuXS5jb25jYXQoZSkpfSkpfX12YXIgZjtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBpJiZuKDYpLHZvaWQgMCE9PW8mJlwiZnVuY3Rpb25cIiE9dHlwZW9mIG8mJm4oNyksdChyKSl7dmFyIGM9dyhlKSxzPU4oZSxyLHZvaWQgMCksdj0hMDt0cnl7Zj1pKHMpLHY9ITF9ZmluYWxseXt2P2coYyk6TyhjKX1yZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSYmZiBpbnN0YW5jZW9mIFByb21pc2U/Zi50aGVuKChmdW5jdGlvbihuKXtyZXR1cm4gaihjLG8pLFAobixjKX0pLChmdW5jdGlvbihuKXt0aHJvdyBnKGMpLG59KSk6KGooYyxvKSxQKGYsYykpfWlmKCFyfHxcIm9iamVjdFwiIT10eXBlb2Ygcil7aWYodm9pZCAwPT09KGY9aShyKSkmJihmPXIpLGY9PT1IJiYoZj12b2lkIDApLGUuRCYmZChmLCEwKSxvKXt2YXIgcD1bXSxsPVtdO2IoXCJQYXRjaGVzXCIpLk0ocixmLHAsbCksbyhwLGwpfXJldHVybiBmfW4oMjEscil9LHRoaXMucHJvZHVjZVdpdGhQYXRjaGVzPWZ1bmN0aW9uKG4scil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbilyZXR1cm4gZnVuY3Rpb24ocil7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsaT1BcnJheSh0PjE/dC0xOjApLG89MTtvPHQ7bysrKWlbby0xXT1hcmd1bWVudHNbb107cmV0dXJuIGUucHJvZHVjZVdpdGhQYXRjaGVzKHIsKGZ1bmN0aW9uKHIpe3JldHVybiBuLmFwcGx5KHZvaWQgMCxbcl0uY29uY2F0KGkpKX0pKX07dmFyIHQsaSxvPWUucHJvZHVjZShuLHIsKGZ1bmN0aW9uKG4scil7dD1uLGk9cn0pKTtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSYmbyBpbnN0YW5jZW9mIFByb21pc2U/by50aGVuKChmdW5jdGlvbihuKXtyZXR1cm5bbix0LGldfSkpOltvLHQsaV19LFwiYm9vbGVhblwiPT10eXBlb2YobnVsbD09cj92b2lkIDA6ci51c2VQcm94aWVzKSYmdGhpcy5zZXRVc2VQcm94aWVzKHIudXNlUHJveGllcyksXCJib29sZWFuXCI9PXR5cGVvZihudWxsPT1yP3ZvaWQgMDpyLmF1dG9GcmVlemUpJiZ0aGlzLnNldEF1dG9GcmVlemUoci5hdXRvRnJlZXplKX12YXIgaT1lLnByb3RvdHlwZTtyZXR1cm4gaS5jcmVhdGVEcmFmdD1mdW5jdGlvbihlKXt0KGUpfHxuKDgpLHIoZSkmJihlPVIoZSkpO3ZhciBpPXcodGhpcyksbz1OKHRoaXMsZSx2b2lkIDApO3JldHVybiBvW1FdLkM9ITAsTyhpKSxvfSxpLmZpbmlzaERyYWZ0PWZ1bmN0aW9uKHIsdCl7dmFyIGU9ciYmcltRXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoZSYmZS5DfHxuKDkpLGUuSSYmbigxMCkpO3ZhciBpPWUuQTtyZXR1cm4gaihpLHQpLFAodm9pZCAwLGkpfSxpLnNldEF1dG9GcmVlemU9ZnVuY3Rpb24obil7dGhpcy5EPW59LGkuc2V0VXNlUHJveGllcz1mdW5jdGlvbihyKXtyJiYhQiYmbigyMCksdGhpcy5PPXJ9LGkuYXBwbHlQYXRjaGVzPWZ1bmN0aW9uKG4sdCl7dmFyIGU7Zm9yKGU9dC5sZW5ndGgtMTtlPj0wO2UtLSl7dmFyIGk9dFtlXTtpZigwPT09aS5wYXRoLmxlbmd0aCYmXCJyZXBsYWNlXCI9PT1pLm9wKXtuPWkudmFsdWU7YnJlYWt9fWU+LTEmJih0PXQuc2xpY2UoZSsxKSk7dmFyIG89YihcIlBhdGNoZXNcIikuJDtyZXR1cm4gcihuKT9vKG4sdCk6dGhpcy5wcm9kdWNlKG4sKGZ1bmN0aW9uKG4pe3JldHVybiBvKG4sdCl9KSl9LGV9KCksYW49bmV3IHVuLGZuPWFuLnByb2R1Y2UsY249YW4ucHJvZHVjZVdpdGhQYXRjaGVzLmJpbmQoYW4pLHNuPWFuLnNldEF1dG9GcmVlemUuYmluZChhbiksdm49YW4uc2V0VXNlUHJveGllcy5iaW5kKGFuKSxwbj1hbi5hcHBseVBhdGNoZXMuYmluZChhbiksbG49YW4uY3JlYXRlRHJhZnQuYmluZChhbiksZG49YW4uZmluaXNoRHJhZnQuYmluZChhbik7ZXhwb3J0IGRlZmF1bHQgZm47ZXhwb3J0e3VuIGFzIEltbWVyLHBuIGFzIGFwcGx5UGF0Y2hlcyxLIGFzIGNhc3REcmFmdCwkIGFzIGNhc3RJbW11dGFibGUsbG4gYXMgY3JlYXRlRHJhZnQsUiBhcyBjdXJyZW50LEogYXMgZW5hYmxlQWxsUGx1Z2lucyxGIGFzIGVuYWJsZUVTNSxDIGFzIGVuYWJsZU1hcFNldCxUIGFzIGVuYWJsZVBhdGNoZXMsZG4gYXMgZmluaXNoRHJhZnQsZCBhcyBmcmVlemUsTCBhcyBpbW1lcmFibGUsciBhcyBpc0RyYWZ0LHQgYXMgaXNEcmFmdGFibGUsSCBhcyBub3RoaW5nLGUgYXMgb3JpZ2luYWwsZm4gYXMgcHJvZHVjZSxjbiBhcyBwcm9kdWNlV2l0aFBhdGNoZXMsc24gYXMgc2V0QXV0b0ZyZWV6ZSx2biBhcyBzZXRVc2VQcm94aWVzfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltbWVyLmVzbS5qcy5tYXBcbiIsIi8vIENhY2hlIGltcGxlbWVudGF0aW9uIGJhc2VkIG9uIEVyaWsgUmFzbXVzc2VuJ3MgYGxydS1tZW1vaXplYDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9lcmlrcmFzL2xydS1tZW1vaXplXG52YXIgTk9UX0ZPVU5EID0gJ05PVF9GT1VORCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNpbmdsZXRvbkNhY2hlKGVxdWFscykge1xuICB2YXIgZW50cnk7XG4gIHJldHVybiB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICBpZiAoZW50cnkgJiYgZXF1YWxzKGVudHJ5LmtleSwga2V5KSkge1xuICAgICAgICByZXR1cm4gZW50cnkudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBOT1RfRk9VTkQ7XG4gICAgfSxcbiAgICBwdXQ6IGZ1bmN0aW9uIHB1dChrZXksIHZhbHVlKSB7XG4gICAgICBlbnRyeSA9IHtcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfTtcbiAgICB9LFxuICAgIGdldEVudHJpZXM6IGZ1bmN0aW9uIGdldEVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gZW50cnkgPyBbZW50cnldIDogW107XG4gICAgfSxcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBlbnRyeSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxydUNhY2hlKG1heFNpemUsIGVxdWFscykge1xuICB2YXIgZW50cmllcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgY2FjaGVJbmRleCA9IGVudHJpZXMuZmluZEluZGV4KGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgcmV0dXJuIGVxdWFscyhrZXksIGVudHJ5LmtleSk7XG4gICAgfSk7IC8vIFdlIGZvdW5kIGEgY2FjaGVkIGVudHJ5XG5cbiAgICBpZiAoY2FjaGVJbmRleCA+IC0xKSB7XG4gICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2NhY2hlSW5kZXhdOyAvLyBDYWNoZWQgZW50cnkgbm90IGF0IHRvcCBvZiBjYWNoZSwgbW92ZSBpdCB0byB0aGUgdG9wXG5cbiAgICAgIGlmIChjYWNoZUluZGV4ID4gMCkge1xuICAgICAgICBlbnRyaWVzLnNwbGljZShjYWNoZUluZGV4LCAxKTtcbiAgICAgICAgZW50cmllcy51bnNoaWZ0KGVudHJ5KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVudHJ5LnZhbHVlO1xuICAgIH0gLy8gTm8gZW50cnkgZm91bmQgaW4gY2FjaGUsIHJldHVybiBzZW50aW5lbFxuXG5cbiAgICByZXR1cm4gTk9UX0ZPVU5EO1xuICB9XG5cbiAgZnVuY3Rpb24gcHV0KGtleSwgdmFsdWUpIHtcbiAgICBpZiAoZ2V0KGtleSkgPT09IE5PVF9GT1VORCkge1xuICAgICAgLy8gVE9ETyBJcyB1bnNoaWZ0IHNsb3c/XG4gICAgICBlbnRyaWVzLnVuc2hpZnQoe1xuICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9KTtcblxuICAgICAgaWYgKGVudHJpZXMubGVuZ3RoID4gbWF4U2l6ZSkge1xuICAgICAgICBlbnRyaWVzLnBvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEVudHJpZXMoKSB7XG4gICAgcmV0dXJuIGVudHJpZXM7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICBlbnRyaWVzID0gW107XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldDogZ2V0LFxuICAgIHB1dDogcHV0LFxuICAgIGdldEVudHJpZXM6IGdldEVudHJpZXMsXG4gICAgY2xlYXI6IGNsZWFyXG4gIH07XG59XG5cbmV4cG9ydCB2YXIgZGVmYXVsdEVxdWFsaXR5Q2hlY2sgPSBmdW5jdGlvbiBkZWZhdWx0RXF1YWxpdHlDaGVjayhhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDYWNoZUtleUNvbXBhcmF0b3IoZXF1YWxpdHlDaGVjaykge1xuICByZXR1cm4gZnVuY3Rpb24gYXJlQXJndW1lbnRzU2hhbGxvd2x5RXF1YWwocHJldiwgbmV4dCkge1xuICAgIGlmIChwcmV2ID09PSBudWxsIHx8IG5leHQgPT09IG51bGwgfHwgcHJldi5sZW5ndGggIT09IG5leHQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBEbyB0aGlzIGluIGEgZm9yIGxvb3AgKGFuZCBub3QgYSBgZm9yRWFjaGAgb3IgYW4gYGV2ZXJ5YCkgc28gd2UgY2FuIGRldGVybWluZSBlcXVhbGl0eSBhcyBmYXN0IGFzIHBvc3NpYmxlLlxuXG5cbiAgICB2YXIgbGVuZ3RoID0gcHJldi5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWVxdWFsaXR5Q2hlY2socHJldltpXSwgbmV4dFtpXSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xufVxuLy8gZGVmYXVsdE1lbW9pemUgbm93IHN1cHBvcnRzIGEgY29uZmlndXJhYmxlIGNhY2hlIHNpemUgd2l0aCBMUlUgYmVoYXZpb3IsXG4vLyBhbmQgb3B0aW9uYWwgY29tcGFyaXNvbiBvZiB0aGUgcmVzdWx0IHZhbHVlIHdpdGggZXhpc3RpbmcgdmFsdWVzXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lbW9pemUoZnVuYywgZXF1YWxpdHlDaGVja09yT3B0aW9ucykge1xuICB2YXIgcHJvdmlkZWRPcHRpb25zID0gdHlwZW9mIGVxdWFsaXR5Q2hlY2tPck9wdGlvbnMgPT09ICdvYmplY3QnID8gZXF1YWxpdHlDaGVja09yT3B0aW9ucyA6IHtcbiAgICBlcXVhbGl0eUNoZWNrOiBlcXVhbGl0eUNoZWNrT3JPcHRpb25zXG4gIH07XG4gIHZhciBfcHJvdmlkZWRPcHRpb25zJGVxdWEgPSBwcm92aWRlZE9wdGlvbnMuZXF1YWxpdHlDaGVjayxcbiAgICAgIGVxdWFsaXR5Q2hlY2sgPSBfcHJvdmlkZWRPcHRpb25zJGVxdWEgPT09IHZvaWQgMCA/IGRlZmF1bHRFcXVhbGl0eUNoZWNrIDogX3Byb3ZpZGVkT3B0aW9ucyRlcXVhLFxuICAgICAgX3Byb3ZpZGVkT3B0aW9ucyRtYXhTID0gcHJvdmlkZWRPcHRpb25zLm1heFNpemUsXG4gICAgICBtYXhTaXplID0gX3Byb3ZpZGVkT3B0aW9ucyRtYXhTID09PSB2b2lkIDAgPyAxIDogX3Byb3ZpZGVkT3B0aW9ucyRtYXhTLFxuICAgICAgcmVzdWx0RXF1YWxpdHlDaGVjayA9IHByb3ZpZGVkT3B0aW9ucy5yZXN1bHRFcXVhbGl0eUNoZWNrO1xuICB2YXIgY29tcGFyYXRvciA9IGNyZWF0ZUNhY2hlS2V5Q29tcGFyYXRvcihlcXVhbGl0eUNoZWNrKTtcbiAgdmFyIGNhY2hlID0gbWF4U2l6ZSA9PT0gMSA/IGNyZWF0ZVNpbmdsZXRvbkNhY2hlKGNvbXBhcmF0b3IpIDogY3JlYXRlTHJ1Q2FjaGUobWF4U2l6ZSwgY29tcGFyYXRvcik7IC8vIHdlIHJlZmVyZW5jZSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgdGhlbSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuXG4gIGZ1bmN0aW9uIG1lbW9pemVkKCkge1xuICAgIHZhciB2YWx1ZSA9IGNhY2hlLmdldChhcmd1bWVudHMpO1xuXG4gICAgaWYgKHZhbHVlID09PSBOT1RfRk9VTkQpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhbHVlID0gZnVuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuXG4gICAgICBpZiAocmVzdWx0RXF1YWxpdHlDaGVjaykge1xuICAgICAgICB2YXIgZW50cmllcyA9IGNhY2hlLmdldEVudHJpZXMoKTtcbiAgICAgICAgdmFyIG1hdGNoaW5nRW50cnkgPSBlbnRyaWVzLmZpbmQoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdEVxdWFsaXR5Q2hlY2soZW50cnkudmFsdWUsIHZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG1hdGNoaW5nRW50cnkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG1hdGNoaW5nRW50cnkudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2FjaGUucHV0KGFyZ3VtZW50cywgdmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIG1lbW9pemVkLmNsZWFyQ2FjaGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNhY2hlLmNsZWFyKCk7XG4gIH07XG5cbiAgcmV0dXJuIG1lbW9pemVkO1xufSIsImltcG9ydCB7IGRlZmF1bHRNZW1vaXplLCBkZWZhdWx0RXF1YWxpdHlDaGVjayB9IGZyb20gJy4vZGVmYXVsdE1lbW9pemUnO1xuZXhwb3J0IHsgZGVmYXVsdE1lbW9pemUsIGRlZmF1bHRFcXVhbGl0eUNoZWNrIH07XG5cbmZ1bmN0aW9uIGdldERlcGVuZGVuY2llcyhmdW5jcykge1xuICB2YXIgZGVwZW5kZW5jaWVzID0gQXJyYXkuaXNBcnJheShmdW5jc1swXSkgPyBmdW5jc1swXSA6IGZ1bmNzO1xuXG4gIGlmICghZGVwZW5kZW5jaWVzLmV2ZXJ5KGZ1bmN0aW9uIChkZXApIHtcbiAgICByZXR1cm4gdHlwZW9mIGRlcCA9PT0gJ2Z1bmN0aW9uJztcbiAgfSkpIHtcbiAgICB2YXIgZGVwZW5kZW5jeVR5cGVzID0gZGVwZW5kZW5jaWVzLm1hcChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGRlcCA9PT0gJ2Z1bmN0aW9uJyA/IFwiZnVuY3Rpb24gXCIgKyAoZGVwLm5hbWUgfHwgJ3VubmFtZWQnKSArIFwiKClcIiA6IHR5cGVvZiBkZXA7XG4gICAgfSkuam9pbignLCAnKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJjcmVhdGVTZWxlY3RvciBleHBlY3RzIGFsbCBpbnB1dC1zZWxlY3RvcnMgdG8gYmUgZnVuY3Rpb25zLCBidXQgcmVjZWl2ZWQgdGhlIGZvbGxvd2luZyB0eXBlczogW1wiICsgZGVwZW5kZW5jeVR5cGVzICsgXCJdXCIpO1xuICB9XG5cbiAgcmV0dXJuIGRlcGVuZGVuY2llcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcihtZW1vaXplKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtZW1vaXplT3B0aW9uc0Zyb21BcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtZW1vaXplT3B0aW9uc0Zyb21BcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBjcmVhdGVTZWxlY3RvciA9IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGZ1bmNzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgdmFyIF9yZWNvbXB1dGF0aW9ucyA9IDA7XG5cbiAgICB2YXIgX2xhc3RSZXN1bHQ7IC8vIER1ZSB0byB0aGUgaW50cmljYWNpZXMgb2YgcmVzdCBwYXJhbXMsIHdlIGNhbid0IGRvIGFuIG9wdGlvbmFsIGFyZyBhZnRlciBgLi4uZnVuY3NgLlxuICAgIC8vIFNvLCBzdGFydCBieSBkZWNsYXJpbmcgdGhlIGRlZmF1bHQgdmFsdWUgaGVyZS5cbiAgICAvLyAoQW5kIHllcywgdGhlIHdvcmRzICdtZW1vaXplJyBhbmQgJ29wdGlvbnMnIGFwcGVhciB0b28gbWFueSB0aW1lcyBpbiB0aGlzIG5leHQgc2VxdWVuY2UuKVxuXG5cbiAgICB2YXIgZGlyZWN0bHlQYXNzZWRPcHRpb25zID0ge1xuICAgICAgbWVtb2l6ZU9wdGlvbnM6IHVuZGVmaW5lZFxuICAgIH07IC8vIE5vcm1hbGx5LCB0aGUgcmVzdWx0IGZ1bmMgb3IgXCJvdXRwdXQgc2VsZWN0b3JcIiBpcyB0aGUgbGFzdCBhcmdcblxuICAgIHZhciByZXN1bHRGdW5jID0gZnVuY3MucG9wKCk7IC8vIElmIHRoZSByZXN1bHQgZnVuYyBpcyBhY3R1YWxseSBhbiBfb2JqZWN0XywgYXNzdW1lIGl0J3Mgb3VyIG9wdGlvbnMgb2JqZWN0XG5cbiAgICBpZiAodHlwZW9mIHJlc3VsdEZ1bmMgPT09ICdvYmplY3QnKSB7XG4gICAgICBkaXJlY3RseVBhc3NlZE9wdGlvbnMgPSByZXN1bHRGdW5jOyAvLyBhbmQgcG9wIHRoZSByZWFsIHJlc3VsdCBmdW5jIG9mZlxuXG4gICAgICByZXN1bHRGdW5jID0gZnVuY3MucG9wKCk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZXN1bHRGdW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjcmVhdGVTZWxlY3RvciBleHBlY3RzIGFuIG91dHB1dCBmdW5jdGlvbiBhZnRlciB0aGUgaW5wdXRzLCBidXQgcmVjZWl2ZWQ6IFtcIiArIHR5cGVvZiByZXN1bHRGdW5jICsgXCJdXCIpO1xuICAgIH0gLy8gRGV0ZXJtaW5lIHdoaWNoIHNldCBvZiBvcHRpb25zIHdlJ3JlIHVzaW5nLiBQcmVmZXIgb3B0aW9ucyBwYXNzZWQgZGlyZWN0bHksXG4gICAgLy8gYnV0IGZhbGwgYmFjayB0byBvcHRpb25zIGdpdmVuIHRvIGNyZWF0ZVNlbGVjdG9yQ3JlYXRvci5cblxuXG4gICAgdmFyIF9kaXJlY3RseVBhc3NlZE9wdGlvbiA9IGRpcmVjdGx5UGFzc2VkT3B0aW9ucyxcbiAgICAgICAgX2RpcmVjdGx5UGFzc2VkT3B0aW9uMiA9IF9kaXJlY3RseVBhc3NlZE9wdGlvbi5tZW1vaXplT3B0aW9ucyxcbiAgICAgICAgbWVtb2l6ZU9wdGlvbnMgPSBfZGlyZWN0bHlQYXNzZWRPcHRpb24yID09PSB2b2lkIDAgPyBtZW1vaXplT3B0aW9uc0Zyb21BcmdzIDogX2RpcmVjdGx5UGFzc2VkT3B0aW9uMjsgLy8gU2ltcGxpZnlpbmcgYXNzdW1wdGlvbjogaXQncyB1bmxpa2VseSB0aGF0IHRoZSBmaXJzdCBvcHRpb25zIGFyZyBvZiB0aGUgcHJvdmlkZWQgbWVtb2l6ZXJcbiAgICAvLyBpcyBhbiBhcnJheS4gSW4gbW9zdCBsaWJzIEkndmUgbG9va2VkIGF0LCBpdCdzIGFuIGVxdWFsaXR5IGZ1bmN0aW9uIG9yIG9wdGlvbnMgb2JqZWN0LlxuICAgIC8vIEJhc2VkIG9uIHRoYXQsIGlmIGBtZW1vaXplT3B0aW9uc2AgX2lzXyBhbiBhcnJheSwgd2UgYXNzdW1lIGl0J3MgYSBmdWxsXG4gICAgLy8gdXNlci1wcm92aWRlZCBhcnJheSBvZiBvcHRpb25zLiBPdGhlcndpc2UsIGl0IG11c3QgYmUganVzdCB0aGUgX2ZpcnN0XyBhcmcsIGFuZCBzb1xuICAgIC8vIHdlIHdyYXAgaXQgaW4gYW4gYXJyYXkgc28gd2UgY2FuIGFwcGx5IGl0LlxuXG4gICAgdmFyIGZpbmFsTWVtb2l6ZU9wdGlvbnMgPSBBcnJheS5pc0FycmF5KG1lbW9pemVPcHRpb25zKSA/IG1lbW9pemVPcHRpb25zIDogW21lbW9pemVPcHRpb25zXTtcbiAgICB2YXIgZGVwZW5kZW5jaWVzID0gZ2V0RGVwZW5kZW5jaWVzKGZ1bmNzKTtcbiAgICB2YXIgbWVtb2l6ZWRSZXN1bHRGdW5jID0gbWVtb2l6ZS5hcHBseSh2b2lkIDAsIFtmdW5jdGlvbiByZWNvbXB1dGF0aW9uV3JhcHBlcigpIHtcbiAgICAgIF9yZWNvbXB1dGF0aW9ucysrOyAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuXG4gICAgICByZXR1cm4gcmVzdWx0RnVuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1dLmNvbmNhdChmaW5hbE1lbW9pemVPcHRpb25zKSk7IC8vIElmIGEgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIGV4YWN0IHNhbWUgYXJndW1lbnRzIHdlIGRvbid0IG5lZWQgdG8gdHJhdmVyc2Ugb3VyIGRlcGVuZGVuY2llcyBhZ2Fpbi5cblxuICAgIHZhciBzZWxlY3RvciA9IG1lbW9pemUoZnVuY3Rpb24gZGVwZW5kZW5jaWVzQ2hlY2tlcigpIHtcbiAgICAgIHZhciBwYXJhbXMgPSBbXTtcbiAgICAgIHZhciBsZW5ndGggPSBkZXBlbmRlbmNpZXMubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGFwcGx5IGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyBhbmQgbXV0YXRlIGEgbG9jYWwgbGlzdCBvZiBwYXJhbXMgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHBhcmFtcy5wdXNoKGRlcGVuZGVuY2llc1tpXS5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgIH0gLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGZvciBwZXJmb3JtYW5jZS5cblxuXG4gICAgICBfbGFzdFJlc3VsdCA9IG1lbW9pemVkUmVzdWx0RnVuYy5hcHBseShudWxsLCBwYXJhbXMpO1xuICAgICAgcmV0dXJuIF9sYXN0UmVzdWx0O1xuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oc2VsZWN0b3IsIHtcbiAgICAgIHJlc3VsdEZ1bmM6IHJlc3VsdEZ1bmMsXG4gICAgICBtZW1vaXplZFJlc3VsdEZ1bmM6IG1lbW9pemVkUmVzdWx0RnVuYyxcbiAgICAgIGRlcGVuZGVuY2llczogZGVwZW5kZW5jaWVzLFxuICAgICAgbGFzdFJlc3VsdDogZnVuY3Rpb24gbGFzdFJlc3VsdCgpIHtcbiAgICAgICAgcmV0dXJuIF9sYXN0UmVzdWx0O1xuICAgICAgfSxcbiAgICAgIHJlY29tcHV0YXRpb25zOiBmdW5jdGlvbiByZWNvbXB1dGF0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIF9yZWNvbXB1dGF0aW9ucztcbiAgICAgIH0sXG4gICAgICByZXNldFJlY29tcHV0YXRpb25zOiBmdW5jdGlvbiByZXNldFJlY29tcHV0YXRpb25zKCkge1xuICAgICAgICByZXR1cm4gX3JlY29tcHV0YXRpb25zID0gMDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH07IC8vIEB0cy1pZ25vcmVcblxuXG4gIHJldHVybiBjcmVhdGVTZWxlY3Rvcjtcbn1cbmV4cG9ydCB2YXIgY3JlYXRlU2VsZWN0b3IgPSAvKiAjX19QVVJFX18gKi9jcmVhdGVTZWxlY3RvckNyZWF0b3IoZGVmYXVsdE1lbW9pemUpO1xuLy8gTWFudWFsIGRlZmluaXRpb24gb2Ygc3RhdGUgYW5kIG91dHB1dCBhcmd1bWVudHNcbmV4cG9ydCB2YXIgY3JlYXRlU3RydWN0dXJlZFNlbGVjdG9yID0gZnVuY3Rpb24gY3JlYXRlU3RydWN0dXJlZFNlbGVjdG9yKHNlbGVjdG9ycywgc2VsZWN0b3JDcmVhdG9yKSB7XG4gIGlmIChzZWxlY3RvckNyZWF0b3IgPT09IHZvaWQgMCkge1xuICAgIHNlbGVjdG9yQ3JlYXRvciA9IGNyZWF0ZVNlbGVjdG9yO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvcnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3IgZXhwZWN0cyBmaXJzdCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QgJyArIChcIndoZXJlIGVhY2ggcHJvcGVydHkgaXMgYSBzZWxlY3RvciwgaW5zdGVhZCByZWNlaXZlZCBhIFwiICsgdHlwZW9mIHNlbGVjdG9ycykpO1xuICB9XG5cbiAgdmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyhzZWxlY3RvcnMpO1xuICB2YXIgcmVzdWx0U2VsZWN0b3IgPSBzZWxlY3RvckNyZWF0b3IoIC8vIEB0cy1pZ25vcmVcbiAgb2JqZWN0S2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBzZWxlY3RvcnNba2V5XTtcbiAgfSksIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIHZhbHVlcyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgdmFsdWVzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlcy5yZWR1Y2UoZnVuY3Rpb24gKGNvbXBvc2l0aW9uLCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIGNvbXBvc2l0aW9uW29iamVjdEtleXNbaW5kZXhdXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIGNvbXBvc2l0aW9uO1xuICAgIH0sIHt9KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHRTZWxlY3Rvcjtcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gIH0sIF90eXBlb2Yob2JqKTtcbn0iLCJpbXBvcnQgdG9Qcm9wZXJ0eUtleSBmcm9tIFwiLi90b1Byb3BlcnR5S2V5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmltcG9ydCB0b1ByaW1pdGl2ZSBmcm9tIFwiLi90b1ByaW1pdGl2ZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShhcmcsIFwic3RyaW5nXCIpO1xuICByZXR1cm4gX3R5cGVvZihrZXkpID09PSBcInN5bWJvbFwiID8ga2V5IDogU3RyaW5nKGtleSk7XG59IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIi4vdHlwZW9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHtcbiAgaWYgKF90eXBlb2YoaW5wdXQpICE9PSBcIm9iamVjdFwiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtcbiAgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpO1xuICAgIGlmIChfdHlwZW9mKHJlcykgIT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpO1xuICB9XG4gIHJldHVybiAoaGludCA9PT0gXCJzdHJpbmdcIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpO1xufSIsImltcG9ydCBkZWZpbmVQcm9wZXJ0eSBmcm9tIFwiLi9kZWZpbmVQcm9wZXJ0eS5qc1wiO1xuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgIH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDInO1xuXG4vKipcbiAqIEFkYXB0ZWQgZnJvbSBSZWFjdDogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3NoYXJlZC9mb3JtYXRQcm9kRXJyb3JNZXNzYWdlLmpzXG4gKlxuICogRG8gbm90IHJlcXVpcmUgdGhpcyBtb2R1bGUgZGlyZWN0bHkhIFVzZSBub3JtYWwgdGhyb3cgZXJyb3IgY2FsbHMuIFRoZXNlIG1lc3NhZ2VzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBlcnJvciBjb2Rlc1xuICogZHVyaW5nIGJ1aWxkLlxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGVcbiAqL1xuZnVuY3Rpb24gZm9ybWF0UHJvZEVycm9yTWVzc2FnZShjb2RlKSB7XG4gIHJldHVybiBcIk1pbmlmaWVkIFJlZHV4IGVycm9yICNcIiArIGNvZGUgKyBcIjsgdmlzaXQgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvRXJyb3JzP2NvZGU9XCIgKyBjb2RlICsgXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgXCIgKyAndXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycy4gJztcbn1cblxuLy8gSW5saW5lZCB2ZXJzaW9uIG9mIHRoZSBgc3ltYm9sLW9ic2VydmFibGVgIHBvbHlmaWxsXG52YXIgJCRvYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUgfHwgJ0BAb2JzZXJ2YWJsZSc7XG59KSgpO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLy8gSW5saW5lZCAvIHNob3J0ZW5lZCB2ZXJzaW9uIG9mIGBraW5kT2ZgIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQva2luZC1vZlxuZnVuY3Rpb24gbWluaUtpbmRPZih2YWwpIHtcbiAgaWYgKHZhbCA9PT0gdm9pZCAwKSByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gIGlmICh2YWwgPT09IG51bGwpIHJldHVybiAnbnVsbCc7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICB7XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgfVxuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkgcmV0dXJuICdhcnJheSc7XG4gIGlmIChpc0RhdGUodmFsKSkgcmV0dXJuICdkYXRlJztcbiAgaWYgKGlzRXJyb3IodmFsKSkgcmV0dXJuICdlcnJvcic7XG4gIHZhciBjb25zdHJ1Y3Rvck5hbWUgPSBjdG9yTmFtZSh2YWwpO1xuXG4gIHN3aXRjaCAoY29uc3RydWN0b3JOYW1lKSB7XG4gICAgY2FzZSAnU3ltYm9sJzpcbiAgICBjYXNlICdQcm9taXNlJzpcbiAgICBjYXNlICdXZWFrTWFwJzpcbiAgICBjYXNlICdXZWFrU2V0JzpcbiAgICBjYXNlICdNYXAnOlxuICAgIGNhc2UgJ1NldCc6XG4gICAgICByZXR1cm4gY29uc3RydWN0b3JOYW1lO1xuICB9IC8vIG90aGVyXG5cblxuICByZXR1cm4gdHlwZS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgJycpO1xufVxuXG5mdW5jdGlvbiBjdG9yTmFtZSh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgPyB2YWwuY29uc3RydWN0b3IubmFtZSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IodmFsKSB7XG4gIHJldHVybiB2YWwgaW5zdGFuY2VvZiBFcnJvciB8fCB0eXBlb2YgdmFsLm1lc3NhZ2UgPT09ICdzdHJpbmcnICYmIHZhbC5jb25zdHJ1Y3RvciAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLnN0YWNrVHJhY2VMaW1pdCA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIERhdGUpIHJldHVybiB0cnVlO1xuICByZXR1cm4gdHlwZW9mIHZhbC50b0RhdGVTdHJpbmcgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbC5nZXREYXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWwuc2V0RGF0ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24ga2luZE9mKHZhbCkge1xuICB2YXIgdHlwZU9mVmFsID0gdHlwZW9mIHZhbDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHR5cGVPZlZhbCA9IG1pbmlLaW5kT2YodmFsKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlT2ZWYWw7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqXG4gKiAqKldlIHJlY29tbWVuZCB1c2luZyB0aGUgYGNvbmZpZ3VyZVN0b3JlYCBtZXRob2RcbiAqIG9mIHRoZSBgQHJlZHV4anMvdG9vbGtpdGAgcGFja2FnZSoqLCB3aGljaCByZXBsYWNlcyBgY3JlYXRlU3RvcmVgLlxuICpcbiAqIFJlZHV4IFRvb2xraXQgaXMgb3VyIHJlY29tbWVuZGVkIGFwcHJvYWNoIGZvciB3cml0aW5nIFJlZHV4IGxvZ2ljIHRvZGF5LFxuICogaW5jbHVkaW5nIHN0b3JlIHNldHVwLCByZWR1Y2VycywgZGF0YSBmZXRjaGluZywgYW5kIG1vcmUuXG4gKlxuICogKipGb3IgbW9yZSBkZXRhaWxzLCBwbGVhc2UgcmVhZCB0aGlzIFJlZHV4IGRvY3MgcGFnZToqKlxuICogKipodHRwczovL3JlZHV4LmpzLm9yZy9pbnRyb2R1Y3Rpb24vd2h5LXJ0ay1pcy1yZWR1eC10b2RheSoqXG4gKlxuICogYGNvbmZpZ3VyZVN0b3JlYCBmcm9tIFJlZHV4IFRvb2xraXQgaXMgYW4gaW1wcm92ZWQgdmVyc2lvbiBvZiBgY3JlYXRlU3RvcmVgIHRoYXRcbiAqIHNpbXBsaWZpZXMgc2V0dXAgYW5kIGhlbHBzIGF2b2lkIGNvbW1vbiBidWdzLlxuICpcbiAqIFlvdSBzaG91bGQgbm90IGJlIHVzaW5nIHRoZSBgcmVkdXhgIGNvcmUgcGFja2FnZSBieSBpdHNlbGYgdG9kYXksIGV4Y2VwdCBmb3IgbGVhcm5pbmcgcHVycG9zZXMuXG4gKiBUaGUgYGNyZWF0ZVN0b3JlYCBtZXRob2QgZnJvbSB0aGUgY29yZSBgcmVkdXhgIHBhY2thZ2Ugd2lsbCBub3QgYmUgcmVtb3ZlZCwgYnV0IHdlIGVuY291cmFnZVxuICogYWxsIHVzZXJzIHRvIG1pZ3JhdGUgdG8gdXNpbmcgUmVkdXggVG9vbGtpdCBmb3IgYWxsIFJlZHV4IGNvZGUuXG4gKlxuICogSWYgeW91IHdhbnQgdG8gdXNlIGBjcmVhdGVTdG9yZWAgd2l0aG91dCB0aGlzIHZpc3VhbCBkZXByZWNhdGlvbiB3YXJuaW5nLCB1c2VcbiAqIHRoZSBgbGVnYWN5X2NyZWF0ZVN0b3JlYCBpbXBvcnQgaW5zdGVhZDpcbiAqXG4gKiBgaW1wb3J0IHsgbGVnYWN5X2NyZWF0ZVN0b3JlIGFzIGNyZWF0ZVN0b3JlfSBmcm9tICdyZWR1eCdgXG4gKlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgwKSA6ICdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNjcmVhdGluZy1hLXN0b3JlLXdpdGgtZW5oYW5jZXJzIGZvciBhbiBleGFtcGxlLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMSkgOiBcIkV4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGVuaGFuY2VyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIpIDogXCJFeHBlY3RlZCB0aGUgcm9vdCByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YocmVkdWNlcikgKyBcIidcIik7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMpIDogJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNCkgOiBcIkV4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGxpc3RlbmVyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNSkgOiAnWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2KSA6ICdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGkvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg3KSA6IFwiQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuIEluc3RlYWQsIHRoZSBhY3R1YWwgdHlwZSB3YXM6ICdcIiArIGtpbmRPZihhY3Rpb24pICsgXCInLiBZb3UgbWF5IG5lZWQgdG8gYWRkIG1pZGRsZXdhcmUgdG8geW91ciBzdG9yZSBzZXR1cCB0byBoYW5kbGUgZGlzcGF0Y2hpbmcgb3RoZXIgdmFsdWVzLCBzdWNoIGFzICdyZWR1eC10aHVuaycgdG8gaGFuZGxlIGRpc3BhdGNoaW5nIGZ1bmN0aW9ucy4gU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC00LXN0b3JlI21pZGRsZXdhcmUgYW5kIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC02LWFzeW5jLWxvZ2ljI3VzaW5nLXRoZS1yZWR1eC10aHVuay1taWRkbGV3YXJlIGZvciBleGFtcGxlcy5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDgpIDogJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gWW91IG1heSBoYXZlIG1pc3NwZWxsZWQgYW4gYWN0aW9uIHR5cGUgc3RyaW5nIGNvbnN0YW50LicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5KSA6ICdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTApIDogXCJFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihuZXh0UmVkdWNlcikpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMSkgOiBcIkV4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2Yob2JzZXJ2ZXIpICsgXCInXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKlxuICogKipXZSByZWNvbW1lbmQgdXNpbmcgYGNvbmZpZ3VyZVN0b3JlYCBmcm9tIHRoZVxuICogYEByZWR1eGpzL3Rvb2xraXRgIHBhY2thZ2UqKiwgd2hpY2ggcmVwbGFjZXMgYGNyZWF0ZVN0b3JlYDpcbiAqICoqaHR0cHM6Ly9yZWR1eC5qcy5vcmcvaW50cm9kdWN0aW9uL3doeS1ydGstaXMtcmVkdXgtdG9kYXkqKlxuICpcbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG52YXIgbGVnYWN5X2NyZWF0ZVN0b3JlID0gY3JlYXRlU3RvcmU7XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIGtpbmRPZihpbnB1dFN0YXRlKSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEyKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlICdcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIicgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTQpIDogXCJXaGVuIGNhbGxlZCB3aXRoIGFuIGFjdGlvbiBvZiB0eXBlIFwiICsgKGFjdGlvblR5cGUgPyBcIlxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIDogJyh1bmtub3duIHR5cGUpJykgKyBcIiwgdGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBfa2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2KSA6IFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBidXQgaW5zdGVhZCByZWNlaXZlZDogJ1wiICsga2luZE9mKGFjdGlvbkNyZWF0b3JzKSArIFwiJy4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNSkgOiAnRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3RvcmUpLCB7fSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSwgbGVnYWN5X2NyZWF0ZVN0b3JlIH07XG4iLCIvKiogQSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYSBwb3RlbnRpYWwgXCJleHRyYSBhcmd1bWVudFwiIHZhbHVlIHRvIGJlIGluamVjdGVkIGxhdGVyLFxyXG4gKiBhbmQgcmV0dXJucyBhbiBpbnN0YW5jZSBvZiB0aGUgdGh1bmsgbWlkZGxld2FyZSB0aGF0IHVzZXMgdGhhdCB2YWx1ZVxyXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRodW5rTWlkZGxld2FyZShleHRyYUFyZ3VtZW50KSB7XG4gIC8vIFN0YW5kYXJkIFJlZHV4IG1pZGRsZXdhcmUgZGVmaW5pdGlvbiBwYXR0ZXJuOlxuICAvLyBTZWU6IGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC00LXN0b3JlI3dyaXRpbmctY3VzdG9tLW1pZGRsZXdhcmVcbiAgdmFyIG1pZGRsZXdhcmUgPSBmdW5jdGlvbiBtaWRkbGV3YXJlKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgICBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAvLyBUaGUgdGh1bmsgbWlkZGxld2FyZSBsb29rcyBmb3IgYW55IGZ1bmN0aW9ucyB0aGF0IHdlcmUgcGFzc2VkIHRvIGBzdG9yZS5kaXNwYXRjaGAuXG4gICAgICAgIC8vIElmIHRoaXMgXCJhY3Rpb25cIiBpcyByZWFsbHkgYSBmdW5jdGlvbiwgY2FsbCBpdCBhbmQgcmV0dXJuIHRoZSByZXN1bHQuXG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgLy8gSW5qZWN0IHRoZSBzdG9yZSdzIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgbWV0aG9kcywgYXMgd2VsbCBhcyBhbnkgXCJleHRyYSBhcmdcIlxuICAgICAgICAgIHJldHVybiBhY3Rpb24oZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYUFyZ3VtZW50KTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHBhc3MgdGhlIGFjdGlvbiBkb3duIHRoZSBtaWRkbGV3YXJlIGNoYWluIGFzIHVzdWFsXG5cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiBtaWRkbGV3YXJlO1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTsgLy8gQXR0YWNoIHRoZSBmYWN0b3J5IGZ1bmN0aW9uIHNvIHVzZXJzIGNhbiBjcmVhdGUgYSBjdXN0b21pemVkIHZlcnNpb25cbi8vIHdpdGggd2hhdGV2ZXIgXCJleHRyYSBhcmdcIiB0aGV5IHdhbnQgdG8gaW5qZWN0IGludG8gdGhlaXIgdGh1bmtzXG5cbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuZXhwb3J0IGRlZmF1bHQgdGh1bms7IiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXHJcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xyXG4gICAgcmV0dXJuIHRvO1xyXG59O1xyXG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xyXG52YXIgX19kZWZQcm9wcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzO1xyXG52YXIgX19nZXRPd25Qcm9wRGVzY3MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycztcclxudmFyIF9fZ2V0T3duUHJvcFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xyXG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcclxudmFyIF9fcHJvcElzRW51bSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XHJcbnZhciBfX2RlZk5vcm1hbFByb3AgPSBmdW5jdGlvbiAob2JqLCBrZXksIHZhbHVlKSB7IHJldHVybiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7IH07XHJcbnZhciBfX3NwcmVhZFZhbHVlcyA9IGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwcm9wIGluIGIgfHwgKGIgPSB7fSkpXHJcbiAgICAgICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKGIsIHByb3ApKVxyXG4gICAgICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XHJcbiAgICBpZiAoX19nZXRPd25Qcm9wU3ltYm9scylcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9jID0gX19nZXRPd25Qcm9wU3ltYm9scyhiKTsgX2kgPCBfYy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHByb3AgPSBfY1tfaV07XHJcbiAgICAgICAgICAgIGlmIChfX3Byb3BJc0VudW0uY2FsbChiLCBwcm9wKSlcclxuICAgICAgICAgICAgICAgIF9fZGVmTm9ybWFsUHJvcChhLCBwcm9wLCBiW3Byb3BdKTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gYTtcclxufTtcclxudmFyIF9fc3ByZWFkUHJvcHMgPSBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gX19kZWZQcm9wcyhhLCBfX2dldE93blByb3BEZXNjcyhiKSk7IH07XHJcbnZhciBfX2FzeW5jID0gZnVuY3Rpb24gKF9fdGhpcywgX19hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICB2YXIgZnVsZmlsbGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHJlamVjdGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBzdGVwID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguZG9uZSA/IHJlc29sdmUoeC52YWx1ZSkgOiBQcm9taXNlLnJlc29sdmUoeC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfTtcclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkoX190aGlzLCBfX2FyZ3VtZW50cykpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuLy8gc3JjL2luZGV4LnRzXHJcbmltcG9ydCB7IGVuYWJsZUVTNSB9IGZyb20gXCJpbW1lclwiO1xyXG5leHBvcnQgKiBmcm9tIFwicmVkdXhcIjtcclxuaW1wb3J0IHsgZGVmYXVsdCBhcyBkZWZhdWx0MiwgY3VycmVudCBhcyBjdXJyZW50MiwgZnJlZXplLCBvcmlnaW5hbCwgaXNEcmFmdCBhcyBpc0RyYWZ0NCB9IGZyb20gXCJpbW1lclwiO1xyXG5pbXBvcnQgeyBjcmVhdGVTZWxlY3RvciBhcyBjcmVhdGVTZWxlY3RvcjIgfSBmcm9tIFwicmVzZWxlY3RcIjtcclxuLy8gc3JjL2NyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yLnRzXHJcbmltcG9ydCB7IGN1cnJlbnQsIGlzRHJhZnQgfSBmcm9tIFwiaW1tZXJcIjtcclxuaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IgfSBmcm9tIFwicmVzZWxlY3RcIjtcclxudmFyIGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgdmFyIHNlbGVjdG9yID0gY3JlYXRlU2VsZWN0b3IuYXBwbHkodm9pZCAwLCBhcmdzKTtcclxuICAgIHZhciB3cmFwcGVkU2VsZWN0b3IgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB2YXIgcmVzdCA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHJlc3RbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzZWxlY3Rvci5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW2lzRHJhZnQodmFsdWUpID8gY3VycmVudCh2YWx1ZSkgOiB2YWx1ZV0sIHJlc3QpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gd3JhcHBlZFNlbGVjdG9yO1xyXG59O1xyXG4vLyBzcmMvY29uZmlndXJlU3RvcmUudHNcclxuaW1wb3J0IHsgY3JlYXRlU3RvcmUsIGNvbXBvc2UgYXMgY29tcG9zZTIsIGFwcGx5TWlkZGxld2FyZSwgY29tYmluZVJlZHVjZXJzIH0gZnJvbSBcInJlZHV4XCI7XHJcbi8vIHNyYy9kZXZ0b29sc0V4dGVuc2lvbi50c1xyXG5pbXBvcnQgeyBjb21wb3NlIH0gZnJvbSBcInJlZHV4XCI7XHJcbnZhciBjb21wb3NlV2l0aERldlRvb2xzID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fID8gd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyA6IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxyXG4gICAgICAgIHJldHVybiB2b2lkIDA7XHJcbiAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gXCJvYmplY3RcIilcclxuICAgICAgICByZXR1cm4gY29tcG9zZTtcclxuICAgIHJldHVybiBjb21wb3NlLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbn07XHJcbnZhciBkZXZUb29sc0VuaGFuY2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyA/IHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fIDogZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChub29wMikge1xyXG4gICAgICAgIHJldHVybiBub29wMjtcclxuICAgIH07XHJcbn07XHJcbi8vIHNyYy9pc1BsYWluT2JqZWN0LnRzXHJcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUgPT09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKTtcclxuICAgIGlmIChwcm90byA9PT0gbnVsbClcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIHZhciBiYXNlUHJvdG8gPSBwcm90bztcclxuICAgIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YoYmFzZVByb3RvKSAhPT0gbnVsbCkge1xyXG4gICAgICAgIGJhc2VQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihiYXNlUHJvdG8pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb3RvID09PSBiYXNlUHJvdG87XHJcbn1cclxuLy8gc3JjL2dldERlZmF1bHRNaWRkbGV3YXJlLnRzXHJcbmltcG9ydCB0aHVua01pZGRsZXdhcmUgZnJvbSBcInJlZHV4LXRodW5rXCI7XHJcbi8vIHNyYy91dGlscy50c1xyXG5pbXBvcnQgY3JlYXRlTmV4dFN0YXRlLCB7IGlzRHJhZnRhYmxlIH0gZnJvbSBcImltbWVyXCI7XHJcbmZ1bmN0aW9uIGdldFRpbWVNZWFzdXJlVXRpbHMobWF4RGVsYXksIGZuTmFtZSkge1xyXG4gICAgdmFyIGVsYXBzZWQgPSAwO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtZWFzdXJlVGltZTogZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGFydGVkID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpbmlzaGVkID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgICAgIGVsYXBzZWQgKz0gZmluaXNoZWQgLSBzdGFydGVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB3YXJuSWZFeGNlZWRlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoZWxhcHNlZCA+IG1heERlbGF5KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZm5OYW1lICsgXCIgdG9vayBcIiArIGVsYXBzZWQgKyBcIm1zLCB3aGljaCBpcyBtb3JlIHRoYW4gdGhlIHdhcm5pbmcgdGhyZXNob2xkIG9mIFwiICsgbWF4RGVsYXkgKyBcIm1zLiBcXG5JZiB5b3VyIHN0YXRlIG9yIGFjdGlvbnMgYXJlIHZlcnkgbGFyZ2UsIHlvdSBtYXkgd2FudCB0byBkaXNhYmxlIHRoZSBtaWRkbGV3YXJlIGFzIGl0IG1pZ2h0IGNhdXNlIHRvbyBtdWNoIG9mIGEgc2xvd2Rvd24gaW4gZGV2ZWxvcG1lbnQgbW9kZS4gU2VlIGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvYXBpL2dldERlZmF1bHRNaWRkbGV3YXJlIGZvciBpbnN0cnVjdGlvbnMuXFxuSXQgaXMgZGlzYWJsZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMsIHNvIHlvdSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoYXQuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG52YXIgTWlkZGxld2FyZUFycmF5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKE1pZGRsZXdhcmVBcnJheSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIE1pZGRsZXdhcmVBcnJheSgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3MpIHx8IHRoaXM7XHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKF90aGlzLCBNaWRkbGV3YXJlQXJyYXkucHJvdG90eXBlKTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWlkZGxld2FyZUFycmF5LCBTeW1ib2wuc3BlY2llcywge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWlkZGxld2FyZUFycmF5O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE1pZGRsZXdhcmVBcnJheS5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcnIgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcnJbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuY29uY2F0LmFwcGx5KHRoaXMsIGFycik7XHJcbiAgICB9O1xyXG4gICAgTWlkZGxld2FyZUFycmF5LnByb3RvdHlwZS5wcmVwZW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcnIgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcnJbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFyci5sZW5ndGggPT09IDEgJiYgQXJyYXkuaXNBcnJheShhcnJbMF0pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgKE1pZGRsZXdhcmVBcnJheS5iaW5kLmFwcGx5KE1pZGRsZXdhcmVBcnJheSwgX19zcHJlYWRBcnJheShbdm9pZCAwXSwgYXJyWzBdLmNvbmNhdCh0aGlzKSkpKSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IChNaWRkbGV3YXJlQXJyYXkuYmluZC5hcHBseShNaWRkbGV3YXJlQXJyYXksIF9fc3ByZWFkQXJyYXkoW3ZvaWQgMF0sIGFyci5jb25jYXQodGhpcykpKSkoKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTWlkZGxld2FyZUFycmF5O1xyXG59KEFycmF5KSk7XHJcbnZhciBFbmhhbmNlckFycmF5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEVuaGFuY2VyQXJyYXksIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBFbmhhbmNlckFycmF5KCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuYXBwbHkodGhpcywgYXJncykgfHwgdGhpcztcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoX3RoaXMsIEVuaGFuY2VyQXJyYXkucHJvdG90eXBlKTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRW5oYW5jZXJBcnJheSwgU3ltYm9sLnNwZWNpZXMsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEVuaGFuY2VyQXJyYXk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRW5oYW5jZXJBcnJheS5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcnIgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcnJbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuY29uY2F0LmFwcGx5KHRoaXMsIGFycik7XHJcbiAgICB9O1xyXG4gICAgRW5oYW5jZXJBcnJheS5wcm90b3R5cGUucHJlcGVuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJyID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJyW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcnIubGVuZ3RoID09PSAxICYmIEFycmF5LmlzQXJyYXkoYXJyWzBdKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IChFbmhhbmNlckFycmF5LmJpbmQuYXBwbHkoRW5oYW5jZXJBcnJheSwgX19zcHJlYWRBcnJheShbdm9pZCAwXSwgYXJyWzBdLmNvbmNhdCh0aGlzKSkpKSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IChFbmhhbmNlckFycmF5LmJpbmQuYXBwbHkoRW5oYW5jZXJBcnJheSwgX19zcHJlYWRBcnJheShbdm9pZCAwXSwgYXJyLmNvbmNhdCh0aGlzKSkpKSgpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBFbmhhbmNlckFycmF5O1xyXG59KEFycmF5KSk7XHJcbmZ1bmN0aW9uIGZyZWV6ZURyYWZ0YWJsZSh2YWwpIHtcclxuICAgIHJldHVybiBpc0RyYWZ0YWJsZSh2YWwpID8gY3JlYXRlTmV4dFN0YXRlKHZhbCwgZnVuY3Rpb24gKCkge1xyXG4gICAgfSkgOiB2YWw7XHJcbn1cclxuLy8gc3JjL2ltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZS50c1xyXG52YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiO1xyXG52YXIgcHJlZml4ID0gXCJJbnZhcmlhbnQgZmFpbGVkXCI7XHJcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcclxuICAgIGlmIChjb25kaXRpb24pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XHJcbiAgICB9XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgXCJcIikpO1xyXG59XHJcbmZ1bmN0aW9uIHN0cmluZ2lmeShvYmosIHNlcmlhbGl6ZXIsIGluZGVudCwgZGVjeWNsZXIpIHtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIGdldFNlcmlhbGl6ZShzZXJpYWxpemVyLCBkZWN5Y2xlciksIGluZGVudCk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0U2VyaWFsaXplKHNlcmlhbGl6ZXIsIGRlY3ljbGVyKSB7XHJcbiAgICB2YXIgc3RhY2sgPSBbXSwga2V5cyA9IFtdO1xyXG4gICAgaWYgKCFkZWN5Y2xlcilcclxuICAgICAgICBkZWN5Y2xlciA9IGZ1bmN0aW9uIChfLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoc3RhY2tbMF0gPT09IHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiW0NpcmN1bGFyIH5dXCI7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltDaXJjdWxhciB+LlwiICsga2V5cy5zbGljZSgwLCBzdGFjay5pbmRleE9mKHZhbHVlKSkuam9pbihcIi5cIikgKyBcIl1cIjtcclxuICAgICAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIHRoaXNQb3MgPSBzdGFjay5pbmRleE9mKHRoaXMpO1xyXG4gICAgICAgICAgICB+dGhpc1BvcyA/IHN0YWNrLnNwbGljZSh0aGlzUG9zICsgMSkgOiBzdGFjay5wdXNoKHRoaXMpO1xyXG4gICAgICAgICAgICB+dGhpc1BvcyA/IGtleXMuc3BsaWNlKHRoaXNQb3MsIEluZmluaXR5LCBrZXkpIDoga2V5cy5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgIGlmICh+c3RhY2suaW5kZXhPZih2YWx1ZSkpXHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGRlY3ljbGVyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgc3RhY2sucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZXIgPT0gbnVsbCA/IHZhbHVlIDogc2VyaWFsaXplci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc0ltbXV0YWJsZURlZmF1bHQodmFsdWUpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUgPT0gbnVsbCB8fCBPYmplY3QuaXNGcm96ZW4odmFsdWUpO1xyXG59XHJcbmZ1bmN0aW9uIHRyYWNrRm9yTXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqKSB7XHJcbiAgICB2YXIgdHJhY2tlZFByb3BlcnRpZXMgPSB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmopO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkZXRlY3RNdXRhdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRldGVjdE11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIHRyYWNrZWRQcm9wZXJ0aWVzLCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gdHJhY2tQcm9wZXJ0aWVzKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqLCBwYXRoKSB7XHJcbiAgICBpZiAoaWdub3JlUGF0aHMgPT09IHZvaWQgMCkgeyBpZ25vcmVQYXRocyA9IFtdOyB9XHJcbiAgICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7IHBhdGggPSBcIlwiOyB9XHJcbiAgICB2YXIgdHJhY2tlZCA9IHsgdmFsdWU6IG9iaiB9O1xyXG4gICAgaWYgKCFpc0ltbXV0YWJsZShvYmopKSB7XHJcbiAgICAgICAgdHJhY2tlZC5jaGlsZHJlbiA9IHt9O1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICAgICAgdmFyIGNoaWxkUGF0aCA9IHBhdGggPyBwYXRoICsgXCIuXCIgKyBrZXkgOiBrZXk7XHJcbiAgICAgICAgICAgIGlmIChpZ25vcmVQYXRocy5sZW5ndGggJiYgaWdub3JlUGF0aHMuaW5kZXhPZihjaGlsZFBhdGgpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHJhY2tlZC5jaGlsZHJlbltrZXldID0gdHJhY2tQcm9wZXJ0aWVzKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqW2tleV0sIGNoaWxkUGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRyYWNrZWQ7XHJcbn1cclxuZnVuY3Rpb24gZGV0ZWN0TXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVkUGF0aHMsIHRyYWNrZWRQcm9wZXJ0eSwgb2JqLCBzYW1lUGFyZW50UmVmLCBwYXRoKSB7XHJcbiAgICBpZiAoaWdub3JlZFBhdGhzID09PSB2b2lkIDApIHsgaWdub3JlZFBhdGhzID0gW107IH1cclxuICAgIGlmIChzYW1lUGFyZW50UmVmID09PSB2b2lkIDApIHsgc2FtZVBhcmVudFJlZiA9IGZhbHNlOyB9XHJcbiAgICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7IHBhdGggPSBcIlwiOyB9XHJcbiAgICB2YXIgcHJldk9iaiA9IHRyYWNrZWRQcm9wZXJ0eSA/IHRyYWNrZWRQcm9wZXJ0eS52YWx1ZSA6IHZvaWQgMDtcclxuICAgIHZhciBzYW1lUmVmID0gcHJldk9iaiA9PT0gb2JqO1xyXG4gICAgaWYgKHNhbWVQYXJlbnRSZWYgJiYgIXNhbWVSZWYgJiYgIU51bWJlci5pc05hTihvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgd2FzTXV0YXRlZDogdHJ1ZSwgcGF0aDogcGF0aCB9O1xyXG4gICAgfVxyXG4gICAgaWYgKGlzSW1tdXRhYmxlKHByZXZPYmopIHx8IGlzSW1tdXRhYmxlKG9iaikpIHtcclxuICAgICAgICByZXR1cm4geyB3YXNNdXRhdGVkOiBmYWxzZSB9O1xyXG4gICAgfVxyXG4gICAgdmFyIGtleXNUb0RldGVjdCA9IHt9O1xyXG4gICAgZm9yICh2YXIga2V5IGluIHRyYWNrZWRQcm9wZXJ0eS5jaGlsZHJlbikge1xyXG4gICAgICAgIGtleXNUb0RldGVjdFtrZXldID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICBrZXlzVG9EZXRlY3Rba2V5XSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICB2YXIgaGFzSWdub3JlZFBhdGhzID0gaWdub3JlZFBhdGhzLmxlbmd0aCA+IDA7XHJcbiAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB2YXIgbmVzdGVkUGF0aCA9IHBhdGggPyBwYXRoICsgXCIuXCIgKyBrZXkgOiBrZXk7XHJcbiAgICAgICAgaWYgKGhhc0lnbm9yZWRQYXRocykge1xyXG4gICAgICAgICAgICB2YXIgaGFzTWF0Y2hlcyA9IGlnbm9yZWRQYXRocy5zb21lKGZ1bmN0aW9uIChpZ25vcmVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaWdub3JlZCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpZ25vcmVkLnRlc3QobmVzdGVkUGF0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmVzdGVkUGF0aCA9PT0gaWdub3JlZDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChoYXNNYXRjaGVzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXN1bHQgPSBkZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZWRQYXRocywgdHJhY2tlZFByb3BlcnR5LmNoaWxkcmVuW2tleV0sIG9ialtrZXldLCBzYW1lUmVmLCBuZXN0ZWRQYXRoKTtcclxuICAgICAgICBpZiAocmVzdWx0Lndhc011dGF0ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHJlc3VsdCB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBmb3IgKHZhciBrZXkgaW4ga2V5c1RvRGV0ZWN0KSB7XHJcbiAgICAgICAgdmFyIHN0YXRlXzEgPSBfbG9vcF8xKGtleSk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZV8xID09PSBcIm9iamVjdFwiKVxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGVfMS52YWx1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IHdhc011dGF0ZWQ6IGZhbHNlIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7IHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBuZXh0KGFjdGlvbik7IH07IH07IH07XHJcbiAgICB9XHJcbiAgICB2YXIgX2MgPSBvcHRpb25zLmlzSW1tdXRhYmxlLCBpc0ltbXV0YWJsZSA9IF9jID09PSB2b2lkIDAgPyBpc0ltbXV0YWJsZURlZmF1bHQgOiBfYywgaWdub3JlZFBhdGhzID0gb3B0aW9ucy5pZ25vcmVkUGF0aHMsIF9kID0gb3B0aW9ucy53YXJuQWZ0ZXIsIHdhcm5BZnRlciA9IF9kID09PSB2b2lkIDAgPyAzMiA6IF9kLCBpZ25vcmUgPSBvcHRpb25zLmlnbm9yZTtcclxuICAgIGlnbm9yZWRQYXRocyA9IGlnbm9yZWRQYXRocyB8fCBpZ25vcmU7XHJcbiAgICB2YXIgdHJhY2sgPSB0cmFja0Zvck11dGF0aW9ucy5iaW5kKG51bGwsIGlzSW1tdXRhYmxlLCBpZ25vcmVkUGF0aHMpO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgIHZhciBnZXRTdGF0ZSA9IF9jLmdldFN0YXRlO1xyXG4gICAgICAgIHZhciBzdGF0ZSA9IGdldFN0YXRlKCk7XHJcbiAgICAgICAgdmFyIHRyYWNrZXIgPSB0cmFjayhzdGF0ZSk7XHJcbiAgICAgICAgdmFyIHJlc3VsdDtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICAgICAgdmFyIG1lYXN1cmVVdGlscyA9IGdldFRpbWVNZWFzdXJlVXRpbHMod2FybkFmdGVyLCBcIkltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZVwiKTtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlID0gZ2V0U3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRyYWNrZXIuZGV0ZWN0TXV0YXRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgaW52YXJpYW50KCFyZXN1bHQud2FzTXV0YXRlZCwgXCJBIHN0YXRlIG11dGF0aW9uIHdhcyBkZXRlY3RlZCBiZXR3ZWVuIGRpc3BhdGNoZXMsIGluIHRoZSBwYXRoICdcIiArIChyZXN1bHQucGF0aCB8fCBcIlwiKSArIFwiJy4gIFRoaXMgbWF5IGNhdXNlIGluY29ycmVjdCBiZWhhdmlvci4gKGh0dHBzOi8vcmVkdXguanMub3JnL3N0eWxlLWd1aWRlL3N0eWxlLWd1aWRlI2RvLW5vdC1tdXRhdGUtc3RhdGUpXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdmFyIGRpc3BhdGNoZWRBY3Rpb24gPSBuZXh0KGFjdGlvbik7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IGdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0cmFja2VyLmRldGVjdE11dGF0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC53YXNNdXRhdGVkICYmIGludmFyaWFudCghcmVzdWx0Lndhc011dGF0ZWQsIFwiQSBzdGF0ZSBtdXRhdGlvbiB3YXMgZGV0ZWN0ZWQgaW5zaWRlIGEgZGlzcGF0Y2gsIGluIHRoZSBwYXRoOiBcIiArIChyZXN1bHQucGF0aCB8fCBcIlwiKSArIFwiLiBUYWtlIGEgbG9vayBhdCB0aGUgcmVkdWNlcihzKSBoYW5kbGluZyB0aGUgYWN0aW9uIFwiICsgc3RyaW5naWZ5KGFjdGlvbikgKyBcIi4gKGh0dHBzOi8vcmVkdXguanMub3JnL3N0eWxlLWd1aWRlL3N0eWxlLWd1aWRlI2RvLW5vdC1tdXRhdGUtc3RhdGUpXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLndhcm5JZkV4Y2VlZGVkKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBkaXNwYXRjaGVkQWN0aW9uO1xyXG4gICAgICAgIH07IH07XHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9zZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUudHNcclxuZnVuY3Rpb24gaXNQbGFpbih2YWwpIHtcclxuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcclxuICAgIHJldHVybiB2YWwgPT0gbnVsbCB8fCB0eXBlID09PSBcInN0cmluZ1wiIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiIHx8IHR5cGUgPT09IFwibnVtYmVyXCIgfHwgQXJyYXkuaXNBcnJheSh2YWwpIHx8IGlzUGxhaW5PYmplY3QodmFsKTtcclxufVxyXG5mdW5jdGlvbiBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUodmFsdWUsIHBhdGgsIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkUGF0aHMsIGNhY2hlKSB7XHJcbiAgICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7IHBhdGggPSBcIlwiOyB9XHJcbiAgICBpZiAoaXNTZXJpYWxpemFibGUgPT09IHZvaWQgMCkgeyBpc1NlcmlhbGl6YWJsZSA9IGlzUGxhaW47IH1cclxuICAgIGlmIChpZ25vcmVkUGF0aHMgPT09IHZvaWQgMCkgeyBpZ25vcmVkUGF0aHMgPSBbXTsgfVxyXG4gICAgdmFyIGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlO1xyXG4gICAgaWYgKCFpc1NlcmlhbGl6YWJsZSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBrZXlQYXRoOiBwYXRoIHx8IFwiPHJvb3Q+XCIsXHJcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IHZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKGNhY2hlID09IG51bGwgPyB2b2lkIDAgOiBjYWNoZS5oYXModmFsdWUpKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBlbnRyaWVzID0gZ2V0RW50cmllcyAhPSBudWxsID8gZ2V0RW50cmllcyh2YWx1ZSkgOiBPYmplY3QuZW50cmllcyh2YWx1ZSk7XHJcbiAgICB2YXIgaGFzSWdub3JlZFBhdGhzID0gaWdub3JlZFBhdGhzLmxlbmd0aCA+IDA7XHJcbiAgICB2YXIgX2xvb3BfMiA9IGZ1bmN0aW9uIChrZXksIG5lc3RlZFZhbHVlKSB7XHJcbiAgICAgICAgdmFyIG5lc3RlZFBhdGggPSBwYXRoID8gcGF0aCArIFwiLlwiICsga2V5IDoga2V5O1xyXG4gICAgICAgIGlmIChoYXNJZ25vcmVkUGF0aHMpIHtcclxuICAgICAgICAgICAgdmFyIGhhc01hdGNoZXMgPSBpZ25vcmVkUGF0aHMuc29tZShmdW5jdGlvbiAoaWdub3JlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlnbm9yZWQgaW5zdGFuY2VvZiBSZWdFeHApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWdub3JlZC50ZXN0KG5lc3RlZFBhdGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5lc3RlZFBhdGggPT09IGlnbm9yZWQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoaGFzTWF0Y2hlcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWlzU2VyaWFsaXphYmxlKG5lc3RlZFZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleVBhdGg6IG5lc3RlZFBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5lc3RlZFZhbHVlXHJcbiAgICAgICAgICAgICAgICB9IH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgbmVzdGVkVmFsdWUgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgZm91bmROZXN0ZWRTZXJpYWxpemFibGUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUobmVzdGVkVmFsdWUsIG5lc3RlZFBhdGgsIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkUGF0aHMsIGNhY2hlKTtcclxuICAgICAgICAgICAgaWYgKGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogZm91bmROZXN0ZWRTZXJpYWxpemFibGUgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIGVudHJpZXNfMSA9IGVudHJpZXM7IF9pIDwgZW50cmllc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBfYyA9IGVudHJpZXNfMVtfaV0sIGtleSA9IF9jWzBdLCBuZXN0ZWRWYWx1ZSA9IF9jWzFdO1xyXG4gICAgICAgIHZhciBzdGF0ZV8yID0gX2xvb3BfMihrZXksIG5lc3RlZFZhbHVlKTtcclxuICAgICAgICBpZiAodHlwZW9mIHN0YXRlXzIgPT09IFwib2JqZWN0XCIpXHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZV8yLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgaWYgKGNhY2hlICYmIGlzTmVzdGVkRnJvemVuKHZhbHVlKSlcclxuICAgICAgICBjYWNoZS5hZGQodmFsdWUpO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIGlzTmVzdGVkRnJvemVuKHZhbHVlKSB7XHJcbiAgICBpZiAoIU9iamVjdC5pc0Zyb3plbih2YWx1ZSkpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYyA9IE9iamVjdC52YWx1ZXModmFsdWUpOyBfaSA8IF9jLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBuZXN0ZWRWYWx1ZSA9IF9jW19pXTtcclxuICAgICAgICBpZiAodHlwZW9mIG5lc3RlZFZhbHVlICE9PSBcIm9iamVjdFwiIHx8IG5lc3RlZFZhbHVlID09PSBudWxsKVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICBpZiAoIWlzTmVzdGVkRnJvemVuKG5lc3RlZFZhbHVlKSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7IHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBuZXh0KGFjdGlvbik7IH07IH07IH07XHJcbiAgICB9XHJcbiAgICB2YXIgX2MgPSBvcHRpb25zLmlzU2VyaWFsaXphYmxlLCBpc1NlcmlhbGl6YWJsZSA9IF9jID09PSB2b2lkIDAgPyBpc1BsYWluIDogX2MsIGdldEVudHJpZXMgPSBvcHRpb25zLmdldEVudHJpZXMsIF9kID0gb3B0aW9ucy5pZ25vcmVkQWN0aW9ucywgaWdub3JlZEFjdGlvbnMgPSBfZCA9PT0gdm9pZCAwID8gW10gOiBfZCwgX2UgPSBvcHRpb25zLmlnbm9yZWRBY3Rpb25QYXRocywgaWdub3JlZEFjdGlvblBhdGhzID0gX2UgPT09IHZvaWQgMCA/IFtcIm1ldGEuYXJnXCIsIFwibWV0YS5iYXNlUXVlcnlNZXRhXCJdIDogX2UsIF9mID0gb3B0aW9ucy5pZ25vcmVkUGF0aHMsIGlnbm9yZWRQYXRocyA9IF9mID09PSB2b2lkIDAgPyBbXSA6IF9mLCBfZyA9IG9wdGlvbnMud2FybkFmdGVyLCB3YXJuQWZ0ZXIgPSBfZyA9PT0gdm9pZCAwID8gMzIgOiBfZywgX2ggPSBvcHRpb25zLmlnbm9yZVN0YXRlLCBpZ25vcmVTdGF0ZSA9IF9oID09PSB2b2lkIDAgPyBmYWxzZSA6IF9oLCBfaiA9IG9wdGlvbnMuaWdub3JlQWN0aW9ucywgaWdub3JlQWN0aW9ucyA9IF9qID09PSB2b2lkIDAgPyBmYWxzZSA6IF9qLCBfayA9IG9wdGlvbnMuZGlzYWJsZUNhY2hlLCBkaXNhYmxlQ2FjaGUgPSBfayA9PT0gdm9pZCAwID8gZmFsc2UgOiBfaztcclxuICAgIHZhciBjYWNoZSA9ICFkaXNhYmxlQ2FjaGUgJiYgV2Vha1NldCA/IG5ldyBXZWFrU2V0KCkgOiB2b2lkIDA7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlQVBJKSB7IHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBuZXh0KGFjdGlvbik7XHJcbiAgICAgICAgdmFyIG1lYXN1cmVVdGlscyA9IGdldFRpbWVNZWFzdXJlVXRpbHMod2FybkFmdGVyLCBcIlNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZVwiKTtcclxuICAgICAgICBpZiAoIWlnbm9yZUFjdGlvbnMgJiYgIShpZ25vcmVkQWN0aW9ucy5sZW5ndGggJiYgaWdub3JlZEFjdGlvbnMuaW5kZXhPZihhY3Rpb24udHlwZSkgIT09IC0xKSkge1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUoYWN0aW9uLCBcIlwiLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZEFjdGlvblBhdGhzLCBjYWNoZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXlQYXRoID0gZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZS5rZXlQYXRoLCB2YWx1ZSA9IGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSB3YXMgZGV0ZWN0ZWQgaW4gYW4gYWN0aW9uLCBpbiB0aGUgcGF0aDogYFwiICsga2V5UGF0aCArIFwiYC4gVmFsdWU6XCIsIHZhbHVlLCBcIlxcblRha2UgYSBsb29rIGF0IHRoZSBsb2dpYyB0aGF0IGRpc3BhdGNoZWQgdGhpcyBhY3Rpb246IFwiLCBhY3Rpb24sIFwiXFxuKFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy9mYXEvYWN0aW9ucyN3aHktc2hvdWxkLXR5cGUtYmUtYS1zdHJpbmctb3ItYXQtbGVhc3Qtc2VyaWFsaXphYmxlLXdoeS1zaG91bGQtbXktYWN0aW9uLXR5cGVzLWJlLWNvbnN0YW50cylcIiwgXCJcXG4oVG8gYWxsb3cgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZXMgc2VlOiBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL3VzYWdlL3VzYWdlLWd1aWRlI3dvcmtpbmctd2l0aC1ub24tc2VyaWFsaXphYmxlLWRhdGEpXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpZ25vcmVTdGF0ZSkge1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gc3RvcmVBUEkuZ2V0U3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIHZhciBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUoc3RhdGUsIFwiXCIsIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkUGF0aHMsIGNhY2hlKTtcclxuICAgICAgICAgICAgICAgIGlmIChmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5UGF0aCA9IGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZS5rZXlQYXRoLCB2YWx1ZSA9IGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQSBub24tc2VyaWFsaXphYmxlIHZhbHVlIHdhcyBkZXRlY3RlZCBpbiB0aGUgc3RhdGUsIGluIHRoZSBwYXRoOiBgXCIgKyBrZXlQYXRoICsgXCJgLiBWYWx1ZTpcIiwgdmFsdWUsIFwiXFxuVGFrZSBhIGxvb2sgYXQgdGhlIHJlZHVjZXIocykgaGFuZGxpbmcgdGhpcyBhY3Rpb24gdHlwZTogXCIgKyBhY3Rpb24udHlwZSArIFwiLlxcbihTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvZmFxL29yZ2FuaXppbmctc3RhdGUjY2FuLWktcHV0LWZ1bmN0aW9ucy1wcm9taXNlcy1vci1vdGhlci1ub24tc2VyaWFsaXphYmxlLWl0ZW1zLWluLW15LXN0b3JlLXN0YXRlKVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy53YXJuSWZFeGNlZWRlZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTsgfTsgfTtcclxufVxyXG4vLyBzcmMvZ2V0RGVmYXVsdE1pZGRsZXdhcmUudHNcclxuZnVuY3Rpb24gaXNCb29sZWFuKHgpIHtcclxuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXCJib29sZWFuXCI7XHJcbn1cclxuZnVuY3Rpb24gY3VycnlHZXREZWZhdWx0TWlkZGxld2FyZSgpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiBnZXREZWZhdWx0TWlkZGxld2FyZShvcHRpb25zKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gZ2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIHZhciBfYyA9IG9wdGlvbnMudGh1bmssIHRodW5rID0gX2MgPT09IHZvaWQgMCA/IHRydWUgOiBfYywgX2QgPSBvcHRpb25zLmltbXV0YWJsZUNoZWNrLCBpbW11dGFibGVDaGVjayA9IF9kID09PSB2b2lkIDAgPyB0cnVlIDogX2QsIF9lID0gb3B0aW9ucy5zZXJpYWxpemFibGVDaGVjaywgc2VyaWFsaXphYmxlQ2hlY2sgPSBfZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9lO1xyXG4gICAgdmFyIG1pZGRsZXdhcmVBcnJheSA9IG5ldyBNaWRkbGV3YXJlQXJyYXkoKTtcclxuICAgIGlmICh0aHVuaykge1xyXG4gICAgICAgIGlmIChpc0Jvb2xlYW4odGh1bmspKSB7XHJcbiAgICAgICAgICAgIG1pZGRsZXdhcmVBcnJheS5wdXNoKHRodW5rTWlkZGxld2FyZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaCh0aHVua01pZGRsZXdhcmUud2l0aEV4dHJhQXJndW1lbnQodGh1bmsuZXh0cmFBcmd1bWVudCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICBpZiAoaW1tdXRhYmxlQ2hlY2spIHtcclxuICAgICAgICAgICAgdmFyIGltbXV0YWJsZU9wdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgaWYgKCFpc0Jvb2xlYW4oaW1tdXRhYmxlQ2hlY2spKSB7XHJcbiAgICAgICAgICAgICAgICBpbW11dGFibGVPcHRpb25zID0gaW1tdXRhYmxlQ2hlY2s7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWlkZGxld2FyZUFycmF5LnVuc2hpZnQoY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKGltbXV0YWJsZU9wdGlvbnMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNlcmlhbGl6YWJsZUNoZWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBzZXJpYWxpemFibGVPcHRpb25zID0ge307XHJcbiAgICAgICAgICAgIGlmICghaXNCb29sZWFuKHNlcmlhbGl6YWJsZUNoZWNrKSkge1xyXG4gICAgICAgICAgICAgICAgc2VyaWFsaXphYmxlT3B0aW9ucyA9IHNlcmlhbGl6YWJsZUNoZWNrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1pZGRsZXdhcmVBcnJheS5wdXNoKGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShzZXJpYWxpemFibGVPcHRpb25zKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1pZGRsZXdhcmVBcnJheTtcclxufVxyXG4vLyBzcmMvY29uZmlndXJlU3RvcmUudHNcclxudmFyIElTX1BST0RVQ1RJT04gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCI7XHJcbmZ1bmN0aW9uIGNvbmZpZ3VyZVN0b3JlKG9wdGlvbnMpIHtcclxuICAgIHZhciBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUgPSBjdXJyeUdldERlZmF1bHRNaWRkbGV3YXJlKCk7XHJcbiAgICB2YXIgX2MgPSBvcHRpb25zIHx8IHt9LCBfZCA9IF9jLnJlZHVjZXIsIHJlZHVjZXIgPSBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QsIF9lID0gX2MubWlkZGxld2FyZSwgbWlkZGxld2FyZSA9IF9lID09PSB2b2lkIDAgPyBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUoKSA6IF9lLCBfZiA9IF9jLmRldlRvb2xzLCBkZXZUb29scyA9IF9mID09PSB2b2lkIDAgPyB0cnVlIDogX2YsIF9nID0gX2MucHJlbG9hZGVkU3RhdGUsIHByZWxvYWRlZFN0YXRlID0gX2cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nLCBfaCA9IF9jLmVuaGFuY2VycywgZW5oYW5jZXJzID0gX2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9oO1xyXG4gICAgdmFyIHJvb3RSZWR1Y2VyO1xyXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICByb290UmVkdWNlciA9IHJlZHVjZXI7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHJlZHVjZXIpKSB7XHJcbiAgICAgICAgcm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMocmVkdWNlcik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wicmVkdWNlclwiIGlzIGEgcmVxdWlyZWQgYXJndW1lbnQsIGFuZCBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0IG9mIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gY29tYmluZVJlZHVjZXJzJyk7XHJcbiAgICB9XHJcbiAgICB2YXIgZmluYWxNaWRkbGV3YXJlID0gbWlkZGxld2FyZTtcclxuICAgIGlmICh0eXBlb2YgZmluYWxNaWRkbGV3YXJlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBmaW5hbE1pZGRsZXdhcmUgPSBmaW5hbE1pZGRsZXdhcmUoY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKTtcclxuICAgICAgICBpZiAoIUlTX1BST0RVQ1RJT04gJiYgIUFycmF5LmlzQXJyYXkoZmluYWxNaWRkbGV3YXJlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3aGVuIHVzaW5nIGEgbWlkZGxld2FyZSBidWlsZGVyIGZ1bmN0aW9uLCBhbiBhcnJheSBvZiBtaWRkbGV3YXJlIG11c3QgYmUgcmV0dXJuZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFJU19QUk9EVUNUSU9OICYmIGZpbmFsTWlkZGxld2FyZS5zb21lKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiB0eXBlb2YgaXRlbSAhPT0gXCJmdW5jdGlvblwiOyB9KSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImVhY2ggbWlkZGxld2FyZSBwcm92aWRlZCB0byBjb25maWd1cmVTdG9yZSBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XHJcbiAgICB9XHJcbiAgICB2YXIgbWlkZGxld2FyZUVuaGFuY2VyID0gYXBwbHlNaWRkbGV3YXJlLmFwcGx5KHZvaWQgMCwgZmluYWxNaWRkbGV3YXJlKTtcclxuICAgIHZhciBmaW5hbENvbXBvc2UgPSBjb21wb3NlMjtcclxuICAgIGlmIChkZXZUb29scykge1xyXG4gICAgICAgIGZpbmFsQ29tcG9zZSA9IGNvbXBvc2VXaXRoRGV2VG9vbHMoX19zcHJlYWRWYWx1ZXMoe1xyXG4gICAgICAgICAgICB0cmFjZTogIUlTX1BST0RVQ1RJT05cclxuICAgICAgICB9LCB0eXBlb2YgZGV2VG9vbHMgPT09IFwib2JqZWN0XCIgJiYgZGV2VG9vbHMpKTtcclxuICAgIH1cclxuICAgIHZhciBkZWZhdWx0RW5oYW5jZXJzID0gbmV3IEVuaGFuY2VyQXJyYXkobWlkZGxld2FyZUVuaGFuY2VyKTtcclxuICAgIHZhciBzdG9yZUVuaGFuY2VycyA9IGRlZmF1bHRFbmhhbmNlcnM7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlbmhhbmNlcnMpKSB7XHJcbiAgICAgICAgc3RvcmVFbmhhbmNlcnMgPSBfX3NwcmVhZEFycmF5KFttaWRkbGV3YXJlRW5oYW5jZXJdLCBlbmhhbmNlcnMpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIGVuaGFuY2VycyA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgc3RvcmVFbmhhbmNlcnMgPSBlbmhhbmNlcnMoZGVmYXVsdEVuaGFuY2Vycyk7XHJcbiAgICB9XHJcbiAgICB2YXIgY29tcG9zZWRFbmhhbmNlciA9IGZpbmFsQ29tcG9zZS5hcHBseSh2b2lkIDAsIHN0b3JlRW5oYW5jZXJzKTtcclxuICAgIHJldHVybiBjcmVhdGVTdG9yZShyb290UmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGNvbXBvc2VkRW5oYW5jZXIpO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVBY3Rpb24udHNcclxuZnVuY3Rpb24gY3JlYXRlQWN0aW9uKHR5cGUsIHByZXBhcmVBY3Rpb24pIHtcclxuICAgIGZ1bmN0aW9uIGFjdGlvbkNyZWF0b3IoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcmVwYXJlQWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBwcmVwYXJlZCA9IHByZXBhcmVBY3Rpb24uYXBwbHkodm9pZCAwLCBhcmdzKTtcclxuICAgICAgICAgICAgaWYgKCFwcmVwYXJlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicHJlcGFyZUFjdGlvbiBkaWQgbm90IHJldHVybiBhbiBvYmplY3RcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBwcmVwYXJlZC5wYXlsb2FkXHJcbiAgICAgICAgICAgIH0sIFwibWV0YVwiIGluIHByZXBhcmVkICYmIHsgbWV0YTogcHJlcGFyZWQubWV0YSB9KSwgXCJlcnJvclwiIGluIHByZXBhcmVkICYmIHsgZXJyb3I6IHByZXBhcmVkLmVycm9yIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBhcmdzWzBdIH07XHJcbiAgICB9XHJcbiAgICBhY3Rpb25DcmVhdG9yLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gXCJcIiArIHR5cGU7IH07XHJcbiAgICBhY3Rpb25DcmVhdG9yLnR5cGUgPSB0eXBlO1xyXG4gICAgYWN0aW9uQ3JlYXRvci5tYXRjaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGFjdGlvbi50eXBlID09PSB0eXBlOyB9O1xyXG4gICAgcmV0dXJuIGFjdGlvbkNyZWF0b3I7XHJcbn1cclxuZnVuY3Rpb24gaXNBY3Rpb24oYWN0aW9uKSB7XHJcbiAgICByZXR1cm4gaXNQbGFpbk9iamVjdChhY3Rpb24pICYmIFwidHlwZVwiIGluIGFjdGlvbjtcclxufVxyXG5mdW5jdGlvbiBpc0ZTQShhY3Rpb24pIHtcclxuICAgIHJldHVybiBpc0FjdGlvbihhY3Rpb24pICYmIHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBPYmplY3Qua2V5cyhhY3Rpb24pLmV2ZXJ5KGlzVmFsaWRLZXkpO1xyXG59XHJcbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5KSB7XHJcbiAgICByZXR1cm4gW1widHlwZVwiLCBcInBheWxvYWRcIiwgXCJlcnJvclwiLCBcIm1ldGFcIl0uaW5kZXhPZihrZXkpID4gLTE7XHJcbn1cclxuZnVuY3Rpb24gZ2V0VHlwZShhY3Rpb25DcmVhdG9yKSB7XHJcbiAgICByZXR1cm4gXCJcIiArIGFjdGlvbkNyZWF0b3I7XHJcbn1cclxuLy8gc3JjL2NyZWF0ZVJlZHVjZXIudHNcclxuaW1wb3J0IGNyZWF0ZU5leHRTdGF0ZTIsIHsgaXNEcmFmdCBhcyBpc0RyYWZ0MiwgaXNEcmFmdGFibGUgYXMgaXNEcmFmdGFibGUyIH0gZnJvbSBcImltbWVyXCI7XHJcbi8vIHNyYy9tYXBCdWlsZGVycy50c1xyXG5mdW5jdGlvbiBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayhidWlsZGVyQ2FsbGJhY2spIHtcclxuICAgIHZhciBhY3Rpb25zTWFwID0ge307XHJcbiAgICB2YXIgYWN0aW9uTWF0Y2hlcnMgPSBbXTtcclxuICAgIHZhciBkZWZhdWx0Q2FzZVJlZHVjZXI7XHJcbiAgICB2YXIgYnVpbGRlciA9IHtcclxuICAgICAgICBhZGRDYXNlOiBmdW5jdGlvbiAodHlwZU9yQWN0aW9uQ3JlYXRvciwgcmVkdWNlcikge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uTWF0Y2hlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImBidWlsZGVyLmFkZENhc2VgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYnVpbGRlci5hZGRNYXRjaGVyYFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgYnVpbGRlci5hZGRDYXNlYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHR5cGVPckFjdGlvbkNyZWF0b3IgPT09IFwic3RyaW5nXCIgPyB0eXBlT3JBY3Rpb25DcmVhdG9yIDogdHlwZU9yQWN0aW9uQ3JlYXRvci50eXBlO1xyXG4gICAgICAgICAgICBpZiAodHlwZSBpbiBhY3Rpb25zTWFwKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhZGRDYXNlIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCB0d28gcmVkdWNlcnMgZm9yIHRoZSBzYW1lIGFjdGlvbiB0eXBlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGlvbnNNYXBbdHlwZV0gPSByZWR1Y2VyO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZE1hdGNoZXI6IGZ1bmN0aW9uIChtYXRjaGVyLCByZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgYnVpbGRlci5hZGRNYXRjaGVyYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGlvbk1hdGNoZXJzLnB1c2goeyBtYXRjaGVyOiBtYXRjaGVyLCByZWR1Y2VyOiByZWR1Y2VyIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZERlZmF1bHRDYXNlOiBmdW5jdGlvbiAocmVkdWNlcikge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHRDYXNlUmVkdWNlciA9IHJlZHVjZXI7XHJcbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBidWlsZGVyQ2FsbGJhY2soYnVpbGRlcik7XHJcbiAgICByZXR1cm4gW2FjdGlvbnNNYXAsIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXJdO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVSZWR1Y2VyLnRzXHJcbmZ1bmN0aW9uIGlzU3RhdGVGdW5jdGlvbih4KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIjtcclxufVxyXG52YXIgaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbiA9IGZhbHNlO1xyXG5mdW5jdGlvbiBjcmVhdGVSZWR1Y2VyKGluaXRpYWxTdGF0ZSwgbWFwT3JCdWlsZGVyQ2FsbGJhY2ssIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgIGlmIChhY3Rpb25NYXRjaGVycyA9PT0gdm9pZCAwKSB7IGFjdGlvbk1hdGNoZXJzID0gW107IH1cclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG1hcE9yQnVpbGRlckNhbGxiYWNrID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIGlmICghaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJUaGUgb2JqZWN0IG5vdGF0aW9uIGZvciBgY3JlYXRlUmVkdWNlcmAgaXMgZGVwcmVjYXRlZCwgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBSVEsgMi4wLiBQbGVhc2UgdXNlIHRoZSAnYnVpbGRlciBjYWxsYmFjaycgbm90YXRpb24gaW5zdGVhZDogaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy9hcGkvY3JlYXRlUmVkdWNlclwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciBfYyA9IHR5cGVvZiBtYXBPckJ1aWxkZXJDYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiID8gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2sobWFwT3JCdWlsZGVyQ2FsbGJhY2spIDogW21hcE9yQnVpbGRlckNhbGxiYWNrLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyXSwgYWN0aW9uc01hcCA9IF9jWzBdLCBmaW5hbEFjdGlvbk1hdGNoZXJzID0gX2NbMV0sIGZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyID0gX2NbMl07XHJcbiAgICB2YXIgZ2V0SW5pdGlhbFN0YXRlO1xyXG4gICAgaWYgKGlzU3RhdGVGdW5jdGlvbihpbml0aWFsU3RhdGUpKSB7XHJcbiAgICAgICAgZ2V0SW5pdGlhbFN0YXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnJlZXplRHJhZnRhYmxlKGluaXRpYWxTdGF0ZSgpKTsgfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhciBmcm96ZW5Jbml0aWFsU3RhdGVfMSA9IGZyZWV6ZURyYWZ0YWJsZShpbml0aWFsU3RhdGUpO1xyXG4gICAgICAgIGdldEluaXRpYWxTdGF0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZyb3plbkluaXRpYWxTdGF0ZV8xOyB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XHJcbiAgICAgICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHsgc3RhdGUgPSBnZXRJbml0aWFsU3RhdGUoKTsgfVxyXG4gICAgICAgIHZhciBjYXNlUmVkdWNlcnMgPSBfX3NwcmVhZEFycmF5KFtcclxuICAgICAgICAgICAgYWN0aW9uc01hcFthY3Rpb24udHlwZV1cclxuICAgICAgICBdLCBmaW5hbEFjdGlvbk1hdGNoZXJzLmZpbHRlcihmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgdmFyIG1hdGNoZXIgPSBfYy5tYXRjaGVyO1xyXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgICAgIH0pLm1hcChmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgdmFyIHJlZHVjZXIyID0gX2MucmVkdWNlcjtcclxuICAgICAgICAgICAgcmV0dXJuIHJlZHVjZXIyO1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBpZiAoY2FzZVJlZHVjZXJzLmZpbHRlcihmdW5jdGlvbiAoY3IpIHsgcmV0dXJuICEhY3I7IH0pLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjYXNlUmVkdWNlcnMgPSBbZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2FzZVJlZHVjZXJzLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXNTdGF0ZSwgY2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgaWYgKGNhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNEcmFmdDIocHJldmlvdXNTdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZHJhZnQgPSBwcmV2aW91c1N0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjYXNlUmVkdWNlcihkcmFmdCwgYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICghaXNEcmFmdGFibGUyKHByZXZpb3VzU3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNhc2VSZWR1Y2VyKHByZXZpb3VzU3RhdGUsIGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2aW91c1N0YXRlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkEgY2FzZSByZWR1Y2VyIG9uIGEgbm9uLWRyYWZ0YWJsZSB2YWx1ZSBtdXN0IG5vdCByZXR1cm4gdW5kZWZpbmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU5leHRTdGF0ZTIocHJldmlvdXNTdGF0ZSwgZnVuY3Rpb24gKGRyYWZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYXNlUmVkdWNlcihkcmFmdCwgYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcclxuICAgICAgICB9LCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICByZWR1Y2VyLmdldEluaXRpYWxTdGF0ZSA9IGdldEluaXRpYWxTdGF0ZTtcclxuICAgIHJldHVybiByZWR1Y2VyO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVTbGljZS50c1xyXG52YXIgaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbjIgPSBmYWxzZTtcclxuZnVuY3Rpb24gZ2V0VHlwZTIoc2xpY2UsIGFjdGlvbktleSkge1xyXG4gICAgcmV0dXJuIHNsaWNlICsgXCIvXCIgKyBhY3Rpb25LZXk7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlU2xpY2Uob3B0aW9ucykge1xyXG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWU7XHJcbiAgICBpZiAoIW5hbWUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgbmFtZWAgaXMgYSByZXF1aXJlZCBvcHRpb24gZm9yIGNyZWF0ZVNsaWNlXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHtcclxuICAgICAgICBpZiAob3B0aW9ucy5pbml0aWFsU3RhdGUgPT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91IG11c3QgcHJvdmlkZSBhbiBgaW5pdGlhbFN0YXRlYCB2YWx1ZSB0aGF0IGlzIG5vdCBgdW5kZWZpbmVkYC4gWW91IG1heSBoYXZlIG1pc3NwZWxsZWQgYGluaXRpYWxTdGF0ZWBcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHR5cGVvZiBvcHRpb25zLmluaXRpYWxTdGF0ZSA9PSBcImZ1bmN0aW9uXCIgPyBvcHRpb25zLmluaXRpYWxTdGF0ZSA6IGZyZWV6ZURyYWZ0YWJsZShvcHRpb25zLmluaXRpYWxTdGF0ZSk7XHJcbiAgICB2YXIgcmVkdWNlcnMgPSBvcHRpb25zLnJlZHVjZXJzIHx8IHt9O1xyXG4gICAgdmFyIHJlZHVjZXJOYW1lcyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcclxuICAgIHZhciBzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZSA9IHt9O1xyXG4gICAgdmFyIHNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlID0ge307XHJcbiAgICB2YXIgYWN0aW9uQ3JlYXRvcnMgPSB7fTtcclxuICAgIHJlZHVjZXJOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWR1Y2VyTmFtZSkge1xyXG4gICAgICAgIHZhciBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZSA9IHJlZHVjZXJzW3JlZHVjZXJOYW1lXTtcclxuICAgICAgICB2YXIgdHlwZSA9IGdldFR5cGUyKG5hbWUsIHJlZHVjZXJOYW1lKTtcclxuICAgICAgICB2YXIgY2FzZVJlZHVjZXI7XHJcbiAgICAgICAgdmFyIHByZXBhcmVDYWxsYmFjaztcclxuICAgICAgICBpZiAoXCJyZWR1Y2VyXCIgaW4gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUpIHtcclxuICAgICAgICAgICAgY2FzZVJlZHVjZXIgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZS5yZWR1Y2VyO1xyXG4gICAgICAgICAgICBwcmVwYXJlQ2FsbGJhY2sgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZS5wcmVwYXJlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY2FzZVJlZHVjZXIgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWVbcmVkdWNlck5hbWVdID0gY2FzZVJlZHVjZXI7XHJcbiAgICAgICAgc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGVbdHlwZV0gPSBjYXNlUmVkdWNlcjtcclxuICAgICAgICBhY3Rpb25DcmVhdG9yc1tyZWR1Y2VyTmFtZV0gPSBwcmVwYXJlQ2FsbGJhY2sgPyBjcmVhdGVBY3Rpb24odHlwZSwgcHJlcGFyZUNhbGxiYWNrKSA6IGNyZWF0ZUFjdGlvbih0eXBlKTtcclxuICAgIH0pO1xyXG4gICAgZnVuY3Rpb24gYnVpbGRSZWR1Y2VyKCkge1xyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmV4dHJhUmVkdWNlcnMgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICghaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbjIpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYXNXYXJuZWRBYm91dE9iamVjdE5vdGF0aW9uMiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVGhlIG9iamVjdCBub3RhdGlvbiBmb3IgYGNyZWF0ZVNsaWNlLmV4dHJhUmVkdWNlcnNgIGlzIGRlcHJlY2F0ZWQsIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gUlRLIDIuMC4gUGxlYXNlIHVzZSB0aGUgJ2J1aWxkZXIgY2FsbGJhY2snIG5vdGF0aW9uIGluc3RlYWQ6IGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvYXBpL2NyZWF0ZVNsaWNlXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBfYyA9IHR5cGVvZiBvcHRpb25zLmV4dHJhUmVkdWNlcnMgPT09IFwiZnVuY3Rpb25cIiA/IGV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrKG9wdGlvbnMuZXh0cmFSZWR1Y2VycykgOiBbb3B0aW9ucy5leHRyYVJlZHVjZXJzXSwgX2QgPSBfY1swXSwgZXh0cmFSZWR1Y2VycyA9IF9kID09PSB2b2lkIDAgPyB7fSA6IF9kLCBfZSA9IF9jWzFdLCBhY3Rpb25NYXRjaGVycyA9IF9lID09PSB2b2lkIDAgPyBbXSA6IF9lLCBfZiA9IF9jWzJdLCBkZWZhdWx0Q2FzZVJlZHVjZXIgPSBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Y7XHJcbiAgICAgICAgdmFyIGZpbmFsQ2FzZVJlZHVjZXJzID0gX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe30sIGV4dHJhUmVkdWNlcnMpLCBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVJlZHVjZXIoaW5pdGlhbFN0YXRlLCBmdW5jdGlvbiAoYnVpbGRlcikge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZmluYWxDYXNlUmVkdWNlcnMpIHtcclxuICAgICAgICAgICAgICAgIGJ1aWxkZXIuYWRkQ2FzZShrZXksIGZpbmFsQ2FzZVJlZHVjZXJzW2tleV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgYWN0aW9uTWF0Y2hlcnNfMSA9IGFjdGlvbk1hdGNoZXJzOyBfaSA8IGFjdGlvbk1hdGNoZXJzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbSA9IGFjdGlvbk1hdGNoZXJzXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgYnVpbGRlci5hZGRNYXRjaGVyKG0ubWF0Y2hlciwgbS5yZWR1Y2VyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICBidWlsZGVyLmFkZERlZmF1bHRDYXNlKGRlZmF1bHRDYXNlUmVkdWNlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHZhciBfcmVkdWNlcjtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICByZWR1Y2VyOiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoIV9yZWR1Y2VyKVxyXG4gICAgICAgICAgICAgICAgX3JlZHVjZXIgPSBidWlsZFJlZHVjZXIoKTtcclxuICAgICAgICAgICAgcmV0dXJuIF9yZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWN0aW9uczogYWN0aW9uQ3JlYXRvcnMsXHJcbiAgICAgICAgY2FzZVJlZHVjZXJzOiBzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZSxcclxuICAgICAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFfcmVkdWNlcilcclxuICAgICAgICAgICAgICAgIF9yZWR1Y2VyID0gYnVpbGRSZWR1Y2VyKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBfcmVkdWNlci5nZXRJbml0aWFsU3RhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy9lbnRpdHlfc3RhdGUudHNcclxuZnVuY3Rpb24gZ2V0SW5pdGlhbEVudGl0eVN0YXRlKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpZHM6IFtdLFxyXG4gICAgICAgIGVudGl0aWVzOiB7fVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJbml0aWFsU3RhdGVGYWN0b3J5KCkge1xyXG4gICAgZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKGFkZGl0aW9uYWxTdGF0ZSkge1xyXG4gICAgICAgIGlmIChhZGRpdGlvbmFsU3RhdGUgPT09IHZvaWQgMCkgeyBhZGRpdGlvbmFsU3RhdGUgPSB7fTsgfVxyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGdldEluaXRpYWxFbnRpdHlTdGF0ZSgpLCBhZGRpdGlvbmFsU3RhdGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgZ2V0SW5pdGlhbFN0YXRlOiBnZXRJbml0aWFsU3RhdGUgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvc3RhdGVfc2VsZWN0b3JzLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yc0ZhY3RvcnkoKSB7XHJcbiAgICBmdW5jdGlvbiBnZXRTZWxlY3RvcnMoc2VsZWN0U3RhdGUpIHtcclxuICAgICAgICB2YXIgc2VsZWN0SWRzID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS5pZHM7IH07XHJcbiAgICAgICAgdmFyIHNlbGVjdEVudGl0aWVzID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS5lbnRpdGllczsgfTtcclxuICAgICAgICB2YXIgc2VsZWN0QWxsID0gY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0SWRzLCBzZWxlY3RFbnRpdGllcywgZnVuY3Rpb24gKGlkcywgZW50aXRpZXMpIHsgcmV0dXJuIGlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7IHJldHVybiBlbnRpdGllc1tpZF07IH0pOyB9KTtcclxuICAgICAgICB2YXIgc2VsZWN0SWQgPSBmdW5jdGlvbiAoXywgaWQpIHsgcmV0dXJuIGlkOyB9O1xyXG4gICAgICAgIHZhciBzZWxlY3RCeUlkID0gZnVuY3Rpb24gKGVudGl0aWVzLCBpZCkgeyByZXR1cm4gZW50aXRpZXNbaWRdOyB9O1xyXG4gICAgICAgIHZhciBzZWxlY3RUb3RhbCA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdElkcywgZnVuY3Rpb24gKGlkcykgeyByZXR1cm4gaWRzLmxlbmd0aDsgfSk7XHJcbiAgICAgICAgaWYgKCFzZWxlY3RTdGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0SWRzOiBzZWxlY3RJZHMsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RFbnRpdGllczogc2VsZWN0RW50aXRpZXMsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RBbGw6IHNlbGVjdEFsbCxcclxuICAgICAgICAgICAgICAgIHNlbGVjdFRvdGFsOiBzZWxlY3RUb3RhbCxcclxuICAgICAgICAgICAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdEVudGl0aWVzLCBzZWxlY3RJZCwgc2VsZWN0QnlJZClcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RFbnRpdGllcyk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2VsZWN0SWRzOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0SWRzKSxcclxuICAgICAgICAgICAgc2VsZWN0RW50aXRpZXM6IHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyxcclxuICAgICAgICAgICAgc2VsZWN0QWxsOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0QWxsKSxcclxuICAgICAgICAgICAgc2VsZWN0VG90YWw6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RUb3RhbCksXHJcbiAgICAgICAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcywgc2VsZWN0SWQsIHNlbGVjdEJ5SWQpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IGdldFNlbGVjdG9yczogZ2V0U2VsZWN0b3JzIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3N0YXRlX2FkYXB0ZXIudHNcclxuaW1wb3J0IGNyZWF0ZU5leHRTdGF0ZTMsIHsgaXNEcmFmdCBhcyBpc0RyYWZ0MyB9IGZyb20gXCJpbW1lclwiO1xyXG5mdW5jdGlvbiBjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3IobXV0YXRvcikge1xyXG4gICAgdmFyIG9wZXJhdG9yID0gY3JlYXRlU3RhdGVPcGVyYXRvcihmdW5jdGlvbiAoXywgc3RhdGUpIHsgcmV0dXJuIG11dGF0b3Ioc3RhdGUpOyB9KTtcclxuICAgIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb24oc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gb3BlcmF0b3Ioc3RhdGUsIHZvaWQgMCk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVN0YXRlT3BlcmF0b3IobXV0YXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG9wZXJhdGlvbihzdGF0ZSwgYXJnKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQoYXJnMikge1xyXG4gICAgICAgICAgICByZXR1cm4gaXNGU0EoYXJnMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBydW5NdXRhdG9yID0gZnVuY3Rpb24gKGRyYWZ0KSB7XHJcbiAgICAgICAgICAgIGlmIChpc1BheWxvYWRBY3Rpb25Bcmd1bWVudChhcmcpKSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhdG9yKGFyZy5wYXlsb2FkLCBkcmFmdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhdG9yKGFyZywgZHJhZnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoaXNEcmFmdDMoc3RhdGUpKSB7XHJcbiAgICAgICAgICAgIHJ1bk11dGF0b3Ioc3RhdGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTmV4dFN0YXRlMyhzdGF0ZSwgcnVuTXV0YXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvdXRpbHMudHNcclxuZnVuY3Rpb24gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKSB7XHJcbiAgICB2YXIga2V5ID0gc2VsZWN0SWQoZW50aXR5KTtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYga2V5ID09PSB2b2lkIDApIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXCJUaGUgZW50aXR5IHBhc3NlZCB0byB0aGUgYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbiByZXR1cm5lZCB1bmRlZmluZWQuXCIsIFwiWW91IHNob3VsZCBwcm9iYWJseSBwcm92aWRlIHlvdXIgb3duIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24uXCIsIFwiVGhlIGVudGl0eSB0aGF0IHdhcyBwYXNzZWQ6XCIsIGVudGl0eSwgXCJUaGUgYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbjpcIiwgc2VsZWN0SWQudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ga2V5O1xyXG59XHJcbmZ1bmN0aW9uIGVuc3VyZUVudGl0aWVzQXJyYXkoZW50aXRpZXMpIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRpdGllcykpIHtcclxuICAgICAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVudGl0aWVzO1xyXG59XHJcbmZ1bmN0aW9uIHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSkge1xyXG4gICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgIHZhciBhZGRlZCA9IFtdO1xyXG4gICAgdmFyIHVwZGF0ZWQgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgbmV3RW50aXRpZXNfMSA9IG5ld0VudGl0aWVzOyBfaSA8IG5ld0VudGl0aWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIGVudGl0eSA9IG5ld0VudGl0aWVzXzFbX2ldO1xyXG4gICAgICAgIHZhciBpZCA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XHJcbiAgICAgICAgaWYgKGlkIGluIHN0YXRlLmVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZWQucHVzaCh7IGlkOiBpZCwgY2hhbmdlczogZW50aXR5IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYWRkZWQucHVzaChlbnRpdHkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBbYWRkZWQsIHVwZGF0ZWRdO1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy91bnNvcnRlZF9zdGF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkKSB7XHJcbiAgICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICB2YXIga2V5ID0gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKTtcclxuICAgICAgICBpZiAoa2V5IGluIHN0YXRlLmVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuaWRzLnB1c2goa2V5KTtcclxuICAgICAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG5ld0VudGl0aWVzXzIgPSBuZXdFbnRpdGllczsgX2kgPCBuZXdFbnRpdGllc18yLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gbmV3RW50aXRpZXNfMltfaV07XHJcbiAgICAgICAgICAgIGFkZE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XHJcbiAgICAgICAgaWYgKCEoa2V5IGluIHN0YXRlLmVudGl0aWVzKSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMucHVzaChrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0TWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG5ld0VudGl0aWVzXzMgPSBuZXdFbnRpdGllczsgX2kgPCBuZXdFbnRpdGllc18zLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gbmV3RW50aXRpZXNfM1tfaV07XHJcbiAgICAgICAgICAgIHNldE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0QWxsTXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xyXG4gICAgICAgIHN0YXRlLmlkcyA9IFtdO1xyXG4gICAgICAgIHN0YXRlLmVudGl0aWVzID0ge307XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZU9uZU11dGFibHkoa2V5LCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiByZW1vdmVNYW55TXV0YWJseShba2V5XSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlTWFueU11dGFibHkoa2V5cywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgZGlkTXV0YXRlID0gZmFsc2U7XHJcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgaWYgKGtleSBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW2tleV07XHJcbiAgICAgICAgICAgICAgICBkaWRNdXRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGRpZE11dGF0ZSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMgPSBzdGF0ZS5pZHMuZmlsdGVyKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gaWQgaW4gc3RhdGUuZW50aXRpZXM7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbE11dGFibHkoc3RhdGUpIHtcclxuICAgICAgICBPYmplY3QuYXNzaWduKHN0YXRlLCB7XHJcbiAgICAgICAgICAgIGlkczogW10sXHJcbiAgICAgICAgICAgIGVudGl0aWVzOiB7fVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdGFrZU5ld0tleShrZXlzLCB1cGRhdGUsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIG9yaWdpbmFsMiA9IHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XHJcbiAgICAgICAgdmFyIHVwZGF0ZWQgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbDIsIHVwZGF0ZS5jaGFuZ2VzKTtcclxuICAgICAgICB2YXIgbmV3S2V5ID0gc2VsZWN0SWRWYWx1ZSh1cGRhdGVkLCBzZWxlY3RJZCk7XHJcbiAgICAgICAgdmFyIGhhc05ld0tleSA9IG5ld0tleSAhPT0gdXBkYXRlLmlkO1xyXG4gICAgICAgIGlmIChoYXNOZXdLZXkpIHtcclxuICAgICAgICAgICAga2V5c1t1cGRhdGUuaWRdID0gbmV3S2V5O1xyXG4gICAgICAgICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXNbbmV3S2V5XSA9IHVwZGF0ZWQ7XHJcbiAgICAgICAgcmV0dXJuIGhhc05ld0tleTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU9uZU11dGFibHkodXBkYXRlLCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiB1cGRhdGVNYW55TXV0YWJseShbdXBkYXRlXSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBkYXRlTWFueU11dGFibHkodXBkYXRlcywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgbmV3S2V5cyA9IHt9O1xyXG4gICAgICAgIHZhciB1cGRhdGVzUGVyRW50aXR5ID0ge307XHJcbiAgICAgICAgdXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh1cGRhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHVwZGF0ZS5pZCBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlc1BlckVudGl0eVt1cGRhdGUuaWRdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB1cGRhdGUuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlczogX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe30sIHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXSA/IHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXS5jaGFuZ2VzIDogbnVsbCksIHVwZGF0ZS5jaGFuZ2VzKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHVwZGF0ZXMgPSBPYmplY3QudmFsdWVzKHVwZGF0ZXNQZXJFbnRpdHkpO1xyXG4gICAgICAgIHZhciBkaWRNdXRhdGVFbnRpdGllcyA9IHVwZGF0ZXMubGVuZ3RoID4gMDtcclxuICAgICAgICBpZiAoZGlkTXV0YXRlRW50aXRpZXMpIHtcclxuICAgICAgICAgICAgdmFyIGRpZE11dGF0ZUlkcyA9IHVwZGF0ZXMuZmlsdGVyKGZ1bmN0aW9uICh1cGRhdGUpIHsgcmV0dXJuIHRha2VOZXdLZXkobmV3S2V5cywgdXBkYXRlLCBzdGF0ZSk7IH0pLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgIGlmIChkaWRNdXRhdGVJZHMpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlLmlkcyA9IE9iamVjdC5rZXlzKHN0YXRlLmVudGl0aWVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwc2VydE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiB1cHNlcnRNYW55TXV0YWJseShbZW50aXR5XSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBzZXJ0TWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIF9jID0gc3BsaXRBZGRlZFVwZGF0ZWRFbnRpdGllcyhuZXdFbnRpdGllcywgc2VsZWN0SWQsIHN0YXRlKSwgYWRkZWQgPSBfY1swXSwgdXBkYXRlZCA9IF9jWzFdO1xyXG4gICAgICAgIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZWQsIHN0YXRlKTtcclxuICAgICAgICBhZGRNYW55TXV0YWJseShhZGRlZCwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZW1vdmVBbGw6IGNyZWF0ZVNpbmdsZUFyZ3VtZW50U3RhdGVPcGVyYXRvcihyZW1vdmVBbGxNdXRhYmx5KSxcclxuICAgICAgICBhZGRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkT25lTXV0YWJseSksXHJcbiAgICAgICAgYWRkTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRNYW55TXV0YWJseSksXHJcbiAgICAgICAgc2V0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE9uZU11dGFibHkpLFxyXG4gICAgICAgIHNldE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0TWFueU11dGFibHkpLFxyXG4gICAgICAgIHNldEFsbDogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRBbGxNdXRhYmx5KSxcclxuICAgICAgICB1cGRhdGVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlT25lTXV0YWJseSksXHJcbiAgICAgICAgdXBkYXRlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVNYW55TXV0YWJseSksXHJcbiAgICAgICAgdXBzZXJ0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE9uZU11dGFibHkpLFxyXG4gICAgICAgIHVwc2VydE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0TWFueU11dGFibHkpLFxyXG4gICAgICAgIHJlbW92ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihyZW1vdmVPbmVNdXRhYmx5KSxcclxuICAgICAgICByZW1vdmVNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHJlbW92ZU1hbnlNdXRhYmx5KVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvc29ydGVkX3N0YXRlX2FkYXB0ZXIudHNcclxuZnVuY3Rpb24gY3JlYXRlU29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkLCBzb3J0KSB7XHJcbiAgICB2YXIgX2MgPSBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCksIHJlbW92ZU9uZSA9IF9jLnJlbW92ZU9uZSwgcmVtb3ZlTWFueSA9IF9jLnJlbW92ZU1hbnksIHJlbW92ZUFsbCA9IF9jLnJlbW92ZUFsbDtcclxuICAgIGZ1bmN0aW9uIGFkZE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiBhZGRNYW55TXV0YWJseShbZW50aXR5XSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICB2YXIgbW9kZWxzID0gbmV3RW50aXRpZXMuZmlsdGVyKGZ1bmN0aW9uIChtb2RlbCkgeyByZXR1cm4gIShzZWxlY3RJZFZhbHVlKG1vZGVsLCBzZWxlY3RJZCkgaW4gc3RhdGUuZW50aXRpZXMpOyB9KTtcclxuICAgICAgICBpZiAobW9kZWxzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICBtZXJnZShtb2RlbHMsIHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzZXRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gc2V0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgaWYgKG5ld0VudGl0aWVzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICBtZXJnZShuZXdFbnRpdGllcywgc3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldEFsbE11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBzdGF0ZS5lbnRpdGllcyA9IHt9O1xyXG4gICAgICAgIHN0YXRlLmlkcyA9IFtdO1xyXG4gICAgICAgIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cGRhdGVPbmVNdXRhYmx5KHVwZGF0ZSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBkYXRlTWFueU11dGFibHkoW3VwZGF0ZV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGFwcGxpZWRVcGRhdGVzID0gZmFsc2U7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCB1cGRhdGVzXzEgPSB1cGRhdGVzOyBfaSA8IHVwZGF0ZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IHVwZGF0ZXNfMVtfaV07XHJcbiAgICAgICAgICAgIHZhciBlbnRpdHkgPSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xyXG4gICAgICAgICAgICBpZiAoIWVudGl0eSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXBwbGllZFVwZGF0ZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGVudGl0eSwgdXBkYXRlLmNoYW5nZXMpO1xyXG4gICAgICAgICAgICB2YXIgbmV3SWQgPSBzZWxlY3RJZChlbnRpdHkpO1xyXG4gICAgICAgICAgICBpZiAodXBkYXRlLmlkICE9PSBuZXdJZCkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5lbnRpdGllc1tuZXdJZF0gPSBlbnRpdHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFwcGxpZWRVcGRhdGVzKSB7XHJcbiAgICAgICAgICAgIHJlc29ydEVudGl0aWVzKHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBfYyA9IHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSksIGFkZGVkID0gX2NbMF0sIHVwZGF0ZWQgPSBfY1sxXTtcclxuICAgICAgICB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVkLCBzdGF0ZSk7XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkoYWRkZWQsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFyZUFycmF5c0VxdWFsKGEsIGIpIHtcclxuICAgICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aCAmJiBpIDwgYi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYVtpXSA9PT0gYltpXSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIG1lcmdlKG1vZGVscywgc3RhdGUpIHtcclxuICAgICAgICBtb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAobW9kZWwpIHtcclxuICAgICAgICAgICAgc3RhdGUuZW50aXRpZXNbc2VsZWN0SWQobW9kZWwpXSA9IG1vZGVsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJlc29ydEVudGl0aWVzKHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlc29ydEVudGl0aWVzKHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGFsbEVudGl0aWVzID0gT2JqZWN0LnZhbHVlcyhzdGF0ZS5lbnRpdGllcyk7XHJcbiAgICAgICAgYWxsRW50aXRpZXMuc29ydChzb3J0KTtcclxuICAgICAgICB2YXIgbmV3U29ydGVkSWRzID0gYWxsRW50aXRpZXMubWFwKHNlbGVjdElkKTtcclxuICAgICAgICB2YXIgaWRzID0gc3RhdGUuaWRzO1xyXG4gICAgICAgIGlmICghYXJlQXJyYXlzRXF1YWwoaWRzLCBuZXdTb3J0ZWRJZHMpKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLmlkcyA9IG5ld1NvcnRlZElkcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlbW92ZU9uZTogcmVtb3ZlT25lLFxyXG4gICAgICAgIHJlbW92ZU1hbnk6IHJlbW92ZU1hbnksXHJcbiAgICAgICAgcmVtb3ZlQWxsOiByZW1vdmVBbGwsXHJcbiAgICAgICAgYWRkT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE9uZU11dGFibHkpLFxyXG4gICAgICAgIHVwZGF0ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVPbmVNdXRhYmx5KSxcclxuICAgICAgICB1cHNlcnRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0T25lTXV0YWJseSksXHJcbiAgICAgICAgc2V0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE9uZU11dGFibHkpLFxyXG4gICAgICAgIHNldE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0TWFueU11dGFibHkpLFxyXG4gICAgICAgIHNldEFsbDogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRBbGxNdXRhYmx5KSxcclxuICAgICAgICBhZGRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE1hbnlNdXRhYmx5KSxcclxuICAgICAgICB1cGRhdGVNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU1hbnlNdXRhYmx5KSxcclxuICAgICAgICB1cHNlcnRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE1hbnlNdXRhYmx5KVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvY3JlYXRlX2FkYXB0ZXIudHNcclxuZnVuY3Rpb24gY3JlYXRlRW50aXR5QWRhcHRlcihvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgdmFyIF9jID0gX19zcHJlYWRWYWx1ZXMoe1xyXG4gICAgICAgIHNvcnRDb21wYXJlcjogZmFsc2UsXHJcbiAgICAgICAgc2VsZWN0SWQ6IGZ1bmN0aW9uIChpbnN0YW5jZSkgeyByZXR1cm4gaW5zdGFuY2UuaWQ7IH1cclxuICAgIH0sIG9wdGlvbnMpLCBzZWxlY3RJZCA9IF9jLnNlbGVjdElkLCBzb3J0Q29tcGFyZXIgPSBfYy5zb3J0Q29tcGFyZXI7XHJcbiAgICB2YXIgc3RhdGVGYWN0b3J5ID0gY3JlYXRlSW5pdGlhbFN0YXRlRmFjdG9yeSgpO1xyXG4gICAgdmFyIHNlbGVjdG9yc0ZhY3RvcnkgPSBjcmVhdGVTZWxlY3RvcnNGYWN0b3J5KCk7XHJcbiAgICB2YXIgc3RhdGVBZGFwdGVyID0gc29ydENvbXBhcmVyID8gY3JlYXRlU29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkLCBzb3J0Q29tcGFyZXIpIDogY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpO1xyXG4gICAgcmV0dXJuIF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICBzZWxlY3RJZDogc2VsZWN0SWQsXHJcbiAgICAgICAgc29ydENvbXBhcmVyOiBzb3J0Q29tcGFyZXJcclxuICAgIH0sIHN0YXRlRmFjdG9yeSksIHNlbGVjdG9yc0ZhY3RvcnkpLCBzdGF0ZUFkYXB0ZXIpO1xyXG59XHJcbi8vIHNyYy9uYW5vaWQudHNcclxudmFyIHVybEFscGhhYmV0ID0gXCJNb2R1bGVTeW1iaGFzT3duUHItMDEyMzQ1Njc4OUFCQ0RFRkdITlJWZmdjdGlVdnpfS3FZVEprTHhwWlhJalFXXCI7XHJcbnZhciBuYW5vaWQgPSBmdW5jdGlvbiAoc2l6ZSkge1xyXG4gICAgaWYgKHNpemUgPT09IHZvaWQgMCkgeyBzaXplID0gMjE7IH1cclxuICAgIHZhciBpZCA9IFwiXCI7XHJcbiAgICB2YXIgaSA9IHNpemU7XHJcbiAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgaWQgKz0gdXJsQWxwaGFiZXRbTWF0aC5yYW5kb20oKSAqIDY0IHwgMF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaWQ7XHJcbn07XHJcbi8vIHNyYy9jcmVhdGVBc3luY1RodW5rLnRzXHJcbnZhciBjb21tb25Qcm9wZXJ0aWVzID0gW1xyXG4gICAgXCJuYW1lXCIsXHJcbiAgICBcIm1lc3NhZ2VcIixcclxuICAgIFwic3RhY2tcIixcclxuICAgIFwiY29kZVwiXHJcbl07XHJcbnZhciBSZWplY3RXaXRoVmFsdWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZWplY3RXaXRoVmFsdWUocGF5bG9hZCwgbWV0YSkge1xyXG4gICAgICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XHJcbiAgICAgICAgdGhpcy5tZXRhID0gbWV0YTtcclxuICAgIH1cclxuICAgIHJldHVybiBSZWplY3RXaXRoVmFsdWU7XHJcbn0oKSk7XHJcbnZhciBGdWxmaWxsV2l0aE1ldGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGdWxmaWxsV2l0aE1ldGEocGF5bG9hZCwgbWV0YSkge1xyXG4gICAgICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XHJcbiAgICAgICAgdGhpcy5tZXRhID0gbWV0YTtcclxuICAgIH1cclxuICAgIHJldHVybiBGdWxmaWxsV2l0aE1ldGE7XHJcbn0oKSk7XHJcbnZhciBtaW5pU2VyaWFsaXplRXJyb3IgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICB2YXIgc2ltcGxlRXJyb3IgPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGNvbW1vblByb3BlcnRpZXNfMSA9IGNvbW1vblByb3BlcnRpZXM7IF9pIDwgY29tbW9uUHJvcGVydGllc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgcHJvcGVydHkgPSBjb21tb25Qcm9wZXJ0aWVzXzFbX2ldO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlW3Byb3BlcnR5XSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgc2ltcGxlRXJyb3JbcHJvcGVydHldID0gdmFsdWVbcHJvcGVydHldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzaW1wbGVFcnJvcjtcclxuICAgIH1cclxuICAgIHJldHVybiB7IG1lc3NhZ2U6IFN0cmluZyh2YWx1ZSkgfTtcclxufTtcclxudmFyIGNyZWF0ZUFzeW5jVGh1bmsgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gY3JlYXRlQXN5bmNUaHVuazIodHlwZVByZWZpeCwgcGF5bG9hZENyZWF0b3IsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgZnVsZmlsbGVkID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyBcIi9mdWxmaWxsZWRcIiwgZnVuY3Rpb24gKHBheWxvYWQsIHJlcXVlc3RJZCwgYXJnLCBtZXRhKSB7IHJldHVybiAoe1xyXG4gICAgICAgICAgICBwYXlsb2FkOiBwYXlsb2FkLFxyXG4gICAgICAgICAgICBtZXRhOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBtZXRhIHx8IHt9KSwge1xyXG4gICAgICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RTdGF0dXM6IFwiZnVsZmlsbGVkXCJcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTsgfSk7XHJcbiAgICAgICAgdmFyIHBlbmRpbmcgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArIFwiL3BlbmRpbmdcIiwgZnVuY3Rpb24gKHJlcXVlc3RJZCwgYXJnLCBtZXRhKSB7IHJldHVybiAoe1xyXG4gICAgICAgICAgICBwYXlsb2FkOiB2b2lkIDAsXHJcbiAgICAgICAgICAgIG1ldGE6IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG1ldGEgfHwge30pLCB7XHJcbiAgICAgICAgICAgICAgICBhcmc6IGFyZyxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdFN0YXR1czogXCJwZW5kaW5nXCJcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTsgfSk7XHJcbiAgICAgICAgdmFyIHJlamVjdGVkID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyBcIi9yZWplY3RlZFwiLCBmdW5jdGlvbiAoZXJyb3IsIHJlcXVlc3RJZCwgYXJnLCBwYXlsb2FkLCBtZXRhKSB7IHJldHVybiAoe1xyXG4gICAgICAgICAgICBwYXlsb2FkOiBwYXlsb2FkLFxyXG4gICAgICAgICAgICBlcnJvcjogKG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemVFcnJvciB8fCBtaW5pU2VyaWFsaXplRXJyb3IpKGVycm9yIHx8IFwiUmVqZWN0ZWRcIiksXHJcbiAgICAgICAgICAgIG1ldGE6IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG1ldGEgfHwge30pLCB7XHJcbiAgICAgICAgICAgICAgICBhcmc6IGFyZyxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICAgICAgcmVqZWN0ZWRXaXRoVmFsdWU6ICEhcGF5bG9hZCxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RTdGF0dXM6IFwicmVqZWN0ZWRcIixcclxuICAgICAgICAgICAgICAgIGFib3J0ZWQ6IChlcnJvciA9PSBudWxsID8gdm9pZCAwIDogZXJyb3IubmFtZSkgPT09IFwiQWJvcnRFcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgY29uZGl0aW9uOiAoZXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yLm5hbWUpID09PSBcIkNvbmRpdGlvbkVycm9yXCJcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTsgfSk7XHJcbiAgICAgICAgdmFyIGRpc3BsYXllZFdhcm5pbmcgPSBmYWxzZTtcclxuICAgICAgICB2YXIgQUMgPSB0eXBlb2YgQWJvcnRDb250cm9sbGVyICE9PSBcInVuZGVmaW5lZFwiID8gQWJvcnRDb250cm9sbGVyIDogLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBjbGFzc18xKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaWduYWwgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hFdmVudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBvbmFib3J0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICByZWFzb246IHZvaWQgMCxcclxuICAgICAgICAgICAgICAgICAgICB0aHJvd0lmQWJvcnRlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkaXNwbGF5ZWRXYXJuaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXllZFdhcm5pbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oXCJUaGlzIHBsYXRmb3JtIGRvZXMgbm90IGltcGxlbWVudCBBYm9ydENvbnRyb2xsZXIuIFxcbklmIHlvdSB3YW50IHRvIHVzZSB0aGUgQWJvcnRDb250cm9sbGVyIHRvIHJlYWN0IHRvIGBhYm9ydGAgZXZlbnRzLCBwbGVhc2UgY29uc2lkZXIgaW1wb3J0aW5nIGEgcG9seWZpbGwgbGlrZSAnYWJvcnRjb250cm9sbGVyLXBvbHlmaWxsL2Rpc3QvYWJvcnRjb250cm9sbGVyLXBvbHlmaWxsLW9ubHknLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiBjbGFzc18xO1xyXG4gICAgICAgIH0oKSk7XHJcbiAgICAgICAgZnVuY3Rpb24gYWN0aW9uQ3JlYXRvcihhcmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdElkID0gKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuaWRHZW5lcmF0b3IpID8gb3B0aW9ucy5pZEdlbmVyYXRvcihhcmcpIDogbmFub2lkKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWJvcnRDb250cm9sbGVyID0gbmV3IEFDKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWJvcnRSZWFzb247XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYWJvcnQocmVhc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRSZWFzb24gPSByZWFzb247XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyLmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZTIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2EsIF9iLCBmaW5hbEFjdGlvbiwgY29uZGl0aW9uUmVzdWx0LCBhYm9ydGVkUHJvbWlzZSwgZXJyXzEsIHNraXBEaXNwYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MudHJ5cy5wdXNoKFswLCA0LCAsIDVdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uUmVzdWx0ID0gKF9hID0gb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5jb25kaXRpb24pID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKG9wdGlvbnMsIGFyZywgeyBnZXRTdGF0ZTogZ2V0U3RhdGUsIGV4dHJhOiBleHRyYSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1RoZW5hYmxlKGNvbmRpdGlvblJlc3VsdCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBjb25kaXRpb25SZXN1bHRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uUmVzdWx0ID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9uUmVzdWx0ID09PSBmYWxzZSB8fCBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbmRpdGlvbkVycm9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJBYm9ydGVkIGR1ZSB0byBjb25kaXRpb24gY2FsbGJhY2sgcmV0dXJuaW5nIGZhbHNlLlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChfLCByZWplY3QpIHsgcmV0dXJuIGFib3J0Q29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlamVjdCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkFib3J0RXJyb3JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGFib3J0UmVhc29uIHx8IFwiQWJvcnRlZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyB9KTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHBlbmRpbmcocmVxdWVzdElkLCBhcmcsIChfYiA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuZ2V0UGVuZGluZ01ldGEpID09IG51bGwgPyB2b2lkIDAgOiBfYi5jYWxsKG9wdGlvbnMsIHsgcmVxdWVzdElkOiByZXF1ZXN0SWQsIGFyZzogYXJnIH0sIHsgZ2V0U3RhdGU6IGdldFN0YXRlLCBleHRyYTogZXh0cmEgfSkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5yYWNlKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydGVkUHJvbWlzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUocGF5bG9hZENyZWF0b3IoYXJnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYTogZXh0cmEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0OiBhYm9ydCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0V2l0aFZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIG1ldGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVqZWN0V2l0aFZhbHVlKHZhbHVlLCBtZXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbFdpdGhWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBtZXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZ1bGZpbGxXaXRoTWV0YSh2YWx1ZSwgbWV0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBSZWplY3RXaXRoVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRnVsZmlsbFdpdGhNZXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVsZmlsbGVkKHJlc3VsdC5wYXlsb2FkLCByZXF1ZXN0SWQsIGFyZywgcmVzdWx0Lm1ldGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdWxmaWxsZWQocmVzdWx0LCByZXF1ZXN0SWQsIGFyZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsQWN0aW9uID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycl8xID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEFjdGlvbiA9IGVycl8xIGluc3RhbmNlb2YgUmVqZWN0V2l0aFZhbHVlID8gcmVqZWN0ZWQobnVsbCwgcmVxdWVzdElkLCBhcmcsIGVycl8xLnBheWxvYWQsIGVycl8xLm1ldGEpIDogcmVqZWN0ZWQoZXJyXzEsIHJlcXVlc3RJZCwgYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwRGlzcGF0Y2ggPSBvcHRpb25zICYmICFvcHRpb25zLmRpc3BhdGNoQ29uZGl0aW9uUmVqZWN0aW9uICYmIHJlamVjdGVkLm1hdGNoKGZpbmFsQWN0aW9uKSAmJiBmaW5hbEFjdGlvbi5tZXRhLmNvbmRpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFza2lwRGlzcGF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGZpbmFsQWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmluYWxBY3Rpb25dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHByb21pc2UyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvcnQ6IGFib3J0LFxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICAgICAgICAgIGFyZzogYXJnLFxyXG4gICAgICAgICAgICAgICAgICAgIHVud3JhcDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZTIudGhlbih1bndyYXBSZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY3Rpb25DcmVhdG9yLCB7XHJcbiAgICAgICAgICAgIHBlbmRpbmc6IHBlbmRpbmcsXHJcbiAgICAgICAgICAgIHJlamVjdGVkOiByZWplY3RlZCxcclxuICAgICAgICAgICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXHJcbiAgICAgICAgICAgIHR5cGVQcmVmaXg6IHR5cGVQcmVmaXhcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGNyZWF0ZUFzeW5jVGh1bmsyLndpdGhUeXBlcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZUFzeW5jVGh1bmsyOyB9O1xyXG4gICAgcmV0dXJuIGNyZWF0ZUFzeW5jVGh1bmsyO1xyXG59KSgpO1xyXG5mdW5jdGlvbiB1bndyYXBSZXN1bHQoYWN0aW9uKSB7XHJcbiAgICBpZiAoYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEucmVqZWN0ZWRXaXRoVmFsdWUpIHtcclxuICAgICAgICB0aHJvdyBhY3Rpb24ucGF5bG9hZDtcclxuICAgIH1cclxuICAgIGlmIChhY3Rpb24uZXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBhY3Rpb24uZXJyb3I7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYWN0aW9uLnBheWxvYWQ7XHJcbn1cclxuZnVuY3Rpb24gaXNUaGVuYWJsZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gXCJmdW5jdGlvblwiO1xyXG59XHJcbi8vIHNyYy90c0hlbHBlcnMudHNcclxudmFyIGhhc01hdGNoRnVuY3Rpb24gPSBmdW5jdGlvbiAodikge1xyXG4gICAgcmV0dXJuIHYgJiYgdHlwZW9mIHYubWF0Y2ggPT09IFwiZnVuY3Rpb25cIjtcclxufTtcclxuLy8gc3JjL21hdGNoZXJzLnRzXHJcbnZhciBtYXRjaGVzID0gZnVuY3Rpb24gKG1hdGNoZXIsIGFjdGlvbikge1xyXG4gICAgaWYgKGhhc01hdGNoRnVuY3Rpb24obWF0Y2hlcikpIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hlci5tYXRjaChhY3Rpb24pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gaXNBbnlPZigpIHtcclxuICAgIHZhciBtYXRjaGVycyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBtYXRjaGVyc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hlcnMuc29tZShmdW5jdGlvbiAobWF0Y2hlcikgeyByZXR1cm4gbWF0Y2hlcyhtYXRjaGVyLCBhY3Rpb24pOyB9KTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNBbGxPZigpIHtcclxuICAgIHZhciBtYXRjaGVycyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBtYXRjaGVyc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hlcnMuZXZlcnkoZnVuY3Rpb24gKG1hdGNoZXIpIHsgcmV0dXJuIG1hdGNoZXMobWF0Y2hlciwgYWN0aW9uKTsgfSk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgdmFsaWRTdGF0dXMpIHtcclxuICAgIGlmICghYWN0aW9uIHx8ICFhY3Rpb24ubWV0YSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB2YXIgaGFzVmFsaWRSZXF1ZXN0SWQgPSB0eXBlb2YgYWN0aW9uLm1ldGEucmVxdWVzdElkID09PSBcInN0cmluZ1wiO1xyXG4gICAgdmFyIGhhc1ZhbGlkUmVxdWVzdFN0YXR1cyA9IHZhbGlkU3RhdHVzLmluZGV4T2YoYWN0aW9uLm1ldGEucmVxdWVzdFN0YXR1cykgPiAtMTtcclxuICAgIHJldHVybiBoYXNWYWxpZFJlcXVlc3RJZCAmJiBoYXNWYWxpZFJlcXVlc3RTdGF0dXM7XHJcbn1cclxuZnVuY3Rpb24gaXNBc3luY1RodW5rQXJyYXkoYSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBhWzBdID09PSBcImZ1bmN0aW9uXCIgJiYgXCJwZW5kaW5nXCIgaW4gYVswXSAmJiBcImZ1bGZpbGxlZFwiIGluIGFbMF0gJiYgXCJyZWplY3RlZFwiIGluIGFbMF07XHJcbn1cclxuZnVuY3Rpb24gaXNQZW5kaW5nKCkge1xyXG4gICAgdmFyIGFzeW5jVGh1bmtzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFzeW5jVGh1bmtzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicGVuZGluZ1wiXSk7IH07XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xyXG4gICAgICAgIHJldHVybiBpc1BlbmRpbmcoKShhc3luY1RodW5rc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBtYXRjaGVycyA9IGFzeW5jVGh1bmtzLm1hcChmdW5jdGlvbiAoYXN5bmNUaHVuaykgeyByZXR1cm4gYXN5bmNUaHVuay5wZW5kaW5nOyB9KTtcclxuICAgICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZi5hcHBseSh2b2lkIDAsIG1hdGNoZXJzKTtcclxuICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzUmVqZWN0ZWQoKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJyZWplY3RlZFwiXSk7IH07XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xyXG4gICAgICAgIHJldHVybiBpc1JlamVjdGVkKCkoYXN5bmNUaHVua3NbMF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgbWF0Y2hlcnMgPSBhc3luY1RodW5rcy5tYXAoZnVuY3Rpb24gKGFzeW5jVGh1bmspIHsgcmV0dXJuIGFzeW5jVGh1bmsucmVqZWN0ZWQ7IH0pO1xyXG4gICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNSZWplY3RlZFdpdGhWYWx1ZSgpIHtcclxuICAgIHZhciBhc3luY1RodW5rcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhc3luY1RodW5rc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgdmFyIGhhc0ZsYWcgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIGFjdGlvbiAmJiBhY3Rpb24ubWV0YSAmJiBhY3Rpb24ubWV0YS5yZWplY3RlZFdpdGhWYWx1ZTtcclxuICAgIH07XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQWxsT2YoaXNSZWplY3RlZC5hcHBseSh2b2lkIDAsIGFzeW5jVGh1bmtzKSwgaGFzRmxhZyk7XHJcbiAgICAgICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNSZWplY3RlZFdpdGhWYWx1ZSgpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQWxsT2YoaXNSZWplY3RlZC5hcHBseSh2b2lkIDAsIGFzeW5jVGh1bmtzKSwgaGFzRmxhZyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc0Z1bGZpbGxlZCgpIHtcclxuICAgIHZhciBhc3luY1RodW5rcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhc3luY1RodW5rc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFtcImZ1bGZpbGxlZFwiXSk7IH07XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xyXG4gICAgICAgIHJldHVybiBpc0Z1bGZpbGxlZCgpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXJzID0gYXN5bmNUaHVua3MubWFwKGZ1bmN0aW9uIChhc3luY1RodW5rKSB7IHJldHVybiBhc3luY1RodW5rLmZ1bGZpbGxlZDsgfSk7XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc0FzeW5jVGh1bmtBY3Rpb24oKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJwZW5kaW5nXCIsIFwiZnVsZmlsbGVkXCIsIFwicmVqZWN0ZWRcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNBc3luY1RodW5rQWN0aW9uKCkoYXN5bmNUaHVua3NbMF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgbWF0Y2hlcnMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGFzeW5jVGh1bmtzXzEgPSBhc3luY1RodW5rczsgX2kgPCBhc3luY1RodW5rc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgYXN5bmNUaHVuayA9IGFzeW5jVGh1bmtzXzFbX2ldO1xyXG4gICAgICAgICAgICBtYXRjaGVycy5wdXNoKGFzeW5jVGh1bmsucGVuZGluZywgYXN5bmNUaHVuay5yZWplY3RlZCwgYXN5bmNUaHVuay5mdWxmaWxsZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZi5hcHBseSh2b2lkIDAsIG1hdGNoZXJzKTtcclxuICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvdXRpbHMudHNcclxudmFyIGFzc2VydEZ1bmN0aW9uID0gZnVuY3Rpb24gKGZ1bmMsIGV4cGVjdGVkKSB7XHJcbiAgICBpZiAodHlwZW9mIGZ1bmMgIT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoZXhwZWN0ZWQgKyBcIiBpcyBub3QgYSBmdW5jdGlvblwiKTtcclxuICAgIH1cclxufTtcclxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7XHJcbn07XHJcbnZhciBjYXRjaFJlamVjdGlvbiA9IGZ1bmN0aW9uIChwcm9taXNlMiwgb25FcnJvcikge1xyXG4gICAgaWYgKG9uRXJyb3IgPT09IHZvaWQgMCkgeyBvbkVycm9yID0gbm9vcDsgfVxyXG4gICAgcHJvbWlzZTIuY2F0Y2gob25FcnJvcik7XHJcbiAgICByZXR1cm4gcHJvbWlzZTI7XHJcbn07XHJcbnZhciBhZGRBYm9ydFNpZ25hbExpc3RlbmVyID0gZnVuY3Rpb24gKGFib3J0U2lnbmFsLCBjYWxsYmFjaykge1xyXG4gICAgYWJvcnRTaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGNhbGxiYWNrLCB7IG9uY2U6IHRydWUgfSk7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gYWJvcnRTaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGNhbGxiYWNrKTsgfTtcclxufTtcclxudmFyIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24gPSBmdW5jdGlvbiAoYWJvcnRDb250cm9sbGVyLCByZWFzb24pIHtcclxuICAgIHZhciBzaWduYWwgPSBhYm9ydENvbnRyb2xsZXIuc2lnbmFsO1xyXG4gICAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKCEoXCJyZWFzb25cIiBpbiBzaWduYWwpKSB7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNpZ25hbCwgXCJyZWFzb25cIiwge1xyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICB2YWx1ZTogcmVhc29uLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICA7XHJcbiAgICBhYm9ydENvbnRyb2xsZXIuYWJvcnQocmVhc29uKTtcclxufTtcclxuLy8gc3JjL2xpc3RlbmVyTWlkZGxld2FyZS9leGNlcHRpb25zLnRzXHJcbnZhciB0YXNrID0gXCJ0YXNrXCI7XHJcbnZhciBsaXN0ZW5lciA9IFwibGlzdGVuZXJcIjtcclxudmFyIGNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XHJcbnZhciBjYW5jZWxsZWQgPSBcImNhbmNlbGxlZFwiO1xyXG52YXIgdGFza0NhbmNlbGxlZCA9IFwidGFzay1cIiArIGNhbmNlbGxlZDtcclxudmFyIHRhc2tDb21wbGV0ZWQgPSBcInRhc2stXCIgKyBjb21wbGV0ZWQ7XHJcbnZhciBsaXN0ZW5lckNhbmNlbGxlZCA9IGxpc3RlbmVyICsgXCItXCIgKyBjYW5jZWxsZWQ7XHJcbnZhciBsaXN0ZW5lckNvbXBsZXRlZCA9IGxpc3RlbmVyICsgXCItXCIgKyBjb21wbGV0ZWQ7XHJcbnZhciBUYXNrQWJvcnRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRhc2tBYm9ydEVycm9yKGNvZGUpIHtcclxuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiVGFza0Fib3J0RXJyb3JcIjtcclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSB0YXNrICsgXCIgXCIgKyBjYW5jZWxsZWQgKyBcIiAocmVhc29uOiBcIiArIGNvZGUgKyBcIilcIjtcclxuICAgIH1cclxuICAgIHJldHVybiBUYXNrQWJvcnRFcnJvcjtcclxufSgpKTtcclxuLy8gc3JjL2xpc3RlbmVyTWlkZGxld2FyZS90YXNrLnRzXHJcbnZhciB2YWxpZGF0ZUFjdGl2ZSA9IGZ1bmN0aW9uIChzaWduYWwpIHtcclxuICAgIGlmIChzaWduYWwuYWJvcnRlZCkge1xyXG4gICAgICAgIHRocm93IG5ldyBUYXNrQWJvcnRFcnJvcihzaWduYWwucmVhc29uKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gcmFjZVdpdGhTaWduYWwoc2lnbmFsLCBwcm9taXNlMikge1xyXG4gICAgdmFyIGNsZWFudXAgPSBub29wO1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICB2YXIgbm90aWZ5UmVqZWN0aW9uID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVqZWN0KG5ldyBUYXNrQWJvcnRFcnJvcihzaWduYWwucmVhc29uKSk7IH07XHJcbiAgICAgICAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XHJcbiAgICAgICAgICAgIG5vdGlmeVJlamVjdGlvbigpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNsZWFudXAgPSBhZGRBYm9ydFNpZ25hbExpc3RlbmVyKHNpZ25hbCwgbm90aWZ5UmVqZWN0aW9uKTtcclxuICAgICAgICBwcm9taXNlMi5maW5hbGx5KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNsZWFudXAoKTsgfSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xyXG4gICAgfSkuZmluYWxseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY2xlYW51cCA9IG5vb3A7XHJcbiAgICB9KTtcclxufVxyXG52YXIgcnVuVGFzayA9IGZ1bmN0aW9uICh0YXNrMiwgY2xlYW5VcCkgeyByZXR1cm4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB2YWx1ZSwgZXJyb3JfMTtcclxuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIF9jLnRyeXMucHVzaChbMCwgMywgNCwgNV0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5yZXNvbHZlKCldO1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0YXNrMigpXTtcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IFwib2tcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIGVycm9yXzEgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IGVycm9yXzEgaW5zdGFuY2VvZiBUYXNrQWJvcnRFcnJvciA/IFwiY2FuY2VsbGVkXCIgOiBcInJlamVjdGVkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcl8xXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgIGNsZWFuVXAgPT0gbnVsbCA/IHZvaWQgMCA6IGNsZWFuVXAoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XHJcbiAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KTsgfTtcclxudmFyIGNyZWF0ZVBhdXNlID0gZnVuY3Rpb24gKHNpZ25hbCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcm9taXNlMikge1xyXG4gICAgICAgIHJldHVybiBjYXRjaFJlamVjdGlvbihyYWNlV2l0aFNpZ25hbChzaWduYWwsIHByb21pc2UyKS50aGVuKGZ1bmN0aW9uIChvdXRwdXQpIHtcclxuICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoc2lnbmFsKTtcclxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgICAgICB9KSk7XHJcbiAgICB9O1xyXG59O1xyXG52YXIgY3JlYXRlRGVsYXkgPSBmdW5jdGlvbiAoc2lnbmFsKSB7XHJcbiAgICB2YXIgcGF1c2UgPSBjcmVhdGVQYXVzZShzaWduYWwpO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0aW1lb3V0TXMpIHtcclxuICAgICAgICByZXR1cm4gcGF1c2UobmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmV0dXJuIHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZW91dE1zKTsgfSkpO1xyXG4gICAgfTtcclxufTtcclxuLy8gc3JjL2xpc3RlbmVyTWlkZGxld2FyZS9pbmRleC50c1xyXG52YXIgYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcclxudmFyIElOVEVSTkFMX05JTF9UT0tFTiA9IHt9O1xyXG52YXIgYWxtID0gXCJsaXN0ZW5lck1pZGRsZXdhcmVcIjtcclxudmFyIGNyZWF0ZUZvcmsgPSBmdW5jdGlvbiAocGFyZW50QWJvcnRTaWduYWwpIHtcclxuICAgIHZhciBsaW5rQ29udHJvbGxlcnMgPSBmdW5jdGlvbiAoY29udHJvbGxlcikgeyByZXR1cm4gYWRkQWJvcnRTaWduYWxMaXN0ZW5lcihwYXJlbnRBYm9ydFNpZ25hbCwgZnVuY3Rpb24gKCkgeyByZXR1cm4gYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjb250cm9sbGVyLCBwYXJlbnRBYm9ydFNpZ25hbC5yZWFzb24pOyB9KTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFza0V4ZWN1dG9yKSB7XHJcbiAgICAgICAgYXNzZXJ0RnVuY3Rpb24odGFza0V4ZWN1dG9yLCBcInRhc2tFeGVjdXRvclwiKTtcclxuICAgICAgICB2YXIgY2hpbGRBYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XHJcbiAgICAgICAgbGlua0NvbnRyb2xsZXJzKGNoaWxkQWJvcnRDb250cm9sbGVyKTtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gcnVuVGFzayhmdW5jdGlvbiAoKSB7IHJldHVybiBfX2FzeW5jKHZvaWQgMCwgbnVsbCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0MjtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUocGFyZW50QWJvcnRTaWduYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUFjdGl2ZShjaGlsZEFib3J0Q29udHJvbGxlci5zaWduYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0YXNrRXhlY3V0b3Ioe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdXNlOiBjcmVhdGVQYXVzZShjaGlsZEFib3J0Q29udHJvbGxlci5zaWduYWwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5OiBjcmVhdGVEZWxheShjaGlsZEFib3J0Q29udHJvbGxlci5zaWduYWwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbDogY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQyID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUFjdGl2ZShjaGlsZEFib3J0Q29udHJvbGxlci5zaWduYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzdWx0Ml07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGNoaWxkQWJvcnRDb250cm9sbGVyLCB0YXNrQ29tcGxldGVkKTsgfSk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdWx0OiBjcmVhdGVQYXVzZShwYXJlbnRBYm9ydFNpZ25hbCkocmVzdWx0KSxcclxuICAgICAgICAgICAgY2FuY2VsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGNoaWxkQWJvcnRDb250cm9sbGVyLCB0YXNrQ2FuY2VsbGVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG59O1xyXG52YXIgY3JlYXRlVGFrZVBhdHRlcm4gPSBmdW5jdGlvbiAoc3RhcnRMaXN0ZW5pbmcsIHNpZ25hbCkge1xyXG4gICAgdmFyIHRha2UgPSBmdW5jdGlvbiAocHJlZGljYXRlLCB0aW1lb3V0KSB7IHJldHVybiBfX2FzeW5jKHZvaWQgMCwgbnVsbCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB1bnN1YnNjcmliZSwgdHVwbGVQcm9taXNlLCBwcm9taXNlcywgb3V0cHV0O1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZlKHNpZ25hbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB0dXBsZVByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdG9wTGlzdGVuaW5nID0gc3RhcnRMaXN0ZW5pbmcoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZGljYXRlOiBwcmVkaWNhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZmZlY3Q6IGZ1bmN0aW9uIChhY3Rpb24sIGxpc3RlbmVyQXBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJBcGkudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lckFwaS5nZXRTdGF0ZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lckFwaS5nZXRPcmlnaW5hbFN0YXRlKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcExpc3RlbmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR1cGxlUHJvbWlzZVxyXG4gICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJldHVybiBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXQsIG51bGwpOyB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzEsICwgMywgNF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJhY2VXaXRoU2lnbmFsKHNpZ25hbCwgUHJvbWlzZS5yYWNlKHByb21pc2VzKSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUFjdGl2ZShzaWduYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBvdXRwdXRdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAocHJlZGljYXRlLCB0aW1lb3V0KSB7IHJldHVybiBjYXRjaFJlamVjdGlvbih0YWtlKHByZWRpY2F0ZSwgdGltZW91dCkpOyB9O1xyXG59O1xyXG52YXIgZ2V0TGlzdGVuZXJFbnRyeVByb3BzRnJvbSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICB2YXIgdHlwZSA9IG9wdGlvbnMudHlwZSwgYWN0aW9uQ3JlYXRvciA9IG9wdGlvbnMuYWN0aW9uQ3JlYXRvciwgbWF0Y2hlciA9IG9wdGlvbnMubWF0Y2hlciwgcHJlZGljYXRlID0gb3B0aW9ucy5wcmVkaWNhdGUsIGVmZmVjdCA9IG9wdGlvbnMuZWZmZWN0O1xyXG4gICAgaWYgKHR5cGUpIHtcclxuICAgICAgICBwcmVkaWNhdGUgPSBjcmVhdGVBY3Rpb24odHlwZSkubWF0Y2g7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChhY3Rpb25DcmVhdG9yKSB7XHJcbiAgICAgICAgdHlwZSA9IGFjdGlvbkNyZWF0b3IudHlwZTtcclxuICAgICAgICBwcmVkaWNhdGUgPSBhY3Rpb25DcmVhdG9yLm1hdGNoO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAobWF0Y2hlcikge1xyXG4gICAgICAgIHByZWRpY2F0ZSA9IG1hdGNoZXI7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChwcmVkaWNhdGUpIHtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNyZWF0aW5nIG9yIHJlbW92aW5nIGEgbGlzdGVuZXIgcmVxdWlyZXMgb25lIG9mIHRoZSBrbm93biBmaWVsZHMgZm9yIG1hdGNoaW5nIGFuIGFjdGlvblwiKTtcclxuICAgIH1cclxuICAgIGFzc2VydEZ1bmN0aW9uKGVmZmVjdCwgXCJvcHRpb25zLmxpc3RlbmVyXCIpO1xyXG4gICAgcmV0dXJuIHsgcHJlZGljYXRlOiBwcmVkaWNhdGUsIHR5cGU6IHR5cGUsIGVmZmVjdDogZWZmZWN0IH07XHJcbn07XHJcbnZhciBjcmVhdGVMaXN0ZW5lckVudHJ5ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIHZhciBfYyA9IGdldExpc3RlbmVyRW50cnlQcm9wc0Zyb20ob3B0aW9ucyksIHR5cGUgPSBfYy50eXBlLCBwcmVkaWNhdGUgPSBfYy5wcmVkaWNhdGUsIGVmZmVjdCA9IF9jLmVmZmVjdDtcclxuICAgIHZhciBpZCA9IG5hbm9pZCgpO1xyXG4gICAgdmFyIGVudHJ5ID0ge1xyXG4gICAgICAgIGlkOiBpZCxcclxuICAgICAgICBlZmZlY3Q6IGVmZmVjdCxcclxuICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgIHByZWRpY2F0ZTogcHJlZGljYXRlLFxyXG4gICAgICAgIHBlbmRpbmc6IG5ldyBTZXQoKSxcclxuICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1YnNjcmliZSBub3QgaW5pdGlhbGl6ZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBlbnRyeTtcclxufTtcclxudmFyIGNhbmNlbEFjdGl2ZUxpc3RlbmVycyA9IGZ1bmN0aW9uIChlbnRyeSkge1xyXG4gICAgZW50cnkucGVuZGluZy5mb3JFYWNoKGZ1bmN0aW9uIChjb250cm9sbGVyKSB7XHJcbiAgICAgICAgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjb250cm9sbGVyLCBsaXN0ZW5lckNhbmNlbGxlZCk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIGNyZWF0ZUNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlID0gZnVuY3Rpb24gKGxpc3RlbmVyTWFwKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGxpc3RlbmVyTWFwLmZvckVhY2goY2FuY2VsQWN0aXZlTGlzdGVuZXJzKTtcclxuICAgICAgICBsaXN0ZW5lck1hcC5jbGVhcigpO1xyXG4gICAgfTtcclxufTtcclxudmFyIHNhZmVseU5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycm9ySGFuZGxlciwgZXJyb3JUb05vdGlmeSwgZXJyb3JJbmZvKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGVycm9ySGFuZGxlcihlcnJvclRvTm90aWZ5LCBlcnJvckluZm8pO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9ySGFuZGxlckVycm9yKSB7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRocm93IGVycm9ySGFuZGxlckVycm9yO1xyXG4gICAgICAgIH0sIDApO1xyXG4gICAgfVxyXG59O1xyXG52YXIgYWRkTGlzdGVuZXIgPSBjcmVhdGVBY3Rpb24oYWxtICsgXCIvYWRkXCIpO1xyXG52YXIgY2xlYXJBbGxMaXN0ZW5lcnMgPSBjcmVhdGVBY3Rpb24oYWxtICsgXCIvcmVtb3ZlQWxsXCIpO1xyXG52YXIgcmVtb3ZlTGlzdGVuZXIgPSBjcmVhdGVBY3Rpb24oYWxtICsgXCIvcmVtb3ZlXCIpO1xyXG52YXIgZGVmYXVsdEVycm9ySGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBhcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGNvbnNvbGUuZXJyb3IuYXBwbHkoY29uc29sZSwgX19zcHJlYWRBcnJheShbYWxtICsgXCIvZXJyb3JcIl0sIGFyZ3MpKTtcclxufTtcclxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJNaWRkbGV3YXJlKG1pZGRsZXdhcmVPcHRpb25zKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgaWYgKG1pZGRsZXdhcmVPcHRpb25zID09PSB2b2lkIDApIHsgbWlkZGxld2FyZU9wdGlvbnMgPSB7fTsgfVxyXG4gICAgdmFyIGxpc3RlbmVyTWFwID0gbmV3IE1hcCgpO1xyXG4gICAgdmFyIGV4dHJhID0gbWlkZGxld2FyZU9wdGlvbnMuZXh0cmEsIF9jID0gbWlkZGxld2FyZU9wdGlvbnMub25FcnJvciwgb25FcnJvciA9IF9jID09PSB2b2lkIDAgPyBkZWZhdWx0RXJyb3JIYW5kbGVyIDogX2M7XHJcbiAgICBhc3NlcnRGdW5jdGlvbihvbkVycm9yLCBcIm9uRXJyb3JcIik7XHJcbiAgICB2YXIgaW5zZXJ0RW50cnkgPSBmdW5jdGlvbiAoZW50cnkpIHtcclxuICAgICAgICBlbnRyeS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxpc3RlbmVyTWFwLmRlbGV0ZShlbnRyeS5pZCk7IH07XHJcbiAgICAgICAgbGlzdGVuZXJNYXAuc2V0KGVudHJ5LmlkLCBlbnRyeSk7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjYW5jZWxPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGVudHJ5LnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgIGlmIChjYW5jZWxPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBjYW5jZWxPcHRpb25zLmNhbmNlbEFjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgY2FuY2VsQWN0aXZlTGlzdGVuZXJzKGVudHJ5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgdmFyIGZpbmRMaXN0ZW5lckVudHJ5ID0gZnVuY3Rpb24gKGNvbXBhcmF0b3IpIHtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9jID0gQXJyYXkuZnJvbShsaXN0ZW5lck1hcC52YWx1ZXMoKSk7IF9pIDwgX2MubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IF9jW19pXTtcclxuICAgICAgICAgICAgaWYgKGNvbXBhcmF0b3IoZW50cnkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcclxuICAgIH07XHJcbiAgICB2YXIgc3RhcnRMaXN0ZW5pbmcgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBlbnRyeSA9IGZpbmRMaXN0ZW5lckVudHJ5KGZ1bmN0aW9uIChleGlzdGluZ0VudHJ5KSB7IHJldHVybiBleGlzdGluZ0VudHJ5LmVmZmVjdCA9PT0gb3B0aW9ucy5lZmZlY3Q7IH0pO1xyXG4gICAgICAgIGlmICghZW50cnkpIHtcclxuICAgICAgICAgICAgZW50cnkgPSBjcmVhdGVMaXN0ZW5lckVudHJ5KG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW5zZXJ0RW50cnkoZW50cnkpO1xyXG4gICAgfTtcclxuICAgIHZhciBzdG9wTGlzdGVuaW5nID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX2MgPSBnZXRMaXN0ZW5lckVudHJ5UHJvcHNGcm9tKG9wdGlvbnMpLCB0eXBlID0gX2MudHlwZSwgZWZmZWN0ID0gX2MuZWZmZWN0LCBwcmVkaWNhdGUgPSBfYy5wcmVkaWNhdGU7XHJcbiAgICAgICAgdmFyIGVudHJ5ID0gZmluZExpc3RlbmVyRW50cnkoZnVuY3Rpb24gKGVudHJ5Mikge1xyXG4gICAgICAgICAgICB2YXIgbWF0Y2hQcmVkaWNhdGVPclR5cGUgPSB0eXBlb2YgdHlwZSA9PT0gXCJzdHJpbmdcIiA/IGVudHJ5Mi50eXBlID09PSB0eXBlIDogZW50cnkyLnByZWRpY2F0ZSA9PT0gcHJlZGljYXRlO1xyXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hQcmVkaWNhdGVPclR5cGUgJiYgZW50cnkyLmVmZmVjdCA9PT0gZWZmZWN0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChlbnRyeSkge1xyXG4gICAgICAgICAgICBlbnRyeS51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5jYW5jZWxBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIGNhbmNlbEFjdGl2ZUxpc3RlbmVycyhlbnRyeSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICEhZW50cnk7XHJcbiAgICB9O1xyXG4gICAgdmFyIG5vdGlmeUxpc3RlbmVyID0gZnVuY3Rpb24gKGVudHJ5LCBhY3Rpb24sIGFwaSwgZ2V0T3JpZ2luYWxTdGF0ZSkgeyByZXR1cm4gX19hc3luYyhfdGhpcywgbnVsbCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpbnRlcm5hbFRhc2tDb250cm9sbGVyLCB0YWtlLCBsaXN0ZW5lckVycm9yXzE7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUYXNrQ29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB0YWtlID0gY3JlYXRlVGFrZVBhdHRlcm4oc3RhcnRMaXN0ZW5pbmcsIGludGVybmFsVGFza0NvbnRyb2xsZXIuc2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgX2MudHJ5cy5wdXNoKFsxLCAzLCA0LCA1XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW50cnkucGVuZGluZy5hZGQoaW50ZXJuYWxUYXNrQ29udHJvbGxlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5yZXNvbHZlKGVudHJ5LmVmZmVjdChhY3Rpb24sIGFzc2lnbih7fSwgYXBpLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRPcmlnaW5hbFN0YXRlOiBnZXRPcmlnaW5hbFN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uOiBmdW5jdGlvbiAocHJlZGljYXRlLCB0aW1lb3V0KSB7IHJldHVybiB0YWtlKHByZWRpY2F0ZSwgdGltZW91dCkudGhlbihCb29sZWFuKTsgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRha2U6IHRha2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogY3JlYXRlRGVsYXkoaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF1c2U6IGNyZWF0ZVBhdXNlKGludGVybmFsVGFza0NvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiBleHRyYSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbDogaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JrOiBjcmVhdGVGb3JrKGludGVybmFsVGFza0NvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlOiBlbnRyeS51bnN1YnNjcmliZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyTWFwLnNldChlbnRyeS5pZCwgZW50cnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbEFjdGl2ZUxpc3RlbmVyczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LnBlbmRpbmcuZm9yRWFjaChmdW5jdGlvbiAoY29udHJvbGxlciwgXywgc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sbGVyICE9PSBpbnRlcm5hbFRhc2tDb250cm9sbGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGNvbnRyb2xsZXIsIGxpc3RlbmVyQ2FuY2VsbGVkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldC5kZWxldGUoY29udHJvbGxlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyRXJyb3JfMSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShsaXN0ZW5lckVycm9yXzEgaW5zdGFuY2VvZiBUYXNrQWJvcnRFcnJvcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2FmZWx5Tm90aWZ5RXJyb3Iob25FcnJvciwgbGlzdGVuZXJFcnJvcl8xLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWlzZWRCeTogXCJlZmZlY3RcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihpbnRlcm5hbFRhc2tDb250cm9sbGVyLCBsaXN0ZW5lckNvbXBsZXRlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW50cnkucGVuZGluZy5kZWxldGUoaW50ZXJuYWxUYXNrQ29udHJvbGxlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTsgfTtcclxuICAgIHZhciBjbGVhckxpc3RlbmVyTWlkZGxld2FyZSA9IGNyZWF0ZUNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlKGxpc3RlbmVyTWFwKTtcclxuICAgIHZhciBtaWRkbGV3YXJlID0gZnVuY3Rpb24gKGFwaSkgeyByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICBpZiAoIWlzQWN0aW9uKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFkZExpc3RlbmVyLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXJ0TGlzdGVuaW5nKGFjdGlvbi5wYXlsb2FkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNsZWFyQWxsTGlzdGVuZXJzLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgY2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVtb3ZlTGlzdGVuZXIubWF0Y2goYWN0aW9uKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RvcExpc3RlbmluZyhhY3Rpb24ucGF5bG9hZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvcmlnaW5hbFN0YXRlID0gYXBpLmdldFN0YXRlKCk7XHJcbiAgICAgICAgdmFyIGdldE9yaWdpbmFsU3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvcmlnaW5hbFN0YXRlID09PSBJTlRFUk5BTF9OSUxfVE9LRU4pIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihhbG0gKyBcIjogZ2V0T3JpZ2luYWxTdGF0ZSBjYW4gb25seSBiZSBjYWxsZWQgc3luY2hyb25vdXNseVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxTdGF0ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gbmV4dChhY3Rpb24pO1xyXG4gICAgICAgICAgICBpZiAobGlzdGVuZXJNYXAuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50U3RhdGUgPSBhcGkuZ2V0U3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lckVudHJpZXMgPSBBcnJheS5mcm9tKGxpc3RlbmVyTWFwLnZhbHVlcygpKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgbGlzdGVuZXJFbnRyaWVzXzEgPSBsaXN0ZW5lckVudHJpZXM7IF9pIDwgbGlzdGVuZXJFbnRyaWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gbGlzdGVuZXJFbnRyaWVzXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBydW5MaXN0ZW5lciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bkxpc3RlbmVyID0gZW50cnkucHJlZGljYXRlKGFjdGlvbiwgY3VycmVudFN0YXRlLCBvcmlnaW5hbFN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKHByZWRpY2F0ZUVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bkxpc3RlbmVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhZmVseU5vdGlmeUVycm9yKG9uRXJyb3IsIHByZWRpY2F0ZUVycm9yLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWlzZWRCeTogXCJwcmVkaWNhdGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFydW5MaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXIoZW50cnksIGFjdGlvbiwgYXBpLCBnZXRPcmlnaW5hbFN0YXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgb3JpZ2luYWxTdGF0ZSA9IElOVEVSTkFMX05JTF9UT0tFTjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07IH07IH07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1pZGRsZXdhcmU6IG1pZGRsZXdhcmUsXHJcbiAgICAgICAgc3RhcnRMaXN0ZW5pbmc6IHN0YXJ0TGlzdGVuaW5nLFxyXG4gICAgICAgIHN0b3BMaXN0ZW5pbmc6IHN0b3BMaXN0ZW5pbmcsXHJcbiAgICAgICAgY2xlYXJMaXN0ZW5lcnM6IGNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlXHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9hdXRvQmF0Y2hFbmhhbmNlci50c1xyXG52YXIgU0hPVUxEX0FVVE9CQVRDSCA9IFwiUlRLX2F1dG9CYXRjaFwiO1xyXG52YXIgcHJlcGFyZUF1dG9CYXRjaGVkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKHBheWxvYWQpIHtcclxuICAgIHZhciBfYztcclxuICAgIHJldHVybiAoe1xyXG4gICAgICAgIHBheWxvYWQ6IHBheWxvYWQsXHJcbiAgICAgICAgbWV0YTogKF9jID0ge30sIF9jW1NIT1VMRF9BVVRPQkFUQ0hdID0gdHJ1ZSwgX2MpXHJcbiAgICB9KTtcclxufTsgfTtcclxudmFyIHByb21pc2U7XHJcbnZhciBxdWV1ZU1pY3JvdGFza1NoaW0gPSB0eXBlb2YgcXVldWVNaWNyb3Rhc2sgPT09IFwiZnVuY3Rpb25cIiA/IHF1ZXVlTWljcm90YXNrLmJpbmQodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiBnbG9iYWxUaGlzKSA6IGZ1bmN0aW9uIChjYikgeyByZXR1cm4gKHByb21pc2UgfHwgKHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKSkpLnRoZW4oY2IpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgdGhyb3cgZXJyO1xyXG59LCAwKTsgfSk7IH07XHJcbnZhciBjcmVhdGVRdWV1ZVdpdGhUaW1lciA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vdGlmeSkge1xyXG4gICAgICAgIHNldFRpbWVvdXQobm90aWZ5LCB0aW1lb3V0KTtcclxuICAgIH07XHJcbn07XHJcbnZhciByQUYgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIDogY3JlYXRlUXVldWVXaXRoVGltZXIoMTApO1xyXG52YXIgYXV0b0JhdGNoRW5oYW5jZXIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0geyB0eXBlOiBcInJhZlwiIH07IH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc3RvcmUgPSBuZXh0LmFwcGx5KHZvaWQgMCwgYXJncyk7XHJcbiAgICAgICAgdmFyIG5vdGlmeWluZyA9IHRydWU7XHJcbiAgICAgICAgdmFyIHNob3VsZE5vdGlmeUF0RW5kT2ZUaWNrID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIG5vdGlmaWNhdGlvblF1ZXVlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgdmFyIHF1ZXVlQ2FsbGJhY2sgPSBvcHRpb25zLnR5cGUgPT09IFwidGlja1wiID8gcXVldWVNaWNyb3Rhc2tTaGltIDogb3B0aW9ucy50eXBlID09PSBcInJhZlwiID8gckFGIDogb3B0aW9ucy50eXBlID09PSBcImNhbGxiYWNrXCIgPyBvcHRpb25zLnF1ZXVlTm90aWZpY2F0aW9uIDogY3JlYXRlUXVldWVXaXRoVGltZXIob3B0aW9ucy50aW1lb3V0KTtcclxuICAgICAgICB2YXIgbm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBub3RpZmljYXRpb25RdWV1ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHNob3VsZE5vdGlmeUF0RW5kT2ZUaWNrKSB7XHJcbiAgICAgICAgICAgICAgICBzaG91bGROb3RpZnlBdEVuZE9mVGljayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGwpIHsgcmV0dXJuIGwoKTsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdG9yZSwge1xyXG4gICAgICAgICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIChsaXN0ZW5lcjIpIHtcclxuICAgICAgICAgICAgICAgIHZhciB3cmFwcGVkTGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBub3RpZnlpbmcgJiYgbGlzdGVuZXIyKCk7IH07XHJcbiAgICAgICAgICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBzdG9yZS5zdWJzY3JpYmUod3JhcHBlZExpc3RlbmVyKTtcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5hZGQobGlzdGVuZXIyKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyMik7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBub3RpZnlpbmcgPSAhKChfYSA9IGFjdGlvbiA9PSBudWxsID8gdm9pZCAwIDogYWN0aW9uLm1ldGEpID09IG51bGwgPyB2b2lkIDAgOiBfYVtTSE9VTERfQVVUT0JBVENIXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkTm90aWZ5QXRFbmRPZlRpY2sgPSAhbm90aWZ5aW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaG91bGROb3RpZnlBdEVuZE9mVGljaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5vdGlmaWNhdGlvblF1ZXVlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uUXVldWVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlQ2FsbGJhY2sobm90aWZ5TGlzdGVuZXJzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2goYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vdGlmeWluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07IH07XHJcbn07XHJcbi8vIHNyYy9pbmRleC50c1xyXG5lbmFibGVFUzUoKTtcclxuZXhwb3J0IHsgRW5oYW5jZXJBcnJheSwgTWlkZGxld2FyZUFycmF5LCBTSE9VTERfQVVUT0JBVENILCBUYXNrQWJvcnRFcnJvciwgYWRkTGlzdGVuZXIsIGF1dG9CYXRjaEVuaGFuY2VyLCBjbGVhckFsbExpc3RlbmVycywgY29uZmlndXJlU3RvcmUsIGNyZWF0ZUFjdGlvbiwgY3JlYXRlQXN5bmNUaHVuaywgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IsIGNyZWF0ZUVudGl0eUFkYXB0ZXIsIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSwgY3JlYXRlTGlzdGVuZXJNaWRkbGV3YXJlLCBkZWZhdWx0MiBhcyBjcmVhdGVOZXh0U3RhdGUsIGNyZWF0ZVJlZHVjZXIsIGNyZWF0ZVNlbGVjdG9yMiBhcyBjcmVhdGVTZWxlY3RvciwgY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLCBjcmVhdGVTbGljZSwgY3VycmVudDIgYXMgY3VycmVudCwgZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlLCBmcmVlemUsIGdldERlZmF1bHRNaWRkbGV3YXJlLCBnZXRUeXBlLCBpc0FjdGlvbiwgaXNBbGxPZiwgaXNBbnlPZiwgaXNBc3luY1RodW5rQWN0aW9uLCBpc0RyYWZ0NCBhcyBpc0RyYWZ0LCBpc0ZTQSBhcyBpc0ZsdXhTdGFuZGFyZEFjdGlvbiwgaXNGdWxmaWxsZWQsIGlzSW1tdXRhYmxlRGVmYXVsdCwgaXNQZW5kaW5nLCBpc1BsYWluLCBpc1BsYWluT2JqZWN0LCBpc1JlamVjdGVkLCBpc1JlamVjdGVkV2l0aFZhbHVlLCBtaW5pU2VyaWFsaXplRXJyb3IsIG5hbm9pZCwgb3JpZ2luYWwsIHByZXBhcmVBdXRvQmF0Y2hlZCwgcmVtb3ZlTGlzdGVuZXIsIHVud3JhcFJlc3VsdCB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWR1eC10b29sa2l0LmVzbS5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVTbGljZSwgY3JlYXRlQXN5bmNUaHVuaywgY3JlYXRlRW50aXR5QWRhcHRlciB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XG5cbmNvbnN0IGJlZXJzQWRhcHRlciA9IGNyZWF0ZUVudGl0eUFkYXB0ZXIoKTtcblxuY29uc3QgaW5pdGlhbFN0YXRlID0gYmVlcnNBZGFwdGVyLmdldEluaXRpYWxTdGF0ZSh7XG4gIHN0YXR1czogXCJpZGxlXCIsXG4gIGNvdW50OiAxLFxuICBvbmVCZWVyU3RhdHVzOiBcImlkbGVcIixcbiAgZXJyb3I6IG51bGxcbn0pO1xuXG5leHBvcnQgY29uc3QgZmV0Y2hPbmVCZWVycyA9IGNyZWF0ZUFzeW5jVGh1bmsoXCJiZWVycy9mZXRjaE9uZUJlZXJzXCIsIGFzeW5jKGlkKSA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHBzOi8vYXBpLnB1bmthcGkuY29tL3YyL2JlZXJzLyR7aWR9YCk7XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgaWYobG9jYWxTdG9yYWdlLmdldEl0ZW0oaWQpKSB7XG4gICAgZGF0YVswXS5pc0NhcnQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbMF0uaXNDYXJ0ID0gZmFsc2U7XG4gIH1cblxuICBjb25zb2xlLmxvZyhkYXRhKVxuXG4gIHJldHVybihkYXRhKTtcbn0pO1xuXG5leHBvcnQgY29uc3QgZmV0Y2hCZWVycyA9IGNyZWF0ZUFzeW5jVGh1bmsoXCJiZWVycy9mZXRjaEJlZXJzXCIsIGFzeW5jIChjdXJyZW50UGFnZSkgPT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwczovL2FwaS5wdW5rYXBpLmNvbS92Mi9iZWVycz9wYWdlPSR7Y3VycmVudFBhZ2V9JnBlcl9wYWdlPTEyYCk7XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgZnVuY3Rpb24gYWRkTWFya2V0Q2FydCgpIHtcbiAgICBjb25zdCBiZWVycyA9IHt9O1xuICAgIGlmKGxvY2FsU3RvcmFnZS5sZW5ndGgpIHtcbiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsb2NhbFN0b3JhZ2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgaWRCZWVyID0gbG9jYWxTdG9yYWdlLmtleShpKTtcbiAgICAgICAgYmVlcnNbaWRCZWVyXSA9IGlkQmVlcjtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBpZCA9IGRhdGFbaV0uaWQ7XG4gICAgICBpZihiZWVyc1tpZF0pe1xuICAgICAgICBkYXRhW2ldLmlzQ2FydCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhW2ldLmlzQ2FydCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGF3YWl0IGFkZE1hcmtldENhcnQoKTtcblxuICByZXR1cm4gZGF0YTtcbn0pO1xuXG5jb25zdCBiZWVyc1NsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICBuYW1lOiBcImJlZXJzXCIsXG4gIGluaXRpYWxTdGF0ZSxcbiAgcmVkdWNlcnM6IHtcbiAgICBhZGRUb0Jhc2tldChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZS5lbnRpdGllc1thY3Rpb24ucGF5bG9hZF0uaXNDYXJ0ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHJlbW92ZUZyb21CYXNrZXQoc3RhdGUsIGFjdGlvbikge1xuICAgICAgaWYoc3RhdGUuaWRzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBzdGF0ZS5lbnRpdGllc1thY3Rpb24ucGF5bG9hZF0uaXNDYXJ0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZWxldGluZ0FsbEZyb21UaGVCYXNrZXQoc3RhdGUsIGFjdGlvbikge1xuICAgICAgaWYoc3RhdGUuaWRzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgYWN0aW9uLnBheWxvYWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBzdGF0ZS5lbnRpdGllc1thY3Rpb24ucGF5bG9hZFtpXV0uaXNDYXJ0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGFkZEN1cnJlbnRQYWdlKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlLmN1cnJlbnRQYWdlID0gYWN0aW9uLnBheWxvYWRcbiAgICB9LFxuICAgIGFkZFRvQmFza2V0T25lQmVlcihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBpZihzdGF0ZS5lbnRpdGllc1thY3Rpb24ucGF5bG9hZF0pIHN0YXRlLmVudGl0aWVzW2FjdGlvbi5wYXlsb2FkXS5pc0NhcnQgPSB0cnVlO1xuICAgICAgc3RhdGUub25lQmVlci5pc0NhcnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcmVtb3ZlRnJvbUJhc2tldE9uZUJlZXIoc3RhdGUsIGFjdGlvbikge1xuICAgICAgaWYoc3RhdGUuZW50aXRpZXNbYWN0aW9uLnBheWxvYWRdKSBzdGF0ZS5lbnRpdGllc1thY3Rpb24ucGF5bG9hZF0uaXNDYXJ0ID0gZmFsc2U7XG4gICAgICBzdGF0ZS5vbmVCZWVyLmlzQ2FydCA9IGZhbHNlO1xuICAgIH0sXG4gIH0sXG4gIGV4dHJhUmVkdWNlcnMoYnVpbGRlcikge1xuICAgIGJ1aWxkZXJcbiAgICAgIC5hZGRDYXNlKGZldGNoQmVlcnMucGVuZGluZywgKHN0YXRlKSA9PiB7XG4gICAgICAgIHN0YXRlLnN0YXR1cyA9IFwibG9hZGluZ1wiO1xuICAgICAgfSlcbiAgICAgIC5hZGRDYXNlKGZldGNoQmVlcnMuZnVsZmlsbGVkLCAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgICAgICBzdGF0ZS5zdGF0dXMgPSBcInN1Y2NlZWRlZFwiO1xuICAgICAgICBzdGF0ZS5jb3VudCA9IE1hdGguY2VpbCg4MCAvIDEwKTtcbiAgICAgICAgaWYoc3RhdGUuaWRzLmxlbmd0aCAhPT0gMCkgYmVlcnNBZGFwdGVyLnJlbW92ZUFsbChzdGF0ZSwgYWN0aW9uLnBheWxvYWQpO1xuICAgICAgICBiZWVyc0FkYXB0ZXIudXBzZXJ0TWFueShzdGF0ZSwgYWN0aW9uLnBheWxvYWQpO1xuICAgICAgfSlcbiAgICAgIC5hZGRDYXNlKGZldGNoQmVlcnMucmVqZWN0ZWQsIChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgICAgIHN0YXRlLnN0YXR1cyA9IFwiZmFpbGVkXCI7XG4gICAgICAgIHN0YXRlLmVycm9yID0gYWN0aW9uLmVycm9yLm1lc3NhZ2U7XG4gICAgICB9KVxuICAgICAgLmFkZENhc2UoZmV0Y2hPbmVCZWVycy5wZW5kaW5nLCAoc3RhdGUpID0+IHtcbiAgICAgICAgc3RhdGUub25lQmVlclN0YXR1cyA9IFwibG9hZGluZ1wiO1xuICAgICAgfSlcbiAgICAgIC5hZGRDYXNlKGZldGNoT25lQmVlcnMuZnVsZmlsbGVkLCAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgICAgICBzdGF0ZS5vbmVCZWVyU3RhdHVzID0gXCJzdWNjZWVkZWRcIjtcbiAgICAgICAgc3RhdGUub25lQmVlciA9IHsuLi5hY3Rpb24ucGF5bG9hZFswXX07XG4gICAgICB9KVxuICAgICAgLmFkZENhc2UoZmV0Y2hPbmVCZWVycy5yZWplY3RlZCwgKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAgICAgc3RhdGUub25lQmVlclN0YXR1cyA9IFwiZmFpbGVkXCI7XG4gICAgICAgIHN0YXRlLmVycm9yID0gYWN0aW9uLmVycm9yLm1lc3NhZ2U7XG4gICAgICB9KVxuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgYmVlcnNTbGljZS5yZWR1Y2VyO1xuXG5leHBvcnQgY29uc3QgIHsgYWRkVG9CYXNrZXQsIGFkZEN1cnJlbnRQYWdlLCByZW1vdmVGcm9tQmFza2V0LFxuICAgICAgICAgICAgICAgIGRlbGV0aW5nQWxsRnJvbVRoZUJhc2tldCwgYWRkT25lQmVlciwgYWRkVG9CYXNrZXRPbmVCZWVyLFxuICAgICAgICAgICAgICAgIHJlbW92ZUZyb21CYXNrZXRPbmVCZWVyXG4gICAgICAgICAgICAgIH0gPSBiZWVyc1NsaWNlLmFjdGlvbnM7XG5cbmV4cG9ydCBjb25zdCB7XG4gIHNlbGVjdEFsbDogc2VsZWN0QWxsQmVlcnMsXG4gIHNlbGVjdEJ5SWQ6IHNlbGVjdEJlZXJCeUlkLFxuICBzZWxlY3RJZHM6IHNlbGVjdEJlZXJJZHNcbn0gPSBiZWVyc0FkYXB0ZXIuZ2V0U2VsZWN0b3JzKHN0YXRlID0+IHN0YXRlLmJlZXJzKTtcblxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5mdW5jdGlvbiBTcGlubmVyICh7IHRleHQgPSAnJywgc2l6ZSA9ICc1ZW0nIH0pe1xuICBjb25zdCBoZWFkZXIgPSB0ZXh0ID8gPGg0Pnt0ZXh0fTwvaDQ+IDogbnVsbFxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICB7aGVhZGVyfVxuICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IHNpemUsIHdpZHRoOiBzaXplIH19IC8+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3Bpbm5lcjtcbiIsIi8vIERlZmF1bHQgdG8gYSBkdW1teSBcImJhdGNoXCIgaW1wbGVtZW50YXRpb24gdGhhdCBqdXN0IHJ1bnMgdGhlIGNhbGxiYWNrXG5mdW5jdGlvbiBkZWZhdWx0Tm9vcEJhdGNoKGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKCk7XG59XG5cbmxldCBiYXRjaCA9IGRlZmF1bHROb29wQmF0Y2g7IC8vIEFsbG93IGluamVjdGluZyBhbm90aGVyIGJhdGNoaW5nIGZ1bmN0aW9uIGxhdGVyXG5cbmV4cG9ydCBjb25zdCBzZXRCYXRjaCA9IG5ld0JhdGNoID0+IGJhdGNoID0gbmV3QmF0Y2g7IC8vIFN1cHBseSBhIGdldHRlciBqdXN0IHRvIHNraXAgZGVhbGluZyB3aXRoIEVTTSBiaW5kaW5nc1xuXG5leHBvcnQgY29uc3QgZ2V0QmF0Y2ggPSAoKSA9PiBiYXRjaDsiLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuZXhwb3J0IGNvbnN0IFJlYWN0UmVkdXhDb250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFJlYWN0UmVkdXhDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1JlYWN0UmVkdXgnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuXG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGAuIFRoaXMgaXMgYSBsb3ctbGV2ZWxcclxuICogaG9vayB0aGF0IHlvdSBzaG91bGQgdXN1YWxseSBub3QgbmVlZCB0byBjYWxsIGRpcmVjdGx5LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGBcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoKSA9PiB7XHJcbiAqICAgY29uc3QgeyBzdG9yZSB9ID0gdXNlUmVkdXhDb250ZXh0KClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZWR1eENvbnRleHQoKSB7XG4gIGNvbnN0IGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoUmVhY3RSZWR1eENvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb250ZXh0VmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCBmaW5kIHJlYWN0LXJlZHV4IGNvbnRleHQgdmFsdWU7IHBsZWFzZSBlbnN1cmUgdGhlIGNvbXBvbmVudCBpcyB3cmFwcGVkIGluIGEgPFByb3ZpZGVyPicpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbn0iLCJpbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VEZWJ1Z1ZhbHVlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgeyBub3RJbml0aWFsaXplZCB9IGZyb20gJy4uL3V0aWxzL3VzZVN5bmNFeHRlcm5hbFN0b3JlJztcbmxldCB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvciA9IG5vdEluaXRpYWxpemVkO1xuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVVc2VTZWxlY3RvciA9IGZuID0+IHtcbiAgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgPSBmbjtcbn07XG5cbmNvbnN0IHJlZkVxdWFsaXR5ID0gKGEsIGIpID0+IGEgPT09IGI7XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JIb29rKGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dCkge1xuICBjb25zdCB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiAoKSA9PiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU2VsZWN0b3Ioc2VsZWN0b3IsIGVxdWFsaXR5Rm4gPSByZWZFcXVhbGl0eSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgcGFzcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yYCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBZb3UgbXVzdCBwYXNzIGEgZnVuY3Rpb24gYXMgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvcmApO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGVxdWFsaXR5Rm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBZb3UgbXVzdCBwYXNzIGEgZnVuY3Rpb24gYXMgYW4gZXF1YWxpdHkgZnVuY3Rpb24gdG8gdXNlU2VsZWN0b3JgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB7XG4gICAgICBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbixcbiAgICAgIGdldFNlcnZlclN0YXRlXG4gICAgfSA9IHVzZVJlZHV4Q29udGV4dCgpO1xuICAgIGNvbnN0IHNlbGVjdGVkU3RhdGUgPSB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvcihzdWJzY3JpcHRpb24uYWRkTmVzdGVkU3ViLCBzdG9yZS5nZXRTdGF0ZSwgZ2V0U2VydmVyU3RhdGUgfHwgc3RvcmUuZ2V0U3RhdGUsIHNlbGVjdG9yLCBlcXVhbGl0eUZuKTtcbiAgICB1c2VEZWJ1Z1ZhbHVlKHNlbGVjdGVkU3RhdGUpO1xuICAgIHJldHVybiBzZWxlY3RlZFN0YXRlO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlJ3Mgc3RhdGUuIFRoaXMgaG9vayB0YWtlcyBhIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxyXG4gKlxyXG4gKiBUaGlzIGhvb2sgdGFrZXMgYW4gb3B0aW9uYWwgZXF1YWxpdHkgY29tcGFyaXNvbiBmdW5jdGlvbiBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlclxyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxyXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5jb3VudGVyKVxyXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgY29uc3QgdXNlU2VsZWN0b3IgPSAvKiNfX1BVUkVfXyovY3JlYXRlU2VsZWN0b3JIb29rKCk7IiwiZXhwb3J0IGNvbnN0IG5vdEluaXRpYWxpemVkID0gKCkgPT4ge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3VTRVMgbm90IGluaXRpYWxpemVkIScpO1xufTsiLCJpbXBvcnQgeyBnZXRCYXRjaCB9IGZyb20gJy4vYmF0Y2gnOyAvLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIGNvbnN0IGJhdGNoID0gZ2V0QmF0Y2goKTtcbiAgbGV0IGZpcnN0ID0gbnVsbDtcbiAgbGV0IGxhc3QgPSBudWxsO1xuICByZXR1cm4ge1xuICAgIGNsZWFyKCkge1xuICAgICAgZmlyc3QgPSBudWxsO1xuICAgICAgbGFzdCA9IG51bGw7XG4gICAgfSxcblxuICAgIG5vdGlmeSgpIHtcbiAgICAgIGJhdGNoKCgpID0+IHtcbiAgICAgICAgbGV0IGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBnZXQoKSB7XG4gICAgICBsZXQgbGlzdGVuZXJzID0gW107XG4gICAgICBsZXQgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdGVuZXJzO1xuICAgIH0sXG5cbiAgICBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIGxldCBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgbGV0IGxpc3RlbmVyID0gbGFzdCA9IHtcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIHByZXY6IGxhc3RcbiAgICAgIH07XG5cbiAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3QgPSBsaXN0ZW5lcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBmaXJzdCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobGlzdGVuZXIubmV4dCkge1xuICAgICAgICAgIGxpc3RlbmVyLm5leHQucHJldiA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdCA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyc3QgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICB9O1xufVxuXG5jb25zdCBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnkoKSB7fSxcblxuICBnZXQ6ICgpID0+IFtdXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gIGxldCB1bnN1YnNjcmliZTtcbiAgbGV0IGxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG5cbiAgZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdHJ5U3Vic2NyaWJlKCk7XG4gICAgcmV0dXJuIGxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICBsaXN0ZW5lcnMubm90aWZ5KCk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VXcmFwcGVyKCkge1xuICAgIGlmIChzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odW5zdWJzY3JpYmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdW5zdWJzY3JpYmUpIHtcbiAgICAgIHVuc3Vic2NyaWJlID0gcGFyZW50U3ViID8gcGFyZW50U3ViLmFkZE5lc3RlZFN1YihoYW5kbGVDaGFuZ2VXcmFwcGVyKSA6IHN0b3JlLnN1YnNjcmliZShoYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIGxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh1bnN1YnNjcmliZSkge1xuICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgIHVuc3Vic2NyaWJlID0gdW5kZWZpbmVkO1xuICAgICAgbGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICBsaXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHtcbiAgICBhZGROZXN0ZWRTdWIsXG4gICAgbm90aWZ5TmVzdGVkU3VicyxcbiAgICBoYW5kbGVDaGFuZ2VXcmFwcGVyLFxuICAgIGlzU3Vic2NyaWJlZCxcbiAgICB0cnlTdWJzY3JpYmUsXG4gICAgdHJ5VW5zdWJzY3JpYmUsXG4gICAgZ2V0TGlzdGVuZXJzOiAoKSA9PiBsaXN0ZW5lcnNcbiAgfTtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbn0iLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JzsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IHRvIGVuc3VyZSB0aGUgc3RvcmVcbi8vIHN1YnNjcmlwdGlvbiBjYWxsYmFjayBhbHdheXMgaGFzIHRoZSBzZWxlY3RvciBmcm9tIHRoZSBsYXRlc3QgcmVuZGVyIGNvbW1pdFxuLy8gYXZhaWxhYmxlLCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IGhhcHBlbiBiZXR3ZWVuIHJlbmRlciBhbmQgdGhlIGVmZmVjdCxcbi8vIHdoaWNoIG1heSBjYXVzZSBtaXNzZWQgdXBkYXRlczsgd2UgYWxzbyBtdXN0IGVuc3VyZSB0aGUgc3RvcmUgc3Vic2NyaXB0aW9uXG4vLyBpcyBjcmVhdGVkIHN5bmNocm9ub3VzbHksIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgb2NjdXIgYmVmb3JlIHRoZVxuLy8gc3Vic2NyaXB0aW9uIGlzIGNyZWF0ZWQgYW5kIGFuIGluY29uc2lzdGVudCBzdGF0ZSBtYXkgYmUgb2JzZXJ2ZWRcbi8vIE1hdGNoZXMgbG9naWMgaW4gUmVhY3QncyBgc2hhcmVkL0V4ZWN1dGlvbkVudmlyb25tZW50YCBmaWxlXG5cbmV4cG9ydCBjb25zdCBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnKTtcbmV4cG9ydCBjb25zdCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gY2FuVXNlRE9NID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmXCJdO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSB2YWxpZC1qc2RvYywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUsIGlzQ29udGV4dENvbnN1bWVyIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi4vY29ubmVjdC9zZWxlY3RvckZhY3RvcnknO1xuaW1wb3J0IHsgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yeSB9IGZyb20gJy4uL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCB7IG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcnkgfSBmcm9tICcuLi9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgeyBtZXJnZVByb3BzRmFjdG9yeSB9IGZyb20gJy4uL2Nvbm5lY3QvbWVyZ2VQcm9wcyc7XG5pbXBvcnQgeyBjcmVhdGVTdWJzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi4vdXRpbHMvd2FybmluZyc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgeyBub3RJbml0aWFsaXplZCB9IGZyb20gJy4uL3V0aWxzL3VzZVN5bmNFeHRlcm5hbFN0b3JlJztcbmxldCB1c2VTeW5jRXh0ZXJuYWxTdG9yZSA9IG5vdEluaXRpYWxpemVkO1xuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVDb25uZWN0ID0gZm4gPT4ge1xuICB1c2VTeW5jRXh0ZXJuYWxTdG9yZSA9IGZuO1xufTsgLy8gRGVmaW5lIHNvbWUgY29uc3RhbnQgYXJyYXlzIGp1c3QgdG8gYXZvaWQgcmUtY3JlYXRpbmcgdGhlc2VcblxuY29uc3QgRU1QVFlfQVJSQVkgPSBbbnVsbCwgMF07XG5jb25zdCBOT19TVUJTQ1JJUFRJT05fQVJSQVkgPSBbbnVsbCwgbnVsbF07IC8vIEF0dGVtcHRzIHRvIHN0cmluZ2lmeSB3aGF0ZXZlciBub3QtcmVhbGx5LWEtY29tcG9uZW50IHZhbHVlIHdlIHdlcmUgZ2l2ZW5cbi8vIGZvciBsb2dnaW5nIGluIGFuIGVycm9yIG1lc3NhZ2VcblxuY29uc3Qgc3RyaW5naWZ5Q29tcG9uZW50ID0gQ29tcCA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KENvbXApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gU3RyaW5nKENvbXApO1xuICB9XG59O1xuXG4vLyBUaGlzIGlzIFwianVzdFwiIGEgYHVzZUxheW91dEVmZmVjdGAsIGJ1dCB3aXRoIHR3byBtb2RpZmljYXRpb25zOlxuLy8gLSB3ZSBuZWVkIHRvIGZhbGwgYmFjayB0byBgdXNlRWZmZWN0YCBpbiBTU1IgdG8gYXZvaWQgYW5ub3lpbmcgd2FybmluZ3Ncbi8vIC0gd2UgZXh0cmFjdCB0aGlzIHRvIGEgc2VwYXJhdGUgZnVuY3Rpb24gdG8gYXZvaWQgY2xvc2luZyBvdmVyIHZhbHVlc1xuLy8gICBhbmQgY2F1c2luZyBtZW1vcnkgbGVha3NcbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhlZmZlY3RGdW5jLCBlZmZlY3RBcmdzLCBkZXBlbmRlbmNpZXMpIHtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiBlZmZlY3RGdW5jKC4uLmVmZmVjdEFyZ3MpLCBkZXBlbmRlbmNpZXMpO1xufSAvLyBFZmZlY3QgY2FsbGJhY2ssIGV4dHJhY3RlZDogYXNzaWduIHRoZSBsYXRlc3QgcHJvcHMgdmFsdWVzIHRvIHJlZnMgZm9yIGxhdGVyIHVzYWdlXG5cblxuZnVuY3Rpb24gY2FwdHVyZVdyYXBwZXJQcm9wcyhsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgLy8gYWN0dWFsQ2hpbGRQcm9wczogdW5rbm93bixcbmNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMpIHtcbiAgLy8gV2Ugd2FudCB0byBjYXB0dXJlIHRoZSB3cmFwcGVyIHByb3BzIGFuZCBjaGlsZCBwcm9wcyB3ZSB1c2VkIGZvciBsYXRlciBjb21wYXJpc29uc1xuICBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQgPSB3cmFwcGVyUHJvcHM7XG4gIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIHJlbmRlciB3YXMgZnJvbSBhIHN0b3JlIHVwZGF0ZSwgY2xlYXIgb3V0IHRoYXQgcmVmZXJlbmNlIGFuZCBjYXNjYWRlIHRoZSBzdWJzY3JpYmVyIHVwZGF0ZVxuXG4gIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQpIHtcbiAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBudWxsO1xuICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgfVxufSAvLyBFZmZlY3QgY2FsbGJhY2ssIGV4dHJhY3RlZDogc3Vic2NyaWJlIHRvIHRoZSBSZWR1eCBzdG9yZSBvciBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3Rvcixcbi8vIGNoZWNrIGZvciB1cGRhdGVzIGFmdGVyIGRpc3BhdGNoZWQgYWN0aW9ucywgYW5kIHRyaWdnZXIgcmUtcmVuZGVycy5cblxuXG5mdW5jdGlvbiBzdWJzY3JpYmVVcGRhdGVzKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGlzTW91bnRlZCwgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3VicywgLy8gZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaDogUmVhY3QuRGlzcGF0Y2g8YW55PixcbmFkZGl0aW9uYWxTdWJzY3JpYmVMaXN0ZW5lcikge1xuICAvLyBJZiB3ZSdyZSBub3Qgc3Vic2NyaWJlZCB0byB0aGUgc3RvcmUsIG5vdGhpbmcgdG8gZG8gaGVyZVxuICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuICgpID0+IHt9OyAvLyBDYXB0dXJlIHZhbHVlcyBmb3IgY2hlY2tpbmcgaWYgYW5kIHdoZW4gdGhpcyBjb21wb25lbnQgdW5tb3VudHNcblxuICBsZXQgZGlkVW5zdWJzY3JpYmUgPSBmYWxzZTtcbiAgbGV0IGxhc3RUaHJvd25FcnJvciA9IG51bGw7IC8vIFdlJ2xsIHJ1biB0aGlzIGNhbGxiYWNrIGV2ZXJ5IHRpbWUgYSBzdG9yZSBzdWJzY3JpcHRpb24gdXBkYXRlIHByb3BhZ2F0ZXMgdG8gdGhpcyBjb21wb25lbnRcblxuICBjb25zdCBjaGVja0ZvclVwZGF0ZXMgPSAoKSA9PiB7XG4gICAgaWYgKGRpZFVuc3Vic2NyaWJlIHx8ICFpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgLy8gRG9uJ3QgcnVuIHN0YWxlIGxpc3RlbmVycy5cbiAgICAgIC8vIFJlZHV4IGRvZXNuJ3QgZ3VhcmFudGVlIHVuc3Vic2NyaXB0aW9ucyBoYXBwZW4gdW50aWwgbmV4dCBkaXNwYXRjaC5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFRPRE8gV2UncmUgY3VycmVudGx5IGNhbGxpbmcgZ2V0U3RhdGUgb3Vyc2VsdmVzIGhlcmUsIHJhdGhlciB0aGFuIGxldHRpbmcgYHVTRVNgIGRvIGl0XG5cblxuICAgIGNvbnN0IGxhdGVzdFN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGxldCBuZXdDaGlsZFByb3BzLCBlcnJvcjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBBY3R1YWxseSBydW4gdGhlIHNlbGVjdG9yIHdpdGggdGhlIG1vc3QgcmVjZW50IHN0b3JlIHN0YXRlIGFuZCB3cmFwcGVyIHByb3BzXG4gICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlXG4gICAgICBuZXdDaGlsZFByb3BzID0gY2hpbGRQcm9wc1NlbGVjdG9yKGxhdGVzdFN0b3JlU3RhdGUsIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXJyb3IgPSBlO1xuICAgICAgbGFzdFRocm93bkVycm9yID0gZTtcbiAgICB9XG5cbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICAgIH0gLy8gSWYgdGhlIGNoaWxkIHByb3BzIGhhdmVuJ3QgY2hhbmdlZCwgbm90aGluZyB0byBkbyBoZXJlIC0gY2FzY2FkZSB0aGUgc3Vic2NyaXB0aW9uIHVwZGF0ZVxuXG5cbiAgICBpZiAobmV3Q2hpbGRQcm9wcyA9PT0gbGFzdENoaWxkUHJvcHMuY3VycmVudCkge1xuICAgICAgaWYgKCFyZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50KSB7XG4gICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2F2ZSByZWZlcmVuY2VzIHRvIHRoZSBuZXcgY2hpbGQgcHJvcHMuICBOb3RlIHRoYXQgd2UgdHJhY2sgdGhlIFwiY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGVcIlxuICAgICAgLy8gYXMgYSByZWYgaW5zdGVhZCBvZiBhIHVzZVN0YXRlL3VzZVJlZHVjZXIgYmVjYXVzZSB3ZSBuZWVkIGEgd2F5IHRvIGRldGVybWluZSBpZiB0aGF0IHZhbHVlIGhhc1xuICAgICAgLy8gYmVlbiBwcm9jZXNzZWQuICBJZiB0aGlzIHdlbnQgaW50byB1c2VTdGF0ZS91c2VSZWR1Y2VyLCB3ZSBjb3VsZG4ndCBjbGVhciBvdXQgdGhlIHZhbHVlIHdpdGhvdXRcbiAgICAgIC8vIGZvcmNpbmcgYW5vdGhlciByZS1yZW5kZXIsIHdoaWNoIHdlIGRvbid0IHdhbnQuXG4gICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gdHJ1ZTsgLy8gVE9ETyBUaGlzIGlzIGhhY2t5IGFuZCBub3QgaG93IGB1U0VTYCBpcyBtZWFudCB0byBiZSB1c2VkXG4gICAgICAvLyBUcmlnZ2VyIHRoZSBSZWFjdCBgdXNlU3luY0V4dGVybmFsU3RvcmVgIHN1YnNjcmliZXJcblxuICAgICAgYWRkaXRpb25hbFN1YnNjcmliZUxpc3RlbmVyKCk7XG4gICAgfVxuICB9OyAvLyBBY3R1YWxseSBzdWJzY3JpYmUgdG8gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yIChvciBzdG9yZSlcblxuXG4gIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7IC8vIFB1bGwgZGF0YSBmcm9tIHRoZSBzdG9yZSBhZnRlciBmaXJzdCByZW5kZXIgaW4gY2FzZSB0aGUgc3RvcmUgaGFzXG4gIC8vIGNoYW5nZWQgc2luY2Ugd2UgYmVnYW4uXG5cbiAgY2hlY2tGb3JVcGRhdGVzKCk7XG5cbiAgY29uc3QgdW5zdWJzY3JpYmVXcmFwcGVyID0gKCkgPT4ge1xuICAgIGRpZFVuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG5cbiAgICBpZiAobGFzdFRocm93bkVycm9yKSB7XG4gICAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgd2UgY2F1Z2h0IGFuIGVycm9yIGR1ZSB0byBhIGJhZCBtYXBTdGF0ZSBmdW5jdGlvbiwgYnV0IHRoZVxuICAgICAgLy8gcGFyZW50IHJlLXJlbmRlcmVkIHdpdGhvdXQgdGhpcyBjb21wb25lbnQgYW5kIHdlJ3JlIGFib3V0IHRvIHVubW91bnQuXG4gICAgICAvLyBUaGlzIHNob3VsZG4ndCBoYXBwZW4gYXMgbG9uZyBhcyB3ZSBkbyB0b3AtZG93biBzdWJzY3JpcHRpb25zIGNvcnJlY3RseSwgYnV0XG4gICAgICAvLyBpZiB3ZSBldmVyIGRvIHRob3NlIHdyb25nLCB0aGlzIHRocm93IHdpbGwgc3VyZmFjZSB0aGUgZXJyb3IgaW4gb3VyIHRlc3RzLlxuICAgICAgLy8gSW4gdGhhdCBjYXNlLCB0aHJvdyB0aGUgZXJyb3IgZnJvbSBoZXJlIHNvIGl0IGRvZXNuJ3QgZ2V0IGxvc3QuXG4gICAgICB0aHJvdyBsYXN0VGhyb3duRXJyb3I7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1bnN1YnNjcmliZVdyYXBwZXI7XG59IC8vIFJlZHVjZXIgaW5pdGlhbCBzdGF0ZSBjcmVhdGlvbiBmb3Igb3VyIHVwZGF0ZSByZWR1Y2VyXG5cblxuY29uc3QgaW5pdFN0YXRlVXBkYXRlcyA9ICgpID0+IEVNUFRZX0FSUkFZO1xuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufVxuLyoqXHJcbiAqIEluZmVycyB0aGUgdHlwZSBvZiBwcm9wcyB0aGF0IGEgY29ubmVjdG9yIHdpbGwgaW5qZWN0IGludG8gYSBjb21wb25lbnQuXHJcbiAqL1xuXG5cbmxldCBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRQdXJlT3B0aW9uID0gZmFsc2U7XG4vKipcclxuICogQ29ubmVjdHMgYSBSZWFjdCBjb21wb25lbnQgdG8gYSBSZWR1eCBzdG9yZS5cclxuICpcclxuICogLSBXaXRob3V0IGFyZ3VtZW50cywganVzdCB3cmFwcyB0aGUgY29tcG9uZW50LCB3aXRob3V0IGNoYW5naW5nIHRoZSBiZWhhdmlvciAvIHByb3BzXHJcbiAqXHJcbiAqIC0gSWYgMiBwYXJhbXMgYXJlIHBhc3NlZCAoM3JkIHBhcmFtLCBtZXJnZVByb3BzLCBpcyBza2lwcGVkKSwgZGVmYXVsdCBiZWhhdmlvclxyXG4gKiBpcyB0byBvdmVycmlkZSBvd25Qcm9wcyAoYXMgc3RhdGVkIGluIHRoZSBkb2NzKSwgc28gd2hhdCByZW1haW5zIGlzIGV2ZXJ5dGhpbmcgdGhhdCdzXHJcbiAqIG5vdCBhIHN0YXRlIG9yIGRpc3BhdGNoIHByb3BcclxuICpcclxuICogLSBXaGVuIDNyZCBwYXJhbSBpcyBwYXNzZWQsIHdlIGRvbid0IGtub3cgaWYgb3duUHJvcHMgcHJvcGFnYXRlIGFuZCB3aGV0aGVyIHRoZXlcclxuICogc2hvdWxkIGJlIHZhbGlkIGNvbXBvbmVudCBwcm9wcywgYmVjYXVzZSBpdCBkZXBlbmRzIG9uIG1lcmdlUHJvcHMgaW1wbGVtZW50YXRpb24uXHJcbiAqIEFzIHN1Y2gsIGl0IGlzIHRoZSB1c2VyJ3MgcmVzcG9uc2liaWxpdHkgdG8gZXh0ZW5kIG93blByb3BzIGludGVyZmFjZSBmcm9tIHN0YXRlIG9yXHJcbiAqIGRpc3BhdGNoIHByb3BzIG9yIGJvdGggd2hlbiBhcHBsaWNhYmxlXHJcbiAqXHJcbiAqIEBwYXJhbSBtYXBTdGF0ZVRvUHJvcHMgQSBmdW5jdGlvbiB0aGF0IGV4dHJhY3RzIHZhbHVlcyBmcm9tIHN0YXRlXHJcbiAqIEBwYXJhbSBtYXBEaXNwYXRjaFRvUHJvcHMgU2V0dXAgZm9yIGRpc3BhdGNoaW5nIGFjdGlvbnNcclxuICogQHBhcmFtIG1lcmdlUHJvcHMgT3B0aW9uYWwgY2FsbGJhY2sgdG8gbWVyZ2Ugc3RhdGUgYW5kIGRpc3BhdGNoIHByb3BzIHRvZ2V0aGVyXHJcbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIGNvbmZpZ3VyaW5nIHRoZSBjb25uZWN0aW9uXHJcbiAqXHJcbiAqL1xuXG5mdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCB7XG4gIC8vIFRoZSBgcHVyZWAgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWQsIHNvIFRTIGRvZXNuJ3QgbGlrZSB1cyBkZXN0cnVjdHVyaW5nIHRoaXMgdG8gY2hlY2sgaXRzIGV4aXN0ZW5jZS5cbiAgLy8gQHRzLWlnbm9yZVxuICBwdXJlLFxuICBhcmVTdGF0ZXNFcXVhbCA9IHN0cmljdEVxdWFsLFxuICBhcmVPd25Qcm9wc0VxdWFsID0gc2hhbGxvd0VxdWFsLFxuICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBzaGFsbG93RXF1YWwsXG4gIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBzaGFsbG93RXF1YWwsXG4gIC8vIHVzZSBSZWFjdCdzIGZvcndhcmRSZWYgdG8gZXhwb3NlIGEgcmVmIG9mIHRoZSB3cmFwcGVkIGNvbXBvbmVudFxuICBmb3J3YXJkUmVmID0gZmFsc2UsXG4gIC8vIHRoZSBjb250ZXh0IGNvbnN1bWVyIHRvIHVzZVxuICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHRcbn0gPSB7fSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChwdXJlICE9PSB1bmRlZmluZWQgJiYgIWhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZFB1cmVPcHRpb24pIHtcbiAgICAgIGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZFB1cmVPcHRpb24gPSB0cnVlO1xuICAgICAgd2FybmluZygnVGhlIGBwdXJlYCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZC4gYGNvbm5lY3RgIGlzIG5vdyBhbHdheXMgYSBcInB1cmUvbWVtb2l6ZWRcIiBjb21wb25lbnQnKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBDb250ZXh0ID0gY29udGV4dDtcbiAgY29uc3QgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcnkobWFwU3RhdGVUb1Byb3BzKTtcbiAgY29uc3QgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcnkobWFwRGlzcGF0Y2hUb1Byb3BzKTtcbiAgY29uc3QgaW5pdE1lcmdlUHJvcHMgPSBtZXJnZVByb3BzRmFjdG9yeShtZXJnZVByb3BzKTtcbiAgY29uc3Qgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzID0gQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpO1xuXG4gIGNvbnN0IHdyYXBXaXRoQ29ubmVjdCA9IFdyYXBwZWRDb21wb25lbnQgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc1ZhbGlkRWxlbWVudFR5cGUoV3JhcHBlZENvbXBvbmVudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgY29ubmVjdC4gSW5zdGVhZCByZWNlaXZlZCAke3N0cmluZ2lmeUNvbXBvbmVudChXcmFwcGVkQ29tcG9uZW50KX1gKTtcbiAgICB9XG5cbiAgICBjb25zdCB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICAgIGNvbnN0IGRpc3BsYXlOYW1lID0gYENvbm5lY3QoJHt3cmFwcGVkQ29tcG9uZW50TmFtZX0pYDtcbiAgICBjb25zdCBzZWxlY3RvckZhY3RvcnlPcHRpb25zID0ge1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgZGlzcGxheU5hbWUsXG4gICAgICB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzLFxuICAgICAgYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBDb25uZWN0RnVuY3Rpb24ocHJvcHMpIHtcbiAgICAgIGNvbnN0IFtwcm9wc0NvbnRleHQsIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYsIHdyYXBwZXJQcm9wc10gPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhY3R1YWwgXCJkYXRhXCIgcHJvcHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGUgd3JhcHBlciBjb21wb25lbnQsXG4gICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAvLyBUbyBtYWludGFpbiB0aGUgd3JhcHBlclByb3BzIG9iamVjdCByZWZlcmVuY2UsIG1lbW9pemUgdGhpcyBkZXN0cnVjdHVyaW5nLlxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgcmVhY3RSZWR1eEZvcndhcmRlZFJlZlxuICAgICAgICB9ID0gcHJvcHMsXG4gICAgICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gICAgICAgIHJldHVybiBbcHJvcHMuY29udGV4dCwgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXTtcbiAgICAgIH0sIFtwcm9wc10pO1xuICAgICAgY29uc3QgQ29udGV4dFRvVXNlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIC8vIFVzZXJzIG1heSBvcHRpb25hbGx5IHBhc3MgaW4gYSBjdXN0b20gY29udGV4dCBpbnN0YW5jZSB0byB1c2UgaW5zdGVhZCBvZiBvdXIgUmVhY3RSZWR1eENvbnRleHQuXG4gICAgICAgIC8vIE1lbW9pemUgdGhlIGNoZWNrIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBjb250ZXh0IGluc3RhbmNlIHdlIHNob3VsZCB1c2UuXG4gICAgICAgIHJldHVybiBwcm9wc0NvbnRleHQgJiYgcHJvcHNDb250ZXh0LkNvbnN1bWVyICYmIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaXNDb250ZXh0Q29uc3VtZXIoIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHByb3BzQ29udGV4dC5Db25zdW1lciwgbnVsbCkpID8gcHJvcHNDb250ZXh0IDogQ29udGV4dDtcbiAgICAgIH0sIFtwcm9wc0NvbnRleHQsIENvbnRleHRdKTsgLy8gUmV0cmlldmUgdGhlIHN0b3JlIGFuZCBhbmNlc3RvciBzdWJzY3JpcHRpb24gdmlhIGNvbnRleHQsIGlmIGF2YWlsYWJsZVxuXG4gICAgICBjb25zdCBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KENvbnRleHRUb1VzZSk7IC8vIFRoZSBzdG9yZSBfbXVzdF8gZXhpc3QgYXMgZWl0aGVyIGEgcHJvcCBvciBpbiBjb250ZXh0LlxuICAgICAgLy8gV2UnbGwgY2hlY2sgdG8gc2VlIGlmIGl0IF9sb29rc18gbGlrZSBhIFJlZHV4IHN0b3JlIGZpcnN0LlxuICAgICAgLy8gVGhpcyBhbGxvd3MgdXMgdG8gcGFzcyB0aHJvdWdoIGEgYHN0b3JlYCBwcm9wIHRoYXQgaXMganVzdCBhIHBsYWluIHZhbHVlLlxuXG4gICAgICBjb25zdCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPSBCb29sZWFuKHByb3BzLnN0b3JlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmdldFN0YXRlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIGNvbnN0IGRpZFN0b3JlQ29tZUZyb21Db250ZXh0ID0gQm9vbGVhbihjb250ZXh0VmFsdWUpICYmIEJvb2xlYW4oY29udGV4dFZhbHVlLnN0b3JlKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWRpZFN0b3JlQ29tZUZyb21Qcm9wcyAmJiAhZGlkU3RvcmVDb21lRnJvbUNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBcInN0b3JlXCIgaW4gdGhlIGNvbnRleHQgb2YgYCArIGBcIiR7ZGlzcGxheU5hbWV9XCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIGAgKyBgb3IgcGFzcyBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHByb3ZpZGVyIHRvIDxQcm92aWRlcj4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIGAgKyBgUmVhY3QgY29udGV4dCBjb25zdW1lciB0byAke2Rpc3BsYXlOYW1lfSBpbiBjb25uZWN0IG9wdGlvbnMuYCk7XG4gICAgICB9IC8vIEJhc2VkIG9uIHRoZSBwcmV2aW91cyBjaGVjaywgb25lIG9mIHRoZXNlIG11c3QgYmUgdHJ1ZVxuXG5cbiAgICAgIGNvbnN0IHN0b3JlID0gZGlkU3RvcmVDb21lRnJvbVByb3BzID8gcHJvcHMuc3RvcmUgOiBjb250ZXh0VmFsdWUuc3RvcmU7XG4gICAgICBjb25zdCBnZXRTZXJ2ZXJTdGF0ZSA9IGRpZFN0b3JlQ29tZUZyb21Db250ZXh0ID8gY29udGV4dFZhbHVlLmdldFNlcnZlclN0YXRlIDogc3RvcmUuZ2V0U3RhdGU7XG4gICAgICBjb25zdCBjaGlsZFByb3BzU2VsZWN0b3IgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgLy8gVGhlIGNoaWxkIHByb3BzIHNlbGVjdG9yIG5lZWRzIHRoZSBzdG9yZSByZWZlcmVuY2UgYXMgYW4gaW5wdXQuXG4gICAgICAgIC8vIFJlLWNyZWF0ZSB0aGlzIHNlbGVjdG9yIHdoZW5ldmVyIHRoZSBzdG9yZSBjaGFuZ2VzLlxuICAgICAgICByZXR1cm4gZGVmYXVsdFNlbGVjdG9yRmFjdG9yeShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgICB9LCBbc3RvcmVdKTtcbiAgICAgIGNvbnN0IFtzdWJzY3JpcHRpb24sIG5vdGlmeU5lc3RlZFN1YnNdID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm4gTk9fU1VCU0NSSVBUSU9OX0FSUkFZOyAvLyBUaGlzIFN1YnNjcmlwdGlvbidzIHNvdXJjZSBzaG91bGQgbWF0Y2ggd2hlcmUgc3RvcmUgY2FtZSBmcm9tOiBwcm9wcyB2cy4gY29udGV4dC4gQSBjb21wb25lbnRcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSBzdG9yZSB2aWEgcHJvcHMgc2hvdWxkbid0IHVzZSBzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0LCBvciB2aWNlIHZlcnNhLlxuXG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gdW5kZWZpbmVkIDogY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbik7IC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIFRoaXMgY2FuXG4gICAgICAgIC8vIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3MgbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGUgIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG5cbiAgICAgICAgY29uc3Qgbm90aWZ5TmVzdGVkU3VicyA9IHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgcmV0dXJuIFtzdWJzY3JpcHRpb24sIG5vdGlmeU5lc3RlZFN1YnNdO1xuICAgICAgfSwgW3N0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZV0pOyAvLyBEZXRlcm1pbmUgd2hhdCB7c3RvcmUsIHN1YnNjcmlwdGlvbn0gdmFsdWUgc2hvdWxkIGJlIHB1dCBpbnRvIG5lc3RlZCBjb250ZXh0LCBpZiBuZWNlc3NhcnksXG4gICAgICAvLyBhbmQgbWVtb2l6ZSB0aGF0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IGNvbnRleHQgdXBkYXRlcy5cblxuICAgICAgY29uc3Qgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBpZiAoZGlkU3RvcmVDb21lRnJvbVByb3BzKSB7XG4gICAgICAgICAgLy8gVGhpcyBjb21wb25lbnQgaXMgZGlyZWN0bHkgc3Vic2NyaWJlZCB0byBhIHN0b3JlIGZyb20gcHJvcHMuXG4gICAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCBkZXNjZW5kYW50cyByZWFkaW5nIGZyb20gdGhpcyBzdG9yZSAtIHBhc3MgZG93biB3aGF0ZXZlclxuICAgICAgICAgIC8vIHRoZSBleGlzdGluZyBjb250ZXh0IHZhbHVlIGlzIGZyb20gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yLlxuICAgICAgICAgIHJldHVybiBjb250ZXh0VmFsdWU7XG4gICAgICAgIH0gLy8gT3RoZXJ3aXNlLCBwdXQgdGhpcyBjb21wb25lbnQncyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgaW50byBjb250ZXh0LCBzbyB0aGF0XG4gICAgICAgIC8vIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3b24ndCB1cGRhdGUgdW50aWwgYWZ0ZXIgdGhpcyBjb21wb25lbnQgaXMgZG9uZVxuXG5cbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0VmFsdWUsIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb25cbiAgICAgICAgfSk7XG4gICAgICB9LCBbZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWUsIHN1YnNjcmlwdGlvbl0pOyAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cbiAgICAgIGNvbnN0IGxhc3RDaGlsZFByb3BzID0gdXNlUmVmKCk7XG4gICAgICBjb25zdCBsYXN0V3JhcHBlclByb3BzID0gdXNlUmVmKHdyYXBwZXJQcm9wcyk7XG4gICAgICBjb25zdCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlID0gdXNlUmVmKCk7XG4gICAgICBjb25zdCByZW5kZXJJc1NjaGVkdWxlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICBjb25zdCBpc1Byb2Nlc3NpbmdEaXNwYXRjaCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICBjb25zdCBpc01vdW50ZWQgPSB1c2VSZWYoZmFsc2UpO1xuICAgICAgY29uc3QgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9IHVzZVJlZigpO1xuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlzTW91bnRlZC5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICBpc01vdW50ZWQuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgfSwgW10pO1xuICAgICAgY29uc3QgYWN0dWFsQ2hpbGRQcm9wc1NlbGVjdG9yID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNlbGVjdG9yID0gKCkgPT4ge1xuICAgICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAgIC8vIC0gVGhpcyByZW5kZXIgbWF5IGhhdmUgYmVlbiB0cmlnZ2VyZWQgYnkgYSBSZWR1eCBzdG9yZSB1cGRhdGUgdGhhdCBwcm9kdWNlZCBuZXcgY2hpbGQgcHJvcHNcbiAgICAgICAgICAvLyAtIEhvd2V2ZXIsIHdlIG1heSBoYXZlIGdvdHRlbiBuZXcgd3JhcHBlciBwcm9wcyBhZnRlciB0aGF0XG4gICAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgICAvLyBCdXQsIGlmIHdlIGhhdmUgbmV3IHdyYXBwZXIgcHJvcHMsIHRob3NlIG1pZ2h0IGNoYW5nZSB0aGUgY2hpbGQgcHJvcHMsIHNvIHdlIGhhdmUgdG8gcmVjYWxjdWxhdGUgdGhpbmdzLlxuICAgICAgICAgIC8vIFNvLCB3ZSdsbCB1c2UgdGhlIGNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlIG9ubHkgaWYgdGhlIHdyYXBwZXIgcHJvcHMgYXJlIHRoZSBzYW1lIGFzIGxhc3QgdGltZS5cbiAgICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50O1xuICAgICAgICAgIH0gLy8gVE9ETyBXZSdyZSByZWFkaW5nIHRoZSBzdG9yZSBkaXJlY3RseSBpbiByZW5kZXIoKSBoZXJlLiBCYWQgaWRlYT9cbiAgICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBkbyB0aGlzIGJlY2F1c2Ugb24gcmVuZGVycyBfbm90XyBjYXVzZWQgYnkgc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0aGUgbGF0ZXN0IHN0b3JlIHN0YXRlXG4gICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZS5cblxuXG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICAgIH0sIFtzdG9yZSwgd3JhcHBlclByb3BzXSk7IC8vIFdlIG5lZWQgdGhpcyB0byBleGVjdXRlIHN5bmNocm9ub3VzbHkgZXZlcnkgdGltZSB3ZSByZS1yZW5kZXIuIEhvd2V2ZXIsIFJlYWN0IHdhcm5zXG4gICAgICAvLyBhYm91dCB1c2VMYXlvdXRFZmZlY3QgaW4gU1NSLCBzbyB3ZSB0cnkgdG8gZGV0ZWN0IGVudmlyb25tZW50IGFuZCBmYWxsIGJhY2sgdG9cbiAgICAgIC8vIGp1c3QgdXNlRWZmZWN0IGluc3RlYWQgdG8gYXZvaWQgdGhlIHdhcm5pbmcsIHNpbmNlIG5laXRoZXIgd2lsbCBydW4gYW55d2F5LlxuXG4gICAgICBjb25zdCBzdWJzY3JpYmVGb3JSZWFjdCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCBzdWJzY3JpYmUgPSByZWFjdExpc3RlbmVyID0+IHtcbiAgICAgICAgICBpZiAoIXN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHt9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVVcGRhdGVzKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBpc01vdW50ZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIHJlYWN0TGlzdGVuZXIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzdWJzY3JpYmU7XG4gICAgICB9LCBbc3Vic2NyaXB0aW9uXSk7XG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MoY2FwdHVyZVdyYXBwZXJQcm9wcywgW2xhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgd3JhcHBlclByb3BzLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzXSk7XG4gICAgICBsZXQgYWN0dWFsQ2hpbGRQcm9wcztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlKCAvLyBUT0RPIFdlJ3JlIHBhc3NpbmcgdGhyb3VnaCBhIGJpZyB3cmFwcGVyIHRoYXQgZG9lcyBhIGJ1bmNoIG9mIGV4dHJhIHNpZGUgZWZmZWN0cyBiZXNpZGVzIHN1YnNjcmliaW5nXG4gICAgICAgIHN1YnNjcmliZUZvclJlYWN0LCAvLyBUT0RPIFRoaXMgaXMgaW5jcmVkaWJseSBoYWNreS4gV2UndmUgYWxyZWFkeSBwcm9jZXNzZWQgdGhlIHN0b3JlIHVwZGF0ZSBhbmQgY2FsY3VsYXRlZCBuZXcgY2hpbGQgcHJvcHMsXG4gICAgICAgIC8vIFRPRE8gYW5kIHdlJ3JlIGp1c3QgcGFzc2luZyB0aGF0IHRocm91Z2ggc28gaXQgdHJpZ2dlcnMgYSByZS1yZW5kZXIgZm9yIHVzIHJhdGhlciB0aGFuIHJlbHlpbmcgb24gYHVTRVNgLlxuICAgICAgICBhY3R1YWxDaGlsZFByb3BzU2VsZWN0b3IsIGdldFNlcnZlclN0YXRlID8gKCkgPT4gY2hpbGRQcm9wc1NlbGVjdG9yKGdldFNlcnZlclN0YXRlKCksIHdyYXBwZXJQcm9wcykgOiBhY3R1YWxDaGlsZFByb3BzU2VsZWN0b3IpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgICAgICA7XG4gICAgICAgICAgZXJyLm1lc3NhZ2UgKz0gYFxcblRoZSBlcnJvciBtYXkgYmUgY29ycmVsYXRlZCB3aXRoIHRoaXMgcHJldmlvdXMgZXJyb3I6XFxuJHtsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQuc3RhY2t9XFxuXFxuYDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gYWN0dWFsQ2hpbGRQcm9wcztcbiAgICAgIH0pOyAvLyBOb3cgdGhhdCBhbGwgdGhhdCdzIGRvbmUsIHdlIGNhbiBmaW5hbGx5IHRyeSB0byBhY3R1YWxseSByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgIC8vIFdlIG1lbW9pemUgdGhlIGVsZW1lbnRzIGZvciB0aGUgcmVuZGVyZWQgY2hpbGQgY29tcG9uZW50IGFzIGFuIG9wdGltaXphdGlvbi5cblxuICAgICAgY29uc3QgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgLyojX19QVVJFX18qL1xuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIF9leHRlbmRzKHt9LCBhY3R1YWxDaGlsZFByb3BzLCB7XG4gICAgICAgICAgICByZWY6IHJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcbiAgICAgICAgICB9KSlcbiAgICAgICAgKTtcbiAgICAgIH0sIFtyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCBXcmFwcGVkQ29tcG9uZW50LCBhY3R1YWxDaGlsZFByb3BzXSk7IC8vIElmIFJlYWN0IHNlZXMgdGhlIGV4YWN0IHNhbWUgZWxlbWVudCByZWZlcmVuY2UgYXMgbGFzdCB0aW1lLCBpdCBiYWlscyBvdXQgb2YgcmUtcmVuZGVyaW5nXG4gICAgICAvLyB0aGF0IGNoaWxkLCBzYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIFJlYWN0Lm1lbW8oKSBvciByZXR1cm5lZCBmYWxzZSBmcm9tIHNob3VsZENvbXBvbmVudFVwZGF0ZS5cblxuICAgICAgY29uc3QgcmVuZGVyZWRDaGlsZCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgaXMgc3Vic2NyaWJlZCB0byBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRvIHBhc3MgaXRzIG93blxuICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBkb3duIHRvIG91ciBkZXNjZW5kYW50cy4gVGhhdCBtZWFucyByZW5kZXJpbmcgdGhlIHNhbWVcbiAgICAgICAgICAvLyBDb250ZXh0IGluc3RhbmNlLCBhbmQgcHV0dGluZyBhIGRpZmZlcmVudCB2YWx1ZSBpbnRvIHRoZSBjb250ZXh0LlxuICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvdmVycmlkZGVuQ29udGV4dFZhbHVlXG4gICAgICAgICAgfSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENoaWxkO1xuICAgIH1cblxuICAgIGNvbnN0IF9Db25uZWN0ID0gUmVhY3QubWVtbyhDb25uZWN0RnVuY3Rpb24pO1xuXG4gICAgLy8gQWRkIGEgaGFja3kgY2FzdCB0byBnZXQgdGhlIHJpZ2h0IG91dHB1dCB0eXBlXG4gICAgY29uc3QgQ29ubmVjdCA9IF9Db25uZWN0O1xuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IENvbm5lY3RGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgIGNvbnN0IF9mb3J3YXJkZWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIGZvcndhcmRDb25uZWN0UmVmKHByb3BzLCByZWYpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29ubmVjdCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgcmVhY3RSZWR1eEZvcndhcmRlZFJlZjogcmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBmb3J3YXJkZWQgPSBfZm9yd2FyZGVkO1xuICAgICAgZm9yd2FyZGVkLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICBmb3J3YXJkZWQuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICByZXR1cm4gaG9pc3RTdGF0aWNzKGZvcndhcmRlZCwgV3JhcHBlZENvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvaXN0U3RhdGljcyhDb25uZWN0LCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgfTtcblxuICByZXR1cm4gd3JhcFdpdGhDb25uZWN0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0OyIsImltcG9ydCBSZWFjdCwgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IHsgY3JlYXRlU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcblxuZnVuY3Rpb24gUHJvdmlkZXIoe1xuICBzdG9yZSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHNlcnZlclN0YXRlXG59KSB7XG4gIGNvbnN0IGNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uLFxuICAgICAgZ2V0U2VydmVyU3RhdGU6IHNlcnZlclN0YXRlID8gKCkgPT4gc2VydmVyU3RhdGUgOiB1bmRlZmluZWRcbiAgICB9O1xuICB9LCBbc3RvcmUsIHNlcnZlclN0YXRlXSk7XG4gIGNvbnN0IHByZXZpb3VzU3RhdGUgPSB1c2VNZW1vKCgpID0+IHN0b3JlLmdldFN0YXRlKCksIFtzdG9yZV0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBzdWJzY3JpcHRpb25cbiAgICB9ID0gY29udGV4dFZhbHVlO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuXG4gICAgaWYgKHByZXZpb3VzU3RhdGUgIT09IHN0b3JlLmdldFN0YXRlKCkpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSB1bmRlZmluZWQ7XG4gICAgfTtcbiAgfSwgW2NvbnRleHRWYWx1ZSwgcHJldmlvdXNTdGF0ZV0pO1xuICBjb25zdCBDb250ZXh0ID0gY29udGV4dCB8fCBSZWFjdFJlZHV4Q29udGV4dDsgLy8gQHRzLWlnbm9yZSAnQW55QWN0aW9uJyBpcyBhc3NpZ25hYmxlIHRvIHRoZSBjb25zdHJhaW50IG9mIHR5cGUgJ0EnLCBidXQgJ0EnIGNvdWxkIGJlIGluc3RhbnRpYXRlZCB3aXRoIGEgZGlmZmVyZW50IHN1YnR5cGVcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQcm92aWRlcjsiLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU3RvcmVgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQpIHtcbiAgY29uc3QgdXNlUmVkdXhDb250ZXh0ID0gLy8gQHRzLWlnbm9yZVxuICBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiAoKSA9PiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU3RvcmUoKSB7XG4gICAgY29uc3Qge1xuICAgICAgc3RvcmVcbiAgICB9ID0gdXNlUmVkdXhDb250ZXh0KCk7IC8vIEB0cy1pZ25vcmVcblxuICAgIHJldHVybiBzdG9yZTtcbiAgfTtcbn1cbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZS5cclxuICpcclxuICogQHJldHVybnMge2FueX0gdGhlIHJlZHV4IHN0b3JlXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlU3RvcmUgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IEV4YW1wbGVDb21wb25lbnQgPSAoKSA9PiB7XHJcbiAqICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSgpXHJcbiAqICAgcmV0dXJuIDxkaXY+e3N0b3JlLmdldFN0YXRlKCl9PC9kaXY+XHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCBjb25zdCB1c2VTdG9yZSA9IC8qI19fUFVSRV9fKi9jcmVhdGVTdG9yZUhvb2soKTsiLCJpbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VTdG9yZSBhcyB1c2VEZWZhdWx0U3RvcmUsIGNyZWF0ZVN0b3JlSG9vayB9IGZyb20gJy4vdXNlU3RvcmUnO1xuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VEaXNwYXRjaGAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZURpc3BhdGNoYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXNwYXRjaEhvb2soY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0KSB7XG4gIGNvbnN0IHVzZVN0b3JlID0gLy8gQHRzLWlnbm9yZVxuICBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRTdG9yZSA6IGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZURpc3BhdGNoKCkge1xuICAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoKTsgLy8gQHRzLWlnbm9yZVxuXG4gICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IGBkaXNwYXRjaGAgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl8ZnVuY3Rpb259IHJlZHV4IHN0b3JlJ3MgYGRpc3BhdGNoYCBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoeyB2YWx1ZSB9KSA9PiB7XHJcbiAqICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXHJcbiAqICAgY29uc3QgaW5jcmVhc2VDb3VudGVyID0gdXNlQ2FsbGJhY2soKCkgPT4gZGlzcGF0Y2goeyB0eXBlOiAnaW5jcmVhc2UtY291bnRlcicgfSksIFtdKVxyXG4gKiAgIHJldHVybiAoXHJcbiAqICAgICA8ZGl2PlxyXG4gKiAgICAgICA8c3Bhbj57dmFsdWV9PC9zcGFuPlxyXG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2luY3JlYXNlQ291bnRlcn0+SW5jcmVhc2UgY291bnRlcjwvYnV0dG9uPlxyXG4gKiAgICAgPC9kaXY+XHJcbiAqICAgKVxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgY29uc3QgdXNlRGlzcGF0Y2ggPSAvKiNfX1BVUkVfXyovY3JlYXRlRGlzcGF0Y2hIb29rKCk7IiwiLy8gVGhlIHByaW1hcnkgZW50cnkgcG9pbnQgYXNzdW1lcyB3ZSdyZSB3b3JraW5nIHdpdGggc3RhbmRhcmQgUmVhY3RET00vUk4sIGJ1dFxuLy8gb2xkZXIgdmVyc2lvbnMgdGhhdCBkbyBub3QgaW5jbHVkZSBgdXNlU3luY0V4dGVybmFsU3RvcmVgIChSZWFjdCAxNi45IC0gMTcueCkuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoZSB1c2VTeW5jRXh0ZXJuYWxTdG9yZSBjb21wYXQgc2hpbSBpcyBuZWVkZWQuXG5pbXBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSB9IGZyb20gJ3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0nO1xuaW1wb3J0IHsgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgfSBmcm9tICd1c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL3dpdGgtc2VsZWN0b3InO1xuaW1wb3J0IHsgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgYXMgYmF0Y2ggfSBmcm9tICcuL3V0aWxzL3JlYWN0QmF0Y2hlZFVwZGF0ZXMnO1xuaW1wb3J0IHsgc2V0QmF0Y2ggfSBmcm9tICcuL3V0aWxzL2JhdGNoJztcbmltcG9ydCB7IGluaXRpYWxpemVVc2VTZWxlY3RvciB9IGZyb20gJy4vaG9va3MvdXNlU2VsZWN0b3InO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUNvbm5lY3QgfSBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdCc7XG5pbml0aWFsaXplVXNlU2VsZWN0b3IodXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IpO1xuaW5pdGlhbGl6ZUNvbm5lY3QodXNlU3luY0V4dGVybmFsU3RvcmUpOyAvLyBFbmFibGUgYmF0Y2hlZCB1cGRhdGVzIGluIG91ciBzdWJzY3JpcHRpb25zIGZvciB1c2Vcbi8vIHdpdGggc3RhbmRhcmQgUmVhY3QgcmVuZGVyZXJzIChSZWFjdERPTSwgUmVhY3QgTmF0aXZlKVxuXG5zZXRCYXRjaChiYXRjaCk7XG5leHBvcnQgeyBiYXRjaCB9O1xuZXhwb3J0ICogZnJvbSAnLi9leHBvcnRzJzsiLCJpbXBvcnQgeyBjcmVhdGVTbGljZSwgY3JlYXRlRW50aXR5QWRhcHRlciB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XG5cbmNvbnN0IGJhc2tldEFkYXB0ZXIgPSBjcmVhdGVFbnRpdHlBZGFwdGVyKCk7XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IGJhc2tldEFkYXB0ZXIuZ2V0SW5pdGlhbFN0YXRlKCk7XG5cbmNvbnN0IGJhc2tldFNsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICBuYW1lOiBcImJhc2tldFwiLFxuICBpbml0aWFsU3RhdGUsXG4gIHJlZHVjZXJzOiB7XG4gICAgYWRkUHJvZHVjdHMoc3RhdGUsIGFjdGlvbikge1xuICAgICAgYmFza2V0QWRhcHRlci51cHNlcnRNYW55KHN0YXRlLCBhY3Rpb24ucGF5bG9hZCk7XG4gICAgfSxcbiAgICByZW1vdmVQcm9kdWN0KHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGJhc2tldEFkYXB0ZXIucmVtb3ZlT25lKHN0YXRlLCBhY3Rpb24ucGF5bG9hZCk7XG4gICAgfSxcbiAgICBkZWNyZW1lbnRCZWVycyhzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBpZihzdGF0ZS5lbnRpdGllc1thY3Rpb24ucGF5bG9hZF0ucXVhbnRpdHkgPT09IDEpe1xuICAgICAgICBzdGF0ZS5lbnRpdGllc1thY3Rpb24ucGF5bG9hZF0ucXVhbnRpdHkgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUuZW50aXRpZXNbYWN0aW9uLnBheWxvYWRdLnF1YW50aXR5LS07XG4gICAgICB9XG4gICAgfSxcbiAgICBpbmNyZW1lbnRCZWVycyhzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZS5lbnRpdGllc1thY3Rpb24ucGF5bG9hZF0ucXVhbnRpdHkrKztcbiAgICB9LFxuICAgIHVwZGF0ZVByaWNlKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlLmVudGl0aWVzW2FjdGlvbi5wYXlsb2FkLmlkXS5wcmljZSA9IGFjdGlvbi5wYXlsb2FkLnByaWNlO1xuICAgIH0sXG4gICAgY2xlYXJCYXNrZXQoc3RhdGUpIHtcbiAgICAgIGJhc2tldEFkYXB0ZXIucmVtb3ZlQWxsKHN0YXRlKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBiYXNrZXRTbGljZS5yZWR1Y2VyO1xuXG5leHBvcnQgY29uc3QgeyBhZGRQcm9kdWN0cywgZGVjcmVtZW50QmVlcnMsIGluY3JlbWVudEJlZXJzLCB1cGRhdGVQcmljZSwgcmVtb3ZlUHJvZHVjdCwgY2xlYXJCYXNrZXQgfSA9IGJhc2tldFNsaWNlLmFjdGlvbnM7XG5cbmV4cG9ydCBjb25zdCB7XG4gIHNlbGVjdEFsbDogc2VsZWN0QWxsQmVlcnNCYXNrZXQsXG4gIHNlbGVjdEJ5SWQ6IHNlbGVjdEJlZXJCYXNrZXRCeUlkLFxuICBzZWxlY3RJZHM6IHNlbGVjdEJlZXJCYXNrZXRJZHNcbn0gPSBiYXNrZXRBZGFwdGVyLmdldFNlbGVjdG9ycyhzdGF0ZSA9PiBzdGF0ZS5iYXNrZXQpO1xuIiwiaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcbmltcG9ydCB7IGJ1dHRvblMgfSBmcm9tIFwiL3NyYy9zdHlsZS9taXhpbnNcIjtcblxuZXhwb3J0IGNvbnN0IEJ1dHRvbkFjdGl2ZVN0eWxlID0gc3R5bGVkLmJ1dHRvbmBcbiAgJHtidXR0b25TfTtcblxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTQ5NzE2O1xuICBib3JkZXI6IDJweCBzb2xpZCAjNTQ5NzE2O1xuICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5jb2xvcldoaXRlfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBCdXR0b25TdHlsZSA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9uU307XG5cbiAgYm9yZGVyOiAycHggc29saWQgIzU0OTcxNjtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5jb2xvcldoaXRlfTtcbiAgY29sb3I6ICM1NDk3MTY7XG5gO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyByZW1vdmVQcm9kdWN0IH0gZnJvbSBcIi9zcmMvZmVhdHVyZXMvYmFza2V0U2xpY2VcIjtcbmltcG9ydCB7IHNlbGVjdEJlZXJCeUlkLCBhZGRUb0Jhc2tldCwgcmVtb3ZlRnJvbUJhc2tldCB9IGZyb20gXCIvc3JjL2ZlYXR1cmVzL2JlZXJzU2xpY2VcIjtcbmltcG9ydCAqIGFzIFMgZnJvbSBcIi4vc3R5bGVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIEJ1dHRvbkFjdGl2ZSh7IGJlZXJJZCwgY2xhc3NCIH0pIHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICByZXR1cm4oXG4gICAgPFMuQnV0dG9uQWN0aXZlU3R5bGVcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NCfVxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHJlbW92ZUZyb21CYXNrZXQoYmVlcklkKSk7XG4gICAgICAgIGRpc3BhdGNoKHJlbW92ZVByb2R1Y3QoYmVlcklkKSk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGJlZXJJZCk7XG4gICAgICB9fT5SZW1vdmUgZnJvbSBjYXJ0XG4gICAgPC9TLkJ1dHRvbkFjdGl2ZVN0eWxlPlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQnV0dG9uKHsgYmVlcklkLCBjbGFzc0IgfSkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IGJlZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzZWxlY3RCZWVyQnlJZChzdGF0ZSwgYmVlcklkKSk7XG5cbiAgcmV0dXJuKFxuICAgIDxTLkJ1dHRvblN0eWxlXG4gICAgICBjbGFzc05hbWU9e2NsYXNzQn1cbiAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICBkaXNwYXRjaChhZGRUb0Jhc2tldChiZWVySWQpKTtcbiAgICAgICAgY29uc29sZS5sb2coYmVlcilcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYmVlcklkLCBKU09OLnN0cmluZ2lmeSh7Li4uYmVlciwgcXVhbnRpdHk6IDEsIHByaWNlOiBiZWVyLmlidSwgaXNDYXJ0OiB0cnVlfSkpO1xuICAgICAgfX0+QWRkIHRvIGNhcnRcbiAgICA8L1MuQnV0dG9uU3R5bGU+XG4gICk7XG59XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBUaXRsZSwgSW50ZXI1MDAgfSBmcm9tIFwiL3NyYy9zdHlsZS9taXhpbnNcIjtcblxuZXhwb3J0IGNvbnN0IExpbmtCZWVyID0gc3R5bGVkKExpbmspYFxuICBkaXNwbGF5OiBncmlkO1xuICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogMjBweDtcblxuICAmOmhvdmVyIGltZyB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjEpO1xuICB9XG5cbiAgJjpob3ZlciBoMiB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBzb2xpZCB1bmRlcmxpbmUgJHsocHJvcHMpID0+IHByb3BzLnRoZW1lLmNvbG9yQWN0aXZlTGlua30gMnB4O1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNjMuOTRlbSkge1xuICAgIGdhcDogMDtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IEltZ1N0eWxlID0gc3R5bGVkLmltZ2BcbiAgb2JqZWN0LWZpdDogY29udGFpbjtcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIC4zNXMgZWFzZS1vdXQ7XG5cbiAgbWFyZ2luOiAxMHB4O1xuYDtcblxuZXhwb3J0IGNvbnN0IEJlZXJUaXRsZSA9IHN0eWxlZC5oMmBcbiAgJHtUaXRsZX07XG5gO1xuXG5leHBvcnQgY29uc3QgQmVlckFsYyA9IHN0eWxlZC5zcGFuYFxuICBmb250LXNpemU6IDEuNWVtO1xuICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5jb2xvckJsYWNrfTtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA2My45NGVtKSB7XG4gICAgZm9udC1zaXplOiAxZW07XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgZm9udC1zaXplOiAwLjhlbTtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IEJlZXJQcmljZSA9IHN0eWxlZC5zcGFuYFxuICAke0ludGVyNTAwfTtcbiAgZm9udC1zaXplOiAyZW07XG4gIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmNvbG9yQmxhY2t9O1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDYzLjk0ZW0pIHtcbiAgICBmb250LXNpemU6IDFlbTtcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgIGZvbnQtc2l6ZTogMC44ZW07XG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xuICB9XG5gO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IHNlbGVjdEJlZXJCeUlkIH0gZnJvbSBcIi9zcmMvZmVhdHVyZXMvYmVlcnNTbGljZVwiO1xuaW1wb3J0IHsgQnV0dG9uQWN0aXZlLCBCdXR0b24gfSBmcm9tIFwiL3NyYy9jb21wb25lbnRzL3VpL2J1dHRvblwiO1xuaW1wb3J0ICogYXMgUyBmcm9tIFwiLi9zdHlsZVwiO1xuXG5mdW5jdGlvbiBDYXJkQmVlcih7IGJlZXJJZCB9KSB7XG4gIGNvbnN0IGJlZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzZWxlY3RCZWVyQnlJZChzdGF0ZSwgYmVlcklkKSk7XG5cbiAgbGV0IGJ1dHRvbjtcblxuICBpZihiZWVyLmlzQ2FydCA9PT0gdHJ1ZSkge1xuICAgIGJ1dHRvbiA9IDxCdXR0b25BY3RpdmUgYmVlcklkPXtiZWVySWR9IC8+XG4gIH0gZWxzZSB7XG4gICAgYnV0dG9uID0gPEJ1dHRvbiBiZWVySWQ9e2JlZXJJZH0gLz5cbiAgfVxuXG4gIHJldHVybihcbiAgICA8PlxuICAgICAgPFMuTGlua0JlZXIgdG89e2AvYmVlcnMvJHtiZWVySWR9YH0+XG4gICAgICAgIDxTLkltZ1N0eWxlIHNyYz17YmVlci5pbWFnZV91cmx9IGFsdD17YmVlci5uYW1lfSB3aWR0aD17OTB9IGhlaWdodD17MjAwfSAvPlxuICAgICAgICA8Uy5CZWVyVGl0bGU+e2JlZXIubmFtZX08L1MuQmVlclRpdGxlPlxuICAgICAgICA8Uy5CZWVyQWxjPkFsYy46IHtiZWVyLmFidn0gJTwvUy5CZWVyQWxjPlxuICAgICAgICA8Uy5CZWVyUHJpY2U+UHJpY2U6IHtiZWVyLmlidX0kPC9TLkJlZXJQcmljZT5cbiAgICAgIDwvUy5MaW5rQmVlcj5cbiAgICAgIHtidXR0b259XG4gICAgPC8+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhcmRCZWVyO1xuIiwiaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcbmltcG9ydCBDb250YWluZXIgZnJvbSBcIi9zcmMvY29tcG9uZW50cy91aS9jb250YWluZXJcIjtcblxuZXhwb3J0IGNvbnN0IEJlZXJzU2VjdGlvblN0eWxlID0gc3R5bGVkLnNlY3Rpb25gXG4gIHdpZHRoOiAxMDAlO1xuYDtcblxuZXhwb3J0IGNvbnN0IEJlZXJzQ29udGFpbmVyID0gc3R5bGVkKENvbnRhaW5lcilgXG4gIHBhZGRpbmctdG9wOiAxMHB4O1xuICBwYWRkaW5nLWJvdHRvbTogMjBweDtcbmA7XG5cbmV4cG9ydCBjb25zdCBCZWVyc0xpc3RTdHlsZSA9IHN0eWxlZC51bGBcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBsaXN0LXN0eWxlOiBub25lO1xuXG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdhcDogMzBweCAyMHB4O1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnIgMWZyIDFmcjtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA4MGVtKSB7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyIDFmcjtcbiAgfVxuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDQ3Ljk0ZW0pIHtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBCZWVySXRlbVN0eWxlID0gc3R5bGVkLmxpYFxuICBkaXNwbGF5OiBncmlkO1xuICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XG5gO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFNwaW5uZXIgZnJvbSBcIi9zcmMvY29tcG9uZW50cy91aS9zcGlubmVyXCI7XG5pbXBvcnQgQ2FyZEJlZXIgZnJvbSBcIi9zcmMvY29tcG9uZW50cy9ibG9ja3MvY2FyZC1iZWVyXCI7XG5pbXBvcnQgKiBhcyBTIGZyb20gXCIuL3N0eWxlXCI7XG5cbmZ1bmN0aW9uIEJlZXJzTGlzdChwcm9wcykge1xuXG4gIGxldCBjb250ZW50O1xuXG4gIGlmKHByb3BzLnN0YXR1cyA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICBjb250ZW50ID0gPFNwaW5uZXIgdGV4dD1cIkxvYWRpbmcuLi5cIiAvPlxuICB9IGVsc2UgaWYocHJvcHMuc3RhdHVzID09PSBcInN1Y2NlZWRlZFwiKSB7XG4gICAgY29udGVudCA9IHByb3BzLmJlZXJzSWRzLm1hcChiZWVySWQgPT4gKFxuICAgICAgPFMuQmVlckl0ZW1TdHlsZSBrZXk9e2JlZXJJZH0+XG4gICAgICAgIDxDYXJkQmVlciBiZWVySWQ9e2JlZXJJZH0gLz5cbiAgICAgIDwvUy5CZWVySXRlbVN0eWxlPlxuICAgICkpO1xuICB9IGVsc2UgaWYocHJvcHMuc3RhdHVzID09PSBcImZhaWxlZFwiKSB7XG4gICAgY29udGVudCA9IDxkaXY+e3Byb3BzLmVycm9yfTwvZGl2PlxuICB9XG5cbiAgcmV0dXJuKFxuICAgIDxTLkJlZXJzU2VjdGlvblN0eWxlPlxuICAgICAgPFMuQmVlcnNDb250YWluZXI+XG4gICAgICAgIDxTLkJlZXJzTGlzdFN0eWxlPlxuICAgICAgICB7Y29udGVudH1cbiAgICAgICAgPC9TLkJlZXJzTGlzdFN0eWxlPlxuICAgICAgPC9TLkJlZXJzQ29udGFpbmVyPlxuICAgIDwvUy5CZWVyc1NlY3Rpb25TdHlsZT5cblxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBCZWVyc0xpc3Q7XG4iLCJpbXBvcnQgc3R5bGVkLCB7Y3NzfSBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcbmltcG9ydCBDb250YWluZXIgZnJvbSBcIi9zcmMvY29tcG9uZW50cy91aS9jb250YWluZXJcIjtcbmltcG9ydCB7IExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5jb25zdCBpdGVtU3R5bGUgPSBjc3NgXG4gIHBhZGRpbmc6IDVweCAxMHB4O1xuICBib3JkZXI6IDFweCAjMDAwMDAwIHNvbGlkO1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICBmb250LXNpemU6IDEuNWVtO1xuICBsaW5lLWhlaWdodDogMTUwJTtcblxuICAmOmhvdmVyIHtcbiAgICBvcGFjaXR5OiAwLjY7XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA2My45NGVtKSB7XG4gICAgZm9udC1zaXplOiAxZW07XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgZm9udC1zaXplOiAwLjllbTtcbiAgICBwYWRkaW5nOiAycHggN3B4O1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgUGFnaW5hdGlvbkNvbnRhaW5lciA9IHN0eWxlZChDb250YWluZXIpYFxuICBwYWRkaW5nLXRvcDogNDBweDtcbiAgcGFkZGluZy1ib3R0b206IDUwcHg7XG5gO1xuXG5leHBvcnQgY29uc3QgTGlzdCA9IHN0eWxlZC51bGBcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xuICBsaXN0LXN0eWxlOiBub25lO1xuXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBnYXA6IDEwcHg7XG5gO1xuXG5leHBvcnQgY29uc3QgTGlua0FjdGl2ZVBhZyA9IHN0eWxlZChMaW5rKWBcbiAgJHtpdGVtU3R5bGV9O1xuXG4gIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmNvbG9yV2hpdGV9O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTNlYjk0O1xuYDtcblxuZXhwb3J0IGNvbnN0IExpbmtQYWcgPSBzdHlsZWQoTGluaylgXG4gICR7aXRlbVN0eWxlfTtcblxuICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5jb2xvckJsYWNrfTtcbmA7XG5cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIFMgZnJvbSBcIi4vc3R5bGVcIjtcblxuZnVuY3Rpb24gUGFnaW5hdGlvbih7IGNvdW50LCBvbmhhbmRsZXIsIGN1cnJlbnRQYWdlIH0pIHtcblxuICBjb25zdCBudW1iZXJQYWdlcyA9IEFycmF5LmZyb20oe2xlbmd0aDogY291bnR9LCAoXywgaW5kZXgpID0+IGluZGV4ICsgMSk7XG5cbiAgcmV0dXJuKFxuICAgIDxTLlBhZ2luYXRpb25Db250YWluZXI+XG4gICAgICA8Uy5MaXN0PlxuICAgICAgICB7bnVtYmVyUGFnZXMubWFwKG51bWJlciA9PiB7XG4gICAgICAgICAgaWYobnVtYmVyID09PSBjdXJyZW50UGFnZSkge1xuICAgICAgICAgICAgcmV0dXJuKDxsaSBrZXk9e251bWJlcn0+XG4gICAgICAgICAgICAgICAgICAgIDxTLkxpbmtBY3RpdmVQYWcgdG89e2AvcGFnZV8ke251bWJlcn1gfSBvbkNsaWNrPXsoKSA9PiB7b25oYW5kbGVyKG51bWJlcil9fT57bnVtYmVyfTwvUy5MaW5rQWN0aXZlUGFnPlxuICAgICAgICAgICAgICAgICAgPC9saT4pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4oPGxpIGtleT17bnVtYmVyfT5cbiAgICAgICAgICAgICAgICAgICAgPFMuTGlua1BhZyB0bz17YC9wYWdlXyR7bnVtYmVyfWB9IG9uQ2xpY2s9eygpID0+IHtvbmhhbmRsZXIobnVtYmVyKX19PntudW1iZXJ9PC9TLkxpbmtQYWc+XG4gICAgICAgICAgICAgICAgICA8L2xpPik7XG4gICAgICAgICAgfVxuICAgICAgICB9KX1cbiAgICAgIDwvUy5MaXN0PlxuICAgIDwvUy5QYWdpbmF0aW9uQ29udGFpbmVyPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQYWdpbmF0aW9uO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHVzZUluaXQgZnJvbSBcIi9zcmMvaG9va3MvdXNlLWluaXRcIjtcbmltcG9ydCB7IGZldGNoQmVlcnMgfSBmcm9tIFwiL3NyYy9mZWF0dXJlcy9iZWVyc1NsaWNlXCI7XG5pbXBvcnQgQmVlcnNMaXN0IGZyb20gXCIvc3JjL2NvbXBvbmVudHMvYmxvY2tzL2JlZXJzLWxpc3RcIjtcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gXCIuLi8uLi9ibG9ja3MvcGFnaW5hdGlvblwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBhZGRDdXJyZW50UGFnZSB9IGZyb20gXCIvc3JjL2ZlYXR1cmVzL2JlZXJzU2xpY2VcIjtcblxuZnVuY3Rpb24gTWFpbigpIHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuXG4gIGNvbnN0IHNlbGVjdCA9IHVzZVNlbGVjdG9yKHN0YXRlID0+ICh7XG4gICAgYmVlcnNJZHM6IHN0YXRlLmJlZXJzLmlkcyxcbiAgICBzdGF0dXM6IHN0YXRlLmJlZXJzLnN0YXR1cyxcbiAgICBlcnJvcjogc3RhdGUuYmVlcnMuZXJyb3IsXG4gICAgY291bnQ6IHN0YXRlLmJlZXJzLmNvdW50XG4gIH0pKTtcblxuICBjb25zdCBwYWdlID0gd2luZG93LmxvY2F0aW9uLmhhc2g7XG4gIGNvbnN0IG51bWJlciA9IHBhZ2Uuc3BsaXQoJ18nKVsxXTtcblxuICB1c2VJbml0KGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBkaXNwYXRjaChmZXRjaEJlZXJzKE51bWJlcihudW1iZXIpKSlcbiAgfSwgW251bWJlcl0pO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxCZWVyc0xpc3Qgc3RhdHVzPXtzZWxlY3Quc3RhdHVzfSBiZWVyc0lkcz17c2VsZWN0LmJlZXJzSWRzfSBlcnJvcj17c2VsZWN0LmVycm9yfSAvPlxuICAgICAgPFBhZ2luYXRpb24gY3VycmVudFBhZ2U9e051bWJlcihudW1iZXIpfSBjb3VudD17c2VsZWN0LmNvdW50fSBvbmhhbmRsZXI9eyhudW1iZXIpID0+IGRpc3BhdGNoKGFkZEN1cnJlbnRQYWdlKG51bWJlcikpfS8+XG4gICAgPC8+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1haW47XG4iLCJpbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XHJcblxyXG4vKipcclxuICog0KXRg9C6INC00LvRjyDQsNGB0LjQvdGF0YDQvtC90L3Ri9GFINGA0LDRgdGH0ZHRgtC+0LIsINC60L7RgtC+0YDRi9C1INCx0YPQtNGD0YIg0LjRgdC/0L7Qu9C90LXQvdGLINC/0YDQuCDQv9C10YDQstC+0Lwg0YDQtdC90LTQtdGA0LUg0LjQu9C4INC40LfQvNC10L3QtdC90LjQuCBkZXBlbmRzLlxyXG4gKiBAcGFyYW0gaW5pdEZ1bmMge0Z1bmN0aW9ufSDQn9C+0LvRjNC30L7QstCw0YLQtdC70YzRgdC60LDRjyDRhNGD0L3QutGG0LjRj1xyXG4gKiBAcGFyYW0gZGVwZW5kcyB7QXJyYXl9INCX0L3QsNGH0LXQvdC40Y8g0L/RgNC4INGB0LzQtdC90LUg0LrQvtGC0L7RgNGL0YUgY2FsbGJhY2sg0YHQvdC+0LLQsCDQuNGB0L/QvtC70L3QuNGC0YHRjy5cclxuICogQHBhcmFtIG9wdGlvbnMge3tiYWNrRm9yd2FyZH19XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VJbml0KGluaXRGdW5jLCBkZXBlbmRzID0gW10sIGJhY2tGb3J3YXJkID0gZmFsc2UpIHtcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaW5pdEZ1bmMoZmFsc2UpO1xyXG4gICAgLy8g0JXRgdC70Lgg0LIg0LjRgdGC0L7RgNC40Lgg0LHRgNCw0YPQt9C10YDQsCDQvNC10L3Rj9GO0YLRgdGPINGC0L7Qu9GM0LrQviBzZWFyY2gt0L/QsNGA0LDQvNC10YLRgNGLLCDRgtC+IHJlYWN0LXJvdXRlciDQvdC1INC+0L/QvtCy0LXRgdGC0LjRglxyXG4gICAgLy8g0LrQvtC80L/QvtC90LXQvdGCINC+0LEg0LjQt9C80LXQvdC10L3QuNGP0YUsINC/0L7RjdGC0L7QvNGDINGF0YPQuiDQvNC+0LbQvdC+INGP0LLQvdC+INC/0L7QtNC/0LjRgdCw0YLRjCDQvdCwINGB0L7QsdGL0YLQuNC1INC40LfQvNC10L3QtdC90LjRjyDQuNGB0YLQvtGA0LjQuFxyXG4gICAgLy8g0LHRgNCw0YPQt9C10YDQsCAo0LXRgdC70Lgg0L3Rg9C20L3QviDQvtGC0YDQtdCw0LPQuNGA0L7QstCw0YLRjCDQvdCwINC40LfQvNC10L3QtdC90LjRjyBzZWFyY2gt0L/QsNGA0LDQvNC10YLRgNC+0LIg0L/RgNC4INC/0LXRgNC10YXQvtC00LUg0L/QviDQuNGB0YLQvtGA0LjQuClcclxuICAgIGlmIChiYWNrRm9yd2FyZCkge1xyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBpbml0RnVuYyk7XHJcbiAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgaW5pdEZ1bmMpO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH0sIGRlcGVuZHMpO1xyXG59XHJcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQgeyBidXR0b25TIH0gZnJvbSBcIi9zcmMvc3R5bGUvbWl4aW5zXCI7XG5cbmV4cG9ydCBjb25zdCBCdXR0b25BY3RpdmVTdHlsZSA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9uU307XG5cbiAgYmFja2dyb3VuZC1jb2xvcjogIzU0OTcxNjtcbiAgYm9yZGVyOiAycHggc29saWQgIzU0OTcxNjtcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuY29sb3JXaGl0ZX07XG5gO1xuXG5leHBvcnQgY29uc3QgQnV0dG9uU3R5bGUgPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvblN9O1xuXG4gIGJvcmRlcjogMnB4IHNvbGlkICM1NDk3MTY7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuY29sb3JXaGl0ZX07XG4gIGNvbG9yOiAjNTQ5NzE2O1xuYDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgcmVtb3ZlUHJvZHVjdCB9IGZyb20gXCIvc3JjL2ZlYXR1cmVzL2Jhc2tldFNsaWNlXCI7XG5pbXBvcnQgeyBhZGRUb0Jhc2tldE9uZUJlZXIsIHJlbW92ZUZyb21CYXNrZXRPbmVCZWVyIH0gZnJvbSBcIi9zcmMvZmVhdHVyZXMvYmVlcnNTbGljZVwiO1xuaW1wb3J0ICogYXMgUyBmcm9tIFwiLi9zdHlsZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gQnV0dG9uQWN0aXZlKHsgYmVlcklkLCBjbGFzc0IgfSkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIHJldHVybihcbiAgICA8Uy5CdXR0b25BY3RpdmVTdHlsZVxuICAgICAgY2xhc3NOYW1lPXtjbGFzc0J9XG4gICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgZGlzcGF0Y2gocmVtb3ZlRnJvbUJhc2tldE9uZUJlZXIoYmVlcklkKSk7XG4gICAgICAgIGRpc3BhdGNoKHJlbW92ZVByb2R1Y3QoYmVlcklkKSk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGJlZXJJZCk7XG4gICAgICB9fT5SZW1vdmUgZnJvbSBjYXJ0XG4gICAgPC9TLkJ1dHRvbkFjdGl2ZVN0eWxlPlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQnV0dG9uKHsgYmVlcklkLCBjbGFzc0IgfSkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IGJlZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5iZWVycy5vbmVCZWVyKTtcblxuICByZXR1cm4oXG4gICAgPFMuQnV0dG9uU3R5bGVcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NCfVxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKGFkZFRvQmFza2V0T25lQmVlcihiZWVySWQpKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYmVlcklkLCBKU09OLnN0cmluZ2lmeSh7Li4uYmVlciwgcXVhbnRpdHk6IDEsIHByaWNlOiBiZWVyLmlidSwgaXNDYXJ0OiB0cnVlfSkpO1xuICAgICAgfX0+QWRkIHRvIGNhcnRcbiAgICA8L1MuQnV0dG9uU3R5bGU+XG4gICk7XG59XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuaW1wb3J0IENvbnRhaW5lciBmcm9tIFwiL3NyYy9jb21wb25lbnRzL3VpL2NvbnRhaW5lclwiO1xuaW1wb3J0IHsgVGl0bGUsIEludGVyNTAwIH0gZnJvbSBcIi9zcmMvc3R5bGUvbWl4aW5zXCI7XG5cbmV4cG9ydCBjb25zdCBQYWdlQmVlclN0eWxlID0gc3R5bGVkLnNlY3Rpb25gXG4gIHdpZHRoOiAxMDAlO1xuYDtcblxuZXhwb3J0IGNvbnN0IFBhZ2VCZWVyQ29udGFpbmVyID0gc3R5bGVkKENvbnRhaW5lcilgXG4gIHBhZGRpbmctdG9wOiAyMHB4O1xuICBwYWRkaW5nLWJvdHRvbTogMjBweDtcblxuICBkaXNwbGF5OiBncmlkO1xuICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogMjBweDtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA2My45NGVtKSB7XG4gICAgZ2FwOiAxNXB4O1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgIGdhcDogMTBweDtcbiAgfVxuXG4gIC5idXR0b24ge1xuICAgIHdpZHRoOiA1MCU7XG5cbiAgICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBQYWdlQmVlckltZyA9IHN0eWxlZC5pbWdgXG4gIGhlaWdodDogYXV0bztcbmA7XG5cbmV4cG9ydCBjb25zdCBQYWdlQmVlclRpdGxlID0gc3R5bGVkLmgyYFxuICAke1RpdGxlfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBQYWdlQmVlclRleHQgPSBzdHlsZWQucGBcbiAgbWFyZ2luOiAwO1xuXG4gIGZvbnQtc2l6ZTogMS4zZW07XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNjMuOTRlbSkge1xuICAgIGZvbnQtc2l6ZTogMWVtO1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgUGFnZUJlZXJTdWJ0dXRsZSA9IHN0eWxlZC5oM2BcbiAgbWFyZ2luOiAwO1xuXG4gICR7SW50ZXI1MDB9O1xuICBmb250LXNpemU6IDEuNGVtO1xuICBjb2xvcjogIzQ2MDVmZjtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA2My45NGVtKSB7XG4gICAgZm9udC1zaXplOiAxLjFlbTtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IFBhZ2VCZWVyTGlzdEluZ3JlZGllbnRzID0gc3R5bGVkLnVsYFxuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG5cbiAgbGlzdC1zdHlsZTogbm9uZTtcbmA7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgU3Bpbm5lciBmcm9tIFwiL3NyYy9jb21wb25lbnRzL3VpL3NwaW5uZXJcIjtcbmltcG9ydCB7IEJ1dHRvbkFjdGl2ZSwgQnV0dG9uIH0gZnJvbSBcIi9zcmMvY29tcG9uZW50cy91aS9idXR0b24tYmVlclwiO1xuaW1wb3J0ICogYXMgUyBmcm9tIFwiLi9zdHlsZVwiO1xuXG5mdW5jdGlvbiBCZWVyKHtiZWVyLCBiZWVySWQsIHN0YXR1cywgZXJyb3J9KSB7XG5cbiAgbGV0IGNvbnRlbnQ7XG4gIGlmKHN0YXR1cyA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICBjb250ZW50ID0gPFNwaW5uZXIgdGV4dD1cIkxvYWRpbmcuLi5cIiAvPlxuICB9IGVsc2UgaWYoc3RhdHVzID09PSBcInN1Y2NlZWRlZFwiKSB7XG4gICAgY29udGVudCA9IDw+XG4gICAgICAgICAgICAgICAgPFMuUGFnZUJlZXJJbWcgc3JjPXtiZWVyLmltYWdlX3VybH0gYWx0PXtiZWVyLm5hbWV9IHdpZHRoPXs3NX0gaGVpZ2h0PXsyMDB9Lz5cbiAgICAgICAgICAgICAgICA8Uy5QYWdlQmVlclRpdGxlPntiZWVyLm5hbWV9PC9TLlBhZ2VCZWVyVGl0bGU+XG4gICAgICAgICAgICAgICAgPHNwYW4+QWxjLjoge2JlZXIuYWJ2fSAlPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuPkRhdGUgb2YgZmlyc3QgYnJldzoge2JlZXIuZmlyc3RfYnJld2VkfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8Uy5QYWdlQmVlclRleHQ+e2JlZXIuZGVzY3JpcHRpb259PC9TLlBhZ2VCZWVyVGV4dD5cbiAgICAgICAgICAgICAgICA8Uy5QYWdlQmVlclN1YnR1dGxlPkluZ3JlZGllbnRzOjwvUy5QYWdlQmVlclN1YnR1dGxlPlxuICAgICAgICAgICAgICAgIDxTLlBhZ2VCZWVyTGlzdEluZ3JlZGllbnRzPlxuICAgICAgICAgICAgICAgICAgPGxpPk1hbHQ6IHtiZWVyLmluZ3JlZGllbnRzLm1hbHRbMF0ubmFtZX08L2xpPlxuICAgICAgICAgICAgICAgICAgPGxpPkhvcHM6IHtiZWVyLmluZ3JlZGllbnRzLmhvcHNbMF0ubmFtZX08L2xpPlxuICAgICAgICAgICAgICAgICAgPGxpPlllYXN0OiB7YmVlci5pbmdyZWRpZW50cy55ZWFzdH08L2xpPlxuICAgICAgICAgICAgICAgIDwvUy5QYWdlQmVlckxpc3RJbmdyZWRpZW50cz5cbiAgICAgICAgICAgICAgICB7YmVlci5pc0NhcnQgPyA8QnV0dG9uQWN0aXZlIGNsYXNzQj1cImJ1dHRvblwiIGJlZXJJZD17YmVlcklkfS8+IDogPEJ1dHRvbiBjbGFzc0I9XCJidXR0b25cIiBiZWVySWQ9e2JlZXJJZH0gLz59XG4gICAgICAgICAgICAgIDwvPlxuICB9IGVsc2UgaWYoc3RhdHVzID09PSBcImZhaWxlZFwiKSB7XG4gICAgY29udGVudCA9IDxkaXY+e2Vycm9yfTwvZGl2PlxuICB9XG5cbiAgcmV0dXJuKFxuICAgIDxTLlBhZ2VCZWVyU3R5bGU+XG4gICAgICA8Uy5QYWdlQmVlckNvbnRhaW5lcj5cbiAgICAgICAge2NvbnRlbnR9XG4gICAgICA8L1MuUGFnZUJlZXJDb250YWluZXI+XG4gICAgPC9TLlBhZ2VCZWVyU3R5bGU+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJlZXI7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBmZXRjaE9uZUJlZXJzIH0gZnJvbSBcIi9zcmMvZmVhdHVyZXMvYmVlcnNTbGljZVwiO1xuaW1wb3J0IEJlZXIgZnJvbSBcIi9zcmMvY29tcG9uZW50cy9ibG9ja3MvYmVlclwiO1xuXG5mdW5jdGlvbiBPbmVCZWVyKCkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IGFjdGl2ZVVybCA9IHVzZVBhcmFtcygpO1xuXG4gIGNvbnN0IHN0YXR1cyA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmJlZXJzLm9uZUJlZXJTdGF0dXMpO1xuICBjb25zdCBlcnJvciA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmJlZXJzLmVycm9yKTtcbiAgY29uc3QgYmVlciA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmJlZXJzLm9uZUJlZXIpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgYXN5bmMgZnVuY3Rpb24gZmV0Y2hEYXRhKCkge1xuICAgICAgYXdhaXQgZGlzcGF0Y2goZmV0Y2hPbmVCZWVycyhhY3RpdmVVcmwuaWQpKTtcbiAgICAgIGNvbnNvbGUubG9nKCdFZmZlY3QgT25lQmVlcicpXG4gICAgfVxuICAgIGZldGNoRGF0YSgpO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuKFxuICAgIDxCZWVyIHN0YXR1cz17c3RhdHVzfSBlcnJvcj17ZXJyb3J9IGJlZXJJZD17YWN0aXZlVXJsLmlkfSBiZWVyPXtiZWVyfS8+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IE9uZUJlZXI7XG4iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYjcyZThkNjEwOTBjMTZkMGE1ZWEzY2U4ZWRlMGE0MzIuc3ZnXCI7IiwiaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcbmltcG9ydCB7IFRpdGxlLCBJbnRlcjUwMCB9IGZyb20gXCIvc3JjL3N0eWxlL21peGluc1wiO1xuaW1wb3J0IGNsb3NlIGZyb20gXCIvc3JjL2Fzc2V0cy9pY29uLWNsb3NlLnN2Z1wiO1xuXG5leHBvcnQgY29uc3QgQ2FyZEJlZXJJdGVtID0gc3R5bGVkLmxpYFxuICBkaXNwbGF5OiBncmlkO1xuICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogYXV0byAxZnIgYXV0bztcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvIGF1dG8gYXV0bztcblxuICBib3gtc2hhZG93OiAwIDAgMTZweCAjYTBlMTk4O1xuICBwYWRkaW5nOiAxMHB4O1xuXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBDYXJkQmVlckltZyA9IHN0eWxlZC5pbWdgXG4gIGdyaWQtYXJlYTogMS8xLy0xLzI7XG4gIG9iamVjdC1maXQ6IGNvbnRhaW47XG5gO1xuXG5leHBvcnQgY29uc3QgQ2FyZEJlZXJUaXRsZSA9IHN0eWxlZC5oMmBcbiAgJHtUaXRsZX07XG5cbiAgZ3JpZC1hcmVhOiAxLzIvMi8zO1xuYDtcblxuZXhwb3J0IGNvbnN0IENhcmRCZWVyQWxjID0gc3R5bGVkLnNwYW5gXG4gIGdyaWQtYXJlYTogMi8yLzMvMztcbiAgZm9udC1zaXplOiAxLjRlbTtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA2My45NGVtKSB7XG4gICAgZm9udC1zaXplOiAxZW07XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgZm9udC1zaXplOiAwLjhlbTtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IENhcmRCZWVyUHJpY2UgPSBzdHlsZWQuc3BhbmBcbiAgZ3JpZC1hcmVhOiAzLzIvNC8zO1xuICBmb250LXNpemU6IDEuN2VtO1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDYzLjk0ZW0pIHtcbiAgICBmb250LXNpemU6IDEuM2VtO1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgIGZvbnQtc2l6ZTogMWVtO1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgQ2FyZEJlZXJXcGFyQ291bnQgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogNDBweDtcblxuICBncmlkLWFyZWE6IDMvMy80Ly0xO1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDQ3Ljk0ZW0pIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IENhcmRCZWVyVGl0bGVDb3VudCA9IHN0eWxlZC5oM2BcbiAgbWFyZ2luOiAwO1xuXG4gICR7SW50ZXI1MDB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IENhcmRCZWVyV3BhckJ1dHRvbnMgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogMTVweDtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgZ2FwOiAxMHB4O1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgQ2FyZEJlZXJCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICBkaXNwbGF5OiBibG9jaztcbiAgd2lkdGg6IDQwcHg7XG4gIGhlaWdodDogNDBweDtcbiAgcGFkZGluZzogMCA1cHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkICMyZmI2MDc7XG4gIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5jb2xvcldoaXRlfTtcblxuICBjb2xvcjogIzJmYjYwNztcbiAgZm9udC1zaXplOiAxLjVlbTtcblxuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHVzZXItc2VsZWN0OiBub25lO1xuXG4gICY6aG92ZXIge1xuICAgIGNvbG9yOiAjNjFlZTM3O1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgQ2FyZEJlZXJEZWxldGUgPSBzdHlsZWQuYnV0dG9uYFxuICBkaXNwbGF5OiBibG9jaztcbiAgd2lkdGg6IDMwcHg7XG4gIGhlaWdodDogMzBweDtcblxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHtjbG9zZX0pO1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuY29sb3JXaGl0ZX07XG4gIGJvcmRlcjogMXB4IHNvbGlkICNlNjEyMTI7XG5cblxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG5cbiAgY3Vyc29yOiBwb2ludGVyO1xuICB1c2VyLXNlbGVjdDogbm9uZTtcblxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjZjM2MzO1xuICB9XG5gO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IHJlbW92ZUZyb21CYXNrZXQgfSBmcm9tIFwiL3NyYy9mZWF0dXJlcy9iZWVyc1NsaWNlXCI7XG5pbXBvcnQgeyBpbmNyZW1lbnRCZWVycywgZGVjcmVtZW50QmVlcnMsIHVwZGF0ZVByaWNlLCByZW1vdmVQcm9kdWN0LCBzZWxlY3RCZWVyQmFza2V0QnlJZCB9IGZyb20gXCIvc3JjL2ZlYXR1cmVzL2Jhc2tldFNsaWNlXCI7XG5pbXBvcnQgKiBhcyBTIGZyb20gXCIuL3N0eWxlXCI7XG5cbmZ1bmN0aW9uIENhcmRCZWVyQmFza2V0KHsgYmVlcklkLCBoYW5kbGVyIH0pIHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBiZWVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc2VsZWN0QmVlckJhc2tldEJ5SWQoc3RhdGUsIGJlZXJJZCkpO1xuXG4gIGxldCBbIHF1YW50aXR5LCBzZXRRdWFudGl0eSBdID0gdXNlU3RhdGUoYmVlci5xdWFudGl0eSk7XG5cbiAgY29uc3QgZGVjcmVtZW50ID0gKCkgPT4ge1xuICAgIGlmKHF1YW50aXR5ID09PSAxKXtcbiAgICAgIHNldFF1YW50aXR5KHF1YW50aXR5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0UXVhbnRpdHkoLS1xdWFudGl0eSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZVF1YW50aXR5TG9jYWxTdG9yYWdlID0gKGJlZXJJZCkgPT4ge1xuICAgIGNvbnN0IGJlZXIgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGJlZXJJZCkpO1xuICAgIGJlZXIucXVhbnRpdHkgPSBxdWFudGl0eTtcbiAgICBiZWVyLnByaWNlID0gcXVhbnRpdHkgKiBiZWVyLmlidTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShiZWVySWQsIEpTT04uc3RyaW5naWZ5KGJlZXIpKTtcbiAgfTtcblxuICByZXR1cm4oXG4gICAgPFMuQ2FyZEJlZXJJdGVtPlxuICAgICAgPFMuQ2FyZEJlZXJJbWcgc3JjPXtiZWVyLmltYWdlX3VybH0gYWx0PXtiZWVyLm5hbWV9IHdpZHRoPXs3NX0gaGVpZ2h0PXsyMDB9Lz5cbiAgICAgIDxTLkNhcmRCZWVyVGl0bGU+e2JlZXIubmFtZX08L1MuQ2FyZEJlZXJUaXRsZT5cbiAgICAgIDxTLkNhcmRCZWVyQWxjPkFsYy46IHtiZWVyLmFidn0gJTwvUy5DYXJkQmVlckFsYz5cbiAgICAgIDxTLkNhcmRCZWVyV3BhckNvdW50PlxuICAgICAgICA8Uy5DYXJkQmVlclRpdGxlQ291bnQ+UXVhbnRpdHk8L1MuQ2FyZEJlZXJUaXRsZUNvdW50PlxuICAgICAgICA8Uy5DYXJkQmVlcldwYXJCdXR0b25zPlxuICAgICAgICAgIDxTLkNhcmRCZWVyQnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgZGVjcmVtZW50KCk7XG4gICAgICAgICAgICAgIGRpc3BhdGNoKGRlY3JlbWVudEJlZXJzKGJlZXJJZCkpO1xuICAgICAgICAgICAgICBkaXNwYXRjaCh1cGRhdGVQcmljZSh7aWQ6IGJlZXJJZCwgcHJpY2U6IHF1YW50aXR5ICogYmVlci5pYnV9KSk7XG4gICAgICAgICAgICAgIHVwZGF0ZVF1YW50aXR5TG9jYWxTdG9yYWdlKGJlZXJJZCk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgID4tPC9TLkNhcmRCZWVyQnV0dG9uPlxuICAgICAgICAgIDxzcGFuPntiZWVyLnF1YW50aXR5fTwvc3Bhbj5cbiAgICAgICAgICA8Uy5DYXJkQmVlckJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHNldFF1YW50aXR5KCsrcXVhbnRpdHkpO1xuICAgICAgICAgICAgICBkaXNwYXRjaChpbmNyZW1lbnRCZWVycyhiZWVySWQpKTtcbiAgICAgICAgICAgICAgZGlzcGF0Y2godXBkYXRlUHJpY2Uoe2lkOiBiZWVySWQsIHByaWNlOiBxdWFudGl0eSAqIGJlZXIuaWJ1fSkpO1xuICAgICAgICAgICAgICB1cGRhdGVRdWFudGl0eUxvY2FsU3RvcmFnZShiZWVySWQpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+KzwvUy5DYXJkQmVlckJ1dHRvbj5cbiAgICAgICAgPC9TLkNhcmRCZWVyV3BhckJ1dHRvbnM+XG4gICAgICA8L1MuQ2FyZEJlZXJXcGFyQ291bnQ+XG4gICAgICA8Uy5DYXJkQmVlclByaWNlPlByaWNlOiB7YmVlci5wcmljZX0kPC9TLkNhcmRCZWVyUHJpY2U+XG4gICAgICA8Uy5DYXJkQmVlckRlbGV0ZSB0eXBlPVwiYnV0dG9uXCIgYXJpYS1sYWJlbD1cIkRlbGV0ZVwiXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShiZWVyLmlkKTtcbiAgICAgICAgICBkaXNwYXRjaChyZW1vdmVGcm9tQmFza2V0KGJlZXIuaWQpKTtcbiAgICAgICAgICBkaXNwYXRjaChyZW1vdmVQcm9kdWN0KGJlZXIuaWQpKTtcbiAgICAgICAgICBoYW5kbGVyKCk7XG4gICAgICAgIH19PlxuICAgICAgPC9TLkNhcmRCZWVyRGVsZXRlPlxuICAgIDwvUy5DYXJkQmVlckl0ZW0+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhcmRCZWVyQmFza2V0O1xuIiwiaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcbmltcG9ydCB7IExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IENvbnRhaW5lciBmcm9tIFwiL3NyYy9jb21wb25lbnRzL3VpL2NvbnRhaW5lclwiO1xuaW1wb3J0IHsgYnV0dG9uUyB9IGZyb20gJy9zcmMvc3R5bGUvbWl4aW5zJztcblxuZXhwb3J0IGNvbnN0IEJhc2tldFN0eWxlID0gc3R5bGVkLnNlY3Rpb25gXG4gIHdpZHRoOiAxMDAlO1xuYDtcblxuZXhwb3J0IGNvbnN0IEJhc2tldENvbnRhaW5lciA9IHN0eWxlZChDb250YWluZXIpYFxuICBwYWRkaW5nLXRvcDogNDBweDtcbiAgcGFkZGluZy1ib3R0b206IDUwcHg7XG5cbiAgZGlzcGxheTogZ3JpZDtcbiAgZ2FwOiA0NXB4O1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDYzLjk0ZW0pIHtcbiAgICBnYXA6IDI1cHg7XG5cbiAgICBwYWRkaW5nLXRvcDogMjBweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMzBweDtcbiAgfVxuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDQ3Ljk0ZW0pIHtcbiAgICBnYXA6IDE1cHg7XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBCYXNrZXRUb3RhbCA9IHN0eWxlZC5zcGFuYFxuICBmb250LXNpemU6IDEuNWVtO1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDYzLjk0ZW0pIHtcbiAgICBmb250LXNpemU6IDFlbTtcblxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgQmFza2V0TGlzdFN0eWxlID0gc3R5bGVkLnVsYFxuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG5cbiAgZGlzcGxheTogZ3JpZDtcbiAgZ2FwOiAzMHB4O1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDg5Ljk0ZW0pIHtcbiAgICBnYXA6IDI1cHg7XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA2My45NGVtKSB7XG4gICAgZ2FwOiAyMHB4O1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgIGdhcDogMTVweDtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IFdyYXBCdXR0b25zID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xuICBnYXA6IDIwcHg7XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xuICAgIGdhcDogMTVweDtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IEJ1dHRvbkNsZWFyID0gc3R5bGVkLmJ1dHRvbmBcbiAgJHtidXR0b25TfTtcblxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTQ5M2VjO1xuICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5jb2xvcldoaXRlfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBMaW5rRm9ybSA9IHN0eWxlZChMaW5rKWBcbiAgYmFja2dyb3VuZC1jb2xvcjogIzRmYzUxZTtcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuY29sb3JXaGl0ZX07XG4gIHBhZGRpbmc6IDE2cHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuXG4gIGZvbnQtc2l6ZTogMS41ZW07XG4gIGxpbmUtaGVpZ2h0OiAxNTAlO1xuXG4gICY6aG92ZXIge1xuICAgIG9wYWNpdHk6IDAuNjtcbiAgfVxuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDYzLjk0ZW0pIHtcbiAgICBmb250LXNpemU6IDFlbTtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgIGZvbnQtc2l6ZTogMC45ZW07XG4gICAgcGFkZGluZzogNXB4IDEwcHg7XG4gIH1cbmA7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5cbmltcG9ydCBDYXJkQmVlckJhc2tldCBmcm9tIFwiL3NyYy9jb21wb25lbnRzL2Jsb2Nrcy9jYXJkLWJlZXItYmFza2V0XCI7XG5pbXBvcnQgeyBkZWxldGluZ0FsbEZyb21UaGVCYXNrZXQgfSBmcm9tIFwiL3NyYy9mZWF0dXJlcy9iZWVyc1NsaWNlXCI7XG5pbXBvcnQgeyBhZGRQcm9kdWN0cywgc2VsZWN0QmVlckJhc2tldElkcywgY2xlYXJCYXNrZXQgfSBmcm9tIFwiL3NyYy9mZWF0dXJlcy9iYXNrZXRTbGljZVwiO1xuaW1wb3J0ICogYXMgUyBmcm9tIFwiLi9zdHlsZVwiO1xuXG5mdW5jdGlvbiBCYXNrZXQoKSB7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3QgYmVlcnNTdG9yZSA9IHVzZVNlbGVjdG9yKHNlbGVjdEJlZXJCYXNrZXRJZHMpO1xuICBjb25zdCBbIGNvdW50LCBzZXRDb3VudCBdID0gdXNlU3RhdGUobG9jYWxTdG9yYWdlLmxlbmd0aCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBiZWVyc0Jhc2tldCA9IFtdO1xuICAgIGlmKGxvY2FsU3RvcmFnZS5sZW5ndGggIT09IGJlZXJzU3RvcmUubGVuZ3RoKSB7XG4gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbG9jYWxTdG9yYWdlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGlkQmVlciA9IGxvY2FsU3RvcmFnZS5rZXkoaSk7XG4gICAgICAgIGNvbnN0IGJlZXIgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGlkQmVlcikpO1xuICAgICAgICBiZWVyc0Jhc2tldC5wdXNoKHtpZDogYmVlci5pZCwgbmFtZTogYmVlci5uYW1lLCBxdWFudGl0eTogYmVlci5xdWFudGl0eSwgcHJpY2U6IGJlZXIuaWJ1ICogYmVlci5xdWFudGl0eSwgaW1hZ2VfdXJsOiBiZWVyLmltYWdlX3VybCwgaWJ1OiBiZWVyLmlidSwgYWJ2OiBiZWVyLmFidiwgaXNDYXJ0OiBiZWVyLmlzQ2FydH0pO1xuICAgICAgfVxuICAgICAgZGlzcGF0Y2goYWRkUHJvZHVjdHMoYmVlcnNCYXNrZXQpKTsgLy8g0L/QtdGA0LXQtNC10LvQsNGC0YwgbG9jYWxzdG9yZSDQv9C10YDQtdC90LXRgdGC0Lgg0LIgcmVkdXhcbiAgICAgIGNvbnNvbGUubG9nKCdFZmZlY3QgQmFza2V0JylcbiAgICB9XG4gIH0sIFtiZWVyc1N0b3JlXSk7XG5cbiAgY29uc29sZS5sb2coMylcblxuICByZXR1cm4oXG4gICAgPFMuQmFza2V0U3R5bGU+XG4gICAgICA8Uy5CYXNrZXRDb250YWluZXI+XG4gICAgICAgIDxTLkJhc2tldFRvdGFsPlRvdGFsIHtjb3VudH08L1MuQmFza2V0VG90YWw+XG4gICAgICAgICAge2JlZXJzU3RvcmUubGVuZ3RoID9cbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgIDxTLkJhc2tldExpc3RTdHlsZT5cbiAgICAgICAgICAgICAgICB7YmVlcnNTdG9yZS5tYXAoKGJlZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4oXG4gICAgICAgICAgICAgICAgICAgIDxDYXJkQmVlckJhc2tldCBrZXk9e2luZGV4fSBiZWVySWQ9e2JlZXJ9IGhhbmRsZXI9eygpID0+IHNldENvdW50KGNvdW50IC0xKX0gLz5cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgIDwvUy5CYXNrZXRMaXN0U3R5bGU+XG4gICAgICAgICAgICAgIDxTLldyYXBCdXR0b25zPlxuICAgICAgICAgICAgICAgIDxTLkJ1dHRvbkNsZWFyXG4gICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGRlbGV0aW5nQWxsRnJvbVRoZUJhc2tldChiZWVyc1N0b3JlKSk7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGNsZWFyQmFza2V0KCkpO1xuICAgICAgICAgICAgICAgICAgICBzZXRDb3VudChsb2NhbFN0b3JhZ2UubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICAgICAgQ2xlYXIgYmFza2V0XG4gICAgICAgICAgICAgICAgPC9TLkJ1dHRvbkNsZWFyPlxuICAgICAgICAgICAgICAgIDxTLkxpbmtGb3JtIHRvPVwiL2Zvcm1cIj5DaGVja291dDwvUy5MaW5rRm9ybT5cbiAgICAgICAgICAgICAgPC9TLldyYXBCdXR0b25zPlxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICA6XG4gICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgINChYXJ0IGlzIGVtcHR5IVxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgfVxuICAgICAgPC9TLkJhc2tldENvbnRhaW5lcj5cbiAgICA8L1MuQmFza2V0U3R5bGU+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2tldDtcblxuXG4iLCJpbXBvcnQgc3R5bGVkLCB7IGNzcyB9IGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuXG5jb25zdCBTdHlsZVZhbGlkYXRpb24gPSBjc3NgXG4gIC52YWxpZCB7XG4gICAgYm9yZGVyOiAycHggc29saWQgZ3JlZW47XG4gIH1cblxuICAuaW5WYWxpZCB7XG4gICAgYm9yZGVyOiAycHggc29saWQgcmVkO1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgV3JhcElucHV0ID0gc3R5bGVkLmRpdmBcbiAgJHtTdHlsZVZhbGlkYXRpb259O1xuYDtcblxuZXhwb3J0IGNvbnN0IElucHV0U3R5bGUgPSBzdHlsZWQuaW5wdXRgXG4gIHdpZHRoOiA1MCU7XG4gIHBhZGRpbmc6IDEwcHg7XG5cbiAgYm9yZGVyOiBub25lO1xuICBib3JkZXItYm90dG9tOiAycHggc29saWQgIzFhNzdkMjtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZzogNXB4O1xuICB9XG5gO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBTIGZyb20gXCIuL3N0eWxlXCI7XG5cbmV4cG9ydCBjb25zdCBJbnB1dE5hbWUgPSAoKSA9PiB7XG4gIGNvbnN0IFsgbmFtZSwgc2V0TmFtZSBdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbIGNsYXNzSW5wdXQsIHNldENsYXNzSW5wdXQgXSA9IHVzZVN0YXRlKCcnKTtcblxuICBjb25zdCBvbk5hbWVDaGFuZ2UgPSBlID0+IHNldE5hbWUoZS50YXJnZXQudmFsdWUpO1xuXG4gIGNvbnN0IG9uQmx1cklucHV0ID0gKCkgPT4ge1xuICAgIGlmKG5hbWUubGVuZ3RoIDwgMikge1xuICAgICAgc2V0Q2xhc3NJbnB1dChcImluVmFsaWRcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldENsYXNzSW5wdXQoXCJ2YWxpZFwiKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuKFxuICAgIDxTLldyYXBJbnB1dD5cbiAgICAgIDxsYWJlbCBodG1sRm9yPVwibmFtZVwiIGFyaWEtbGFiZWw9XCJFbnRlciB5b3VyIG5hbWVcIj48L2xhYmVsPlxuICAgICAgPFMuSW5wdXRTdHlsZVxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzSW5wdXR9XG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgaWQ9XCJuYW1lXCJcbiAgICAgICAgbmFtZT1cIm5hbWVcIlxuICAgICAgICBwbGFjZWhvbGRlcj1cIk5hbWVcIlxuICAgICAgICB2YWx1ZT17bmFtZX1cbiAgICAgICAgb25DaGFuZ2U9e29uTmFtZUNoYW5nZX1cbiAgICAgICAgb25CbHVyPXtvbkJsdXJJbnB1dH1cbiAgICAgICAgcmVxdWlyZWRcbiAgICAgIC8+XG4gIDwvUy5XcmFwSW5wdXQ+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgSW5wdXRNYWlsID0gKCkgPT4ge1xuICBjb25zdCBbIG1haWwsIHNldE1haWwgXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgWyBjbGFzc0lucHV0LCBzZXRDbGFzc0lucHV0IF0gPSB1c2VTdGF0ZSgnJyk7XG5cbiAgY29uc3Qgb25NYWlsQ2hhbmdlID0gZSA9PiBzZXRNYWlsKGUudGFyZ2V0LnZhbHVlKTtcblxuICBjb25zdCBvbkJsdXJJbnB1dCA9ICgpID0+IHtcbiAgICBpZihtYWlsLmxlbmd0aCA8IDIpIHtcbiAgICAgIHNldENsYXNzSW5wdXQoXCJpblZhbGlkXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRDbGFzc0lucHV0KFwidmFsaWRcIik7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybihcbiAgICA8Uy5XcmFwSW5wdXQ+XG4gICAgICA8bGFiZWwgaHRtbEZvcj1cImUtbWFpbFwiIGFyaWEtbGFiZWw9XCJFbnRlciB5b3VyIGUtbWFpbFwiPjwvbGFiZWw+XG4gICAgICA8Uy5JbnB1dFN0eWxlXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NJbnB1dH1cbiAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICBpZD1cImUtbWFpbFwiXG4gICAgICAgIG5hbWU9XCJlLW1haWxcIlxuICAgICAgICBwbGFjZWhvbGRlcj1cIkUtbWFpbFwiXG4gICAgICAgIHZhbHVlPXttYWlsfVxuICAgICAgICBvbkNoYW5nZT17b25NYWlsQ2hhbmdlfVxuICAgICAgICBvbkJsdXI9e29uQmx1cklucHV0fVxuICAgICAgICByZXF1aXJlZFxuICAgICAgLz5cbiAgPC9TLldyYXBJbnB1dD5cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBJbnB1dFRlbCA9ICgpID0+IHtcbiAgY29uc3QgWyB0ZWwsIHNldFRlbCBdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFsgY2xhc3NJbnB1dCwgc2V0Q2xhc3NJbnB1dCBdID0gdXNlU3RhdGUoXCJcIik7XG5cbiAgY29uc3Qgb25UZWxDaGFuZ2UgPSBlID0+IHNldFRlbChlLnRhcmdldC52YWx1ZSk7XG5cbiAgY29uc3Qgb25CbHVySW5wdXQgPSAoKSA9PiB7XG4gICAgaWYodGVsLmxlbmd0aCA8IDE2KSB7XG4gICAgICBzZXRDbGFzc0lucHV0KFwiaW5WYWxpZFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Q2xhc3NJbnB1dChcInZhbGlkXCIpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4oXG4gICAgPFMuV3JhcElucHV0PlxuICAgICAgPGxhYmVsIGh0bWxGb3I9XCJ0ZWxcIiBhcmlhLWxhYmVsPVwiRW50ZXIgeW91ciBwaG9uZVwiPjwvbGFiZWw+XG4gICAgICA8Uy5JbnB1dFN0eWxlXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NJbnB1dH1cbiAgICAgICAgdHlwZT1cInRlbFwiXG4gICAgICAgIGlkPVwidGVsXCJcbiAgICAgICAgbmFtZT1cInRlbFwiXG4gICAgICAgIHBsYWNlaG9sZGVyPVwiKzcoOTk5KTk5OS05OS05OVwiXG4gICAgICAgIHZhbHVlPXt0ZWx9XG4gICAgICAgIG9uQ2hhbmdlPXtvblRlbENoYW5nZX1cbiAgICAgICAgb25CbHVyPXtvbkJsdXJJbnB1dH1cbiAgICAgICAgcmVxdWlyZWQgLz5cbiAgICA8L1MuV3JhcElucHV0PlxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IElucHV0Q29udHJ5ID0gKCkgPT4ge1xuICBjb25zdCBbIGNvdW50cnksIHNldENvdW50cnkgXSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBbIGNsYXNzSW5wdXQsIHNldENsYXNzSW5wdXQgXSA9IHVzZVN0YXRlKFwiXCIpO1xuXG4gIGNvbnN0IG9uQ291bnRyeUNoYW5nZSA9IGUgPT4gc2V0Q291bnRyeShlLnRhcmdldC52YWx1ZSk7XG5cbiAgY29uc3Qgb25CbHVySW5wdXQgPSAoKSA9PiB7XG4gICAgaWYoY291bnRyeS5sZW5ndGggPCAzKSB7XG4gICAgICBzZXRDbGFzc0lucHV0KFwiaW5WYWxpZFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Q2xhc3NJbnB1dChcInZhbGlkXCIpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4oXG4gICAgPFMuV3JhcElucHV0PlxuICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjb3VudHJ5XCIgYXJpYS1sYWJlbD1cIkVudGVyIHRoZSBuYW1lIG9mIHlvdXIgY291bnRyeVwiPjwvbGFiZWw+XG4gICAgICA8Uy5JbnB1dFN0eWxlXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NJbnB1dH1cbiAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICBpZD1cImNvdW50cnlcIlxuICAgICAgICBuYW1lPVwiY291bnRyeVwiXG4gICAgICAgIHBsYWNlaG9sZGVyPVwiQ291bnRyeVwiXG4gICAgICAgIHZhbHVlPXtjb3VudHJ5fVxuICAgICAgICBvbkNoYW5nZT17b25Db3VudHJ5Q2hhbmdlfVxuICAgICAgICBvbkJsdXI9e29uQmx1cklucHV0fVxuICAgICAgICByZXF1aXJlZCAvPlxuICAgIDwvUy5XcmFwSW5wdXQ+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgSW5wdXRDaXR5ID0gKCkgPT4ge1xuICBjb25zdCBbIGNpdHksIHNldENpdHkgXSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBbIGNsYXNzSW5wdXQsIHNldENsYXNzSW5wdXQgXSA9IHVzZVN0YXRlKFwiXCIpO1xuXG4gIGNvbnN0IG9uQ2l0eUNoYW5nZSA9IGUgPT4gc2V0Q2l0eShlLnRhcmdldC52YWx1ZSk7XG5cbiAgY29uc3Qgb25CbHVySW5wdXQgPSAoKSA9PiB7XG4gICAgaWYoY2l0eS5sZW5ndGggPCAzKSB7XG4gICAgICBzZXRDbGFzc0lucHV0KFwiaW5WYWxpZFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Q2xhc3NJbnB1dChcInZhbGlkXCIpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4oXG4gICAgPFMuV3JhcElucHV0PlxuICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjaXR5XCIgYXJpYS1sYWJlbD1cIkVudGVyIHRoZSBuYW1lIG9mIHlvdXIgY2l0eVwiPjwvbGFiZWw+XG4gICAgICA8Uy5JbnB1dFN0eWxlXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NJbnB1dH1cbiAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICBpZD1cImNpdHlcIlxuICAgICAgICBuYW1lPVwiY2l0eVwiXG4gICAgICAgIHBsYWNlaG9sZGVyPVwiQ2l0eVwiXG4gICAgICAgIHZhbHVlPXtjaXR5fVxuICAgICAgICBvbkNoYW5nZT17b25DaXR5Q2hhbmdlfVxuICAgICAgICBvbkJsdXI9e29uQmx1cklucHV0fVxuICAgICAgICByZXF1aXJlZCAvPlxuICAgIDwvUy5XcmFwSW5wdXQ+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgSW5wdXRTdHJlZXQgPSAoKSA9PiB7XG4gIGNvbnN0IFsgc3RyZWV0LCBzZXRTdHJlZXQgXSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBbIGNsYXNzSW5wdXQsIHNldENsYXNzSW5wdXQgXSA9IHVzZVN0YXRlKFwiXCIpO1xuXG4gIGNvbnN0IG9uU3RyZWV0Q2hhbmdlID0gZSA9PiBzZXRTdHJlZXQoZS50YXJnZXQudmFsdWUpO1xuXG4gIGNvbnN0IG9uQmx1cklucHV0ID0gKCkgPT4ge1xuICAgIGlmKHN0cmVldC5sZW5ndGggPCAyKSB7XG4gICAgICBzZXRDbGFzc0lucHV0KFwiaW5WYWxpZFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Q2xhc3NJbnB1dChcInZhbGlkXCIpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4oXG4gICAgPFMuV3JhcElucHV0PlxuICAgICAgPGxhYmVsIGh0bWxGb3I9XCJzdHJlZXRcIiBhcmlhLWxhYmVsPVwiRW50ZXIgeW91ciBzdHJlZXQgbmFtZVwiPjwvbGFiZWw+XG4gICAgICA8Uy5JbnB1dFN0eWxlXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NJbnB1dH1cbiAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICBpZD1cInN0cmVldFwiXG4gICAgICAgIG5hbWU9XCJzdHJlZXRcIlxuICAgICAgICBwbGFjZWhvbGRlcj1cIlN0cmVldFwiXG4gICAgICAgIHZhbHVlPXtzdHJlZXR9XG4gICAgICAgIG9uQ2hhbmdlPXtvblN0cmVldENoYW5nZX1cbiAgICAgICAgb25CbHVyPXtvbkJsdXJJbnB1dH1cbiAgICAgICAgcmVxdWlyZWQgLz5cbiAgICA8L1MuV3JhcElucHV0PlxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IElucHV0SG91c2UgPSAoKSA9PiB7XG4gIGNvbnN0IFsgaG91c2UsIHNldEhvdXNlIF0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgWyBjbGFzc0lucHV0LCBzZXRDbGFzc0lucHV0IF0gPSB1c2VTdGF0ZShcIlwiKTtcblxuICBjb25zdCBvbkhvdXNlQ2hhbmdlID0gZSA9PiBzZXRIb3VzZShlLnRhcmdldC52YWx1ZSk7XG5cbiAgY29uc3Qgb25CbHVySW5wdXQgPSAoKSA9PiB7XG4gICAgaWYoaG91c2UubGVuZ3RoIDwgMikge1xuICAgICAgc2V0Q2xhc3NJbnB1dChcImluVmFsaWRcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldENsYXNzSW5wdXQoXCJ2YWxpZFwiKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuKFxuICAgIDxTLldyYXBJbnB1dD5cbiAgICAgIDxsYWJlbCBodG1sRm9yPVwiaG91c2VcIiBhcmlhLWxhYmVsPVwiRW50ZXIgeW91ciBob3VzZSBudW1iZXJcIj48L2xhYmVsPlxuICAgICAgPFMuSW5wdXRTdHlsZVxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzSW5wdXR9XG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgaWQ9XCJob3VzZVwiXG4gICAgICAgIG5hbWU9XCJob3VzZVwiXG4gICAgICAgIHBsYWNlaG9sZGVyPVwiSG91c2VcIlxuICAgICAgICB2YWx1ZT17aG91c2V9XG4gICAgICAgIG9uQ2hhbmdlPXtvbkhvdXNlQ2hhbmdlfVxuICAgICAgICBvbkJsdXI9e29uQmx1cklucHV0fVxuICAgICAgICByZXF1aXJlZCAvPlxuICAgIDwvUy5XcmFwSW5wdXQ+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgSW5wdXRBcGFydG1lbnQgPSAoKSA9PiB7XG4gIGNvbnN0IFsgYXBhcnRtZW50LCBzZXRBcGFydG1lbnQgXSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBbIGNsYXNzSW5wdXQsIHNldENsYXNzSW5wdXQgXSA9IHVzZVN0YXRlKFwiXCIpO1xuXG4gIGNvbnN0IG9uQXBhcnRtZW50Q2hhbmdlID0gZSA9PiBzZXRBcGFydG1lbnQoZS50YXJnZXQudmFsdWUpO1xuXG4gIGNvbnN0IG9uQmx1cklucHV0ID0gKCkgPT4ge1xuICAgIGlmKGFwYXJ0bWVudC5sZW5ndGggPCAyKSB7XG4gICAgICBzZXRDbGFzc0lucHV0KFwiaW5WYWxpZFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Q2xhc3NJbnB1dChcInZhbGlkXCIpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4oXG4gICAgPFMuV3JhcElucHV0PlxuICAgICAgPGxhYmVsIGh0bWxGb3I9XCJhcGFydG1lbnRcIiBhcmlhLWxhYmVsPVwiRW50ZXIgeW91ciBhcGFydG1lbnQgbnVtYmVyXCI+PC9sYWJlbD5cbiAgICAgIDxTLklucHV0U3R5bGVcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc0lucHV0fVxuICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgIGlkPVwiYXBhcnRtZW50XCJcbiAgICAgICAgbmFtZT1cImFwYXJ0bWVudFwiXG4gICAgICAgIHBsYWNlaG9sZGVyPVwiQXBhcnRtZW50XCJcbiAgICAgICAgdmFsdWU9e2FwYXJ0bWVudH1cbiAgICAgICAgb25DaGFuZ2U9e29uQXBhcnRtZW50Q2hhbmdlfVxuICAgICAgICBvbkJsdXI9e29uQmx1cklucHV0fSAvPlxuICAgIDwvUy5XcmFwSW5wdXQ+XG4gICk7XG59O1xuIiwiaW1wb3J0IHN0eWxlZCwgeyBjc3MgfSBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcbmltcG9ydCBDb250YWluZXIgZnJvbSBcIi9zcmMvY29tcG9uZW50cy91aS9jb250YWluZXJcIjtcblxuY29uc3Qgc3R5bGVJdGVtID0gY3NzYFxuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDQwJSAzMCUgMzAlO1xuICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5leHBvcnQgY29uc3QgRm9ybVN0eWxlID0gc3R5bGVkLmZvcm1gXG4gIHdpZHRoOiAxMDAlO1xuYDtcblxuZXhwb3J0IGNvbnN0IEZvcm1Db250YWluZXIgPSBzdHlsZWQoQ29udGFpbmVyKWBcbiAgcGFkZGluZy10b3A6IDQwcHg7XG4gIHBhZGRpbmctYm90dG9tOiA1MHB4O1xuXG4gIGNvbHVtbi1jb3VudDogMjtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA2My45NGVtKSB7XG4gICAgY29sdW1uLWNvdW50OiAxO1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgIHBhZGRpbmctdG9wOiAyMHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAyMHB4O1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgRm9ybUZpZWxkc2V0ID0gc3R5bGVkLmZpZWxkc2V0YFxuICBib3JkZXI6IG5vbmU7XG4gIG1hcmdpbjogMCAwIDIwcHggMDtcbiAgcGFkZGluZzogMDtcblxuICBkaXNwbGF5OiBncmlkO1xuICBnYXA6IDVweDtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgbWFyZ2luOiAwIDAgMTVweCAwO1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgRm9ybUxlZ2VuZCA9IHN0eWxlZC5sZWdlbmRgXG4gIG1hcmdpbi1ib3R0b206IDMwcHg7XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBGb3JtVGV4dGFyZWEgPSBzdHlsZWQudGV4dGFyZWFgXG4gIGJvcmRlcjogMDtcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICMxYTc3ZDI7XG4gIHJlc2l6ZTogbm9uZTtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgaGVpZ2h0OiAxMDBweDtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IEZvcm1MaXN0QmVlcnMgPSBzdHlsZWQudWxgXG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgZGlzcGxheTogZ3JpZDtcbiAgYm9yZGVyOiAxcHggZGFzaGVkICM4NWM2ZTY7XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgIGdhcDogNXB4O1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgRm9ybVdyYXBUaXRsZSA9IHN0eWxlZC5kaXZgXG4gICR7c3R5bGVJdGVtfTtcblxuICBoNCB7XG4gICAgbWFyZ2luOiAwO1xuXG4gICAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgICAgbGluZS1oZWlnaHQ6IDEzMCU7XG4gICAgICBtYXJnaW46IDA7XG4gICAgICBmb250LXNpemU6IDAuOWVtO1xuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IEZvcm1JdGVtID0gc3R5bGVkLmxpYFxuICAke3N0eWxlSXRlbX07XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGJvcmRlci1ib3R0b206IDFweCBkYXNoZWQgIzg1YzZlNjtcblxuICBoMyB7XG4gICAganVzdGlmeS1zZWxmOiBmbGV4LXN0YXJ0O1xuXG4gICAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgICAgcGFkZGluZy1ib3R0b206IDVweDtcbiAgICAgIGxpbmUtaGVpZ2h0OiAxMzAlO1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBGb3JtV3JhcFByaWNlID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBwYWRkaW5nOiAyMHB4O1xuXG4gIGJhY2tncm91bmQtY29sb3I6ICM4MTdhYmY7XG4gIGNvbG9yOiAjZmZmZmZmO1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDQ3Ljk0ZW0pIHtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgRm9ybVdyYXBDaGVja2JveCA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgZm9udC1zaXplOiAwLjhlbTtcbiAgfVxuXG4gIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuXG4gICAgd2lkdGg6IDFweDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBtYXJnaW46IC0xcHg7XG4gICAgcGFkZGluZzogMDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcblxuICAgIGJvcmRlcjogMDtcblxuICAgIGNsaXA6IHJlY3QoMCAwIDAgMCk7XG4gICAgY2xpcC1wYXRoOiBpbnNldCgxMDAlKTtcbiAgfVxuXG4gIGxhYmVsIHtcbiAgICBwYWRkaW5nLWxlZnQ6IDM2cHg7XG5cbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgICAmOjpiZWZvcmUge1xuICAgICAgY29udGVudDogXCJcIjtcbiAgICAgIHdpZHRoOiAyMnB4O1xuICAgICAgaGVpZ2h0OiAyMnB4O1xuXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgdG9wOiAwO1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgIzAwMDAwMDtcbiAgICB9XG4gIH1cblxuICBpbnB1dDpjaGVja2VkICsgbGFiZWw6OmFmdGVyIHtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIHdpZHRoOiAxMHB4O1xuICAgIGhlaWdodDogMTBweDtcblxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiA2cHg7XG4gICAgdG9wOiA2cHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJlNDNhNTtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IEZvcm1CdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICBkaXNwbGF5OiBibG9jaztcbiAgd2lkdGg6IDEwMCU7XG4gIGJvcmRlcjogbm9uZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzgxN2FiZjtcbiAgY29sb3I6ICNmZmZmZmY7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDVweDtcblxuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHVzZXItc2VsZWN0OiBub25lO1xuXG4gICY6aG92ZXIge1xuICAgIG9wYWNpdHk6IDAuNztcbiAgfVxuYDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgc2VsZWN0QWxsQmVlcnNCYXNrZXQsIGFkZFByb2R1Y3RzIH0gZnJvbSBcIi9zcmMvZmVhdHVyZXMvYmFza2V0U2xpY2VcIjtcbmltcG9ydCB7IElucHV0TmFtZSwgSW5wdXRNYWlsLCBJbnB1dFRlbCwgSW5wdXRDb250cnksIElucHV0Q2l0eSwgSW5wdXRTdHJlZXQsIElucHV0SG91c2UsIElucHV0QXBhcnRtZW50IH0gZnJvbSBcIi9zcmMvY29tcG9uZW50cy91aS9pbnB1dFwiO1xuaW1wb3J0ICogYXMgUyBmcm9tIFwiLi9zdHlsZVwiO1xuXG5mdW5jdGlvbiBGb3JtKCkge1xuICBjb25zdCBiZWVycyA9IHVzZVNlbGVjdG9yKHNlbGVjdEFsbEJlZXJzQmFza2V0KTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgYmVlcnNCYXNrZXQgPSBbXTtcbiAgICBpZihsb2NhbFN0b3JhZ2UubGVuZ3RoICE9PSBiZWVycy5sZW5ndGgpIHtcbiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsb2NhbFN0b3JhZ2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgaWRCZWVyID0gbG9jYWxTdG9yYWdlLmtleShpKTtcbiAgICAgICAgY29uc3QgYmVlciA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oaWRCZWVyKSk7XG4gICAgICAgIGJlZXJzQmFza2V0LnB1c2goe2lkOiBiZWVyLmlkLCBuYW1lOiBiZWVyLm5hbWUsIHF1YW50aXR5OiBiZWVyLnF1YW50aXR5LCBwcmljZTogYmVlci5pYnUgKiBiZWVyLnF1YW50aXR5LCBpbWFnZV91cmw6IGJlZXIuaW1hZ2VfdXJsLCBpYnU6IGJlZXIuaWJ1LCBhYnY6IGJlZXIuYWJ2fSk7XG4gICAgICB9XG4gICAgICBkaXNwYXRjaChhZGRQcm9kdWN0cyhiZWVyc0Jhc2tldCkpO1xuICAgICAgY29uc29sZS5sb2coJ0VmZmVjdCBGb3JtJylcbiAgICB9XG4gIH0pO1xuXG4gIGxldCB0b3RhbCA9IDA7XG4gIHJldHVybihcbiAgICA8Uy5Gb3JtU3R5bGUgYWN0aW9uPVwiaHR0cHM6Ly9lY2hvLmh0bWxhY2FkZW15LnJ1XCIgbWV0aG9kPVwicG9zdFwiPlxuICAgICAgPFMuRm9ybUNvbnRhaW5lcj5cbiAgICAgICAgPFMuRm9ybUZpZWxkc2V0PlxuICAgICAgICAgIDxTLkZvcm1MZWdlbmQ+QnV5ZXIgZGF0YTwvUy5Gb3JtTGVnZW5kPlxuICAgICAgICAgIDxJbnB1dE5hbWUgLz5cbiAgICAgICAgICA8SW5wdXRNYWlsIC8+XG4gICAgICAgICAgPElucHV0VGVsIC8+XG4gICAgICAgIDwvUy5Gb3JtRmllbGRzZXQ+XG4gICAgICAgIDxTLkZvcm1GaWVsZHNldD5cbiAgICAgICAgICA8Uy5Gb3JtTGVnZW5kPkFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudDwvUy5Gb3JtTGVnZW5kPlxuICAgICAgICAgIDxJbnB1dENvbnRyeSAvPlxuICAgICAgICAgIDxJbnB1dENpdHkgLz5cbiAgICAgICAgICA8SW5wdXRTdHJlZXQgLz5cbiAgICAgICAgICA8SW5wdXRIb3VzZSAvPlxuICAgICAgICAgIDxJbnB1dEFwYXJ0bWVudCAvPlxuICAgICAgICA8L1MuRm9ybUZpZWxkc2V0PlxuICAgICAgICA8Uy5Gb3JtRmllbGRzZXQ+XG4gICAgICAgICAgPFMuRm9ybUxlZ2VuZD5Db21tZW50czwvUy5Gb3JtTGVnZW5kPlxuICAgICAgICAgIDxTLkZvcm1UZXh0YXJlYSBuYW1lPVwibWVzc2FuZ1wiIGNvbHM9XCIxMFwiIHJvd3M9XCIxMFwiPjwvUy5Gb3JtVGV4dGFyZWE+XG4gICAgICAgIDwvUy5Gb3JtRmllbGRzZXQ+XG4gICAgICAgIDxTLkZvcm1GaWVsZHNldD5cbiAgICAgICAgICA8Uy5Gb3JtTGVnZW5kPllvdXIgb3JkZXI8L1MuRm9ybUxlZ2VuZD5cbiAgICAgICAgICA8Uy5Gb3JtV3JhcFRpdGxlPlxuICAgICAgICAgICAgPGg0PkJlZXI8L2g0PlxuICAgICAgICAgICAgPGg0PlF1YW50aXR5PC9oND5cbiAgICAgICAgICAgIDxoND5QcmljZTwvaDQ+XG4gICAgICAgICAgPC9TLkZvcm1XcmFwVGl0bGU+XG4gICAgICAgICAgPFMuRm9ybUxpc3RCZWVycz5cbiAgICAgICAgICAgIHtiZWVycy5tYXAoKGJlZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgIHRvdGFsICs9IGJlZXIucHJpY2U7XG4gICAgICAgICAgICAgIHJldHVybihcbiAgICAgICAgICAgICAgICA8Uy5Gb3JtSXRlbSBrZXk9e2luZGV4fT5cbiAgICAgICAgICAgICAgICAgIDxoMz57YmVlci5uYW1lfTwvaDM+XG4gICAgICAgICAgICAgICAgICA8c3Bhbj57YmVlci5xdWFudGl0eX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8c3Bhbj57YmVlci5wcmljZX0gJDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L1MuRm9ybUl0ZW0+XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA8L1MuRm9ybUxpc3RCZWVycz5cbiAgICAgICAgICA8Uy5Gb3JtV3JhcFByaWNlPlxuICAgICAgICAgICAgPHNwYW4+VG90YWw6PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4+e3RvdGFsfSQ8L3NwYW4+XG4gICAgICAgICAgPC9TLkZvcm1XcmFwUHJpY2U+XG4gICAgICAgIDwvUy5Gb3JtRmllbGRzZXQ+XG4gICAgICAgIDxTLkZvcm1GaWVsZHNldD5cbiAgICAgICAgICA8Uy5Gb3JtTGVnZW5kPlBheW1lbnQgbWV0aG9kczwvUy5Gb3JtTGVnZW5kPlxuICAgICAgICAgIDxTLkZvcm1XcmFwQ2hlY2tib3g+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJjYXNoXCIgbmFtZT1cImNhc2hcIiByZXF1aXJlZCBkZWZhdWx0Q2hlY2tlZCAvPlxuICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjYXNoXCI+Q2FzaCBwYXltZW50PC9sYWJlbD5cbiAgICAgICAgICA8L1MuRm9ybVdyYXBDaGVja2JveD5cbiAgICAgICAgICA8Uy5Gb3JtV3JhcENoZWNrYm94PlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJjb25zZW50VG9EYXRhUHJvY2Vzc2luZ1wiIGlkPVwiY29uc2VudFwiIHJlcXVpcmVkIGRlZmF1bHRDaGVja2VkIC8+XG4gICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImNvbnNlbnRcIj5JIGFncmVlIHRvIHRoZSBwcm9jZXNzaW5nIG9mIG15IHBlcnNvbmFsIGRhdGE8L2xhYmVsPlxuICAgICAgICAgIDwvUy5Gb3JtV3JhcENoZWNrYm94PlxuICAgICAgICA8L1MuRm9ybUZpZWxkc2V0PlxuICAgICAgICA8Uy5Gb3JtQnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBhcmlhLWxhYmVsPVwiU3VibWl0IGFuIG9yZGVyIHRvIHRoZSBzdG9yZVwiPlBsYWNlIGFuIG9yZGVyPC9TLkZvcm1CdXR0b24+XG4gICAgICA8L1MuRm9ybUNvbnRhaW5lcj5cbiAgICA8L1MuRm9ybVN0eWxlPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBGb3JtO1xuIiwiaW1wb3J0IHsgY3JlYXRlR2xvYmFsU3R5bGUgfSBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcblxuZXhwb3J0IGNvbnN0IEdsb2JhbFN0eWxlcyA9IGNyZWF0ZUdsb2JhbFN0eWxlYFxuXG4gIGJvZHksXG4gIGh0bWwge1xuICAgIG1hcmdpbjogMDtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIH1cblxuICBib2R5IHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgbWluLWhlaWdodDogMTAwJTtcbiAgICBmb250LWZhbWlseTogXCJJbnRlclwiLCBcIkFyaWFsXCIsIHNhbnMtc2VyaWY7XG4gICAgZm9udC1zaXplOiAxOHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAyN3B4O1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgY29sb3I6ICR7KHByb3BzKSA9PiBwcm9wcy50aGVtZS5jb2xvckJsYWNrfTtcbiAgICBzY3JvbGxiYXItY29sb3I6IHJnYmEoNDQsIDE3MSwgMjEsIDAuNSkgcmdiYSg0NCwgMTcxLCAyMSwgMC4yKTtcbiAgICBzY3JvbGxiYXItd2lkdGg6IHRoaW47XG5cbiAgICAmOjotd2Via2l0LXNjcm9sbGJhciB7XG4gICAgICB3aWR0aDogMTBweDtcbiAgICAgIGhlaWdodDogNXB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICB9XG5cbiAgICAmOjotd2Via2l0LXNjcm9sbGJhci10cmFjay1waWVjZSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDQ0LCAxNzEsIDIxLCAwLjIpO1xuICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICAgIHdpZHRoOiAxMHB4O1xuICAgIH1cblxuICAgICY6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iOnZlcnRpY2FsIHtcbiAgICAgIGhlaWdodDogMzBweDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNDQsIDE3MSwgMjEsIDAuNSk7XG4gICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgIH1cbiAgfVxuXG4gICosXG4gICo6OmJlZm9yZSxcbiAgKjo6YWZ0ZXIge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cblxuICBhIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIH1cblxuICBpbWcsXG4gIHZpZGVvIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gIH1cblxuICAjcm9vdCB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtaW4taGVpZ2h0OiAxMDB2aDtcblxuICBoZWFkZXIsXG4gIGZvb3RlciB7XG4gICAgZmxleC1zaHJpbms6IDA7XG4gIH1cblxuICBtYWluIHtcbiAgICBmbGV4LWdyb3c6IDE7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB9XG59XG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZjZTdjMDEwODE1NjMzNzdhYTYyNmMyZDcyMWM1N2Q3LndvZmZcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMTg1NmNhMWU4NjM5MDgxMTczNDU5NTQ0NWViNmM4Mzgud29mZjJcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNzdiNTMwMzY1ZTVkNmFhNTM3YzNmYTI0ZjE2OWQzZTIud29mZlwiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJlMDdmOGQyOGE5ZjI3Mjg1Yzk0YjViNDVlMjQxMDU1NS53b2ZmMlwiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI5NDMwMzViOTk0Zjc0OGUxMGM5NjNjNTA4NTljNGVjNS53b2ZmXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImY2OTYwOTNjYWMwYzAwOTQzMmM3YWRhMzEyNTY0ODA0LndvZmYyXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjM3Nzc3YzY5OTE0OTUwNjE5MGE4ZTM5MDExYzU3Y2RjLndvZmZcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMDgwYWJkMmQ2ZWQwMjdhNjIyNzUxM2U2MzkwMTQzMTcud29mZjJcIjsiLCJpbXBvcnQgeyBjcmVhdGVHbG9iYWxTdHlsZSB9IGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuXG5pbXBvcnQgUGVybWFuZW50TWFya2VyV29mZiBmcm9tIFwiLi9QZXJtYW5lbnRNYXJrZXItUmVndWxhci53b2ZmXCI7XG5pbXBvcnQgUGVybWFuZW50TWFya2VyV29mZjIgZnJvbSBcIi4vUGVybWFuZW50TWFya2VyLVJlZ3VsYXIud29mZjJcIjtcblxuaW1wb3J0IEludGVyUmVndWxhcldvZmYgZnJvbSBcIi4vSW50ZXItUmVndWxhci53b2ZmXCI7XG5pbXBvcnQgSW50ZXJSZWd1bGFyV29mZjIgZnJvbSBcIi4vSW50ZXItUmVndWxhci53b2ZmMlwiO1xuXG5pbXBvcnQgSW50ZXJNZWRpdW1Xb2ZmIGZyb20gXCIuL0ludGVyLU1lZGl1bS53b2ZmXCI7XG5pbXBvcnQgSW50ZXJNZWRpdW1Xb2ZmMiBmcm9tIFwiLi9JbnRlci1NZWRpdW0ud29mZjJcIjtcblxuaW1wb3J0IEludGVyQmxhY2tXb2ZmIGZyb20gXCIuL0ludGVyLUJsYWNrLndvZmZcIjtcbmltcG9ydCBJbnRlckJsYWNrV29mZjIgZnJvbSBcIi4vSW50ZXItQmxhY2sud29mZjJcIjtcblxuZXhwb3J0IGNvbnN0IEdsb2JhbEZvbnRzID0gY3JlYXRlR2xvYmFsU3R5bGVgXG4gIEBmb250LWZhY2Uge1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIGZvbnQtZmFtaWx5OiBcIlBlcm1hbmVudC1NYXJrZXJcIjtcblxuICAgIGZvbnQtZGlzcGxheTogc3dhcDtcbiAgICBzcmM6XG4gICAgICB1cmwoJHtQZXJtYW5lbnRNYXJrZXJXb2ZmMn0pIGZvcm1hdChcIndvZmYyXCIpLFxuICAgICAgdXJsKCR7UGVybWFuZW50TWFya2VyV29mZn0pIGZvcm1hdChcIndvZmZcIik7XG4gIH1cblxuICBAZm9udC1mYWNlIHtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBmb250LWZhbWlseTogXCJJbnRlclwiO1xuXG4gICAgZm9udC1kaXNwbGF5OiBzd2FwO1xuICAgIHNyYzpcbiAgICAgIHVybCgke0ludGVyUmVndWxhcldvZmYyfSkgZm9ybWF0KFwid29mZjJcIiksXG4gICAgICB1cmwoJHtJbnRlclJlZ3VsYXJXb2ZmfSkgZm9ybWF0KFwid29mZlwiKTtcbiAgfVxuXG4gIEBmb250LWZhY2Uge1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICAgIGZvbnQtZmFtaWx5OiBcIkludGVyXCI7XG5cbiAgICBmb250LWRpc3BsYXk6IHN3YXA7XG4gICAgc3JjOlxuICAgICAgdXJsKCR7SW50ZXJNZWRpdW1Xb2ZmMn0pIGZvcm1hdChcIndvZmYyXCIpLFxuICAgICAgdXJsKCR7SW50ZXJNZWRpdW1Xb2ZmfSkgZm9ybWF0KFwid29mZlwiKTtcbiAgfVxuXG5cbiAgQGZvbnQtZmFjZSB7XG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgIGZvbnQtd2VpZ2h0OiA5MDA7XG4gICAgZm9udC1mYW1pbHk6IFwiSW50ZXJcIjtcblxuICAgIGZvbnQtZGlzcGxheTogc3dhcDtcbiAgICBzcmM6XG4gICAgICB1cmwoJHtJbnRlckJsYWNrV29mZjJ9KSBmb3JtYXQoXCJ3b2ZmMlwiKSxcbiAgICAgIHVybCgke0ludGVyQmxhY2tXb2ZmfSkgZm9ybWF0KFwid29mZlwiKTtcbiAgfVxuYDtcblxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgSGFzaFJvdXRlciwgUm91dGVzLCBSb3V0ZSwgTmF2aWdhdGUsIHVzZVBhcmFtcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgTGF5b3V0IGZyb20gXCIvc3JjL2NvbXBvbmVudHMvYmFzZS9sYXlvdXRcIjtcbmltcG9ydCBNYWluIGZyb20gXCIvc3JjL2NvbXBvbmVudHMvcGFnZS9tYWluXCI7XG5pbXBvcnQgT25lQmVlciBmcm9tIFwiL3NyYy9jb21wb25lbnRzL3BhZ2Uvb25lLWJlZXJcIjtcbmltcG9ydCBCYXNrZXQgZnJvbSBcIi9zcmMvY29tcG9uZW50cy9wYWdlL2Jhc2tldFwiO1xuaW1wb3J0IEZvcm0gZnJvbSBcIi9zcmMvY29tcG9uZW50cy9wYWdlL2Zvcm1cIjtcbmltcG9ydCB7IEdsb2JhbFN0eWxlcyB9IGZyb20gXCIuL3N0eWxlXCI7XG5pbXBvcnQgeyBHbG9iYWxGb250cyB9IGZyb20gXCIvc3JjL2ZvbnRzL2ZvbnRzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcCgpIHtcblxuICBjb25zdCB7IHBhZ2VOdW1iZXIgfSA9IHVzZVBhcmFtcygpO1xuXG4gIHJldHVybiAoXG4gICAgPEhhc2hSb3V0ZXI+XG4gICAgICA8R2xvYmFsU3R5bGVzIC8+XG4gICAgICA8R2xvYmFsRm9udHMgLz5cbiAgICAgIDxSb3V0ZXM+XG4gICAgICAgIDxSb3V0ZSBlbGVtZW50PXs8TGF5b3V0IC8+fT5cbiAgICAgICAgICA8Um91dGUgcGF0aD17YDoke3BhZ2VOdW1iZXJ9YH0gZWxlbWVudD17PE1haW4gLz59IC8+XG4gICAgICAgICAgPFJvdXRlIHBhdGg9e1wiL2JlZXJzLzppZFwifSBlbGVtZW50PXs8T25lQmVlciAvPn0gLz5cbiAgICAgICAgICA8Um91dGUgcGF0aD17XCIvYmFza2V0XCJ9IGVsZW1lbnQ9ezxCYXNrZXQgLz59IC8+XG4gICAgICAgICAgPFJvdXRlIHBhdGg9e1wiL2Zvcm1cIn0gZWxlbWVudD17PEZvcm0gLz59IC8+XG4gICAgICAgICAgPFJvdXRlIHBhdGg9e1wiL1wifSBlbGVtZW50PXs8TmF2aWdhdGUgcmVwbGFjZSB0bz17XCIvcGFnZV8xXCJ9IC8+fSAvPlxuICAgICAgICA8L1JvdXRlPlxuICAgICAgPC9Sb3V0ZXM+XG4gICAgPC9IYXNoUm91dGVyPlxuICApO1xufVxuIiwiaW1wb3J0IHsgY29uZmlndXJlU3RvcmUgfSBmcm9tIFwiQHJlZHV4anMvdG9vbGtpdFwiO1xuaW1wb3J0IGJlZXJzUmVkdWNlciBmcm9tIFwiL3NyYy9mZWF0dXJlcy9iZWVyc1NsaWNlXCI7XG5pbXBvcnQgYmFza2V0UmVkdWNlciBmcm9tIFwiL3NyYy9mZWF0dXJlcy9iYXNrZXRTbGljZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjb25maWd1cmVTdG9yZSh7XG4gIHJlZHVjZXI6IHtcbiAgICBiZWVyczogYmVlcnNSZWR1Y2VyLFxuICAgIGJhc2tldDogYmFza2V0UmVkdWNlclxuICB9XG59KTtcbiIsImltcG9ydCBSZWFjdCwgeyBTdHJpY3RNb2RlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBjcmVhdGVSb290IH0gZnJvbSBcInJlYWN0LWRvbS9jbGllbnRcIjtcblxuaW1wb3J0IEFwcCBmcm9tIFwiL3NyYy9jb21wb25lbnRzL2FwcC9BcHBcIjtcblxuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCBzdG9yZSBmcm9tIFwiL3NyYy9zdG9yZVwiO1xuXG5pbXBvcnQgeyBUaGVtZVByb3ZpZGVyIH0gZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQgeyB0aGVtZSB9IGZyb20gXCIvc3JjL2NvbXBvbmVudHMvdGhlbWUvdGhlbWVcIjtcblxuY29uc3Qgcm9vdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIik7XG5jb25zdCByb290ID0gY3JlYXRlUm9vdChyb290RWxlbWVudCk7XG5cbnJvb3QucmVuZGVyKFxuICA8U3RyaWN0TW9kZT5cbiAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICAgIDxUaGVtZVByb3ZpZGVyIHRoZW1lPXt0aGVtZX0+XG4gICAgICAgIDxBcHAgLz5cbiAgICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgICA8L1Byb3ZpZGVyPlxuICA8L1N0cmljdE1vZGU+XG4pO1xuIiwiZXhwb3J0IGNvbnN0IHRoZW1lID0ge1xuICBjb2xvckJsYWNrOiBcIiMzMzMzMzNcIixcbiAgY29sb3JXaGl0ZTogXCIjZmZmZmZmXCIsXG4gIGNvbG9yQWN0aXZlTGluazogXCIjZmYwMTAxXCIsXG4gIGZmSW50ZXI6ICBgXCJJbnRlclwiLCBcIkFyaWFsXCIsIHNhbnMtc2VyaWZgLFxuICBmZlBlcm1hbmVudE1hcmtlcjogYFwiUGVybWFuZW50LU1hcmtlclwiLCBcIkFyaWFsXCIsIHNhbnMtc2VyaWZgLFxuICBpbmRlbnQ6IFwiMTAwcHhcIixcbiAgaW5kZW50RGVza3RvcDogXCI1MHB4XCIsXG4gIGluZGVudE1vYmlsZTogXCIyMHB4XCIsXG4gIGluZGVudFRhYmxldDogXCIzMHB4XCIsXG59O1xuIl0sIm5hbWVzIjpbImxlYWZQcm90b3R5cGVzIiwiZ2V0UHJvdG8iLCJyZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsInR5cGUiLCJLTk9XTl9TVEFUSUNTIiwibmFtZSIsImxlbmd0aCIsInByb3RvdHlwZSIsImNhbGxlciIsImNhbGxlZSIsImFyZ3VtZW50cyIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsImRlZmluZVByb3BlcnR5IiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50Iiwia2V5cyIsImNvbmNhdCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiaSIsImtleSIsImRlc2NyaXB0b3IiLCJlIiwiYiIsIlN5bWJvbCIsImZvciIsImMiLCJkIiwiZiIsImciLCJoIiwiayIsImwiLCJtIiwibiIsInAiLCJxIiwiciIsInQiLCJ2IiwidyIsIngiLCJ5IiwieiIsImEiLCJ1IiwiJCR0eXBlb2YiLCJBIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRnJhZ21lbnQiLCJMYXp5IiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJhYSIsImNhIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZGEiLCJTZXQiLCJlYSIsImZhIiwiaGEiLCJhZGQiLCJpYSIsIndpbmRvdyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImphIiwiaGFzT3duUHJvcGVydHkiLCJrYSIsImxhIiwibWEiLCJ0aGlzIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJzcGxpdCIsImZvckVhY2giLCJ0b0xvd2VyQ2FzZSIsInJhIiwic2EiLCJ0b1VwcGVyQ2FzZSIsInRhIiwic2xpY2UiLCJwYSIsImlzTmFOIiwicWEiLCJjYWxsIiwidGVzdCIsIm9hIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJyZXBsYWNlIiwieGxpbmtIcmVmIiwidWEiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInZhIiwid2EiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJpdGVyYXRvciIsIkthIiwiTGEiLCJhc3NpZ24iLCJNYSIsIkVycm9yIiwic3RhY2siLCJ0cmltIiwibWF0Y2giLCJOYSIsIk9hIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJzZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiaW5jbHVkZXMiLCJQYSIsInRhZyIsIlFhIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiUmEiLCJTYSIsIlRhIiwibm9kZU5hbWUiLCJWYSIsIl92YWx1ZVRyYWNrZXIiLCJjb25zdHJ1Y3RvciIsImdldCIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJ2YWx1ZSIsIlhhIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJZYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWmEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJvd25lckRvY3VtZW50IiwiZWIiLCJBcnJheSIsImlzQXJyYXkiLCJmYiIsIm9wdGlvbnMiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImNoaWxkcmVuIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJ0b1N0cmluZyIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm9iIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJwYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYXNwZWN0UmF0aW8iLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJxYiIsInJiIiwic2IiLCJzdHlsZSIsImluZGV4T2YiLCJzZXRQcm9wZXJ0eSIsImNoYXJBdCIsInN1YnN0cmluZyIsInRiIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInNvdXJjZSIsInRyYWNrIiwid2JyIiwidWIiLCJ2YiIsImlzIiwid2IiLCJ4YiIsInRhcmdldCIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsInB1c2giLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJOYiIsImFwcGx5Iiwib25FcnJvciIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiU2IiLCJUYiIsIlZiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiZmxhZ3MiLCJXYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiWGIiLCJaYiIsImNoaWxkIiwic2libGluZyIsImN1cnJlbnQiLCJZYiIsIiRiIiwiYWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiYmMiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImNjIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJkYyIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIkIiLCJ1bnN0YWJsZV9ub3ciLCJlYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmMiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImdjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJoYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiaWMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImpjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5Iiwia2MiLCJsYyIsIm9jIiwiTWF0aCIsImNsejMyIiwicGMiLCJxYyIsImxvZyIsIkxOMiIsInJjIiwic2MiLCJ0YyIsInVjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInZjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJldmVudFRpbWVzIiwiQ2MiLCJDIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiTWFwIiwiUGMiLCJRYyIsIlJjIiwiU2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJUYyIsIm5hdGl2ZUV2ZW50IiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsInRhcmdldENvbnRhaW5lcnMiLCJWYyIsIldjIiwicHJpb3JpdHkiLCJpc0RlaHlkcmF0ZWQiLCJjb250YWluZXJJbmZvIiwiWGMiLCJZYyIsImRpc3BhdGNoRXZlbnQiLCJzaGlmdCIsIlpjIiwiJGMiLCJhZCIsImJkIiwiY2QiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImRkIiwiZWQiLCJ0cmFuc2l0aW9uIiwiZmQiLCJnZCIsImhkIiwiaWQiLCJVYyIsInN0b3BQcm9wYWdhdGlvbiIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsInBkIiwicWQiLCJyZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsIndkIiwieGQiLCJ5ZCIsInNkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsInRkIiwidWQiLCJ2aWV3IiwiZGV0YWlsIiwidmQiLCJBZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ6ZCIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJCZCIsIkRkIiwiZGF0YVRyYW5zZmVyIiwiRmQiLCJIZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJJZCIsImNsaXBib2FyZERhdGEiLCJKZCIsIkxkIiwiZGF0YSIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJRZCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNvZGUiLCJsb2NhdGlvbiIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiUmQiLCJUZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWWQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIlpkIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJldmVudCIsImxpc3RlbmVycyIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwibm9kZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiTGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTWUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiTmUiLCJjb250ZW50RWRpdGFibGUiLCJPZSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJkb2N1bWVudEVsZW1lbnQiLCJzdGFydCIsImVuZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJleHRlbmQiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiZWxlbWVudCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsIldlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiWGUiLCJZZSIsIlplIiwiYW5pbWF0aW9uIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsImhmIiwibGYiLCJtZiIsIm5mIiwiVWIiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwiRCIsIm9mIiwiaGFzIiwicGYiLCJxZiIsInJmIiwicmFuZG9tIiwic2YiLCJiaW5kIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJKIiwiRiIsInRmIiwidWYiLCJwYXJlbnRXaW5kb3ciLCJ2ZiIsIndmIiwibmEiLCJ4YSIsIiRhIiwiYmEiLCJqZSIsImNoYXIiLCJrZSIsInVuc2hpZnQiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiX19odG1sIiwiRmYiLCJzZXRUaW1lb3V0IiwiR2YiLCJjbGVhclRpbWVvdXQiLCJIZiIsIlByb21pc2UiLCJKZiIsInF1ZXVlTWljcm90YXNrIiwicmVzb2x2ZSIsInRoZW4iLCJjYXRjaCIsIklmIiwiS2YiLCJMZiIsIk1mIiwicHJldmlvdXNTaWJsaW5nIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIkUiLCJHIiwiVmYiLCJIIiwiV2YiLCJYZiIsIllmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiWmYiLCIkZiIsImFnIiwiYmciLCJnZXRDaGlsZENvbnRleHQiLCJjZyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwidGciLCJ1ZyIsInZnIiwid2ciLCJ4ZyIsInlnIiwiSSIsInpnIiwiQWciLCJCZyIsImVsZW1lbnRUeXBlIiwiZGVsZXRpb25zIiwiQ2ciLCJwZW5kaW5nUHJvcHMiLCJvdmVyZmxvdyIsInRyZWVDb250ZXh0IiwicmV0cnlMYW5lIiwiRGciLCJtb2RlIiwiRWciLCJGZyIsIkdnIiwibWVtb2l6ZWRQcm9wcyIsIkhnIiwiSWciLCJKZyIsIktnIiwiTGciLCJNZyIsIk5nIiwiT2ciLCJQZyIsIlFnIiwiUmciLCJfY3VycmVudFZhbHVlIiwiU2ciLCJjaGlsZExhbmVzIiwiVGciLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsIlVnIiwiVmciLCJjb250ZXh0IiwibWVtb2l6ZWRWYWx1ZSIsIm5leHQiLCJXZyIsIlhnIiwiWWciLCJpbnRlcmxlYXZlZCIsIlpnIiwiJGciLCJhaCIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsImJoIiwiY2giLCJldmVudFRpbWUiLCJsYW5lIiwicGF5bG9hZCIsImNhbGxiYWNrIiwiZGgiLCJLIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJpaCIsImpoIiwiQ29tcG9uZW50IiwicmVmcyIsImtoIiwibmgiLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbHMiLCJlbnF1ZXVlU2V0U3RhdGUiLCJMIiwibGgiLCJtaCIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJvaCIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwicGgiLCJzdGF0ZSIsInVwZGF0ZXIiLCJxaCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInJoIiwicHJvcHMiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsInNoIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsInRoIiwiam9pbiIsInVoIiwidmgiLCJpbmRleCIsIndoIiwieGgiLCJ5aCIsImltcGxlbWVudGF0aW9uIiwiemgiLCJBaCIsImRvbmUiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwidGFnTmFtZSIsIkpoIiwiS2giLCJMaCIsIk0iLCJNaCIsInJldmVhbE9yZGVyIiwiTmgiLCJPaCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwiUGgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUWgiLCJSaCIsIk4iLCJPIiwiUCIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiUSIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJiYXNlUXVldWUiLCJxdWV1ZSIsImRpIiwiZWkiLCJmaSIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJoYXNFYWdlclN0YXRlIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJnaSIsImhpIiwiaWkiLCJqaSIsImtpIiwiZ2V0U25hcHNob3QiLCJsaSIsIm1pIiwiUiIsIm5pIiwibGFzdEVmZmVjdCIsInN0b3JlcyIsIm9pIiwicGkiLCJxaSIsInJpIiwiY3JlYXRlIiwiZGVzdHJveSIsImRlcHMiLCJzaSIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJCaSIsIkNpIiwiRGkiLCJFaSIsIkZpIiwiR2kiLCJIaSIsIklpIiwiSmkiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VJbnNlcnRpb25FZmZlY3QiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlSWQiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJpZGVudGlmaWVyUHJlZml4IiwiS2kiLCJtZXNzYWdlIiwiZGlnZXN0IiwiTGkiLCJNaSIsImNvbnNvbGUiLCJlcnJvciIsIk5pIiwiV2Vha01hcCIsIk9pIiwiUGkiLCJRaSIsIlJpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJTaSIsImNvbXBvbmVudFN0YWNrIiwiVGkiLCJwaW5nQ2FjaGUiLCJVaSIsIlZpIiwiV2kiLCJYaSIsIlJlYWN0Q3VycmVudE93bmVyIiwiWWkiLCJaaSIsIiRpIiwiYWoiLCJiaiIsImNqIiwiZGoiLCJlaiIsImJhc2VMYW5lcyIsImNhY2hlUG9vbCIsInRyYW5zaXRpb25zIiwiZmoiLCJnaiIsImhqIiwiaWoiLCJqaiIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImtqIiwibGoiLCJwZW5kaW5nQ29udGV4dCIsIm1qIiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJuaiIsIm9qIiwicGoiLCJmYWxsYmFjayIsInFqIiwicmoiLCJ0aiIsImRhdGFzZXQiLCJkZ3N0IiwidWoiLCJ2aiIsIl9yZWFjdFJldHJ5Iiwic2oiLCJzdWJ0cmVlRmxhZ3MiLCJ3aiIsInhqIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxNb2RlIiwieWoiLCJFaiIsIlMiLCJGaiIsIkdqIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsIm9uQ2xpY2siLCJvbmNsaWNrIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsImF1dG9Gb2N1cyIsImNyZWF0ZVRleHROb2RlIiwiVCIsIkhqIiwiSWoiLCJKaiIsIktqIiwiVSIsIkxqIiwiV2Vha1NldCIsIlYiLCJNaiIsIlciLCJOaiIsIk9qIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJVaiIsIlZqIiwiV2oiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiWGoiLCJYIiwiWWoiLCJaaiIsImFrIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImJrIiwiY2siLCJkayIsImVrIiwiZmsiLCJpc0hpZGRlbiIsImdrIiwiaGsiLCJkaXNwbGF5IiwiaWsiLCJqayIsImtrIiwibGsiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsInNyYyIsIldrIiwibWsiLCJjZWlsIiwibmsiLCJvayIsInBrIiwiWSIsIloiLCJxayIsInJrIiwic2siLCJ0ayIsInVrIiwiSW5maW5pdHkiLCJ2ayIsIndrIiwieGsiLCJ5ayIsInprIiwiQWsiLCJCayIsIkNrIiwiRGsiLCJFayIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImV4cGlyZWRMYW5lcyIsIndjIiwiY2FsbGJhY2tQcmlvcml0eSIsImlnIiwiRmsiLCJHayIsIkhrIiwiSWsiLCJKayIsIktrIiwiTGsiLCJNayIsIk5rIiwiT2siLCJQayIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJRayIsInRpbWVvdXRIYW5kbGUiLCJSayIsIlNrIiwiVGsiLCJVayIsIlZrIiwibXV0YWJsZVJlYWRMYW5lcyIsIkJjIiwiUGoiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm1jIiwib25SZWNvdmVyYWJsZUVycm9yIiwiWGsiLCJvblBvc3RDb21taXRGaWJlclJvb3QiLCJZayIsIlprIiwiYWwiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiYmwiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwiY2wiLCJjYWNoZSIsInBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMiLCJlbCIsImZsIiwiZ2wiLCJobCIsImlsIiwiamwiLCJ6aiIsIiRrIiwibGwiLCJyZXBvcnRFcnJvciIsIm1sIiwiX2ludGVybmFsUm9vdCIsIm5sIiwib2wiLCJwbCIsInFsIiwic2wiLCJybCIsInVubW91bnQiLCJ1bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbiIsInNwbGljZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJKU09OIiwic3RyaW5naWZ5IiwiZm9ybSIsInRsIiwidXNpbmdDbGllbnRFbnRyeVBvaW50IiwiRXZlbnRzIiwidWwiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInZsIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0RXJyb3JIYW5kbGVyIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJyZWNvbmNpbGVyVmVyc2lvbiIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIndsIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJkbCIsImNyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9zdHJpY3RNb2RlIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJoeWRyYXRlIiwiaHlkcmF0ZVJvb3QiLCJoeWRyYXRlZFNvdXJjZXMiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwiZXJyIiwiZ2V0TW9kdWxlSWQiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImpzeCIsImpzeHMiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJkZWZhdWx0IiwiQ2hpbGRyZW4iLCJtYXAiLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiUHVyZUNvbXBvbmVudCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfZGVmYXVsdFZhbHVlIiwiX2dsb2JhbE5hbWUiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIm1lbW8iLCJzdGFydFRyYW5zaXRpb24iLCJ1bnN0YWJsZV9hY3QiLCJwb3AiLCJzb3J0SW5kZXgiLCJwZXJmb3JtYW5jZSIsInNldEltbWVkaWF0ZSIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsIm5hdmlnYXRvciIsInNjaGVkdWxpbmciLCJpc0lucHV0UGVuZGluZyIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImZsb29yIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIm9iakEiLCJvYmpCIiwiY29tcGFyZUNvbnRleHQiLCJyZXQiLCJrZXlzQSIsImtleXNCIiwiYkhhc093blByb3BlcnR5IiwiaWR4IiwidmFsdWVBIiwidmFsdWVCIiwiaW5zdCIsInVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yIiwiaGFzVmFsdWUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsIm9iaiIsIl9fcHJvdG9fXyIsIm5zIiwiZGVmIiwiZGVmaW5pdGlvbiIsIm8iLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwidG9TdHJpbmdUYWciLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiY3VycmVudFNjcmlwdCIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIm5jIiwiQWN0aW9uIiwiUG9wU3RhdGVFdmVudFR5cGUiLCJpbnZhcmlhbnQiLCJnZXRIaXN0b3J5U3RhdGUiLCJ1c3IiLCJjcmVhdGVMb2NhdGlvbiIsInRvIiwicGF0aG5hbWUiLCJoYXNoIiwicGFyc2VQYXRoIiwic3Vic3RyIiwiX3JlZiIsInBhdGgiLCJwYXJzZWRQYXRoIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJSZXN1bHRUeXBlIiwibWF0Y2hSb3V0ZXMiLCJyb3V0ZXMiLCJsb2NhdGlvbkFyZyIsImJhc2VuYW1lIiwic3RyaXBCYXNlbmFtZSIsImJyYW5jaGVzIiwiZmxhdHRlblJvdXRlcyIsInNvcnQiLCJzY29yZSIsInNpYmxpbmdzIiwiZXZlcnkiLCJjb21wYXJlSW5kZXhlcyIsInJvdXRlc01ldGEiLCJjaGlsZHJlbkluZGV4IiwicmFua1JvdXRlQnJhbmNoZXMiLCJtYXRjaGVzIiwibWF0Y2hSb3V0ZUJyYW5jaCIsInNhZmVseURlY29kZVVSSSIsInBhcmVudHNNZXRhIiwicGFyZW50UGF0aCIsImZsYXR0ZW5Sb3V0ZSIsInJvdXRlIiwicmVsYXRpdmVQYXRoIiwiY2FzZVNlbnNpdGl2ZSIsInN0YXJ0c1dpdGgiLCJjb21wdXRlU2NvcmUiLCJfcm91dGUkcGF0aCIsImV4cGxvZGVkIiwiZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMiLCJzZWdtZW50cyIsImZpcnN0IiwicmVzdCIsImlzT3B0aW9uYWwiLCJlbmRzV2l0aCIsInJlcXVpcmVkIiwicmVzdEV4cGxvZGVkIiwicmVzdWx0Iiwic3VicGF0aCIsInBhcmFtUmUiLCJkeW5hbWljU2VnbWVudFZhbHVlIiwiaW5kZXhSb3V0ZVZhbHVlIiwiZW1wdHlTZWdtZW50VmFsdWUiLCJzdGF0aWNTZWdtZW50VmFsdWUiLCJzcGxhdFBlbmFsdHkiLCJpc1NwbGF0IiwicyIsImluaXRpYWxTY29yZSIsInNvbWUiLCJmaWx0ZXIiLCJyZWR1Y2UiLCJzZWdtZW50IiwiYnJhbmNoIiwibWF0Y2hlZFBhcmFtcyIsIm1hdGNoZWRQYXRobmFtZSIsInJlbWFpbmluZ1BhdGhuYW1lIiwicGFyYW1zIiwicGF0aG5hbWVCYXNlIiwibm9ybWFsaXplUGF0aG5hbWUiLCJwYXR0ZXJuIiwibWF0Y2hlciIsInBhcmFtTmFtZXMiLCJ3YXJuaW5nIiwicmVnZXhwU291cmNlIiwiXyIsInBhcmFtTmFtZSIsIlJlZ0V4cCIsImNvbXBpbGVQYXRoIiwiY2FwdHVyZUdyb3VwcyIsInNwbGF0VmFsdWUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzYWZlbHlEZWNvZGVVUklDb21wb25lbnQiLCJkZWNvZGVVUkkiLCJzdGFydEluZGV4IiwibmV4dENoYXIiLCJjb25kIiwid2FybiIsImdldEludmFsaWRQYXRoRXJyb3IiLCJmaWVsZCIsImRlc3QiLCJnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyIsInJlc29sdmVUbyIsInRvQXJnIiwicm91dGVQYXRobmFtZXMiLCJsb2NhdGlvblBhdGhuYW1lIiwiaXNQYXRoUmVsYXRpdmUiLCJmcm9tIiwiaXNFbXB0eVBhdGgiLCJ0b1BhdGhuYW1lIiwicm91dGVQYXRobmFtZUluZGV4IiwidG9TZWdtZW50cyIsImZyb21QYXRobmFtZSIsInJlc29sdmVQYXRobmFtZSIsIm5vcm1hbGl6ZVNlYXJjaCIsIm5vcm1hbGl6ZUhhc2giLCJyZXNvbHZlUGF0aCIsImhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCIsImhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoIiwicGF0aHMiLCJ2YWxpZE11dGF0aW9uTWV0aG9kc0FyciIsInZhbGlkUmVxdWVzdE1ldGhvZHNBcnIiLCJEYXRhUm91dGVyQ29udGV4dCIsIkRhdGFSb3V0ZXJTdGF0ZUNvbnRleHQiLCJOYXZpZ2F0aW9uQ29udGV4dCIsIkxvY2F0aW9uQ29udGV4dCIsIlJvdXRlQ29udGV4dCIsIm91dGxldCIsIlJvdXRlRXJyb3JDb250ZXh0IiwidXNlSW5Sb3V0ZXJDb250ZXh0Iiwicm91dGVQYXRobmFtZXNKc29uIiwiYWN0aXZlUmVmIiwiZ28iLCJwYXJzZSIsInJlbGF0aXZlIiwiT3V0bGV0Q29udGV4dCIsInVzZVBhcmFtcyIsInJvdXRlTWF0Y2giLCJfdGVtcDIiLCJEZWZhdWx0RXJyb3JFbGVtZW50IiwiX3N0YXRlJGVycm9ycyIsImhvb2tOYW1lIiwidXNlRGF0YVJvdXRlclN0YXRlIiwiRGF0YVJvdXRlclN0YXRlSG9vayIsIlVzZVJvdXRlRXJyb3IiLCJyb3V0ZUlkIiwidXNlUm91dGVDb250ZXh0IiwidGhpc1JvdXRlIiwidXNlQ3VycmVudFJvdXRlSWQiLCJlcnJvcnMiLCJ1c2VSb3V0ZUVycm9yIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImludGVybmFsIiwiaXNSb3V0ZUVycm9yUmVzcG9uc2UiLCJwcmVTdHlsZXMiLCJwYWRkaW5nIiwiYmFja2dyb3VuZENvbG9yIiwiZm9udFN0eWxlIiwiUmVuZGVyRXJyb3JCb3VuZGFyeSIsInN1cGVyIiwic3RhdGljIiwiZXJyb3JJbmZvIiwicm91dGVDb250ZXh0IiwiUmVuZGVyZWRSb3V0ZSIsImRhdGFSb3V0ZXJDb250ZXh0Iiwic3RhdGljQ29udGV4dCIsImVycm9yRWxlbWVudCIsIl9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkIiwiRGF0YVJvdXRlckhvb2siLCJBd2FpdFJlbmRlclN0YXR1cyIsIk5hdmlnYXRlIiwiX3JlZjMiLCJkYXRhUm91dGVyU3RhdGUiLCJuYXZpZ2F0ZSIsIm5hdmlnYXRpb24iLCJPdXRsZXQiLCJ1c2VPdXRsZXQiLCJSb3V0ZSIsIl9wcm9wcyIsIl9yZWY0IiwiYmFzZW5hbWVQcm9wIiwibG9jYXRpb25Qcm9wIiwibmF2aWdhdGlvblR5cGUiLCJQb3AiLCJzdGF0aWNQcm9wIiwibmF2aWdhdGlvbkNvbnRleHQiLCJ0cmFpbGluZ1BhdGhuYW1lIiwiUm91dGVzIiwiX3JlZjUiLCJkYXRhUm91dGVyU3RhdGVDb250ZXh0IiwicGFyZW50TWF0Y2hlcyIsInBhcmVudFBhcmFtcyIsInBhcmVudFBhdGhuYW1lQmFzZSIsImxvY2F0aW9uRnJvbUNvbnRleHQiLCJfcGFyc2VkTG9jYXRpb25BcmckcGEiLCJwYXJzZWRMb2NhdGlvbkFyZyIsInJlbmRlcmVkTWF0Y2hlcyIsImVycm9ySW5kZXgiLCJmaW5kSW5kZXgiLCJyZWR1Y2VSaWdodCIsImdldENoaWxkcmVuIiwiX3JlbmRlck1hdGNoZXMiLCJlbmNvZGVMb2NhdGlvbiIsInVzZVJvdXRlcyIsInJvdXRlciIsImNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiIsIkF3YWl0RXJyb3JCb3VuZGFyeSIsInByb21pc2UiLCJyZW5kZXJFcnJvciIsInJlamVjdCIsIl90cmFja2VkIiwiX2Vycm9yIiwiX2RhdGEiLCJzdWNjZXNzIiwiQWJvcnRlZERlZmVycmVkRXJyb3IiLCJuZXZlclNldHRsZWRQcm9taXNlIiwiUmVhY3QiLCJBd2FpdENvbnRleHQiLCJ0cmVlUGF0aCIsImxvYWRlciIsImhhc0Vycm9yQm91bmRhcnkiLCJzaG91bGRSZXZhbGlkYXRlIiwiaGFuZGxlIiwiX2V4Y2x1ZGVkIiwiSGFzaFJvdXRlciIsIl9yZWYyIiwiaGlzdG9yeVJlZiIsInY1Q29tcGF0IiwiZ2V0TG9jYXRpb24iLCJjcmVhdGVIcmVmIiwidmFsaWRhdGVMb2NhdGlvbiIsImdsb2JhbEhpc3RvcnkiLCJoaXN0b3J5IiwiZ2V0SW5kZXgiLCJoYW5kbGVQb3AiLCJuZXh0SW5kZXgiLCJkZWx0YSIsImNyZWF0ZVVSTCIsIm9yaWdpbiIsIlVSTCIsInJlcGxhY2VTdGF0ZSIsImxpc3RlbiIsImZuIiwiUHVzaCIsImhpc3RvcnlTdGF0ZSIsInB1c2hTdGF0ZSIsIlJlcGxhY2UiLCJnZXRVcmxCYXNlZEhpc3RvcnkiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwid2FybmluZyQxIiwiTGluayIsImFic29sdXRlSHJlZiIsInJlbG9hZERvY3VtZW50IiwicHJldmVudFNjcm9sbFJlc2V0IiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiaXNFeHRlcm5hbCIsImN1cnJlbnRVcmwiLCJ0YXJnZXRVcmwiLCJwcm90b2NvbCIsIl90ZW1wIiwiam9pbmVkUGF0aG5hbWUiLCJ1c2VIcmVmIiwiaW50ZXJuYWxPbkNsaWNrIiwicmVwbGFjZVByb3AiLCJpc01vZGlmaWVkRXZlbnQiLCJzaG91bGRQcm9jZXNzTGlua0NsaWNrIiwidXNlTGlua0NsaWNrSGFuZGxlciIsImNoYXJDb2RlQXQiLCJwcmVmaXgiLCJ1c2UiLCJtc0dyaWRSb3ciLCJtc0dyaWRSb3dTcGFuIiwibXNHcmlkQ29sdW1uIiwibXNHcmlkQ29sdW1uU3BhbiIsIldlYmtpdExpbmVDbGFtcCIsImFyZyIsInJlYWN0UHJvcHNSZWdleCIsImZyZWV6ZSIsInN0eWxlZENvbXBvbmVudElkIiwicHJvY2VzcyIsImVudiIsIlJFQUNUX0FQUF9TQ19BVFRSIiwiU0NfQVRUUiIsIkJvb2xlYW4iLCJTQ19ESVNBQkxFX1NQRUVEWSIsIlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSIsImoiLCJncm91cFNpemVzIiwiVWludDMyQXJyYXkiLCJpbmRleE9mR3JvdXAiLCJpbnNlcnRSdWxlcyIsImluc2VydFJ1bGUiLCJjbGVhckdyb3VwIiwiZGVsZXRlUnVsZSIsImdldEdyb3VwIiwiZ2V0UnVsZSIsInJlZ2lzdGVyTmFtZSIsInBhcnNlSW50IiwiZ2V0VGFnIiwiaGVhZCIsImNoaWxkTm9kZXMiLCJoYXNBdHRyaWJ1dGUiLCIkIiwic2hlZXQiLCJzdHlsZVNoZWV0cyIsIm93bmVyTm9kZSIsImNzc1J1bGVzIiwiY3NzVGV4dCIsIm5vZGVzIiwicnVsZXMiLCJpc1NlcnZlciIsInVzZUNTU09NSW5qZWN0aW9uIiwiZ3MiLCJuYW1lcyIsInNlcnZlciIsInJlZ2lzdGVySWQiLCJyZWNvbnN0cnVjdFdpdGhPcHRpb25zIiwiYWxsb2NhdGVHU0luc3RhbmNlIiwiaGFzTmFtZUZvcklkIiwiY2xlYXJOYW1lcyIsImNsZWFyIiwiY2xlYXJSdWxlcyIsImNsZWFyVGFnIiwiYWJzIiwic3RhdGljUnVsZXNJZCIsImlzU3RhdGljIiwiY29tcG9uZW50SWQiLCJiYXNlSGFzaCIsImJhc2VTdHlsZSIsImdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzIiwicGx1Z2lucyIsImxhc3RJbmRleE9mIiwic3R5bGlzUGx1Z2lucyIsImRpc2FibGVDU1NPTUluamVjdGlvbiIsImRpc2FibGVWZW5kb3JQcmVmaXhlcyIsImdldE5hbWUiLCJfZSIsImlzQ3NzIiwidGhlbWUiLCJHZSIsImF0dHJzIiwicGFyZW50Q29tcG9uZW50SWQiLCJzaG91bGRGb3J3YXJkUHJvcCIsImNvbXBvbmVudFN0eWxlIiwiZm9sZGVkQ29tcG9uZW50SWRzIiwiJGFzIiwiYXMiLCJjbGFzc05hbWUiLCJ3aXRoQ29tcG9uZW50IiwiX2ZvbGRlZERlZmF1bHRQcm9wcyIsIndpdGhDb25maWciLCJjcmVhdGVTdHlsZXMiLCJyZW1vdmVTdHlsZXMiLCJyZW5kZXJTdHlsZXMiLCJfZW1pdFNoZWV0Q1NTIiwiZ2V0U3R5bGVUYWdzIiwic2VhbGVkIiwiZ2V0U3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZWFsIiwiY29sbGVjdFN0eWxlcyIsImludGVybGVhdmVXaXRoTm9kZVN0cmVhbSIsInN0eWxlZCIsIl90ZW1wbGF0ZU9iamVjdCIsImluZGVudCIsImluZGVudERlc2t0b3AiLCJpbmRlbnRUYWJsZXQiLCJpbmRlbnRNb2JpbGUiLCJQZXJtYW5lbnRNYXJrZXI0MDAiLCJjc3MiLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsIiwiZmZQZXJtYW5lbnRNYXJrZXIiLCJJbnRlcjUwMCIsIl90ZW1wbGF0ZU9iamVjdDIiLCJmZkludGVyIiwiX3RlbXBsYXRlT2JqZWN0MyIsIkludGVyOTAwIiwiX3RlbXBsYXRlT2JqZWN0NCIsIlRpdGxlIiwiX3RlbXBsYXRlT2JqZWN0NSIsImJ1dHRvblMiLCJfdGVtcGxhdGVPYmplY3Q2IiwiSGVhZGVyU3R5bGUiLCJjb2xvcldoaXRlIiwiSGVhZGVyQ29udGFpbmVyIiwiQ29udGFpbmVyIiwiTGlua0xvZ28iLCJMaW5rQ2FydCIsIl9qc3giLCJfanN4cyIsImJhc2tldCIsImFsdCIsIkZvb3RlclN0eWxlIiwiQ29udGFpbmVyRm9vdGVyIiwiX0ZyYWdtZW50IiwiSGVhZGVyIiwiRm9vdGVyIiwibm4iLCJybiIsIndyaXRhYmxlIiwiaXNGcm96ZW4iLCJ0biIsImVuIiwib24iLCJQcm94eSIsInJldm9jYWJsZSIsInJldm9rZSIsInByb3h5Iiwib3duS2V5cyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJOdW1iZXIiLCJkZWxldGVQcm9wZXJ0eSIsInNldFByb3RvdHlwZU9mIiwidW4iLCJwcm9kdWNlIiwicHJvZHVjZVdpdGhQYXRjaGVzIiwidXNlUHJveGllcyIsInNldFVzZVByb3hpZXMiLCJhdXRvRnJlZXplIiwic2V0QXV0b0ZyZWV6ZSIsImNyZWF0ZURyYWZ0IiwiZmluaXNoRHJhZnQiLCJhcHBseVBhdGNoZXMiLCJvcCIsImFuIiwiTk9UX0ZPVU5EIiwiZGVmYXVsdEVxdWFsaXR5Q2hlY2siLCJkZWZhdWx0TWVtb2l6ZSIsImZ1bmMiLCJlcXVhbGl0eUNoZWNrT3JPcHRpb25zIiwiZXF1YWxzIiwiZW50cnkiLCJwcm92aWRlZE9wdGlvbnMiLCJlcXVhbGl0eUNoZWNrIiwiX3Byb3ZpZGVkT3B0aW9ucyRlcXVhIiwiX3Byb3ZpZGVkT3B0aW9ucyRtYXhTIiwibWF4U2l6ZSIsInJlc3VsdEVxdWFsaXR5Q2hlY2siLCJjb21wYXJhdG9yIiwicHJldiIsImNyZWF0ZUNhY2hlS2V5Q29tcGFyYXRvciIsInB1dCIsImdldEVudHJpZXMiLCJlbnRyaWVzIiwiY2FjaGVJbmRleCIsImNyZWF0ZUxydUNhY2hlIiwibWVtb2l6ZWQiLCJtYXRjaGluZ0VudHJ5IiwiZmluZCIsImNsZWFyQ2FjaGUiLCJjcmVhdGVTZWxlY3RvckNyZWF0b3IiLCJtZW1vaXplIiwiX2xlbiIsIm1lbW9pemVPcHRpb25zRnJvbUFyZ3MiLCJfa2V5IiwiX2xlbjIiLCJmdW5jcyIsIl9rZXkyIiwiX2xhc3RSZXN1bHQiLCJfcmVjb21wdXRhdGlvbnMiLCJkaXJlY3RseVBhc3NlZE9wdGlvbnMiLCJtZW1vaXplT3B0aW9ucyIsInJlc3VsdEZ1bmMiLCJfZGlyZWN0bHlQYXNzZWRPcHRpb24yIiwiZmluYWxNZW1vaXplT3B0aW9ucyIsImRlcCIsImRlcGVuZGVuY3lUeXBlcyIsImdldERlcGVuZGVuY2llcyIsIm1lbW9pemVkUmVzdWx0RnVuYyIsInNlbGVjdG9yIiwibGFzdFJlc3VsdCIsInJlY29tcHV0YXRpb25zIiwicmVzZXRSZWNvbXB1dGF0aW9ucyIsImNyZWF0ZVNlbGVjdG9yIiwiX3R5cGVvZiIsIl9kZWZpbmVQcm9wZXJ0eSIsImhpbnQiLCJwcmltIiwidG9QcmltaXRpdmUiLCJyZXMiLCJUeXBlRXJyb3IiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsInN5bWJvbHMiLCJzeW0iLCJfb2JqZWN0U3ByZWFkMiIsImRlZmluZVByb3BlcnRpZXMiLCJmb3JtYXRQcm9kRXJyb3JNZXNzYWdlIiwiJCRvYnNlcnZhYmxlIiwib2JzZXJ2YWJsZSIsInJhbmRvbVN0cmluZyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImNyZWF0ZVN0b3JlIiwicmVkdWNlciIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJnZXRTdGF0ZSIsInN1YnNjcmliZSIsImlzU3Vic2NyaWJlZCIsInByb3RvIiwiaXNQbGFpbk9iamVjdCIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwidW5zdWJzY3JpYmUiLCJjb21wb3NlIiwiYXBwbHlNaWRkbGV3YXJlIiwibWlkZGxld2FyZXMiLCJzdG9yZSIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJjaGFpbiIsIm1pZGRsZXdhcmUiLCJjcmVhdGVUaHVua01pZGRsZXdhcmUiLCJleHRyYUFyZ3VtZW50IiwidGh1bmsiLCJ3aXRoRXh0cmFBcmd1bWVudCIsImV4dGVuZFN0YXRpY3MiLCJfX2V4dGVuZHMiLCJfXyIsIl9fZ2VuZXJhdG9yIiwidGhpc0FyZyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwic3RlcCIsIl9fc3ByZWFkQXJyYXkiLCJfX2RlZlByb3AiLCJfX2RlZlByb3BzIiwiX19nZXRPd25Qcm9wRGVzY3MiLCJfX2dldE93blByb3BTeW1ib2xzIiwiX19oYXNPd25Qcm9wIiwiX19wcm9wSXNFbnVtIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJfX2RlZk5vcm1hbFByb3AiLCJfX3NwcmVhZFZhbHVlcyIsIl9pIiwiX2MiLCJfX3NwcmVhZFByb3BzIiwiX19hc3luYyIsIl9fdGhpcyIsIl9fYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJ0aHJvdyIsImNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yIiwiYXJncyIsImNvbXBvc2VXaXRoRGV2VG9vbHMiLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18iLCJiYXNlUHJvdG8iLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fIiwiTWlkZGxld2FyZUFycmF5IiwiX3N1cGVyIiwiX3RoaXMiLCJzcGVjaWVzIiwiYXJyIiwicHJlcGVuZCIsIkVuaGFuY2VyQXJyYXkiLCJmcmVlemVEcmFmdGFibGUiLCJ2YWwiLCJjcmVhdGVBY3Rpb24iLCJwcmVwYXJlQWN0aW9uIiwiYWN0aW9uQ3JlYXRvciIsInByZXBhcmVkIiwiaXNWYWxpZEtleSIsImV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrIiwiYnVpbGRlckNhbGxiYWNrIiwiZGVmYXVsdENhc2VSZWR1Y2VyIiwiYWN0aW9uc01hcCIsImFjdGlvbk1hdGNoZXJzIiwiYnVpbGRlciIsImFkZENhc2UiLCJ0eXBlT3JBY3Rpb25DcmVhdG9yIiwiYWRkTWF0Y2hlciIsImFkZERlZmF1bHRDYXNlIiwiY3JlYXRlU2xpY2UiLCJfcmVkdWNlciIsImluaXRpYWxTdGF0ZSIsInJlZHVjZXJzIiwicmVkdWNlck5hbWVzIiwic2xpY2VDYXNlUmVkdWNlcnNCeU5hbWUiLCJzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSIsImFjdGlvbkNyZWF0b3JzIiwiYnVpbGRSZWR1Y2VyIiwiZXh0cmFSZWR1Y2VycyIsIl9kIiwiX2YiLCJmaW5hbENhc2VSZWR1Y2VycyIsIm1hcE9yQnVpbGRlckNhbGxiYWNrIiwiZ2V0SW5pdGlhbFN0YXRlIiwiZmluYWxBY3Rpb25NYXRjaGVycyIsImZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyIiwiaXNTdGF0ZUZ1bmN0aW9uIiwiZnJvemVuSW5pdGlhbFN0YXRlXzEiLCJjYXNlUmVkdWNlcnMiLCJjciIsInByZXZpb3VzU3RhdGUiLCJjYXNlUmVkdWNlciIsImRyYWZ0IiwiY3JlYXRlUmVkdWNlciIsImFjdGlvbk1hdGNoZXJzXzEiLCJyZWR1Y2VyTmFtZSIsInByZXBhcmVDYWxsYmFjayIsIm1heWJlUmVkdWNlcldpdGhQcmVwYXJlIiwicHJlcGFyZSIsImFjdGlvbnMiLCJjcmVhdGVTdGF0ZU9wZXJhdG9yIiwibXV0YXRvciIsImlzUGF5bG9hZEFjdGlvbkFyZ3VtZW50IiwiYXJnMiIsImlzQWN0aW9uIiwicnVuTXV0YXRvciIsInNlbGVjdElkVmFsdWUiLCJlbnRpdHkiLCJzZWxlY3RJZCIsImVuc3VyZUVudGl0aWVzQXJyYXkiLCJlbnRpdGllcyIsInZhbHVlcyIsInNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMiLCJuZXdFbnRpdGllcyIsImFkZGVkIiwidXBkYXRlZCIsIm5ld0VudGl0aWVzXzEiLCJjaGFuZ2VzIiwiY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIiLCJhZGRPbmVNdXRhYmx5IiwiaWRzIiwiYWRkTWFueU11dGFibHkiLCJuZXdFbnRpdGllc18yIiwic2V0T25lTXV0YWJseSIsInJlbW92ZU1hbnlNdXRhYmx5IiwiZGlkTXV0YXRlIiwidXBkYXRlTWFueU11dGFibHkiLCJ1cGRhdGVzIiwibmV3S2V5cyIsInVwZGF0ZXNQZXJFbnRpdHkiLCJ1cGRhdGUiLCJkaWRNdXRhdGVJZHMiLCJvcmlnaW5hbDIiLCJuZXdLZXkiLCJoYXNOZXdLZXkiLCJ0YWtlTmV3S2V5IiwidXBzZXJ0TWFueU11dGFibHkiLCJyZW1vdmVBbGwiLCJvcGVyYXRvciIsImFkZE9uZSIsImFkZE1hbnkiLCJzZXRPbmUiLCJzZXRNYW55IiwibmV3RW50aXRpZXNfMyIsInNldEFsbCIsInVwZGF0ZU9uZSIsInVwZGF0ZU1hbnkiLCJ1cHNlcnRPbmUiLCJ1cHNlcnRNYW55IiwicmVtb3ZlT25lIiwicmVtb3ZlTWFueSIsImNyZWF0ZUVudGl0eUFkYXB0ZXIiLCJzb3J0Q29tcGFyZXIiLCJzdGF0ZUZhY3RvcnkiLCJhZGRpdGlvbmFsU3RhdGUiLCJzZWxlY3RvcnNGYWN0b3J5IiwiZ2V0U2VsZWN0b3JzIiwic2VsZWN0U3RhdGUiLCJzZWxlY3RJZHMiLCJzZWxlY3RFbnRpdGllcyIsInNlbGVjdEFsbCIsInNlbGVjdEJ5SWQiLCJzZWxlY3RUb3RhbCIsInNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyIsInN0YXRlQWRhcHRlciIsIm1vZGVscyIsIm1vZGVsIiwibWVyZ2UiLCJzZXRNYW55TXV0YWJseSIsImFwcGxpZWRVcGRhdGVzIiwidXBkYXRlc18xIiwibmV3SWQiLCJyZXNvcnRFbnRpdGllcyIsImFsbEVudGl0aWVzIiwibmV3U29ydGVkSWRzIiwiYXJlQXJyYXlzRXF1YWwiLCJjcmVhdGVTb3J0ZWRTdGF0ZUFkYXB0ZXIiLCJuYW5vaWQiLCJjb21tb25Qcm9wZXJ0aWVzIiwiUmVqZWN0V2l0aFZhbHVlIiwiRnVsZmlsbFdpdGhNZXRhIiwibWluaVNlcmlhbGl6ZUVycm9yIiwic2ltcGxlRXJyb3IiLCJjb21tb25Qcm9wZXJ0aWVzXzEiLCJwcm9wZXJ0eSIsImNyZWF0ZUFzeW5jVGh1bmsiLCJjcmVhdGVBc3luY1RodW5rMiIsInR5cGVQcmVmaXgiLCJwYXlsb2FkQ3JlYXRvciIsInJlcXVlc3RJZCIsInJlcXVlc3RTdGF0dXMiLCJzZXJpYWxpemVFcnJvciIsInJlamVjdGVkV2l0aFZhbHVlIiwiYWJvcnRlZCIsImNvbmRpdGlvbiIsIkFDIiwiQWJvcnRDb250cm9sbGVyIiwiY2xhc3NfMSIsInNpZ25hbCIsIm9uYWJvcnQiLCJyZWFzb24iLCJ0aHJvd0lmQWJvcnRlZCIsImFib3J0IiwiZXh0cmEiLCJhYm9ydFJlYXNvbiIsImlkR2VuZXJhdG9yIiwiYWJvcnRDb250cm9sbGVyIiwicHJvbWlzZTIiLCJfYSIsIl9iIiwiZmluYWxBY3Rpb24iLCJjb25kaXRpb25SZXN1bHQiLCJhYm9ydGVkUHJvbWlzZSIsImVycl8xIiwiZ2V0UGVuZGluZ01ldGEiLCJyYWNlIiwicmVqZWN0V2l0aFZhbHVlIiwiZnVsZmlsbFdpdGhWYWx1ZSIsImRpc3BhdGNoQ29uZGl0aW9uUmVqZWN0aW9uIiwidW53cmFwIiwidW53cmFwUmVzdWx0Iiwid2l0aFR5cGVzIiwiYWxtIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsIk9wIiwiaGFzT3duIiwiZGVzYyIsIiRTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJkZWZpbmUiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJzZWxmIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJDb250aW51ZVNlbnRpbmVsIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIm1ldGhvZCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZWNvcmQiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJtZXRob2ROYW1lIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiZG9uZVJlc3VsdCIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiYXN5bmMiLCJpdGVyIiwicmV2ZXJzZSIsInNraXBUZW1wUmVzZXQiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJfbmV4dCIsIl90aHJvdyIsIl9hc3luY1RvR2VuZXJhdG9yIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYmVlcnNBZGFwdGVyIiwib25lQmVlclN0YXR1cyIsImZldGNoT25lQmVlcnMiLCJfY2FsbGVlIiwicmVzcG9uc2UiLCJmZXRjaCIsImpzb24iLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiaXNDYXJ0IiwiX3giLCJmZXRjaEJlZXJzIiwiX2NhbGxlZTIiLCJjdXJyZW50UGFnZSIsImFkZE1hcmtldENhcnQiLCJfY29udGV4dDIiLCJiZWVycyIsImlkQmVlciIsIl94MiIsImJlZXJzU2xpY2UiLCJhZGRUb0Jhc2tldCIsInJlbW92ZUZyb21CYXNrZXQiLCJkZWxldGluZ0FsbEZyb21UaGVCYXNrZXQiLCJhZGRDdXJyZW50UGFnZSIsImFkZFRvQmFza2V0T25lQmVlciIsIm9uZUJlZXIiLCJyZW1vdmVGcm9tQmFza2V0T25lQmVlciIsIl9vYmplY3RTcHJlYWQiLCJfYmVlcnNTbGljZSRhY3Rpb25zIiwiYWRkT25lQmVlciIsIl9iZWVyc0FkYXB0ZXIkZ2V0U2VsZSIsInNlbGVjdEJlZXJCeUlkIiwiX3JlZiR0ZXh0IiwiX3JlZiRzaXplIiwiaGVhZGVyIiwiYmF0Y2giLCJnZXRCYXRjaCIsInJlZkVxdWFsaXR5IiwiY3JlYXRlU2VsZWN0b3JIb29rIiwidXNlUmVkdXhDb250ZXh0IiwiZXF1YWxpdHlGbiIsInN1YnNjcmlwdGlvbiIsImdldFNlcnZlclN0YXRlIiwic2VsZWN0ZWRTdGF0ZSIsImFkZE5lc3RlZFN1YiIsInVzZVNlbGVjdG9yIiwibnVsbExpc3RlbmVycyIsIm5vdGlmeSIsInNlcnZlclN0YXRlIiwiY29udGV4dFZhbHVlIiwicGFyZW50U3ViIiwiaGFuZGxlQ2hhbmdlV3JhcHBlciIsIm9uU3RhdGVDaGFuZ2UiLCJ0cnlTdWJzY3JpYmUiLCJjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24iLCJub3RpZnlOZXN0ZWRTdWJzIiwidHJ5VW5zdWJzY3JpYmUiLCJnZXRMaXN0ZW5lcnMiLCJjcmVhdGVTdG9yZUhvb2siLCJjcmVhdGVEaXNwYXRjaEhvb2siLCJ1c2VTdG9yZSIsInVzZURpc3BhdGNoIiwibmV3QmF0Y2giLCJpbml0aWFsaXplVXNlU2VsZWN0b3IiLCJpbml0aWFsaXplQ29ubmVjdCIsImJhc2tldEFkYXB0ZXIiLCJiYXNrZXRTbGljZSIsImFkZFByb2R1Y3RzIiwicmVtb3ZlUHJvZHVjdCIsImRlY3JlbWVudEJlZXJzIiwicXVhbnRpdHkiLCJpbmNyZW1lbnRCZWVycyIsInVwZGF0ZVByaWNlIiwicHJpY2UiLCJjbGVhckJhc2tldCIsIl9iYXNrZXRTbGljZSRhY3Rpb25zIiwiX2Jhc2tldEFkYXB0ZXIkZ2V0U2VsIiwic2VsZWN0QWxsQmVlcnNCYXNrZXQiLCJzZWxlY3RCZWVyQmFza2V0QnlJZCIsInNlbGVjdEJlZXJCYXNrZXRJZHMiLCJCdXR0b25BY3RpdmVTdHlsZSIsIkJ1dHRvblN0eWxlIiwiQnV0dG9uQWN0aXZlIiwiYmVlcklkIiwiY2xhc3NCIiwicmVtb3ZlSXRlbSIsIkJ1dHRvbiIsImJlZXIiLCJzZXRJdGVtIiwiaWJ1IiwiTGlua0JlZXIiLCJjb2xvckFjdGl2ZUxpbmsiLCJJbWdTdHlsZSIsIkJlZXJUaXRsZSIsIkJlZXJBbGMiLCJjb2xvckJsYWNrIiwiQmVlclByaWNlIiwiaW1hZ2VfdXJsIiwiYWJ2IiwiQmVlcnNTZWN0aW9uU3R5bGUiLCJCZWVyc0NvbnRhaW5lciIsIkJlZXJzTGlzdFN0eWxlIiwiQmVlckl0ZW1TdHlsZSIsImNvbnRlbnQiLCJTcGlubmVyIiwiYmVlcnNJZHMiLCJDYXJkQmVlciIsIml0ZW1TdHlsZSIsIlBhZ2luYXRpb25Db250YWluZXIiLCJMaXN0IiwiTGlua0FjdGl2ZVBhZyIsIkxpbmtQYWciLCJvbmhhbmRsZXIiLCJudW1iZXJQYWdlcyIsInNlbGVjdCIsImluaXRGdW5jIiwiZGVwZW5kcyIsImJhY2tGb3J3YXJkIiwidXNlSW5pdCIsIkJlZXJzTGlzdCIsIlBhZ2luYXRpb24iLCJQYWdlQmVlclN0eWxlIiwiUGFnZUJlZXJDb250YWluZXIiLCJQYWdlQmVlckltZyIsIlBhZ2VCZWVyVGl0bGUiLCJQYWdlQmVlclRleHQiLCJQYWdlQmVlclN1YnR1dGxlIiwiUGFnZUJlZXJMaXN0SW5ncmVkaWVudHMiLCJfdGVtcGxhdGVPYmplY3Q3IiwiZmlyc3RfYnJld2VkIiwiZGVzY3JpcHRpb24iLCJpbmdyZWRpZW50cyIsIm1hbHQiLCJob3BzIiwieWVhc3QiLCJhY3RpdmVVcmwiLCJfZmV0Y2hEYXRhIiwiZmV0Y2hEYXRhIiwiQmVlciIsIkNhcmRCZWVySXRlbSIsIkNhcmRCZWVySW1nIiwiQ2FyZEJlZXJUaXRsZSIsIkNhcmRCZWVyQWxjIiwiQ2FyZEJlZXJQcmljZSIsIkNhcmRCZWVyV3BhckNvdW50IiwiQ2FyZEJlZXJUaXRsZUNvdW50IiwiQ2FyZEJlZXJXcGFyQnV0dG9ucyIsIl90ZW1wbGF0ZU9iamVjdDgiLCJDYXJkQmVlckJ1dHRvbiIsIl90ZW1wbGF0ZU9iamVjdDkiLCJDYXJkQmVlckRlbGV0ZSIsIl90ZW1wbGF0ZU9iamVjdDEwIiwiY2xvc2UiLCJoYW5kbGVyIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5Iiwic2V0UXVhbnRpdHkiLCJ1cGRhdGVRdWFudGl0eUxvY2FsU3RvcmFnZSIsIkJhc2tldFN0eWxlIiwiQmFza2V0Q29udGFpbmVyIiwiQmFza2V0VG90YWwiLCJCYXNrZXRMaXN0U3R5bGUiLCJXcmFwQnV0dG9ucyIsIkJ1dHRvbkNsZWFyIiwiTGlua0Zvcm0iLCJiZWVyc1N0b3JlIiwic2V0Q291bnQiLCJiZWVyc0Jhc2tldCIsIkNhcmRCZWVyQmFza2V0IiwiU3R5bGVWYWxpZGF0aW9uIiwiV3JhcElucHV0IiwiSW5wdXRTdHlsZSIsIklucHV0TmFtZSIsInNldE5hbWUiLCJfdXNlU3RhdGU0IiwiY2xhc3NJbnB1dCIsInNldENsYXNzSW5wdXQiLCJodG1sRm9yIiwicGxhY2Vob2xkZXIiLCJvbkNoYW5nZSIsIm9uQmx1ciIsIklucHV0TWFpbCIsIl91c2VTdGF0ZTYiLCJtYWlsIiwic2V0TWFpbCIsIl91c2VTdGF0ZTgiLCJJbnB1dFRlbCIsIl91c2VTdGF0ZTEwIiwic2V0VGVsIiwiX3VzZVN0YXRlMTIiLCJJbnB1dENvbnRyeSIsIl91c2VTdGF0ZTE0IiwiY291bnRyeSIsInNldENvdW50cnkiLCJfdXNlU3RhdGUxNiIsIklucHV0Q2l0eSIsIl91c2VTdGF0ZTE4IiwiY2l0eSIsInNldENpdHkiLCJfdXNlU3RhdGUyMCIsIklucHV0U3RyZWV0IiwiX3VzZVN0YXRlMjIiLCJzdHJlZXQiLCJzZXRTdHJlZXQiLCJfdXNlU3RhdGUyNCIsIklucHV0SG91c2UiLCJfdXNlU3RhdGUyNiIsImhvdXNlIiwic2V0SG91c2UiLCJfdXNlU3RhdGUyOCIsIklucHV0QXBhcnRtZW50IiwiX3VzZVN0YXRlMzAiLCJhcGFydG1lbnQiLCJzZXRBcGFydG1lbnQiLCJfdXNlU3RhdGUzMiIsInN0eWxlSXRlbSIsIkZvcm1TdHlsZSIsIkZvcm1Db250YWluZXIiLCJGb3JtRmllbGRzZXQiLCJGb3JtTGVnZW5kIiwiRm9ybVRleHRhcmVhIiwiRm9ybUxpc3RCZWVycyIsIkZvcm1XcmFwVGl0bGUiLCJGb3JtSXRlbSIsIkZvcm1XcmFwUHJpY2UiLCJGb3JtV3JhcENoZWNrYm94IiwiX3RlbXBsYXRlT2JqZWN0MTEiLCJGb3JtQnV0dG9uIiwiX3RlbXBsYXRlT2JqZWN0MTIiLCJ0b3RhbCIsImNvbHMiLCJyb3dzIiwiR2xvYmFsU3R5bGVzIiwiY3JlYXRlR2xvYmFsU3R5bGUiLCJHbG9iYWxGb250cyIsIlBlcm1hbmVudE1hcmtlcldvZmYyIiwiUGVybWFuZW50TWFya2VyV29mZiIsIkludGVyUmVndWxhcldvZmYyIiwiSW50ZXJSZWd1bGFyV29mZiIsIkludGVyTWVkaXVtV29mZjIiLCJJbnRlck1lZGl1bVdvZmYiLCJJbnRlckJsYWNrV29mZjIiLCJJbnRlckJsYWNrV29mZiIsIkFwcCIsInBhZ2VOdW1iZXIiLCJMYXlvdXQiLCJNYWluIiwiT25lQmVlciIsIkJhc2tldCIsIkZvcm0iLCJyb290UmVkdWNlciIsImN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVBcnJheSIsImltbXV0YWJsZUNoZWNrIiwic2VyaWFsaXphYmxlQ2hlY2siLCJpc0Jvb2xlYW4iLCJnZXREZWZhdWx0TWlkZGxld2FyZSIsImRldlRvb2xzIiwiX2ciLCJfaCIsImVuaGFuY2VycyIsInJlZHVjZXJLZXlzIiwiZmluYWxSZWR1Y2VycyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJmaW5hbFJlZHVjZXJLZXlzIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwiaGFzQ2hhbmdlZCIsIm5leHRTdGF0ZSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJjb21iaW5lUmVkdWNlcnMiLCJmaW5hbE1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlRW5oYW5jZXIiLCJmaW5hbENvbXBvc2UiLCJ0cmFjZSIsImRlZmF1bHRFbmhhbmNlcnMiLCJzdG9yZUVuaGFuY2VycyIsImJlZXJzUmVkdWNlciIsImJhc2tldFJlZHVjZXIiLCJyb290RWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwiVGhlbWVQcm92aWRlciJdLCJzb3VyY2VSb290IjoiIn0=