/*! For license information please see main.js.LICENSE.txt */
!function(){var e,t,n={679:function(e,t,n){"use strict";var r=n(296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=s(n);f&&(i=i.concat(f(n)));for(var l=u(t),m=u(n),v=0;v<i.length;++v){var y=i[v];if(!(a[y]||r&&r[y]||m&&m[y]||l&&l[y])){var g=d(n,y);try{c(t,y,g)}catch(e){}}}}return t}},103:function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case c:case d:case v:case m:case u:return e;default:return t}}case o:return t}}}function S(e){return x(e)===f}t.AsyncMode=s,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=a,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return S(e)||x(e)===s},t.isConcurrentMode=S,t.isContextConsumer=function(e){return x(e)===c},t.isContextProvider=function(e){return x(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return x(e)===d},t.isFragment=function(e){return x(e)===a},t.isLazy=function(e){return x(e)===v},t.isMemo=function(e){return x(e)===m},t.isPortal=function(e){return x(e)===o},t.isProfiler=function(e){return x(e)===l},t.isStrictMode=function(e){return x(e)===i},t.isSuspense=function(e){return x(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===u||e.$$typeof===c||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=x},296:function(e,t,n){"use strict";e.exports=n(103)},954:function(e,t,n){var r=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,i=/^0o[0-7]+$/i,l=parseInt,u="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,c="object"==typeof self&&self&&self.Object===Object&&self,s=u||c||Function("return this")(),f=Object.prototype.toString,d=Math.max,p=Math.min,h=function(){return s.Date.now()};function m(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function v(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==f.call(e)}(e))return NaN;if(m(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=m(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(r,"");var n=a.test(e);return n||i.test(e)?l(e.slice(2),n?2:8):o.test(e)?NaN:+e}e.exports=function(e,t,n){var r,o,a,i,l,u,c=0,s=!1,f=!1,y=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function g(t){var n=r,a=o;return r=o=void 0,c=t,i=e.apply(a,n)}function b(e){var n=e-u;return void 0===u||n>=t||n<0||f&&e-c>=a}function w(){var e=h();if(b(e))return x(e);l=setTimeout(w,function(e){var n=t-(e-u);return f?p(n,a-(e-c)):n}(e))}function x(e){return l=void 0,y&&r?g(e):(r=o=void 0,i)}function S(){var e=h(),n=b(e);if(r=arguments,o=this,u=e,n){if(void 0===l)return function(e){return c=e,l=setTimeout(w,t),s?g(e):i}(u);if(f)return l=setTimeout(w,t),g(u)}return void 0===l&&(l=setTimeout(w,t)),i}return t=v(t)||0,m(n)&&(s=!!n.leading,a=(f="maxWait"in n)?d(v(n.maxWait)||0,t):a,y="trailing"in n?!!n.trailing:y),S.cancel=function(){void 0!==l&&clearTimeout(l),c=0,r=u=o=l=void 0},S.flush=function(){return void 0===l?i:x(h())},S}},448:function(e,t,n){"use strict";var r=n(294),o=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var s=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=Symbol.for("react.element"),S=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),j=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),O=Symbol.for("react.provider"),C=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),_=Symbol.for("react.suspense"),L=Symbol.for("react.suspense_list"),N=Symbol.for("react.memo"),z=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var I=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var T=Symbol.iterator;function A(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=T&&e[T]||e["@@iterator"])?e:null}var R,F=Object.assign;function M(e){if(void 0===R)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);R=t&&t[1]||""}return"\n"+R+e}var D=!1;function $(e,t){if(!e||D)return"";D=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l]){var u="\n"+o[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=l);break}}}finally{D=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?M(e):""}function B(e){switch(e.tag){case 5:return M(e.type);case 16:return M("Lazy");case 13:return M("Suspense");case 19:return M("SuspenseList");case 0:case 2:case 15:return $(e.type,!1);case 11:return $(e.type.render,!1);case 1:return $(e.type,!0);default:return""}}function U(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case S:return"Portal";case E:return"Profiler";case j:return"StrictMode";case _:return"Suspense";case L:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case C:return(e.displayName||"Context")+".Consumer";case O:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case N:return null!==(t=e.displayName||null)?t:U(e.type)||"Memo";case z:t=e._payload,e=e._init;try{return U(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return U(t);case 8:return t===j?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Y(e,t){var n=t.checked;return F({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function K(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){X(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return F({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function ae(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,se,fe=(se=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return se(e,t)}))}:se);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ye=F({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,ke=null,je=null;function Ee(e){if(e=wo(e)){if("function"!=typeof Se)throw Error(a(280));var t=e.stateNode;t&&(t=So(t),Se(e.stateNode,e.type,t))}}function Oe(e){ke?je?je.push(e):je=[e]:ke=e}function Ce(){if(ke){var e=ke,t=je;if(je=ke=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function Pe(e,t){return e(t)}function _e(){}var Le=!1;function Ne(e,t,n){if(Le)return e(t,n);Le=!0;try{return Pe(e,t,n)}finally{Le=!1,(null!==ke||null!==je)&&(_e(),Ce())}}function ze(e,t){var n=e.stateNode;if(null===n)return null;var r=So(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Ie=!1;if(s)try{var Te={};Object.defineProperty(Te,"passive",{get:function(){Ie=!0}}),window.addEventListener("test",Te,Te),window.removeEventListener("test",Te,Te)}catch(se){Ie=!1}function Ae(e,t,n,r,o,a,i,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Re=!1,Fe=null,Me=!1,De=null,$e={onError:function(e){Re=!0,Fe=e}};function Be(e,t,n,r,o,a,i,l,u){Re=!1,Fe=null,Ae.apply($e,arguments)}function Ue(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ve(e){if(Ue(e)!==e)throw Error(a(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ue(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ve(o),e;if(i===r)return Ve(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?Ge(e):null}function Ge(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ge(e);if(null!==t)return t;e=e.sibling}return null}var qe=o.unstable_scheduleCallback,Qe=o.unstable_cancelCallback,Ye=o.unstable_shouldYield,Ke=o.unstable_requestPaint,Xe=o.unstable_now,Je=o.unstable_getCurrentPriorityLevel,Ze=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,ct=64,st=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~o;0!==l?r=ft(l):0!=(a&=i)&&(r=ft(a))}else 0!=(i=n&~o)?r=ft(i):0!==a&&(r=ft(a));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&0!=(4194240&a)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-it(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ct;return 0==(4194240&(ct<<=1))&&(ct=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var xt,St,kt,jt,Et,Ot=!1,Ct=[],Pt=null,_t=null,Lt=null,Nt=new Map,zt=new Map,It=[],Tt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function At(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":_t=null;break;case"mouseover":case"mouseout":Lt=null;break;case"pointerover":case"pointerout":Nt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":zt.delete(t.pointerId)}}function Rt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&St(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Ft(e){var t=bo(e.target);if(null!==t){var n=Ue(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void Et(e.priority,(function(){kt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Yt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&St(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Dt(e,t,n){Mt(e)&&n.delete(t)}function $t(){Ot=!1,null!==Pt&&Mt(Pt)&&(Pt=null),null!==_t&&Mt(_t)&&(_t=null),null!==Lt&&Mt(Lt)&&(Lt=null),Nt.forEach(Dt),zt.forEach(Dt)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,Ot||(Ot=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,$t)))}function Ut(e){function t(t){return Bt(t,e)}if(0<Ct.length){Bt(Ct[0],e);for(var n=1;n<Ct.length;n++){var r=Ct[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Pt&&Bt(Pt,e),null!==_t&&Bt(_t,e),null!==Lt&&Bt(Lt,e),Nt.forEach(t),zt.forEach(t),n=0;n<It.length;n++)(r=It[n]).blockedOn===e&&(r.blockedOn=null);for(;0<It.length&&null===(n=It[0]).blockedOn;)Ft(n),null===n.blockedOn&&It.shift()}var Wt=w.ReactCurrentBatchConfig,Vt=!0;function Ht(e,t,n,r){var o=bt,a=Wt.transition;Wt.transition=null;try{bt=1,qt(e,t,n,r)}finally{bt=o,Wt.transition=a}}function Gt(e,t,n,r){var o=bt,a=Wt.transition;Wt.transition=null;try{bt=4,qt(e,t,n,r)}finally{bt=o,Wt.transition=a}}function qt(e,t,n,r){if(Vt){var o=Yt(e,t,n,r);if(null===o)Vr(e,t,r,Qt,n),At(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Pt=Rt(Pt,e,t,n,r,o),!0;case"dragenter":return _t=Rt(_t,e,t,n,r,o),!0;case"mouseover":return Lt=Rt(Lt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return Nt.set(a,Rt(Nt.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,zt.set(a,Rt(zt.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(At(e,r),4&t&&-1<Tt.indexOf(e)){for(;null!==o;){var a=wo(o);if(null!==a&&xt(a),null===(a=Yt(e,t,n,r))&&Vr(e,t,r,Qt,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Vr(e,t,r,null,n)}}var Qt=null;function Yt(e,t,n,r){if(Qt=null,null!==(e=bo(e=xe(r))))if(null===(t=Ue(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Qt=e,null}function Kt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Jt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Jt,r=n.length,o="value"in Xt?Xt.value:Xt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Zt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return F(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,un,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},sn=on(cn),fn=F({},cn,{view:0,detail:0}),dn=on(fn),pn=F({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(an=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=an=0,un=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=on(pn),mn=on(F({},pn,{dataTransfer:0})),vn=on(F({},fn,{relatedTarget:0})),yn=on(F({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=F({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(gn),wn=on(F({},cn,{data:0})),xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function jn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function En(){return jn}var On=F({},fn,{key:function(e){if(e.key){var t=xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Cn=on(On),Pn=on(F({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),_n=on(F({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Ln=on(F({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=F({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),zn=on(Nn),In=[9,13,27,32],Tn=s&&"CompositionEvent"in window,An=null;s&&"documentMode"in document&&(An=document.documentMode);var Rn=s&&"TextEvent"in window&&!An,Fn=s&&(!Tn||An&&8<An&&11>=An),Mn=String.fromCharCode(32),Dn=!1;function $n(e,t){switch(e){case"keyup":return-1!==In.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Hn(e,t,n,r){Oe(r),0<(t=Gr(t,"onChange")).length&&(n=new sn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Gn=null,qn=null;function Qn(e){Mr(e,0)}function Yn(e){if(q(xo(e)))return e}function Kn(e,t){if("change"===e)return t}var Xn=!1;if(s){var Jn;if(s){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Jn=Zn}else Jn=!1;Xn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){Gn&&(Gn.detachEvent("onpropertychange",nr),qn=Gn=null)}function nr(e){if("value"===e.propertyName&&Yn(qn)){var t=[];Hn(t,qn,e,xe(e)),Ne(Qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),qn=n,(Gn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(qn)}function ar(e,t){if("click"===e)return Yn(t)}function ir(e,t){if("input"===e||"change"===e)return Yn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=sr(n,a);var i=sr(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=s&&"documentMode"in document&&11>=document.documentMode,vr=null,yr=null,gr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==Q(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&ur(gr,r)||(gr=r,0<(r=Gr(yr,"onSelect")).length&&(t=new sn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function xr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Sr={animationend:xr("Animation","AnimationEnd"),animationiteration:xr("Animation","AnimationIteration"),animationstart:xr("Animation","AnimationStart"),transitionend:xr("Transition","TransitionEnd")},kr={},jr={};function Er(e){if(kr[e])return kr[e];if(!Sr[e])return e;var t,n=Sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in jr)return kr[e]=n[t];return e}s&&(jr=document.createElement("div").style,"AnimationEvent"in window||(delete Sr.animationend.animation,delete Sr.animationiteration.animation,delete Sr.animationstart.animation),"TransitionEvent"in window||delete Sr.transitionend.transition);var Or=Er("animationend"),Cr=Er("animationiteration"),Pr=Er("animationstart"),_r=Er("transitionend"),Lr=new Map,Nr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function zr(e,t){Lr.set(e,t),u(t,[e])}for(var Ir=0;Ir<Nr.length;Ir++){var Tr=Nr[Ir];zr(Tr.toLowerCase(),"on"+(Tr[0].toUpperCase()+Tr.slice(1)))}zr(Or,"onAnimationEnd"),zr(Cr,"onAnimationIteration"),zr(Pr,"onAnimationStart"),zr("dblclick","onDoubleClick"),zr("focusin","onFocus"),zr("focusout","onBlur"),zr(_r,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ar="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Rr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ar));function Fr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,u,c){if(Be.apply(this,arguments),Re){if(!Re)throw Error(a(198));var s=Fe;Re=!1,Fe=null,Me||(Me=!0,De=s)}}(r,t,void 0,e),e.currentTarget=null}function Mr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,c=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;Fr(o,l,c),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,c=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;Fr(o,l,c),a=u}}}if(Me)throw e=De,Me=!1,De=null,e}function Dr(e,t){var n=t[vo];void 0===n&&(n=t[vo]=new Set);var r=e+"__bubble";n.has(r)||(Wr(t,e,2,!1),n.add(r))}function $r(e,t,n){var r=0;t&&(r|=4),Wr(n,e,r,t)}var Br="_reactListening"+Math.random().toString(36).slice(2);function Ur(e){if(!e[Br]){e[Br]=!0,i.forEach((function(t){"selectionchange"!==t&&(Rr.has(t)||$r(t,!1,e),$r(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Br]||(t[Br]=!0,$r("selectionchange",!1,t))}}function Wr(e,t,n,r){switch(Kt(t)){case 1:var o=Ht;break;case 4:o=Gt;break;default:o=qt}n=o.bind(null,t,n,e),o=void 0,!Ie||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Vr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=bo(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}Ne((function(){var r=a,o=xe(n),i=[];e:{var l=Lr.get(e);if(void 0!==l){var u=sn,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=Cn;break;case"focusin":c="focus",u=vn;break;case"focusout":c="blur",u=vn;break;case"beforeblur":case"afterblur":u=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=_n;break;case Or:case Cr:case Pr:u=yn;break;case _r:u=Ln;break;case"scroll":u=dn;break;case"wheel":u=zn;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Pn}var s=0!=(4&t),f=!s&&"scroll"===e,d=s?null!==l?l+"Capture":null:l;s=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=ze(h,d))&&s.push(Hr(h,m,p))),f)break;h=h.return}0<s.length&&(l=new u(l,c,null,n,o),i.push({event:l,listeners:s}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(c=n.relatedTarget||n.fromElement)||!bo(c)&&!c[mo])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?bo(c):null)&&(c!==(f=Ue(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=r),u!==c)){if(s=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=Pn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:xo(u),p=null==c?l:xo(c),(l=new s(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,bo(o)===r&&((s=new s(d,h+"enter",c,n,o)).target=p,s.relatedTarget=f,m=s),f=m,u&&c)e:{for(d=c,h=0,p=s=u;p;p=qr(p))h++;for(p=0,m=d;m;m=qr(m))p++;for(;0<h-p;)s=qr(s),h--;for(;0<p-h;)d=qr(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=qr(s),d=qr(d)}s=null}else s=null;null!==u&&Qr(i,l,u,s,!1),null!==c&&null!==f&&Qr(i,f,c,s,!0)}if("select"===(u=(l=r?xo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Kn;else if(Vn(l))if(Xn)v=ir;else{v=or;var y=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=ar);switch(v&&(v=v(e,r))?Hn(i,v,n,o):(y&&y(e,l,r),"focusout"===e&&(y=l._wrapperState)&&y.controlled&&"number"===l.type&&ee(l,"number",l.value)),y=r?xo(r):window,e){case"focusin":(Vn(y)||"true"===y.contentEditable)&&(vr=y,yr=r,gr=null);break;case"focusout":gr=yr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(i,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(i,n,o)}var g;if(Tn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Un?$n(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Fn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==b?"onCompositionEnd"===b&&Un&&(g=en()):(Jt="value"in(Xt=o)?Xt.value:Xt.textContent,Un=!0)),0<(y=Gr(r,b)).length&&(b=new wn(b,e,null,n,o),i.push({event:b,listeners:y}),(g||null!==(g=Bn(n)))&&(b.data=g))),(g=Rn?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(Dn=!0,Mn);case"textInput":return(e=t.data)===Mn&&Dn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!Tn&&$n(e,t)?(e=en(),Zt=Jt=Xt=null,Un=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Fn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Gr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=g)}Mr(i,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Gr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=ze(e,n))&&r.unshift(Hr(e,a,o)),null!=(a=ze(e,t))&&r.push(Hr(e,a,o))),e=e.return}return r}function qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,c=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==c&&(l=c,o?null!=(u=ze(n,a))&&i.unshift(Hr(n,u,l)):o||null!=(u=ze(n,a))&&i.push(Hr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Yr=/\r\n?/g,Kr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Yr,"\n").replace(Kr,"")}function Jr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(a(425))}function Zr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function uo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Ut(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Ut(t)}function co(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function so(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,vo="__reactEvents$"+fo,yo="__reactListeners$"+fo,go="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=so(e);null!==e;){if(n=e[po])return n;e=so(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function xo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function So(e){return e[ho]||null}var ko=[],jo=-1;function Eo(e){return{current:e}}function Oo(e){0>jo||(e.current=ko[jo],ko[jo]=null,jo--)}function Co(e,t){jo++,ko[jo]=e.current,e.current=t}var Po={},_o=Eo(Po),Lo=Eo(!1),No=Po;function zo(e,t){var n=e.type.contextTypes;if(!n)return Po;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Io(e){return null!=e.childContextTypes}function To(){Oo(Lo),Oo(_o)}function Ao(e,t,n){if(_o.current!==Po)throw Error(a(168));Co(_o,t),Co(Lo,n)}function Ro(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,W(e)||"Unknown",o));return F({},n,r)}function Fo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Po,No=_o.current,Co(_o,e),Co(Lo,Lo.current),!0}function Mo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Ro(e,t,No),r.__reactInternalMemoizedMergedChildContext=e,Oo(Lo),Oo(_o),Co(_o,e)):Oo(Lo),Co(Lo,n)}var Do=null,$o=!1,Bo=!1;function Uo(e){null===Do?Do=[e]:Do.push(e)}function Wo(){if(!Bo&&null!==Do){Bo=!0;var e=0,t=bt;try{var n=Do;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Do=null,$o=!1}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),qe(Ze,Wo),t}finally{bt=t,Bo=!1}}return null}var Vo=[],Ho=0,Go=null,qo=0,Qo=[],Yo=0,Ko=null,Xo=1,Jo="";function Zo(e,t){Vo[Ho++]=qo,Vo[Ho++]=Go,Go=e,qo=t}function ea(e,t,n){Qo[Yo++]=Xo,Qo[Yo++]=Jo,Qo[Yo++]=Ko,Ko=e;var r=Xo;e=Jo;var o=32-it(r)-1;r&=~(1<<o),n+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Xo=1<<32-it(t)+o|n<<o|r,Jo=a+e}else Xo=1<<a|n<<o|r,Jo=e}function ta(e){null!==e.return&&(Zo(e,1),ea(e,1,0))}function na(e){for(;e===Go;)Go=Vo[--Ho],Vo[Ho]=null,qo=Vo[--Ho],Vo[Ho]=null;for(;e===Ko;)Ko=Qo[--Yo],Qo[Yo]=null,Jo=Qo[--Yo],Qo[Yo]=null,Xo=Qo[--Yo],Qo[Yo]=null}var ra=null,oa=null,aa=!1,ia=null;function la(e,t){var n=zc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ua(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ra=e,oa=co(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ra=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ko?{id:Xo,overflow:Jo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=zc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ra=e,oa=null,!0);default:return!1}}function ca(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function sa(e){if(aa){var t=oa;if(t){var n=t;if(!ua(e,t)){if(ca(e))throw Error(a(418));t=co(n.nextSibling);var r=ra;t&&ua(e,t)?la(r,n):(e.flags=-4097&e.flags|2,aa=!1,ra=e)}}else{if(ca(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,ra=e}}}function fa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ra=e}function da(e){if(e!==ra)return!1;if(!aa)return fa(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oa)){if(ca(e))throw pa(),Error(a(418));for(;t;)la(e,t),t=co(t.nextSibling)}if(fa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oa=co(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oa=null}}else oa=ra?co(e.stateNode.nextSibling):null;return!0}function pa(){for(var e=oa;e;)e=co(e.nextSibling)}function ha(){oa=ra=null,aa=!1}function ma(e){null===ia?ia=[e]:ia.push(e)}var va=w.ReactCurrentBatchConfig;function ya(e,t){if(e&&e.defaultProps){for(var n in t=F({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var ga=Eo(null),ba=null,wa=null,xa=null;function Sa(){xa=wa=ba=null}function ka(e){var t=ga.current;Oo(ga),e._currentValue=t}function ja(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ea(e,t){ba=e,xa=wa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wl=!0),e.firstContext=null)}function Oa(e){var t=e._currentValue;if(xa!==e)if(e={context:e,memoizedValue:t,next:null},null===wa){if(null===ba)throw Error(a(308));wa=e,ba.dependencies={lanes:0,firstContext:e}}else wa=wa.next=e;return t}var Ca=null;function Pa(e){null===Ca?Ca=[e]:Ca.push(e)}function _a(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Pa(t)):(n.next=o.next,o.next=n),t.interleaved=n,La(e,r)}function La(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Na=!1;function za(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ia(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ta(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Aa(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&_u)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,La(e,n)}return null===(o=r.interleaved)?(t.next=t,Pa(r)):(t.next=o.next,o.next=t),r.interleaved=t,La(e,n)}function Ra(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function Fa(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Ma(e,t,n,r){var o=e.updateQueue;Na=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,c=u.next;u.next=null,null===i?a=c:i.next=c,i=u;var s=e.alternate;null!==s&&(l=(s=s.updateQueue).lastBaseUpdate)!==i&&(null===l?s.firstBaseUpdate=c:l.next=c,s.lastBaseUpdate=u)}if(null!==a){var f=o.baseState;for(i=0,s=c=u=null,l=a;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==s&&(s=s.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=F({},f,d);break e;case 2:Na=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===s?(c=s=p,u=f):s=s.next=p,i|=d;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(d=l).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===s&&(u=f),o.baseState=u,o.firstBaseUpdate=c,o.lastBaseUpdate=s,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);Fu|=i,e.lanes=i,e.memoizedState=f}}function Da(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var $a=(new r.Component).refs;function Ba(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:F({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Ua={isMounted:function(e){return!!(e=e._reactInternals)&&Ue(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tc(),o=nc(e),a=Ta(r,o);a.payload=t,null!=n&&(a.callback=n),null!==(t=Aa(e,a,o))&&(rc(t,e,o,r),Ra(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tc(),o=nc(e),a=Ta(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Aa(e,a,o))&&(rc(t,e,o,r),Ra(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tc(),r=nc(e),o=Ta(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Aa(e,o,r))&&(rc(t,e,r,n),Ra(t,e,r))}};function Wa(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,a))}function Va(e,t,n){var r=!1,o=Po,a=t.contextType;return"object"==typeof a&&null!==a?a=Oa(a):(o=Io(t)?No:_o.current,a=(r=null!=(r=t.contextTypes))?zo(e,o):Po),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Ua,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Ha(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ua.enqueueReplaceState(t,t.state,null)}function Ga(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=$a,za(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=Oa(a):(a=Io(t)?No:_o.current,o.context=zo(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Ba(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Ua.enqueueReplaceState(o,o.state,null),Ma(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function qa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;t===$a&&(t=o.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Qa(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ya(e){return(0,e._init)(e._payload)}function Ka(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Tc(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Mc(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){var a=n.type;return a===k?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===z&&Ya(a)===t.type)?((r=o(t,n.props)).ref=qa(e,t,n),r.return=e,r):((r=Ac(n.type,n.key,n.props,null,e.mode,r)).ref=qa(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Dc(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Rc(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Mc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Ac(t.type,t.key,t.props,null,e.mode,n)).ref=qa(e,null,t),n.return=e,n;case S:return(t=Dc(t,e.mode,n)).return=e,t;case z:return d(e,(0,t._init)(t._payload),n)}if(te(t)||A(t))return(t=Rc(t,e.mode,n,null)).return=e,t;Qa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===o?c(e,t,n,r):null;case S:return n.key===o?s(e,t,n,r):null;case z:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||A(n))return null!==o?null:f(e,t,n,r,null);Qa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case S:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case z:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||A(r))return f(t,e=e.get(n)||null,r,o,null);Qa(t,r)}return null}function m(o,a,l,u){for(var c=null,s=null,f=a,m=a=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,l[m],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===s?c=y:s.sibling=y,s=y,f=v}if(m===l.length)return n(o,f),aa&&Zo(o,m),c;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(a=i(f,a,m),null===s?c=f:s.sibling=f,s=f);return aa&&Zo(o,m),c}for(f=r(o,f);m<l.length;m++)null!==(v=h(f,o,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),aa&&Zo(o,m),c}function v(o,l,u,c){var s=A(u);if("function"!=typeof s)throw Error(a(150));if(null==(u=s.call(u)))throw Error(a(151));for(var f=s=null,m=l,v=l=0,y=null,g=u.next();null!==m&&!g.done;v++,g=u.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,c);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,v),null===f?s=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),aa&&Zo(o,v),s;if(null===m){for(;!g.done;v++,g=u.next())null!==(g=d(o,g.value,c))&&(l=i(g,l,v),null===f?s=g:f.sibling=g,f=g);return aa&&Zo(o,v),s}for(m=r(o,m);!g.done;v++,g=u.next())null!==(g=h(m,o,v,g.value,c))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),l=i(g,l,v),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),aa&&Zo(o,v),s}return function e(r,a,i,u){if("object"==typeof i&&null!==i&&i.type===k&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case x:e:{for(var c=i.key,s=a;null!==s;){if(s.key===c){if((c=i.type)===k){if(7===s.tag){n(r,s.sibling),(a=o(s,i.props.children)).return=r,r=a;break e}}else if(s.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===z&&Ya(c)===s.type){n(r,s.sibling),(a=o(s,i.props)).ref=qa(r,s,i),a.return=r,r=a;break e}n(r,s);break}t(r,s),s=s.sibling}i.type===k?((a=Rc(i.props.children,r.mode,u,i.key)).return=r,r=a):((u=Ac(i.type,i.key,i.props,null,r.mode,u)).ref=qa(r,a,i),u.return=r,r=u)}return l(r);case S:e:{for(s=i.key;null!==a;){if(a.key===s){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(r,a.sibling),(a=o(a,i.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=Dc(i,r.mode,u)).return=r,r=a}return l(r);case z:return e(r,a,(s=i._init)(i._payload),u)}if(te(i))return m(r,a,i,u);if(A(i))return v(r,a,i,u);Qa(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,i)).return=r,r=a):(n(r,a),(a=Mc(i,r.mode,u)).return=r,r=a),l(r)):n(r,a)}}var Xa=Ka(!0),Ja=Ka(!1),Za={},ei=Eo(Za),ti=Eo(Za),ni=Eo(Za);function ri(e){if(e===Za)throw Error(a(174));return e}function oi(e,t){switch(Co(ni,t),Co(ti,e),Co(ei,Za),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Oo(ei),Co(ei,t)}function ai(){Oo(ei),Oo(ti),Oo(ni)}function ii(e){ri(ni.current);var t=ri(ei.current),n=ue(t,e.type);t!==n&&(Co(ti,e),Co(ei,n))}function li(e){ti.current===e&&(Oo(ei),Oo(ti))}var ui=Eo(0);function ci(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var si=[];function fi(){for(var e=0;e<si.length;e++)si[e]._workInProgressVersionPrimary=null;si.length=0}var di=w.ReactCurrentDispatcher,pi=w.ReactCurrentBatchConfig,hi=0,mi=null,vi=null,yi=null,gi=!1,bi=!1,wi=0,xi=0;function Si(){throw Error(a(321))}function ki(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function ji(e,t,n,r,o,i){if(hi=i,mi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,di.current=null===e||null===e.memoizedState?ll:ul,e=n(r,o),bi){i=0;do{if(bi=!1,wi=0,25<=i)throw Error(a(301));i+=1,yi=vi=null,t.updateQueue=null,di.current=cl,e=n(r,o)}while(bi)}if(di.current=il,t=null!==vi&&null!==vi.next,hi=0,yi=vi=mi=null,gi=!1,t)throw Error(a(300));return e}function Ei(){var e=0!==wi;return wi=0,e}function Oi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===yi?mi.memoizedState=yi=e:yi=yi.next=e,yi}function Ci(){if(null===vi){var e=mi.alternate;e=null!==e?e.memoizedState:null}else e=vi.next;var t=null===yi?mi.memoizedState:yi.next;if(null!==t)yi=t,vi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(vi=e).memoizedState,baseState:vi.baseState,baseQueue:vi.baseQueue,queue:vi.queue,next:null},null===yi?mi.memoizedState=yi=e:yi=yi.next=e}return yi}function Pi(e,t){return"function"==typeof t?t(e):t}function _i(e){var t=Ci(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=vi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var u=l=null,c=null,s=i;do{var f=s.lane;if((hi&f)===f)null!==c&&(c=c.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),r=s.hasEagerState?s.eagerState:e(r,s.action);else{var d={lane:f,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};null===c?(u=c=d,l=r):c=c.next=d,mi.lanes|=f,Fu|=f}s=s.next}while(null!==s&&s!==i);null===c?l=r:c.next=u,lr(r,t.memoizedState)||(wl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,mi.lanes|=i,Fu|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Li(e){var t=Ci(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);lr(i,t.memoizedState)||(wl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Ni(){}function zi(e,t){var n=mi,r=Ci(),o=t(),i=!lr(r.memoizedState,o);if(i&&(r.memoizedState=o,wl=!0),r=r.queue,Vi(Ai.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==yi&&1&yi.memoizedState.tag){if(n.flags|=2048,Di(9,Ti.bind(null,n,r,o,t),void 0,null),null===Lu)throw Error(a(349));0!=(30&hi)||Ii(n,t,o)}return o}function Ii(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ti(e,t,n,r){t.value=n,t.getSnapshot=r,Ri(t)&&Fi(e)}function Ai(e,t,n){return n((function(){Ri(t)&&Fi(e)}))}function Ri(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Fi(e){var t=La(e,1);null!==t&&rc(t,e,1,-1)}function Mi(e){var t=Oi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Pi,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,mi,e),[t.memoizedState,e]}function Di(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function $i(){return Ci().memoizedState}function Bi(e,t,n,r){var o=Oi();mi.flags|=e,o.memoizedState=Di(1|t,n,void 0,void 0===r?null:r)}function Ui(e,t,n,r){var o=Ci();r=void 0===r?null:r;var a=void 0;if(null!==vi){var i=vi.memoizedState;if(a=i.destroy,null!==r&&ki(r,i.deps))return void(o.memoizedState=Di(t,n,a,r))}mi.flags|=e,o.memoizedState=Di(1|t,n,a,r)}function Wi(e,t){return Bi(8390656,8,e,t)}function Vi(e,t){return Ui(2048,8,e,t)}function Hi(e,t){return Ui(4,2,e,t)}function Gi(e,t){return Ui(4,4,e,t)}function qi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Qi(e,t,n){return n=null!=n?n.concat([e]):null,Ui(4,4,qi.bind(null,t,e),n)}function Yi(){}function Ki(e,t){var n=Ci();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ki(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xi(e,t){var n=Ci();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ki(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ji(e,t,n){return 0==(21&hi)?(e.baseState&&(e.baseState=!1,wl=!0),e.memoizedState=n):(lr(n,t)||(n=mt(),mi.lanes|=n,Fu|=n,e.baseState=!0),t)}function Zi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pi.transition;pi.transition={};try{e(!1),t()}finally{bt=n,pi.transition=r}}function el(){return Ci().memoizedState}function tl(e,t,n){var r=nc(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?ol(t,n):null!==(n=_a(e,t,n,r))&&(rc(n,e,r,tc()),al(n,t,r))}function nl(e,t,n){var r=nc(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))ol(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,i)){var u=t.interleaved;return null===u?(o.next=o,Pa(t)):(o.next=u.next,u.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=_a(e,t,o,r))&&(rc(n,e,r,o=tc()),al(n,t,r))}}function rl(e){var t=e.alternate;return e===mi||null!==t&&t===mi}function ol(e,t){bi=gi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function al(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var il={readContext:Oa,useCallback:Si,useContext:Si,useEffect:Si,useImperativeHandle:Si,useInsertionEffect:Si,useLayoutEffect:Si,useMemo:Si,useReducer:Si,useRef:Si,useState:Si,useDebugValue:Si,useDeferredValue:Si,useTransition:Si,useMutableSource:Si,useSyncExternalStore:Si,useId:Si,unstable_isNewReconciler:!1},ll={readContext:Oa,useCallback:function(e,t){return Oi().memoizedState=[e,void 0===t?null:t],e},useContext:Oa,useEffect:Wi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Bi(4194308,4,qi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Bi(4194308,4,e,t)},useInsertionEffect:function(e,t){return Bi(4,2,e,t)},useMemo:function(e,t){var n=Oi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Oi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,mi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Oi().memoizedState=e},useState:Mi,useDebugValue:Yi,useDeferredValue:function(e){return Oi().memoizedState=e},useTransition:function(){var e=Mi(!1),t=e[0];return e=Zi.bind(null,e[1]),Oi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=mi,o=Oi();if(aa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Lu)throw Error(a(349));0!=(30&hi)||Ii(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Wi(Ai.bind(null,r,i,e),[e]),r.flags|=2048,Di(9,Ti.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=Oi(),t=Lu.identifierPrefix;if(aa){var n=Jo;t=":"+t+"R"+(n=(Xo&~(1<<32-it(Xo)-1)).toString(32)+n),0<(n=wi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=xi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ul={readContext:Oa,useCallback:Ki,useContext:Oa,useEffect:Vi,useImperativeHandle:Qi,useInsertionEffect:Hi,useLayoutEffect:Gi,useMemo:Xi,useReducer:_i,useRef:$i,useState:function(){return _i(Pi)},useDebugValue:Yi,useDeferredValue:function(e){return Ji(Ci(),vi.memoizedState,e)},useTransition:function(){return[_i(Pi)[0],Ci().memoizedState]},useMutableSource:Ni,useSyncExternalStore:zi,useId:el,unstable_isNewReconciler:!1},cl={readContext:Oa,useCallback:Ki,useContext:Oa,useEffect:Vi,useImperativeHandle:Qi,useInsertionEffect:Hi,useLayoutEffect:Gi,useMemo:Xi,useReducer:Li,useRef:$i,useState:function(){return Li(Pi)},useDebugValue:Yi,useDeferredValue:function(e){var t=Ci();return null===vi?t.memoizedState=e:Ji(t,vi.memoizedState,e)},useTransition:function(){return[Li(Pi)[0],Ci().memoizedState]},useMutableSource:Ni,useSyncExternalStore:zi,useId:el,unstable_isNewReconciler:!1};function sl(e,t){try{var n="",r=t;do{n+=B(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function fl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function dl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=Ta(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hu||(Hu=!0,Gu=r),dl(0,t)},n}function ml(e,t,n){(n=Ta(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){dl(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){dl(0,t),"function"!=typeof r&&(null===qu?qu=new Set([this]):qu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function vl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Oc.bind(null,e,t,n),t.then(e,e))}function yl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gl(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ta(-1,1)).tag=2,Aa(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bl=w.ReactCurrentOwner,wl=!1;function xl(e,t,n,r){t.child=null===e?Ja(t,null,n,r):Xa(t,e.child,n,r)}function Sl(e,t,n,r,o){n=n.render;var a=t.ref;return Ea(t,o),r=ji(e,t,n,r,a,o),n=Ei(),null===e||wl?(aa&&n&&ta(t),t.flags|=1,xl(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function kl(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Ic(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ac(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,jl(e,t,a,r,o))}if(a=e.child,0==(e.lanes&o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(i,r)&&e.ref===t.ref)return Hl(e,t,o)}return t.flags|=1,(e=Tc(a,r)).ref=t.ref,e.return=t,t.child=e}function jl(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(ur(a,r)&&e.ref===t.ref){if(wl=!1,t.pendingProps=r=a,0==(e.lanes&o))return t.lanes=e.lanes,Hl(e,t,o);0!=(131072&e.flags)&&(wl=!0)}}return Cl(e,t,n,r,o)}function El(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Co(Tu,Iu),Iu|=n;else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Co(Tu,Iu),Iu|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,Co(Tu,Iu),Iu|=r}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,Co(Tu,Iu),Iu|=r;return xl(e,t,o,n),t.child}function Ol(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Cl(e,t,n,r,o){var a=Io(n)?No:_o.current;return a=zo(t,a),Ea(t,o),n=ji(e,t,n,r,a,o),r=Ei(),null===e||wl?(aa&&r&&ta(t),t.flags|=1,xl(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function Pl(e,t,n,r,o){if(Io(n)){var a=!0;Fo(t)}else a=!1;if(Ea(t,o),null===t.stateNode)Vl(e,t),Va(t,n,r),Ga(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,c=n.contextType;c="object"==typeof c&&null!==c?Oa(c):zo(t,c=Io(n)?No:_o.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==c)&&Ha(t,i,r,c),Na=!1;var d=t.memoizedState;i.state=d,Ma(t,r,i,o),u=t.memoizedState,l!==r||d!==u||Lo.current||Na?("function"==typeof s&&(Ba(t,n,s,r),u=t.memoizedState),(l=Na||Wa(t,n,l,r,d,u,c))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=c,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Ia(e,t),l=t.memoizedProps,c=t.type===t.elementType?l:ya(t.type,l),i.props=c,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?Oa(u):zo(t,u=Io(n)?No:_o.current);var p=n.getDerivedStateFromProps;(s="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&Ha(t,i,r,u),Na=!1,d=t.memoizedState,i.state=d,Ma(t,r,i,o);var h=t.memoizedState;l!==f||d!==h||Lo.current||Na?("function"==typeof p&&(Ba(t,n,p,r),h=t.memoizedState),(c=Na||Wa(t,n,c,r,d,h,u)||!1)?(s||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=c):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return _l(e,t,n,r,a,o)}function _l(e,t,n,r,o,a){Ol(e,t);var i=0!=(128&t.flags);if(!r&&!i)return o&&Mo(t,n,!1),Hl(e,t,a);r=t.stateNode,bl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Xa(t,e.child,null,a),t.child=Xa(t,null,l,a)):xl(e,t,l,a),t.memoizedState=r.state,o&&Mo(t,n,!0),t.child}function Ll(e){var t=e.stateNode;t.pendingContext?Ao(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ao(0,t.context,!1),oi(e,t.containerInfo)}function Nl(e,t,n,r,o){return ha(),ma(o),t.flags|=256,xl(e,t,n,r),t.child}var zl,Il,Tl,Al,Rl={dehydrated:null,treeContext:null,retryLane:0};function Fl(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ml(e,t,n){var r,o=t.pendingProps,i=ui.current,l=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Co(ui,1&i),null===e)return sa(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=o.children,e=o.fallback,l?(o=t.mode,l=t.child,u={mode:"hidden",children:u},0==(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=u):l=Fc(u,o,0,null),e=Rc(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Fl(n),t.memoizedState=Rl,e):Dl(t,u));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,l){if(n)return 256&t.flags?(t.flags&=-257,$l(e,t,l,r=fl(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Fc({mode:"visible",children:r.children},o,0,null),(i=Rc(i,o,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Xa(t,e.child,null,l),t.child.memoizedState=Fl(l),t.memoizedState=Rl,i);if(0==(1&t.mode))return $l(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var u=r.dgst;return r=u,$l(e,t,l,r=fl(i=Error(a(419)),r,void 0))}if(u=0!=(l&e.childLanes),wl||u){if(null!==(r=Lu)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|l))?0:o)&&o!==i.retryLane&&(i.retryLane=o,La(e,o),rc(r,e,o,-1))}return vc(),$l(e,t,l,r=fl(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Pc.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=co(o.nextSibling),ra=t,aa=!0,ia=null,null!==e&&(Qo[Yo++]=Xo,Qo[Yo++]=Jo,Qo[Yo++]=Ko,Xo=e.id,Jo=e.overflow,Ko=t),(t=Dl(t,r.children)).flags|=4096,t)}(e,t,u,o,r,i,n);if(l){l=o.fallback,u=t.mode,r=(i=e.child).sibling;var c={mode:"hidden",children:o.children};return 0==(1&u)&&t.child!==i?((o=t.child).childLanes=0,o.pendingProps=c,t.deletions=null):(o=Tc(i,c)).subtreeFlags=14680064&i.subtreeFlags,null!==r?l=Tc(r,l):(l=Rc(l,u,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,u=null===(u=e.child.memoizedState)?Fl(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},l.memoizedState=u,l.childLanes=e.childLanes&~n,t.memoizedState=Rl,o}return e=(l=e.child).sibling,o=Tc(l,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Dl(e,t){return(t=Fc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function $l(e,t,n,r){return null!==r&&ma(r),Xa(t,e.child,null,n),(e=Dl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Bl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),ja(e.return,t,n)}function Ul(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Wl(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(xl(e,t,r.children,n),0!=(2&(r=ui.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Bl(e,n,t);else if(19===e.tag)Bl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Co(ui,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ci(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Ul(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ci(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Ul(t,!0,n,null,a);break;case"together":Ul(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Vl(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Hl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Fu|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Tc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Tc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Gl(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ql(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ql(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return ql(t),null;case 1:case 17:return Io(t.type)&&To(),ql(t),null;case 3:return r=t.stateNode,ai(),Oo(Lo),Oo(_o),fi(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(da(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ia&&(lc(ia),ia=null))),Il(e,t),ql(t),null;case 5:li(t);var o=ri(ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Tl(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return ql(t),null}if(e=ri(ei.current),da(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[po]=t,r[ho]=i,e=0!=(1&t.mode),n){case"dialog":Dr("cancel",r),Dr("close",r);break;case"iframe":case"object":case"embed":Dr("load",r);break;case"video":case"audio":for(o=0;o<Ar.length;o++)Dr(Ar[o],r);break;case"source":Dr("error",r);break;case"img":case"image":case"link":Dr("error",r),Dr("load",r);break;case"details":Dr("toggle",r);break;case"input":K(r,i),Dr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Dr("invalid",r);break;case"textarea":oe(r,i),Dr("invalid",r)}for(var u in ge(n,i),o=null,i)if(i.hasOwnProperty(u)){var c=i[u];"children"===u?"string"==typeof c?r.textContent!==c&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,c,e),o=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,c,e),o=["children",""+c]):l.hasOwnProperty(u)&&null!=c&&"onScroll"===u&&Dr("scroll",r)}switch(n){case"input":G(r),Z(r,i,!0);break;case"textarea":G(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Zr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[po]=t,e[ho]=r,zl(e,t,!1,!1),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Dr("cancel",e),Dr("close",e),o=r;break;case"iframe":case"object":case"embed":Dr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Ar.length;o++)Dr(Ar[o],e);o=r;break;case"source":Dr("error",e),o=r;break;case"img":case"image":case"link":Dr("error",e),Dr("load",e),o=r;break;case"details":Dr("toggle",e),o=r;break;case"input":K(e,r),o=Y(e,r),Dr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=F({},r,{value:void 0}),Dr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Dr("invalid",e)}for(i in ge(n,o),c=o)if(c.hasOwnProperty(i)){var s=c[i];"style"===i?ve(e,s):"dangerouslySetInnerHTML"===i?null!=(s=s?s.__html:void 0)&&fe(e,s):"children"===i?"string"==typeof s?("textarea"!==n||""!==s)&&de(e,s):"number"==typeof s&&de(e,""+s):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=s&&"onScroll"===i&&Dr("scroll",e):null!=s&&b(e,i,s,u))}switch(n){case"input":G(e),Z(e,r,!1);break;case"textarea":G(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return ql(t),null;case 6:if(e&&null!=t.stateNode)Al(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=ri(ni.current),ri(ei.current),da(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(i=r.nodeValue!==n)&&null!==(e=ra))switch(e.tag){case 3:Jr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return ql(t),null;case 13:if(Oo(ui),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&0!=(1&t.mode)&&0==(128&t.flags))pa(),ha(),t.flags|=98560,i=!1;else if(i=da(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[po]=t}else ha(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;ql(t),i=!1}else null!==ia&&(lc(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ui.current)?0===Au&&(Au=3):vc())),null!==t.updateQueue&&(t.flags|=4),ql(t),null);case 4:return ai(),Il(e,t),null===e&&Ur(t.stateNode.containerInfo),ql(t),null;case 10:return ka(t.type._context),ql(t),null;case 19:if(Oo(ui),null===(i=t.memoizedState))return ql(t),null;if(r=0!=(128&t.flags),null===(u=i.rendering))if(r)Gl(i,!1);else{if(0!==Au||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=ci(e))){for(t.flags|=128,Gl(i,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Co(ui,1&ui.current|2),t.child}e=e.sibling}null!==i.tail&&Xe()>Wu&&(t.flags|=128,r=!0,Gl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ci(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Gl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!aa)return ql(t),null}else 2*Xe()-i.renderingStartTime>Wu&&1073741824!==n&&(t.flags|=128,r=!0,Gl(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Xe(),t.sibling=null,n=ui.current,Co(ui,r?1&n|2:1&n),t):(ql(t),null);case 22:case 23:return dc(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Iu)&&(ql(t),6&t.subtreeFlags&&(t.flags|=8192)):ql(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Yl(e,t){switch(na(t),t.tag){case 1:return Io(t.type)&&To(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ai(),Oo(Lo),Oo(_o),fi(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return li(t),null;case 13:if(Oo(ui),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ha()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Oo(ui),null;case 4:return ai(),null;case 10:return ka(t.type._context),null;case 22:case 23:return dc(),null;default:return null}}zl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Il=function(){},Tl=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ri(ei.current);var a,i=null;switch(n){case"input":o=Y(e,o),r=Y(e,r),i=[];break;case"select":o=F({},o,{value:void 0}),r=F({},r,{value:void 0}),i=[];break;case"textarea":o=re(e,o),r=re(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(s in ge(n,r),n=null,o)if(!r.hasOwnProperty(s)&&o.hasOwnProperty(s)&&null!=o[s])if("style"===s){var u=o[s];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?i||(i=[]):(i=i||[]).push(s,null));for(s in r){var c=r[s];if(u=null!=o?o[s]:void 0,r.hasOwnProperty(s)&&c!==u&&(null!=c||null!=u))if("style"===s)if(u){for(a in u)!u.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&u[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(i||(i=[]),i.push(s,n)),n=c;else"dangerouslySetInnerHTML"===s?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(i=i||[]).push(s,c)):"children"===s?"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(s,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(l.hasOwnProperty(s)?(null!=c&&"onScroll"===s&&Dr("scroll",e),i||u===c||(i=[])):(i=i||[]).push(s,c))}n&&(i=i||[]).push("style",n);var s=i;(t.updateQueue=s)&&(t.flags|=4)}},Al=function(e,t,n,r){n!==r&&(t.flags|=4)};var Kl=!1,Xl=!1,Jl="function"==typeof WeakSet?WeakSet:Set,Zl=null;function eu(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Ec(e,t,n)}else n.current=null}function tu(e,t,n){try{n()}catch(n){Ec(e,t,n)}}var nu=!1;function ru(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&tu(t,n,a)}o=o.next}while(o!==r)}}function ou(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function au(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function iu(e){var t=e.alternate;null!==t&&(e.alternate=null,iu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[vo],delete t[yo],delete t[go]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function uu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||lu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function cu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(cu(e,t,n),e=e.sibling;null!==e;)cu(e,t,n),e=e.sibling}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}var fu=null,du=!1;function pu(e,t,n){for(n=n.child;null!==n;)hu(e,t,n),n=n.sibling}function hu(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Xl||eu(n,t);case 6:var r=fu,o=du;fu=null,pu(e,t,n),du=o,null!==(fu=r)&&(du?(e=fu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):fu.removeChild(n.stateNode));break;case 18:null!==fu&&(du?(e=fu,n=n.stateNode,8===e.nodeType?uo(e.parentNode,n):1===e.nodeType&&uo(e,n),Ut(e)):uo(fu,n.stateNode));break;case 4:r=fu,o=du,fu=n.stateNode.containerInfo,du=!0,pu(e,t,n),fu=r,du=o;break;case 0:case 11:case 14:case 15:if(!Xl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(0!=(2&a)||0!=(4&a))&&tu(n,t,i),o=o.next}while(o!==r)}pu(e,t,n);break;case 1:if(!Xl&&(eu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Ec(n,t,e)}pu(e,t,n);break;case 21:pu(e,t,n);break;case 22:1&n.mode?(Xl=(r=Xl)||null!==n.memoizedState,pu(e,t,n),Xl=r):pu(e,t,n);break;default:pu(e,t,n)}}function mu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Jl),t.forEach((function(t){var r=_c.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function vu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:fu=u.stateNode,du=!1;break e;case 3:case 4:fu=u.stateNode.containerInfo,du=!0;break e}u=u.return}if(null===fu)throw Error(a(160));hu(i,l,o),fu=null,du=!1;var c=o.alternate;null!==c&&(c.return=null),o.return=null}catch(e){Ec(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)yu(t,e),t=t.sibling}function yu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(vu(t,e),gu(e),4&r){try{ru(3,e,e.return),ou(3,e)}catch(t){Ec(e,e.return,t)}try{ru(5,e,e.return)}catch(t){Ec(e,e.return,t)}}break;case 1:vu(t,e),gu(e),512&r&&null!==n&&eu(n,n.return);break;case 5:if(vu(t,e),gu(e),512&r&&null!==n&&eu(n,n.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(t){Ec(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,u=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===u&&"radio"===i.type&&null!=i.name&&X(o,i),be(u,l);var s=be(u,i);for(l=0;l<c.length;l+=2){var f=c[l],d=c[l+1];"style"===f?ve(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):b(o,f,d,s)}switch(u){case"input":J(o,i);break;case"textarea":ae(o,i);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(o,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(o,!!i.multiple,i.defaultValue,!0):ne(o,!!i.multiple,i.multiple?[]:"",!1))}o[ho]=i}catch(t){Ec(e,e.return,t)}}break;case 6:if(vu(t,e),gu(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){Ec(e,e.return,t)}}break;case 3:if(vu(t,e),gu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Ut(t.containerInfo)}catch(t){Ec(e,e.return,t)}break;case 4:default:vu(t,e),gu(e);break;case 13:vu(t,e),gu(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||(Uu=Xe())),4&r&&mu(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Xl=(s=Xl)||f,vu(t,e),Xl=s):vu(t,e),gu(e),8192&r){if(s=null!==e.memoizedState,(e.stateNode.isHidden=s)&&!f&&0!=(1&e.mode))for(Zl=e,f=e.child;null!==f;){for(d=Zl=f;null!==Zl;){switch(h=(p=Zl).child,p.tag){case 0:case 11:case 14:case 15:ru(4,p,p.return);break;case 1:eu(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Ec(r,n,e)}}break;case 5:eu(p,p.return);break;case 22:if(null!==p.memoizedState){Su(d);continue}}null!==h?(h.return=p,Zl=h):Su(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,s?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=d.stateNode,l=null!=(c=d.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,u.style.display=me("display",l))}catch(t){Ec(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=s?"":d.memoizedProps}catch(t){Ec(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:vu(t,e),gu(e),4&r&&mu(e);case 21:}}function gu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(lu(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),su(e,uu(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;cu(e,uu(e),i);break;default:throw Error(a(161))}}catch(t){Ec(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bu(e,t,n){Zl=e,wu(e,t,n)}function wu(e,t,n){for(var r=0!=(1&e.mode);null!==Zl;){var o=Zl,a=o.child;if(22===o.tag&&r){var i=null!==o.memoizedState||Kl;if(!i){var l=o.alternate,u=null!==l&&null!==l.memoizedState||Xl;l=Kl;var c=Xl;if(Kl=i,(Xl=u)&&!c)for(Zl=o;null!==Zl;)u=(i=Zl).child,22===i.tag&&null!==i.memoizedState?ku(o):null!==u?(u.return=i,Zl=u):ku(o);for(;null!==a;)Zl=a,wu(a,t,n),a=a.sibling;Zl=o,Kl=l,Xl=c}xu(e)}else 0!=(8772&o.subtreeFlags)&&null!==a?(a.return=o,Zl=a):xu(e)}}function xu(e){for(;null!==Zl;){var t=Zl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xl||ou(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xl)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:ya(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Da(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Da(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var s=t.alternate;if(null!==s){var f=s.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Ut(d)}}}break;default:throw Error(a(163))}Xl||512&t.flags&&au(t)}catch(e){Ec(t,t.return,e)}}if(t===e){Zl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zl=n;break}Zl=t.return}}function Su(e){for(;null!==Zl;){var t=Zl;if(t===e){Zl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zl=n;break}Zl=t.return}}function ku(e){for(;null!==Zl;){var t=Zl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ou(4,t)}catch(e){Ec(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){Ec(t,o,e)}}var a=t.return;try{au(t)}catch(e){Ec(t,a,e)}break;case 5:var i=t.return;try{au(t)}catch(e){Ec(t,i,e)}}}catch(e){Ec(t,t.return,e)}if(t===e){Zl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Zl=l;break}Zl=t.return}}var ju,Eu=Math.ceil,Ou=w.ReactCurrentDispatcher,Cu=w.ReactCurrentOwner,Pu=w.ReactCurrentBatchConfig,_u=0,Lu=null,Nu=null,zu=0,Iu=0,Tu=Eo(0),Au=0,Ru=null,Fu=0,Mu=0,Du=0,$u=null,Bu=null,Uu=0,Wu=1/0,Vu=null,Hu=!1,Gu=null,qu=null,Qu=!1,Yu=null,Ku=0,Xu=0,Ju=null,Zu=-1,ec=0;function tc(){return 0!=(6&_u)?Xe():-1!==Zu?Zu:Zu=Xe()}function nc(e){return 0==(1&e.mode)?1:0!=(2&_u)&&0!==zu?zu&-zu:null!==va.transition?(0===ec&&(ec=mt()),ec):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Kt(e.type)}function rc(e,t,n,r){if(50<Xu)throw Xu=0,Ju=null,Error(a(185));yt(e,n,r),0!=(2&_u)&&e===Lu||(e===Lu&&(0==(2&_u)&&(Mu|=n),4===Au&&uc(e,zu)),oc(e,r),1===n&&0===_u&&0==(1&t.mode)&&(Wu=Xe()+500,$o&&Wo()))}function oc(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),l=1<<i,u=o[i];-1===u?0!=(l&n)&&0==(l&r)||(o[i]=pt(l,t)):u<=t&&(e.expiredLanes|=l),a&=~l}}(e,t);var r=dt(e,e===Lu?zu:0);if(0===r)null!==n&&Qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Qe(n),1===t)0===e.tag?function(e){$o=!0,Uo(e)}(cc.bind(null,e)):Uo(cc.bind(null,e)),io((function(){0==(6&_u)&&Wo()})),n=null;else{switch(wt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Lc(n,ac.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ac(e,t){if(Zu=-1,ec=0,0!=(6&_u))throw Error(a(327));var n=e.callbackNode;if(kc()&&e.callbackNode!==n)return null;var r=dt(e,e===Lu?zu:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=yc(e,r);else{t=r;var o=_u;_u|=2;var i=mc();for(Lu===e&&zu===t||(Vu=null,Wu=Xe()+500,pc(e,t));;)try{bc();break}catch(t){hc(e,t)}Sa(),Ou.current=i,_u=o,null!==Nu?t=0:(Lu=null,zu=0,t=Au)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=ic(e,o)),1===t)throw n=Ru,pc(e,0),uc(e,r),oc(e,Xe()),n;if(6===t)uc(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!lr(a(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=yc(e,r))&&0!==(i=ht(e))&&(r=i,t=ic(e,i)),1===t))throw n=Ru,pc(e,0),uc(e,r),oc(e,Xe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:Sc(e,Bu,Vu);break;case 3:if(uc(e,r),(130023424&r)===r&&10<(t=Uu+500-Xe())){if(0!==dt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){tc(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(Sc.bind(null,e,Bu,Vu),t);break}Sc(e,Bu,Vu);break;case 4:if(uc(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>o&&(o=l),r&=~i}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Eu(r/1960))-r)){e.timeoutHandle=ro(Sc.bind(null,e,Bu,Vu),r);break}Sc(e,Bu,Vu);break;default:throw Error(a(329))}}}return oc(e,Xe()),e.callbackNode===n?ac.bind(null,e):null}function ic(e,t){var n=$u;return e.current.memoizedState.isDehydrated&&(pc(e,t).flags|=256),2!==(e=yc(e,t))&&(t=Bu,Bu=n,null!==t&&lc(t)),e}function lc(e){null===Bu?Bu=e:Bu.push.apply(Bu,e)}function uc(e,t){for(t&=~Du,t&=~Mu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function cc(e){if(0!=(6&_u))throw Error(a(327));kc();var t=dt(e,0);if(0==(1&t))return oc(e,Xe()),null;var n=yc(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=ic(e,r))}if(1===n)throw n=Ru,pc(e,0),uc(e,t),oc(e,Xe()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Sc(e,Bu,Vu),oc(e,Xe()),null}function sc(e,t){var n=_u;_u|=1;try{return e(t)}finally{0===(_u=n)&&(Wu=Xe()+500,$o&&Wo())}}function fc(e){null!==Yu&&0===Yu.tag&&0==(6&_u)&&kc();var t=_u;_u|=1;var n=Pu.transition,r=bt;try{if(Pu.transition=null,bt=1,e)return e()}finally{bt=r,Pu.transition=n,0==(6&(_u=t))&&Wo()}}function dc(){Iu=Tu.current,Oo(Tu)}function pc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Nu)for(n=Nu.return;null!==n;){var r=n;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&To();break;case 3:ai(),Oo(Lo),Oo(_o),fi();break;case 5:li(r);break;case 4:ai();break;case 13:case 19:Oo(ui);break;case 10:ka(r.type._context);break;case 22:case 23:dc()}n=n.return}if(Lu=e,Nu=e=Tc(e.current,null),zu=Iu=t,Au=0,Ru=null,Du=Mu=Fu=0,Bu=$u=null,null!==Ca){for(t=0;t<Ca.length;t++)if(null!==(r=(n=Ca[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var i=a.next;a.next=o,r.next=i}n.pending=r}Ca=null}return e}function hc(e,t){for(;;){var n=Nu;try{if(Sa(),di.current=il,gi){for(var r=mi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}gi=!1}if(hi=0,yi=vi=mi=null,bi=!1,wi=0,Cu.current=null,null===n||null===n.return){Au=1,Ru=t,Nu=null;break}e:{var i=e,l=n.return,u=n,c=t;if(t=zu,u.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var s=c,f=u,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=yl(l);if(null!==h){h.flags&=-257,gl(h,l,u,0,t),1&h.mode&&vl(i,s,t),c=s;var m=(t=h).updateQueue;if(null===m){var v=new Set;v.add(c),t.updateQueue=v}else m.add(c);break e}if(0==(1&t)){vl(i,s,t),vc();break e}c=Error(a(426))}else if(aa&&1&u.mode){var y=yl(l);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),gl(y,l,u,0,t),ma(sl(c,u));break e}}i=c=sl(c,u),4!==Au&&(Au=2),null===$u?$u=[i]:$u.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Fa(i,hl(0,c,t));break e;case 1:u=c;var g=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof g.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===qu||!qu.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Fa(i,ml(i,u,t));break e}}i=i.return}while(null!==i)}xc(n)}catch(e){t=e,Nu===n&&null!==n&&(Nu=n=n.return);continue}break}}function mc(){var e=Ou.current;return Ou.current=il,null===e?il:e}function vc(){0!==Au&&3!==Au&&2!==Au||(Au=4),null===Lu||0==(268435455&Fu)&&0==(268435455&Mu)||uc(Lu,zu)}function yc(e,t){var n=_u;_u|=2;var r=mc();for(Lu===e&&zu===t||(Vu=null,pc(e,t));;)try{gc();break}catch(t){hc(e,t)}if(Sa(),_u=n,Ou.current=r,null!==Nu)throw Error(a(261));return Lu=null,zu=0,Au}function gc(){for(;null!==Nu;)wc(Nu)}function bc(){for(;null!==Nu&&!Ye();)wc(Nu)}function wc(e){var t=ju(e.alternate,e,Iu);e.memoizedProps=e.pendingProps,null===t?xc(e):Nu=t,Cu.current=null}function xc(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Ql(n,t,Iu)))return void(Nu=n)}else{if(null!==(n=Yl(n,t)))return n.flags&=32767,void(Nu=n);if(null===e)return Au=6,void(Nu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Nu=t);Nu=t=e}while(null!==t);0===Au&&(Au=5)}function Sc(e,t,n){var r=bt,o=Pu.transition;try{Pu.transition=null,bt=1,function(e,t,n,r){do{kc()}while(null!==Yu);if(0!=(6&_u))throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-it(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,i),e===Lu&&(Nu=Lu=null,zu=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Qu||(Qu=!0,Lc(tt,(function(){return kc(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Pu.transition,Pu.transition=null;var l=bt;bt=1;var u=_u;_u|=4,Cu.current=null,function(e,t){if(eo=Vt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,u=-1,c=-1,s=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(u=l+o),d!==i||0!==r&&3!==d.nodeType||(c=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++s===o&&(u=l),p===i&&++f===r&&(c=l),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===c?null:{start:u,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Vt=!1,Zl=t;null!==Zl;)if(e=(t=Zl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Zl=e;else for(;null!==Zl;){t=Zl;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var v=m.memoizedProps,y=m.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?v:ya(t.type,v),y);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(a(163))}}catch(e){Ec(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zl=e;break}Zl=t.return}m=nu,nu=!1}(e,n),yu(n,e),hr(to),Vt=!!eo,to=eo=null,e.current=n,bu(n,e,o),Ke(),_u=u,bt=l,Pu.transition=i}else e.current=n;if(Qu&&(Qu=!1,Yu=e,Ku=o),0===(i=e.pendingLanes)&&(qu=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),oc(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Hu)throw Hu=!1,e=Gu,Gu=null,e;0!=(1&Ku)&&0!==e.tag&&kc(),0!=(1&(i=e.pendingLanes))?e===Ju?Xu++:(Xu=0,Ju=e):Xu=0,Wo()}(e,t,n,r)}finally{Pu.transition=o,bt=r}return null}function kc(){if(null!==Yu){var e=wt(Ku),t=Pu.transition,n=bt;try{if(Pu.transition=null,bt=16>e?16:e,null===Yu)var r=!1;else{if(e=Yu,Yu=null,Ku=0,0!=(6&_u))throw Error(a(331));var o=_u;for(_u|=4,Zl=e.current;null!==Zl;){var i=Zl,l=i.child;if(0!=(16&Zl.flags)){var u=i.deletions;if(null!==u){for(var c=0;c<u.length;c++){var s=u[c];for(Zl=s;null!==Zl;){var f=Zl;switch(f.tag){case 0:case 11:case 15:ru(8,f,i)}var d=f.child;if(null!==d)d.return=f,Zl=d;else for(;null!==Zl;){var p=(f=Zl).sibling,h=f.return;if(iu(f),f===s){Zl=null;break}if(null!==p){p.return=h,Zl=p;break}Zl=h}}}var m=i.alternate;if(null!==m){var v=m.child;if(null!==v){m.child=null;do{var y=v.sibling;v.sibling=null,v=y}while(null!==v)}}Zl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Zl=l;else e:for(;null!==Zl;){if(0!=(2048&(i=Zl).flags))switch(i.tag){case 0:case 11:case 15:ru(9,i,i.return)}var g=i.sibling;if(null!==g){g.return=i.return,Zl=g;break e}Zl=i.return}}var b=e.current;for(Zl=b;null!==Zl;){var w=(l=Zl).child;if(0!=(2064&l.subtreeFlags)&&null!==w)w.return=l,Zl=w;else e:for(l=b;null!==Zl;){if(0!=(2048&(u=Zl).flags))try{switch(u.tag){case 0:case 11:case 15:ou(9,u)}}catch(e){Ec(u,u.return,e)}if(u===l){Zl=null;break e}var x=u.sibling;if(null!==x){x.return=u.return,Zl=x;break e}Zl=u.return}}if(_u=o,Wo(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Pu.transition=t}}return!1}function jc(e,t,n){e=Aa(e,t=hl(0,t=sl(n,t),1),1),t=tc(),null!==e&&(yt(e,1,t),oc(e,t))}function Ec(e,t,n){if(3===e.tag)jc(e,e,n);else for(;null!==t;){if(3===t.tag){jc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qu||!qu.has(r))){t=Aa(t,e=ml(t,e=sl(n,e),1),1),e=tc(),null!==t&&(yt(t,1,e),oc(t,e));break}}t=t.return}}function Oc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tc(),e.pingedLanes|=e.suspendedLanes&n,Lu===e&&(zu&n)===n&&(4===Au||3===Au&&(130023424&zu)===zu&&500>Xe()-Uu?pc(e,0):Du|=n),oc(e,t)}function Cc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=st,0==(130023424&(st<<=1))&&(st=4194304)));var n=tc();null!==(e=La(e,t))&&(yt(e,t,n),oc(e,n))}function Pc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Cc(e,n)}function _c(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Cc(e,n)}function Lc(e,t){return qe(e,t)}function Nc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function zc(e,t,n,r){return new Nc(e,t,n,r)}function Ic(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Tc(e,t){var n=e.alternate;return null===n?((n=zc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ac(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Ic(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case k:return Rc(n.children,o,i,t);case j:l=8,o|=8;break;case E:return(e=zc(12,n,t,2|o)).elementType=E,e.lanes=i,e;case _:return(e=zc(13,n,t,o)).elementType=_,e.lanes=i,e;case L:return(e=zc(19,n,t,o)).elementType=L,e.lanes=i,e;case I:return Fc(n,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case O:l=10;break e;case C:l=9;break e;case P:l=11;break e;case N:l=14;break e;case z:l=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=zc(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Rc(e,t,n,r){return(e=zc(7,e,r,t)).lanes=n,e}function Fc(e,t,n,r){return(e=zc(22,e,r,t)).elementType=I,e.lanes=n,e.stateNode={isHidden:!1},e}function Mc(e,t,n){return(e=zc(6,e,null,t)).lanes=n,e}function Dc(e,t,n){return(t=zc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function $c(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Bc(e,t,n,r,o,a,i,l,u){return e=new $c(e,t,n,l,u),1===t?(t=1,!0===a&&(t|=8)):t=0,a=zc(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},za(a),e}function Uc(e){if(!e)return Po;e:{if(Ue(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Io(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(Io(n))return Ro(e,n,t)}return t}function Wc(e,t,n,r,o,a,i,l,u){return(e=Bc(n,r,!0,e,0,a,0,l,u)).context=Uc(null),n=e.current,(a=Ta(r=tc(),o=nc(n))).callback=null!=t?t:null,Aa(n,a,o),e.current.lanes=o,yt(e,o,r),oc(e,r),e}function Vc(e,t,n,r){var o=t.current,a=tc(),i=nc(o);return n=Uc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ta(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Aa(o,t,i))&&(rc(e,o,i,a),Ra(e,o,i)),i}function Hc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Gc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function qc(e,t){Gc(e,t),(e=e.alternate)&&Gc(e,t)}ju=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Lo.current)wl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wl=!1,function(e,t,n){switch(t.tag){case 3:Ll(t),ha();break;case 5:ii(t);break;case 1:Io(t.type)&&Fo(t);break;case 4:oi(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Co(ga,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Co(ui,1&ui.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Ml(e,t,n):(Co(ui,1&ui.current),null!==(e=Hl(e,t,n))?e.sibling:null);Co(ui,1&ui.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Wl(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Co(ui,ui.current),r)break;return null;case 22:case 23:return t.lanes=0,El(e,t,n)}return Hl(e,t,n)}(e,t,n);wl=0!=(131072&e.flags)}else wl=!1,aa&&0!=(1048576&t.flags)&&ea(t,qo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Vl(e,t),e=t.pendingProps;var o=zo(t,_o.current);Ea(t,n),o=ji(null,t,r,e,o,n);var i=Ei();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Io(r)?(i=!0,Fo(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,za(t),o.updater=Ua,t.stateNode=o,o._reactInternals=t,Ga(t,r,e,n),t=_l(null,t,r,!0,i,n)):(t.tag=0,aa&&i&&ta(t),xl(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Vl(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Ic(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===N)return 14}return 2}(r),e=ya(r,e),o){case 0:t=Cl(null,t,r,e,n);break e;case 1:t=Pl(null,t,r,e,n);break e;case 11:t=Sl(null,t,r,e,n);break e;case 14:t=kl(null,t,r,ya(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Cl(e,t,r,o=t.elementType===r?o:ya(r,o),n);case 1:return r=t.type,o=t.pendingProps,Pl(e,t,r,o=t.elementType===r?o:ya(r,o),n);case 3:e:{if(Ll(t),null===e)throw Error(a(387));r=t.pendingProps,o=(i=t.memoizedState).element,Ia(e,t),Ma(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Nl(e,t,r,n,o=sl(Error(a(423)),t));break e}if(r!==o){t=Nl(e,t,r,n,o=sl(Error(a(424)),t));break e}for(oa=co(t.stateNode.containerInfo.firstChild),ra=t,aa=!0,ia=null,n=Ja(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ha(),r===o){t=Hl(e,t,n);break e}xl(e,t,r,n)}t=t.child}return t;case 5:return ii(t),null===e&&sa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==i&&no(r,i)&&(t.flags|=32),Ol(e,t),xl(e,t,l,n),t.child;case 6:return null===e&&sa(t),null;case 13:return Ml(e,t,n);case 4:return oi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Xa(t,null,r,n):xl(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Sl(e,t,r,o=t.elementType===r?o:ya(r,o),n);case 7:return xl(e,t,t.pendingProps,n),t.child;case 8:case 12:return xl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,l=o.value,Co(ga,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===o.children&&!Lo.current){t=Hl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){l=i.child;for(var c=u.firstContext;null!==c;){if(c.context===r){if(1===i.tag){(c=Ta(-1,n&-n)).tag=2;var s=i.updateQueue;if(null!==s){var f=(s=s.shared).pending;null===f?c.next=c:(c.next=f.next,f.next=c),s.pending=c}}i.lanes|=n,null!==(c=i.alternate)&&(c.lanes|=n),ja(i.return,n,t),u.lanes|=n;break}c=c.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(a(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),ja(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}xl(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Ea(t,n),r=r(o=Oa(o)),t.flags|=1,xl(e,t,r,n),t.child;case 14:return o=ya(r=t.type,t.pendingProps),kl(e,t,r,o=ya(r.type,o),n);case 15:return jl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ya(r,o),Vl(e,t),t.tag=1,Io(r)?(e=!0,Fo(t)):e=!1,Ea(t,n),Va(t,r,o),Ga(t,r,o,n),_l(null,t,r,!0,e,n);case 19:return Wl(e,t,n);case 22:return El(e,t,n)}throw Error(a(156,t.tag))};var Qc="function"==typeof reportError?reportError:function(e){console.error(e)};function Yc(e){this._internalRoot=e}function Kc(e){this._internalRoot=e}function Xc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Jc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zc(){}function es(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a;if("function"==typeof o){var l=o;o=function(){var e=Hc(i);l.call(e)}}Vc(t,i,e,o)}else i=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=Hc(i);a.call(e)}}var i=Wc(t,r,e,0,null,!1,0,"",Zc);return e._reactRootContainer=i,e[mo]=i.current,Ur(8===e.nodeType?e.parentNode:e),fc(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=Hc(u);l.call(e)}}var u=Bc(e,0,!1,null,0,!1,0,"",Zc);return e._reactRootContainer=u,e[mo]=u.current,Ur(8===e.nodeType?e.parentNode:e),fc((function(){Vc(t,u,n,r)})),u}(n,t,e,o,r);return Hc(i)}Kc.prototype.render=Yc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Vc(e,t,null,null)},Kc.prototype.unmount=Yc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;fc((function(){Vc(null,e,null,null)})),t[mo]=null}},Kc.prototype.unstable_scheduleHydration=function(e){if(e){var t=jt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<It.length&&0!==t&&t<It[n].priority;n++);It.splice(n,0,e),0===n&&Ft(e)}},xt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),oc(t,Xe()),0==(6&_u)&&(Wu=Xe()+500,Wo()))}break;case 13:fc((function(){var t=La(e,1);if(null!==t){var n=tc();rc(t,e,1,n)}})),qc(e,1)}},St=function(e){if(13===e.tag){var t=La(e,134217728);null!==t&&rc(t,e,134217728,tc()),qc(e,134217728)}},kt=function(e){if(13===e.tag){var t=nc(e),n=La(e,t);null!==n&&rc(n,e,t,tc()),qc(e,t)}},jt=function(){return bt},Et=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Se=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=So(r);if(!o)throw Error(a(90));q(r),J(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=sc,_e=fc;var ts={usingClientEntryPoint:!1,Events:[wo,xo,So,Oe,Ce,sc]},ns={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rs={bundleType:ns.bundleType,version:ns.version,rendererPackageName:ns.rendererPackageName,rendererConfig:ns.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:ns.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var os=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!os.isDisabled&&os.supportsFiber)try{ot=os.inject(rs),at=os}catch(se){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ts,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xc(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xc(e))throw Error(a(299));var n=!1,r="",o=Qc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Bc(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,Ur(8===e.nodeType?e.parentNode:e),new Yc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return fc(e)},t.hydrate=function(e,t,n){if(!Jc(t))throw Error(a(200));return es(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xc(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",l=Qc;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Wc(t,null,e,1,null!=n?n:null,o,0,i,l),e[mo]=t.current,Ur(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Kc(t)},t.render=function(e,t,n){if(!Jc(t))throw Error(a(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Jc(e))throw Error(a(40));return!!e._reactRootContainer&&(fc((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=sc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Jc(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return es(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:function(e,t,n){"use strict";var r=n(935);t.s=r.createRoot,r.hydrateRoot},935:function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:function(e,t){"use strict";var n,r=Symbol.for("react.element"),o=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),u=Symbol.for("react.provider"),c=Symbol.for("react.context"),s=Symbol.for("react.server_context"),f=Symbol.for("react.forward_ref"),d=Symbol.for("react.suspense"),p=Symbol.for("react.suspense_list"),h=Symbol.for("react.memo"),m=Symbol.for("react.lazy"),v=Symbol.for("react.offscreen");n=Symbol.for("react.module.reference"),t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===l||e===i||e===d||e===p||e===v||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===h||e.$$typeof===u||e.$$typeof===c||e.$$typeof===f||e.$$typeof===n||void 0!==e.getModuleId)},t.typeOf=function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case a:case l:case i:case d:case p:return e;default:switch(e=e&&e.$$typeof){case s:case c:case f:case m:case h:case u:return e;default:return t}}case o:return t}}}},864:function(e,t,n){"use strict";e.exports=n(921)},251:function(e,t,n){"use strict";var r=n(294),o=Symbol.for("react.element"),a=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,u={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,a={},c=null,s=null;for(r in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(s=t.ref),t)i.call(t,r)&&!u.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:o,type:e,key:c,ref:s,props:a,_owner:l.current}}t.Fragment=a,t.jsx=c,t.jsxs=c},408:function(e,t){"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,v={};function y(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=y.prototype;var w=b.prototype=new g;w.constructor=b,m(w,y.prototype),w.isPureReactComponent=!0;var x=Array.isArray,S=Object.prototype.hasOwnProperty,k={current:null},j={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var o,a={},i=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)S.call(t,o)&&!j.hasOwnProperty(o)&&(a[o]=t[o]);var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];a.children=c}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===a[o]&&(a[o]=u[o]);return{$$typeof:n,type:e,key:i,ref:l,props:a,_owner:k.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var C=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function _(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return i=i(u=e),e=""===a?"."+P(u,0):a,x(i)?(o="",null!=e&&(o=e.replace(C,"$&/")+"/"),_(i,t,o,"",(function(e){return e}))):null!=i&&(O(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(C,"$&/")+"/")+e)),t.push(i)),1;if(u=0,a=""===a?".":a+":",x(e))for(var c=0;c<e.length;c++){var s=a+P(l=e[c],c);u+=_(l,t,o,s,i)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),c=0;!(l=e.next()).done;)u+=_(l=l.value,t,o,s=a+P(l,c++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function L(e,t,n){if(null==e)return e;var r=[],o=0;return _(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function N(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var z={current:null},I={transition:null},T={ReactCurrentDispatcher:z,ReactCurrentBatchConfig:I,ReactCurrentOwner:k};t.Children={map:L,forEach:function(e,t,n){L(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return L(e,(function(){t++})),t},toArray:function(e){return L(e,(function(e){return e}))||[]},only:function(e){if(!O(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=s,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=k.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)S.call(t,c)&&!j.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=r;else if(1<c){u=Array(c);for(var s=0;s<c;s++)u[s]=arguments[s+2];o.children=u}return{$$typeof:n,type:e.type,key:a,ref:i,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=O,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:N}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=I.transition;I.transition={};try{e()}finally{I.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return z.current.useCallback(e,t)},t.useContext=function(e){return z.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return z.current.useDeferredValue(e)},t.useEffect=function(e,t){return z.current.useEffect(e,t)},t.useId=function(){return z.current.useId()},t.useImperativeHandle=function(e,t,n){return z.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return z.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return z.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return z.current.useMemo(e,t)},t.useReducer=function(e,t,n){return z.current.useReducer(e,t,n)},t.useRef=function(e){return z.current.useRef(e)},t.useState=function(e){return z.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return z.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return z.current.useTransition()},t.version="18.2.0"},294:function(e,t,n){"use strict";e.exports=n(408)},893:function(e,t,n){"use strict";e.exports=n(251)},53:function(e,t){"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,u=e[l],c=l+1,s=e[c];if(0>a(u,n))c<o&&0>a(s,u)?(e[r]=s,e[c]=n,r=c):(e[r]=u,e[l]=n,r=l);else{if(!(c<o&&0>a(s,n)))break e;e[r]=s,e[c]=n,r=c}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var c=[],s=[],f=1,d=null,p=3,h=!1,m=!1,v=!1,y="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(s);null!==t;){if(null===t.callback)o(s);else{if(!(t.startTime<=e))break;o(s),t.sortIndex=t.expirationTime,n(c,t)}t=r(s)}}function x(e){if(v=!1,w(e),!m)if(null!==r(c))m=!0,I(S);else{var t=r(s);null!==t&&T(x,t.startTime-e)}}function S(e,n){m=!1,v&&(v=!1,g(O),O=-1),h=!0;var a=p;try{for(w(n),d=r(c);null!==d&&(!(d.expirationTime>n)||e&&!_());){var i=d.callback;if("function"==typeof i){d.callback=null,p=d.priorityLevel;var l=i(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?d.callback=l:d===r(c)&&o(c),w(n)}else o(c);d=r(c)}if(null!==d)var u=!0;else{var f=r(s);null!==f&&T(x,f.startTime-n),u=!1}return u}finally{d=null,p=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,j=!1,E=null,O=-1,C=5,P=-1;function _(){return!(t.unstable_now()-P<C)}function L(){if(null!==E){var e=t.unstable_now();P=e;var n=!0;try{n=E(!0,e)}finally{n?k():(j=!1,E=null)}}else j=!1}if("function"==typeof b)k=function(){b(L)};else if("undefined"!=typeof MessageChannel){var N=new MessageChannel,z=N.port2;N.port1.onmessage=L,k=function(){z.postMessage(null)}}else k=function(){y(L,0)};function I(e){E=e,j||(j=!0,k())}function T(e,n){O=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,I(S))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,n(s,e),null===r(c)&&e===r(s)&&(v?(g(O),O=-1):v=!0,T(x,a-i))):(e.sortIndex=l,n(c,e),m||h||(m=!0,I(S))),e},t.unstable_shouldYield=_,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:function(e,t,n){"use strict";e.exports=n(53)},774:function(e){e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var a=Object.keys(e),i=Object.keys(t);if(a.length!==i.length)return!1;for(var l=Object.prototype.hasOwnProperty.bind(t),u=0;u<a.length;u++){var c=a[u];if(!l(c))return!1;var s=e[c],f=t[c];if(!1===(o=n?n.call(r,s,f,c):void 0)||void 0===o&&s!==f)return!1}return!0}},250:function(e,t,n){"use strict";var r=n(294),o="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},a=r.useState,i=r.useEffect,l=r.useLayoutEffect,u=r.useDebugValue;function c(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!o(e,n)}catch(e){return!0}}var s="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),r=a({inst:{value:n,getSnapshot:t}}),o=r[0].inst,s=r[1];return l((function(){o.value=n,o.getSnapshot=t,c(o)&&s({inst:o})}),[e,n,t]),i((function(){return c(o)&&s({inst:o}),e((function(){c(o)&&s({inst:o})}))}),[e]),u(n),n};t.useSyncExternalStore=void 0!==r.useSyncExternalStore?r.useSyncExternalStore:s},139:function(e,t,n){"use strict";var r=n(294),o=n(688),a="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},i=o.useSyncExternalStore,l=r.useRef,u=r.useEffect,c=r.useMemo,s=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,o){var f=l(null);if(null===f.current){var d={hasValue:!1,value:null};f.current=d}else d=f.current;f=c((function(){function e(e){if(!u){if(u=!0,i=e,e=r(e),void 0!==o&&d.hasValue){var t=d.value;if(o(t,e))return l=t}return l=e}if(t=l,a(i,e))return t;var n=r(e);return void 0!==o&&o(t,n)?t:(i=e,l=n)}var i,l,u=!1,c=void 0===n?null:n;return[function(){return e(t())},null===c?void 0:function(){return e(c())}]}),[t,n,r,o]);var p=i(e,f[0],f[1]);return u((function(){d.hasValue=!0,d.value=p}),[p]),s(p),p}},688:function(e,t,n){"use strict";e.exports=n(250)},798:function(e,t,n){"use strict";e.exports=n(139)}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={exports:{}};return n[e](a,a.exports,o),a.exports}o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,{a:t}),t},t=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var a=Object.create(null);o.r(a);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((function(e){i[e]=function(){return n[e]}}));return i.default=function(){return n},o.d(a,i),a},o.d=function(e,t){for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},function(){var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&!e;)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e}(),o.nc=void 0,function(){"use strict";var e,t=o(294),n=o.t(t,2),r=o(745);function a(){return a=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const i="popstate";function l(e,t){if(!1===e||null==e)throw new Error(t)}function u(e,t){return{usr:e.state,key:e.key,idx:t}}function c(e,t,n,r){return void 0===n&&(n=null),a({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?f(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function s(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function f(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var d;function p(e,t,n){void 0===n&&(n="/");let r=C(("string"==typeof t?f(t):t).pathname||"/",n);if(null==r)return null;let o=h(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){let n=e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]));return n?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let a=null;for(let e=0;null==a&&e<o.length;++e)a=j(o[e],O(r));return a}function h(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let o=(e,o,a)=>{let i={relativePath:void 0===a?e.path||"":a,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(l(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let u=z([r,i.relativePath]),c=n.concat(i);e.children&&e.children.length>0&&(l(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+u+'".'),h(e.children,t,c,u)),(null!=e.path||e.index)&&t.push({path:u,score:k(u,e.index),routesMeta:c})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of m(e.path))o(e,t,n);else o(e,t)})),t}function m(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,o=n.endsWith("?"),a=n.replace(/\?$/,"");if(0===r.length)return o?[a,""]:[a];let i=m(r.join("/")),l=[];return l.push(...i.map((e=>""===e?a:[a,e].join("/")))),o&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(d||(d={}));const v=/^:\w+$/,y=3,g=2,b=1,w=10,x=-2,S=e=>"*"===e;function k(e,t){let n=e.split("/"),r=n.length;return n.some(S)&&(r+=x),t&&(r+=g),n.filter((e=>!S(e))).reduce(((e,t)=>e+(v.test(t)?y:""===t?b:w)),r)}function j(e,t){let{routesMeta:n}=e,r={},o="/",a=[];for(let e=0;e<n.length;++e){let i=n[e],l=e===n.length-1,u="/"===o?t:t.slice(o.length)||"/",c=E({path:i.relativePath,caseSensitive:i.caseSensitive,end:l},u);if(!c)return null;Object.assign(r,c.params);let s=i.route;a.push({params:r,pathname:z([o,c.pathname]),pathnameBase:I(z([o,c.pathnameBase])),route:s}),"/"!==c.pathnameBase&&(o=z([o,c.pathnameBase]))}return a}function E(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),P("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(r.push(t),"/([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=l[n]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return P(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(l[n]||"",t),e}),{}),pathname:a,pathnameBase:i,pattern:e}}function O(e){try{return decodeURI(e)}catch(t){return P(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function C(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function P(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function _(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function L(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function N(e,t,n,r){let o;void 0===r&&(r=!1),"string"==typeof e?o=f(e):(o=a({},e),l(!o.pathname||!o.pathname.includes("?"),_("?","pathname","search",o)),l(!o.pathname||!o.pathname.includes("#"),_("#","pathname","hash",o)),l(!o.search||!o.search.includes("#"),_("#","search","hash",o)));let i,u=""===e||""===o.pathname,c=u?"/":o.pathname;if(r||null==c)i=n;else{let e=t.length-1;if(c.startsWith("..")){let t=c.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}i=e>=0?t[e]:"/"}let s=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?f(e):e,a=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:a,search:T(r),hash:A(o)}}(o,i),d=c&&"/"!==c&&c.endsWith("/"),p=(u||"."===c)&&n.endsWith("/");return s.pathname.endsWith("/")||!d&&!p||(s.pathname+="/"),s}const z=e=>e.join("/").replace(/\/\/+/g,"/"),I=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),T=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",A=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const R=["post","put","patch","delete"],F=(new Set(R),["get",...R]);function M(){return M=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},M.apply(this,arguments)}new Set(F),new Set([301,302,303,307,308]),new Set([307,308]),"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement,Symbol("deferred");"function"==typeof Object.is&&Object.is;const{useState:D,useEffect:$,useLayoutEffect:B,useDebugValue:U}=n;"undefined"==typeof window||void 0===window.document||window.document.createElement,n.useSyncExternalStore;const W=t.createContext(null),V=t.createContext(null),H=t.createContext(null),G=t.createContext(null),q=t.createContext({outlet:null,matches:[]}),Q=t.createContext(null);function Y(){return null!=t.useContext(G)}function K(){return Y()||l(!1),t.useContext(G).location}function X(){Y()||l(!1);let{basename:e,navigator:n}=t.useContext(H),{matches:r}=t.useContext(q),{pathname:o}=K(),a=JSON.stringify(L(r).map((e=>e.pathnameBase))),i=t.useRef(!1);return t.useEffect((()=>{i.current=!0})),t.useCallback((function(t,r){if(void 0===r&&(r={}),!i.current)return;if("number"==typeof t)return void n.go(t);let l=N(t,JSON.parse(a),o,"path"===r.relative);"/"!==e&&(l.pathname="/"===l.pathname?e:z([e,l.pathname])),(r.replace?n.replace:n.push)(l,r.state,r)}),[e,n,a,o])}const J=t.createContext(null);function Z(){let{matches:e}=t.useContext(q),n=e[e.length-1];return n?n.params:{}}function ee(e,n){let{relative:r}=void 0===n?{}:n,{matches:o}=t.useContext(q),{pathname:a}=K(),i=JSON.stringify(L(o).map((e=>e.pathnameBase)));return t.useMemo((()=>N(e,JSON.parse(i),a,"path"===r)),[e,i,a,r])}function te(){let e=function(){var e;let n=t.useContext(Q),r=function(e){let n=t.useContext(V);return n||l(!1),n}(ae.UseRouteError),o=function(e){let n=function(e){let n=t.useContext(q);return n||l(!1),n}(),r=n.matches[n.matches.length-1];return r.route.id||l(!1),r.route.id}(ae.UseRouteError);return n||(null==(e=r.errors)?void 0:e[o])}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,o={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:o},r):null,null)}class ne extends t.Component{constructor(e){super(e),this.state={location:e.location,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location?{error:e.error,location:e.location}:{error:e.error||t.error,location:t.location}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?t.createElement(q.Provider,{value:this.props.routeContext},t.createElement(Q.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function re(e){let{routeContext:n,match:r,children:o}=e,a=t.useContext(W);return a&&a.static&&a.staticContext&&r.route.errorElement&&(a.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(q.Provider,{value:n},o)}var oe,ae,ie;function le(e){let{to:n,replace:r,state:o,relative:a}=e;Y()||l(!1);let i=t.useContext(V),u=X();return t.useEffect((()=>{i&&"idle"!==i.navigation.state||u(n,{replace:r,state:o,relative:a})})),null}function ue(e){return function(e){let n=t.useContext(q).outlet;return n?t.createElement(J.Provider,{value:e},n):n}(e.context)}function ce(e){l(!1)}function se(n){let{basename:r="/",children:o=null,location:a,navigationType:i=e.Pop,navigator:u,static:c=!1}=n;Y()&&l(!1);let s=r.replace(/^\/*/,"/"),d=t.useMemo((()=>({basename:s,navigator:u,static:c})),[s,u,c]);"string"==typeof a&&(a=f(a));let{pathname:p="/",search:h="",hash:m="",state:v=null,key:y="default"}=a,g=t.useMemo((()=>{let e=C(p,s);return null==e?null:{pathname:e,search:h,hash:m,state:v,key:y}}),[s,p,h,m,v,y]);return null==g?null:t.createElement(H.Provider,{value:d},t.createElement(G.Provider,{children:o,value:{location:g,navigationType:i}}))}function fe(n){let{children:r,location:o}=n,a=t.useContext(W);return function(n,r){Y()||l(!1);let{navigator:o}=t.useContext(H),a=t.useContext(V),{matches:i}=t.useContext(q),u=i[i.length-1],c=u?u.params:{},s=(u&&u.pathname,u?u.pathnameBase:"/");u&&u.route;let d,h=K();if(r){var m;let e="string"==typeof r?f(r):r;"/"===s||(null==(m=e.pathname)?void 0:m.startsWith(s))||l(!1),d=e}else d=h;let v=d.pathname||"/",y=p(n,{pathname:"/"===s?v:v.slice(s.length)||"/"}),g=function(e,n,r){if(void 0===n&&(n=[]),null==e){if(null==r||!r.errors)return null;e=r.matches}let o=e,a=null==r?void 0:r.errors;if(null!=a){let e=o.findIndex((e=>e.route.id&&(null==a?void 0:a[e.route.id])));e>=0||l(!1),o=o.slice(0,Math.min(o.length,e+1))}return o.reduceRight(((e,i,l)=>{let u=i.route.id?null==a?void 0:a[i.route.id]:null,c=r?i.route.errorElement||t.createElement(te,null):null,s=n.concat(o.slice(0,l+1)),f=()=>t.createElement(re,{match:i,routeContext:{outlet:e,matches:s}},u?c:void 0!==i.route.element?i.route.element:e);return r&&(i.route.errorElement||0===l)?t.createElement(ne,{location:r.location,component:c,error:u,children:f(),routeContext:{outlet:null,matches:s}}):f()}),null)}(y&&y.map((e=>Object.assign({},e,{params:Object.assign({},c,e.params),pathname:z([s,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?s:z([s,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),i,a||void 0);return r&&g?t.createElement(G.Provider,{value:{location:M({pathname:"/",search:"",hash:"",state:null,key:"default"},d),navigationType:e.Pop}},g):g}(a&&!r?a.router.routes:de(r),o)}function de(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,o)=>{if(!t.isValidElement(e))return;if(e.type===t.Fragment)return void r.push.apply(r,de(e.props.children,n));e.type!==ce&&l(!1),e.props.index&&e.props.children&&l(!1);let a=[...n,o],i={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,hasErrorBoundary:null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle};e.props.children&&(i.children=de(e.props.children,a)),r.push(i)})),r}function pe(){return pe=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},pe.apply(this,arguments)}!function(e){e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator"}(oe||(oe={})),function(e){e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator"}(ae||(ae={})),function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(ie||(ie={})),new Promise((()=>{})),t.Component;const he=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"];function me(n){let{basename:r,children:o,window:d}=n,p=t.useRef();var h;null==p.current&&(p.current=(void 0===(h={window:d,v5Compat:!0})&&(h={}),function(t,n,r,o){void 0===o&&(o={});let{window:f=document.defaultView,v5Compat:d=!1}=o,p=f.history,h=e.Pop,m=null,v=y();function y(){return(p.state||{idx:null}).idx}function g(){h=e.Pop;let t=y(),n=null==t?null:t-v;v=t,m&&m({action:h,location:w.location,delta:n})}function b(e){let t="null"!==f.location.origin?f.location.origin:f.location.href,n="string"==typeof e?e:s(e);return l(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==v&&(v=0,p.replaceState(a({},p.state,{idx:v}),""));let w={get action(){return h},get location(){return t(f,p)},listen(e){if(m)throw new Error("A history only accepts one active listener");return f.addEventListener(i,g),m=e,()=>{f.removeEventListener(i,g),m=null}},createHref(e){return n(f,e)},createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,n){h=e.Push;let o=c(w.location,t,n);r&&r(o,t),v=y()+1;let a=u(o,v),i=w.createHref(o);try{p.pushState(a,"",i)}catch(e){f.location.assign(i)}d&&m&&m({action:h,location:w.location,delta:1})},replace:function(t,n){h=e.Replace;let o=c(w.location,t,n);r&&r(o,t),v=y();let a=u(o,v),i=w.createHref(o);p.replaceState(a,"",i),d&&m&&m({action:h,location:w.location,delta:0})},go(e){return p.go(e)}};return w}((function(e,t){let{pathname:n="/",search:r="",hash:o=""}=f(e.location.hash.substr(1));return c("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:s(t))}),(function(e,t){!function(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),h)));let m=p.current,[v,y]=t.useState({action:m.action,location:m.location});return t.useLayoutEffect((()=>m.listen(y)),[m]),t.createElement(se,{basename:r,children:o,location:v.location,navigationType:v.action,navigator:m})}const ve="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,ye=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ge=t.forwardRef((function(e,n){let r,{onClick:o,relative:a,reloadDocument:i,replace:u,state:c,target:f,to:d,preventScrollReset:p}=e,h=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,he),{basename:m}=t.useContext(H),v=!1;if("string"==typeof d&&ye.test(d)&&(r=d,ve)){let e=new URL(window.location.href),t=d.startsWith("//")?new URL(e.protocol+d):new URL(d),n=C(t.pathname,m);t.origin===e.origin&&null!=n?d=n+t.search+t.hash:v=!0}let y=function(e,n){let{relative:r}=void 0===n?{}:n;Y()||l(!1);let{basename:o,navigator:a}=t.useContext(H),{hash:i,pathname:u,search:c}=ee(e,{relative:r}),s=u;return"/"!==o&&(s="/"===u?o:z([o,u])),a.createHref({pathname:s,search:c,hash:i})}(d,{relative:a}),g=function(e,n){let{target:r,replace:o,state:a,preventScrollReset:i,relative:l}=void 0===n?{}:n,u=X(),c=K(),f=ee(e,{relative:l});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==o?o:s(c)===s(f);u(e,{replace:n,state:a,preventScrollReset:i,relative:l})}}),[c,u,f,o,a,r,e,i,l])}(d,{replace:u,state:c,target:f,preventScrollReset:p,relative:a});return t.createElement("a",pe({},h,{href:r||y,onClick:v||i?o:function(e){o&&o(e),e.defaultPrevented||g(e)},ref:n,target:f}))}));var be,we;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmitImpl="useSubmitImpl",e.UseFetcher="useFetcher"})(be||(be={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(we||(we={}));var xe=o(688),Se=o(798),ke=o(935);let je=function(e){e()};const Ee=()=>je,Oe=(0,t.createContext)(null);function Ce(){return(0,t.useContext)(Oe)}let Pe=()=>{throw new Error("uSES not initialized!")};const _e=(e,t)=>e===t;function Le(e=Oe){const n=e===Oe?Ce:()=>(0,t.useContext)(e);return function(e,r=_e){const{store:o,subscription:a,getServerState:i}=n(),l=Pe(a.addNestedSub,o.getState,i||o.getState,e,r);return(0,t.useDebugValue)(l),l}}const Ne=Le();var ze=o(679),Ie=o.n(ze),Te=o(864);const Ae={notify(){},get:()=>[]};const Re="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?t.useLayoutEffect:t.useEffect;let Fe=null;var Me=function({store:e,context:n,children:r,serverState:o}){const a=(0,t.useMemo)((()=>{const t=function(e,t){let n,r=Ae;function o(){i.onStateChange&&i.onStateChange()}function a(){n||(n=t?t.addNestedSub(o):e.subscribe(o),r=function(){const e=Ee();let t=null,n=null;return{clear(){t=null,n=null},notify(){e((()=>{let e=t;for(;e;)e.callback(),e=e.next}))},get(){let e=[],n=t;for(;n;)e.push(n),n=n.next;return e},subscribe(e){let r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())}const i={addNestedSub:function(e){return a(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:o,isSubscribed:function(){return Boolean(n)},trySubscribe:a,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=Ae)},getListeners:()=>r};return i}(e);return{store:e,subscription:t,getServerState:o?()=>o:void 0}}),[e,o]),i=(0,t.useMemo)((()=>e.getState()),[e]);Re((()=>{const{subscription:t}=a;return t.onStateChange=t.notifyNestedSubs,t.trySubscribe(),i!==e.getState()&&t.notifyNestedSubs(),()=>{t.tryUnsubscribe(),t.onStateChange=void 0}}),[a,i]);const l=n||Oe;return t.createElement(l.Provider,{value:a},r)};function De(e=Oe){const n=e===Oe?Ce:()=>(0,t.useContext)(e);return function(){const{store:e}=n();return e}}const $e=De();function Be(e=Oe){const t=e===Oe?$e:De(e);return function(){return t().dispatch}}const Ue=Be();var We;(e=>{Pe=e})(Se.useSyncExternalStoreWithSelector),(e=>{Fe=e})(xe.useSyncExternalStore),We=ke.unstable_batchedUpdates,je=We;var Ve=o.p+"7ac9efb47d97d6eaa210.svg",He=o(774),Ge=o.n(He),qe=function(e){function t(e,r,u,c,d){for(var p,h,m,v,w,S=0,k=0,j=0,E=0,O=0,z=0,T=m=p=0,R=0,F=0,M=0,D=0,$=u.length,B=$-1,U="",W="",V="",H="";R<$;){if(h=u.charCodeAt(R),R===B&&0!==k+E+j+S&&(0!==k&&(h=47===k?10:47),E=j=S=0,$++,B++),0===k+E+j+S){if(R===B&&(0<F&&(U=U.replace(f,"")),0<U.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:U+=u.charAt(R)}h=59}switch(h){case 123:for(p=(U=U.trim()).charCodeAt(0),m=1,D=++R;R<$;){switch(h=u.charCodeAt(R)){case 123:m++;break;case 125:m--;break;case 47:switch(h=u.charCodeAt(R+1)){case 42:case 47:e:{for(T=R+1;T<B;++T)switch(u.charCodeAt(T)){case 47:if(42===h&&42===u.charCodeAt(T-1)&&R+2!==T){R=T+1;break e}break;case 10:if(47===h){R=T+1;break e}}R=T}}break;case 91:h++;case 40:h++;case 34:case 39:for(;R++<B&&u.charCodeAt(R)!==h;);}if(0===m)break;R++}if(m=u.substring(D,R),0===p&&(p=(U=U.replace(s,"").trim()).charCodeAt(0)),64===p){switch(0<F&&(U=U.replace(f,"")),h=U.charCodeAt(1)){case 100:case 109:case 115:case 45:F=r;break;default:F=N}if(D=(m=t(r,F,m,h,d+1)).length,0<I&&(w=l(3,m,F=n(N,U,M),r,P,C,D,h,d,c),U=F.join(""),void 0!==w&&0===(D=(m=w.trim()).length)&&(h=0,m="")),0<D)switch(h){case 115:U=U.replace(x,i);case 100:case 109:case 45:m=U+"{"+m+"}";break;case 107:m=(U=U.replace(y,"$1 $2"))+"{"+m+"}",m=1===L||2===L&&a("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=U+m,112===c&&(W+=m,m="")}else m=""}else m=t(r,n(r,U,M),m,c,d+1);V+=m,m=M=F=T=p=0,U="",h=u.charCodeAt(++R);break;case 125:case 59:if(1<(D=(U=(0<F?U.replace(f,""):U).trim()).length))switch(0===T&&(p=U.charCodeAt(0),45===p||96<p&&123>p)&&(D=(U=U.replace(" ",":")).length),0<I&&void 0!==(w=l(1,U,r,e,P,C,W.length,c,d,c))&&0===(D=(U=w.trim()).length)&&(U="\0\0"),p=U.charCodeAt(0),h=U.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){H+=U+u.charAt(R);break}default:58!==U.charCodeAt(D-1)&&(W+=o(U,p,h,U.charCodeAt(2)))}M=F=T=p=0,U="",h=u.charCodeAt(++R)}}switch(h){case 13:case 10:47===k?k=0:0===1+p&&107!==c&&0<U.length&&(F=1,U+="\0"),0<I*A&&l(0,U,r,e,P,C,W.length,c,d,c),C=1,P++;break;case 59:case 125:if(0===k+E+j+S){C++;break}default:switch(C++,v=u.charAt(R),h){case 9:case 32:if(0===E+S+k)switch(O){case 44:case 58:case 9:case 32:v="";break;default:32!==h&&(v=" ")}break;case 0:v="\\0";break;case 12:v="\\f";break;case 11:v="\\v";break;case 38:0===E+k+S&&(F=M=1,v="\f"+v);break;case 108:if(0===E+k+S+_&&0<T)switch(R-T){case 2:112===O&&58===u.charCodeAt(R-3)&&(_=O);case 8:111===z&&(_=z)}break;case 58:0===E+k+S&&(T=R);break;case 44:0===k+j+E+S&&(F=1,v+="\r");break;case 34:case 39:0===k&&(E=E===h?0:0===E?h:E);break;case 91:0===E+k+j&&S++;break;case 93:0===E+k+j&&S--;break;case 41:0===E+k+S&&j--;break;case 40:0===E+k+S&&(0===p&&(2*O+3*z==533||(p=1)),j++);break;case 64:0===k+j+E+S+T+m&&(m=1);break;case 42:case 47:if(!(0<E+S+j))switch(k){case 0:switch(2*h+3*u.charCodeAt(R+1)){case 235:k=47;break;case 220:D=R,k=42}break;case 42:47===h&&42===O&&D+2!==R&&(33===u.charCodeAt(D+2)&&(W+=u.substring(D,R+1)),v="",k=0)}}0===k&&(U+=v)}z=O,O=h,R++}if(0<(D=W.length)){if(F=r,0<I&&void 0!==(w=l(2,W,F,e,P,C,D,c,d,c))&&0===(W=w).length)return H+W+V;if(W=F.join(",")+"{"+W+"}",0!=L*_){switch(2!==L||a(W,2)||(_=0),_){case 111:W=W.replace(b,":-moz-$1")+W;break;case 112:W=W.replace(g,"::-webkit-input-$1")+W.replace(g,"::-moz-$1")+W.replace(g,":-ms-input-$1")+W}_=0}}return H+W+V}function n(e,t,n){var o=t.trim().split(m);t=o;var a=o.length,i=e.length;switch(i){case 0:case 1:var l=0;for(e=0===i?"":e[0]+" ";l<a;++l)t[l]=r(e,t[l],n).trim();break;default:var u=l=0;for(t=[];l<a;++l)for(var c=0;c<i;++c)t[u++]=r(e[c]+" ",o[l],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(v,"$1"+e.trim());case 58:return e.trim()+t.replace(v,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(v,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var i=e+";",l=2*t+3*n+4*r;if(944===l){e=i.indexOf(":",9)+1;var u=i.substring(e,i.length-1).trim();return u=i.substring(0,e).trim()+u+";",1===L||2===L&&a(u,1)?"-webkit-"+u+u:u}if(0===L||2===L&&!a(i,1))return i;switch(l){case 1015:return 97===i.charCodeAt(10)?"-webkit-"+i+i:i;case 951:return 116===i.charCodeAt(3)?"-webkit-"+i+i:i;case 963:return 110===i.charCodeAt(5)?"-webkit-"+i+i:i;case 1009:if(100!==i.charCodeAt(4))break;case 969:case 942:return"-webkit-"+i+i;case 978:return"-webkit-"+i+"-moz-"+i+i;case 1019:case 983:return"-webkit-"+i+"-moz-"+i+"-ms-"+i+i;case 883:if(45===i.charCodeAt(8))return"-webkit-"+i+i;if(0<i.indexOf("image-set(",11))return i.replace(O,"$1-webkit-$2")+i;break;case 932:if(45===i.charCodeAt(4))switch(i.charCodeAt(5)){case 103:return"-webkit-box-"+i.replace("-grow","")+"-webkit-"+i+"-ms-"+i.replace("grow","positive")+i;case 115:return"-webkit-"+i+"-ms-"+i.replace("shrink","negative")+i;case 98:return"-webkit-"+i+"-ms-"+i.replace("basis","preferred-size")+i}return"-webkit-"+i+"-ms-"+i+i;case 964:return"-webkit-"+i+"-ms-flex-"+i+i;case 1023:if(99!==i.charCodeAt(8))break;return"-webkit-box-pack"+(u=i.substring(i.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+i+"-ms-flex-pack"+u+i;case 1005:return p.test(i)?i.replace(d,":-webkit-")+i.replace(d,":-moz-")+i:i;case 1e3:switch(t=(u=i.substring(13).trim()).indexOf("-")+1,u.charCodeAt(0)+u.charCodeAt(t)){case 226:u=i.replace(w,"tb");break;case 232:u=i.replace(w,"tb-rl");break;case 220:u=i.replace(w,"lr");break;default:return i}return"-webkit-"+i+"-ms-"+u+i;case 1017:if(-1===i.indexOf("sticky",9))break;case 975:switch(t=(i=e).length-10,l=(u=(33===i.charCodeAt(t)?i.substring(0,t):i).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|u.charCodeAt(7))){case 203:if(111>u.charCodeAt(8))break;case 115:i=i.replace(u,"-webkit-"+u)+";"+i;break;case 207:case 102:i=i.replace(u,"-webkit-"+(102<l?"inline-":"")+"box")+";"+i.replace(u,"-webkit-"+u)+";"+i.replace(u,"-ms-"+u+"box")+";"+i}return i+";";case 938:if(45===i.charCodeAt(5))switch(i.charCodeAt(6)){case 105:return u=i.replace("-items",""),"-webkit-"+i+"-webkit-box-"+u+"-ms-flex-"+u+i;case 115:return"-webkit-"+i+"-ms-flex-item-"+i.replace(k,"")+i;default:return"-webkit-"+i+"-ms-flex-line-pack"+i.replace("align-content","").replace(k,"")+i}break;case 973:case 989:if(45!==i.charCodeAt(3)||122===i.charCodeAt(4))break;case 931:case 953:if(!0===E.test(e))return 115===(u=e.substring(e.indexOf(":")+1)).charCodeAt(0)?o(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):i.replace(u,"-webkit-"+u)+i.replace(u,"-moz-"+u.replace("fill-",""))+i;break;case 962:if(i="-webkit-"+i+(102===i.charCodeAt(5)?"-ms-"+i:"")+i,211===n+r&&105===i.charCodeAt(13)&&0<i.indexOf("transform",10))return i.substring(0,i.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+i}return i}function a(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),T(2!==t?r:r.replace(j,"$1"),n,t)}function i(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(S," or ($1)").substring(4):"("+t+")"}function l(e,t,n,r,o,a,i,l,u,s){for(var f,d=0,p=t;d<I;++d)switch(f=z[d].call(c,e,p,n,r,o,a,i,l,u,s)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function u(e){return void 0!==(e=e.prefix)&&(T=null,e?"function"!=typeof e?L=1:(L=2,T=e):L=0),u}function c(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<I){var o=l(-1,n,r,r,P,C,0,0,0,0);void 0!==o&&"string"==typeof o&&(n=o)}var a=t(N,r,n,0,0);return 0<I&&void 0!==(o=l(-2,a,r,r,P,C,a.length,0,0,0))&&(a=o),_=0,C=P=1,a}var s=/^\0+/g,f=/[\0\r\f]/g,d=/: */g,p=/zoo|gra/,h=/([,: ])(transform)/g,m=/,\r+?/g,v=/([\t\r\n ])*\f?&/g,y=/@(k\w+)\s*(\S*)\s*/,g=/::(place)/g,b=/:(read-only)/g,w=/[svh]\w+-[tblr]{2}/,x=/\(\s*(.*)\s*\)/g,S=/([\s\S]*?);/g,k=/-self|flex-/g,j=/[^]*?(:[rp][el]a[\w-]+)[^]*/,E=/stretch|:\s*\w+\-(?:conte|avail)/,O=/([^-])(image-set\()/,C=1,P=1,_=0,L=1,N=[],z=[],I=0,T=null,A=0;return c.use=function e(t){switch(t){case void 0:case null:I=z.length=0;break;default:if("function"==typeof t)z[I++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else A=0|!!t}return e},c.set=u,void 0!==e&&u(e),c},Qe={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},Ye=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}},Ke=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,Xe=Ye((function(e){return Ke.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));function Je(){return(Je=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Ze=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},et=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,Te.typeOf)(e)},tt=Object.freeze([]),nt=Object.freeze({});function rt(e){return"function"==typeof e}function ot(e){return e.displayName||e.name||"Component"}function at(e){return e&&"string"==typeof e.styledComponentId}var it="undefined"!=typeof process&&void 0!==process.env&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",lt="undefined"!=typeof window&&"HTMLElement"in window,ut=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env&&(void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY)),ct={};function st(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var ft=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&st(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var a=r;a<o;a++)this.groupSizes[a]=0}for(var i=this.indexOfGroup(e+1),l=0,u=t.length;l<u;l++)this.tag.insertRule(i,t[l])&&(this.groupSizes[e]++,i++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,a=r;a<o;a++)t+=this.tag.getRule(a)+"/*!sc*/\n";return t},e}(),dt=new Map,pt=new Map,ht=1,mt=function(e){if(dt.has(e))return dt.get(e);for(;pt.has(ht);)ht++;var t=ht++;return dt.set(e,t),pt.set(t,e),t},vt=function(e){return pt.get(e)},yt=function(e,t){t>=ht&&(ht=t+1),dt.set(e,t),pt.set(t,e)},gt="style["+it+'][data-styled-version="5.3.8"]',bt=new RegExp("^"+it+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),wt=function(e,t,n){for(var r,o=n.split(","),a=0,i=o.length;a<i;a++)(r=o[a])&&e.registerName(t,r)},xt=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),r=[],o=0,a=n.length;o<a;o++){var i=n[o].trim();if(i){var l=i.match(bt);if(l){var u=0|parseInt(l[1],10),c=l[2];0!==u&&(yt(c,u),wt(e,c,l[3]),e.getTag().insertRules(u,r)),r.length=0}else r.push(i)}}},St=function(){return o.nc},kt=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(it))return r}}(n),a=void 0!==o?o.nextSibling:null;r.setAttribute(it,"active"),r.setAttribute("data-styled-version","5.3.8");var i=St();return i&&r.setAttribute("nonce",i),n.insertBefore(r,a),r},jt=function(){function e(e){var t=this.element=kt(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}st(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),Et=function(){function e(e){var t=this.element=kt(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),Ot=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),Ct=lt,Pt={isServer:!lt,useCSSOMInjection:!ut},_t=function(){function e(e,t,n){void 0===e&&(e=nt),void 0===t&&(t={}),this.options=Je({},Pt,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&lt&&Ct&&(Ct=!1,function(e){for(var t=document.querySelectorAll(gt),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(it)&&(xt(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return mt(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(Je({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new Ot(o):r?new jt(o):new Et(o),new ft(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(mt(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(mt(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(mt(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var a=vt(o);if(void 0!==a){var i=e.names.get(a),l=t.getGroup(o);if(i&&l&&i.size){var u=it+".g"+o+'[id="'+a+'"]',c="";void 0!==i&&i.forEach((function(e){e.length>0&&(c+=e+",")})),r+=""+l+u+'{content:"'+c+'"}/*!sc*/\n'}}}return r}(this)},e}(),Lt=/(a)(d)/gi,Nt=function(e){return String.fromCharCode(e+(e>25?39:97))};function zt(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=Nt(t%52)+n;return(Nt(t%52)+n).replace(Lt,"$1-$2")}var It=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},Tt=function(e){return It(5381,e)};function At(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(rt(n)&&!at(n))return!1}return!0}var Rt=Tt("5.3.8"),Ft=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&At(e),this.componentId=t,this.baseHash=It(Rt,t),this.baseStyle=n,_t.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var a=tn(this.rules,e,t,n).join(""),i=zt(It(this.baseHash,a)>>>0);if(!t.hasNameForId(r,i)){var l=n(a,"."+i,void 0,r);t.insertRules(r,i,l)}o.push(i),this.staticRulesId=i}else{for(var u=this.rules.length,c=It(this.baseHash,n.hash),s="",f=0;f<u;f++){var d=this.rules[f];if("string"==typeof d)s+=d;else if(d){var p=tn(d,e,t,n),h=Array.isArray(p)?p.join(""):p;c=It(c,h+f),s+=h}}if(s){var m=zt(c>>>0);if(!t.hasNameForId(r,m)){var v=n(s,"."+m,void 0,r);t.insertRules(r,m,v)}o.push(m)}}return o.join(" ")},e}(),Mt=/^\s*\/\/.*$/gm,Dt=[":","[",".","#"];function $t(e){var t,n,r,o,a=void 0===e?nt:e,i=a.options,l=void 0===i?nt:i,u=a.plugins,c=void 0===u?tt:u,s=new qe(l),f=[],d=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,a,i,l,u,c,s,f){switch(n){case 1:if(0===s&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===c)return r+"/*|*/";break;case 3:switch(c){case 102:case 112:return e(o[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){f.push(e)})),p=function(e,r,a){return 0===r&&-1!==Dt.indexOf(a[n.length])||a.match(o)?e:"."+t};function h(e,a,i,l){void 0===l&&(l="&");var u=e.replace(Mt,""),c=a&&i?i+" "+a+" { "+u+" }":u;return t=l,n=a,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),s(i||!a?"":a,c)}return s.use([].concat(c,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,p))},d,function(e){if(-2===e){var t=f;return f=[],t}}])),h.hash=c.length?c.reduce((function(e,t){return t.name||st(15),It(e,t.name)}),5381).toString():"",h}var Bt=t.createContext(),Ut=(Bt.Consumer,t.createContext()),Wt=(Ut.Consumer,new _t),Vt=$t();function Ht(){return(0,t.useContext)(Bt)||Wt}function Gt(){return(0,t.useContext)(Ut)||Vt}function qt(e){var n=(0,t.useState)(e.stylisPlugins),r=n[0],o=n[1],a=Ht(),i=(0,t.useMemo)((function(){var t=a;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),l=(0,t.useMemo)((function(){return $t({options:{prefix:!e.disableVendorPrefixes},plugins:r})}),[e.disableVendorPrefixes,r]);return(0,t.useEffect)((function(){Ge()(r,e.stylisPlugins)||o(e.stylisPlugins)}),[e.stylisPlugins]),t.createElement(Bt.Provider,{value:i},t.createElement(Ut.Provider,{value:l},e.children))}var Qt=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=Vt);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return st(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=Vt),this.name+e.hash},e}(),Yt=/([A-Z])/,Kt=/([A-Z])/g,Xt=/^ms-/,Jt=function(e){return"-"+e.toLowerCase()};function Zt(e){return Yt.test(e)?e.replace(Kt,Jt).replace(Xt,"-ms-"):e}var en=function(e){return null==e||!1===e||""===e};function tn(e,t,n,r){if(Array.isArray(e)){for(var o,a=[],i=0,l=e.length;i<l;i+=1)""!==(o=tn(e[i],t,n,r))&&(Array.isArray(o)?a.push.apply(a,o):a.push(o));return a}return en(e)?"":at(e)?"."+e.styledComponentId:rt(e)?"function"!=typeof(u=e)||u.prototype&&u.prototype.isReactComponent||!t?e:tn(e(t),t,n,r):e instanceof Qt?n?(e.inject(n,r),e.getName(r)):e:et(e)?function e(t,n){var r,o,a=[];for(var i in t)t.hasOwnProperty(i)&&!en(t[i])&&(Array.isArray(t[i])&&t[i].isCss||rt(t[i])?a.push(Zt(i)+":",t[i],";"):et(t[i])?a.push.apply(a,e(t[i],i)):a.push(Zt(i)+": "+(r=i,(null==(o=t[i])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in Qe?String(o).trim():o+"px")+";")));return n?[n+" {"].concat(a,["}"]):a}(e):e.toString();var u}var nn=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function rn(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return rt(e)||et(e)?nn(tn(Ze(tt,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:nn(tn(Ze(e,n)))}new Set;var on=function(e,t,n){return void 0===n&&(n=nt),e.theme!==n.theme&&e.theme||t||n.theme},an=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,ln=/(^-|-$)/g;function un(e){return e.replace(an,"-").replace(ln,"")}var cn=function(e){return zt(Tt(e)>>>0)};function sn(e){return"string"==typeof e&&!0}var fn=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},dn=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function pn(e,t,n){var r=e[n];fn(t)&&fn(r)?hn(r,t):e[n]=t}function hn(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,a=n;o<a.length;o++){var i=a[o];if(fn(i))for(var l in i)dn(l)&&pn(e,i[l],l)}return e}var mn=t.createContext();function vn(e){var n=(0,t.useContext)(mn),r=(0,t.useMemo)((function(){return function(e,t){return e?rt(e)?e(t):Array.isArray(e)||"object"!=typeof e?st(8):t?Je({},t,{},e):e:st(14)}(e.theme,n)}),[e.theme,n]);return e.children?t.createElement(mn.Provider,{value:r},e.children):null}mn.Consumer;var yn={};function gn(e,n,r){var o=at(e),a=!sn(e),i=n.attrs,l=void 0===i?tt:i,u=n.componentId,c=void 0===u?function(e,t){var n="string"!=typeof e?"sc":un(e);yn[n]=(yn[n]||0)+1;var r=n+"-"+cn("5.3.8"+n+yn[n]);return t?t+"-"+r:r}(n.displayName,n.parentComponentId):u,s=n.displayName,f=void 0===s?function(e){return sn(e)?"styled."+e:"Styled("+ot(e)+")"}(e):s,d=n.displayName&&n.componentId?un(n.displayName)+"-"+n.componentId:n.componentId||c,p=o&&e.attrs?Array.prototype.concat(e.attrs,l).filter(Boolean):l,h=n.shouldForwardProp;o&&e.shouldForwardProp&&(h=n.shouldForwardProp?function(t,r,o){return e.shouldForwardProp(t,r,o)&&n.shouldForwardProp(t,r,o)}:e.shouldForwardProp);var m,v=new Ft(r,d,o?e.componentStyle:void 0),y=v.isStatic&&0===l.length,g=function(e,n){return function(e,n,r,o){var a=e.attrs,i=e.componentStyle,l=e.defaultProps,u=e.foldedComponentIds,c=e.shouldForwardProp,s=e.styledComponentId,f=e.target,d=function(e,t,n){void 0===e&&(e=nt);var r=Je({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,a,i=e;for(t in rt(i)&&(i=i(r)),i)r[t]=o[t]="className"===t?(n=o[t],a=i[t],n&&a?n+" "+a:n||a):i[t]})),[r,o]}(on(n,(0,t.useContext)(mn),l)||nt,n,a),p=d[0],h=d[1],m=function(e,t,n,r){var o=Ht(),a=Gt();return t?e.generateAndInjectStyles(nt,o,a):e.generateAndInjectStyles(n,o,a)}(i,o,p),v=r,y=h.$as||n.$as||h.as||n.as||f,g=sn(y),b=h!==n?Je({},n,{},h):n,w={};for(var x in b)"$"!==x[0]&&"as"!==x&&("forwardedAs"===x?w.as=b[x]:(c?c(x,Xe,y):!g||Xe(x))&&(w[x]=b[x]));return n.style&&h.style!==n.style&&(w.style=Je({},n.style,{},h.style)),w.className=Array.prototype.concat(u,s,m!==s?m:null,n.className,h.className).filter(Boolean).join(" "),w.ref=v,(0,t.createElement)(y,w)}(m,e,n,y)};return g.displayName=f,(m=t.forwardRef(g)).attrs=p,m.componentStyle=v,m.displayName=f,m.shouldForwardProp=h,m.foldedComponentIds=o?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):tt,m.styledComponentId=d,m.target=o?e.target:e,m.withComponent=function(e){var t=n.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(n,["componentId"]),a=t&&t+"-"+(sn(e)?e:un(ot(e)));return gn(e,Je({},o,{attrs:p,componentId:a}),r)},Object.defineProperty(m,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=o?hn({},e.defaultProps,t):t}}),m.toString=function(){return"."+m.styledComponentId},a&&Ie()(m,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),m}var bn=function(e){return function e(t,n,r){if(void 0===r&&(r=nt),!(0,Te.isValidElementType)(n))return st(1,String(n));var o=function(){return t(n,r,rn.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,Je({},r,{},o))},o.attrs=function(o){return e(t,n,Je({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}(gn,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){bn[e]=bn(e)}));var wn=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=At(e),_t.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(tn(this.rules,t,n,r).join(""),""),a=this.componentId+e;n.insertRules(a,a,o)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,r){e>2&&_t.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},e}();function xn(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];var a=rn.apply(void 0,[e].concat(r)),i="sc-global-"+cn(JSON.stringify(a)),l=new wn(a,i);function u(e){var n=Ht(),r=Gt(),o=(0,t.useContext)(mn),a=(0,t.useRef)(n.allocateGSInstance(i)).current;return n.server&&c(a,e,n,o,r),(0,t.useLayoutEffect)((function(){if(!n.server)return c(a,e,n,o,r),function(){return l.removeStyles(a,n)}}),[a,e,n,o,r]),null}function c(e,t,n,r,o){if(l.isStatic)l.renderStyles(e,ct,n,o);else{var a=Je({},t,{theme:on(t,r,u.defaultProps)});l.renderStyles(e,a,n,o)}}return t.memo(u)}!function(){var e=function(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return"";var n=St();return"<style "+[n&&'nonce="'+n+'"',it+'="true"','data-styled-version="5.3.8"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?st(2):e._emitSheetCSS()},this.getStyleElement=function(){var n;if(e.sealed)return st(2);var r=((n={})[it]="",n["data-styled-version"]="5.3.8",n.dangerouslySetInnerHTML={__html:e.instance.toString()},n),o=St();return o&&(r.nonce=o),[t.createElement("style",Je({},r,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new _t({isServer:!0}),this.sealed=!1}.prototype;e.collectStyles=function(e){return this.sealed?st(2):t.createElement(qt,{sheet:this.instance},e)},e.interleaveWithNodeStream=function(e){return st(3)}}();var Sn,kn,jn,En,On,Cn,Pn,_n,Ln,Nn=bn,zn=Nn.div(Sn||(kn=["\n  width: 100%;\n  max-width: 1440px;\n  margin: 0 auto;\n  padding: ",";\n\n  @media(max-width: 89.94em) {\n    padding: ",";\n  }\n\n  @media(max-width: 63.94em) {\n    padding: ",";\n  }\n\n  @media(max-width: 47.94em) {\n    padding: ",";\n  }\n"],jn||(jn=kn.slice(0)),Sn=Object.freeze(Object.defineProperties(kn,{raw:{value:Object.freeze(jn)}}))),(function(e){return e.theme.indent}),(function(e){return e.theme.indentDesktop}),(function(e){return e.theme.indentTablet}),(function(e){return e.theme.indentMobile}));function In(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Tn,An,Rn,Fn,Mn=rn(En||(En=In(["\n  font-family: ",";\n  font-style: normal;\n  font-weight: 400;\n"])),(function(e){return e.theme.ffPermanentMarker})),Dn=(rn(On||(On=In(["\n  font-family: ",";\n  font-style: normal;\n  font-weight: 400;\n"])),(function(e){return e.theme.ffInter})),rn(Cn||(Cn=In(["\n  font-family: ",";\n  font-style: normal;\n  font-weight: 500;\n"])),(function(e){return e.theme.ffInter}))),$n=rn(Pn||(Pn=In(["\n  font-family: ",";\n  font-style: normal;\n  font-weight: 900;\n"])),(function(e){return e.theme.ffInter})),Bn=rn(_n||(_n=In(["\n  margin: 0;\n\n  ",";\n  font-size: 2em;\n  line-height: 115%;\n  text-align: center;\n  color: #ee5c07;\n\n  @media(max-width: 63.94em) {\n    font-size: 1.5em;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 1.1em;\n  }\n"])),$n),Un=rn(Ln||(Ln=In(["\n  font-size: 1.5em;\n  line-height: 150%;\n  display: block;\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n  border: none;\n  border-radius: 5px;\n\n  align-self: end;\n\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    opacity: 0.8;\n  }\n\n  @media(max-width: 89.94em) {\n    padding: 15px;\n  }\n\n  @media(max-width: 63.94em) {\n    padding: 10px;\n    font-size: 1em;\n  }\n\n  @media(max-width: 47.94em) {\n    padding: 7px;\n    font-size: 0.7em;\n  }\n"])));function Wn(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Vn,Hn,Gn=Nn.header(Tn||(Tn=Wn(["\n  width: 100%;\n  position: sticky;\n  top: -1px;\n  left: 0;\n  z-index: 1;\n  background-color: ",";\n  box-shadow: 0px 6px 18px 0px #d5d1ea;\n"])),(function(e){return e.theme.colorWhite})),qn=Nn(zn)(An||(An=Wn(["\n  padding-top: 20px;\n  padding-bottom: 20px;\n\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  @media(max-width: 63.94em) {\n    padding-top: 15px;\n    padding-bottom: 15px;\n  }\n"]))),Qn=Nn(ge)(Rn||(Rn=Wn(["\n  ",";\n  font-size: 1.5em;\n  color: #817abf;\n\n  &:hover {\n    opacity: 0.5;\n  }\n\n  @media(max-width: 47.94em) {\n    &:hover {\n      opacity: 1;\n    }\n  }\n"])),Mn),Yn=Nn(ge)(Fn||(Fn=Wn(["\n  padding: 10px;\n  border-radius: 5px;\n\n  &:hover {\n    background-color: #c1bde2;\n  }\n\n  @media(max-width: 47.94em) {\n    &:hover {\n      background-color: #ffffff;\n    }\n  }\n"]))),Kn=o(893),Xn=function(){return(0,Kn.jsx)(Gn,{children:(0,Kn.jsxs)(qn,{children:[(0,Kn.jsx)(Qn,{to:"/",children:"Beer"}),(0,Kn.jsx)(Yn,{to:"/basket",children:(0,Kn.jsx)("img",{src:Ve,alt:"basket",width:40,height:40})})]})})};function Jn(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Zn=Nn.footer(Vn||(Vn=Jn(["\n  width: 100%;\n  background-color: #817abf;\n"]))),er=Nn(zn)(Hn||(Hn=Jn(["\n  padding-top: 10px;\n  padding-bottom: 10px;\n\n  color: ",";\n\n  display: grid;\n  justify-content: end;\n"])),(function(e){return e.theme.colorWhite})),tr=function(){return(0,Kn.jsx)(Zn,{children:(0,Kn.jsx)(er,{children:(0,Kn.jsx)("p",{children:"Copyright @D.Stolyarova"})})})};function nr(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function rr(e){return!!e&&!!e[Wr]}function or(e){var t;return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===Vr}(e)||Array.isArray(e)||!!e[Ur]||!!(null===(t=e.constructor)||void 0===t?void 0:t[Ur])||sr(e)||fr(e))}function ar(e,t,n){void 0===n&&(n=!1),0===ir(e)?(n?Object.keys:Hr)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function ir(e){var t=e[Wr];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:sr(e)?2:fr(e)?3:0}function lr(e,t){return 2===ir(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function ur(e,t,n){var r=ir(e);2===r?e.set(t,n):3===r?e.add(n):e[t]=n}function cr(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function sr(e){return Mr&&e instanceof Map}function fr(e){return Dr&&e instanceof Set}function dr(e){return e.o||e.t}function pr(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=Gr(e);delete t[Wr];for(var n=Hr(t),r=0;r<n.length;r++){var o=n[r],a=t[o];!1===a.writable&&(a.writable=!0,a.configurable=!0),(a.get||a.set)&&(t[o]={configurable:!0,writable:!0,enumerable:a.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function hr(e,t){return void 0===t&&(t=!1),vr(e)||rr(e)||!or(e)||(ir(e)>1&&(e.set=e.add=e.clear=e.delete=mr),Object.freeze(e),t&&ar(e,(function(e,t){return hr(t,!0)}),!0)),e}function mr(){nr(2)}function vr(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function yr(e){var t=qr[e];return t||nr(18,e),t}function gr(){return Rr}function br(e,t){t&&(yr("Patches"),e.u=[],e.s=[],e.v=t)}function wr(e){xr(e),e.p.forEach(kr),e.p=null}function xr(e){e===Rr&&(Rr=e.l)}function Sr(e){return Rr={p:[],l:Rr,h:e,m:!0,_:0}}function kr(e){var t=e[Wr];0===t.i||1===t.i?t.j():t.g=!0}function jr(e,t){t._=t.p.length;var n=t.p[0],r=void 0!==e&&e!==n;return t.h.O||yr("ES5").S(t,e,r),r?(n[Wr].P&&(wr(t),nr(4)),or(e)&&(e=Er(t,e),t.l||Cr(t,e)),t.u&&yr("Patches").M(n[Wr].t,e,t.u,t.s)):e=Er(t,n,[]),wr(t),t.u&&t.v(t.u,t.s),e!==Br?e:void 0}function Er(e,t,n){if(vr(t))return t;var r=t[Wr];if(!r)return ar(t,(function(o,a){return Or(e,r,t,o,a,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return Cr(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=pr(r.k):r.o,a=o,i=!1;3===r.i&&(a=new Set(o),o.clear(),i=!0),ar(a,(function(t,a){return Or(e,r,o,t,a,n,i)})),Cr(e,o,!1),n&&e.u&&yr("Patches").N(r,n,e.u,e.s)}return r.o}function Or(e,t,n,r,o,a,i){if(rr(o)){var l=Er(e,o,a&&t&&3!==t.i&&!lr(t.R,r)?a.concat(r):void 0);if(ur(n,r,l),!rr(l))return;e.m=!1}else i&&n.add(o);if(or(o)&&!vr(o)){if(!e.h.D&&e._<1)return;Er(e,o),t&&t.A.l||Cr(e,o)}}function Cr(e,t,n){void 0===n&&(n=!1),!e.l&&e.h.D&&e.m&&hr(t,n)}function Pr(e,t){var n=e[Wr];return(n?dr(n):e)[t]}function _r(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function Lr(e){e.P||(e.P=!0,e.l&&Lr(e.l))}function Nr(e){e.o||(e.o=pr(e.t))}function zr(e,t,n){var r=sr(t)?yr("MapSet").F(t,n):fr(t)?yr("MapSet").T(t,n):e.O?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:gr(),P:!1,I:!1,R:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,a=Qr;n&&(o=[r],a=Yr);var i=Proxy.revocable(o,a),l=i.revoke,u=i.proxy;return r.k=u,r.j=l,u}(t,n):yr("ES5").J(t,n);return(n?n.A:gr()).p.push(r),r}function Ir(e){return rr(e)||nr(22,e),function e(t){if(!or(t))return t;var n,r=t[Wr],o=ir(t);if(r){if(!r.P&&(r.i<4||!yr("ES5").K(r)))return r.t;r.I=!0,n=Tr(t,o),r.I=!1}else n=Tr(t,o);return ar(n,(function(t,o){r&&function(e,t){return 2===ir(e)?e.get(t):e[t]}(r.t,t)===o||ur(n,t,e(o))})),3===o?new Set(n):n}(e)}function Tr(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return pr(e)}var Ar,Rr,Fr="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),Mr="undefined"!=typeof Map,Dr="undefined"!=typeof Set,$r="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,Br=Fr?Symbol.for("immer-nothing"):((Ar={})["immer-nothing"]=!0,Ar),Ur=Fr?Symbol.for("immer-draftable"):"__$immer_draftable",Wr=Fr?Symbol.for("immer-state"):"__$immer_state",Vr=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),Hr="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,Gr=Object.getOwnPropertyDescriptors||function(e){var t={};return Hr(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},qr={},Qr={get:function(e,t){if(t===Wr)return e;var n=dr(e);if(!lr(n,t))return function(e,t,n){var r,o=_r(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!or(r)?r:r===Pr(e.t,t)?(Nr(e),e.o[t]=zr(e.A.h,r,e)):r},has:function(e,t){return t in dr(e)},ownKeys:function(e){return Reflect.ownKeys(dr(e))},set:function(e,t,n){var r=_r(dr(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=Pr(dr(e),t),a=null==o?void 0:o[Wr];if(a&&a.t===n)return e.o[t]=n,e.R[t]=!1,!0;if(cr(n,o)&&(void 0!==n||lr(e.t,t)))return!0;Nr(e),Lr(e)}return e.o[t]===n&&(void 0!==n||t in e.o)||Number.isNaN(n)&&Number.isNaN(e.o[t])||(e.o[t]=n,e.R[t]=!0),!0},deleteProperty:function(e,t){return void 0!==Pr(e.t,t)||t in e.t?(e.R[t]=!1,Nr(e),Lr(e)):delete e.R[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=dr(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){nr(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){nr(12)}},Yr={};ar(Qr,(function(e,t){Yr[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),Yr.deleteProperty=function(e,t){return Yr.set.call(this,e,t,void 0)},Yr.set=function(e,t,n){return Qr.set.call(this,e[0],t,n,e[0])};var Kr=function(){function e(e){var t=this;this.O=$r,this.D=!0,this.produce=function(e,n,r){if("function"==typeof e&&"function"!=typeof n){var o=n;n=e;var a=t;return function(e){var t=this;void 0===e&&(e=o);for(var r=arguments.length,i=Array(r>1?r-1:0),l=1;l<r;l++)i[l-1]=arguments[l];return a.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(i))}))}}var i;if("function"!=typeof n&&nr(6),void 0!==r&&"function"!=typeof r&&nr(7),or(e)){var l=Sr(t),u=zr(t,e,void 0),c=!0;try{i=n(u),c=!1}finally{c?wr(l):xr(l)}return"undefined"!=typeof Promise&&i instanceof Promise?i.then((function(e){return br(l,r),jr(e,l)}),(function(e){throw wr(l),e})):(br(l,r),jr(i,l))}if(!e||"object"!=typeof e){if(void 0===(i=n(e))&&(i=e),i===Br&&(i=void 0),t.D&&hr(i,!0),r){var s=[],f=[];yr("Patches").M(e,i,s,f),r(s,f)}return i}nr(21,e)},this.produceWithPatches=function(e,n){if("function"==typeof e)return function(n){for(var r=arguments.length,o=Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(o))}))};var r,o,a=t.produce(e,n,(function(e,t){r=e,o=t}));return"undefined"!=typeof Promise&&a instanceof Promise?a.then((function(e){return[e,r,o]})):[a,r,o]},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){or(e)||nr(8),rr(e)&&(e=Ir(e));var t=Sr(this),n=zr(this,e,void 0);return n[Wr].C=!0,xr(t),n},t.finishDraft=function(e,t){var n=(e&&e[Wr]).A;return br(n,t),jr(void 0,n)},t.setAutoFreeze=function(e){this.D=e},t.setUseProxies=function(e){e&&!$r&&nr(20),this.O=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));var o=yr("Patches").$;return rr(e)?o(e,t):this.produce(e,(function(e){return o(e,t)}))},e}(),Xr=new Kr,Jr=Xr.produce,Zr=(Xr.produceWithPatches.bind(Xr),Xr.setAutoFreeze.bind(Xr),Xr.setUseProxies.bind(Xr),Xr.applyPatches.bind(Xr),Xr.createDraft.bind(Xr),Xr.finishDraft.bind(Xr),Jr),eo="NOT_FOUND",to=function(e,t){return e===t};function no(e,t){var n,r,o="object"==typeof t?t:{equalityCheck:t},a=o.equalityCheck,i=void 0===a?to:a,l=o.maxSize,u=void 0===l?1:l,c=o.resultEqualityCheck,s=function(e){return function(t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,o=0;o<r;o++)if(!e(t[o],n[o]))return!1;return!0}}(i),f=1===u?(n=s,{get:function(e){return r&&n(r.key,e)?r.value:eo},put:function(e,t){r={key:e,value:t}},getEntries:function(){return r?[r]:[]},clear:function(){r=void 0}}):function(e,t){var n=[];function r(e){var r=n.findIndex((function(n){return t(e,n.key)}));if(r>-1){var o=n[r];return r>0&&(n.splice(r,1),n.unshift(o)),o.value}return eo}return{get:r,put:function(t,o){r(t)===eo&&(n.unshift({key:t,value:o}),n.length>e&&n.pop())},getEntries:function(){return n},clear:function(){n=[]}}}(u,s);function d(){var t=f.get(arguments);if(t===eo){if(t=e.apply(null,arguments),c){var n=f.getEntries().find((function(e){return c(e.value,t)}));n&&(t=n.value)}f.put(arguments,t)}return t}return d.clearCache=function(){return f.clear()},d}function ro(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){for(var t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];var a,i=0,l={memoizeOptions:void 0},u=r.pop();if("object"==typeof u&&(l=u,u=r.pop()),"function"!=typeof u)throw new Error("createSelector expects an output function after the inputs, but received: ["+typeof u+"]");var c=l.memoizeOptions,s=void 0===c?n:c,f=Array.isArray(s)?s:[s],d=function(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return"function"==typeof e?"function "+(e.name||"unnamed")+"()":typeof e})).join(", ");throw new Error("createSelector expects all input-selectors to be functions, but received the following types: ["+n+"]")}return t}(r),p=e.apply(void 0,[function(){return i++,u.apply(null,arguments)}].concat(f)),h=e((function(){for(var e=[],t=d.length,n=0;n<t;n++)e.push(d[n].apply(null,arguments));return a=p.apply(null,e)}));return Object.assign(h,{resultFunc:u,memoizedResultFunc:p,dependencies:d,lastResult:function(){return a},recomputations:function(){return i},resetRecomputations:function(){return i=0}}),h}}var oo=ro(no);function ao(e){return ao="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ao(e)}function io(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==ao(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==ao(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ao(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function lo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function uo(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?lo(Object(n),!0).forEach((function(t){io(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):lo(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function co(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var so="function"==typeof Symbol&&Symbol.observable||"@@observable",fo=function(){return Math.random().toString(36).substring(7).split("").join(".")},po={INIT:"@@redux/INIT"+fo(),REPLACE:"@@redux/REPLACE"+fo(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+fo()}};function ho(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(co(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(co(1));return n(ho)(e,t)}if("function"!=typeof e)throw new Error(co(2));var o=e,a=t,i=[],l=i,u=!1;function c(){l===i&&(l=i.slice())}function s(){if(u)throw new Error(co(3));return a}function f(e){if("function"!=typeof e)throw new Error(co(4));if(u)throw new Error(co(5));var t=!0;return c(),l.push(e),function(){if(t){if(u)throw new Error(co(6));t=!1,c();var n=l.indexOf(e);l.splice(n,1),i=null}}}function d(e){if(!function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}(e))throw new Error(co(7));if(void 0===e.type)throw new Error(co(8));if(u)throw new Error(co(9));try{u=!0,a=o(a,e)}finally{u=!1}for(var t=i=l,n=0;n<t.length;n++)(0,t[n])();return e}return d({type:po.INIT}),(r={dispatch:d,subscribe:f,getState:s,replaceReducer:function(e){if("function"!=typeof e)throw new Error(co(10));o=e,d({type:po.REPLACE})}})[so]=function(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(co(11));function n(){e.next&&e.next(s())}return n(),{unsubscribe:t(n)}}})[so]=function(){return this},e},r}function mo(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function vo(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(co(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(o)}));return r=mo.apply(void 0,a)(n.dispatch),uo(uo({},n),{},{dispatch:r})}}}function yo(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var go=yo();go.withExtraArgument=yo;var bo,wo=go,xo=(bo=function(e,t){return bo=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},bo(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}bo(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),So=function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e},ko=Object.defineProperty,jo=Object.defineProperties,Eo=Object.getOwnPropertyDescriptors,Oo=Object.getOwnPropertySymbols,Co=Object.prototype.hasOwnProperty,Po=Object.prototype.propertyIsEnumerable,_o=function(e,t,n){return t in e?ko(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n},Lo=function(e,t){for(var n in t||(t={}))Co.call(t,n)&&_o(e,n,t[n]);if(Oo)for(var r=0,o=Oo(t);r<o.length;r++)n=o[r],Po.call(t,n)&&_o(e,n,t[n]);return e},No=function(e,t){return jo(e,Eo(t))},zo=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=oo.apply(void 0,e);return function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];return n.apply(void 0,So([rr(e)?Ir(e):e],t))}},Io="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?mo:mo.apply(null,arguments)};function To(e){if("object"!=typeof e||null===e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;for(var n=t;null!==Object.getPrototypeOf(n);)n=Object.getPrototypeOf(n);return t===n}"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;var Ao=function(e){function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=e.apply(this,n)||this;return Object.setPrototypeOf(o,t.prototype),o}return xo(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,So([void 0],e[0].concat(this)))):new(t.bind.apply(t,So([void 0],e.concat(this))))},t}(Array),Ro=function(e){function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=e.apply(this,n)||this;return Object.setPrototypeOf(o,t.prototype),o}return xo(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,So([void 0],e[0].concat(this)))):new(t.bind.apply(t,So([void 0],e.concat(this))))},t}(Array);function Fo(e){return or(e)?Zr(e,(function(){})):e}function Mo(e,t){function n(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];if(t){var o=t.apply(void 0,n);if(!o)throw new Error("prepareAction did not return an object");return Lo(Lo({type:e,payload:o.payload},"meta"in o&&{meta:o.meta}),"error"in o&&{error:o.error})}return{type:e,payload:n[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function Do(e){return["type","payload","error","meta"].indexOf(e)>-1}function $o(e){var t,n={},r=[],o={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,o},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,r,t]}function Bo(e){var t=e.name;if(!t)throw new Error("`name` is a required option for createSlice");var n,r="function"==typeof e.initialState?e.initialState:Fo(e.initialState),o=e.reducers||{},a=Object.keys(o),i={},l={},u={};function c(){var t="function"==typeof e.extraReducers?$o(e.extraReducers):[e.extraReducers],n=t[0],o=void 0===n?{}:n,a=t[1],i=void 0===a?[]:a,u=t[2],c=void 0===u?void 0:u,s=Lo(Lo({},o),l);return function(e,t,n,r){void 0===n&&(n=[]);var o,a=$o(t),i=a[0],l=a[1],u=a[2];if(function(e){return"function"==typeof e}(e))o=function(){return Fo(e())};else{var c=Fo(e);o=function(){return c}}function s(e,t){void 0===e&&(e=o());var n=So([i[t.type]],l.filter((function(e){return(0,e.matcher)(t)})).map((function(e){return e.reducer})));return 0===n.filter((function(e){return!!e})).length&&(n=[u]),n.reduce((function(e,n){if(n){var r;if(rr(e))return void 0===(r=n(e,t))?e:r;if(or(e))return Zr(e,(function(e){return n(e,t)}));if(void 0===(r=n(e,t))){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return r}return e}),e)}return s.getInitialState=o,s}(r,(function(e){for(var t in s)e.addCase(t,s[t]);for(var n=0,r=i;n<r.length;n++){var o=r[n];e.addMatcher(o.matcher,o.reducer)}c&&e.addDefaultCase(c)}))}return a.forEach((function(e){var n,r,a=o[e],c=t+"/"+e;"reducer"in a?(n=a.reducer,r=a.prepare):n=a,i[e]=n,l[c]=n,u[e]=r?Mo(c,r):Mo(c)})),{name:t,reducer:function(e,t){return n||(n=c()),n(e,t)},actions:u,caseReducers:i,getInitialState:function(){return n||(n=c()),n.getInitialState()}}}function Uo(e){return function(t,n){function r(e){return function(e){return To(e)&&"type"in e}(t=e)&&"string"==typeof t.type&&Object.keys(t).every(Do);var t}var o=function(t){r(n)?e(n.payload,t):e(n,t)};return rr(t)?(o(t),t):Zr(t,o)}}function Wo(e,t){return t(e)}function Vo(e){return Array.isArray(e)||(e=Object.values(e)),e}function Ho(e,t,n){for(var r=[],o=[],a=0,i=e=Vo(e);a<i.length;a++){var l=i[a],u=Wo(l,t);u in n.entities?o.push({id:u,changes:l}):r.push(l)}return[r,o]}function Go(e){function t(t,n){var r=Wo(t,e);r in n.entities||(n.ids.push(r),n.entities[r]=t)}function n(e,n){for(var r=0,o=e=Vo(e);r<o.length;r++)t(o[r],n)}function r(t,n){var r=Wo(t,e);r in n.entities||n.ids.push(r),n.entities[r]=t}function o(e,t){var n=!1;e.forEach((function(e){e in t.entities&&(delete t.entities[e],n=!0)})),n&&(t.ids=t.ids.filter((function(e){return e in t.entities})))}function a(t,n){var r={},o={};if(t.forEach((function(e){e.id in n.entities&&(o[e.id]={id:e.id,changes:Lo(Lo({},o[e.id]?o[e.id].changes:null),e.changes)})})),(t=Object.values(o)).length>0){var a=t.filter((function(t){return function(t,n,r){var o=r.entities[n.id],a=Object.assign({},o,n.changes),i=Wo(a,e),l=i!==n.id;return l&&(t[n.id]=i,delete r.entities[n.id]),r.entities[i]=a,l}(r,t,n)})).length>0;a&&(n.ids=Object.keys(n.entities))}}function i(t,r){var o=Ho(t,e,r),i=o[0];a(o[1],r),n(i,r)}return{removeAll:(l=function(e){Object.assign(e,{ids:[],entities:{}})},u=Uo((function(e,t){return l(t)})),function(e){return u(e,void 0)}),addOne:Uo(t),addMany:Uo(n),setOne:Uo(r),setMany:Uo((function(e,t){for(var n=0,o=e=Vo(e);n<o.length;n++)r(o[n],t)})),setAll:Uo((function(e,t){e=Vo(e),t.ids=[],t.entities={},n(e,t)})),updateOne:Uo((function(e,t){return a([e],t)})),updateMany:Uo(a),upsertOne:Uo((function(e,t){return i([e],t)})),upsertMany:Uo(i),removeOne:Uo((function(e,t){return o([e],t)})),removeMany:Uo(o)};var l,u}function qo(e){void 0===e&&(e={});var t=Lo({sortComparer:!1,selectId:function(e){return e.id}},e),n=t.selectId,r=t.sortComparer,o={getInitialState:function(e){return void 0===e&&(e={}),Object.assign({ids:[],entities:{}},e)}},a={getSelectors:function(e){var t=function(e){return e.ids},n=function(e){return e.entities},r=zo(t,n,(function(e,t){return e.map((function(e){return t[e]}))})),o=function(e,t){return t},a=function(e,t){return e[t]},i=zo(t,(function(e){return e.length}));if(!e)return{selectIds:t,selectEntities:n,selectAll:r,selectTotal:i,selectById:zo(n,o,a)};var l=zo(e,n);return{selectIds:zo(e,t),selectEntities:l,selectAll:zo(e,r),selectTotal:zo(e,i),selectById:zo(l,o,a)}}},i=r?function(e,t){var n=Go(e);function r(t,n){var r=(t=Vo(t)).filter((function(t){return!(Wo(t,e)in n.entities)}));0!==r.length&&l(r,n)}function o(e,t){0!==(e=Vo(e)).length&&l(e,t)}function a(t,n){for(var r=!1,o=0,a=t;o<a.length;o++){var i=a[o],l=n.entities[i.id];if(l){r=!0,Object.assign(l,i.changes);var c=e(l);i.id!==c&&(delete n.entities[i.id],n.entities[c]=l)}}r&&u(n)}function i(t,n){var o=Ho(t,e,n),i=o[0];a(o[1],n),r(i,n)}function l(t,n){t.forEach((function(t){n.entities[e(t)]=t})),u(n)}function u(n){var r=Object.values(n.entities);r.sort(t);var o=r.map(e);(function(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(e[n]!==t[n])return!1;return!0})(n.ids,o)||(n.ids=o)}return{removeOne:n.removeOne,removeMany:n.removeMany,removeAll:n.removeAll,addOne:Uo((function(e,t){return r([e],t)})),updateOne:Uo((function(e,t){return a([e],t)})),upsertOne:Uo((function(e,t){return i([e],t)})),setOne:Uo((function(e,t){return o([e],t)})),setMany:Uo(o),setAll:Uo((function(e,t){e=Vo(e),t.entities={},t.ids=[],r(e,t)})),addMany:Uo(r),updateMany:Uo(a),upsertMany:Uo(i)}}(n,r):Go(n);return Lo(Lo(Lo({selectId:n,sortComparer:r},o),a),i)}var Qo=["name","message","stack","code"],Yo=function(e,t){this.payload=e,this.meta=t},Ko=function(e,t){this.payload=e,this.meta=t},Xo=function(e){if("object"==typeof e&&null!==e){for(var t={},n=0,r=Qo;n<r.length;n++){var o=r[n];"string"==typeof e[o]&&(t[o]=e[o])}return t}return{message:String(e)}},Jo=function(){function e(e,t,n){var r=Mo(e+"/fulfilled",(function(e,t,n,r){return{payload:e,meta:No(Lo({},r||{}),{arg:n,requestId:t,requestStatus:"fulfilled"})}})),o=Mo(e+"/pending",(function(e,t,n){return{payload:void 0,meta:No(Lo({},n||{}),{arg:t,requestId:e,requestStatus:"pending"})}})),a=Mo(e+"/rejected",(function(e,t,r,o,a){return{payload:o,error:(n&&n.serializeError||Xo)(e||"Rejected"),meta:No(Lo({},a||{}),{arg:r,requestId:t,rejectedWithValue:!!o,requestStatus:"rejected",aborted:"AbortError"===(null==e?void 0:e.name),condition:"ConditionError"===(null==e?void 0:e.name)})}})),i="undefined"!=typeof AbortController?AbortController:function(){function e(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){},reason:void 0,throwIfAborted:function(){}}}return e.prototype.abort=function(){},e}();return Object.assign((function(e){return function(l,u,c){var s,f=(null==n?void 0:n.idGenerator)?n.idGenerator(e):function(e){void 0===e&&(e=21);for(var t="",n=e;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t}(),d=new i;function p(e){s=e,d.abort()}var h=function(){return i=this,h=null,m=function(){var i,h,m,v,y,g;return function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(a){return function(l){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}}(this,(function(b){switch(b.label){case 0:return b.trys.push([0,4,,5]),null===(w=v=null==(i=null==n?void 0:n.condition)?void 0:i.call(n,e,{getState:u,extra:c}))||"object"!=typeof w||"function"!=typeof w.then?[3,2]:[4,v];case 1:v=b.sent(),b.label=2;case 2:if(!1===v||d.signal.aborted)throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return y=new Promise((function(e,t){return d.signal.addEventListener("abort",(function(){return t({name:"AbortError",message:s||"Aborted"})}))})),l(o(f,e,null==(h=null==n?void 0:n.getPendingMeta)?void 0:h.call(n,{requestId:f,arg:e},{getState:u,extra:c}))),[4,Promise.race([y,Promise.resolve(t(e,{dispatch:l,getState:u,extra:c,requestId:f,signal:d.signal,abort:p,rejectWithValue:function(e,t){return new Yo(e,t)},fulfillWithValue:function(e,t){return new Ko(e,t)}})).then((function(t){if(t instanceof Yo)throw t;return t instanceof Ko?r(t.payload,f,e,t.meta):r(t,f,e)}))])];case 3:return m=b.sent(),[3,5];case 4:return g=b.sent(),m=g instanceof Yo?a(null,f,e,g.payload,g.meta):a(g,f,e),[3,5];case 5:return n&&!n.dispatchConditionRejection&&a.match(m)&&m.meta.condition||l(m),[2,m]}var w}))},new Promise((function(e,t){var n=function(e){try{o(m.next(e))}catch(e){t(e)}},r=function(e){try{o(m.throw(e))}catch(e){t(e)}},o=function(t){return t.done?e(t.value):Promise.resolve(t.value).then(n,r)};o((m=m.apply(i,h)).next())}));var i,h,m}();return Object.assign(h,{abort:p,requestId:f,arg:e,unwrap:function(){return h.then(Zo)}})}}),{pending:o,rejected:a,fulfilled:r,typePrefix:e})}return e.withTypes=function(){return e},e}();function Zo(e){if(e.meta&&e.meta.rejectedWithValue)throw e.payload;if(e.error)throw e.error;return e.payload}Object.assign;var ea="listenerMiddleware";Mo(ea+"/add"),Mo(ea+"/removeAll"),Mo(ea+"/remove"),"function"==typeof queueMicrotask&&queueMicrotask.bind("undefined"!=typeof window?window:void 0!==o.g?o.g:globalThis);function ta(e){return ta="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ta(e)}function na(){na=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var a=t&&t.prototype instanceof d?t:d,i=Object.create(a.prototype),l=new E(o||[]);return r(i,"_invoke",{value:x(e,n,l)}),i}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function d(){}function p(){}function h(){}var m={};u(m,a,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(O([])));y&&y!==t&&n.call(y,a)&&(m=y);var g=h.prototype=d.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function o(r,a,i,l){var u=s(e[r],e,a);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==ta(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,i,l)}),(function(e){o("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return o("throw",e,i,l)}))}l(u.arg)}var a;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return a=a?a.then(r,r):r()}})}function x(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return{value:void 0,done:!0}}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=S(i,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function S(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,S(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=s(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function O(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:C}}function C(){return{value:void 0,done:!0}}return p.prototype=h,r(g,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},b(w.prototype),u(w.prototype,i,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new w(c(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},b(g),u(g,l,"Generator"),u(g,a,(function(){return this})),u(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(j),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(l&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:O(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function ra(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function oa(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ra(a,r,o,i,l,"next",e)}function l(e){ra(a,r,o,i,l,"throw",e)}i(void 0)}))}}"undefined"!=typeof window&&window.requestAnimationFrame&&window.requestAnimationFrame,function(){function e(e,t){var n=o[e];return n?n.enumerable=t:o[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[Wr];return Qr.get(t,e)},set:function(t){var n=this[Wr];Qr.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][Wr];if(!o.P)switch(o.i){case 5:r(o)&&Lr(o);break;case 4:n(o)&&Lr(o)}}}function n(e){for(var t=e.t,n=e.k,r=Hr(n),o=r.length-1;o>=0;o--){var a=r[o];if(a!==Wr){var i=t[a];if(void 0===i&&!lr(t,a))return!0;var l=n[a],u=l&&l[Wr];if(u?u.t!==i:!cr(l,i))return!0}}var c=!!t[Wr];return r.length!==Hr(t).length+(c?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);if(n&&!n.get)return!0;for(var r=0;r<t.length;r++)if(!t.hasOwnProperty(r))return!0;return!1}var o={};!function(e,t){qr[e]||(qr[e]=t)}("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var a=Gr(n);delete a[Wr];for(var i=Hr(a),l=0;l<i.length;l++){var u=i[l];a[u]=e(u,t||!!a[u].enumerable)}return Object.create(Object.getPrototypeOf(n),a)}(r,t),a={i:r?5:4,A:n?n.A:gr(),P:!1,I:!1,R:{},l:n,t:t,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,Wr,{value:a,writable:!0}),o},S:function(e,n,o){o?rr(n)&&n[Wr].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[Wr];if(n){var o=n.t,a=n.k,i=n.R,l=n.i;if(4===l)ar(a,(function(t){t!==Wr&&(void 0!==o[t]||lr(o,t)?i[t]||e(a[t]):(i[t]=!0,Lr(n)))})),ar(o,(function(e){void 0!==a[e]||lr(a,e)||(i[e]=!1,Lr(n))}));else if(5===l){if(r(n)&&(Lr(n),i.length=!0),a.length<o.length)for(var u=a.length;u<o.length;u++)i[u]=!1;else for(var c=o.length;c<a.length;c++)i[c]=!0;for(var s=Math.min(a.length,o.length),f=0;f<s;f++)a.hasOwnProperty(f)||(i[f]=!0),void 0===i[f]&&e(a[f])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}();var aa,ia,la,ua,ca,sa=Jo("session/authorization",function(){var e=oa(na().mark((function e(t){var n,r;return na().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("/api/v1/users/sign?fields=token%2Cprofile(name)",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});case 2:return n=e.sent,e.next=5,n.json();case 5:return(r=e.sent).result?localStorage.setItem("token",r.result.token):localStorage.removeItem("token"),e.abrupt("return",r);case 8:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),fa=Jo("session/check",oa(na().mark((function e(){var t,n,r;return na().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(t=localStorage.getItem("token"))){e.next=10;break}return e.next=4,fetch("/api/v1/users/self?fields=token%2Cprofile(name)",{method:"GET",headers:{"Content-Type":"application/json","X-Token":t}});case 4:return r=e.sent,e.next=7,r.json();case 7:n=e.sent,e.next=11;break;case 10:n="session no";case 11:return e.abrupt("return",{result:n,token:t});case 12:case"end":return e.stop()}}),e)})))),da=Jo("session/signOut",oa(na().mark((function e(){var t,n,r;return na().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=localStorage.getItem("token"),e.next=3,fetch("/api/v1/users/sign",{method:"DELETE",headers:{"Content-Type":"application/json","X-Token":t}});case 3:return n=e.sent,e.next=6,n.json();case 6:return(r=e.sent).result?localStorage.removeItem("token"):console.log(r.result.error.message),e.abrupt("return",r);case 9:case"end":return e.stop()}}),e)})))),pa=Bo({name:"session",initialState:{authorization:!1,token:"",status:"idle",name:""},extraReducers:function(e){e.addCase(sa.pending,(function(e){e.status="loading"})).addCase(sa.fulfilled,(function(e,t){e.status="succeeded",t.payload.error?e.error=t.payload.error.message:(e.authorization=!0,e.token=t.payload.result.token,e.name=t.payload.result.user.profile.name,e.error="")})).addCase(sa.rejected,(function(e,t){e.status="failed",e.error=t.payload.error.message})).addCase(da.pending,(function(e){e.status="loading"})).addCase(da.fulfilled,(function(e){e.status="succeeded",e.error="",e.authorization=!1,e.token="",e.name="",e.error=""})).addCase(da.rejected,(function(e,t){e.status="failed",e.error=t.payload.error.message})).addCase(fa.pending,(function(e){e.status="loading"})).addCase(fa.fulfilled,(function(e,t){e.status="succeeded",t.payload.error?e.error=t.payload.error.message:(e.authorization=!0,e.token=t.payload.token,e.name=t.payload.result.result.profile.name,e.error="")})).addCase(fa.rejected,(function(e,t){e.status="failed",e.error=t.payload.error.message}))}}).reducer;function ha(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var ma=Nn(zn)(aa||(aa=ha(["\n  padding-top: 10px;\n  padding-bottom: 10px;\n\n  display: flex;\n  justify-content: end;\n"]))),va=Nn.div(ia||(ia=ha(["\n  display: flex;\n  gap: 10px;\n\n  @media(max-width: 63.94em) {\n    font-size: 14px;\n  }\n"]))),ya=Nn(ge)(la||(la=ha(["\n  background-color: #33cf49;\n  padding: 0px 6px;\n  border-radius: 5px;\n\n  color: #ffffff;\n  font-weight: 500;\n\n  &:hover {\n    opacity: 0.6;\n  }\n\n  @media(max-width: 47.94em) {\n      &:hover {\n      opacity: 1;\n    }\n  }\n"]))),ga=Nn.button(ua||(ua=ha(["\n  background-color: #ffffff;\n  padding: 0px 6px;\n  border: 1px solid #ef1616;\n  border-radius: 5px;\n\n  color: #ef1616;\n  font-size: 14px;\n\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    opacity: 0.6;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 12px;\n      &:hover {\n      opacity: 1;\n    }\n  }\n"]))),ba=Nn(ge)(ca||(ca=ha(["\n  padding: 0px 6px;\n  border: 1px solid #0b3dcb;\n  border-radius: 5px;\n\n  color: #0b3dcb;\n  font-size: 14px;\n\n  &:hover {\n    opacity: 0.6;\n  }\n\n  @media(max-width: 47.94em) {\n      &:hover {\n      opacity: 1;\n    }\n  }\n"]))),wa=function(){var e=Ue(),n=Ne((function(e){return{authorization:e.session.authorization,name:e.session.name}})),r={singOut:(0,t.useCallback)((function(){e(da())}),[])};return(0,Kn.jsx)(ma,{children:n.authorization?(0,Kn.jsxs)(va,{children:[(0,Kn.jsx)(ya,{to:"/profile",children:n.name}),(0,Kn.jsx)(ga,{type:"button",onClick:r.singOut,children:"Sing Out"})]}):(0,Kn.jsx)(ba,{to:"/login",children:"Sign In"})})},xa=function(){return(0,Kn.jsxs)(Kn.Fragment,{children:[(0,Kn.jsx)(wa,{}),(0,Kn.jsx)(Xn,{}),(0,Kn.jsx)("main",{children:(0,Kn.jsx)(ue,{})}),(0,Kn.jsx)(tr,{})]})};function Sa(e){return Sa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Sa(e)}function ka(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ja(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Sa(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Sa(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Sa(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ea(){Ea=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var a=t&&t.prototype instanceof d?t:d,i=Object.create(a.prototype),l=new E(o||[]);return r(i,"_invoke",{value:x(e,n,l)}),i}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function d(){}function p(){}function h(){}var m={};u(m,a,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(O([])));y&&y!==t&&n.call(y,a)&&(m=y);var g=h.prototype=d.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function o(r,a,i,l){var u=s(e[r],e,a);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==Sa(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,i,l)}),(function(e){o("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return o("throw",e,i,l)}))}l(u.arg)}var a;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return a=a?a.then(r,r):r()}})}function x(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return{value:void 0,done:!0}}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=S(i,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function S(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,S(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=s(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function O(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:C}}function C(){return{value:void 0,done:!0}}return p.prototype=h,r(g,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},b(w.prototype),u(w.prototype,i,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new w(c(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},b(g),u(g,l,"Generator"),u(g,a,(function(){return this})),u(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(j),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(l&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:O(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function Oa(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Ca(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Oa(a,r,o,i,l,"next",e)}function l(e){Oa(a,r,o,i,l,"throw",e)}i(void 0)}))}}var Pa=qo(),_a=Pa.getInitialState({status:"idle",count:1,oneBeerStatus:"idle",error:null}),La=Jo("beers/fetchOneBeers",function(){var e=Ca(Ea().mark((function e(t){var n,r,o;return Ea().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=function(){var e={};localStorage.getItem("basket")&&(e=JSON.parse(localStorage.getItem("basket"))),e[t]?r[0].isCart=!0:r[0].isCart=!1},e.next=3,fetch("https://api.punkapi.com/v2/beers/".concat(t));case 3:return n=e.sent,e.next=6,n.json();case 6:return r=e.sent,e.next=9,o();case 9:return e.abrupt("return",r);case 10:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),Na=Jo("beers/fetchBeers",function(){var e=Ca(Ea().mark((function e(t){var n,r,o;return Ea().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=function(){var e={};localStorage.getItem("basket")&&(e=JSON.parse(localStorage.getItem("basket")));for(var t=0;t<r.length;t++)e[r[t].id]?r[t].isCart=!0:r[t].isCart=!1},e.next=3,fetch("https://api.punkapi.com/v2/beers?page=".concat(t,"&per_page=12"));case 3:return n=e.sent,e.next=6,n.json();case 6:return r=e.sent,e.next=9,o();case 9:return e.abrupt("return",r);case 10:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),za=Bo({name:"beers",initialState:_a,reducers:{addToBasket:function(e,t){e.entities[t.payload].isCart=!0},removeFromBasket:function(e,t){0!==e.ids.length&&(e.entities[t.payload].isCart=!1)},deletingAllFromTheBasket:function(e,t){if(0!==e.ids.length)for(var n=0;n<t.payload.length;n++)e.entities[t.payload[n]].isCart=!1},addCurrentPage:function(e,t){e.currentPage=t.payload},addToBasketOneBeer:function(e,t){e.entities[t.payload]&&(e.entities[t.payload].isCart=!0),e.oneBeer.isCart=!0},removeFromBasketOneBeer:function(e,t){e.entities[t.payload]&&(e.entities[t.payload].isCart=!1),e.oneBeer.isCart=!1}},extraReducers:function(e){e.addCase(Na.pending,(function(e){e.status="loading"})).addCase(Na.fulfilled,(function(e,t){e.status="succeeded",e.count=Math.ceil(8),0!==e.ids.length&&Pa.removeAll(e,t.payload),Pa.upsertMany(e,t.payload)})).addCase(Na.rejected,(function(e,t){e.status="failed",e.error=t.error.message})).addCase(La.pending,(function(e){e.oneBeerStatus="loading"})).addCase(La.fulfilled,(function(e,t){e.oneBeerStatus="succeeded",e.oneBeer=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ka(Object(n),!0).forEach((function(t){ja(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ka(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},t.payload[0])})).addCase(La.rejected,(function(e,t){e.oneBeerStatus="failed",e.error=t.error.message}))}}),Ia=za.reducer,Ta=za.actions,Aa=Ta.addToBasket,Ra=Ta.addCurrentPage,Fa=Ta.removeFromBasket,Ma=Ta.deletingAllFromTheBasket,Da=(Ta.addOneBeer,Ta.addToBasketOneBeer),$a=Ta.removeFromBasketOneBeer,Ba=Pa.getSelectors((function(e){return e.beers})),Ua=(Ba.selectAll,Ba.selectById);Ba.selectIds;var Wa,Va,Ha=function(e){var t=e.text,n=void 0===t?"":t,r=e.size,o=void 0===r?"5em":r,a=n?(0,Kn.jsx)("h4",{children:n}):null;return(0,Kn.jsxs)("div",{children:[a,(0,Kn.jsx)("div",{style:{height:o,width:o}})]})},Ga=qo(),qa=Bo({name:"basket",initialState:Ga.getInitialState(),reducers:{addProducts:function(e,t){Ga.upsertMany(e,t.payload)},removeProduct:function(e,t){Ga.removeOne(e,t.payload)},decrementBeers:function(e,t){1===e.entities[t.payload].quantity?e.entities[t.payload].quantity=1:e.entities[t.payload].quantity--},incrementBeers:function(e,t){e.entities[t.payload].quantity++},updatePrice:function(e,t){e.entities[t.payload.id].price=t.payload.price},clearBasket:function(e){Ga.removeAll(e)}}}),Qa=qa.reducer,Ya=qa.actions,Ka=Ya.addProducts,Xa=Ya.decrementBeers,Ja=Ya.incrementBeers,Za=Ya.updatePrice,ei=Ya.removeProduct,ti=Ya.clearBasket,ni=Ga.getSelectors((function(e){return e.basket})),ri=ni.selectAll,oi=ni.selectById,ai=ni.selectIds;function ii(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var li,ui,ci,si,fi,di=Nn.button(Wa||(Wa=ii(["\n  ",";\n\n  background-color: #549716;\n  border: 2px solid #549716;\n  color: ",";\n"])),Un,(function(e){return e.theme.colorWhite})),pi=Nn.button(Va||(Va=ii(["\n  ",";\n\n  border: 2px solid #549716;\n  background-color: ",";\n  color: #549716;\n"])),Un,(function(e){return e.theme.colorWhite}));function hi(e){return hi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},hi(e)}function mi(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function vi(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?mi(Object(n),!0).forEach((function(t){yi(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):mi(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function yi(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==hi(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==hi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===hi(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function gi(e){var t=e.beerId,n=e.classB,r=Ue();return(0,Kn.jsx)(di,{className:n,type:"button",onClick:function(){r(Fa(t)),r(ei(t));var e=JSON.parse(localStorage.getItem("basket"));delete e[t],localStorage.setItem("basket",JSON.stringify(e))},children:"Remove from cart"})}function bi(e){var t=e.beerId,n=e.classB,r=Ue(),o=Ne((function(e){return Ua(e,t)}));return(0,Kn.jsx)(pi,{className:n,type:"button",onClick:function(){r(Aa(t)),function(e){if(localStorage.getItem("basket")){var t=JSON.parse(localStorage.getItem("basket"));t[e]=vi(vi({},o),{},{quantity:1,price:o.ibu,isCart:!0}),localStorage.setItem("basket",JSON.stringify(t))}else{var n={};n[e]=vi(vi({},o),{},{quantity:1,price:o.ibu,isCart:!0}),localStorage.setItem("basket",JSON.stringify(n))}}(t)},children:"Add to cart"})}function wi(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var xi,Si,ki,ji,Ei=Nn(ge)(li||(li=wi(["\n  display: grid;\n  justify-items: center;\n  gap: 20px;\n\n  &:hover img {\n    transform: scale(1.1);\n  }\n\n  &:hover h2 {\n    text-decoration: solid underline "," 2px;\n  }\n\n  @media(max-width: 63.94em) {\n    gap: 0;\n  }\n"])),(function(e){return e.theme.colorActiveLink})),Oi=Nn.img(ui||(ui=wi(["\n  object-fit: contain;\n  transition: transform .35s ease-out;\n\n  margin: 10px;\n"]))),Ci=Nn.h2(ci||(ci=wi(["\n  ",";\n"])),Bn),Pi=Nn.span(si||(si=wi(["\n  font-size: 1.5em;\n  color: ",";\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 0.8em;\n  }\n"])),(function(e){return e.theme.colorBlack})),_i=Nn.span(fi||(fi=wi(["\n  ",";\n  font-size: 2em;\n  color: ",";\n  margin-bottom: 20px;\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n    margin-bottom: 10px;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 0.8em;\n    margin-bottom: 5px;\n  }\n"])),Dn,(function(e){return e.theme.colorBlack})),Li=function(e){var t,n=e.beerId,r=Ne((function(e){return Ua(e,n)}));return t=!0===r.isCart?(0,Kn.jsx)(gi,{beerId:n}):(0,Kn.jsx)(bi,{beerId:n}),(0,Kn.jsxs)(Kn.Fragment,{children:[(0,Kn.jsxs)(Ei,{to:"/beers/".concat(n),children:[(0,Kn.jsx)(Oi,{src:r.image_url,alt:r.name,width:90,height:200}),(0,Kn.jsx)(Ci,{children:r.name}),(0,Kn.jsxs)(Pi,{children:["Alc.: ",r.abv," %"]}),(0,Kn.jsxs)(_i,{children:["Price: ",r.ibu,"$"]})]}),t]})};function Ni(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var zi,Ii,Ti,Ai,Ri,Fi=Nn.section(xi||(xi=Ni(["\n  width: 100%;\n"]))),Mi=Nn(zn)(Si||(Si=Ni(["\n  padding-top: 10px;\n  padding-bottom: 20px;\n"]))),Di=Nn.ul(ki||(ki=Ni(["\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  display: grid;\n  gap: 30px 20px;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n\n  @media(max-width: 80em) {\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n\n  @media(max-width: 47.94em) {\n    grid-template-columns: 1fr 1fr;\n  }\n"]))),$i=Nn.li(ji||(ji=Ni(["\n  display: grid;\n  justify-items: center;\n"]))),Bi=function(e){var t;return"loading"===e.status?t=(0,Kn.jsx)(Ha,{text:"Loading..."}):"succeeded"===e.status?t=e.beersIds.map((function(e){return(0,Kn.jsx)($i,{children:(0,Kn.jsx)(Li,{beerId:e})},e)})):"failed"===e.status&&(t=(0,Kn.jsx)("div",{children:e.error})),(0,Kn.jsx)(Fi,{children:(0,Kn.jsx)(Mi,{children:(0,Kn.jsx)(Di,{children:t})})})};function Ui(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Wi=rn(zi||(zi=Ui(["\n  padding: 5px 10px;\n  border: 1px #000000 solid;\n  border-radius: 5px;\n  text-align: center;\n\n  font-size: 1.5em;\n  line-height: 150%;\n\n  &:hover {\n    opacity: 0.6;\n  }\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 0.9em;\n    padding: 2px 7px;\n  }\n"]))),Vi=Nn(zn)(Ii||(Ii=Ui(["\n  padding-top: 40px;\n  padding-bottom: 50px;\n"]))),Hi=Nn.ul(Ti||(Ti=Ui(["\n  padding: 0;\n  margin: 0;\n  list-style: none;\n\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n"]))),Gi=Nn(ge)(Ai||(Ai=Ui(["\n  ",";\n\n  color: ",";\n  background-color: #93eb94;\n"])),Wi,(function(e){return e.theme.colorWhite})),qi=Nn(ge)(Ri||(Ri=Ui(["\n  ",";\n\n  color: ",";\n"])),Wi,(function(e){return e.theme.colorBlack})),Qi=function(e){var t=e.count,n=e.onhandler,r=e.currentPage,o=Array.from({length:t},(function(e,t){return t+1}));return(0,Kn.jsx)(Vi,{children:(0,Kn.jsx)(Hi,{children:o.map((function(e){return e===r?(0,Kn.jsx)("li",{children:(0,Kn.jsx)(Gi,{to:"/page_".concat(e),onClick:function(){n(e)},children:e})},e):(0,Kn.jsx)("li",{children:(0,Kn.jsx)(qi,{to:"/page_".concat(e),onClick:function(){n(e)},children:e})},e)}))})})};function Yi(e){return Yi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Yi(e)}function Ki(){Ki=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var a=t&&t.prototype instanceof d?t:d,i=Object.create(a.prototype),l=new E(o||[]);return r(i,"_invoke",{value:x(e,n,l)}),i}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function d(){}function p(){}function h(){}var m={};u(m,a,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(O([])));y&&y!==t&&n.call(y,a)&&(m=y);var g=h.prototype=d.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function o(r,a,i,l){var u=s(e[r],e,a);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==Yi(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,i,l)}),(function(e){o("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return o("throw",e,i,l)}))}l(u.arg)}var a;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return a=a?a.then(r,r):r()}})}function x(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return{value:void 0,done:!0}}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=S(i,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function S(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,S(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=s(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function O(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:C}}function C(){return{value:void 0,done:!0}}return p.prototype=h,r(g,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},b(w.prototype),u(w.prototype,i,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new w(c(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},b(g),u(g,l,"Generator"),u(g,a,(function(){return this})),u(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(j),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(l&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:O(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function Xi(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Ji(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Xi(a,r,o,i,l,"next",e)}function l(e){Xi(a,r,o,i,l,"throw",e)}i(void 0)}))}}var Zi,el,tl=function(){var e=Ue(),n=Ne((function(e){return{beersIds:e.beers.ids,status:e.beers.status,error:e.beers.error,count:e.beers.count}})),r=window.location.hash.split("_")[1];return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];(0,t.useEffect)((function(){if(e(!1),r)return window.addEventListener("popstate",e),function(){window.removeEventListener("popstate",e)}}),n)}(Ji(Ki().mark((function t(){return Ki().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e(Na(Number(r)));case 2:console.log("ef main");case 3:case"end":return t.stop()}}),t)}))),[r]),(0,Kn.jsxs)(Kn.Fragment,{children:[(0,Kn.jsx)(Bi,{status:n.status,beersIds:n.beersIds,error:n.error}),(0,Kn.jsx)(Qi,{currentPage:Number(r),count:n.count,onhandler:function(t){return e(Ra(t))}})]})};function nl(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var rl,ol,al,il,ll,ul,cl,sl=Nn.button(Zi||(Zi=nl(["\n  ",";\n\n  background-color: #549716;\n  border: 2px solid #549716;\n  color: ",";\n"])),Un,(function(e){return e.theme.colorWhite})),fl=Nn.button(el||(el=nl(["\n  ",";\n\n  border: 2px solid #549716;\n  background-color: ",";\n  color: #549716;\n"])),Un,(function(e){return e.theme.colorWhite}));function dl(e){return dl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},dl(e)}function pl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function hl(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?pl(Object(n),!0).forEach((function(t){ml(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):pl(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ml(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==dl(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==dl(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===dl(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function vl(e){var t=e.beerId,n=e.classB,r=Ue();return(0,Kn.jsx)(sl,{className:n,type:"button",onClick:function(){r($a(t)),r(ei(t));var e=JSON.parse(localStorage.getItem("basket"));delete e[t],localStorage.setItem("basket",JSON.stringify(e))},children:"Remove from cart"})}function yl(e){var t=e.beerId,n=e.classB,r=Ue(),o=Ne((function(e){return e.beers.oneBeer}));return(0,Kn.jsx)(fl,{className:n,type:"button",onClick:function(){r(Da(t)),function(e){if(localStorage.getItem("basket")){var t=JSON.parse(localStorage.getItem("basket"));t[e]=hl(hl({},o),{},{quantity:1,price:o.ibu,isCart:!0}),localStorage.setItem("basket",JSON.stringify(t))}else{var n={};n[e]=hl(hl({},o),{},{quantity:1,price:o.ibu,isCart:!0}),localStorage.setItem("basket",JSON.stringify(n))}}(t)},children:"Add to cart"})}function gl(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var bl=Nn.section(rl||(rl=gl(["\n  width: 100%;\n"]))),wl=Nn(zn)(ol||(ol=gl(["\n  padding-top: 20px;\n  padding-bottom: 20px;\n\n  display: grid;\n  justify-items: center;\n  gap: 20px;\n\n  @media(max-width: 63.94em) {\n    gap: 15px;\n  }\n\n  @media(max-width: 47.94em) {\n    gap: 10px;\n  }\n\n  .button {\n    width: 50%;\n\n    @media(max-width: 47.94em) {\n      width: 100%;\n    }\n  }\n"]))),xl=Nn.img(al||(al=gl(["\n  height: auto;\n"]))),Sl=Nn.h2(il||(il=gl(["\n  ",";\n"])),Bn),kl=Nn.p(ll||(ll=gl(["\n  margin: 0;\n\n  font-size: 1.3em;\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n  }\n"]))),jl=Nn.h3(ul||(ul=gl(["\n  margin: 0;\n\n  ",";\n  font-size: 1.4em;\n  color: #4605ff;\n\n  @media(max-width: 63.94em) {\n    font-size: 1.1em;\n  }\n"])),Dn),El=Nn.ul(cl||(cl=gl(["\n  margin: 0;\n  padding: 0;\n\n  list-style: none;\n"]))),Ol=function(e){var t,n=e.beer,r=e.beerId,o=e.status,a=e.error;return"loading"===o?t=(0,Kn.jsx)(Ha,{text:"Loading..."}):"succeeded"===o?t=(0,Kn.jsxs)(Kn.Fragment,{children:[(0,Kn.jsx)(xl,{src:n.image_url,alt:n.name,width:75,height:200}),(0,Kn.jsx)(Sl,{children:n.name}),(0,Kn.jsxs)("span",{children:["Alc.: ",n.abv," %"]}),(0,Kn.jsxs)("span",{children:["Date of first brew: ",n.first_brewed]}),(0,Kn.jsx)(kl,{children:n.description}),(0,Kn.jsx)(jl,{children:"Ingredients:"}),(0,Kn.jsxs)(El,{children:[(0,Kn.jsxs)("li",{children:["Malt: ",n.ingredients.malt[0].name]}),(0,Kn.jsxs)("li",{children:["Hops: ",n.ingredients.hops[0].name]}),(0,Kn.jsxs)("li",{children:["Yeast: ",n.ingredients.yeast]})]}),n.isCart?(0,Kn.jsx)(vl,{classB:"button",beerId:r}):(0,Kn.jsx)(yl,{classB:"button",beerId:r})]}):"failed"===o&&(t=(0,Kn.jsx)("div",{children:a})),(0,Kn.jsx)(bl,{children:(0,Kn.jsx)(wl,{children:t})})};function Cl(e){return Cl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Cl(e)}function Pl(){Pl=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var a=t&&t.prototype instanceof d?t:d,i=Object.create(a.prototype),l=new E(o||[]);return r(i,"_invoke",{value:x(e,n,l)}),i}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function d(){}function p(){}function h(){}var m={};u(m,a,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(O([])));y&&y!==t&&n.call(y,a)&&(m=y);var g=h.prototype=d.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function o(r,a,i,l){var u=s(e[r],e,a);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==Cl(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,i,l)}),(function(e){o("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return o("throw",e,i,l)}))}l(u.arg)}var a;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return a=a?a.then(r,r):r()}})}function x(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return{value:void 0,done:!0}}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=S(i,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function S(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,S(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=s(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function O(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:C}}function C(){return{value:void 0,done:!0}}return p.prototype=h,r(g,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},b(w.prototype),u(w.prototype,i,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new w(c(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},b(g),u(g,l,"Generator"),u(g,a,(function(){return this})),u(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(j),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(l&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:O(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function _l(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}var Ll,Nl,zl,Il,Tl,Al,Rl,Fl,Ml,Dl,$l=function(){var e=Ue(),n=Z();(0,t.useEffect)((function(){function t(){return t=function(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){_l(a,r,o,i,l,"next",e)}function l(e){_l(a,r,o,i,l,"throw",e)}i(void 0)}))}}(Pl().mark((function t(){return Pl().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e(La(n.id));case 2:console.log("Effect OneBeer");case 3:case"end":return t.stop()}}),t)}))),t.apply(this,arguments)}!function(){t.apply(this,arguments)}()}),[]);var r=Ne((function(e){return{status:e.beers.oneBeerStatus,error:e.beers.error,beer:e.beers.oneBeer}}));return(0,Kn.jsx)(Ol,{status:r.status,error:r.error,beerId:n.id,beer:r.beer})},Bl=o.p+"b72e8d61090c16d0a5ea.svg";function Ul(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Wl=Nn.li(Ll||(Ll=Ul(["\n  display: grid;\n  justify-items: center;\n  grid-template-columns: auto 1fr auto;\n  grid-template-rows: auto auto auto;\n\n  box-shadow: 0 0 16px #a0e198;\n  padding: 10px;\n\n  position: relative;\n\n  @media(max-width: 47.94em) {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n"]))),Vl=Nn.img(Nl||(Nl=Ul(["\n  grid-area: 1/1/-1/2;\n  object-fit: contain;\n"]))),Hl=Nn.h2(zl||(zl=Ul(["\n  ",";\n\n  grid-area: 1/2/2/3;\n"])),Bn),Gl=Nn.span(Il||(Il=Ul(["\n  grid-area: 2/2/3/3;\n  font-size: 1.4em;\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 0.8em;\n  }\n"]))),ql=Nn.span(Tl||(Tl=Ul(["\n  grid-area: 3/2/4/3;\n  font-size: 1.7em;\n\n  @media(max-width: 63.94em) {\n    font-size: 1.3em;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 1em;\n  }\n"]))),Ql=Nn.div(Al||(Al=Ul(["\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 40px;\n\n  grid-area: 3/3/4/-1;\n\n  @media(max-width: 47.94em) {\n    width: 100%;\n  }\n"]))),Yl=Nn.h3(Rl||(Rl=Ul(["\n  margin: 0;\n\n  ",";\n"])),Dn),Kl=Nn.div(Fl||(Fl=Ul(["\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 15px;\n\n  @media(max-width: 47.94em) {\n    gap: 10px;\n  }\n"]))),Xl=Nn.button(Ml||(Ml=Ul(["\n  display: block;\n  width: 40px;\n  height: 40px;\n  padding: 0 5px;\n  border: 1px solid #2fb607;\n  border-radius: 5px;\n  background-color: ",";\n\n  color: #2fb607;\n  font-size: 1.5em;\n\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    color: #61ee37;\n  }\n"])),(function(e){return e.theme.colorWhite})),Jl=Nn.button(Dl||(Dl=Ul(["\n  display: block;\n  width: 30px;\n  height: 30px;\n\n  background-image: url(",");\n  background-repeat: no-repeat;\n  background-position: center;\n  background-color: ",";\n  border: 1px solid #e61212;\n\n\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    background-color: #f6c3c3;\n  }\n"])),Bl,(function(e){return e.theme.colorWhite}));function Zl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var eu,tu,nu,ru,ou,au,iu,lu=function(e){var n=e.beerId,r=e.handler,o=Ue(),a=Ne((function(e){return oi(e,n)})),i=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Zl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Zl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)(a.quantity),2),l=i[0],u=i[1],c=function(e){var t=JSON.parse(localStorage.getItem("basket")),n=t[e];n.quantity=l,n.price=l*n.ibu,localStorage.setItem("basket",JSON.stringify(t))};return(0,Kn.jsxs)(Wl,{children:[(0,Kn.jsx)(Vl,{src:a.image_url,alt:a.name,width:75,height:200}),(0,Kn.jsx)(Hl,{children:a.name}),(0,Kn.jsxs)(Gl,{children:["Alc.: ",a.abv," %"]}),(0,Kn.jsxs)(Ql,{children:[(0,Kn.jsx)(Yl,{children:"Quantity"}),(0,Kn.jsxs)(Kl,{children:[(0,Kn.jsx)(Xl,{type:"button",onClick:function(){u(1===l?l:--l),o(Xa(n)),o(Za({id:n,price:l*a.ibu})),c(n)},children:"-"}),(0,Kn.jsx)("span",{children:a.quantity}),(0,Kn.jsx)(Xl,{type:"button",onClick:function(){u(++l),o(Ja(n)),o(Za({id:n,price:l*a.ibu})),c(n)},children:"+"})]})]}),(0,Kn.jsxs)(ql,{children:["Price: ",a.price,"$"]}),(0,Kn.jsx)(Jl,{type:"button","aria-label":"Delete",onClick:function(){o(Fa(a.id)),o(ei(a.id)),r();var e=JSON.parse(localStorage.getItem("basket"));delete e[n],localStorage.setItem("basket",JSON.stringify(e))}})]})};function uu(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var cu=Nn.section(eu||(eu=uu(["\n  width: 100%;\n"]))),su=Nn(zn)(tu||(tu=uu(["\n  padding-top: 40px;\n  padding-bottom: 50px;\n\n  display: grid;\n  gap: 45px;\n\n  @media(max-width: 63.94em) {\n    gap: 25px;\n\n    padding-top: 20px;\n    padding-bottom: 30px;\n  }\n\n  @media(max-width: 47.94em) {\n    gap: 15px;\n  }\n"]))),fu=Nn.span(nu||(nu=uu(["\n  font-size: 1.5em;\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n\n  }\n"]))),du=Nn.ul(ru||(ru=uu(["\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  display: grid;\n  gap: 30px;\n\n  @media(max-width: 89.94em) {\n    gap: 25px;\n  }\n\n  @media(max-width: 63.94em) {\n    gap: 20px;\n  }\n\n  @media(max-width: 47.94em) {\n    gap: 15px;\n  }\n"]))),pu=Nn.div(ou||(ou=uu(["\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n\n  @media(max-width: 47.94em) {\n    grid-template-columns: 1fr;\n    gap: 15px;\n  }\n"]))),hu=Nn.button(au||(au=uu(["\n  ",";\n\n  background-color: #5493ec;\n  color: ",";\n"])),Un,(function(e){return e.theme.colorWhite})),mu=Nn(ge)(iu||(iu=uu(["\n  background-color: #4fc51e;\n  color: ",";\n  padding: 16px;\n  text-align: center;\n  border-radius: 5px;\n\n  font-size: 1.5em;\n  line-height: 150%;\n\n  &:hover {\n    opacity: 0.6;\n  }\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n    padding: 10px;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 0.9em;\n    padding: 5px 10px;\n  }\n"])),(function(e){return e.theme.colorWhite}));function vu(e){return vu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},vu(e)}function yu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function gu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?yu(Object(n),!0).forEach((function(t){bu(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):yu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function bu(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==vu(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==vu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===vu(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function wu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var xu,Su,ku,ju,Eu,Ou=function(){var e=Ue(),n=Ne(ai);console.log("basket");var r=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return wu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?wu(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)(""),2),o=r[0],a=r[1];return(0,t.useEffect)((function(){var t=[];localStorage.getItem("basket")&&(t=Object.values(JSON.parse(localStorage.getItem("basket"))).map((function(e){return gu(gu({},e),{},{price:e.ibu*e.quantity})})),e(Ka(t)),console.log("Effect Basket")),a(n.length)}),[n]),(0,Kn.jsx)(cu,{children:(0,Kn.jsxs)(su,{children:[(0,Kn.jsxs)(fu,{children:["Total ",o]}),n.length?(0,Kn.jsxs)(Kn.Fragment,{children:[(0,Kn.jsx)(du,{children:n.map((function(e,t){return(0,Kn.jsx)(lu,{beerId:e,handler:function(){return a(o-1)}},t)}))}),(0,Kn.jsxs)(pu,{children:[(0,Kn.jsx)(hu,{type:"button",onClick:function(){localStorage.removeItem("basket"),e(Ma(n)),e(ti()),a(n.length)},children:"Clear basket"}),(0,Kn.jsx)(mu,{to:"/form",children:"Checkout"})]})]}):(0,Kn.jsx)("p",{children:"Сart is empty!"})]})})};function Cu(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Pu,_u,Lu,Nu,zu=rn(xu||(xu=Cu(["\n  display: grid;\n  grid-template-columns: 40% 30% 30%;\n  justify-items: center;\n"]))),Iu=Nn.div(Su||(Su=Cu(["\n  ",";\n\n  h4 {\n    margin: 0;\n\n    @media(max-width: 47.94em) {\n      line-height: 130%;\n      margin: 0;\n      font-size: 0.9em;\n    }\n  }\n"])),zu),Tu=Nn.ul(ku||(ku=Cu(["\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  display: grid;\n  border: 1px dashed #85c6e6;\n\n  @media(max-width: 47.94em) {\n    gap: 5px;\n  }\n"]))),Au=Nn.li(ju||(ju=Cu(["\n  ",";\n  align-items: center;\n  border-bottom: 1px dashed #85c6e6;\n\n  h3 {\n    justify-self: flex-start;\n\n    @media(max-width: 47.94em) {\n      padding-bottom: 5px;\n      line-height: 130%;\n      margin: 0;\n      font-size: 0.8em;\n    }\n  }\n"])),zu),Ru=Nn.div(Eu||(Eu=Cu(["\n  display: flex;\n  justify-content: space-between;\n  padding: 20px;\n\n  background-color: #817abf;\n  color: #ffffff;\n\n  @media(max-width: 47.94em) {\n    padding: 10px;\n  }\n"]))),Fu=function(e){var t=0;return(0,Kn.jsxs)(Kn.Fragment,{children:[(0,Kn.jsx)("h3",{children:"Your order"}),(0,Kn.jsxs)(Iu,{children:[(0,Kn.jsx)("h4",{children:"Beer"}),(0,Kn.jsx)("h4",{children:"Quantity"}),(0,Kn.jsx)("h4",{children:"Price"})]}),(0,Kn.jsx)(Tu,{children:e.beers.map((function(e,n){return t+=e.price,(0,Kn.jsxs)(Au,{children:[(0,Kn.jsx)("h3",{children:e.name}),(0,Kn.jsx)("span",{children:e.quantity}),(0,Kn.jsxs)("span",{children:[e.price," $"]})]},n)}))}),(0,Kn.jsxs)(Ru,{children:[(0,Kn.jsx)("span",{children:"Total:"}),(0,Kn.jsxs)("span",{children:[t,"$"]})]})]})},Mu=Nn.div(Pu||(Pu=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  width: 100%;\n  margin: 0 auto;\n  margin-top: ",";\n\n  @media(max-width: 89.94em) {\n    margin-top: ",";\n  }\n\n  @media(max-width: 63.94em) {\n    margin-top: ",";\n  }\n\n  @media(max-width: 47.94em) {\n    margin-top: ",";\n  }\n"])),(function(e){return e.theme.indent}),(function(e){return e.theme.indentDesktop}),(function(e){return e.theme.indentTablet}),(function(e){return e.theme.indentMobile})),Du=Mu,$u=Nn.button(_u||(_u=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  padding: 6px;\n  border: 1px solid #0b3dcb;\n  border-radius: 5px;\n  background-color: #ffffff;\n\n  color: #0b3dcb;\n  font-size: 18px;\n\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    opacity: 0.6;\n  }\n\n  @media(max-width: 47.94em) {\n      &:hover {\n      opacity: 1;\n    }\n  }\n"]))),Bu=function(e){return(0,Kn.jsx)($u,{type:e.type,onClick:e.onClick,children:e.children})};function Uu(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Wu,Vu,Hu,Gu=Nn.div(Lu||(Lu=Uu(["\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 9999;\n\n  width: 100%;\n  height: 100%;\n  min-height: 100%;\n\n  overflow-x: auto;\n  background-color: rgba(0,0,0,0.7);\n  padding: 10px;\n  box-sizing: border-box;\n\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n"]))),qu=Nn.div(Nu||(Nu=Uu(["\n  width: 80%;\n\n  display: flex;\n  justify-content: center;\n\n  padding: 40px;\n  position: relative;\n  background-color: #ffffff;\n  margin: 0 auto;\n  border-radius: 10px;\n  overflow: hidden;\n  box-shadow: 2px 5px 10px rgb(0 0 0 / 5%);\n"]))),Qu=function(e){return(0,Kn.jsx)(Gu,{children:(0,Kn.jsx)(qu,{children:e.children})})};function Yu(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Ku=rn(Wu||(Wu=Yu(["\n  .valid {\n    border: 2px solid green;\n  }\n\n  .inValid {\n    border: 2px solid red;\n  }\n"]))),Xu=Nn.div(Vu||(Vu=Yu(["\n  ",";\n"])),Ku),Ju=Nn.input(Hu||(Hu=Yu(["\n  width: 50%;\n  padding: 10px;\n\n  border: none;\n  border-bottom: 2px solid #1a77d2;\n\n  @media(max-width: 47.94em) {\n    width: 100%;\n    padding: 5px;\n  }\n"])));function Zu(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ec(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ec(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ec(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var tc,nc,rc,oc,ac,ic,lc,uc=function(){var e=Zu((0,t.useState)(""),2),n=e[0],r=e[1],o=Zu((0,t.useState)(""),2),a=o[0],i=o[1];return(0,Kn.jsxs)(Xu,{children:[(0,Kn.jsx)("label",{htmlFor:"name","aria-label":"Enter your name"}),(0,Kn.jsx)(Ju,{className:a,type:"text",id:"name",name:"name",placeholder:"Name",value:n,onChange:function(e){return r(e.target.value)},onBlur:function(){n.length<2?i("inValid"):i("valid")},required:!0})]})},cc=function(){var e=Zu((0,t.useState)(""),2),n=e[0],r=e[1],o=Zu((0,t.useState)(""),2),a=o[0],i=o[1];return(0,Kn.jsxs)(Xu,{children:[(0,Kn.jsx)("label",{htmlFor:"e-mail","aria-label":"Enter your e-mail"}),(0,Kn.jsx)(Ju,{className:a,type:"text",id:"e-mail",name:"e-mail",placeholder:"E-mail",value:n,onChange:function(e){return r(e.target.value)},onBlur:function(){n.length<2?i("inValid"):i("valid")},required:!0})]})},sc=function(){var e=Zu((0,t.useState)(""),2),n=e[0],r=e[1],o=Zu((0,t.useState)(""),2),a=o[0],i=o[1];return(0,Kn.jsxs)(Xu,{children:[(0,Kn.jsx)("label",{htmlFor:"tel","aria-label":"Enter your phone"}),(0,Kn.jsx)(Ju,{className:a,type:"tel",id:"tel",name:"tel",placeholder:"+7(999)999-99-99",value:n,onChange:function(e){return r(e.target.value)},onBlur:function(){n.length<16?i("inValid"):i("valid")},required:!0})]})},fc=function(){var e=Zu((0,t.useState)(""),2),n=e[0],r=e[1],o=Zu((0,t.useState)(""),2),a=o[0],i=o[1];return(0,Kn.jsxs)(Xu,{children:[(0,Kn.jsx)("label",{htmlFor:"country","aria-label":"Enter the name of your country"}),(0,Kn.jsx)(Ju,{className:a,type:"text",id:"country",name:"country",placeholder:"Country",value:n,onChange:function(e){return r(e.target.value)},onBlur:function(){n.length<3?i("inValid"):i("valid")},required:!0})]})},dc=function(){var e=Zu((0,t.useState)(""),2),n=e[0],r=e[1],o=Zu((0,t.useState)(""),2),a=o[0],i=o[1];return(0,Kn.jsxs)(Xu,{children:[(0,Kn.jsx)("label",{htmlFor:"city","aria-label":"Enter the name of your city"}),(0,Kn.jsx)(Ju,{className:a,type:"text",id:"city",name:"city",placeholder:"City",value:n,onChange:function(e){return r(e.target.value)},onBlur:function(){n.length<3?i("inValid"):i("valid")},required:!0})]})},pc=function(){var e=Zu((0,t.useState)(""),2),n=e[0],r=e[1],o=Zu((0,t.useState)(""),2),a=o[0],i=o[1];return(0,Kn.jsxs)(Xu,{children:[(0,Kn.jsx)("label",{htmlFor:"street","aria-label":"Enter your street name"}),(0,Kn.jsx)(Ju,{className:a,type:"text",id:"street",name:"street",placeholder:"Street",value:n,onChange:function(e){return r(e.target.value)},onBlur:function(){n.length<2?i("inValid"):i("valid")},required:!0})]})},hc=function(){var e=Zu((0,t.useState)(""),2),n=e[0],r=e[1],o=Zu((0,t.useState)(""),2),a=o[0],i=o[1];return(0,Kn.jsxs)(Xu,{children:[(0,Kn.jsx)("label",{htmlFor:"house","aria-label":"Enter your house number"}),(0,Kn.jsx)(Ju,{className:a,type:"text",id:"house",name:"house",placeholder:"House",value:n,onChange:function(e){return r(e.target.value)},onBlur:function(){n.length<2?i("inValid"):i("valid")},required:!0})]})},mc=function(){var e=Zu((0,t.useState)(""),2),n=e[0],r=e[1],o=Zu((0,t.useState)(""),2),a=o[0],i=o[1];return(0,Kn.jsxs)(Xu,{children:[(0,Kn.jsx)("label",{htmlFor:"apartment","aria-label":"Enter your apartment number"}),(0,Kn.jsx)(Ju,{className:a,type:"text",id:"apartment",name:"apartment",placeholder:"Apartment",value:n,onChange:function(e){return r(e.target.value)},onBlur:function(){n.length<2?i("inValid"):i("valid")}})]})};function vc(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var yc=Nn.form(tc||(tc=vc(["\n  width: 100%;\n"]))),gc=Nn(zn)(nc||(nc=vc(["\n  padding-top: 40px;\n  padding-bottom: 50px;\n\n  column-count: 2;\n\n  @media(max-width: 63.94em) {\n    column-count: 1;\n  }\n\n  @media(max-width: 47.94em) {\n    padding-top: 20px;\n    padding-bottom: 20px;\n  }\n"]))),bc=Nn.fieldset(rc||(rc=vc(["\n  border: none;\n  margin: 0 0 20px 0;\n  padding: 0;\n\n  display: grid;\n  gap: 5px;\n\n  @media(max-width: 47.94em) {\n    margin: 0 0 15px 0;\n  }\n"]))),wc=Nn.legend(oc||(oc=vc(["\n  margin-bottom: 30px;\n\n  @media(max-width: 47.94em) {\n    margin-bottom: 20px;\n  }\n"]))),xc=Nn.textarea(ac||(ac=vc(["\n  border: 0;\n  border-bottom: 2px solid #1a77d2;\n  resize: none;\n\n  @media(max-width: 47.94em) {\n    height: 100px;\n  }\n"]))),Sc=Nn.div(ic||(ic=vc(['\n  position: relative;\n  margin-bottom: 20px;\n\n  @media(max-width: 47.94em) {\n    font-size: 0.8em;\n  }\n\n  input[type="checkbox"] {\n    position: absolute;\n\n    width: 1px;\n    height: 1px;\n    margin: -1px;\n    padding: 0;\n    overflow: hidden;\n\n    white-space: nowrap;\n\n    border: 0;\n\n    clip: rect(0 0 0 0);\n    clip-path: inset(100%);\n  }\n\n  label {\n    padding-left: 36px;\n\n    position: relative;\n\n    cursor: pointer;\n\n    &::before {\n      content: "";\n      width: 22px;\n      height: 22px;\n\n      position: absolute;\n      left: 0;\n      top: 0;\n      border: 1px solid #000000;\n    }\n  }\n\n  input:checked + label::after {\n    content: "";\n    width: 10px;\n    height: 10px;\n\n    position: absolute;\n    left: 6px;\n    top: 6px;\n    background-color: #2e43a5;\n  }\n']))),kc=Nn.button(lc||(lc=vc(["\n  display: block;\n  width: 100%;\n  border: none;\n  background-color: #817abf;\n  color: #ffffff;\n  padding: 10px;\n  border-radius: 5px;\n\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    opacity: 0.7;\n  }\n"])));function jc(e){return jc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},jc(e)}function Ec(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Oc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ec(Object(n),!0).forEach((function(t){Cc(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ec(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Cc(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==jc(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==jc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===jc(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Pc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var _c,Lc,Nc,zc=function(){var e=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Pc(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Pc(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)(!1),2),n=e[0],r=e[1],o=Ue(),a=K(),i=X(),l=Ne(ai),u=Ne(ri),c=Ne((function(e){return e.session.authorization}));(0,t.useEffect)((function(){var e=[];e.length===u.length&&localStorage.getItem("basket")&&(e=Object.values(JSON.parse(localStorage.getItem("basket"))).map((function(e){return Oc(Oc({},e),{},{price:e.ibu*e.quantity})})),o(Ka(e)),console.log("Effect Form"))}));var s={saveLocal:(0,t.useCallback)((function(){i("/login",{state:{back:a.pathname}})}),[]),onSubmit:(0,t.useCallback)((function(e){e.preventDefault(),localStorage.removeItem("basket"),o(Ma(l)),o(ti()),r(!0),setTimeout((function(){console.log("Timeout"),i("/")}),2e3)}),[])};return(0,Kn.jsx)(Kn.Fragment,{children:c?(0,Kn.jsxs)(Kn.Fragment,{children:[(0,Kn.jsx)(yc,{action:"https://echo.htmlacademy.ru",method:"post",onSubmit:s.onSubmit,children:(0,Kn.jsxs)(gc,{children:[(0,Kn.jsxs)(bc,{children:[(0,Kn.jsx)(wc,{children:"Buyer data"}),(0,Kn.jsx)(uc,{}),(0,Kn.jsx)(cc,{}),(0,Kn.jsx)(sc,{})]}),(0,Kn.jsxs)(bc,{children:[(0,Kn.jsx)(wc,{children:"Address of the recipient"}),(0,Kn.jsx)(fc,{}),(0,Kn.jsx)(dc,{}),(0,Kn.jsx)(pc,{}),(0,Kn.jsx)(hc,{}),(0,Kn.jsx)(mc,{})]}),(0,Kn.jsxs)(bc,{children:[(0,Kn.jsx)(wc,{children:"Comments"}),(0,Kn.jsx)(xc,{name:"messang",cols:"10",rows:"10"})]}),(0,Kn.jsx)(bc,{children:(0,Kn.jsx)(Fu,{beers:u})}),(0,Kn.jsxs)(bc,{children:[(0,Kn.jsx)(wc,{children:"Payment methods"}),(0,Kn.jsxs)(Sc,{children:[(0,Kn.jsx)("input",{type:"checkbox",id:"cash",name:"cash",required:!0,defaultChecked:!0}),(0,Kn.jsx)("label",{htmlFor:"cash",children:"Cash payment"})]}),(0,Kn.jsxs)(Sc,{children:[(0,Kn.jsx)("input",{type:"checkbox",name:"consentToDataProcessing",id:"consent",required:!0,defaultChecked:!0}),(0,Kn.jsx)("label",{htmlFor:"consent",children:"I agree to the processing of my personal data"})]})]}),(0,Kn.jsx)(kc,{type:"submit","aria-label":"Submit an order to the store",children:"Place an order"})]})}),!0===n&&(0,Kn.jsx)(Qu,{children:"Order completed"})]}):(0,Kn.jsxs)(zn,{children:[(0,Kn.jsx)(Fu,{beers:u}),(0,Kn.jsxs)(Du,{children:[(0,Kn.jsx)(Bu,{type:"button",onClick:s.saveLocal,children:"Sign in"})," to place an order"]})]})})},Ic=o(954),Tc=o.n(Ic);function Ac(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Rc=Nn.div(_c||(_c=Ac(["\n  width: 20%;\n\n  position: relative;\n\n  @media(max-width: 63.94em) {\n    width: 70%;\n  }\n\n  @media(max-width: 47.94em) {\n    width: 100%;\n  }\n\n  label {\n    position: absolute;\n    z-index: 1;\n\n    ","\n  }\n\n  input {\n    width: 100%;\n    padding: 12px 8px 8px;\n\n    font-size: 1em;\n\n    background-color: #ffffff;\n  }\n\n  input:focus + label {\n    top: 2px;\n    font-size: 0.5em;\n    line-height: 120%;\n  }\n"])),(function(e){return""!==e.children[0].props.value?rn(Lc||(Lc=Ac(["\n          top: 2px;\n          left: 10px;\n          font-size: 0.5em;\n          line-height: 120%;\n        "]))):rn(Nc||(Nc=Ac(["\n          top: 10px;\n          left: 10px;\n        "])))}));function Fc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Mc,Dc,$c,Bc=function(e){var n=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Fc(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Fc(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)(e.value),2),r=n[0],o=n[1],a=(0,t.useCallback)(Tc()((function(t){return e.onChange(t)}),600),[e.onChange]);return(0,t.useLayoutEffect)((function(){return o(e.value)}),[e.value]),(0,Kn.jsxs)(Rc,{children:[(0,Kn.jsx)("input",{type:e.type,value:r,onChange:function(e){o(e.target.value),a(e.target.value)},id:e.text}),(0,Kn.jsx)("label",{htmlFor:e.text,children:e.text})]})};function Uc(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Wc,Vc=Nn.form(Mc||(Mc=Uc(["\n  width: 100%;\n"]))),Hc=Nn(zn)(Dc||(Dc=Uc(["\n  padding-top: 20px;\n  padding-bottom: 20px;\n\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n\n  @media(max-width: 63.94em) {\n    gap: 15px;\n  }\n\n  @media(max-width: 47.94em) {\n    gap: 10px;\n  }\n"]))),Gc=Nn.button($c||($c=Uc(["\n  display: block;\n  width: 20%;\n  border: none;\n  background-color: #817abf;\n  color: #ffffff;\n  padding: 10px;\n  border-radius: 5px;\n\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    opacity: 0.7;\n  }\n\n  @media(max-width: 63.94em) {\n    width: 70%;\n  }\n\n  @media(max-width: 47.94em) {\n    width: 100%;\n\n    &:hover {\n      opacity: 1;\n    }\n  }\n"]))),qc=function(e){return(0,Kn.jsx)(Vc,{action:e.action,method:e.method,onSubmit:e.onSubmit,children:(0,Kn.jsxs)(Hc,{children:[e.children,(0,Kn.jsx)(Gc,{type:"submit",children:e.textButton})]})})},Qc=Nn(zn)(Wc||(Wc=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  padding-top: 40px;\n  color: #cdc5c5;\n"]))),Yc=function(){return(0,Kn.jsxs)(Qc,{children:["For the test",(0,Kn.jsx)("div",{children:"Login: test_1"}),(0,Kn.jsx)("div",{children:"Password: 123456"})]})};function Kc(e){return Kc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Kc(e)}function Xc(){Xc=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var a=t&&t.prototype instanceof d?t:d,i=Object.create(a.prototype),l=new E(o||[]);return r(i,"_invoke",{value:x(e,n,l)}),i}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function d(){}function p(){}function h(){}var m={};u(m,a,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(O([])));y&&y!==t&&n.call(y,a)&&(m=y);var g=h.prototype=d.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function o(r,a,i,l){var u=s(e[r],e,a);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==Kc(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,i,l)}),(function(e){o("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return o("throw",e,i,l)}))}l(u.arg)}var a;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return a=a?a.then(r,r):r()}})}function x(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return{value:void 0,done:!0}}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=S(i,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function S(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,S(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=s(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function O(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:C}}function C(){return{value:void 0,done:!0}}return p.prototype=h,r(g,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},b(w.prototype),u(w.prototype,i,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new w(c(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},b(g),u(g,l,"Generator"),u(g,a,(function(){return this})),u(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(j),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(l&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:O(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function Jc(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Zc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return es(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?es(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function es(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ts=function(){var e=X(),n=K(),r=Ue(),o=Zc((0,t.useState)(""),2),a=o[0],i=o[1],l=Zc((0,t.useState)(""),2),u=l[0],c=l[1],s={login:a,password:u,remember:!0},f={onSubmit:(0,t.useCallback)(function(){var t=function(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Jc(a,r,o,i,l,"next",e)}function l(e){Jc(a,r,o,i,l,"throw",e)}i(void 0)}))}}(Xc().mark((function t(o){var a,i,l,u;return Xc().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return o.preventDefault(),t.next=3,r(sa(s)).unwrap();case 3:t.sent.error||(u=null!==(a=n.state)&&void 0!==a&&a.back&&(null===(i=n.state)||void 0===i?void 0:i.back)!==n.pathname?null===(l=n.state)||void 0===l?void 0:l.back:"/",e(u));case 5:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),[s,n.state]),onChangeLogin:(0,t.useCallback)((function(e){i(e)}),[]),onChangePassword:(0,t.useCallback)((function(e){c(e)}),[])},d=Ne((function(e){return{authorization:e.session.authorization,error:e.session.error}}));return(0,Kn.jsxs)(Kn.Fragment,{children:[(0,Kn.jsxs)(qc,{action:"/api/v1/users/sign",method:"POST",onSubmit:f.onSubmit,textButton:"Sign In",children:[(0,Kn.jsx)(Bc,{type:"text",value:a,text:"Login",onChange:f.onChangeLogin}),(0,Kn.jsx)(Bc,{type:"password",value:u,text:"Password",onChange:f.onChangePassword}),d.error||(0,Kn.jsx)("div",{children:d.error})]}),(0,Kn.jsx)(Yc,{})]})};function ns(e){return ns="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ns(e)}function rs(){rs=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var a=t&&t.prototype instanceof d?t:d,i=Object.create(a.prototype),l=new E(o||[]);return r(i,"_invoke",{value:x(e,n,l)}),i}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function d(){}function p(){}function h(){}var m={};u(m,a,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(O([])));y&&y!==t&&n.call(y,a)&&(m=y);var g=h.prototype=d.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function o(r,a,i,l){var u=s(e[r],e,a);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==ns(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,i,l)}),(function(e){o("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return o("throw",e,i,l)}))}l(u.arg)}var a;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return a=a?a.then(r,r):r()}})}function x(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return{value:void 0,done:!0}}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=S(i,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function S(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,S(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=s(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function O(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:C}}function C(){return{value:void 0,done:!0}}return p.prototype=h,r(g,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},b(w.prototype),u(w.prototype,i,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new w(c(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},b(g),u(g,l,"Generator"),u(g,a,(function(){return this})),u(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(j),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(l&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:O(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function os(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}var as,is,ls,us,cs=Jo("user/data",function(){var e=function(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){os(a,r,o,i,l,"next",e)}function l(e){os(a,r,o,i,l,"throw",e)}i(void 0)}))}}(rs().mark((function e(t){var n,r;return rs().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("/api/v1/users/self",{method:"GET",headers:{"Content-Type":"application/json","X-Token":t}});case 2:return n=e.sent,e.next=5,n.json();case 5:return r=e.sent,e.abrupt("return",r);case 7:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),ss=Bo({name:"user",initialState:{status:"idle",name:"",telephone:"",email:""},extraReducers:function(e){e.addCase(cs.pending,(function(e){e.status="loading"})).addCase(cs.fulfilled,(function(e,t){e.status="succeeded",t.payload.error?e.error=t.payload.error.message:(e.telephone=t.payload.result.profile.phone,e.email=t.payload.result.email,e.name=t.payload.result.profile.name,e.error="")})).addCase(cs.rejected,(function(e,t){e.status="failed",e.error=t.payload.error.message}))}}).reducer;function fs(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var ds,ps,hs=Nn.section(as||(as=fs(["\n  width: 100%;\n"]))),ms=Nn(zn)(is||(is=fs(["\n  padding-top: 20px;\n  padding-bottom: 20px;\n\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 10px;\n"]))),vs=Nn.h2(ls||(ls=fs(["\n  ",";\n\n  margin-bottom: 20px;\n\n  @media(max-width: 63.94em) {\n    margin-bottom: 10px;\n  }\n\n  @media(max-width: 47.94em) {\n    margin-bottom: 5px;\n  }\n"])),Bn),ys=Nn.span(us||(us=fs(["\n  ",";\n  font-size: 1.5em;\n  line-height: 115%;\n\n  @media(max-width: 63.94em) {\n    font-size: 1.3em;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 0.8em;\n  }\n"])),$n),gs=function(e){return(0,Kn.jsx)(hs,{children:(0,Kn.jsxs)(ms,{children:[(0,Kn.jsx)(vs,{children:"Profile"}),(0,Kn.jsxs)("div",{children:[(0,Kn.jsx)(ys,{children:"Name: "}),e.name]}),(0,Kn.jsxs)("div",{children:[(0,Kn.jsx)(ys,{children:"E-mail: "}),e.email]}),(0,Kn.jsxs)("div",{children:[(0,Kn.jsx)(ys,{children:"Telephone: "}),e.telephone]})]})})},bs=function(){var e,n=Ue(),r=Ne((function(e){return{token:e.session.token,authorization:e.session.authorization,status:e.user.status,error:e.user.error,name:e.user.name,email:e.user.email,telephone:e.user.telephone}}));return(0,t.useEffect)((function(){r.token&&n(cs(r.token)),console.log("eff profile")}),[r.token]),"loading"===r.status?e=(0,Kn.jsx)(Ha,{text:"Loading..."}):"succeeded"===r.status?e=r.authorization?(0,Kn.jsx)(gs,{name:r.name,email:r.email,telephone:r.telephone}):(0,Kn.jsx)(le,{to:"/login"}):"failed"===r.status&&(e=(0,Kn.jsx)("div",{children:r.error})),(0,Kn.jsx)(Kn.Fragment,{children:e})},ws=xn(ds||(ds=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(['\n\n  body,\n  html {\n    margin: 0;\n    height: 100%;\n  }\n\n  body {\n    position: relative;\n    min-height: 100%;\n    font-family: "Inter", "Arial", sans-serif;\n    font-size: 18px;\n    line-height: 27px;\n    font-weight: 400;\n    color: ',";\n    scrollbar-color: rgba(44, 171, 21, 0.5) rgba(44, 171, 21, 0.2);\n    scrollbar-width: thin;\n\n    &::-webkit-scrollbar {\n      width: 10px;\n      height: 5px;\n      border-radius: 10px;\n    }\n\n    &::-webkit-scrollbar-track-piece {\n      background-color: rgba(44, 171, 21, 0.2);\n      border-radius: 10px;\n      width: 10px;\n    }\n\n    &::-webkit-scrollbar-thumb:vertical {\n      height: 30px;\n      background-color: rgba(44, 171, 21, 0.5);\n      border-radius: 10px;\n    }\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  img,\n  video {\n    display: block;\n    max-width: 100%;\n  }\n\n  #root {\n  position: relative;\n\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n\n  header,\n  footer {\n    flex-shrink: 0;\n  }\n\n  main {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n  }\n}\n"])),(function(e){return e.theme.colorBlack})),xs=o.p+"fce7c01081563377aa62.woff",Ss=o.p+"1856ca1e863908117345.woff2",ks=o.p+"77b530365e5d6aa537c3.woff",js=o.p+"e07f8d28a9f27285c94b.woff2",Es=o.p+"943035b994f748e10c96.woff",Os=o.p+"f696093cac0c009432c7.woff2",Cs=o.p+"37777c699149506190a8.woff",Ps=o.p+"080abd2d6ed027a62275.woff2",_s=xn(ps||(ps=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(['\n  @font-face {\n    font-style: normal;\n    font-weight: 400;\n    font-family: "Permanent-Marker";\n\n    font-display: swap;\n    src:\n      url(',') format("woff2"),\n      url(',') format("woff");\n  }\n\n  @font-face {\n    font-style: normal;\n    font-weight: 400;\n    font-family: "Inter";\n\n    font-display: swap;\n    src:\n      url(',') format("woff2"),\n      url(',') format("woff");\n  }\n\n  @font-face {\n    font-style: normal;\n    font-weight: 500;\n    font-family: "Inter";\n\n    font-display: swap;\n    src:\n      url(',') format("woff2"),\n      url(',') format("woff");\n  }\n\n\n  @font-face {\n    font-style: normal;\n    font-weight: 900;\n    font-family: "Inter";\n\n    font-display: swap;\n    src:\n      url(',') format("woff2"),\n      url(',') format("woff");\n  }\n'])),Ss,xs,js,ks,Os,Es,Ps,Cs),Ls=function(){var e=K().pathname;return(0,t.useEffect)((function(){window.scrollTo(0,0)}),[e]),null};function Ns(e){return Ns="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ns(e)}function zs(){zs=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var a=t&&t.prototype instanceof d?t:d,i=Object.create(a.prototype),l=new E(o||[]);return r(i,"_invoke",{value:x(e,n,l)}),i}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function d(){}function p(){}function h(){}var m={};u(m,a,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(O([])));y&&y!==t&&n.call(y,a)&&(m=y);var g=h.prototype=d.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function o(r,a,i,l){var u=s(e[r],e,a);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==Ns(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,i,l)}),(function(e){o("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return o("throw",e,i,l)}))}l(u.arg)}var a;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return a=a?a.then(r,r):r()}})}function x(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return{value:void 0,done:!0}}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=S(i,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function S(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,S(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=s(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function O(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:C}}function C(){return{value:void 0,done:!0}}return p.prototype=h,r(g,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},b(w.prototype),u(w.prototype,i,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new w(c(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},b(g),u(g,l,"Generator"),u(g,a,(function(){return this})),u(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(j),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(l&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:O(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function Is(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Ts(){var e=Ue();(0,t.useEffect)((function(){function t(){return t=function(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Is(a,r,o,i,l,"next",e)}function l(e){Is(a,r,o,i,l,"throw",e)}i(void 0)}))}}(zs().mark((function t(){return zs().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!localStorage.getItem("token")){t.next=3;break}return t.next=3,e(fa());case 3:case"end":return t.stop()}}),t)}))),t.apply(this,arguments)}!function(){t.apply(this,arguments)}()}),[]);var n=Z().pageNumber;return(0,Kn.jsxs)(me,{children:[(0,Kn.jsx)(ws,{}),(0,Kn.jsx)(_s,{}),(0,Kn.jsx)(Ls,{}),(0,Kn.jsx)(fe,{children:(0,Kn.jsxs)(ce,{element:(0,Kn.jsx)(xa,{}),children:[(0,Kn.jsx)(ce,{path:":".concat(n),element:(0,Kn.jsx)(tl,{})}),(0,Kn.jsx)(ce,{path:"/beers/:id",element:(0,Kn.jsx)($l,{})}),(0,Kn.jsx)(ce,{path:"/basket",element:(0,Kn.jsx)(Ou,{})}),(0,Kn.jsx)(ce,{path:"/form",element:(0,Kn.jsx)(zc,{})}),(0,Kn.jsx)(ce,{path:"/login",element:(0,Kn.jsx)(ts,{})}),(0,Kn.jsx)(ce,{path:"/profile",element:(0,Kn.jsx)(bs,{})}),(0,Kn.jsx)(ce,{path:"/",element:(0,Kn.jsx)(le,{replace:!0,to:"/page_1"})})]})})]})}var As=function(e){var t,n=function(e){return function(e){void 0===e&&(e={});var t=e.thunk,n=void 0===t||t,r=(e.immutableCheck,e.serializableCheck,new Ao);return n&&(function(e){return"boolean"==typeof e}(n)?r.push(wo):r.push(wo.withExtraArgument(n.extraArgument))),r}(e)},r=e||{},o=r.reducer,a=void 0===o?void 0:o,i=r.middleware,l=void 0===i?n():i,u=r.devTools,c=void 0===u||u,s=r.preloadedState,f=void 0===s?void 0:s,d=r.enhancers,p=void 0===d?void 0:d;if("function"==typeof a)t=a;else{if(!To(a))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var a,i=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:po.INIT}))throw new Error(co(12));if(void 0===n(void 0,{type:po.PROBE_UNKNOWN_ACTION()}))throw new Error(co(13))}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},l=0;l<i.length;l++){var u=i[l],c=n[u],s=e[u],f=c(s,t);if(void 0===f)throw t&&t.type,new Error(co(14));o[u]=f,r=r||f!==s}return(r=r||i.length!==Object.keys(e).length)?o:e}}(a)}var h=l;"function"==typeof h&&(h=h(n));var m=vo.apply(void 0,h),v=mo;c&&(v=Io(Lo({trace:!1},"object"==typeof c&&c)));var y=new Ro(m),g=y;return Array.isArray(p)?g=So([m],p):"function"==typeof p&&(g=p(y)),ho(t,f,v.apply(void 0,g))}({reducer:{beers:Ia,basket:Qa,session:pa,user:ss}}),Rs=document.getElementById("root");(0,r.s)(Rs).render((0,Kn.jsx)(t.StrictMode,{children:(0,Kn.jsx)(Me,{store:As,children:(0,Kn.jsx)(vn,{theme:{colorBlack:"#333333",colorWhite:"#ffffff",colorActiveLink:"#ff0101",ffInter:'"Inter", "Arial", sans-serif',ffPermanentMarker:'"Permanent-Marker", "Arial", sans-serif',indent:"100px",indentDesktop:"50px",indentMobile:"20px",indentTablet:"30px"},children:(0,Kn.jsx)(Ts,{})})})}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,