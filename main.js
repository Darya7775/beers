/*! For license information please see main.js.LICENSE.txt */
!function(){var e,t,n={3629:function(e,t,n){"use strict";function r(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function o(e){return!!e&&!!e[V]}function a(e){var t;return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===q}(e)||Array.isArray(e)||!!e[H]||!!(null===(t=e.constructor)||void 0===t?void 0:t[H])||d(e)||p(e))}function i(e){return o(e)||r(23,e),e[V].t}function u(e,t,n){void 0===n&&(n=!1),0===l(e)?(n?Object.keys:Q)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function l(e){var t=e[V];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:d(e)?2:p(e)?3:0}function c(e,t){return 2===l(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function s(e,t,n){var r=l(e);2===r?e.set(t,n):3===r?e.add(n):e[t]=n}function f(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function d(e){return B&&e instanceof Map}function p(e){return U&&e instanceof Set}function h(e){return e.o||e.t}function m(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=G(e);delete t[V];for(var n=Q(t),r=0;r<n.length;r++){var o=n[r],a=t[o];!1===a.writable&&(a.writable=!0,a.configurable=!0),(a.get||a.set)&&(t[o]={configurable:!0,writable:!0,enumerable:a.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function v(e,t){return void 0===t&&(t=!1),g(e)||o(e)||!a(e)||(l(e)>1&&(e.set=e.add=e.clear=e.delete=y),Object.freeze(e),t&&u(e,(function(e,t){return v(t,!0)}),!0)),e}function y(){r(2)}function g(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function b(e){var t=K[e];return t||r(18,e),t}function w(){return M}function x(e,t){t&&(b("Patches"),e.u=[],e.s=[],e.v=t)}function S(e){k(e),e.p.forEach(j),e.p=null}function k(e){e===M&&(M=e.l)}function E(e){return M={p:[],l:M,h:e,m:!0,_:0}}function j(e){var t=e[V];0===t.i||1===t.i?t.j():t.g=!0}function O(e,t){t._=t.p.length;var n=t.p[0],o=void 0!==e&&e!==n;return t.h.O||b("ES5").S(t,e,o),o?(n[V].P&&(S(t),r(4)),a(e)&&(e=P(t,e),t.l||_(t,e)),t.u&&b("Patches").M(n[V].t,e,t.u,t.s)):e=P(t,n,[]),S(t),t.u&&t.v(t.u,t.s),e!==W?e:void 0}function P(e,t,n){if(g(t))return t;var r=t[V];if(!r)return u(t,(function(o,a){return C(e,r,t,o,a,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return _(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=m(r.k):r.o,a=o,i=!1;3===r.i&&(a=new Set(o),o.clear(),i=!0),u(a,(function(t,a){return C(e,r,o,t,a,n,i)})),_(e,o,!1),n&&e.u&&b("Patches").N(r,n,e.u,e.s)}return r.o}function C(e,t,n,r,i,u,l){if(o(i)){var f=P(e,i,u&&t&&3!==t.i&&!c(t.R,r)?u.concat(r):void 0);if(s(n,r,f),!o(f))return;e.m=!1}else l&&n.add(i);if(a(i)&&!g(i)){if(!e.h.D&&e._<1)return;P(e,i),t&&t.A.l||_(e,i)}}function _(e,t,n){void 0===n&&(n=!1),!e.l&&e.h.D&&e.m&&v(t,n)}function A(e,t){var n=e[V];return(n?h(n):e)[t]}function R(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function L(e){e.P||(e.P=!0,e.l&&L(e.l))}function T(e){e.o||(e.o=m(e.t))}function N(e,t,n){var r=d(t)?b("MapSet").F(t,n):p(t)?b("MapSet").T(t,n):e.O?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:w(),P:!1,I:!1,R:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,a=J;n&&(o=[r],a=Y);var i=Proxy.revocable(o,a),u=i.revoke,l=i.proxy;return r.k=l,r.j=u,l}(t,n):b("ES5").J(t,n);return(n?n.A:w()).p.push(r),r}function z(e){return o(e)||r(22,e),function e(t){if(!a(t))return t;var n,r=t[V],o=l(t);if(r){if(!r.P&&(r.i<4||!b("ES5").K(r)))return r.t;r.I=!0,n=D(t,o),r.I=!1}else n=D(t,o);return u(n,(function(t,o){r&&function(e,t){return 2===l(e)?e.get(t):e[t]}(r.t,t)===o||s(n,t,e(o))})),3===o?new Set(n):n}(e)}function D(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return m(e)}n.r(t),n.d(t,{EnhancerArray:function(){return We},MiddlewareArray:function(){return $e},SHOULD_AUTOBATCH:function(){return fn},TaskAbortError:function(){return Wt},__DO_NOT_USE__ActionTypes:function(){return ce},addListener:function(){return on},applyMiddleware:function(){return ve},autoBatchEnhancer:function(){return vn},bindActionCreators:function(){return he},clearAllListeners:function(){return an},combineReducers:function(){return de},compose:function(){return me},configureStore:function(){return Ze},createAction:function(){return et},createAsyncThunk:function(){return bt},createDraftSafeSelector:function(){return Fe},createEntityAdapter:function(){return pt},createImmutableStateInvariantMiddleware:function(){return qe},createListenerMiddleware:function(){return cn},createNextState:function(){return te},createReducer:function(){return it},createSelector:function(){return xe},createSerializableStateInvariantMiddleware:function(){return Je},createSlice:function(){return ut},createStore:function(){return se},current:function(){return z},findNonSerializableValue:function(){return Ge},freeze:function(){return v},getDefaultMiddleware:function(){return Ye},getType:function(){return ot},isAction:function(){return tt},isAllOf:function(){return kt},isAnyOf:function(){return St},isAsyncThunkAction:function(){return At},isDraft:function(){return o},isFluxStandardAction:function(){return nt},isFulfilled:function(){return _t},isImmutableDefault:function(){return Ve},isPending:function(){return Ot},isPlain:function(){return Qe},isPlainObject:function(){return Ue},isRejected:function(){return Pt},isRejectedWithValue:function(){return Ct},legacy_createStore:function(){return fe},miniSerializeError:function(){return gt},nanoid:function(){return ht},original:function(){return i},prepareAutoBatched:function(){return dn},removeListener:function(){return un},unwrapResult:function(){return wt}});var I,M,F="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),B="undefined"!=typeof Map,U="undefined"!=typeof Set,$="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,W=F?Symbol.for("immer-nothing"):((I={})["immer-nothing"]=!0,I),H=F?Symbol.for("immer-draftable"):"__$immer_draftable",V=F?Symbol.for("immer-state"):"__$immer_state",q=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),Q="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,G=Object.getOwnPropertyDescriptors||function(e){var t={};return Q(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},K={},J={get:function(e,t){if(t===V)return e;var n=h(e);if(!c(n,t))return function(e,t,n){var r,o=R(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!a(r)?r:r===A(e.t,t)?(T(e),e.o[t]=N(e.A.h,r,e)):r},has:function(e,t){return t in h(e)},ownKeys:function(e){return Reflect.ownKeys(h(e))},set:function(e,t,n){var r=R(h(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=A(h(e),t),a=null==o?void 0:o[V];if(a&&a.t===n)return e.o[t]=n,e.R[t]=!1,!0;if(f(n,o)&&(void 0!==n||c(e.t,t)))return!0;T(e),L(e)}return e.o[t]===n&&(void 0!==n||t in e.o)||Number.isNaN(n)&&Number.isNaN(e.o[t])||(e.o[t]=n,e.R[t]=!0),!0},deleteProperty:function(e,t){return void 0!==A(e.t,t)||t in e.t?(e.R[t]=!1,T(e),L(e)):delete e.R[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=h(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){r(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){r(12)}},Y={};u(J,(function(e,t){Y[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),Y.deleteProperty=function(e,t){return Y.set.call(this,e,t,void 0)},Y.set=function(e,t,n){return J.set.call(this,e[0],t,n,e[0])};var X=function(){function e(e){var t=this;this.O=$,this.D=!0,this.produce=function(e,n,o){if("function"==typeof e&&"function"!=typeof n){var i=n;n=e;var u=t;return function(e){var t=this;void 0===e&&(e=i);for(var r=arguments.length,o=Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];return u.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(o))}))}}var l;if("function"!=typeof n&&r(6),void 0!==o&&"function"!=typeof o&&r(7),a(e)){var c=E(t),s=N(t,e,void 0),f=!0;try{l=n(s),f=!1}finally{f?S(c):k(c)}return"undefined"!=typeof Promise&&l instanceof Promise?l.then((function(e){return x(c,o),O(e,c)}),(function(e){throw S(c),e})):(x(c,o),O(l,c))}if(!e||"object"!=typeof e){if(void 0===(l=n(e))&&(l=e),l===W&&(l=void 0),t.D&&v(l,!0),o){var d=[],p=[];b("Patches").M(e,l,d,p),o(d,p)}return l}r(21,e)},this.produceWithPatches=function(e,n){if("function"==typeof e)return function(n){for(var r=arguments.length,o=Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(o))}))};var r,o,a=t.produce(e,n,(function(e,t){r=e,o=t}));return"undefined"!=typeof Promise&&a instanceof Promise?a.then((function(e){return[e,r,o]})):[a,r,o]},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){a(e)||r(8),o(e)&&(e=z(e));var t=E(this),n=N(this,e,void 0);return n[V].C=!0,k(t),n},t.finishDraft=function(e,t){var n=(e&&e[V]).A;return x(n,t),O(void 0,n)},t.setAutoFreeze=function(e){this.D=e},t.setUseProxies=function(e){e&&!$&&r(20),this.O=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));var a=b("Patches").$;return o(e)?a(e,t):this.produce(e,(function(e){return a(e,t)}))},e}(),Z=new X,ee=Z.produce,te=(Z.produceWithPatches.bind(Z),Z.setAutoFreeze.bind(Z),Z.setUseProxies.bind(Z),Z.applyPatches.bind(Z),Z.createDraft.bind(Z),Z.finishDraft.bind(Z),ee);function ne(e){return ne="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ne(e)}function re(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==ne(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==ne(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ne(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function oe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ae(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?oe(Object(n),!0).forEach((function(t){re(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):oe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ie(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var ue="function"==typeof Symbol&&Symbol.observable||"@@observable",le=function(){return Math.random().toString(36).substring(7).split("").join(".")},ce={INIT:"@@redux/INIT"+le(),REPLACE:"@@redux/REPLACE"+le(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+le()}};function se(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(ie(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(ie(1));return n(se)(e,t)}if("function"!=typeof e)throw new Error(ie(2));var o=e,a=t,i=[],u=i,l=!1;function c(){u===i&&(u=i.slice())}function s(){if(l)throw new Error(ie(3));return a}function f(e){if("function"!=typeof e)throw new Error(ie(4));if(l)throw new Error(ie(5));var t=!0;return c(),u.push(e),function(){if(t){if(l)throw new Error(ie(6));t=!1,c();var n=u.indexOf(e);u.splice(n,1),i=null}}}function d(e){if(!function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}(e))throw new Error(ie(7));if(void 0===e.type)throw new Error(ie(8));if(l)throw new Error(ie(9));try{l=!0,a=o(a,e)}finally{l=!1}for(var t=i=u,n=0;n<t.length;n++)(0,t[n])();return e}return d({type:ce.INIT}),(r={dispatch:d,subscribe:f,getState:s,replaceReducer:function(e){if("function"!=typeof e)throw new Error(ie(10));o=e,d({type:ce.REPLACE})}})[ue]=function(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(ie(11));function n(){e.next&&e.next(s())}return n(),{unsubscribe:t(n)}}})[ue]=function(){return this},e},r}var fe=se;function de(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var a,i=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:ce.INIT}))throw new Error(ie(12));if(void 0===n(void 0,{type:ce.PROBE_UNKNOWN_ACTION()}))throw new Error(ie(13))}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},u=0;u<i.length;u++){var l=i[u],c=n[l],s=e[l],f=c(s,t);if(void 0===f)throw t&&t.type,new Error(ie(14));o[l]=f,r=r||f!==s}return(r=r||i.length!==Object.keys(e).length)?o:e}}function pe(e,t){return function(){return t(e.apply(this,arguments))}}function he(e,t){if("function"==typeof e)return pe(e,t);if("object"!=typeof e||null===e)throw new Error(ie(16));var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=pe(o,t))}return n}function me(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function ve(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(ie(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(o)}));return r=me.apply(void 0,a)(n.dispatch),ae(ae({},n),{},{dispatch:r})}}}var ye="NOT_FOUND",ge=function(e,t){return e===t};function be(e,t){var n,r,o="object"==typeof t?t:{equalityCheck:t},a=o.equalityCheck,i=void 0===a?ge:a,u=o.maxSize,l=void 0===u?1:u,c=o.resultEqualityCheck,s=function(e){return function(t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,o=0;o<r;o++)if(!e(t[o],n[o]))return!1;return!0}}(i),f=1===l?(n=s,{get:function(e){return r&&n(r.key,e)?r.value:ye},put:function(e,t){r={key:e,value:t}},getEntries:function(){return r?[r]:[]},clear:function(){r=void 0}}):function(e,t){var n=[];function r(e){var r=n.findIndex((function(n){return t(e,n.key)}));if(r>-1){var o=n[r];return r>0&&(n.splice(r,1),n.unshift(o)),o.value}return ye}return{get:r,put:function(t,o){r(t)===ye&&(n.unshift({key:t,value:o}),n.length>e&&n.pop())},getEntries:function(){return n},clear:function(){n=[]}}}(l,s);function d(){var t=f.get(arguments);if(t===ye){if(t=e.apply(null,arguments),c){var n=f.getEntries().find((function(e){return c(e.value,t)}));n&&(t=n.value)}f.put(arguments,t)}return t}return d.clearCache=function(){return f.clear()},d}function we(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){for(var t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];var a,i=0,u={memoizeOptions:void 0},l=r.pop();if("object"==typeof l&&(u=l,l=r.pop()),"function"!=typeof l)throw new Error("createSelector expects an output function after the inputs, but received: ["+typeof l+"]");var c=u.memoizeOptions,s=void 0===c?n:c,f=Array.isArray(s)?s:[s],d=function(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return"function"==typeof e?"function "+(e.name||"unnamed")+"()":typeof e})).join(", ");throw new Error("createSelector expects all input-selectors to be functions, but received the following types: ["+n+"]")}return t}(r),p=e.apply(void 0,[function(){return i++,l.apply(null,arguments)}].concat(f)),h=e((function(){for(var e=[],t=d.length,n=0;n<t;n++)e.push(d[n].apply(null,arguments));return a=p.apply(null,e)}));return Object.assign(h,{resultFunc:l,memoizedResultFunc:p,dependencies:d,lastResult:function(){return a},recomputations:function(){return i},resetRecomputations:function(){return i=0}}),h}}var xe=we(be);function Se(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var ke=Se();ke.withExtraArgument=Se;var Ee,je=ke,Oe=(Ee=function(e,t){return Ee=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},Ee(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}Ee(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),Pe=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},Ce=function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e},_e=Object.defineProperty,Ae=Object.defineProperties,Re=Object.getOwnPropertyDescriptors,Le=Object.getOwnPropertySymbols,Te=Object.prototype.hasOwnProperty,Ne=Object.prototype.propertyIsEnumerable,ze=function(e,t,n){return t in e?_e(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n},De=function(e,t){for(var n in t||(t={}))Te.call(t,n)&&ze(e,n,t[n]);if(Le)for(var r=0,o=Le(t);r<o.length;r++)n=o[r],Ne.call(t,n)&&ze(e,n,t[n]);return e},Ie=function(e,t){return Ae(e,Re(t))},Me=function(e,t,n){return new Promise((function(r,o){var a=function(e){try{u(n.next(e))}catch(e){o(e)}},i=function(e){try{u(n.throw(e))}catch(e){o(e)}},u=function(e){return e.done?r(e.value):Promise.resolve(e.value).then(a,i)};u((n=n.apply(e,t)).next())}))},Fe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=xe.apply(void 0,e);return function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];return n.apply(void 0,Ce([o(e)?z(e):e],t))}},Be="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?me:me.apply(null,arguments)};function Ue(e){if("object"!=typeof e||null===e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;for(var n=t;null!==Object.getPrototypeOf(n);)n=Object.getPrototypeOf(n);return t===n}"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;var $e=function(e){function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=e.apply(this,n)||this;return Object.setPrototypeOf(o,t.prototype),o}return Oe(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,Ce([void 0],e[0].concat(this)))):new(t.bind.apply(t,Ce([void 0],e.concat(this))))},t}(Array),We=function(e){function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=e.apply(this,n)||this;return Object.setPrototypeOf(o,t.prototype),o}return Oe(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,Ce([void 0],e[0].concat(this)))):new(t.bind.apply(t,Ce([void 0],e.concat(this))))},t}(Array);function He(e){return a(e)?te(e,(function(){})):e}function Ve(e){return"object"!=typeof e||null==e||Object.isFrozen(e)}function qe(e){return void 0===e&&(e={}),function(){return function(e){return function(t){return e(t)}}}}function Qe(e){var t=typeof e;return null==e||"string"===t||"boolean"===t||"number"===t||Array.isArray(e)||Ue(e)}function Ge(e,t,n,r,o,a){var i;if(void 0===t&&(t=""),void 0===n&&(n=Qe),void 0===o&&(o=[]),!n(e))return{keyPath:t||"<root>",value:e};if("object"!=typeof e||null===e)return!1;if(null==a?void 0:a.has(e))return!1;for(var u=null!=r?r(e):Object.entries(e),l=o.length>0,c=function(e,u){var c=t?t+"."+e:e;return l&&o.some((function(e){return e instanceof RegExp?e.test(c):c===e}))?"continue":n(u)?"object"==typeof u&&(i=Ge(u,c,n,r,o,a))?{value:i}:void 0:{value:{keyPath:c,value:u}}},s=0,f=u;s<f.length;s++){var d=f[s],p=c(d[0],d[1]);if("object"==typeof p)return p.value}return a&&Ke(e)&&a.add(e),!1}function Ke(e){if(!Object.isFrozen(e))return!1;for(var t=0,n=Object.values(e);t<n.length;t++){var r=n[t];if("object"==typeof r&&null!==r&&!Ke(r))return!1}return!0}function Je(e){return void 0===e&&(e={}),function(){return function(e){return function(t){return e(t)}}}}function Ye(e){void 0===e&&(e={});var t=e.thunk,n=void 0===t||t,r=(e.immutableCheck,e.serializableCheck,new $e);return n&&(function(e){return"boolean"==typeof e}(n)?r.push(je):r.push(je.withExtraArgument(n.extraArgument))),r}var Xe=!0;function Ze(e){var t,n=function(e){return Ye(e)},r=e||{},o=r.reducer,a=void 0===o?void 0:o,i=r.middleware,u=void 0===i?n():i,l=r.devTools,c=void 0===l||l,s=r.preloadedState,f=void 0===s?void 0:s,d=r.enhancers,p=void 0===d?void 0:d;if("function"==typeof a)t=a;else{if(!Ue(a))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=de(a)}var h=u;if("function"==typeof h&&(h=h(n),!Xe&&!Array.isArray(h)))throw new Error("when using a middleware builder function, an array of middleware must be returned");if(!Xe&&h.some((function(e){return"function"!=typeof e})))throw new Error("each middleware provided to configureStore must be a function");var m=ve.apply(void 0,h),v=me;c&&(v=Be(De({trace:!Xe},"object"==typeof c&&c)));var y=new We(m),g=y;return Array.isArray(p)?g=Ce([m],p):"function"==typeof p&&(g=p(y)),se(t,f,v.apply(void 0,g))}function et(e,t){function n(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];if(t){var o=t.apply(void 0,n);if(!o)throw new Error("prepareAction did not return an object");return De(De({type:e,payload:o.payload},"meta"in o&&{meta:o.meta}),"error"in o&&{error:o.error})}return{type:e,payload:n[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function tt(e){return Ue(e)&&"type"in e}function nt(e){return tt(e)&&"string"==typeof e.type&&Object.keys(e).every(rt)}function rt(e){return["type","payload","error","meta"].indexOf(e)>-1}function ot(e){return""+e}function at(e){var t,n={},r=[],o={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,o},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,r,t]}function it(e,t,n,r){void 0===n&&(n=[]);var i,u="function"==typeof t?at(t):[t,n,r],l=u[0],c=u[1],s=u[2];if(function(e){return"function"==typeof e}(e))i=function(){return He(e())};else{var f=He(e);i=function(){return f}}function d(e,t){void 0===e&&(e=i());var n=Ce([l[t.type]],c.filter((function(e){return(0,e.matcher)(t)})).map((function(e){return e.reducer})));return 0===n.filter((function(e){return!!e})).length&&(n=[s]),n.reduce((function(e,n){if(n){var r;if(o(e))return void 0===(r=n(e,t))?e:r;if(a(e))return te(e,(function(e){return n(e,t)}));if(void 0===(r=n(e,t))){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return r}return e}),e)}return d.getInitialState=i,d}function ut(e){var t=e.name;if(!t)throw new Error("`name` is a required option for createSlice");var n,r="function"==typeof e.initialState?e.initialState:He(e.initialState),o=e.reducers||{},a=Object.keys(o),i={},u={},l={};function c(){var t="function"==typeof e.extraReducers?at(e.extraReducers):[e.extraReducers],n=t[0],o=void 0===n?{}:n,a=t[1],i=void 0===a?[]:a,l=t[2],c=void 0===l?void 0:l,s=De(De({},o),u);return it(r,(function(e){for(var t in s)e.addCase(t,s[t]);for(var n=0,r=i;n<r.length;n++){var o=r[n];e.addMatcher(o.matcher,o.reducer)}c&&e.addDefaultCase(c)}))}return a.forEach((function(e){var n,r,a=o[e],c=t+"/"+e;"reducer"in a?(n=a.reducer,r=a.prepare):n=a,i[e]=n,u[c]=n,l[e]=r?et(c,r):et(c)})),{name:t,reducer:function(e,t){return n||(n=c()),n(e,t)},actions:l,caseReducers:i,getInitialState:function(){return n||(n=c()),n.getInitialState()}}}function lt(e){return function(t,n){var r=function(t){nt(n)?e(n.payload,t):e(n,t)};return o(t)?(r(t),t):te(t,r)}}function ct(e,t){return t(e)}function st(e){return Array.isArray(e)||(e=Object.values(e)),e}function ft(e,t,n){for(var r=[],o=[],a=0,i=e=st(e);a<i.length;a++){var u=i[a],l=ct(u,t);l in n.entities?o.push({id:l,changes:u}):r.push(u)}return[r,o]}function dt(e){function t(t,n){var r=ct(t,e);r in n.entities||(n.ids.push(r),n.entities[r]=t)}function n(e,n){for(var r=0,o=e=st(e);r<o.length;r++)t(o[r],n)}function r(t,n){var r=ct(t,e);r in n.entities||n.ids.push(r),n.entities[r]=t}function o(e,t){var n=!1;e.forEach((function(e){e in t.entities&&(delete t.entities[e],n=!0)})),n&&(t.ids=t.ids.filter((function(e){return e in t.entities})))}function a(t,n){var r={},o={};if(t.forEach((function(e){e.id in n.entities&&(o[e.id]={id:e.id,changes:De(De({},o[e.id]?o[e.id].changes:null),e.changes)})})),(t=Object.values(o)).length>0){var a=t.filter((function(t){return function(t,n,r){var o=r.entities[n.id],a=Object.assign({},o,n.changes),i=ct(a,e),u=i!==n.id;return u&&(t[n.id]=i,delete r.entities[n.id]),r.entities[i]=a,u}(r,t,n)})).length>0;a&&(n.ids=Object.keys(n.entities))}}function i(t,r){var o=ft(t,e,r),i=o[0];a(o[1],r),n(i,r)}return{removeAll:(u=function(e){Object.assign(e,{ids:[],entities:{}})},l=lt((function(e,t){return u(t)})),function(e){return l(e,void 0)}),addOne:lt(t),addMany:lt(n),setOne:lt(r),setMany:lt((function(e,t){for(var n=0,o=e=st(e);n<o.length;n++)r(o[n],t)})),setAll:lt((function(e,t){e=st(e),t.ids=[],t.entities={},n(e,t)})),updateOne:lt((function(e,t){return a([e],t)})),updateMany:lt(a),upsertOne:lt((function(e,t){return i([e],t)})),upsertMany:lt(i),removeOne:lt((function(e,t){return o([e],t)})),removeMany:lt(o)};var u,l}function pt(e){void 0===e&&(e={});var t=De({sortComparer:!1,selectId:function(e){return e.id}},e),n=t.selectId,r=t.sortComparer,o={getInitialState:function(e){return void 0===e&&(e={}),Object.assign({ids:[],entities:{}},e)}},a={getSelectors:function(e){var t=function(e){return e.ids},n=function(e){return e.entities},r=Fe(t,n,(function(e,t){return e.map((function(e){return t[e]}))})),o=function(e,t){return t},a=function(e,t){return e[t]},i=Fe(t,(function(e){return e.length}));if(!e)return{selectIds:t,selectEntities:n,selectAll:r,selectTotal:i,selectById:Fe(n,o,a)};var u=Fe(e,n);return{selectIds:Fe(e,t),selectEntities:u,selectAll:Fe(e,r),selectTotal:Fe(e,i),selectById:Fe(u,o,a)}}},i=r?function(e,t){var n=dt(e);function r(t,n){var r=(t=st(t)).filter((function(t){return!(ct(t,e)in n.entities)}));0!==r.length&&u(r,n)}function o(e,t){0!==(e=st(e)).length&&u(e,t)}function a(t,n){for(var r=!1,o=0,a=t;o<a.length;o++){var i=a[o],u=n.entities[i.id];if(u){r=!0,Object.assign(u,i.changes);var c=e(u);i.id!==c&&(delete n.entities[i.id],n.entities[c]=u)}}r&&l(n)}function i(t,n){var o=ft(t,e,n),i=o[0];a(o[1],n),r(i,n)}function u(t,n){t.forEach((function(t){n.entities[e(t)]=t})),l(n)}function l(n){var r=Object.values(n.entities);r.sort(t);var o=r.map(e);(function(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(e[n]!==t[n])return!1;return!0})(n.ids,o)||(n.ids=o)}return{removeOne:n.removeOne,removeMany:n.removeMany,removeAll:n.removeAll,addOne:lt((function(e,t){return r([e],t)})),updateOne:lt((function(e,t){return a([e],t)})),upsertOne:lt((function(e,t){return i([e],t)})),setOne:lt((function(e,t){return o([e],t)})),setMany:lt(o),setAll:lt((function(e,t){e=st(e),t.entities={},t.ids=[],r(e,t)})),addMany:lt(r),updateMany:lt(a),upsertMany:lt(i)}}(n,r):dt(n);return De(De(De({selectId:n,sortComparer:r},o),a),i)}var ht=function(e){void 0===e&&(e=21);for(var t="",n=e;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t},mt=["name","message","stack","code"],vt=function(e,t){this.payload=e,this.meta=t},yt=function(e,t){this.payload=e,this.meta=t},gt=function(e){if("object"==typeof e&&null!==e){for(var t={},n=0,r=mt;n<r.length;n++){var o=r[n];"string"==typeof e[o]&&(t[o]=e[o])}return t}return{message:String(e)}},bt=function(){function e(e,t,n){var r=et(e+"/fulfilled",(function(e,t,n,r){return{payload:e,meta:Ie(De({},r||{}),{arg:n,requestId:t,requestStatus:"fulfilled"})}})),o=et(e+"/pending",(function(e,t,n){return{payload:void 0,meta:Ie(De({},n||{}),{arg:t,requestId:e,requestStatus:"pending"})}})),a=et(e+"/rejected",(function(e,t,r,o,a){return{payload:o,error:(n&&n.serializeError||gt)(e||"Rejected"),meta:Ie(De({},a||{}),{arg:r,requestId:t,rejectedWithValue:!!o,requestStatus:"rejected",aborted:"AbortError"===(null==e?void 0:e.name),condition:"ConditionError"===(null==e?void 0:e.name)})}})),i="undefined"!=typeof AbortController?AbortController:function(){function e(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){},reason:void 0,throwIfAborted:function(){}}}return e.prototype.abort=function(){},e}();return Object.assign((function(e){return function(u,l,c){var s,f=(null==n?void 0:n.idGenerator)?n.idGenerator(e):ht(),d=new i;function p(e){s=e,d.abort()}var h=function(){return Me(this,null,(function(){var i,h,m,v,y,g;return Pe(this,(function(b){switch(b.label){case 0:return b.trys.push([0,4,,5]),null===(w=v=null==(i=null==n?void 0:n.condition)?void 0:i.call(n,e,{getState:l,extra:c}))||"object"!=typeof w||"function"!=typeof w.then?[3,2]:[4,v];case 1:v=b.sent(),b.label=2;case 2:if(!1===v||d.signal.aborted)throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return y=new Promise((function(e,t){return d.signal.addEventListener("abort",(function(){return t({name:"AbortError",message:s||"Aborted"})}))})),u(o(f,e,null==(h=null==n?void 0:n.getPendingMeta)?void 0:h.call(n,{requestId:f,arg:e},{getState:l,extra:c}))),[4,Promise.race([y,Promise.resolve(t(e,{dispatch:u,getState:l,extra:c,requestId:f,signal:d.signal,abort:p,rejectWithValue:function(e,t){return new vt(e,t)},fulfillWithValue:function(e,t){return new yt(e,t)}})).then((function(t){if(t instanceof vt)throw t;return t instanceof yt?r(t.payload,f,e,t.meta):r(t,f,e)}))])];case 3:return m=b.sent(),[3,5];case 4:return g=b.sent(),m=g instanceof vt?a(null,f,e,g.payload,g.meta):a(g,f,e),[3,5];case 5:return n&&!n.dispatchConditionRejection&&a.match(m)&&m.meta.condition||u(m),[2,m]}var w}))}))}();return Object.assign(h,{abort:p,requestId:f,arg:e,unwrap:function(){return h.then(wt)}})}}),{pending:o,rejected:a,fulfilled:r,typePrefix:e})}return e.withTypes=function(){return e},e}();function wt(e){if(e.meta&&e.meta.rejectedWithValue)throw e.payload;if(e.error)throw e.error;return e.payload}var xt=function(e,t){return function(e){return e&&"function"==typeof e.match}(e)?e.match(t):e(t)};function St(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return e.some((function(e){return xt(e,t)}))}}function kt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return e.every((function(e){return xt(e,t)}))}}function Et(e,t){if(!e||!e.meta)return!1;var n="string"==typeof e.meta.requestId,r=t.indexOf(e.meta.requestStatus)>-1;return n&&r}function jt(e){return"function"==typeof e[0]&&"pending"in e[0]&&"fulfilled"in e[0]&&"rejected"in e[0]}function Ot(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?function(e){return Et(e,["pending"])}:jt(e)?function(t){var n=e.map((function(e){return e.pending}));return St.apply(void 0,n)(t)}:Ot()(e[0])}function Pt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?function(e){return Et(e,["rejected"])}:jt(e)?function(t){var n=e.map((function(e){return e.rejected}));return St.apply(void 0,n)(t)}:Pt()(e[0])}function Ct(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=function(e){return e&&e.meta&&e.meta.rejectedWithValue};return 0===e.length||jt(e)?function(t){return kt(Pt.apply(void 0,e),n)(t)}:Ct()(e[0])}function _t(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?function(e){return Et(e,["fulfilled"])}:jt(e)?function(t){var n=e.map((function(e){return e.fulfilled}));return St.apply(void 0,n)(t)}:_t()(e[0])}function At(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?function(e){return Et(e,["pending","fulfilled","rejected"])}:jt(e)?function(t){for(var n=[],r=0,o=e;r<o.length;r++){var a=o[r];n.push(a.pending,a.rejected,a.fulfilled)}return St.apply(void 0,n)(t)}:At()(e[0])}var Rt=function(e,t){if("function"!=typeof e)throw new TypeError(t+" is not a function")},Lt=function(){},Tt=function(e,t){return void 0===t&&(t=Lt),e.catch(t),e},Nt=function(e,t){return e.addEventListener("abort",t,{once:!0}),function(){return e.removeEventListener("abort",t)}},zt=function(e,t){var n=e.signal;n.aborted||("reason"in n||Object.defineProperty(n,"reason",{enumerable:!0,value:t,configurable:!0,writable:!0}),e.abort(t))},Dt="listener",It="completed",Mt="cancelled",Ft="task-"+Mt,Bt="task-"+It,Ut=Dt+"-"+Mt,$t=Dt+"-"+It,Wt=function(e){this.code=e,this.name="TaskAbortError",this.message="task "+Mt+" (reason: "+e+")"},Ht=function(e){if(e.aborted)throw new Wt(e.reason)};function Vt(e,t){var n=Lt;return new Promise((function(r,o){var a=function(){return o(new Wt(e.reason))};e.aborted?a():(n=Nt(e,a),t.finally((function(){return n()})).then(r,o))})).finally((function(){n=Lt}))}var qt=function(e){return function(t){return Tt(Vt(e,t).then((function(t){return Ht(e),t})))}},Qt=function(e){var t=qt(e);return function(e){return t(new Promise((function(t){return setTimeout(t,e)})))}},Gt=Object.assign,Kt={},Jt="listenerMiddleware",Yt=function(e){return function(t){Rt(t,"taskExecutor");var n,r=new AbortController;n=r,Nt(e,(function(){return zt(n,e.reason)}));var o,a,i=(o=function(){return Me(void 0,null,(function(){var n;return Pe(this,(function(o){switch(o.label){case 0:return Ht(e),Ht(r.signal),[4,t({pause:qt(r.signal),delay:Qt(r.signal),signal:r.signal})];case 1:return n=o.sent(),Ht(r.signal),[2,n]}}))}))},a=function(){return zt(r,Bt)},Me(void 0,null,(function(){var e;return Pe(this,(function(t){switch(t.label){case 0:return t.trys.push([0,3,4,5]),[4,Promise.resolve()];case 1:return t.sent(),[4,o()];case 2:return[2,{status:"ok",value:t.sent()}];case 3:return[2,{status:(e=t.sent())instanceof Wt?"cancelled":"rejected",error:e}];case 4:return null==a||a(),[7];case 5:return[2]}}))})));return{result:qt(e)(i),cancel:function(){zt(r,Ft)}}}},Xt=function(e,t){return function(n,r){return Tt(function(n,r){return Me(void 0,null,(function(){var o,a,i,u;return Pe(this,(function(l){switch(l.label){case 0:Ht(t),o=function(){},a=new Promise((function(t,r){var a=e({predicate:n,effect:function(e,n){n.unsubscribe(),t([e,n.getState(),n.getOriginalState()])}});o=function(){a(),r()}})),i=[a],null!=r&&i.push(new Promise((function(e){return setTimeout(e,r,null)}))),l.label=1;case 1:return l.trys.push([1,,3,4]),[4,Vt(t,Promise.race(i))];case 2:return u=l.sent(),Ht(t),[2,u];case 3:return o(),[7];case 4:return[2]}}))}))}(n,r))}},Zt=function(e){var t=e.type,n=e.actionCreator,r=e.matcher,o=e.predicate,a=e.effect;if(t)o=et(t).match;else if(n)t=n.type,o=n.match;else if(r)o=r;else if(!o)throw new Error("Creating or removing a listener requires one of the known fields for matching an action");return Rt(a,"options.listener"),{predicate:o,type:t,effect:a}},en=function(e){var t=Zt(e),n=t.type,r=t.predicate,o=t.effect;return{id:ht(),effect:o,type:n,predicate:r,pending:new Set,unsubscribe:function(){throw new Error("Unsubscribe not initialized")}}},tn=function(e){e.pending.forEach((function(e){zt(e,Ut)}))},nn=function(e){return function(){e.forEach(tn),e.clear()}},rn=function(e,t,n){try{e(t,n)}catch(e){setTimeout((function(){throw e}),0)}},on=et(Jt+"/add"),an=et(Jt+"/removeAll"),un=et(Jt+"/remove"),ln=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.error.apply(console,Ce([Jt+"/error"],e))};function cn(e){var t=this;void 0===e&&(e={});var n=new Map,r=e.extra,o=e.onError,a=void 0===o?ln:o;Rt(a,"onError");var i=function(e){for(var t=0,r=Array.from(n.values());t<r.length;t++){var o=r[t];if(e(o))return o}},u=function(e){var t=i((function(t){return t.effect===e.effect}));return t||(t=en(e)),function(e){return e.unsubscribe=function(){return n.delete(e.id)},n.set(e.id,e),function(t){e.unsubscribe(),(null==t?void 0:t.cancelActive)&&tn(e)}}(t)},l=function(e){var t=Zt(e),n=t.type,r=t.effect,o=t.predicate,a=i((function(e){return("string"==typeof n?e.type===n:e.predicate===o)&&e.effect===r}));return a&&(a.unsubscribe(),e.cancelActive&&tn(a)),!!a},c=function(e,o,i,l){return Me(t,null,(function(){var t,c,s;return Pe(this,(function(f){switch(f.label){case 0:t=new AbortController,c=Xt(u,t.signal),f.label=1;case 1:return f.trys.push([1,3,4,5]),e.pending.add(t),[4,Promise.resolve(e.effect(o,Gt({},i,{getOriginalState:l,condition:function(e,t){return c(e,t).then(Boolean)},take:c,delay:Qt(t.signal),pause:qt(t.signal),extra:r,signal:t.signal,fork:Yt(t.signal),unsubscribe:e.unsubscribe,subscribe:function(){n.set(e.id,e)},cancelActiveListeners:function(){e.pending.forEach((function(e,n,r){e!==t&&(zt(e,Ut),r.delete(e))}))}})))];case 2:return f.sent(),[3,5];case 3:return(s=f.sent())instanceof Wt||rn(a,s,{raisedBy:"effect"}),[3,5];case 4:return zt(t,$t),e.pending.delete(t),[7];case 5:return[2]}}))}))},s=nn(n);return{middleware:function(e){return function(t){return function(r){if(!tt(r))return t(r);if(on.match(r))return u(r.payload);if(!an.match(r)){if(un.match(r))return l(r.payload);var o,i=e.getState(),f=function(){if(i===Kt)throw new Error(Jt+": getOriginalState can only be called synchronously");return i};try{if(o=t(r),n.size>0)for(var d=e.getState(),p=Array.from(n.values()),h=0,m=p;h<m.length;h++){var v=m[h],y=!1;try{y=v.predicate(r,d,i)}catch(e){y=!1,rn(a,e,{raisedBy:"predicate"})}y&&c(v,r,e,f)}}finally{i=Kt}return o}s()}}},startListening:u,stopListening:l,clearListeners:s}}var sn,fn="RTK_autoBatch",dn=function(){return function(e){var t;return{payload:e,meta:(t={},t[fn]=!0,t)}}},pn="function"==typeof queueMicrotask?queueMicrotask.bind("undefined"!=typeof window?window:void 0!==n.g?n.g:globalThis):function(e){return(sn||(sn=Promise.resolve())).then(e).catch((function(e){return setTimeout((function(){throw e}),0)}))},hn=function(e){return function(t){setTimeout(t,e)}},mn="undefined"!=typeof window&&window.requestAnimationFrame?window.requestAnimationFrame:hn(10),vn=function(e){return void 0===e&&(e={type:"raf"}),function(t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=t.apply(void 0,n),a=!0,i=!1,u=!1,l=new Set,c="tick"===e.type?pn:"raf"===e.type?mn:"callback"===e.type?e.queueNotification:hn(e.timeout),s=function(){u=!1,i&&(i=!1,l.forEach((function(e){return e()})))};return Object.assign({},o,{subscribe:function(e){var t=o.subscribe((function(){return a&&e()}));return l.add(e),function(){t(),l.delete(e)}},dispatch:function(e){var t;try{return a=!(null==(t=null==e?void 0:e.meta)?void 0:t[fn]),(i=!a)&&(u||(u=!0,c(s))),o.dispatch(e)}finally{a=!0}}})}}};!function(){function e(e,t){var n=a[e];return n?n.enumerable=t:a[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[V];return J.get(t,e)},set:function(t){var n=this[V];J.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][V];if(!o.P)switch(o.i){case 5:r(o)&&L(o);break;case 4:n(o)&&L(o)}}}function n(e){for(var t=e.t,n=e.k,r=Q(n),o=r.length-1;o>=0;o--){var a=r[o];if(a!==V){var i=t[a];if(void 0===i&&!c(t,a))return!0;var u=n[a],l=u&&u[V];if(l?l.t!==i:!f(u,i))return!0}}var s=!!t[V];return r.length!==Q(t).length+(s?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);if(n&&!n.get)return!0;for(var r=0;r<t.length;r++)if(!t.hasOwnProperty(r))return!0;return!1}var a={};!function(e,t){K[e]||(K[e]=t)}("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var a=G(n);delete a[V];for(var i=Q(a),u=0;u<i.length;u++){var l=i[u];a[l]=e(l,t||!!a[l].enumerable)}return Object.create(Object.getPrototypeOf(n),a)}(r,t),a={i:r?5:4,A:n?n.A:w(),P:!1,I:!1,R:{},l:n,t:t,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,V,{value:a,writable:!0}),o},S:function(e,n,a){a?o(n)&&n[V].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[V];if(n){var o=n.t,a=n.k,i=n.R,l=n.i;if(4===l)u(a,(function(t){t!==V&&(void 0!==o[t]||c(o,t)?i[t]||e(a[t]):(i[t]=!0,L(n)))})),u(o,(function(e){void 0!==a[e]||c(a,e)||(i[e]=!1,L(n))}));else if(5===l){if(r(n)&&(L(n),i.length=!0),a.length<o.length)for(var s=a.length;s<o.length;s++)i[s]=!1;else for(var f=o.length;f<a.length;f++)i[f]=!0;for(var d=Math.min(a.length,o.length),p=0;p<d;p++)a.hasOwnProperty(p)||(i[p]=!0),void 0===i[p]&&e(a[p])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}()},2599:function(e,t,n){"use strict";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}var o;n.d(t,{AV:function(){return W},Ep:function(){return p},Gn:function(){return A},J0:function(){return c},LX:function(){return R},PP:function(){return i},PQ:function(){return Q},RQ:function(){return F},WK:function(){return J},X3:function(){return H},Zn:function(){return T},Zq:function(){return I},aU:function(){return o},cP:function(){return h},fp:function(){return g},i3:function(){return z},iQ:function(){return K},lX:function(){return u},p7:function(){return ce},pC:function(){return M},q_:function(){return l},uX:function(){return G}}),function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(o||(o={}));const a="popstate";function i(e){void 0===e&&(e={});let t,{initialEntries:n=["/"],initialIndex:r,v5Compat:a=!1}=e;t=n.map(((e,t)=>m(e,"string"==typeof e?null:e.state,0===t?"default":void 0)));let i=c(null==r?t.length-1:r),u=o.Pop,l=null;function c(e){return Math.min(Math.max(e,0),t.length-1)}function f(){return t[i]}function m(e,n,r){void 0===n&&(n=null);let o=d(t?f().pathname:"/",e,n,r);return s("/"===o.pathname.charAt(0),"relative pathnames are not supported in memory history: "+JSON.stringify(e)),o}function v(e){return"string"==typeof e?e:p(e)}return{get index(){return i},get action(){return u},get location(){return f()},createHref:v,createURL(e){return new URL(v(e),"http://localhost")},encodeLocation(e){let t="string"==typeof e?h(e):e;return{pathname:t.pathname||"",search:t.search||"",hash:t.hash||""}},push(e,n){u=o.Push;let r=m(e,n);i+=1,t.splice(i,t.length,r),a&&l&&l({action:u,location:r,delta:1})},replace(e,n){u=o.Replace;let r=m(e,n);t[i]=r,a&&l&&l({action:u,location:r,delta:0})},go(e){u=o.Pop;let n=c(i+e),r=t[n];i=n,l&&l({action:u,location:r,delta:e})},listen(e){return l=e,()=>{l=null}}}}function u(e){return void 0===e&&(e={}),m((function(e,t){let{pathname:n,search:r,hash:o}=e.location;return d("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:p(t)}),null,e)}function l(e){return void 0===e&&(e={}),m((function(e,t){let{pathname:n="/",search:r="",hash:o=""}=h(e.location.hash.substr(1));return d("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:p(t))}),(function(e,t){s("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),e)}function c(e,t){if(!1===e||null==e)throw new Error(t)}function s(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function f(e,t){return{usr:e.state,key:e.key,idx:t}}function d(e,t,n,o){return void 0===n&&(n=null),r({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?h(t):t,{state:n,key:t&&t.key||o||Math.random().toString(36).substr(2,8)})}function p(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function h(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}function m(e,t,n,i){void 0===i&&(i={});let{window:u=document.defaultView,v5Compat:l=!1}=i,s=u.history,h=o.Pop,m=null,v=y();function y(){return(s.state||{idx:null}).idx}function g(){h=o.Pop;let e=y(),t=null==e?null:e-v;v=e,m&&m({action:h,location:w.location,delta:t})}function b(e){let t="null"!==u.location.origin?u.location.origin:u.location.href,n="string"==typeof e?e:p(e);return c(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==v&&(v=0,s.replaceState(r({},s.state,{idx:v}),""));let w={get action(){return h},get location(){return e(u,s)},listen(e){if(m)throw new Error("A history only accepts one active listener");return u.addEventListener(a,g),m=e,()=>{u.removeEventListener(a,g),m=null}},createHref(e){return t(u,e)},createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){h=o.Push;let r=d(w.location,e,t);n&&n(r,e),v=y()+1;let a=f(r,v),i=w.createHref(r);try{s.pushState(a,"",i)}catch(e){u.location.assign(i)}l&&m&&m({action:h,location:w.location,delta:1})},replace:function(e,t){h=o.Replace;let r=d(w.location,e,t);n&&n(r,e),v=y();let a=f(r,v),i=w.createHref(r);s.replaceState(a,"",i),l&&m&&m({action:h,location:w.location,delta:0})},go(e){return s.go(e)}};return w}var v;function y(e,t,n){return void 0===t&&(t=[]),void 0===n&&(n=new Set),e.map(((e,o)=>{let a=[...t,o],i="string"==typeof e.id?e.id:a.join("-");return c(!0!==e.index||!e.children,"Cannot specify children on an index route"),c(!n.has(i),'Found a route id collision on id "'+i+"\".  Route id's must be globally unique within Data Router usages"),n.add(i),function(e){return!0===e.index}(e)?r({},e,{id:i}):r({},e,{id:i,children:e.children?y(e.children,a,n):void 0})}))}function g(e,t,n){void 0===n&&(n="/");let r=T(("string"==typeof t?h(t):t).pathname||"/",n);if(null==r)return null;let o=b(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let a=null;for(let e=0;null==a&&e<o.length;++e)a=_(o[e],L(r));return a}function b(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let o=(e,o,a)=>{let i={relativePath:void 0===a?e.path||"":a,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(c(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let u=F([r,i.relativePath]),l=n.concat(i);e.children&&e.children.length>0&&(c(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+u+'".'),b(e.children,t,l,u)),(null!=e.path||e.index)&&t.push({path:u,score:C(u,e.index),routesMeta:l})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of w(e.path))o(e,t,n);else o(e,t)})),t}function w(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,o=n.endsWith("?"),a=n.replace(/\?$/,"");if(0===r.length)return o?[a,""]:[a];let i=w(r.join("/")),u=[];return u.push(...i.map((e=>""===e?a:[a,e].join("/")))),o&&u.push(...i),u.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(v||(v={}));const x=/^:\w+$/,S=3,k=2,E=1,j=10,O=-2,P=e=>"*"===e;function C(e,t){let n=e.split("/"),r=n.length;return n.some(P)&&(r+=O),t&&(r+=k),n.filter((e=>!P(e))).reduce(((e,t)=>e+(x.test(t)?S:""===t?E:j)),r)}function _(e,t){let{routesMeta:n}=e,r={},o="/",a=[];for(let e=0;e<n.length;++e){let i=n[e],u=e===n.length-1,l="/"===o?t:t.slice(o.length)||"/",c=R({path:i.relativePath,caseSensitive:i.caseSensitive,end:u},l);if(!c)return null;Object.assign(r,c.params);let s=i.route;a.push({params:r,pathname:F([o,c.pathname]),pathnameBase:B(F([o,c.pathnameBase])),route:s}),"/"!==c.pathnameBase&&(o=F([o,c.pathnameBase]))}return a}function A(e,t){void 0===t&&(t={});let n=e;return n.endsWith("*")&&"*"!==n&&!n.endsWith("/*")&&(N(!1,'Route path "'+n+'" will be treated as if it were "'+n.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+n.replace(/\*$/,"/*")+'".'),n=n.replace(/\*$/,"/*")),n.replace(/^:(\w+)(\??)/g,((e,n,r)=>{let o=t[n];return"?"===r?null==o?"":o:(null==o&&c(!1,'Missing ":'+n+'" param'),o)})).replace(/\/:(\w+)(\??)/g,((e,n,r)=>{let o=t[n];return"?"===r?null==o?"":"/"+o:(null==o&&c(!1,'Missing ":'+n+'" param'),"/"+o)})).replace(/\?/g,"").replace(/(\/?)\*/,((e,n,r,o)=>null==t["*"]?"/*"===o?"/":"":""+n+t["*"]))}function R(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),N("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(r.push(t),"/([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),u=o.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=u[n]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return N(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(u[n]||"",t),e}),{}),pathname:a,pathnameBase:i,pattern:e}}function L(e){try{return decodeURI(e)}catch(t){return N(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function T(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function N(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function z(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?h(e):e,a=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:a,search:U(r),hash:$(o)}}function D(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function I(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function M(e,t,n,o){let a;void 0===o&&(o=!1),"string"==typeof e?a=h(e):(a=r({},e),c(!a.pathname||!a.pathname.includes("?"),D("?","pathname","search",a)),c(!a.pathname||!a.pathname.includes("#"),D("#","pathname","hash",a)),c(!a.search||!a.search.includes("#"),D("#","search","hash",a)));let i,u=""===e||""===a.pathname,l=u?"/":a.pathname;if(o||null==l)i=n;else{let e=t.length-1;if(l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}i=e>=0?t[e]:"/"}let s=z(a,i),f=l&&"/"!==l&&l.endsWith("/"),d=(u||"."===l)&&n.endsWith("/");return s.pathname.endsWith("/")||!f&&!d||(s.pathname+="/"),s}const F=e=>e.join("/").replace(/\/\/+/g,"/"),B=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),U=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",$=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"",W=function(e,t){void 0===t&&(t={});let n="number"==typeof t?{status:t}:t,o=new Headers(n.headers);return o.has("Content-Type")||o.set("Content-Type","application/json; charset=utf-8"),new Response(JSON.stringify(e),r({},n,{headers:o}))};class H extends Error{}class V{constructor(e,t){let n;this.pendingKeysSet=new Set,this.subscribers=new Set,this.deferredKeys=[],c(e&&"object"==typeof e&&!Array.isArray(e),"defer() only accepts plain objects"),this.abortPromise=new Promise(((e,t)=>n=t)),this.controller=new AbortController;let r=()=>n(new H("Deferred data aborted"));this.unlistenAbortSignal=()=>this.controller.signal.removeEventListener("abort",r),this.controller.signal.addEventListener("abort",r),this.data=Object.entries(e).reduce(((e,t)=>{let[n,r]=t;return Object.assign(e,{[n]:this.trackPromise(n,r)})}),{}),this.done&&this.unlistenAbortSignal(),this.init=t}trackPromise(e,t){if(!(t instanceof Promise))return t;this.deferredKeys.push(e),this.pendingKeysSet.add(e);let n=Promise.race([t,this.abortPromise]).then((t=>this.onSettle(n,e,null,t)),(t=>this.onSettle(n,e,t)));return n.catch((()=>{})),Object.defineProperty(n,"_tracked",{get:()=>!0}),n}onSettle(e,t,n,r){return this.controller.signal.aborted&&n instanceof H?(this.unlistenAbortSignal(),Object.defineProperty(e,"_error",{get:()=>n}),Promise.reject(n)):(this.pendingKeysSet.delete(t),this.done&&this.unlistenAbortSignal(),n?(Object.defineProperty(e,"_error",{get:()=>n}),this.emit(!1,t),Promise.reject(n)):(Object.defineProperty(e,"_data",{get:()=>r}),this.emit(!1,t),r))}emit(e,t){this.subscribers.forEach((n=>n(e,t)))}subscribe(e){return this.subscribers.add(e),()=>this.subscribers.delete(e)}cancel(){this.controller.abort(),this.pendingKeysSet.forEach(((e,t)=>this.pendingKeysSet.delete(t))),this.emit(!0)}async resolveData(e){let t=!1;if(!this.done){let n=()=>this.cancel();e.addEventListener("abort",n),t=await new Promise((t=>{this.subscribe((r=>{e.removeEventListener("abort",n),(r||this.done)&&t(r)}))}))}return t}get done(){return 0===this.pendingKeysSet.size}get unwrappedData(){return c(null!==this.data&&this.done,"Can only unwrap data on initialized and settled deferreds"),Object.entries(this.data).reduce(((e,t)=>{let[n,r]=t;return Object.assign(e,{[n]:q(r)})}),{})}get pendingKeys(){return Array.from(this.pendingKeysSet)}}function q(e){if(!function(e){return e instanceof Promise&&!0===e._tracked}(e))return e;if(e._error)throw e._error;return e._data}const Q=function(e,t){return void 0===t&&(t={}),new V(e,"number"==typeof t?{status:t}:t)},G=function(e,t){void 0===t&&(t=302);let n=t;"number"==typeof n?n={status:n}:void 0===n.status&&(n.status=302);let o=new Headers(n.headers);return o.set("Location",e),new Response(null,r({},n,{headers:o}))};class K{constructor(e,t,n,r){void 0===r&&(r=!1),this.status=e,this.statusText=t||"",this.internal=r,n instanceof Error?(this.data=n.toString(),this.error=n):this.data=n}}function J(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const Y=["post","put","patch","delete"],X=new Set(Y),Z=["get",...Y],ee=new Set(Z),te=new Set([301,302,303,307,308]),ne=new Set([307,308]),re={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},oe={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},ae={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},ie=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ue="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,le=!ue;function ce(e){c(e.routes.length>0,"You must provide a non-empty routes array to createRouter");let t,n=y(e.routes),a=null,i=new Set,u=null,l=null,s=null,f=null!=e.hydrationData,p=g(n,e.history.location,e.basename),h=null;if(null==p){let t=xe(404,{pathname:e.history.location.pathname}),{matches:r,route:o}=we(n);p=r,h={[o.id]:t}}let m,b,w=!p.some((e=>e.route.loader))||null!=e.hydrationData,x={historyAction:e.history.action,location:e.history.location,matches:p,initialized:w,navigation:re,restoreScrollPosition:null==e.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||h,fetchers:new Map,blockers:new Map},S=o.Pop,k=!1,E=!1,j=!1,O=[],P=[],C=new Map,_=0,A=-1,R=new Map,L=new Set,z=new Map,D=new Map,I=new Map,M=!1;function F(e){x=r({},x,e),i.forEach((e=>e(x)))}function B(a,i){var u,l;let c,s=null!=x.actionData&&null!=x.navigation.formMethod&&Pe(x.navigation.formMethod)&&"loading"===x.navigation.state&&!0!==(null==(u=a.state)?void 0:u._isRedirect);c=i.actionData?Object.keys(i.actionData).length>0?i.actionData:null:s?x.actionData:null;let f=i.loaderData?ge(x.loaderData,i.loaderData,i.matches||[],i.errors):x.loaderData;for(let[e]of I)Y(e);let d=!0===k||null!=x.navigation.formMethod&&Pe(x.navigation.formMethod)&&!0!==(null==(l=a.state)?void 0:l._isRedirect);t&&(n=t,t=void 0),F(r({},i,{actionData:c,loaderData:f,historyAction:S,location:a,initialized:!0,navigation:re,revalidation:"idle",restoreScrollPosition:te(a,i.matches||x.matches),preventScrollReset:d,blockers:new Map(x.blockers)})),E||S===o.Pop||(S===o.Push?e.history.push(a,a.state):S===o.Replace&&e.history.replace(a,a.state)),S=o.Pop,k=!1,E=!1,j=!1,O=[],P=[]}async function U(a,i,f){b&&b.abort(),b=null,S=a,E=!0===(f&&f.startUninterruptedRevalidation),function(e,t){if(u&&l&&s){let n=t.map((e=>Re(e,x.loaderData))),r=l(e,n)||e.key;u[r]=s()}}(x.location,x.matches),k=!0===(f&&f.preventScrollReset);let d=t||n,p=f&&f.overrideNavigation,h=g(d,i,e.basename);if(!h){let e=xe(404,{pathname:i.pathname}),{matches:t,route:n}=we(d);return ee(),void B(i,{matches:t,loaderData:{},errors:{[n.id]:e}})}if(w=i,!((y=x.location).pathname!==w.pathname||y.search!==w.search||y.hash===w.hash||f&&f.submission&&Pe(f.submission.formMethod)))return void B(i,{matches:h});var y,w;b=new AbortController;let R,T,N=me(e.history,i,b.signal,f&&f.submission);if(f&&f.pendingError)T={[be(h).route.id]:f.pendingError};else if(f&&f.submission&&Pe(f.submission.formMethod)){let e=await async function(e,t,n,a,i){let u;V(),F({navigation:r({state:"submitting",location:t},n)});let l=Le(a,t);if(l.route.action){if(u=await he("action",e,l,a,m.basename),e.signal.aborted)return{shortCircuited:!0}}else u={type:v.error,error:xe(405,{method:e.method,pathname:t.pathname,routeId:l.route.id})};if(Oe(u)){let e;return e=i&&null!=i.replace?i.replace:u.location===x.location.pathname+x.location.search,await W(x,u,{submission:n,replace:e}),{shortCircuited:!0}}if(je(u)){let e=be(a,l.route.id);return!0!==(i&&i.replace)&&(S=o.Push),{pendingActionData:{},pendingActionError:{[e.route.id]:u.error}}}if(Ee(u))throw xe(400,{type:"defer-action"});return{pendingActionData:{[l.route.id]:u.data}}}(N,i,f.submission,h,{replace:f.replace});if(e.shortCircuited)return;R=e.pendingActionData,T=e.pendingActionError,p=r({state:"loading",location:i},f.submission),N=new Request(N.url,{signal:N.signal})}let{shortCircuited:I,loaderData:M,errors:U}=await async function(o,a,i,u,l,s,f,d){let p=u;p||(p=r({state:"loading",location:a,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},l));let h=l||(p.formMethod&&p.formAction&&p.formData&&p.formEncType?{formMethod:p.formMethod,formAction:p.formAction,formData:p.formData,formEncType:p.formEncType}:void 0),m=t||n,[v,y]=fe(e.history,x,i,h,a,j,O,P,z,m,e.basename,f,d);if(ee((e=>!(i&&i.some((t=>t.route.id===e)))||v&&v.some((t=>t.route.id===e)))),0===v.length&&0===y.length)return B(a,r({matches:i,loaderData:{},errors:d||null},f?{actionData:f}:{})),{shortCircuited:!0};if(!E){y.forEach((e=>{let t=x.fetchers.get(e.key),n={state:"loading",data:t&&t.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};x.fetchers.set(e.key,n)}));let e=f||x.actionData;F(r({navigation:p},e?0===Object.keys(e).length?{actionData:null}:{actionData:e}:{},y.length>0?{fetchers:new Map(x.fetchers)}:{}))}A=++_,y.forEach((e=>C.set(e.key,b)));let{results:g,loaderResults:w,fetcherResults:S}=await H(x.matches,i,v,y,o);if(o.signal.aborted)return{shortCircuited:!0};y.forEach((e=>C.delete(e.key)));let k=Se(g);if(k)return await W(x,k,{replace:s}),{shortCircuited:!0};let{loaderData:R,errors:T}=ye(x,i,v,w,d,y,S,D);return D.forEach(((e,t)=>{e.subscribe((n=>{(n||e.done)&&D.delete(t)}))})),function(){let e=[];for(let t of L){let n=x.fetchers.get(t);c(n,"Expected fetcher: "+t),"loading"===n.state&&(L.delete(t),e.push(t))}K(e)}(),r({loaderData:R,errors:T},J(A)||y.length>0?{fetchers:new Map(x.fetchers)}:{})}(N,i,h,p,f&&f.submission,f&&f.replace,R,T);I||(b=null,B(i,r({matches:h},R?{actionData:R}:{},{loaderData:M,errors:U})))}function $(e){return x.fetchers.get(e)||oe}async function W(t,n,a){var i;let{submission:u,replace:l,isFetchActionRedirect:s}=void 0===a?{}:a;n.revalidate&&(j=!0);let f=d(t.location,n.location,r({_isRedirect:!0},s?{_isFetchActionRedirect:!0}:{}));if(c(f,"Expected a location on the redirect navigation"),ie.test(n.location)&&ue&&void 0!==(null==(i=window)?void 0:i.location)){let t=e.history.createURL(n.location),r=null==T(t.pathname,e.basename||"/");if(window.location.origin!==t.origin||r)return void(l?window.location.replace(n.location):window.location.assign(n.location))}b=null;let p=!0===l?o.Replace:o.Push,{formMethod:h,formAction:m,formEncType:v,formData:y}=t.navigation;!u&&h&&m&&y&&v&&(u={formMethod:h,formAction:m,formEncType:v,formData:y}),ne.has(n.status)&&u&&Pe(u.formMethod)?await U(p,f,{submission:r({},u,{formAction:n.location}),preventScrollReset:k}):await U(p,f,{overrideNavigation:{state:"loading",location:f,formMethod:u?u.formMethod:void 0,formAction:u?u.formAction:void 0,formEncType:u?u.formEncType:void 0,formData:u?u.formData:void 0},preventScrollReset:k})}async function H(t,n,r,o,a){let i=await Promise.all([...r.map((e=>he("loader",a,e,n,m.basename))),...o.map((t=>t.matches&&t.match?he("loader",me(e.history,t.path,a.signal),t.match,t.matches,m.basename):{type:v.error,error:xe(404,{pathname:t.path})}))]),u=i.slice(0,r.length),l=i.slice(r.length);return await Promise.all([Ce(t,r,u,a.signal,!1,x.loaderData),Ce(t,o.map((e=>e.match)),l,a.signal,!0)]),{results:i,loaderResults:u,fetcherResults:l}}function V(){j=!0,O.push(...ee()),z.forEach(((e,t)=>{C.has(t)&&(P.push(t),G(t))}))}function q(e,t,n){let r=be(x.matches,t);Q(e),F({errors:{[r.route.id]:n},fetchers:new Map(x.fetchers)})}function Q(e){C.has(e)&&G(e),z.delete(e),R.delete(e),L.delete(e),x.fetchers.delete(e)}function G(e){let t=C.get(e);c(t,"Expected fetch controller: "+e),t.abort(),C.delete(e)}function K(e){for(let t of e){let e={state:"idle",data:$(t).data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};x.fetchers.set(t,e)}}function J(e){let t=[];for(let[n,r]of R)if(r<e){let e=x.fetchers.get(n);c(e,"Expected fetcher: "+n),"loading"===e.state&&(G(n),R.delete(n),t.push(n))}return K(t),t.length>0}function Y(e){x.blockers.delete(e),I.delete(e)}function X(e,t){let n=x.blockers.get(e)||ae;c("unblocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"proceeding"===t.state||"blocked"===n.state&&"unblocked"===t.state||"proceeding"===n.state&&"unblocked"===t.state,"Invalid blocker state transition: "+n.state+" -> "+t.state),x.blockers.set(e,t),F({blockers:new Map(x.blockers)})}function Z(e){let{currentLocation:t,nextLocation:n,historyAction:r}=e;if(0===I.size)return;I.size>1&&N(!1,"A router only supports one blocker at a time");let o=Array.from(I.entries()),[a,i]=o[o.length-1],u=x.blockers.get(a);return u&&"proceeding"===u.state?void 0:i({currentLocation:t,nextLocation:n,historyAction:r})?a:void 0}function ee(e){let t=[];return D.forEach(((n,r)=>{e&&!e(r)||(n.cancel(),t.push(r),D.delete(r))})),t}function te(e,t){if(u&&l&&s){let n=t.map((e=>Re(e,x.loaderData))),r=l(e,n)||e.key,o=u[r];if("number"==typeof o)return o}return null}return m={get basename(){return e.basename},get state(){return x},get routes(){return n},initialize:function(){return a=e.history.listen((t=>{let{action:n,location:r,delta:o}=t;if(M)return void(M=!1);N(0===I.size||null!=o,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let a=Z({currentLocation:x.location,nextLocation:r,historyAction:n});return a&&null!=o?(M=!0,e.history.go(-1*o),void X(a,{state:"blocked",location:r,proceed(){X(a,{state:"proceeding",proceed:void 0,reset:void 0,location:r}),e.history.go(o)},reset(){Y(a),F({blockers:new Map(m.state.blockers)})}})):U(n,r)})),x.initialized||U(o.Pop,x.location),m},subscribe:function(e){return i.add(e),()=>i.delete(e)},enableScrollRestoration:function(e,t,n){if(u=e,s=t,l=n||(e=>e.key),!f&&x.navigation===re){f=!0;let e=te(x.location,x.matches);null!=e&&F({restoreScrollPosition:e})}return()=>{u=null,s=null,l=null}},navigate:async function t(n,a){if("number"==typeof n)return void e.history.go(n);let{path:i,submission:u,error:l}=se(n,a),c=x.location,s=d(x.location,i,a&&a.state);s=r({},s,e.history.encodeLocation(s));let f=a&&null!=a.replace?a.replace:void 0,p=o.Push;!0===f?p=o.Replace:!1===f||null!=u&&Pe(u.formMethod)&&u.formAction===x.location.pathname+x.location.search&&(p=o.Replace);let h=a&&"preventScrollReset"in a?!0===a.preventScrollReset:void 0,m=Z({currentLocation:c,nextLocation:s,historyAction:p});if(!m)return await U(p,s,{submission:u,pendingError:l,preventScrollReset:h,replace:a&&a.replace});X(m,{state:"blocked",location:s,proceed(){X(m,{state:"proceeding",proceed:void 0,reset:void 0,location:s}),t(n,a)},reset(){Y(m),F({blockers:new Map(x.blockers)})}})},fetch:function(o,a,i,u){if(le)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");C.has(o)&&G(o);let l=g(t||n,i,e.basename);if(!l)return void q(o,a,xe(404,{pathname:i}));let{path:s,submission:f}=se(i,u,!0),d=Le(l,s);k=!0===(u&&u.preventScrollReset),f&&Pe(f.formMethod)?async function(o,a,i,u,l,s){if(V(),z.delete(o),!u.route.action){let e=xe(405,{method:s.formMethod,pathname:i,routeId:a});return void q(o,a,e)}let f=x.fetchers.get(o),d=r({state:"submitting"},s,{data:f&&f.data," _hasFetcherDoneAnything ":!0});x.fetchers.set(o,d),F({fetchers:new Map(x.fetchers)});let p=new AbortController,h=me(e.history,i,p.signal,s);C.set(o,p);let v=await he("action",h,u,l,m.basename);if(h.signal.aborted)return void(C.get(o)===p&&C.delete(o));if(Oe(v)){C.delete(o),L.add(o);let e=r({state:"loading"},s,{data:void 0," _hasFetcherDoneAnything ":!0});return x.fetchers.set(o,e),F({fetchers:new Map(x.fetchers)}),W(x,v,{isFetchActionRedirect:!0})}if(je(v))return void q(o,a,v.error);if(Ee(v))throw xe(400,{type:"defer-action"});let y=x.navigation.location||x.location,w=me(e.history,y,p.signal),k=t||n,E="idle"!==x.navigation.state?g(k,x.navigation.location,e.basename):x.matches;c(E,"Didn't find any matches after fetcher action");let T=++_;R.set(o,T);let N=r({state:"loading",data:v.data},s,{" _hasFetcherDoneAnything ":!0});x.fetchers.set(o,N);let[I,M]=fe(e.history,x,E,s,y,j,O,P,z,k,e.basename,{[u.route.id]:v.data},void 0);M.filter((e=>e.key!==o)).forEach((e=>{let t=e.key,n=x.fetchers.get(t),r={state:"loading",data:n&&n.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};x.fetchers.set(t,r),C.set(t,p)})),F({fetchers:new Map(x.fetchers)});let{results:U,loaderResults:$,fetcherResults:Q}=await H(x.matches,E,I,M,w);if(p.signal.aborted)return;R.delete(o),C.delete(o),M.forEach((e=>C.delete(e.key)));let G=Se(U);if(G)return W(x,G);let{loaderData:K,errors:Y}=ye(x,x.matches,I,$,void 0,M,Q,D),X={state:"idle",data:v.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};x.fetchers.set(o,X);let Z=J(T);"loading"===x.navigation.state&&T>A?(c(S,"Expected pending action"),b&&b.abort(),B(x.navigation.location,{matches:E,loaderData:K,errors:Y,fetchers:new Map(x.fetchers)})):(F(r({errors:Y,loaderData:ge(x.loaderData,K,E,Y)},Z?{fetchers:new Map(x.fetchers)}:{})),j=!1)}(o,a,s,d,l,f):(z.set(o,{routeId:a,path:s}),async function(t,n,o,a,i,u){let l=x.fetchers.get(t),s=r({state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},u,{data:l&&l.data," _hasFetcherDoneAnything ":!0});x.fetchers.set(t,s),F({fetchers:new Map(x.fetchers)});let f=new AbortController,d=me(e.history,o,f.signal);C.set(t,f);let p=await he("loader",d,a,i,m.basename);if(Ee(p)&&(p=await _e(p,d.signal,!0)||p),C.get(t)===f&&C.delete(t),d.signal.aborted)return;if(Oe(p))return void await W(x,p);if(je(p)){let e=be(x.matches,n);return x.fetchers.delete(t),void F({fetchers:new Map(x.fetchers),errors:{[e.route.id]:p.error}})}c(!Ee(p),"Unhandled fetcher deferred data");let h={state:"idle",data:p.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};x.fetchers.set(t,h),F({fetchers:new Map(x.fetchers)})}(o,a,s,d,l,f))},revalidate:function(){V(),F({revalidation:"loading"}),"submitting"!==x.navigation.state&&("idle"!==x.navigation.state?U(S||x.historyAction,x.navigation.location,{overrideNavigation:x.navigation}):U(x.historyAction,x.location,{startUninterruptedRevalidation:!0}))},createHref:t=>e.history.createHref(t),encodeLocation:t=>e.history.encodeLocation(t),getFetcher:$,deleteFetcher:Q,dispose:function(){a&&a(),i.clear(),b&&b.abort(),x.fetchers.forEach(((e,t)=>Q(t))),x.blockers.forEach(((e,t)=>Y(t)))},getBlocker:function(e,t){let n=x.blockers.get(e)||ae;return I.get(e)!==t&&I.set(e,t),n},deleteBlocker:Y,_internalFetchControllers:C,_internalActiveDeferreds:D,_internalSetRoutes:function(e){t=e}},m}function se(e,t,n){void 0===n&&(n=!1);let r,o="string"==typeof e?e:p(e);if(!t||!function(e){return null!=e&&"formData"in e}(t))return{path:o};if(t.formMethod&&(a=t.formMethod,!ee.has(a)))return{path:o,error:xe(405,{method:t.formMethod})};var a;if(t.formData&&(r={formMethod:t.formMethod||"get",formAction:ke(o),formEncType:t&&t.formEncType||"application/x-www-form-urlencoded",formData:t.formData},Pe(r.formMethod)))return{path:o,submission:r};let i=h(o),u=ve(t.formData);return n&&i.search&&Ae(i.search)&&u.append("index",""),i.search="?"+u,{path:p(i),submission:r}}function fe(e,t,n,o,a,i,u,l,c,s,f,d,p){let h=p?Object.values(p)[0]:d?Object.values(d)[0]:void 0,m=e.createURL(t.location),v=e.createURL(a),y=i||m.toString()===v.toString()||m.search!==v.search,b=p?Object.keys(p)[0]:void 0,w=function(e,t){let n=e;if(t){let r=e.findIndex((e=>e.route.id===t));r>=0&&(n=e.slice(0,r))}return n}(n,b).filter(((e,n)=>{if(null==e.route.loader)return!1;if(function(e,t,n){let r=!t||n.route.id!==t.route.id,o=void 0===e[n.route.id];return r||o}(t.loaderData,t.matches[n],e)||u.some((t=>t===e.route.id)))return!0;let a=t.matches[n],i=e;return pe(e,r({currentUrl:m,currentParams:a.params,nextUrl:v,nextParams:i.params},o,{actionResult:h,defaultShouldRevalidate:y||de(a,i)}))})),x=[];return c.forEach(((e,a)=>{if(!n.some((t=>t.route.id===e.routeId)))return;let i=g(s,e.path,f);if(!i)return void x.push(r({key:a},e,{matches:null,match:null}));let u=Le(i,e.path);(l.includes(a)||pe(u,r({currentUrl:m,currentParams:t.matches[t.matches.length-1].params,nextUrl:v,nextParams:n[n.length-1].params},o,{actionResult:h,defaultShouldRevalidate:y})))&&x.push(r({key:a,matches:i,match:u},e))})),[w,x]}function de(e,t){let n=e.route.path;return e.pathname!==t.pathname||null!=n&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function pe(e,t){if(e.route.shouldRevalidate){let n=e.route.shouldRevalidate(t);if("boolean"==typeof n)return n}return t.defaultShouldRevalidate}async function he(e,t,n,r,o,a,i,u){let l,s,f;void 0===o&&(o="/"),void 0===a&&(a=!1),void 0===i&&(i=!1);let d=new Promise(((e,t)=>f=t)),h=()=>f();t.signal.addEventListener("abort",h);try{let r=n.route[e];c(r,"Could not find the "+e+' to run on the "'+n.route.id+'" route'),s=await Promise.race([r({request:t,params:n.params,context:u}),d]),c(void 0!==s,"You defined "+("action"===e?"an action":"a loader")+' for route "'+n.route.id+"\" but didn't return anything from your `"+e+"` function. Please return a value or `null`.")}catch(e){l=v.error,s=e}finally{t.signal.removeEventListener("abort",h)}if(null!=(m=s)&&"number"==typeof m.status&&"string"==typeof m.statusText&&"object"==typeof m.headers&&void 0!==m.body){let e,u=s.status;if(te.has(u)){let e=s.headers.get("Location");if(c(e,"Redirects returned/thrown from loaders/actions must have a Location header"),ie.test(e)){if(!a){let n=new URL(t.url),r=e.startsWith("//")?new URL(n.protocol+e):new URL(e),a=null!=T(r.pathname,o);r.origin===n.origin&&a&&(e=r.pathname+r.search+r.hash)}}else{let a=M(e,I(r.slice(0,r.indexOf(n)+1)).map((e=>e.pathnameBase)),new URL(t.url).pathname);if(c(p(a),"Unable to resolve redirect location: "+e),o){let e=a.pathname;a.pathname="/"===e?o:F([o,e])}e=p(a)}if(a)throw s.headers.set("Location",e),s;return{type:v.redirect,status:u,location:e,revalidate:null!==s.headers.get("X-Remix-Revalidate")}}if(i)throw{type:l||v.data,response:s};let f=s.headers.get("Content-Type");return e=f&&/\bapplication\/json\b/.test(f)?await s.json():await s.text(),l===v.error?{type:l,error:new K(u,s.statusText,e),headers:s.headers}:{type:v.data,data:e,statusCode:s.status,headers:s.headers}}var m,y,g;return l===v.error?{type:l,error:s}:s instanceof V?{type:v.deferred,deferredData:s,statusCode:null==(y=s.init)?void 0:y.status,headers:(null==(g=s.init)?void 0:g.headers)&&new Headers(s.init.headers)}:{type:v.data,data:s}}function me(e,t,n,r){let o=e.createURL(ke(t)).toString(),a={signal:n};if(r&&Pe(r.formMethod)){let{formMethod:e,formEncType:t,formData:n}=r;a.method=e.toUpperCase(),a.body="application/x-www-form-urlencoded"===t?ve(n):n}return new Request(o,a)}function ve(e){let t=new URLSearchParams;for(let[n,r]of e.entries())t.append(n,r instanceof File?r.name:r);return t}function ye(e,t,n,o,a,i,u,l){let{loaderData:s,errors:f}=function(e,t,n,r,o){let a,i={},u=null,l=!1,s={};return n.forEach(((n,f)=>{let d=t[f].route.id;if(c(!Oe(n),"Cannot handle redirect results in processLoaderData"),je(n)){let t=be(e,d),o=n.error;r&&(o=Object.values(r)[0],r=void 0),u=u||{},null==u[t.route.id]&&(u[t.route.id]=o),i[d]=void 0,l||(l=!0,a=J(n.error)?n.error.status:500),n.headers&&(s[d]=n.headers)}else Ee(n)?(o.set(d,n.deferredData),i[d]=n.deferredData.data):i[d]=n.data,null==n.statusCode||200===n.statusCode||l||(a=n.statusCode),n.headers&&(s[d]=n.headers)})),r&&(u=r,i[Object.keys(r)[0]]=void 0),{loaderData:i,errors:u,statusCode:a||200,loaderHeaders:s}}(t,n,o,a,l);for(let t=0;t<i.length;t++){let{key:n,match:o}=i[t];c(void 0!==u&&void 0!==u[t],"Did not find corresponding fetcher result");let a=u[t];if(je(a)){let t=be(e.matches,null==o?void 0:o.route.id);f&&f[t.route.id]||(f=r({},f,{[t.route.id]:a.error})),e.fetchers.delete(n)}else if(Oe(a))c(!1,"Unhandled fetcher revalidation redirect");else if(Ee(a))c(!1,"Unhandled fetcher deferred data");else{let t={state:"idle",data:a.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};e.fetchers.set(n,t)}}return{loaderData:s,errors:f}}function ge(e,t,n,o){let a=r({},t);for(let r of n){let n=r.route.id;if(t.hasOwnProperty(n)?void 0!==t[n]&&(a[n]=t[n]):void 0!==e[n]&&r.route.loader&&(a[n]=e[n]),o&&o.hasOwnProperty(n))break}return a}function be(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function we(e){let t=e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function xe(e,t){let{pathname:n,routeId:r,method:o,type:a}=void 0===t?{}:t,i="Unknown Server Error",u="Unknown @remix-run/router error";return 400===e?(i="Bad Request",o&&n&&r?u="You made a "+o+' request to "'+n+'" but did not provide a `loader` for route "'+r+'", so there is no way to handle the request.':"defer-action"===a&&(u="defer() is not supported in actions")):403===e?(i="Forbidden",u='Route "'+r+'" does not match URL "'+n+'"'):404===e?(i="Not Found",u='No route matches URL "'+n+'"'):405===e&&(i="Method Not Allowed",o&&n&&r?u="You made a "+o.toUpperCase()+' request to "'+n+'" but did not provide an `action` for route "'+r+'", so there is no way to handle the request.':o&&(u='Invalid request method "'+o.toUpperCase()+'"')),new K(e||500,i,new Error(u),!0)}function Se(e){for(let t=e.length-1;t>=0;t--){let n=e[t];if(Oe(n))return n}}function ke(e){return p(r({},"string"==typeof e?h(e):e,{hash:""}))}function Ee(e){return e.type===v.deferred}function je(e){return e.type===v.error}function Oe(e){return(e&&e.type)===v.redirect}function Pe(e){return X.has(e)}async function Ce(e,t,n,r,o,a){for(let i=0;i<n.length;i++){let u=n[i],l=t[i];if(!l)continue;let c=e.find((e=>e.route.id===l.route.id)),s=null!=c&&!de(c,l)&&void 0!==(a&&a[l.route.id]);Ee(u)&&(o||s)&&await _e(u,r,o).then((e=>{e&&(n[i]=e||n[i])}))}}async function _e(e,t,n){if(void 0===n&&(n=!1),!await e.deferredData.resolveData(t)){if(n)try{return{type:v.data,data:e.deferredData.unwrappedData}}catch(e){return{type:v.error,error:e}}return{type:v.data,data:e.deferredData.data}}}function Ae(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function Re(e,t){let{route:n,pathname:r,params:o}=e;return{id:n.id,pathname:r,params:o,data:t[n.id],handle:n.handle}}function Le(e,t){let n="string"==typeof t?h(t).search:t.search;if(e[e.length-1].route.index&&Ae(n||""))return e[e.length-1];let r=I(e);return r[r.length-1]}Symbol("deferred")},6902:function(e,t,n){"use strict";var r;n.r(t),n.d(t,{GlobalStyles:function(){return i}});var o,a,i=(0,n(2788).createGlobalStyle)(r||(o=['\n\n  body,\n  html {\n    margin: 0;\n    height: 100%;\n  }\n\n  body {\n    position: relative;\n    min-height: 100%;\n    font-family: "Inter", "Arial", sans-serif;\n    font-size: 18px;\n    line-height: 27px;\n    font-weight: 400;\n    color: ',";\n    scrollbar-color: rgba(44, 171, 21, 0.5) rgba(44, 171, 21, 0.2);\n    scrollbar-width: thin;\n\n    &::-webkit-scrollbar {\n      width: 10px;\n      height: 5px;\n      border-radius: 10px;\n    }\n\n    &::-webkit-scrollbar-track-piece {\n      background-color: rgba(44, 171, 21, 0.2);\n      border-radius: 10px;\n      width: 10px;\n    }\n\n    &::-webkit-scrollbar-thumb:vertical {\n      height: 30px;\n      background-color: rgba(44, 171, 21, 0.5);\n      border-radius: 10px;\n    }\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  img,\n  video {\n    display: block;\n    max-width: 100%;\n  }\n\n  #root {\n  position: relative;\n\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n\n  header,\n  footer {\n    flex-shrink: 0;\n  }\n\n  main {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n  }\n}\n"],a||(a=o.slice(0)),r=Object.freeze(Object.defineProperties(o,{raw:{value:Object.freeze(a)}}))),(function(e){return e.theme.colorBlack}))},6605:function(e,t,n){"use strict";n.r(t),n.d(t,{AutButton:function(){return m},AutLink:function(){return h},AutLinkSingIn:function(){return v},AuthorizationContainer:function(){return d},Wrapper:function(){return p}});var r,o,a,i,u,l=n(2788),c=n(529),s=n(9655);function f(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var d=(0,l.default)(c.Z)(r||(r=f(["\n  padding-top: 10px;\n  padding-bottom: 10px;\n\n  display: flex;\n  justify-content: end;\n"]))),p=l.default.div(o||(o=f(["\n  display: flex;\n  gap: 10px;\n\n  @media(max-width: 63.94em) {\n    font-size: 14px;\n  }\n"]))),h=(0,l.default)(s.Link)(a||(a=f(["\n  background-color: #33cf49;\n  padding: 0px 6px;\n  border-radius: 5px;\n\n  color: #ffffff;\n  font-weight: 500;\n\n  &:hover {\n    opacity: 0.6;\n  }\n\n  @media(max-width: 47.94em) {\n      &:hover {\n      opacity: 1;\n    }\n  }\n"]))),m=l.default.button(i||(i=f(["\n  background-color: #ffffff;\n  padding: 0px 6px;\n  border: 1px solid #ef1616;\n  border-radius: 5px;\n\n  color: #ef1616;\n  font-size: 14px;\n\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    opacity: 0.6;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 12px;\n      &:hover {\n      opacity: 1;\n    }\n  }\n"]))),v=(0,l.default)(s.Link)(u||(u=f(["\n  padding: 0px 6px;\n  border: 1px solid #0b3dcb;\n  border-radius: 5px;\n\n  color: #0b3dcb;\n  font-size: 14px;\n\n  &:hover {\n    opacity: 0.6;\n  }\n\n  @media(max-width: 47.94em) {\n      &:hover {\n      opacity: 1;\n    }\n  }\n"])))},9650:function(e,t,n){"use strict";n.r(t),n.d(t,{ContainerFooter:function(){return c},FooterStyle:function(){return l}});var r,o,a=n(2788),i=n(529);function u(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var l=a.default.footer(r||(r=u(["\n  width: 100%;\n  background-color: #817abf;\n"]))),c=(0,a.default)(i.Z)(o||(o=u(["\n  padding-top: 10px;\n  padding-bottom: 10px;\n\n  color: ",";\n\n  display: grid;\n  justify-content: end;\n"])),(function(e){return e.theme.colorWhite}))},5834:function(e,t,n){"use strict";n.r(t),n.d(t,{HeaderContainer:function(){return p},HeaderStyle:function(){return d},LinkCart:function(){return m},LinkLogo:function(){return h}});var r,o,a,i,u=n(2788),l=n(529),c=n(9655),s=n(9363);function f(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var d=u.default.header(r||(r=f(["\n  width: 100%;\n  position: sticky;\n  top: -1px;\n  left: 0;\n  z-index: 1;\n  background-color: ",";\n  box-shadow: 0px 6px 18px 0px #d5d1ea;\n"])),(function(e){return e.theme.colorWhite})),p=(0,u.default)(l.Z)(o||(o=f(["\n  padding-top: 20px;\n  padding-bottom: 20px;\n\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  @media(max-width: 63.94em) {\n    padding-top: 15px;\n    padding-bottom: 15px;\n  }\n"]))),h=(0,u.default)(c.Link)(a||(a=f(["\n  ",";\n  font-size: 1.5em;\n  color: #817abf;\n\n  &:hover {\n    opacity: 0.5;\n  }\n\n  @media(max-width: 47.94em) {\n    &:hover {\n      opacity: 1;\n    }\n  }\n"])),s.uX),m=(0,u.default)(c.Link)(i||(i=f(["\n  padding: 10px;\n  border-radius: 5px;\n\n  &:hover {\n    background-color: #c1bde2;\n  }\n\n  @media(max-width: 47.94em) {\n    &:hover {\n      background-color: #ffffff;\n    }\n  }\n"])))},8362:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return I}}),n(7294);var r,o,a=n(8621),i=n(6113),u=n(1184),l=n(5415),c=n(2788),s=n(9363);function f(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var d=c.default.button(r||(r=f(["\n  ",";\n\n  background-color: #549716;\n  border: 2px solid #549716;\n  color: ",";\n"])),s.zg,(function(e){return e.theme.colorWhite})),p=c.default.button(o||(o=f(["\n  ",";\n\n  border: 2px solid #549716;\n  background-color: ",";\n  color: #549716;\n"])),s.zg,(function(e){return e.theme.colorWhite})),h=n(5893);function m(e){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m(e)}function v(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?v(Object(n),!0).forEach((function(t){g(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==m(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==m(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===m(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e){var t=e.beerId,n=e.classB,r=(0,i.useDispatch)();return(0,h.jsx)(d,{className:n,type:"button",onClick:function(){r((0,l.removeFromBasketOneBeer)(t)),r((0,u.removeProduct)(t));var e=JSON.parse(localStorage.getItem("basket"));delete e[t],localStorage.setItem("basket",JSON.stringify(e))},children:"Remove from cart"})}function w(e){var t=e.beerId,n=e.classB,r=(0,i.useDispatch)(),o=(0,i.useSelector)((function(e){return e.beers.oneBeer}));return(0,h.jsx)(p,{className:n,type:"button",onClick:function(){r((0,l.addToBasketOneBeer)(t)),function(e){if(localStorage.getItem("basket")){var t=JSON.parse(localStorage.getItem("basket"));t[e]=y(y({},o),{},{quantity:1,price:o.ibu,isCart:!0}),localStorage.setItem("basket",JSON.stringify(t))}else{var n={};n[e]=y(y({},o),{},{quantity:1,price:o.ibu,isCart:!0}),localStorage.setItem("basket",JSON.stringify(n))}}(t)},children:"Add to cart"})}var x,S,k,E,j,O,P,C=n(529);function _(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var A=c.default.section(x||(x=_(["\n  width: 100%;\n"]))),R=(0,c.default)(C.Z)(S||(S=_(["\n  padding-top: 20px;\n  padding-bottom: 20px;\n\n  display: grid;\n  justify-items: center;\n  gap: 20px;\n\n  @media(max-width: 63.94em) {\n    gap: 15px;\n  }\n\n  @media(max-width: 47.94em) {\n    gap: 10px;\n  }\n\n  .button {\n    width: 50%;\n\n    @media(max-width: 47.94em) {\n      width: 100%;\n    }\n  }\n"]))),L=c.default.img(k||(k=_(["\n  height: auto;\n"]))),T=c.default.h2(E||(E=_(["\n  ",";\n"])),s.Dx),N=c.default.p(j||(j=_(["\n  margin: 0;\n\n  font-size: 1.3em;\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n  }\n"]))),z=c.default.h3(O||(O=_(["\n  margin: 0;\n\n  ",";\n  font-size: 1.4em;\n  color: #4605ff;\n\n  @media(max-width: 63.94em) {\n    font-size: 1.1em;\n  }\n"])),s.f2),D=c.default.ul(P||(P=_(["\n  margin: 0;\n  padding: 0;\n\n  list-style: none;\n"]))),I=function(e){var t,n=e.beer,r=e.beerId,o=e.status,i=e.error;return"loading"===o?t=(0,h.jsx)(a.Z,{text:"Loading..."}):"succeeded"===o?t=(0,h.jsxs)(h.Fragment,{children:[(0,h.jsx)(L,{src:n.image_url,alt:n.name,width:75,height:200}),(0,h.jsx)(T,{children:n.name}),(0,h.jsxs)("span",{children:["Alc.: ",n.abv," %"]}),(0,h.jsxs)("span",{children:["Date of first brew: ",n.first_brewed]}),(0,h.jsx)(N,{children:n.description}),(0,h.jsx)(z,{children:"Ingredients:"}),(0,h.jsxs)(D,{children:[(0,h.jsxs)("li",{children:["Malt: ",n.ingredients.malt[0].name]}),(0,h.jsxs)("li",{children:["Hops: ",n.ingredients.hops[0].name]}),(0,h.jsxs)("li",{children:["Yeast: ",n.ingredients.yeast]})]}),n.isCart?(0,h.jsx)(b,{classB:"button",beerId:r}):(0,h.jsx)(w,{classB:"button",beerId:r})]}):"failed"===o&&(t=(0,h.jsx)("div",{children:i})),(0,h.jsx)(A,{children:(0,h.jsx)(R,{children:t})})}},2940:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return H}}),n(7294);var r,o,a=n(8621),i=n(6113),u=n(5415),l=n(1184),c=n(2788),s=n(9363);function f(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var d=c.default.button(r||(r=f(["\n  ",";\n\n  background-color: #549716;\n  border: 2px solid #549716;\n  color: ",";\n"])),s.zg,(function(e){return e.theme.colorWhite})),p=c.default.button(o||(o=f(["\n  ",";\n\n  border: 2px solid #549716;\n  background-color: ",";\n  color: #549716;\n"])),s.zg,(function(e){return e.theme.colorWhite})),h=n(5893);function m(e){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m(e)}function v(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?v(Object(n),!0).forEach((function(t){g(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==m(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==m(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===m(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e){var t=e.beerId,n=e.classB,r=(0,i.useDispatch)();return(0,h.jsx)(d,{className:n,type:"button",onClick:function(){r((0,u.removeFromBasket)(t)),r((0,l.removeProduct)(t));var e=JSON.parse(localStorage.getItem("basket"));delete e[t],localStorage.setItem("basket",JSON.stringify(e))},children:"Remove from cart"})}function w(e){var t=e.beerId,n=e.classB,r=(0,i.useDispatch)(),o=(0,i.useSelector)((function(e){return(0,u.selectBeerById)(e,t)}));return(0,h.jsx)(p,{className:n,type:"button",onClick:function(){r((0,u.addToBasket)(t)),function(e){if(localStorage.getItem("basket")){var t=JSON.parse(localStorage.getItem("basket"));t[e]=y(y({},o),{},{quantity:1,price:o.ibu,isCart:!0}),localStorage.setItem("basket",JSON.stringify(t))}else{var n={};n[e]=y(y({},o),{},{quantity:1,price:o.ibu,isCart:!0}),localStorage.setItem("basket",JSON.stringify(n))}}(t)},children:"Add to cart"})}var x,S,k,E,j,O=n(9655);function P(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var C,_,A,R,L=(0,c.default)(O.Link)(x||(x=P(["\n  display: grid;\n  justify-items: center;\n  gap: 20px;\n\n  &:hover img {\n    transform: scale(1.1);\n  }\n\n  &:hover h2 {\n    text-decoration: solid underline "," 2px;\n  }\n\n  @media(max-width: 63.94em) {\n    gap: 0;\n  }\n"])),(function(e){return e.theme.colorActiveLink})),T=c.default.img(S||(S=P(["\n  object-fit: contain;\n  transition: transform .35s ease-out;\n\n  margin: 10px;\n"]))),N=c.default.h2(k||(k=P(["\n  ",";\n"])),s.Dx),z=c.default.span(E||(E=P(["\n  font-size: 1.5em;\n  color: ",";\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 0.8em;\n  }\n"])),(function(e){return e.theme.colorBlack})),D=c.default.span(j||(j=P(["\n  ",";\n  font-size: 2em;\n  color: ",";\n  margin-bottom: 20px;\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n    margin-bottom: 10px;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 0.8em;\n    margin-bottom: 5px;\n  }\n"])),s.f2,(function(e){return e.theme.colorBlack})),I=function(e){var t,n=e.beerId,r=(0,i.useSelector)((function(e){return(0,u.selectBeerById)(e,n)}));return t=!0===r.isCart?(0,h.jsx)(b,{beerId:n}):(0,h.jsx)(w,{beerId:n}),(0,h.jsxs)(h.Fragment,{children:[(0,h.jsxs)(L,{to:"/beers/".concat(n),children:[(0,h.jsx)(T,{src:r.image_url,alt:r.name,width:90,height:200}),(0,h.jsx)(N,{children:r.name}),(0,h.jsxs)(z,{children:["Alc.: ",r.abv," %"]}),(0,h.jsxs)(D,{children:["Price: ",r.ibu,"$"]})]}),t]})},M=n(529);function F(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var B=c.default.section(C||(C=F(["\n  width: 100%;\n"]))),U=(0,c.default)(M.Z)(_||(_=F(["\n  padding-top: 10px;\n  padding-bottom: 20px;\n"]))),$=c.default.ul(A||(A=F(["\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  display: grid;\n  gap: 30px 20px;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n\n  @media(max-width: 80em) {\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n\n  @media(max-width: 47.94em) {\n    grid-template-columns: 1fr 1fr;\n  }\n"]))),W=c.default.li(R||(R=F(["\n  display: grid;\n  justify-items: center;\n"]))),H=function(e){var t;return"loading"===e.status?t=(0,h.jsx)(a.Z,{text:"Loading..."}):"succeeded"===e.status?t=e.beersIds.map((function(e){return(0,h.jsx)(W,{children:(0,h.jsx)(I,{beerId:e})},e)})):"failed"===e.status&&(t=(0,h.jsx)("div",{children:e.error})),(0,h.jsx)(B,{children:(0,h.jsx)(U,{children:(0,h.jsx)($,{children:t})})})}},4470:function(e,t,n){"use strict";n.r(t),n.d(t,{CommentsList:function(){return f},CommentsStyle:function(){return s},CommentsTitle:function(){return d}});var r,o,a,i=n(2788),u=n(529),l=n(9363);function c(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var s=(0,i.default)(u.Z)(r||(r=c(["\n  padding-top: 10px;\n  padding-bottom: 20px;\n"]))),f=i.default.ul(o||(o=c(["\n  margin: 0;\n  padding: 0;\n  list-style: none;\n"]))),d=i.default.h2(a||(a=c(["\n  ",";\n\n  margin-bottom: 20px;\n\n  @media(max-width: 63.94em) {\n    margin-bottom: 10px;\n  }\n\n  @media(max-width: 47.94em) {\n    margin-bottom: 5px;\n  }\n"])),l.Dx)},5268:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return g}}),n(7294);var r,o,a,i,u,l=n(2788),c=n(529),s=n(9655);function f(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var d=(0,l.css)(r||(r=f(["\n  padding: 5px 10px;\n  border: 1px #000000 solid;\n  border-radius: 5px;\n  text-align: center;\n\n  font-size: 1.5em;\n  line-height: 150%;\n\n  &:hover {\n    opacity: 0.6;\n  }\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 0.9em;\n    padding: 2px 7px;\n  }\n"]))),p=(0,l.default)(c.Z)(o||(o=f(["\n  padding-top: 40px;\n  padding-bottom: 50px;\n"]))),h=l.default.ul(a||(a=f(["\n  padding: 0;\n  margin: 0;\n  list-style: none;\n\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n"]))),m=(0,l.default)(s.Link)(i||(i=f(["\n  ",";\n\n  color: ",";\n  background-color: #93eb94;\n"])),d,(function(e){return e.theme.colorWhite})),v=(0,l.default)(s.Link)(u||(u=f(["\n  ",";\n\n  color: ",";\n"])),d,(function(e){return e.theme.colorBlack})),y=n(5893),g=function(e){var t=e.count,n=e.onhandler,r=e.currentPage,o=Array.from({length:t},(function(e,t){return t+1}));return(0,y.jsx)(p,{children:(0,y.jsx)(h,{children:o.map((function(e){return e===r?(0,y.jsx)("li",{children:(0,y.jsx)(m,{to:"/page_".concat(e),onClick:function(){n(e)},children:e})},e):(0,y.jsx)("li",{children:(0,y.jsx)(v,{to:"/page_".concat(e),onClick:function(){n(e)},children:e})},e)}))})})}},441:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return ne}});var r,o,a,i,u,l,c,s,f,d,p=n(7294),h=n(6113),m=n(5415),v=n(1184),y=n(2788),g=n(9363),b=n.p+"b72e8d61090c16d0a5ea.svg";function w(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var x=y.default.li(r||(r=w(["\n  display: grid;\n  justify-items: center;\n  grid-template-columns: auto 1fr auto;\n  grid-template-rows: auto auto auto;\n\n  box-shadow: 0 0 16px #a0e198;\n  padding: 10px;\n\n  position: relative;\n\n  @media(max-width: 47.94em) {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n"]))),S=y.default.img(o||(o=w(["\n  grid-area: 1/1/-1/2;\n  object-fit: contain;\n"]))),k=y.default.h2(a||(a=w(["\n  ",";\n\n  grid-area: 1/2/2/3;\n"])),g.Dx),E=y.default.span(i||(i=w(["\n  grid-area: 2/2/3/3;\n  font-size: 1.4em;\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 0.8em;\n  }\n"]))),j=y.default.span(u||(u=w(["\n  grid-area: 3/2/4/3;\n  font-size: 1.7em;\n\n  @media(max-width: 63.94em) {\n    font-size: 1.3em;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 1em;\n  }\n"]))),O=y.default.div(l||(l=w(["\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 40px;\n\n  grid-area: 3/3/4/-1;\n\n  @media(max-width: 47.94em) {\n    width: 100%;\n  }\n"]))),P=y.default.h3(c||(c=w(["\n  margin: 0;\n\n  ",";\n"])),g.f2),C=y.default.div(s||(s=w(["\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 15px;\n\n  @media(max-width: 47.94em) {\n    gap: 10px;\n  }\n"]))),_=y.default.button(f||(f=w(["\n  display: block;\n  width: 40px;\n  height: 40px;\n  padding: 0 5px;\n  border: 1px solid #2fb607;\n  border-radius: 5px;\n  background-color: ",";\n\n  color: #2fb607;\n  font-size: 1.5em;\n\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    color: #61ee37;\n  }\n"])),(function(e){return e.theme.colorWhite})),A=y.default.button(d||(d=w(["\n  display: block;\n  width: 30px;\n  height: 30px;\n\n  background-image: url(",");\n  background-repeat: no-repeat;\n  background-position: center;\n  background-color: ",";\n  border: 1px solid #e61212;\n\n\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    background-color: #f6c3c3;\n  }\n"])),b,(function(e){return e.theme.colorWhite})),R=n(5893);function L(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var T,N,z,D,I,M,F,B=function(e){var t,n,r=e.beerId,o=e.handler,a=(0,h.useDispatch)(),i=(0,h.useSelector)((function(e){return(0,v.selectBeerBasketById)(e,r)})),u=(t=(0,p.useState)(i.quantity),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,u=[],l=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=a.call(n)).done)&&(u.push(r.value),u.length!==t);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return u}}(t,n)||function(e,t){if(e){if("string"==typeof e)return L(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?L(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=u[0],c=u[1],s=function(e){var t=JSON.parse(localStorage.getItem("basket")),n=t[e];n.quantity=l,n.price=l*n.ibu,localStorage.setItem("basket",JSON.stringify(t))};return(0,R.jsxs)(x,{children:[(0,R.jsx)(S,{src:i.image_url,alt:i.name,width:75,height:200}),(0,R.jsx)(k,{children:i.name}),(0,R.jsxs)(E,{children:["Alc.: ",i.abv," %"]}),(0,R.jsxs)(O,{children:[(0,R.jsx)(P,{children:"Quantity"}),(0,R.jsxs)(C,{children:[(0,R.jsx)(_,{type:"button",onClick:function(){c(1===l?l:--l),a((0,v.decrementBeers)(r)),a((0,v.updatePrice)({id:r,price:l*i.ibu})),s(r)},children:"-"}),(0,R.jsx)("span",{children:i.quantity}),(0,R.jsx)(_,{type:"button",onClick:function(){c(++l),a((0,v.incrementBeers)(r)),a((0,v.updatePrice)({id:r,price:l*i.ibu})),s(r)},children:"+"})]})]}),(0,R.jsxs)(j,{children:["Price: ",i.price,"$"]}),(0,R.jsx)(A,{type:"button","aria-label":"Delete",onClick:function(){a((0,m.removeFromBasket)(i.id)),a((0,v.removeProduct)(i.id)),o();var e=JSON.parse(localStorage.getItem("basket"));delete e[r],localStorage.setItem("basket",JSON.stringify(e))}})]})},U=n(9655),$=n(529);function W(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var H=y.default.section(T||(T=W(["\n  width: 100%;\n"]))),V=(0,y.default)($.Z)(N||(N=W(["\n  padding-top: 40px;\n  padding-bottom: 50px;\n\n  display: grid;\n  gap: 45px;\n\n  @media(max-width: 63.94em) {\n    gap: 25px;\n\n    padding-top: 20px;\n    padding-bottom: 30px;\n  }\n\n  @media(max-width: 47.94em) {\n    gap: 15px;\n  }\n"]))),q=y.default.span(z||(z=W(["\n  font-size: 1.5em;\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n\n  }\n"]))),Q=y.default.ul(D||(D=W(["\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  display: grid;\n  gap: 30px;\n\n  @media(max-width: 89.94em) {\n    gap: 25px;\n  }\n\n  @media(max-width: 63.94em) {\n    gap: 20px;\n  }\n\n  @media(max-width: 47.94em) {\n    gap: 15px;\n  }\n"]))),G=y.default.div(I||(I=W(["\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n\n  @media(max-width: 47.94em) {\n    grid-template-columns: 1fr;\n    gap: 15px;\n  }\n"]))),K=y.default.button(M||(M=W(["\n  ",";\n\n  background-color: #5493ec;\n  color: ",";\n"])),g.zg,(function(e){return e.theme.colorWhite})),J=(0,y.default)(U.Link)(F||(F=W(["\n  background-color: #4fc51e;\n  color: ",";\n  padding: 16px;\n  text-align: center;\n  border-radius: 5px;\n\n  font-size: 1.5em;\n  line-height: 150%;\n\n  &:hover {\n    opacity: 0.6;\n  }\n\n  @media(max-width: 63.94em) {\n    font-size: 1em;\n    padding: 10px;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 0.9em;\n    padding: 5px 10px;\n  }\n"])),(function(e){return e.theme.colorWhite}));function Y(e){return Y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Y(e)}function X(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Z(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?X(Object(n),!0).forEach((function(t){ee(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):X(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ee(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Y(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Y(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Y(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function te(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ne=function(){var e,t,n=(0,h.useDispatch)(),r=(0,h.useSelector)(v.selectBeerBasketIds),o=(e=(0,p.useState)(""),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,u=[],l=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=a.call(n)).done)&&(u.push(r.value),u.length!==t);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return u}}(e,t)||function(e,t){if(e){if("string"==typeof e)return te(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?te(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[0],i=o[1];return(0,p.useEffect)((function(){var e=[];localStorage.getItem("basket")&&(e=Object.values(JSON.parse(localStorage.getItem("basket"))).map((function(e){return Z(Z({},e),{},{price:e.ibu*e.quantity})})),n((0,v.addProducts)(e)),console.log("Effect Basket")),i(r.length)}),[r]),(0,R.jsx)(H,{children:(0,R.jsxs)(V,{children:[(0,R.jsxs)(q,{children:["Total ",a]}),r.length?(0,R.jsxs)(R.Fragment,{children:[(0,R.jsx)(Q,{children:r.map((function(e,t){return(0,R.jsx)(B,{beerId:e,handler:function(){return i(a-1)}},t)}))}),(0,R.jsxs)(G,{children:[(0,R.jsx)(K,{type:"button",onClick:function(){localStorage.removeItem("basket"),n((0,m.deletingAllFromTheBasket)(r)),n((0,v.clearBasket)()),i(r.length)},children:"Clear basket"}),(0,R.jsx)(J,{to:"/form",children:"Checkout"})]})]}):(0,R.jsx)("p",{children:"Сart is empty!"})]})})}},9907:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return be}});var r,o,a,i,u,l=n(7294),c=n(9250),s=n(6113),f=n(5415),d=n(1184),p=n(2788);function h(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var m,v,y,g,b,w,x=(0,p.css)(r||(r=h(["\n  display: grid;\n  grid-template-columns: 40% 30% 30%;\n  justify-items: center;\n"]))),S=p.default.div(o||(o=h(["\n  ",";\n\n  h4 {\n    margin: 0;\n\n    @media(max-width: 47.94em) {\n      line-height: 130%;\n      margin: 0;\n      font-size: 0.9em;\n    }\n  }\n"])),x),k=p.default.ul(a||(a=h(["\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  display: grid;\n  border: 1px dashed #85c6e6;\n\n  @media(max-width: 47.94em) {\n    gap: 5px;\n  }\n"]))),E=p.default.li(i||(i=h(["\n  ",";\n  align-items: center;\n  border-bottom: 1px dashed #85c6e6;\n\n  h3 {\n    justify-self: flex-start;\n\n    @media(max-width: 47.94em) {\n      padding-bottom: 5px;\n      line-height: 130%;\n      margin: 0;\n      font-size: 0.8em;\n    }\n  }\n"])),x),j=p.default.div(u||(u=h(["\n  display: flex;\n  justify-content: space-between;\n  padding: 20px;\n\n  background-color: #817abf;\n  color: #ffffff;\n\n  @media(max-width: 47.94em) {\n    padding: 10px;\n  }\n"]))),O=n(5893),P=function(e){var t=0;return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)("h3",{children:"Your order"}),(0,O.jsxs)(S,{children:[(0,O.jsx)("h4",{children:"Beer"}),(0,O.jsx)("h4",{children:"Quantity"}),(0,O.jsx)("h4",{children:"Price"})]}),(0,O.jsx)(k,{children:e.beers.map((function(e,n){return t+=e.price,(0,O.jsxs)(E,{children:[(0,O.jsx)("h3",{children:e.name}),(0,O.jsx)("span",{children:e.quantity}),(0,O.jsxs)("span",{children:[e.price," $"]})]},n)}))}),(0,O.jsxs)(j,{children:[(0,O.jsx)("span",{children:"Total:"}),(0,O.jsxs)("span",{children:[t,"$"]})]})]})},C=n(529),_=p.default.div(m||(v=["\n  width: 100%;\n  margin: 0 auto;\n  margin-top: ",";\n\n  @media(max-width: 89.94em) {\n    margin-top: ",";\n  }\n\n  @media(max-width: 63.94em) {\n    margin-top: ",";\n  }\n\n  @media(max-width: 47.94em) {\n    margin-top: ",";\n  }\n"],y||(y=v.slice(0)),m=Object.freeze(Object.defineProperties(v,{raw:{value:Object.freeze(y)}}))),(function(e){return e.theme.indent}),(function(e){return e.theme.indentDesktop}),(function(e){return e.theme.indentTablet}),(function(e){return e.theme.indentMobile})),A=p.default.button(g||(g=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  padding: 6px;\n  border: 1px solid #0b3dcb;\n  border-radius: 5px;\n  background-color: #ffffff;\n\n  color: #0b3dcb;\n  font-size: 18px;\n\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    opacity: 0.6;\n  }\n\n  @media(max-width: 47.94em) {\n      &:hover {\n      opacity: 1;\n    }\n  }\n"]))),R=function(e){return(0,O.jsx)(A,{type:e.type,onClick:e.onClick,children:e.children})};function L(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var T,N,z,D=p.default.div(b||(b=L(["\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 9999;\n\n  width: 100%;\n  height: 100%;\n  min-height: 100%;\n\n  overflow-x: auto;\n  background-color: rgba(0,0,0,0.7);\n  padding: 10px;\n  box-sizing: border-box;\n\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n"]))),I=p.default.div(w||(w=L(["\n  width: 80%;\n\n  display: flex;\n  justify-content: center;\n\n  padding: 40px;\n  position: relative;\n  background-color: #ffffff;\n  margin: 0 auto;\n  border-radius: 10px;\n  overflow: hidden;\n  box-shadow: 2px 5px 10px rgb(0 0 0 / 5%);\n"]))),M=function(e){return(0,O.jsx)(D,{children:(0,O.jsx)(I,{children:e.children})})};function F(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var B=(0,p.css)(T||(T=F(["\n  .valid {\n    border: 2px solid green;\n  }\n\n  .inValid {\n    border: 2px solid red;\n  }\n"]))),U=p.default.div(N||(N=F(["\n  ",";\n"])),B),$=p.default.input(z||(z=F(["\n  width: 50%;\n  padding: 10px;\n\n  border: none;\n  border-bottom: 2px solid #1a77d2;\n\n  @media(max-width: 47.94em) {\n    width: 100%;\n    padding: 5px;\n  }\n"])));function W(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,u=[],l=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=a.call(n)).done)&&(u.push(r.value),u.length!==t);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return u}}(e,t)||function(e,t){if(e){if("string"==typeof e)return H(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?H(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function H(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var V,q,Q,G,K,J,Y,X=function(){var e=W((0,l.useState)(""),2),t=e[0],n=e[1],r=W((0,l.useState)(""),2),o=r[0],a=r[1];return(0,O.jsxs)(U,{children:[(0,O.jsx)("label",{htmlFor:"name","aria-label":"Enter your name"}),(0,O.jsx)($,{className:o,type:"text",id:"name",name:"name",placeholder:"Name",value:t,onChange:function(e){return n(e.target.value)},onBlur:function(){t.length<2?a("inValid"):a("valid")},required:!0})]})},Z=function(){var e=W((0,l.useState)(""),2),t=e[0],n=e[1],r=W((0,l.useState)(""),2),o=r[0],a=r[1];return(0,O.jsxs)(U,{children:[(0,O.jsx)("label",{htmlFor:"e-mail","aria-label":"Enter your e-mail"}),(0,O.jsx)($,{className:o,type:"text",id:"e-mail",name:"e-mail",placeholder:"E-mail",value:t,onChange:function(e){return n(e.target.value)},onBlur:function(){t.length<2?a("inValid"):a("valid")},required:!0})]})},ee=function(){var e=W((0,l.useState)(""),2),t=e[0],n=e[1],r=W((0,l.useState)(""),2),o=r[0],a=r[1];return(0,O.jsxs)(U,{children:[(0,O.jsx)("label",{htmlFor:"tel","aria-label":"Enter your phone"}),(0,O.jsx)($,{className:o,type:"tel",id:"tel",name:"tel",placeholder:"+7(999)999-99-99",value:t,onChange:function(e){return n(e.target.value)},onBlur:function(){t.length<16?a("inValid"):a("valid")},required:!0})]})},te=function(){var e=W((0,l.useState)(""),2),t=e[0],n=e[1],r=W((0,l.useState)(""),2),o=r[0],a=r[1];return(0,O.jsxs)(U,{children:[(0,O.jsx)("label",{htmlFor:"country","aria-label":"Enter the name of your country"}),(0,O.jsx)($,{className:o,type:"text",id:"country",name:"country",placeholder:"Country",value:t,onChange:function(e){return n(e.target.value)},onBlur:function(){t.length<3?a("inValid"):a("valid")},required:!0})]})},ne=function(){var e=W((0,l.useState)(""),2),t=e[0],n=e[1],r=W((0,l.useState)(""),2),o=r[0],a=r[1];return(0,O.jsxs)(U,{children:[(0,O.jsx)("label",{htmlFor:"city","aria-label":"Enter the name of your city"}),(0,O.jsx)($,{className:o,type:"text",id:"city",name:"city",placeholder:"City",value:t,onChange:function(e){return n(e.target.value)},onBlur:function(){t.length<3?a("inValid"):a("valid")},required:!0})]})},re=function(){var e=W((0,l.useState)(""),2),t=e[0],n=e[1],r=W((0,l.useState)(""),2),o=r[0],a=r[1];return(0,O.jsxs)(U,{children:[(0,O.jsx)("label",{htmlFor:"street","aria-label":"Enter your street name"}),(0,O.jsx)($,{className:o,type:"text",id:"street",name:"street",placeholder:"Street",value:t,onChange:function(e){return n(e.target.value)},onBlur:function(){t.length<2?a("inValid"):a("valid")},required:!0})]})},oe=function(){var e=W((0,l.useState)(""),2),t=e[0],n=e[1],r=W((0,l.useState)(""),2),o=r[0],a=r[1];return(0,O.jsxs)(U,{children:[(0,O.jsx)("label",{htmlFor:"house","aria-label":"Enter your house number"}),(0,O.jsx)($,{className:o,type:"text",id:"house",name:"house",placeholder:"House",value:t,onChange:function(e){return n(e.target.value)},onBlur:function(){t.length<2?a("inValid"):a("valid")},required:!0})]})},ae=function(){var e=W((0,l.useState)(""),2),t=e[0],n=e[1],r=W((0,l.useState)(""),2),o=r[0],a=r[1];return(0,O.jsxs)(U,{children:[(0,O.jsx)("label",{htmlFor:"apartment","aria-label":"Enter your apartment number"}),(0,O.jsx)($,{className:o,type:"text",id:"apartment",name:"apartment",placeholder:"Apartment",value:t,onChange:function(e){return n(e.target.value)},onBlur:function(){t.length<2?a("inValid"):a("valid")}})]})};function ie(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var ue=p.default.form(V||(V=ie(["\n  width: 100%;\n"]))),le=(0,p.default)(C.Z)(q||(q=ie(["\n  padding-top: 40px;\n  padding-bottom: 50px;\n\n  column-count: 2;\n\n  @media(max-width: 63.94em) {\n    column-count: 1;\n  }\n\n  @media(max-width: 47.94em) {\n    padding-top: 20px;\n    padding-bottom: 20px;\n  }\n"]))),ce=p.default.fieldset(Q||(Q=ie(["\n  border: none;\n  margin: 0 0 20px 0;\n  padding: 0;\n\n  display: grid;\n  gap: 5px;\n\n  @media(max-width: 47.94em) {\n    margin: 0 0 15px 0;\n  }\n"]))),se=p.default.legend(G||(G=ie(["\n  margin-bottom: 30px;\n\n  @media(max-width: 47.94em) {\n    margin-bottom: 20px;\n  }\n"]))),fe=p.default.textarea(K||(K=ie(["\n  border: 0;\n  border-bottom: 2px solid #1a77d2;\n  resize: none;\n\n  @media(max-width: 47.94em) {\n    height: 100px;\n  }\n"]))),de=p.default.div(J||(J=ie(['\n  position: relative;\n  margin-bottom: 20px;\n\n  @media(max-width: 47.94em) {\n    font-size: 0.8em;\n  }\n\n  input[type="checkbox"] {\n    position: absolute;\n\n    width: 1px;\n    height: 1px;\n    margin: -1px;\n    padding: 0;\n    overflow: hidden;\n\n    white-space: nowrap;\n\n    border: 0;\n\n    clip: rect(0 0 0 0);\n    clip-path: inset(100%);\n  }\n\n  label {\n    padding-left: 36px;\n\n    position: relative;\n\n    cursor: pointer;\n\n    &::before {\n      content: "";\n      width: 22px;\n      height: 22px;\n\n      position: absolute;\n      left: 0;\n      top: 0;\n      border: 1px solid #000000;\n    }\n  }\n\n  input:checked + label::after {\n    content: "";\n    width: 10px;\n    height: 10px;\n\n    position: absolute;\n    left: 6px;\n    top: 6px;\n    background-color: #2e43a5;\n  }\n']))),pe=p.default.button(Y||(Y=ie(["\n  display: block;\n  width: 100%;\n  border: none;\n  background-color: #817abf;\n  color: #ffffff;\n  padding: 10px;\n  border-radius: 5px;\n\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    opacity: 0.7;\n  }\n"])));function he(e){return he="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},he(e)}function me(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ve(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?me(Object(n),!0).forEach((function(t){ye(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):me(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ye(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==he(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==he(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===he(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ge(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var be=function(){var e,t,n=(e=(0,l.useState)(!1),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,u=[],l=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=a.call(n)).done)&&(u.push(r.value),u.length!==t);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return u}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ge(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ge(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=n[0],o=n[1],a=(0,s.useDispatch)(),i=(0,c.TH)(),u=(0,c.s0)(),p=(0,s.useSelector)(d.selectBeerBasketIds),h=(0,s.useSelector)(d.selectAllBeersBasket),m=(0,s.useSelector)((function(e){return e.session.authorization}));(0,l.useEffect)((function(){var e=[];e.length===h.length&&localStorage.getItem("basket")&&(e=Object.values(JSON.parse(localStorage.getItem("basket"))).map((function(e){return ve(ve({},e),{},{price:e.ibu*e.quantity})})),a((0,d.addProducts)(e)),console.log("Effect Form"))}));var v={saveLocal:(0,l.useCallback)((function(){u("/login",{state:{back:i.pathname}})}),[]),onSubmit:(0,l.useCallback)((function(e){e.preventDefault(),localStorage.removeItem("basket"),a((0,f.deletingAllFromTheBasket)(p)),a((0,d.clearBasket)()),o(!0),setTimeout((function(){console.log("Timeout"),u("/")}),2e3)}),[])};return(0,O.jsx)(O.Fragment,{children:m?(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(ue,{action:"https://echo.htmlacademy.ru",method:"post",onSubmit:v.onSubmit,children:(0,O.jsxs)(le,{children:[(0,O.jsxs)(ce,{children:[(0,O.jsx)(se,{children:"Buyer data"}),(0,O.jsx)(X,{}),(0,O.jsx)(Z,{}),(0,O.jsx)(ee,{})]}),(0,O.jsxs)(ce,{children:[(0,O.jsx)(se,{children:"Address of the recipient"}),(0,O.jsx)(te,{}),(0,O.jsx)(ne,{}),(0,O.jsx)(re,{}),(0,O.jsx)(oe,{}),(0,O.jsx)(ae,{})]}),(0,O.jsxs)(ce,{children:[(0,O.jsx)(se,{children:"Comments"}),(0,O.jsx)(fe,{name:"messang",cols:"10",rows:"10"})]}),(0,O.jsx)(ce,{children:(0,O.jsx)(P,{beers:h})}),(0,O.jsxs)(ce,{children:[(0,O.jsx)(se,{children:"Payment methods"}),(0,O.jsxs)(de,{children:[(0,O.jsx)("input",{type:"checkbox",id:"cash",name:"cash",required:!0,defaultChecked:!0}),(0,O.jsx)("label",{htmlFor:"cash",children:"Cash payment"})]}),(0,O.jsxs)(de,{children:[(0,O.jsx)("input",{type:"checkbox",name:"consentToDataProcessing",id:"consent",required:!0,defaultChecked:!0}),(0,O.jsx)("label",{htmlFor:"consent",children:"I agree to the processing of my personal data"})]})]}),(0,O.jsx)(pe,{type:"submit","aria-label":"Submit an order to the store",children:"Place an order"})]})}),!0===r&&(0,O.jsx)(M,{children:"Order completed"})]}):(0,O.jsxs)(C.Z,{children:[(0,O.jsx)(P,{beers:h}),(0,O.jsxs)(_,{children:[(0,O.jsx)(R,{type:"button",onClick:v.saveLocal,children:"Sign in"})," to place an order"]})]})})}},6205:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return I}});var r,o,a,i=n(7294),u=n(6113),l=n(9250),c=n(5818),s=n(7954),f=n.n(s),d=n(2788);function p(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var h=d.default.div(r||(r=p(["\n  width: 20%;\n\n  position: relative;\n\n  @media(max-width: 63.94em) {\n    width: 70%;\n  }\n\n  @media(max-width: 47.94em) {\n    width: 100%;\n  }\n\n  label {\n    position: absolute;\n    z-index: 1;\n\n    ","\n  }\n\n  input {\n    width: 100%;\n    padding: 12px 8px 8px;\n\n    font-size: 1em;\n\n    background-color: #ffffff;\n  }\n\n  input:focus + label {\n    top: 2px;\n    font-size: 0.5em;\n    line-height: 120%;\n  }\n"])),(function(e){return""!==e.children[0].props.value?(0,d.css)(o||(o=p(["\n          top: 2px;\n          left: 10px;\n          font-size: 0.5em;\n          line-height: 120%;\n        "]))):(0,d.css)(a||(a=p(["\n          top: 10px;\n          left: 10px;\n        "])))})),m=n(5893);function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var y,g,b,w=function(e){var t,n,r=(t=(0,i.useState)(e.value),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,u=[],l=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=a.call(n)).done)&&(u.push(r.value),u.length!==t);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return u}}(t,n)||function(e,t){if(e){if("string"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?v(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],a=r[1],u=(0,i.useCallback)(f()((function(t){return e.onChange(t)}),600),[e.onChange]);return(0,i.useLayoutEffect)((function(){return a(e.value)}),[e.value]),(0,m.jsxs)(h,{children:[(0,m.jsx)("input",{type:e.type,value:o,onChange:function(e){a(e.target.value),u(e.target.value)},id:e.text}),(0,m.jsx)("label",{htmlFor:e.text,children:e.text})]})},x=n(529);function S(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var k,E,j,O=d.default.form(y||(y=S(["\n  width: 100%;\n"]))),P=(0,d.default)(x.Z)(g||(g=S(["\n  padding-top: 20px;\n  padding-bottom: 20px;\n\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n\n  @media(max-width: 63.94em) {\n    gap: 15px;\n  }\n\n  @media(max-width: 47.94em) {\n    gap: 10px;\n  }\n"]))),C=d.default.button(b||(b=S(["\n  display: block;\n  width: 20%;\n  border: none;\n  background-color: #817abf;\n  color: #ffffff;\n  padding: 10px;\n  border-radius: 5px;\n\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    opacity: 0.7;\n  }\n\n  @media(max-width: 63.94em) {\n    width: 70%;\n  }\n\n  @media(max-width: 47.94em) {\n    width: 100%;\n\n    &:hover {\n      opacity: 1;\n    }\n  }\n"]))),_=function(e){return(0,m.jsx)(O,{action:e.action,method:e.method,onSubmit:e.onSubmit,children:(0,m.jsxs)(P,{children:[e.children,(0,m.jsx)(C,{type:"submit",children:e.textButton})]})})},A=(0,d.default)(x.Z)(k||(E=["\n  padding-top: 40px;\n  color: #cdc5c5;\n"],j||(j=E.slice(0)),k=Object.freeze(Object.defineProperties(E,{raw:{value:Object.freeze(j)}})))),R=function(){return(0,m.jsxs)(A,{children:["For the test",(0,m.jsx)("div",{children:"Login: test_1"}),(0,m.jsx)("div",{children:"Password: 123456"})]})};function L(e){return L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},L(e)}function T(){T=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag";function l(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var a=t&&t.prototype instanceof d?t:d,i=Object.create(a.prototype),u=new j(o||[]);return r(i,"_invoke",{value:x(e,n,u)}),i}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function d(){}function p(){}function h(){}var m={};l(m,a,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(O([])));y&&y!==t&&n.call(y,a)&&(m=y);var g=h.prototype=d.prototype=Object.create(m);function b(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function w(e,t){function o(r,a,i,u){var l=s(e[r],e,a);if("throw"!==l.type){var c=l.arg,f=c.value;return f&&"object"==L(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,i,u)}),(function(e){o("throw",e,i,u)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return o("throw",e,i,u)}))}u(l.arg)}var a;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return a=a?a.then(r,r):r()}})}function x(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return{value:void 0,done:!0}}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var u=S(i,n);if(u){if(u===f)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var l=s(e,t,n);if("normal"===l.type){if(r=n.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r="completed",n.method="throw",n.arg=l.arg)}}}function S(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,S(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=s(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function E(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function j(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function O(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:P}}function P(){return{value:void 0,done:!0}}return p.prototype=h,r(g,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=l(h,u,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,l(e,u,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},b(w.prototype),l(w.prototype,i,(function(){return this})),e.AsyncIterator=w,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new w(c(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},b(g),l(g,u,"Generator"),l(g,a,(function(){return this})),l(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=O,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var u=n.call(a,"catchLoc"),l=n.call(a,"finallyLoc");if(u&&l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),E(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;E(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:O(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function N(e,t,n,r,o,a,i){try{var u=e[a](i),l=u.value}catch(e){return void n(e)}u.done?t(l):Promise.resolve(l).then(r,o)}function z(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,u=[],l=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=a.call(n)).done)&&(u.push(r.value),u.length!==t);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return u}}(e,t)||function(e,t){if(e){if("string"==typeof e)return D(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?D(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function D(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var I=function(){var e=(0,l.s0)(),t=(0,l.TH)(),n=(0,u.useDispatch)(),r=z((0,i.useState)(""),2),o=r[0],a=r[1],s=z((0,i.useState)(""),2),f=s[0],d=s[1],p={login:o,password:f,remember:!0},h={onSubmit:(0,i.useCallback)(function(){var r,o=(r=T().mark((function r(o){var a,i,u,l;return T().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return o.preventDefault(),r.next=3,n((0,c.fetchAuthorization)(p)).unwrap();case 3:r.sent.error||(l=null!==(a=t.state)&&void 0!==a&&a.back&&(null===(i=t.state)||void 0===i?void 0:i.back)!==t.pathname?null===(u=t.state)||void 0===u?void 0:u.back:"/",e(l));case 5:case"end":return r.stop()}}),r)})),function(){var e=this,t=arguments;return new Promise((function(n,o){var a=r.apply(e,t);function i(e){N(a,n,o,i,u,"next",e)}function u(e){N(a,n,o,i,u,"throw",e)}i(void 0)}))});return function(e){return o.apply(this,arguments)}}(),[p,t.state]),onChangeLogin:(0,i.useCallback)((function(e){a(e)}),[]),onChangePassword:(0,i.useCallback)((function(e){d(e)}),[])},v=(0,u.useSelector)((function(e){return{authorization:e.session.authorization,error:e.session.error}}));return(0,m.jsxs)(m.Fragment,{children:[(0,m.jsxs)(_,{action:"/api/v1/users/sign",method:"POST",onSubmit:h.onSubmit,textButton:"Sign In",children:[(0,m.jsx)(w,{type:"text",value:o,text:"Login",onChange:h.onChangeLogin}),(0,m.jsx)(w,{type:"password",value:f,text:"Password",onChange:h.onChangePassword}),v.error||(0,m.jsx)("div",{children:v.error})]}),(0,m.jsx)(R,{})]})}},201:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return S}});var r,o,a,i,u=n(7294),l=n(6113),c=n(841),s=n(8621),f=n(2788),d=n(529),p=n(9363);function h(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var m=f.default.section(r||(r=h(["\n  width: 100%;\n"]))),v=(0,f.default)(d.Z)(o||(o=h(["\n  padding-top: 20px;\n  padding-bottom: 20px;\n\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 10px;\n"]))),y=f.default.h2(a||(a=h(["\n  ",";\n\n  margin-bottom: 20px;\n\n  @media(max-width: 63.94em) {\n    margin-bottom: 10px;\n  }\n\n  @media(max-width: 47.94em) {\n    margin-bottom: 5px;\n  }\n"])),p.Dx),g=f.default.span(i||(i=h(["\n  ",";\n  font-size: 1.5em;\n  line-height: 115%;\n\n  @media(max-width: 63.94em) {\n    font-size: 1.3em;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 0.8em;\n  }\n"])),p.DE),b=n(5893),w=function(e){return(0,b.jsx)(m,{children:(0,b.jsxs)(v,{children:[(0,b.jsx)(y,{children:"Profile"}),(0,b.jsxs)("div",{children:[(0,b.jsx)(g,{children:"Name: "}),e.name]}),(0,b.jsxs)("div",{children:[(0,b.jsx)(g,{children:"E-mail: "}),e.email]}),(0,b.jsxs)("div",{children:[(0,b.jsx)(g,{children:"Telephone: "}),e.telephone]})]})})},x=n(9250),S=function(){var e,t=(0,l.useDispatch)(),n=(0,l.useSelector)((function(e){return{token:e.session.token,authorization:e.session.authorization,status:e.user.status,error:e.user.error,name:e.user.name,email:e.user.email,telephone:e.user.telephone}}));return(0,u.useEffect)((function(){n.token&&t((0,c.fetchUser)(n.token)),console.log("eff profile")}),[n.token]),"loading"===n.status?e=(0,b.jsx)(s.Z,{text:"Loading..."}):"succeeded"===n.status?e=n.authorization?(0,b.jsx)(w,{name:n.name,email:n.email,telephone:n.telephone}):(0,b.jsx)(x.Fg,{to:"/login"}):"failed"===n.status&&(e=(0,b.jsx)("div",{children:n.error})),(0,b.jsx)(b.Fragment,{children:e})}},1480:function(e,t,n){"use strict";n.r(t),n.d(t,{theme:function(){return r}});var r={colorBlack:"#333333",colorWhite:"#ffffff",colorActiveLink:"#ff0101",ffInter:'"Inter", "Arial", sans-serif',ffPermanentMarker:'"Permanent-Marker", "Arial", sans-serif',indent:"100px",indentDesktop:"50px",indentMobile:"20px",indentTablet:"30px"}},529:function(e,t,n){"use strict";var r,o,a,i=n(2788).default.div(r||(o=["\n  width: 100%;\n  max-width: 1440px;\n  margin: 0 auto;\n  padding: ",";\n\n  @media(max-width: 89.94em) {\n    padding: ",";\n  }\n\n  @media(max-width: 63.94em) {\n    padding: ",";\n  }\n\n  @media(max-width: 47.94em) {\n    padding: ",";\n  }\n"],a||(a=o.slice(0)),r=Object.freeze(Object.defineProperties(o,{raw:{value:Object.freeze(a)}}))),(function(e){return e.theme.indent}),(function(e){return e.theme.indentDesktop}),(function(e){return e.theme.indentTablet}),(function(e){return e.theme.indentMobile}));t.Z=i},5069:function(e,t,n){"use strict";n.r(t);var r=n(7294),o=n(9250);t.default=function(){var e=(0,o.TH)().pathname;return(0,r.useEffect)((function(){window.scrollTo(0,0)}),[e]),null}},8621:function(e,t,n){"use strict";n(7294);var r=n(5893);t.Z=function(e){var t=e.text,n=void 0===t?"":t,o=e.size,a=void 0===o?"5em":o,i=n?(0,r.jsx)("h4",{children:n}):null;return(0,r.jsxs)("div",{children:[i,(0,r.jsx)("div",{style:{height:a,width:a}})]})}},1184:function(e,t,n){"use strict";n.r(t),n.d(t,{addProducts:function(){return l},clearBasket:function(){return p},decrementBeers:function(){return c},incrementBeers:function(){return s},removeProduct:function(){return d},selectAllBeersBasket:function(){return m},selectBeerBasketById:function(){return v},selectBeerBasketIds:function(){return y},updatePrice:function(){return f}});var r=n(3629),o=(0,r.createEntityAdapter)(),a=o.getInitialState(),i=(0,r.createSlice)({name:"basket",initialState:a,reducers:{addProducts:function(e,t){o.upsertMany(e,t.payload)},removeProduct:function(e,t){o.removeOne(e,t.payload)},decrementBeers:function(e,t){1===e.entities[t.payload].quantity?e.entities[t.payload].quantity=1:e.entities[t.payload].quantity--},incrementBeers:function(e,t){e.entities[t.payload].quantity++},updatePrice:function(e,t){e.entities[t.payload.id].price=t.payload.price},clearBasket:function(e){o.removeAll(e)}}});t.default=i.reducer;var u=i.actions,l=u.addProducts,c=u.decrementBeers,s=u.incrementBeers,f=u.updatePrice,d=u.removeProduct,p=u.clearBasket,h=o.getSelectors((function(e){return e.basket})),m=h.selectAll,v=h.selectById,y=h.selectIds},5818:function(e,t,n){"use strict";n.r(t),n.d(t,{fetchAuthorization:function(){return l},fetchCheck:function(){return c},fetchSignOut:function(){return s}});var r=n(3629);function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function a(){a=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},i="function"==typeof Symbol?Symbol:{},u=i.iterator||"@@iterator",l=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function f(e,t,n,o){var a=t&&t.prototype instanceof h?t:h,i=Object.create(a.prototype),u=new P(o||[]);return r(i,"_invoke",{value:k(e,n,u)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=f;var p={};function h(){}function m(){}function v(){}var y={};s(y,u,(function(){return this}));var g=Object.getPrototypeOf,b=g&&g(g(C([])));b&&b!==t&&n.call(b,u)&&(y=b);var w=v.prototype=h.prototype=Object.create(y);function x(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function a(r,i,u,l){var c=d(e[r],e,i);if("throw"!==c.type){var s=c.arg,f=s.value;return f&&"object"==o(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){a("next",e,u,l)}),(function(e){a("throw",e,u,l)})):t.resolve(f).then((function(e){s.value=e,u(s)}),(function(e){return a("throw",e,u,l)}))}l(c.arg)}var i;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){a(e,n,t,r)}))}return i=i?i.then(r,r):r()}})}function k(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return{value:void 0,done:!0}}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var u=E(i,n);if(u){if(u===p)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var l=d(e,t,n);if("normal"===l.type){if(r=n.done?"completed":"suspendedYield",l.arg===p)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r="completed",n.method="throw",n.arg=l.arg)}}}function E(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,E(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),p;var o=d(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,p;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,p):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,p)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function P(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function C(e){if(e){var t=e[u];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:_}}function _(){return{value:void 0,done:!0}}return m.prototype=v,r(w,"constructor",{value:v,configurable:!0}),r(v,"constructor",{value:m,configurable:!0}),m.displayName=s(v,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,v):(e.__proto__=v,s(e,c,"GeneratorFunction")),e.prototype=Object.create(w),e},e.awrap=function(e){return{__await:e}},x(S.prototype),s(S.prototype,l,(function(){return this})),e.AsyncIterator=S,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new S(f(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},x(w),s(w,c,"Generator"),s(w,u,(function(){return this})),s(w,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=C,P.prototype={constructor:P,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(O),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var u=n.call(a,"catchLoc"),l=n.call(a,"finallyLoc");if(u&&l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,p):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),p},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),p}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:C(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),p}},e}function i(e,t,n,r,o,a,i){try{var u=e[a](i),l=u.value}catch(e){return void n(e)}u.done?t(l):Promise.resolve(l).then(r,o)}function u(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function u(e){i(a,r,o,u,l,"next",e)}function l(e){i(a,r,o,u,l,"throw",e)}u(void 0)}))}}var l=(0,r.createAsyncThunk)("session/authorization",function(){var e=u(a().mark((function e(t){var n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("/api/v1/users/sign?fields=token%2Cprofile(name)",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});case 2:return n=e.sent,e.next=5,n.json();case 5:return(r=e.sent).result?localStorage.setItem("token",r.result.token):localStorage.removeItem("token"),e.abrupt("return",r);case 8:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),c=(0,r.createAsyncThunk)("session/check",u(a().mark((function e(){var t,n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(t=localStorage.getItem("token"))){e.next=10;break}return e.next=4,fetch("/api/v1/users/self?fields=token%2Cprofile(name)",{method:"GET",headers:{"Content-Type":"application/json","X-Token":t}});case 4:return r=e.sent,e.next=7,r.json();case 7:n=e.sent,e.next=11;break;case 10:n="session no";case 11:return e.abrupt("return",{result:n,token:t});case 12:case"end":return e.stop()}}),e)})))),s=(0,r.createAsyncThunk)("session/signOut",u(a().mark((function e(){var t,n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=localStorage.getItem("token"),e.next=3,fetch("/api/v1/users/sign",{method:"DELETE",headers:{"Content-Type":"application/json","X-Token":t}});case 3:return n=e.sent,e.next=6,n.json();case 6:return(r=e.sent).result?localStorage.removeItem("token"):console.log(r.result.error.message),e.abrupt("return",r);case 9:case"end":return e.stop()}}),e)})))),f=(0,r.createSlice)({name:"session",initialState:{authorization:!1,token:"",status:"idle",name:""},extraReducers:function(e){e.addCase(l.pending,(function(e){e.status="loading"})).addCase(l.fulfilled,(function(e,t){e.status="succeeded",t.payload.error?e.error=t.payload.error.message:(e.authorization=!0,e.token=t.payload.result.token,e.name=t.payload.result.user.profile.name,e.error="")})).addCase(l.rejected,(function(e,t){e.status="failed",e.error=t.payload.error.message})).addCase(s.pending,(function(e){e.status="loading"})).addCase(s.fulfilled,(function(e){e.status="succeeded",e.error="",e.authorization=!1,e.token="",e.name="",e.error=""})).addCase(s.rejected,(function(e,t){e.status="failed",e.error=t.payload.error.message})).addCase(c.pending,(function(e){e.status="loading"})).addCase(c.fulfilled,(function(e,t){e.status="succeeded",t.payload.error?e.error=t.payload.error.message:(e.authorization=!0,e.token=t.payload.token,e.name=t.payload.result.result.profile.name,e.error="")})).addCase(c.rejected,(function(e,t){e.status="failed",e.error=t.payload.error.message}))}});t.default=f.reducer},841:function(e,t,n){"use strict";n.r(t),n.d(t,{fetchUser:function(){return u}});var r=n(3629);function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function a(){a=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},i="function"==typeof Symbol?Symbol:{},u=i.iterator||"@@iterator",l=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function f(e,t,n,o){var a=t&&t.prototype instanceof h?t:h,i=Object.create(a.prototype),u=new P(o||[]);return r(i,"_invoke",{value:k(e,n,u)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=f;var p={};function h(){}function m(){}function v(){}var y={};s(y,u,(function(){return this}));var g=Object.getPrototypeOf,b=g&&g(g(C([])));b&&b!==t&&n.call(b,u)&&(y=b);var w=v.prototype=h.prototype=Object.create(y);function x(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function a(r,i,u,l){var c=d(e[r],e,i);if("throw"!==c.type){var s=c.arg,f=s.value;return f&&"object"==o(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){a("next",e,u,l)}),(function(e){a("throw",e,u,l)})):t.resolve(f).then((function(e){s.value=e,u(s)}),(function(e){return a("throw",e,u,l)}))}l(c.arg)}var i;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){a(e,n,t,r)}))}return i=i?i.then(r,r):r()}})}function k(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return{value:void 0,done:!0}}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var u=E(i,n);if(u){if(u===p)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var l=d(e,t,n);if("normal"===l.type){if(r=n.done?"completed":"suspendedYield",l.arg===p)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r="completed",n.method="throw",n.arg=l.arg)}}}function E(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,E(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),p;var o=d(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,p;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,p):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,p)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function P(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function C(e){if(e){var t=e[u];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:_}}function _(){return{value:void 0,done:!0}}return m.prototype=v,r(w,"constructor",{value:v,configurable:!0}),r(v,"constructor",{value:m,configurable:!0}),m.displayName=s(v,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,v):(e.__proto__=v,s(e,c,"GeneratorFunction")),e.prototype=Object.create(w),e},e.awrap=function(e){return{__await:e}},x(S.prototype),s(S.prototype,l,(function(){return this})),e.AsyncIterator=S,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new S(f(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},x(w),s(w,c,"Generator"),s(w,u,(function(){return this})),s(w,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=C,P.prototype={constructor:P,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(O),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var u=n.call(a,"catchLoc"),l=n.call(a,"finallyLoc");if(u&&l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,p):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),p},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),p}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:C(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),p}},e}function i(e,t,n,r,o,a,i){try{var u=e[a](i),l=u.value}catch(e){return void n(e)}u.done?t(l):Promise.resolve(l).then(r,o)}var u=(0,r.createAsyncThunk)("user/data",function(){var e,t=(e=a().mark((function e(t){var n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("/api/v1/users/self",{method:"GET",headers:{"Content-Type":"application/json","X-Token":t}});case 2:return n=e.sent,e.next=5,n.json();case 5:return r=e.sent,e.abrupt("return",r);case 7:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function u(e){i(a,r,o,u,l,"next",e)}function l(e){i(a,r,o,u,l,"throw",e)}u(void 0)}))});return function(e){return t.apply(this,arguments)}}()),l=(0,r.createSlice)({name:"user",initialState:{status:"idle",name:"",telephone:"",email:""},extraReducers:function(e){e.addCase(u.pending,(function(e){e.status="loading"})).addCase(u.fulfilled,(function(e,t){e.status="succeeded",t.payload.error?e.error=t.payload.error.message:(e.telephone=t.payload.result.profile.phone,e.email=t.payload.result.email,e.name=t.payload.result.profile.name,e.error="")})).addCase(u.rejected,(function(e,t){e.status="failed",e.error=t.payload.error.message}))}});t.default=l.reducer},8272:function(e,t,n){"use strict";n.r(t),n.d(t,{GlobalFonts:function(){return m}});var r,o,a,i=n(2788),u=n.p+"fce7c01081563377aa62.woff",l=n.p+"1856ca1e863908117345.woff2",c=n.p+"77b530365e5d6aa537c3.woff",s=n.p+"e07f8d28a9f27285c94b.woff2",f=n.p+"943035b994f748e10c96.woff",d=n.p+"f696093cac0c009432c7.woff2",p=n.p+"37777c699149506190a8.woff",h=n.p+"080abd2d6ed027a62275.woff2",m=(0,i.createGlobalStyle)(r||(o=['\n  @font-face {\n    font-style: normal;\n    font-weight: 400;\n    font-family: "Permanent-Marker";\n\n    font-display: swap;\n    src:\n      url(',') format("woff2"),\n      url(',') format("woff");\n  }\n\n  @font-face {\n    font-style: normal;\n    font-weight: 400;\n    font-family: "Inter";\n\n    font-display: swap;\n    src:\n      url(',') format("woff2"),\n      url(',') format("woff");\n  }\n\n  @font-face {\n    font-style: normal;\n    font-weight: 500;\n    font-family: "Inter";\n\n    font-display: swap;\n    src:\n      url(',') format("woff2"),\n      url(',') format("woff");\n  }\n\n\n  @font-face {\n    font-style: normal;\n    font-weight: 900;\n    font-family: "Inter";\n\n    font-display: swap;\n    src:\n      url(',') format("woff2"),\n      url(',') format("woff");\n  }\n'],a||(a=o.slice(0)),r=Object.freeze(Object.defineProperties(o,{raw:{value:Object.freeze(a)}}))),l,u,s,c,d,f,h,p)},1353:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return o}});var r=n(7294);function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];(0,r.useEffect)((function(){if(e(!1),n)return window.addEventListener("popstate",e),function(){window.removeEventListener("popstate",e)}}),t)}},9363:function(e,t,n){"use strict";n.d(t,{DE:function(){return p},Dx:function(){return h},f2:function(){return d},uX:function(){return f},zg:function(){return m}});var r,o,a,i,u,l,c=n(2788);function s(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var f=(0,c.css)(r||(r=s(["\n  font-family: ",";\n  font-style: normal;\n  font-weight: 400;\n"])),(function(e){return e.theme.ffPermanentMarker})),d=((0,c.css)(o||(o=s(["\n  font-family: ",";\n  font-style: normal;\n  font-weight: 400;\n"])),(function(e){return e.theme.ffInter})),(0,c.css)(a||(a=s(["\n  font-family: ",";\n  font-style: normal;\n  font-weight: 500;\n"])),(function(e){return e.theme.ffInter}))),p=(0,c.css)(i||(i=s(["\n  font-family: ",";\n  font-style: normal;\n  font-weight: 900;\n"])),(function(e){return e.theme.ffInter})),h=(0,c.css)(u||(u=s(["\n  margin: 0;\n\n  ",";\n  font-size: 2em;\n  line-height: 115%;\n  text-align: center;\n  color: #ee5c07;\n\n  @media(max-width: 63.94em) {\n    font-size: 1.5em;\n  }\n\n  @media(max-width: 47.94em) {\n    font-size: 1.1em;\n  }\n"])),p),m=(0,c.css)(l||(l=s(["\n  font-size: 1.5em;\n  line-height: 150%;\n  display: block;\n  width: 100%;\n  padding: 20px;\n  text-align: center;\n  border: none;\n  border-radius: 5px;\n\n  align-self: end;\n\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    opacity: 0.8;\n  }\n\n  @media(max-width: 89.94em) {\n    padding: 15px;\n  }\n\n  @media(max-width: 63.94em) {\n    padding: 10px;\n    font-size: 1em;\n  }\n\n  @media(max-width: 47.94em) {\n    padding: 7px;\n    font-size: 0.7em;\n  }\n"])))},8679:function(e,t,n){"use strict";var r=n(1296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?i:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=i;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=s(n);f&&(i=i.concat(f(n)));for(var u=l(t),m=l(n),v=0;v<i.length;++v){var y=i[v];if(!(a[y]||r&&r[y]||m&&m[y]||u&&u[y])){var g=d(n,y);try{c(t,y,g)}catch(e){}}}}return t}},6103:function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case a:case u:case i:case p:return e;default:switch(e=e&&e.$$typeof){case c:case d:case v:case m:case l:return e;default:return t}}case o:return t}}}function S(e){return x(e)===f}t.AsyncMode=s,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=l,t.Element=r,t.ForwardRef=d,t.Fragment=a,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=u,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return S(e)||x(e)===s},t.isConcurrentMode=S,t.isContextConsumer=function(e){return x(e)===c},t.isContextProvider=function(e){return x(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return x(e)===d},t.isFragment=function(e){return x(e)===a},t.isLazy=function(e){return x(e)===v},t.isMemo=function(e){return x(e)===m},t.isPortal=function(e){return x(e)===o},t.isProfiler=function(e){return x(e)===u},t.isStrictMode=function(e){return x(e)===i},t.isSuspense=function(e){return x(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===u||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===l||e.$$typeof===c||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=x},1296:function(e,t,n){"use strict";e.exports=n(6103)},7954:function(e,t,n){var r=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,i=/^0o[0-7]+$/i,u=parseInt,l="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,c="object"==typeof self&&self&&self.Object===Object&&self,s=l||c||Function("return this")(),f=Object.prototype.toString,d=Math.max,p=Math.min,h=function(){return s.Date.now()};function m(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function v(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==f.call(e)}(e))return NaN;if(m(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=m(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(r,"");var n=a.test(e);return n||i.test(e)?u(e.slice(2),n?2:8):o.test(e)?NaN:+e}e.exports=function(e,t,n){var r,o,a,i,u,l,c=0,s=!1,f=!1,y=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function g(t){var n=r,a=o;return r=o=void 0,c=t,i=e.apply(a,n)}function b(e){var n=e-l;return void 0===l||n>=t||n<0||f&&e-c>=a}function w(){var e=h();if(b(e))return x(e);u=setTimeout(w,function(e){var n=t-(e-l);return f?p(n,a-(e-c)):n}(e))}function x(e){return u=void 0,y&&r?g(e):(r=o=void 0,i)}function S(){var e=h(),n=b(e);if(r=arguments,o=this,l=e,n){if(void 0===u)return function(e){return c=e,u=setTimeout(w,t),s?g(e):i}(l);if(f)return u=setTimeout(w,t),g(l)}return void 0===u&&(u=setTimeout(w,t)),i}return t=v(t)||0,m(n)&&(s=!!n.leading,a=(f="maxWait"in n)?d(v(n.maxWait)||0,t):a,y="trailing"in n?!!n.trailing:y),S.cancel=function(){void 0!==u&&clearTimeout(u),c=0,r=l=o=u=void 0},S.flush=function(){return void 0===u?i:x(h())},S}},4448:function(e,t,n){"use strict";var r=n(7294),o=n(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,u={};function l(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)i.add(t[e])}var s=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=Symbol.for("react.element"),S=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),E=Symbol.for("react.strict_mode"),j=Symbol.for("react.profiler"),O=Symbol.for("react.provider"),P=Symbol.for("react.context"),C=Symbol.for("react.forward_ref"),_=Symbol.for("react.suspense"),A=Symbol.for("react.suspense_list"),R=Symbol.for("react.memo"),L=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var T=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var N=Symbol.iterator;function z(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=N&&e[N]||e["@@iterator"])?e:null}var D,I=Object.assign;function M(e){if(void 0===D)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);D=t&&t[1]||""}return"\n"+D+e}var F=!1;function B(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,u=a.length-1;1<=i&&0<=u&&o[i]!==a[u];)u--;for(;1<=i&&0<=u;i--,u--)if(o[i]!==a[u]){if(1!==i||1!==u)do{if(i--,0>--u||o[i]!==a[u]){var l="\n"+o[i].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=i&&0<=u);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?M(e):""}function U(e){switch(e.tag){case 5:return M(e.type);case 16:return M("Lazy");case 13:return M("Suspense");case 19:return M("SuspenseList");case 0:case 2:case 15:return B(e.type,!1);case 11:return B(e.type.render,!1);case 1:return B(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case S:return"Portal";case j:return"Profiler";case E:return"StrictMode";case _:return"Suspense";case A:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case O:return(e._context.displayName||"Context")+".Provider";case C:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case R:return null!==(t=e.displayName||null)?t:$(e.type)||"Memo";case L:t=e._payload,e=e._init;try{return $(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return $(t);case 8:return t===E?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function H(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function V(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function q(e){e._valueTracker||(e._valueTracker=function(e){var t=V(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=V(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function K(e,t){var n=t.checked;return I({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function J(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=H(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Y(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function X(e,t){Y(e,t);var n=H(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,H(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+H(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return I({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:H(n)}}function ae(e,t){var n=H(t.value),r=H(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ue(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ue(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,se,fe=(se=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return se(e,t)}))}:se);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ye=I({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,ke=null,Ee=null;function je(e){if(e=wo(e)){if("function"!=typeof Se)throw Error(a(280));var t=e.stateNode;t&&(t=So(t),Se(e.stateNode,e.type,t))}}function Oe(e){ke?Ee?Ee.push(e):Ee=[e]:ke=e}function Pe(){if(ke){var e=ke,t=Ee;if(Ee=ke=null,je(e),t)for(e=0;e<t.length;e++)je(t[e])}}function Ce(e,t){return e(t)}function _e(){}var Ae=!1;function Re(e,t,n){if(Ae)return e(t,n);Ae=!0;try{return Ce(e,t,n)}finally{Ae=!1,(null!==ke||null!==Ee)&&(_e(),Pe())}}function Le(e,t){var n=e.stateNode;if(null===n)return null;var r=So(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Te=!1;if(s)try{var Ne={};Object.defineProperty(Ne,"passive",{get:function(){Te=!0}}),window.addEventListener("test",Ne,Ne),window.removeEventListener("test",Ne,Ne)}catch(se){Te=!1}function ze(e,t,n,r,o,a,i,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var De=!1,Ie=null,Me=!1,Fe=null,Be={onError:function(e){De=!0,Ie=e}};function Ue(e,t,n,r,o,a,i,u,l){De=!1,Ie=null,ze.apply(Be,arguments)}function $e(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function He(e){if($e(e)!==e)throw Error(a(188))}function Ve(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=$e(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return He(o),e;if(i===r)return He(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?qe(e):null}function qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=qe(e);if(null!==t)return t;e=e.sibling}return null}var Qe=o.unstable_scheduleCallback,Ge=o.unstable_cancelCallback,Ke=o.unstable_shouldYield,Je=o.unstable_requestPaint,Ye=o.unstable_now,Xe=o.unstable_getCurrentPriorityLevel,Ze=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ut(e)/lt|0)|0},ut=Math.log,lt=Math.LN2,ct=64,st=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&n;if(0!==i){var u=i&~o;0!==u?r=ft(u):0!=(a&=i)&&(r=ft(a))}else 0!=(i=n&~o)?r=ft(i):0!==a&&(r=ft(a));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&0!=(4194240&a)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-it(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ct;return 0==(4194240&(ct<<=1))&&(ct=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var xt,St,kt,Et,jt,Ot=!1,Pt=[],Ct=null,_t=null,At=null,Rt=new Map,Lt=new Map,Tt=[],Nt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function zt(e,t){switch(e){case"focusin":case"focusout":Ct=null;break;case"dragenter":case"dragleave":_t=null;break;case"mouseover":case"mouseout":At=null;break;case"pointerover":case"pointerout":Rt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Lt.delete(t.pointerId)}}function Dt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&St(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function It(e){var t=bo(e.target);if(null!==t){var n=$e(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void jt(e.priority,(function(){kt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&St(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Ft(e,t,n){Mt(e)&&n.delete(t)}function Bt(){Ot=!1,null!==Ct&&Mt(Ct)&&(Ct=null),null!==_t&&Mt(_t)&&(_t=null),null!==At&&Mt(At)&&(At=null),Rt.forEach(Ft),Lt.forEach(Ft)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,Ot||(Ot=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Bt)))}function $t(e){function t(t){return Ut(t,e)}if(0<Pt.length){Ut(Pt[0],e);for(var n=1;n<Pt.length;n++){var r=Pt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Ct&&Ut(Ct,e),null!==_t&&Ut(_t,e),null!==At&&Ut(At,e),Rt.forEach(t),Lt.forEach(t),n=0;n<Tt.length;n++)(r=Tt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Tt.length&&null===(n=Tt[0]).blockedOn;)It(n),null===n.blockedOn&&Tt.shift()}var Wt=w.ReactCurrentBatchConfig,Ht=!0;function Vt(e,t,n,r){var o=bt,a=Wt.transition;Wt.transition=null;try{bt=1,Qt(e,t,n,r)}finally{bt=o,Wt.transition=a}}function qt(e,t,n,r){var o=bt,a=Wt.transition;Wt.transition=null;try{bt=4,Qt(e,t,n,r)}finally{bt=o,Wt.transition=a}}function Qt(e,t,n,r){if(Ht){var o=Kt(e,t,n,r);if(null===o)Hr(e,t,r,Gt,n),zt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Ct=Dt(Ct,e,t,n,r,o),!0;case"dragenter":return _t=Dt(_t,e,t,n,r,o),!0;case"mouseover":return At=Dt(At,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return Rt.set(a,Dt(Rt.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Lt.set(a,Dt(Lt.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(zt(e,r),4&t&&-1<Nt.indexOf(e)){for(;null!==o;){var a=wo(o);if(null!==a&&xt(a),null===(a=Kt(e,t,n,r))&&Hr(e,t,r,Gt,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Hr(e,t,r,null,n)}}var Gt=null;function Kt(e,t,n,r){if(Gt=null,null!==(e=bo(e=xe(r))))if(null===(t=$e(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Gt=e,null}function Jt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Xe()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Yt=null,Xt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Xt,r=n.length,o="value"in Yt?Yt.value:Yt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Zt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return I(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,un,ln,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},sn=on(cn),fn=I({},cn,{view:0,detail:0}),dn=on(fn),pn=I({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:jn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(an=e.screenX-ln.screenX,un=e.screenY-ln.screenY):un=an=0,ln=e),an)},movementY:function(e){return"movementY"in e?e.movementY:un}}),hn=on(pn),mn=on(I({},pn,{dataTransfer:0})),vn=on(I({},fn,{relatedTarget:0})),yn=on(I({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=I({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(gn),wn=on(I({},cn,{data:0})),xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function jn(){return En}var On=I({},fn,{key:function(e){if(e.key){var t=xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:jn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Pn=on(On),Cn=on(I({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),_n=on(I({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:jn})),An=on(I({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Rn=I({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Ln=on(Rn),Tn=[9,13,27,32],Nn=s&&"CompositionEvent"in window,zn=null;s&&"documentMode"in document&&(zn=document.documentMode);var Dn=s&&"TextEvent"in window&&!zn,In=s&&(!Nn||zn&&8<zn&&11>=zn),Mn=String.fromCharCode(32),Fn=!1;function Bn(e,t){switch(e){case"keyup":return-1!==Tn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var $n=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Vn(e,t,n,r){Oe(r),0<(t=qr(t,"onChange")).length&&(n=new sn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var qn=null,Qn=null;function Gn(e){Mr(e,0)}function Kn(e){if(Q(xo(e)))return e}function Jn(e,t){if("change"===e)return t}var Yn=!1;if(s){var Xn;if(s){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Xn=Zn}else Xn=!1;Yn=Xn&&(!document.documentMode||9<document.documentMode)}function tr(){qn&&(qn.detachEvent("onpropertychange",nr),Qn=qn=null)}function nr(e){if("value"===e.propertyName&&Kn(Qn)){var t=[];Vn(t,Qn,e,xe(e)),Re(Gn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Qn=n,(qn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(Qn)}function ar(e,t){if("click"===e)return Kn(t)}function ir(e,t){if("input"===e||"change"===e)return Kn(t)}var ur="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(ur(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!ur(e[o],t[o]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=sr(n,a);var i=sr(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=s&&"documentMode"in document&&11>=document.documentMode,vr=null,yr=null,gr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==G(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&lr(gr,r)||(gr=r,0<(r=qr(yr,"onSelect")).length&&(t=new sn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function xr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Sr={animationend:xr("Animation","AnimationEnd"),animationiteration:xr("Animation","AnimationIteration"),animationstart:xr("Animation","AnimationStart"),transitionend:xr("Transition","TransitionEnd")},kr={},Er={};function jr(e){if(kr[e])return kr[e];if(!Sr[e])return e;var t,n=Sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Er)return kr[e]=n[t];return e}s&&(Er=document.createElement("div").style,"AnimationEvent"in window||(delete Sr.animationend.animation,delete Sr.animationiteration.animation,delete Sr.animationstart.animation),"TransitionEvent"in window||delete Sr.transitionend.transition);var Or=jr("animationend"),Pr=jr("animationiteration"),Cr=jr("animationstart"),_r=jr("transitionend"),Ar=new Map,Rr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Lr(e,t){Ar.set(e,t),l(t,[e])}for(var Tr=0;Tr<Rr.length;Tr++){var Nr=Rr[Tr];Lr(Nr.toLowerCase(),"on"+(Nr[0].toUpperCase()+Nr.slice(1)))}Lr(Or,"onAnimationEnd"),Lr(Pr,"onAnimationIteration"),Lr(Cr,"onAnimationStart"),Lr("dblclick","onDoubleClick"),Lr("focusin","onFocus"),Lr("focusout","onBlur"),Lr(_r,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var zr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Dr=new Set("cancel close invalid load scroll toggle".split(" ").concat(zr));function Ir(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,u,l,c){if(Ue.apply(this,arguments),De){if(!De)throw Error(a(198));var s=Ie;De=!1,Ie=null,Me||(Me=!0,Fe=s)}}(r,t,void 0,e),e.currentTarget=null}function Mr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var u=r[i],l=u.instance,c=u.currentTarget;if(u=u.listener,l!==a&&o.isPropagationStopped())break e;Ir(o,u,c),a=l}else for(i=0;i<r.length;i++){if(l=(u=r[i]).instance,c=u.currentTarget,u=u.listener,l!==a&&o.isPropagationStopped())break e;Ir(o,u,c),a=l}}}if(Me)throw e=Fe,Me=!1,Fe=null,e}function Fr(e,t){var n=t[vo];void 0===n&&(n=t[vo]=new Set);var r=e+"__bubble";n.has(r)||(Wr(t,e,2,!1),n.add(r))}function Br(e,t,n){var r=0;t&&(r|=4),Wr(n,e,r,t)}var Ur="_reactListening"+Math.random().toString(36).slice(2);function $r(e){if(!e[Ur]){e[Ur]=!0,i.forEach((function(t){"selectionchange"!==t&&(Dr.has(t)||Br(t,!1,e),Br(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ur]||(t[Ur]=!0,Br("selectionchange",!1,t))}}function Wr(e,t,n,r){switch(Jt(t)){case 1:var o=Vt;break;case 4:o=qt;break;default:o=Qt}n=o.bind(null,t,n,e),o=void 0,!Te||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Hr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var u=r.stateNode.containerInfo;if(u===o||8===u.nodeType&&u.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var l=i.tag;if((3===l||4===l)&&((l=i.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;i=i.return}for(;null!==u;){if(null===(i=bo(u)))return;if(5===(l=i.tag)||6===l){r=a=i;continue e}u=u.parentNode}}r=r.return}Re((function(){var r=a,o=xe(n),i=[];e:{var u=Ar.get(e);if(void 0!==u){var l=sn,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=Pn;break;case"focusin":c="focus",l=vn;break;case"focusout":c="blur",l=vn;break;case"beforeblur":case"afterblur":l=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=_n;break;case Or:case Pr:case Cr:l=yn;break;case _r:l=An;break;case"scroll":l=dn;break;case"wheel":l=Ln;break;case"copy":case"cut":case"paste":l=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Cn}var s=0!=(4&t),f=!s&&"scroll"===e,d=s?null!==u?u+"Capture":null:u;s=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Le(h,d))&&s.push(Vr(h,m,p))),f)break;h=h.return}0<s.length&&(u=new l(u,c,null,n,o),i.push({event:u,listeners:s}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||n===we||!(c=n.relatedTarget||n.fromElement)||!bo(c)&&!c[mo])&&(l||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,l?(l=r,null!==(c=(c=n.relatedTarget||n.toElement)?bo(c):null)&&(c!==(f=$e(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(s=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=Cn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?u:xo(l),p=null==c?u:xo(c),(u=new s(m,h+"leave",l,n,o)).target=f,u.relatedTarget=p,m=null,bo(o)===r&&((s=new s(d,h+"enter",c,n,o)).target=p,s.relatedTarget=f,m=s),f=m,l&&c)e:{for(d=c,h=0,p=s=l;p;p=Qr(p))h++;for(p=0,m=d;m;m=Qr(m))p++;for(;0<h-p;)s=Qr(s),h--;for(;0<p-h;)d=Qr(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=Qr(s),d=Qr(d)}s=null}else s=null;null!==l&&Gr(i,u,l,s,!1),null!==c&&null!==f&&Gr(i,f,c,s,!0)}if("select"===(l=(u=r?xo(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===l&&"file"===u.type)var v=Jn;else if(Hn(u))if(Yn)v=ir;else{v=or;var y=rr}else(l=u.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(v=ar);switch(v&&(v=v(e,r))?Vn(i,v,n,o):(y&&y(e,u,r),"focusout"===e&&(y=u._wrapperState)&&y.controlled&&"number"===u.type&&ee(u,"number",u.value)),y=r?xo(r):window,e){case"focusin":(Hn(y)||"true"===y.contentEditable)&&(vr=y,yr=r,gr=null);break;case"focusout":gr=yr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(i,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(i,n,o)}var g;if(Nn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else $n?Bn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(In&&"ko"!==n.locale&&($n||"onCompositionStart"!==b?"onCompositionEnd"===b&&$n&&(g=en()):(Xt="value"in(Yt=o)?Yt.value:Yt.textContent,$n=!0)),0<(y=qr(r,b)).length&&(b=new wn(b,e,null,n,o),i.push({event:b,listeners:y}),(g||null!==(g=Un(n)))&&(b.data=g))),(g=Dn?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Fn=!0,Mn);case"textInput":return(e=t.data)===Mn&&Fn?null:e;default:return null}}(e,n):function(e,t){if($n)return"compositionend"===e||!Nn&&Bn(e,t)?(e=en(),Zt=Xt=Yt=null,$n=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return In&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=qr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=g)}Mr(i,t)}))}function Vr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function qr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Le(e,n))&&r.unshift(Vr(e,a,o)),null!=(a=Le(e,t))&&r.push(Vr(e,a,o))),e=e.return}return r}function Qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Gr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var u=n,l=u.alternate,c=u.stateNode;if(null!==l&&l===r)break;5===u.tag&&null!==c&&(u=c,o?null!=(l=Le(n,a))&&i.unshift(Vr(n,l,u)):o||null!=(l=Le(n,a))&&i.push(Vr(n,l,u))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Kr=/\r\n?/g,Jr=/\u0000|\uFFFD/g;function Yr(e){return("string"==typeof e?e:""+e).replace(Kr,"\n").replace(Jr,"")}function Xr(e,t,n){if(t=Yr(t),Yr(e)!==t&&n)throw Error(a(425))}function Zr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(uo)}:ro;function uo(e){setTimeout((function(){throw e}))}function lo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void $t(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);$t(t)}function co(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function so(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,vo="__reactEvents$"+fo,yo="__reactListeners$"+fo,go="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=so(e);null!==e;){if(n=e[po])return n;e=so(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function xo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function So(e){return e[ho]||null}var ko=[],Eo=-1;function jo(e){return{current:e}}function Oo(e){0>Eo||(e.current=ko[Eo],ko[Eo]=null,Eo--)}function Po(e,t){Eo++,ko[Eo]=e.current,e.current=t}var Co={},_o=jo(Co),Ao=jo(!1),Ro=Co;function Lo(e,t){var n=e.type.contextTypes;if(!n)return Co;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function To(e){return null!=e.childContextTypes}function No(){Oo(Ao),Oo(_o)}function zo(e,t,n){if(_o.current!==Co)throw Error(a(168));Po(_o,t),Po(Ao,n)}function Do(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,W(e)||"Unknown",o));return I({},n,r)}function Io(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Co,Ro=_o.current,Po(_o,e),Po(Ao,Ao.current),!0}function Mo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Do(e,t,Ro),r.__reactInternalMemoizedMergedChildContext=e,Oo(Ao),Oo(_o),Po(_o,e)):Oo(Ao),Po(Ao,n)}var Fo=null,Bo=!1,Uo=!1;function $o(e){null===Fo?Fo=[e]:Fo.push(e)}function Wo(){if(!Uo&&null!==Fo){Uo=!0;var e=0,t=bt;try{var n=Fo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Fo=null,Bo=!1}catch(t){throw null!==Fo&&(Fo=Fo.slice(e+1)),Qe(Ze,Wo),t}finally{bt=t,Uo=!1}}return null}var Ho=[],Vo=0,qo=null,Qo=0,Go=[],Ko=0,Jo=null,Yo=1,Xo="";function Zo(e,t){Ho[Vo++]=Qo,Ho[Vo++]=qo,qo=e,Qo=t}function ea(e,t,n){Go[Ko++]=Yo,Go[Ko++]=Xo,Go[Ko++]=Jo,Jo=e;var r=Yo;e=Xo;var o=32-it(r)-1;r&=~(1<<o),n+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Yo=1<<32-it(t)+o|n<<o|r,Xo=a+e}else Yo=1<<a|n<<o|r,Xo=e}function ta(e){null!==e.return&&(Zo(e,1),ea(e,1,0))}function na(e){for(;e===qo;)qo=Ho[--Vo],Ho[Vo]=null,Qo=Ho[--Vo],Ho[Vo]=null;for(;e===Jo;)Jo=Go[--Ko],Go[Ko]=null,Xo=Go[--Ko],Go[Ko]=null,Yo=Go[--Ko],Go[Ko]=null}var ra=null,oa=null,aa=!1,ia=null;function ua(e,t){var n=Lc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function la(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ra=e,oa=co(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ra=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Jo?{id:Yo,overflow:Xo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Lc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ra=e,oa=null,!0);default:return!1}}function ca(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function sa(e){if(aa){var t=oa;if(t){var n=t;if(!la(e,t)){if(ca(e))throw Error(a(418));t=co(n.nextSibling);var r=ra;t&&la(e,t)?ua(r,n):(e.flags=-4097&e.flags|2,aa=!1,ra=e)}}else{if(ca(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,ra=e}}}function fa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ra=e}function da(e){if(e!==ra)return!1;if(!aa)return fa(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oa)){if(ca(e))throw pa(),Error(a(418));for(;t;)ua(e,t),t=co(t.nextSibling)}if(fa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oa=co(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oa=null}}else oa=ra?co(e.stateNode.nextSibling):null;return!0}function pa(){for(var e=oa;e;)e=co(e.nextSibling)}function ha(){oa=ra=null,aa=!1}function ma(e){null===ia?ia=[e]:ia.push(e)}var va=w.ReactCurrentBatchConfig;function ya(e,t){if(e&&e.defaultProps){for(var n in t=I({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var ga=jo(null),ba=null,wa=null,xa=null;function Sa(){xa=wa=ba=null}function ka(e){var t=ga.current;Oo(ga),e._currentValue=t}function Ea(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function ja(e,t){ba=e,xa=wa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wu=!0),e.firstContext=null)}function Oa(e){var t=e._currentValue;if(xa!==e)if(e={context:e,memoizedValue:t,next:null},null===wa){if(null===ba)throw Error(a(308));wa=e,ba.dependencies={lanes:0,firstContext:e}}else wa=wa.next=e;return t}var Pa=null;function Ca(e){null===Pa?Pa=[e]:Pa.push(e)}function _a(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Ca(t)):(n.next=o.next,o.next=n),t.interleaved=n,Aa(e,r)}function Aa(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Ra=!1;function La(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ta(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Na(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function za(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&_l)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Aa(e,n)}return null===(o=r.interleaved)?(t.next=t,Ca(r)):(t.next=o.next,o.next=t),r.interleaved=t,Aa(e,n)}function Da(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function Ia(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Ma(e,t,n,r){var o=e.updateQueue;Ra=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,u=o.shared.pending;if(null!==u){o.shared.pending=null;var l=u,c=l.next;l.next=null,null===i?a=c:i.next=c,i=l;var s=e.alternate;null!==s&&(u=(s=s.updateQueue).lastBaseUpdate)!==i&&(null===u?s.firstBaseUpdate=c:u.next=c,s.lastBaseUpdate=l)}if(null!==a){var f=o.baseState;for(i=0,s=c=l=null,u=a;;){var d=u.lane,p=u.eventTime;if((r&d)===d){null!==s&&(s=s.next={eventTime:p,lane:0,tag:u.tag,payload:u.payload,callback:u.callback,next:null});e:{var h=e,m=u;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=I({},f,d);break e;case 2:Ra=!0}}null!==u.callback&&0!==u.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[u]:d.push(u))}else p={eventTime:p,lane:d,tag:u.tag,payload:u.payload,callback:u.callback,next:null},null===s?(c=s=p,l=f):s=s.next=p,i|=d;if(null===(u=u.next)){if(null===(u=o.shared.pending))break;u=(d=u).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===s&&(l=f),o.baseState=l,o.firstBaseUpdate=c,o.lastBaseUpdate=s,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);Il|=i,e.lanes=i,e.memoizedState=f}}function Fa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var Ba=(new r.Component).refs;function Ua(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:I({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var $a={isMounted:function(e){return!!(e=e._reactInternals)&&$e(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tc(),o=nc(e),a=Na(r,o);a.payload=t,null!=n&&(a.callback=n),null!==(t=za(e,a,o))&&(rc(t,e,o,r),Da(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tc(),o=nc(e),a=Na(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=za(e,a,o))&&(rc(t,e,o,r),Da(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tc(),r=nc(e),o=Na(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=za(e,o,r))&&(rc(t,e,r,n),Da(t,e,r))}};function Wa(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(o,a))}function Ha(e,t,n){var r=!1,o=Co,a=t.contextType;return"object"==typeof a&&null!==a?a=Oa(a):(o=To(t)?Ro:_o.current,a=(r=null!=(r=t.contextTypes))?Lo(e,o):Co),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=$a,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Va(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&$a.enqueueReplaceState(t,t.state,null)}function qa(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Ba,La(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=Oa(a):(a=To(t)?Ro:_o.current,o.context=Lo(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Ua(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&$a.enqueueReplaceState(o,o.state,null),Ma(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Qa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;t===Ba&&(t=o.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ga(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ka(e){return(0,e._init)(e._payload)}function Ja(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Nc(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function u(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Mc(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){var a=n.type;return a===k?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===L&&Ka(a)===t.type)?((r=o(t,n.props)).ref=Qa(e,t,n),r.return=e,r):((r=zc(n.type,n.key,n.props,null,e.mode,r)).ref=Qa(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Fc(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Dc(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Mc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=zc(t.type,t.key,t.props,null,e.mode,n)).ref=Qa(e,null,t),n.return=e,n;case S:return(t=Fc(t,e.mode,n)).return=e,t;case L:return d(e,(0,t._init)(t._payload),n)}if(te(t)||z(t))return(t=Dc(t,e.mode,n,null)).return=e,t;Ga(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===o?c(e,t,n,r):null;case S:return n.key===o?s(e,t,n,r):null;case L:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||z(n))return null!==o?null:f(e,t,n,r,null);Ga(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case S:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case L:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||z(r))return f(t,e=e.get(n)||null,r,o,null);Ga(t,r)}return null}function m(o,a,u,l){for(var c=null,s=null,f=a,m=a=0,v=null;null!==f&&m<u.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,u[m],l);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===s?c=y:s.sibling=y,s=y,f=v}if(m===u.length)return n(o,f),aa&&Zo(o,m),c;if(null===f){for(;m<u.length;m++)null!==(f=d(o,u[m],l))&&(a=i(f,a,m),null===s?c=f:s.sibling=f,s=f);return aa&&Zo(o,m),c}for(f=r(o,f);m<u.length;m++)null!==(v=h(f,o,m,u[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),aa&&Zo(o,m),c}function v(o,u,l,c){var s=z(l);if("function"!=typeof s)throw Error(a(150));if(null==(l=s.call(l)))throw Error(a(151));for(var f=s=null,m=u,v=u=0,y=null,g=l.next();null!==m&&!g.done;v++,g=l.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,c);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),u=i(b,u,v),null===f?s=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),aa&&Zo(o,v),s;if(null===m){for(;!g.done;v++,g=l.next())null!==(g=d(o,g.value,c))&&(u=i(g,u,v),null===f?s=g:f.sibling=g,f=g);return aa&&Zo(o,v),s}for(m=r(o,m);!g.done;v++,g=l.next())null!==(g=h(m,o,v,g.value,c))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),u=i(g,u,v),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),aa&&Zo(o,v),s}return function e(r,a,i,l){if("object"==typeof i&&null!==i&&i.type===k&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case x:e:{for(var c=i.key,s=a;null!==s;){if(s.key===c){if((c=i.type)===k){if(7===s.tag){n(r,s.sibling),(a=o(s,i.props.children)).return=r,r=a;break e}}else if(s.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===L&&Ka(c)===s.type){n(r,s.sibling),(a=o(s,i.props)).ref=Qa(r,s,i),a.return=r,r=a;break e}n(r,s);break}t(r,s),s=s.sibling}i.type===k?((a=Dc(i.props.children,r.mode,l,i.key)).return=r,r=a):((l=zc(i.type,i.key,i.props,null,r.mode,l)).ref=Qa(r,a,i),l.return=r,r=l)}return u(r);case S:e:{for(s=i.key;null!==a;){if(a.key===s){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(r,a.sibling),(a=o(a,i.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=Fc(i,r.mode,l)).return=r,r=a}return u(r);case L:return e(r,a,(s=i._init)(i._payload),l)}if(te(i))return m(r,a,i,l);if(z(i))return v(r,a,i,l);Ga(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,i)).return=r,r=a):(n(r,a),(a=Mc(i,r.mode,l)).return=r,r=a),u(r)):n(r,a)}}var Ya=Ja(!0),Xa=Ja(!1),Za={},ei=jo(Za),ti=jo(Za),ni=jo(Za);function ri(e){if(e===Za)throw Error(a(174));return e}function oi(e,t){switch(Po(ni,t),Po(ti,e),Po(ei,Za),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Oo(ei),Po(ei,t)}function ai(){Oo(ei),Oo(ti),Oo(ni)}function ii(e){ri(ni.current);var t=ri(ei.current),n=le(t,e.type);t!==n&&(Po(ti,e),Po(ei,n))}function ui(e){ti.current===e&&(Oo(ei),Oo(ti))}var li=jo(0);function ci(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var si=[];function fi(){for(var e=0;e<si.length;e++)si[e]._workInProgressVersionPrimary=null;si.length=0}var di=w.ReactCurrentDispatcher,pi=w.ReactCurrentBatchConfig,hi=0,mi=null,vi=null,yi=null,gi=!1,bi=!1,wi=0,xi=0;function Si(){throw Error(a(321))}function ki(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ur(e[n],t[n]))return!1;return!0}function Ei(e,t,n,r,o,i){if(hi=i,mi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,di.current=null===e||null===e.memoizedState?uu:lu,e=n(r,o),bi){i=0;do{if(bi=!1,wi=0,25<=i)throw Error(a(301));i+=1,yi=vi=null,t.updateQueue=null,di.current=cu,e=n(r,o)}while(bi)}if(di.current=iu,t=null!==vi&&null!==vi.next,hi=0,yi=vi=mi=null,gi=!1,t)throw Error(a(300));return e}function ji(){var e=0!==wi;return wi=0,e}function Oi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===yi?mi.memoizedState=yi=e:yi=yi.next=e,yi}function Pi(){if(null===vi){var e=mi.alternate;e=null!==e?e.memoizedState:null}else e=vi.next;var t=null===yi?mi.memoizedState:yi.next;if(null!==t)yi=t,vi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(vi=e).memoizedState,baseState:vi.baseState,baseQueue:vi.baseQueue,queue:vi.queue,next:null},null===yi?mi.memoizedState=yi=e:yi=yi.next=e}return yi}function Ci(e,t){return"function"==typeof t?t(e):t}function _i(e){var t=Pi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=vi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var u=o.next;o.next=i.next,i.next=u}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var l=u=null,c=null,s=i;do{var f=s.lane;if((hi&f)===f)null!==c&&(c=c.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),r=s.hasEagerState?s.eagerState:e(r,s.action);else{var d={lane:f,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};null===c?(l=c=d,u=r):c=c.next=d,mi.lanes|=f,Il|=f}s=s.next}while(null!==s&&s!==i);null===c?u=r:c.next=l,ur(r,t.memoizedState)||(wu=!0),t.memoizedState=r,t.baseState=u,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,mi.lanes|=i,Il|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ai(e){var t=Pi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{i=e(i,u.action),u=u.next}while(u!==o);ur(i,t.memoizedState)||(wu=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Ri(){}function Li(e,t){var n=mi,r=Pi(),o=t(),i=!ur(r.memoizedState,o);if(i&&(r.memoizedState=o,wu=!0),r=r.queue,Hi(zi.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==yi&&1&yi.memoizedState.tag){if(n.flags|=2048,Fi(9,Ni.bind(null,n,r,o,t),void 0,null),null===Al)throw Error(a(349));0!=(30&hi)||Ti(n,t,o)}return o}function Ti(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ni(e,t,n,r){t.value=n,t.getSnapshot=r,Di(t)&&Ii(e)}function zi(e,t,n){return n((function(){Di(t)&&Ii(e)}))}function Di(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ur(e,n)}catch(e){return!0}}function Ii(e){var t=Aa(e,1);null!==t&&rc(t,e,1,-1)}function Mi(e){var t=Oi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ci,lastRenderedState:e},t.queue=e,e=e.dispatch=nu.bind(null,mi,e),[t.memoizedState,e]}function Fi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Bi(){return Pi().memoizedState}function Ui(e,t,n,r){var o=Oi();mi.flags|=e,o.memoizedState=Fi(1|t,n,void 0,void 0===r?null:r)}function $i(e,t,n,r){var o=Pi();r=void 0===r?null:r;var a=void 0;if(null!==vi){var i=vi.memoizedState;if(a=i.destroy,null!==r&&ki(r,i.deps))return void(o.memoizedState=Fi(t,n,a,r))}mi.flags|=e,o.memoizedState=Fi(1|t,n,a,r)}function Wi(e,t){return Ui(8390656,8,e,t)}function Hi(e,t){return $i(2048,8,e,t)}function Vi(e,t){return $i(4,2,e,t)}function qi(e,t){return $i(4,4,e,t)}function Qi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Gi(e,t,n){return n=null!=n?n.concat([e]):null,$i(4,4,Qi.bind(null,t,e),n)}function Ki(){}function Ji(e,t){var n=Pi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ki(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Yi(e,t){var n=Pi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ki(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Xi(e,t,n){return 0==(21&hi)?(e.baseState&&(e.baseState=!1,wu=!0),e.memoizedState=n):(ur(n,t)||(n=mt(),mi.lanes|=n,Il|=n,e.baseState=!0),t)}function Zi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pi.transition;pi.transition={};try{e(!1),t()}finally{bt=n,pi.transition=r}}function eu(){return Pi().memoizedState}function tu(e,t,n){var r=nc(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},ru(e)?ou(t,n):null!==(n=_a(e,t,n,r))&&(rc(n,e,r,tc()),au(n,t,r))}function nu(e,t,n){var r=nc(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(ru(e))ou(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,u=a(i,n);if(o.hasEagerState=!0,o.eagerState=u,ur(u,i)){var l=t.interleaved;return null===l?(o.next=o,Ca(t)):(o.next=l.next,l.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=_a(e,t,o,r))&&(rc(n,e,r,o=tc()),au(n,t,r))}}function ru(e){var t=e.alternate;return e===mi||null!==t&&t===mi}function ou(e,t){bi=gi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function au(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var iu={readContext:Oa,useCallback:Si,useContext:Si,useEffect:Si,useImperativeHandle:Si,useInsertionEffect:Si,useLayoutEffect:Si,useMemo:Si,useReducer:Si,useRef:Si,useState:Si,useDebugValue:Si,useDeferredValue:Si,useTransition:Si,useMutableSource:Si,useSyncExternalStore:Si,useId:Si,unstable_isNewReconciler:!1},uu={readContext:Oa,useCallback:function(e,t){return Oi().memoizedState=[e,void 0===t?null:t],e},useContext:Oa,useEffect:Wi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ui(4194308,4,Qi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ui(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ui(4,2,e,t)},useMemo:function(e,t){var n=Oi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Oi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tu.bind(null,mi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Oi().memoizedState=e},useState:Mi,useDebugValue:Ki,useDeferredValue:function(e){return Oi().memoizedState=e},useTransition:function(){var e=Mi(!1),t=e[0];return e=Zi.bind(null,e[1]),Oi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=mi,o=Oi();if(aa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Al)throw Error(a(349));0!=(30&hi)||Ti(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Wi(zi.bind(null,r,i,e),[e]),r.flags|=2048,Fi(9,Ni.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=Oi(),t=Al.identifierPrefix;if(aa){var n=Xo;t=":"+t+"R"+(n=(Yo&~(1<<32-it(Yo)-1)).toString(32)+n),0<(n=wi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=xi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},lu={readContext:Oa,useCallback:Ji,useContext:Oa,useEffect:Hi,useImperativeHandle:Gi,useInsertionEffect:Vi,useLayoutEffect:qi,useMemo:Yi,useReducer:_i,useRef:Bi,useState:function(){return _i(Ci)},useDebugValue:Ki,useDeferredValue:function(e){return Xi(Pi(),vi.memoizedState,e)},useTransition:function(){return[_i(Ci)[0],Pi().memoizedState]},useMutableSource:Ri,useSyncExternalStore:Li,useId:eu,unstable_isNewReconciler:!1},cu={readContext:Oa,useCallback:Ji,useContext:Oa,useEffect:Hi,useImperativeHandle:Gi,useInsertionEffect:Vi,useLayoutEffect:qi,useMemo:Yi,useReducer:Ai,useRef:Bi,useState:function(){return Ai(Ci)},useDebugValue:Ki,useDeferredValue:function(e){var t=Pi();return null===vi?t.memoizedState=e:Xi(t,vi.memoizedState,e)},useTransition:function(){return[Ai(Ci)[0],Pi().memoizedState]},useMutableSource:Ri,useSyncExternalStore:Li,useId:eu,unstable_isNewReconciler:!1};function su(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function fu(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function du(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pu="function"==typeof WeakMap?WeakMap:Map;function hu(e,t,n){(n=Na(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Vl||(Vl=!0,ql=r),du(0,t)},n}function mu(e,t,n){(n=Na(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){du(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){du(0,t),"function"!=typeof r&&(null===Ql?Ql=new Set([this]):Ql.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function vu(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pu;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Oc.bind(null,e,t,n),t.then(e,e))}function yu(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gu(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Na(-1,1)).tag=2,za(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bu=w.ReactCurrentOwner,wu=!1;function xu(e,t,n,r){t.child=null===e?Xa(t,null,n,r):Ya(t,e.child,n,r)}function Su(e,t,n,r,o){n=n.render;var a=t.ref;return ja(t,o),r=Ei(e,t,n,r,a,o),n=ji(),null===e||wu?(aa&&n&&ta(t),t.flags|=1,xu(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Vu(e,t,o))}function ku(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Tc(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=zc(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Eu(e,t,a,r,o))}if(a=e.child,0==(e.lanes&o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(i,r)&&e.ref===t.ref)return Vu(e,t,o)}return t.flags|=1,(e=Nc(a,r)).ref=t.ref,e.return=t,t.child=e}function Eu(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(lr(a,r)&&e.ref===t.ref){if(wu=!1,t.pendingProps=r=a,0==(e.lanes&o))return t.lanes=e.lanes,Vu(e,t,o);0!=(131072&e.flags)&&(wu=!0)}}return Pu(e,t,n,r,o)}function ju(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Po(Nl,Tl),Tl|=n;else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Po(Nl,Tl),Tl|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,Po(Nl,Tl),Tl|=r}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,Po(Nl,Tl),Tl|=r;return xu(e,t,o,n),t.child}function Ou(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Pu(e,t,n,r,o){var a=To(n)?Ro:_o.current;return a=Lo(t,a),ja(t,o),n=Ei(e,t,n,r,a,o),r=ji(),null===e||wu?(aa&&r&&ta(t),t.flags|=1,xu(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Vu(e,t,o))}function Cu(e,t,n,r,o){if(To(n)){var a=!0;Io(t)}else a=!1;if(ja(t,o),null===t.stateNode)Hu(e,t),Ha(t,n,r),qa(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,u=t.memoizedProps;i.props=u;var l=i.context,c=n.contextType;c="object"==typeof c&&null!==c?Oa(c):Lo(t,c=To(n)?Ro:_o.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==r||l!==c)&&Va(t,i,r,c),Ra=!1;var d=t.memoizedState;i.state=d,Ma(t,r,i,o),l=t.memoizedState,u!==r||d!==l||Ao.current||Ra?("function"==typeof s&&(Ua(t,n,s,r),l=t.memoizedState),(u=Ra||Wa(t,n,u,r,d,l,c))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),i.props=r,i.state=l,i.context=c,r=u):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Ta(e,t),u=t.memoizedProps,c=t.type===t.elementType?u:ya(t.type,u),i.props=c,f=t.pendingProps,d=i.context,l="object"==typeof(l=n.contextType)&&null!==l?Oa(l):Lo(t,l=To(n)?Ro:_o.current);var p=n.getDerivedStateFromProps;(s="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==f||d!==l)&&Va(t,i,r,l),Ra=!1,d=t.memoizedState,i.state=d,Ma(t,r,i,o);var h=t.memoizedState;u!==f||d!==h||Ao.current||Ra?("function"==typeof p&&(Ua(t,n,p,r),h=t.memoizedState),(c=Ra||Wa(t,n,c,r,d,h,l)||!1)?(s||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=l,r=c):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return _u(e,t,n,r,a,o)}function _u(e,t,n,r,o,a){Ou(e,t);var i=0!=(128&t.flags);if(!r&&!i)return o&&Mo(t,n,!1),Vu(e,t,a);r=t.stateNode,bu.current=t;var u=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Ya(t,e.child,null,a),t.child=Ya(t,null,u,a)):xu(e,t,u,a),t.memoizedState=r.state,o&&Mo(t,n,!0),t.child}function Au(e){var t=e.stateNode;t.pendingContext?zo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&zo(0,t.context,!1),oi(e,t.containerInfo)}function Ru(e,t,n,r,o){return ha(),ma(o),t.flags|=256,xu(e,t,n,r),t.child}var Lu,Tu,Nu,zu,Du={dehydrated:null,treeContext:null,retryLane:0};function Iu(e){return{baseLanes:e,cachePool:null,transitions:null}}function Mu(e,t,n){var r,o=t.pendingProps,i=li.current,u=!1,l=0!=(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(u=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Po(li,1&i),null===e)return sa(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=o.children,e=o.fallback,u?(o=t.mode,u=t.child,l={mode:"hidden",children:l},0==(1&o)&&null!==u?(u.childLanes=0,u.pendingProps=l):u=Ic(l,o,0,null),e=Dc(e,o,n,null),u.return=t,e.return=t,u.sibling=e,t.child=u,t.child.memoizedState=Iu(n),t.memoizedState=Du,e):Fu(t,l));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,u){if(n)return 256&t.flags?(t.flags&=-257,Bu(e,t,u,r=fu(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Ic({mode:"visible",children:r.children},o,0,null),(i=Dc(i,o,u,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Ya(t,e.child,null,u),t.child.memoizedState=Iu(u),t.memoizedState=Du,i);if(0==(1&t.mode))return Bu(e,t,u,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var l=r.dgst;return r=l,Bu(e,t,u,r=fu(i=Error(a(419)),r,void 0))}if(l=0!=(u&e.childLanes),wu||l){if(null!==(r=Al)){switch(u&-u){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|u))?0:o)&&o!==i.retryLane&&(i.retryLane=o,Aa(e,o),rc(r,e,o,-1))}return vc(),Bu(e,t,u,r=fu(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Cc.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=co(o.nextSibling),ra=t,aa=!0,ia=null,null!==e&&(Go[Ko++]=Yo,Go[Ko++]=Xo,Go[Ko++]=Jo,Yo=e.id,Xo=e.overflow,Jo=t),(t=Fu(t,r.children)).flags|=4096,t)}(e,t,l,o,r,i,n);if(u){u=o.fallback,l=t.mode,r=(i=e.child).sibling;var c={mode:"hidden",children:o.children};return 0==(1&l)&&t.child!==i?((o=t.child).childLanes=0,o.pendingProps=c,t.deletions=null):(o=Nc(i,c)).subtreeFlags=14680064&i.subtreeFlags,null!==r?u=Nc(r,u):(u=Dc(u,l,n,null)).flags|=2,u.return=t,o.return=t,o.sibling=u,t.child=o,o=u,u=t.child,l=null===(l=e.child.memoizedState)?Iu(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},u.memoizedState=l,u.childLanes=e.childLanes&~n,t.memoizedState=Du,o}return e=(u=e.child).sibling,o=Nc(u,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Fu(e,t){return(t=Ic({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Bu(e,t,n,r){return null!==r&&ma(r),Ya(t,e.child,null,n),(e=Fu(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Uu(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ea(e.return,t,n)}function $u(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Wu(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(xu(e,t,r.children,n),0!=(2&(r=li.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Uu(e,n,t);else if(19===e.tag)Uu(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Po(li,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ci(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),$u(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ci(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}$u(t,!0,n,null,a);break;case"together":$u(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Hu(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Vu(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Il|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Nc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Nc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function qu(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Qu(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Gu(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Qu(t),null;case 1:case 17:return To(t.type)&&No(),Qu(t),null;case 3:return r=t.stateNode,ai(),Oo(Ao),Oo(_o),fi(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(da(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ia&&(uc(ia),ia=null))),Tu(e,t),Qu(t),null;case 5:ui(t);var o=ri(ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Nu(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Qu(t),null}if(e=ri(ei.current),da(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[po]=t,r[ho]=i,e=0!=(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(o=0;o<zr.length;o++)Fr(zr[o],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":J(r,i),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Fr("invalid",r);break;case"textarea":oe(r,i),Fr("invalid",r)}for(var l in ge(n,i),o=null,i)if(i.hasOwnProperty(l)){var c=i[l];"children"===l?"string"==typeof c?r.textContent!==c&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,c,e),o=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,c,e),o=["children",""+c]):u.hasOwnProperty(l)&&null!=c&&"onScroll"===l&&Fr("scroll",r)}switch(n){case"input":q(r),Z(r,i,!0);break;case"textarea":q(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Zr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ue(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[po]=t,e[ho]=r,Lu(e,t,!1,!1),t.stateNode=e;e:{switch(l=be(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),o=r;break;case"iframe":case"object":case"embed":Fr("load",e),o=r;break;case"video":case"audio":for(o=0;o<zr.length;o++)Fr(zr[o],e);o=r;break;case"source":Fr("error",e),o=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),o=r;break;case"details":Fr("toggle",e),o=r;break;case"input":J(e,r),o=K(e,r),Fr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=I({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Fr("invalid",e)}for(i in ge(n,o),c=o)if(c.hasOwnProperty(i)){var s=c[i];"style"===i?ve(e,s):"dangerouslySetInnerHTML"===i?null!=(s=s?s.__html:void 0)&&fe(e,s):"children"===i?"string"==typeof s?("textarea"!==n||""!==s)&&de(e,s):"number"==typeof s&&de(e,""+s):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(u.hasOwnProperty(i)?null!=s&&"onScroll"===i&&Fr("scroll",e):null!=s&&b(e,i,s,l))}switch(n){case"input":q(e),Z(e,r,!1);break;case"textarea":q(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+H(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Qu(t),null;case 6:if(e&&null!=t.stateNode)zu(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=ri(ni.current),ri(ei.current),da(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(i=r.nodeValue!==n)&&null!==(e=ra))switch(e.tag){case 3:Xr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Xr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Qu(t),null;case 13:if(Oo(li),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&0!=(1&t.mode)&&0==(128&t.flags))pa(),ha(),t.flags|=98560,i=!1;else if(i=da(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[po]=t}else ha(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Qu(t),i=!1}else null!==ia&&(uc(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&li.current)?0===zl&&(zl=3):vc())),null!==t.updateQueue&&(t.flags|=4),Qu(t),null);case 4:return ai(),Tu(e,t),null===e&&$r(t.stateNode.containerInfo),Qu(t),null;case 10:return ka(t.type._context),Qu(t),null;case 19:if(Oo(li),null===(i=t.memoizedState))return Qu(t),null;if(r=0!=(128&t.flags),null===(l=i.rendering))if(r)qu(i,!1);else{if(0!==zl||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(l=ci(e))){for(t.flags|=128,qu(i,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(l=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=l.childLanes,i.lanes=l.lanes,i.child=l.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=l.memoizedProps,i.memoizedState=l.memoizedState,i.updateQueue=l.updateQueue,i.type=l.type,e=l.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Po(li,1&li.current|2),t.child}e=e.sibling}null!==i.tail&&Ye()>Wl&&(t.flags|=128,r=!0,qu(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ci(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),qu(i,!0),null===i.tail&&"hidden"===i.tailMode&&!l.alternate&&!aa)return Qu(t),null}else 2*Ye()-i.renderingStartTime>Wl&&1073741824!==n&&(t.flags|=128,r=!0,qu(i,!1),t.lanes=4194304);i.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=i.last)?n.sibling=l:t.child=l,i.last=l)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Ye(),t.sibling=null,n=li.current,Po(li,r?1&n|2:1&n),t):(Qu(t),null);case 22:case 23:return dc(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Tl)&&(Qu(t),6&t.subtreeFlags&&(t.flags|=8192)):Qu(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Ku(e,t){switch(na(t),t.tag){case 1:return To(t.type)&&No(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ai(),Oo(Ao),Oo(_o),fi(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return ui(t),null;case 13:if(Oo(li),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ha()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Oo(li),null;case 4:return ai(),null;case 10:return ka(t.type._context),null;case 22:case 23:return dc(),null;default:return null}}Lu=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Tu=function(){},Nu=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ri(ei.current);var a,i=null;switch(n){case"input":o=K(e,o),r=K(e,r),i=[];break;case"select":o=I({},o,{value:void 0}),r=I({},r,{value:void 0}),i=[];break;case"textarea":o=re(e,o),r=re(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(s in ge(n,r),n=null,o)if(!r.hasOwnProperty(s)&&o.hasOwnProperty(s)&&null!=o[s])if("style"===s){var l=o[s];for(a in l)l.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(u.hasOwnProperty(s)?i||(i=[]):(i=i||[]).push(s,null));for(s in r){var c=r[s];if(l=null!=o?o[s]:void 0,r.hasOwnProperty(s)&&c!==l&&(null!=c||null!=l))if("style"===s)if(l){for(a in l)!l.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&l[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(i||(i=[]),i.push(s,n)),n=c;else"dangerouslySetInnerHTML"===s?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(i=i||[]).push(s,c)):"children"===s?"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(s,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(u.hasOwnProperty(s)?(null!=c&&"onScroll"===s&&Fr("scroll",e),i||l===c||(i=[])):(i=i||[]).push(s,c))}n&&(i=i||[]).push("style",n);var s=i;(t.updateQueue=s)&&(t.flags|=4)}},zu=function(e,t,n,r){n!==r&&(t.flags|=4)};var Ju=!1,Yu=!1,Xu="function"==typeof WeakSet?WeakSet:Set,Zu=null;function el(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){jc(e,t,n)}else n.current=null}function tl(e,t,n){try{n()}catch(n){jc(e,t,n)}}var nl=!1;function rl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&tl(t,n,a)}o=o.next}while(o!==r)}}function ol(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function al(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function il(e){var t=e.alternate;null!==t&&(e.alternate=null,il(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[vo],delete t[yo],delete t[go]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ul(e){return 5===e.tag||3===e.tag||4===e.tag}function ll(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ul(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function cl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(cl(e,t,n),e=e.sibling;null!==e;)cl(e,t,n),e=e.sibling}function sl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(sl(e,t,n),e=e.sibling;null!==e;)sl(e,t,n),e=e.sibling}var fl=null,dl=!1;function pl(e,t,n){for(n=n.child;null!==n;)hl(e,t,n),n=n.sibling}function hl(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Yu||el(n,t);case 6:var r=fl,o=dl;fl=null,pl(e,t,n),dl=o,null!==(fl=r)&&(dl?(e=fl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):fl.removeChild(n.stateNode));break;case 18:null!==fl&&(dl?(e=fl,n=n.stateNode,8===e.nodeType?lo(e.parentNode,n):1===e.nodeType&&lo(e,n),$t(e)):lo(fl,n.stateNode));break;case 4:r=fl,o=dl,fl=n.stateNode.containerInfo,dl=!0,pl(e,t,n),fl=r,dl=o;break;case 0:case 11:case 14:case 15:if(!Yu&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(0!=(2&a)||0!=(4&a))&&tl(n,t,i),o=o.next}while(o!==r)}pl(e,t,n);break;case 1:if(!Yu&&(el(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){jc(n,t,e)}pl(e,t,n);break;case 21:pl(e,t,n);break;case 22:1&n.mode?(Yu=(r=Yu)||null!==n.memoizedState,pl(e,t,n),Yu=r):pl(e,t,n);break;default:pl(e,t,n)}}function ml(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xu),t.forEach((function(t){var r=_c.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function vl(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,u=t,l=u;e:for(;null!==l;){switch(l.tag){case 5:fl=l.stateNode,dl=!1;break e;case 3:case 4:fl=l.stateNode.containerInfo,dl=!0;break e}l=l.return}if(null===fl)throw Error(a(160));hl(i,u,o),fl=null,dl=!1;var c=o.alternate;null!==c&&(c.return=null),o.return=null}catch(e){jc(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)yl(t,e),t=t.sibling}function yl(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(vl(t,e),gl(e),4&r){try{rl(3,e,e.return),ol(3,e)}catch(t){jc(e,e.return,t)}try{rl(5,e,e.return)}catch(t){jc(e,e.return,t)}}break;case 1:vl(t,e),gl(e),512&r&&null!==n&&el(n,n.return);break;case 5:if(vl(t,e),gl(e),512&r&&null!==n&&el(n,n.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(t){jc(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,u=null!==n?n.memoizedProps:i,l=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===l&&"radio"===i.type&&null!=i.name&&Y(o,i),be(l,u);var s=be(l,i);for(u=0;u<c.length;u+=2){var f=c[u],d=c[u+1];"style"===f?ve(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):b(o,f,d,s)}switch(l){case"input":X(o,i);break;case"textarea":ae(o,i);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(o,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(o,!!i.multiple,i.defaultValue,!0):ne(o,!!i.multiple,i.multiple?[]:"",!1))}o[ho]=i}catch(t){jc(e,e.return,t)}}break;case 6:if(vl(t,e),gl(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){jc(e,e.return,t)}}break;case 3:if(vl(t,e),gl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{$t(t.containerInfo)}catch(t){jc(e,e.return,t)}break;case 4:default:vl(t,e),gl(e);break;case 13:vl(t,e),gl(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||($l=Ye())),4&r&&ml(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Yu=(s=Yu)||f,vl(t,e),Yu=s):vl(t,e),gl(e),8192&r){if(s=null!==e.memoizedState,(e.stateNode.isHidden=s)&&!f&&0!=(1&e.mode))for(Zu=e,f=e.child;null!==f;){for(d=Zu=f;null!==Zu;){switch(h=(p=Zu).child,p.tag){case 0:case 11:case 14:case 15:rl(4,p,p.return);break;case 1:el(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){jc(r,n,e)}}break;case 5:el(p,p.return);break;case 22:if(null!==p.memoizedState){Sl(d);continue}}null!==h?(h.return=p,Zu=h):Sl(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,s?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(l=d.stateNode,u=null!=(c=d.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,l.style.display=me("display",u))}catch(t){jc(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=s?"":d.memoizedProps}catch(t){jc(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:vl(t,e),gl(e),4&r&&ml(e);case 21:}}function gl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ul(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),sl(e,ll(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;cl(e,ll(e),i);break;default:throw Error(a(161))}}catch(t){jc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bl(e,t,n){Zu=e,wl(e,t,n)}function wl(e,t,n){for(var r=0!=(1&e.mode);null!==Zu;){var o=Zu,a=o.child;if(22===o.tag&&r){var i=null!==o.memoizedState||Ju;if(!i){var u=o.alternate,l=null!==u&&null!==u.memoizedState||Yu;u=Ju;var c=Yu;if(Ju=i,(Yu=l)&&!c)for(Zu=o;null!==Zu;)l=(i=Zu).child,22===i.tag&&null!==i.memoizedState?kl(o):null!==l?(l.return=i,Zu=l):kl(o);for(;null!==a;)Zu=a,wl(a,t,n),a=a.sibling;Zu=o,Ju=u,Yu=c}xl(e)}else 0!=(8772&o.subtreeFlags)&&null!==a?(a.return=o,Zu=a):xl(e)}}function xl(e){for(;null!==Zu;){var t=Zu;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Yu||ol(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Yu)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:ya(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Fa(t,i,r);break;case 3:var u=t.updateQueue;if(null!==u){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Fa(t,u,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var s=t.alternate;if(null!==s){var f=s.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&$t(d)}}}break;default:throw Error(a(163))}Yu||512&t.flags&&al(t)}catch(e){jc(t,t.return,e)}}if(t===e){Zu=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zu=n;break}Zu=t.return}}function Sl(e){for(;null!==Zu;){var t=Zu;if(t===e){Zu=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zu=n;break}Zu=t.return}}function kl(e){for(;null!==Zu;){var t=Zu;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ol(4,t)}catch(e){jc(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){jc(t,o,e)}}var a=t.return;try{al(t)}catch(e){jc(t,a,e)}break;case 5:var i=t.return;try{al(t)}catch(e){jc(t,i,e)}}}catch(e){jc(t,t.return,e)}if(t===e){Zu=null;break}var u=t.sibling;if(null!==u){u.return=t.return,Zu=u;break}Zu=t.return}}var El,jl=Math.ceil,Ol=w.ReactCurrentDispatcher,Pl=w.ReactCurrentOwner,Cl=w.ReactCurrentBatchConfig,_l=0,Al=null,Rl=null,Ll=0,Tl=0,Nl=jo(0),zl=0,Dl=null,Il=0,Ml=0,Fl=0,Bl=null,Ul=null,$l=0,Wl=1/0,Hl=null,Vl=!1,ql=null,Ql=null,Gl=!1,Kl=null,Jl=0,Yl=0,Xl=null,Zl=-1,ec=0;function tc(){return 0!=(6&_l)?Ye():-1!==Zl?Zl:Zl=Ye()}function nc(e){return 0==(1&e.mode)?1:0!=(2&_l)&&0!==Ll?Ll&-Ll:null!==va.transition?(0===ec&&(ec=mt()),ec):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Jt(e.type)}function rc(e,t,n,r){if(50<Yl)throw Yl=0,Xl=null,Error(a(185));yt(e,n,r),0!=(2&_l)&&e===Al||(e===Al&&(0==(2&_l)&&(Ml|=n),4===zl&&lc(e,Ll)),oc(e,r),1===n&&0===_l&&0==(1&t.mode)&&(Wl=Ye()+500,Bo&&Wo()))}function oc(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),u=1<<i,l=o[i];-1===l?0!=(u&n)&&0==(u&r)||(o[i]=pt(u,t)):l<=t&&(e.expiredLanes|=u),a&=~u}}(e,t);var r=dt(e,e===Al?Ll:0);if(0===r)null!==n&&Ge(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ge(n),1===t)0===e.tag?function(e){Bo=!0,$o(e)}(cc.bind(null,e)):$o(cc.bind(null,e)),io((function(){0==(6&_l)&&Wo()})),n=null;else{switch(wt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ac(n,ac.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ac(e,t){if(Zl=-1,ec=0,0!=(6&_l))throw Error(a(327));var n=e.callbackNode;if(kc()&&e.callbackNode!==n)return null;var r=dt(e,e===Al?Ll:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=yc(e,r);else{t=r;var o=_l;_l|=2;var i=mc();for(Al===e&&Ll===t||(Hl=null,Wl=Ye()+500,pc(e,t));;)try{bc();break}catch(t){hc(e,t)}Sa(),Ol.current=i,_l=o,null!==Rl?t=0:(Al=null,Ll=0,t=zl)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=ic(e,o)),1===t)throw n=Dl,pc(e,0),lc(e,r),oc(e,Ye()),n;if(6===t)lc(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!ur(a(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=yc(e,r))&&0!==(i=ht(e))&&(r=i,t=ic(e,i)),1===t))throw n=Dl,pc(e,0),lc(e,r),oc(e,Ye()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:Sc(e,Ul,Hl);break;case 3:if(lc(e,r),(130023424&r)===r&&10<(t=$l+500-Ye())){if(0!==dt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){tc(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(Sc.bind(null,e,Ul,Hl),t);break}Sc(e,Ul,Hl);break;case 4:if(lc(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var u=31-it(r);i=1<<u,(u=t[u])>o&&(o=u),r&=~i}if(r=o,10<(r=(120>(r=Ye()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*jl(r/1960))-r)){e.timeoutHandle=ro(Sc.bind(null,e,Ul,Hl),r);break}Sc(e,Ul,Hl);break;default:throw Error(a(329))}}}return oc(e,Ye()),e.callbackNode===n?ac.bind(null,e):null}function ic(e,t){var n=Bl;return e.current.memoizedState.isDehydrated&&(pc(e,t).flags|=256),2!==(e=yc(e,t))&&(t=Ul,Ul=n,null!==t&&uc(t)),e}function uc(e){null===Ul?Ul=e:Ul.push.apply(Ul,e)}function lc(e,t){for(t&=~Fl,t&=~Ml,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function cc(e){if(0!=(6&_l))throw Error(a(327));kc();var t=dt(e,0);if(0==(1&t))return oc(e,Ye()),null;var n=yc(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=ic(e,r))}if(1===n)throw n=Dl,pc(e,0),lc(e,t),oc(e,Ye()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Sc(e,Ul,Hl),oc(e,Ye()),null}function sc(e,t){var n=_l;_l|=1;try{return e(t)}finally{0===(_l=n)&&(Wl=Ye()+500,Bo&&Wo())}}function fc(e){null!==Kl&&0===Kl.tag&&0==(6&_l)&&kc();var t=_l;_l|=1;var n=Cl.transition,r=bt;try{if(Cl.transition=null,bt=1,e)return e()}finally{bt=r,Cl.transition=n,0==(6&(_l=t))&&Wo()}}function dc(){Tl=Nl.current,Oo(Nl)}function pc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Rl)for(n=Rl.return;null!==n;){var r=n;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&No();break;case 3:ai(),Oo(Ao),Oo(_o),fi();break;case 5:ui(r);break;case 4:ai();break;case 13:case 19:Oo(li);break;case 10:ka(r.type._context);break;case 22:case 23:dc()}n=n.return}if(Al=e,Rl=e=Nc(e.current,null),Ll=Tl=t,zl=0,Dl=null,Fl=Ml=Il=0,Ul=Bl=null,null!==Pa){for(t=0;t<Pa.length;t++)if(null!==(r=(n=Pa[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var i=a.next;a.next=o,r.next=i}n.pending=r}Pa=null}return e}function hc(e,t){for(;;){var n=Rl;try{if(Sa(),di.current=iu,gi){for(var r=mi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}gi=!1}if(hi=0,yi=vi=mi=null,bi=!1,wi=0,Pl.current=null,null===n||null===n.return){zl=1,Dl=t,Rl=null;break}e:{var i=e,u=n.return,l=n,c=t;if(t=Ll,l.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var s=c,f=l,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=yu(u);if(null!==h){h.flags&=-257,gu(h,u,l,0,t),1&h.mode&&vu(i,s,t),c=s;var m=(t=h).updateQueue;if(null===m){var v=new Set;v.add(c),t.updateQueue=v}else m.add(c);break e}if(0==(1&t)){vu(i,s,t),vc();break e}c=Error(a(426))}else if(aa&&1&l.mode){var y=yu(u);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),gu(y,u,l,0,t),ma(su(c,l));break e}}i=c=su(c,l),4!==zl&&(zl=2),null===Bl?Bl=[i]:Bl.push(i),i=u;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Ia(i,hu(0,c,t));break e;case 1:l=c;var g=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof g.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Ql||!Ql.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Ia(i,mu(i,l,t));break e}}i=i.return}while(null!==i)}xc(n)}catch(e){t=e,Rl===n&&null!==n&&(Rl=n=n.return);continue}break}}function mc(){var e=Ol.current;return Ol.current=iu,null===e?iu:e}function vc(){0!==zl&&3!==zl&&2!==zl||(zl=4),null===Al||0==(268435455&Il)&&0==(268435455&Ml)||lc(Al,Ll)}function yc(e,t){var n=_l;_l|=2;var r=mc();for(Al===e&&Ll===t||(Hl=null,pc(e,t));;)try{gc();break}catch(t){hc(e,t)}if(Sa(),_l=n,Ol.current=r,null!==Rl)throw Error(a(261));return Al=null,Ll=0,zl}function gc(){for(;null!==Rl;)wc(Rl)}function bc(){for(;null!==Rl&&!Ke();)wc(Rl)}function wc(e){var t=El(e.alternate,e,Tl);e.memoizedProps=e.pendingProps,null===t?xc(e):Rl=t,Pl.current=null}function xc(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Gu(n,t,Tl)))return void(Rl=n)}else{if(null!==(n=Ku(n,t)))return n.flags&=32767,void(Rl=n);if(null===e)return zl=6,void(Rl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Rl=t);Rl=t=e}while(null!==t);0===zl&&(zl=5)}function Sc(e,t,n){var r=bt,o=Cl.transition;try{Cl.transition=null,bt=1,function(e,t,n,r){do{kc()}while(null!==Kl);if(0!=(6&_l))throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-it(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,i),e===Al&&(Rl=Al=null,Ll=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Gl||(Gl=!0,Ac(tt,(function(){return kc(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Cl.transition,Cl.transition=null;var u=bt;bt=1;var l=_l;_l|=4,Pl.current=null,function(e,t){if(eo=Ht,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var u=0,l=-1,c=-1,s=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(l=u+o),d!==i||0!==r&&3!==d.nodeType||(c=u+r),3===d.nodeType&&(u+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++s===o&&(l=u),p===i&&++f===r&&(c=u),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===l||-1===c?null:{start:l,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Ht=!1,Zu=t;null!==Zu;)if(e=(t=Zu).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Zu=e;else for(;null!==Zu;){t=Zu;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var v=m.memoizedProps,y=m.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?v:ya(t.type,v),y);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(a(163))}}catch(e){jc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zu=e;break}Zu=t.return}m=nl,nl=!1}(e,n),yl(n,e),hr(to),Ht=!!eo,to=eo=null,e.current=n,bl(n,e,o),Je(),_l=l,bt=u,Cl.transition=i}else e.current=n;if(Gl&&(Gl=!1,Kl=e,Jl=o),0===(i=e.pendingLanes)&&(Ql=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),oc(e,Ye()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Vl)throw Vl=!1,e=ql,ql=null,e;0!=(1&Jl)&&0!==e.tag&&kc(),0!=(1&(i=e.pendingLanes))?e===Xl?Yl++:(Yl=0,Xl=e):Yl=0,Wo()}(e,t,n,r)}finally{Cl.transition=o,bt=r}return null}function kc(){if(null!==Kl){var e=wt(Jl),t=Cl.transition,n=bt;try{if(Cl.transition=null,bt=16>e?16:e,null===Kl)var r=!1;else{if(e=Kl,Kl=null,Jl=0,0!=(6&_l))throw Error(a(331));var o=_l;for(_l|=4,Zu=e.current;null!==Zu;){var i=Zu,u=i.child;if(0!=(16&Zu.flags)){var l=i.deletions;if(null!==l){for(var c=0;c<l.length;c++){var s=l[c];for(Zu=s;null!==Zu;){var f=Zu;switch(f.tag){case 0:case 11:case 15:rl(8,f,i)}var d=f.child;if(null!==d)d.return=f,Zu=d;else for(;null!==Zu;){var p=(f=Zu).sibling,h=f.return;if(il(f),f===s){Zu=null;break}if(null!==p){p.return=h,Zu=p;break}Zu=h}}}var m=i.alternate;if(null!==m){var v=m.child;if(null!==v){m.child=null;do{var y=v.sibling;v.sibling=null,v=y}while(null!==v)}}Zu=i}}if(0!=(2064&i.subtreeFlags)&&null!==u)u.return=i,Zu=u;else e:for(;null!==Zu;){if(0!=(2048&(i=Zu).flags))switch(i.tag){case 0:case 11:case 15:rl(9,i,i.return)}var g=i.sibling;if(null!==g){g.return=i.return,Zu=g;break e}Zu=i.return}}var b=e.current;for(Zu=b;null!==Zu;){var w=(u=Zu).child;if(0!=(2064&u.subtreeFlags)&&null!==w)w.return=u,Zu=w;else e:for(u=b;null!==Zu;){if(0!=(2048&(l=Zu).flags))try{switch(l.tag){case 0:case 11:case 15:ol(9,l)}}catch(e){jc(l,l.return,e)}if(l===u){Zu=null;break e}var x=l.sibling;if(null!==x){x.return=l.return,Zu=x;break e}Zu=l.return}}if(_l=o,Wo(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Cl.transition=t}}return!1}function Ec(e,t,n){e=za(e,t=hu(0,t=su(n,t),1),1),t=tc(),null!==e&&(yt(e,1,t),oc(e,t))}function jc(e,t,n){if(3===e.tag)Ec(e,e,n);else for(;null!==t;){if(3===t.tag){Ec(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ql||!Ql.has(r))){t=za(t,e=mu(t,e=su(n,e),1),1),e=tc(),null!==t&&(yt(t,1,e),oc(t,e));break}}t=t.return}}function Oc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tc(),e.pingedLanes|=e.suspendedLanes&n,Al===e&&(Ll&n)===n&&(4===zl||3===zl&&(130023424&Ll)===Ll&&500>Ye()-$l?pc(e,0):Fl|=n),oc(e,t)}function Pc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=st,0==(130023424&(st<<=1))&&(st=4194304)));var n=tc();null!==(e=Aa(e,t))&&(yt(e,t,n),oc(e,n))}function Cc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Pc(e,n)}function _c(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Pc(e,n)}function Ac(e,t){return Qe(e,t)}function Rc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Lc(e,t,n,r){return new Rc(e,t,n,r)}function Tc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Nc(e,t){var n=e.alternate;return null===n?((n=Lc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function zc(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)Tc(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case k:return Dc(n.children,o,i,t);case E:u=8,o|=8;break;case j:return(e=Lc(12,n,t,2|o)).elementType=j,e.lanes=i,e;case _:return(e=Lc(13,n,t,o)).elementType=_,e.lanes=i,e;case A:return(e=Lc(19,n,t,o)).elementType=A,e.lanes=i,e;case T:return Ic(n,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case O:u=10;break e;case P:u=9;break e;case C:u=11;break e;case R:u=14;break e;case L:u=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Lc(u,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Dc(e,t,n,r){return(e=Lc(7,e,r,t)).lanes=n,e}function Ic(e,t,n,r){return(e=Lc(22,e,r,t)).elementType=T,e.lanes=n,e.stateNode={isHidden:!1},e}function Mc(e,t,n){return(e=Lc(6,e,null,t)).lanes=n,e}function Fc(e,t,n){return(t=Lc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Bc(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Uc(e,t,n,r,o,a,i,u,l){return e=new Bc(e,t,n,u,l),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Lc(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},La(a),e}function $c(e){if(!e)return Co;e:{if($e(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(To(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(To(n))return Do(e,n,t)}return t}function Wc(e,t,n,r,o,a,i,u,l){return(e=Uc(n,r,!0,e,0,a,0,u,l)).context=$c(null),n=e.current,(a=Na(r=tc(),o=nc(n))).callback=null!=t?t:null,za(n,a,o),e.current.lanes=o,yt(e,o,r),oc(e,r),e}function Hc(e,t,n,r){var o=t.current,a=tc(),i=nc(o);return n=$c(n),null===t.context?t.context=n:t.pendingContext=n,(t=Na(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=za(o,t,i))&&(rc(e,o,i,a),Da(e,o,i)),i}function Vc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function qc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Qc(e,t){qc(e,t),(e=e.alternate)&&qc(e,t)}El=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ao.current)wu=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wu=!1,function(e,t,n){switch(t.tag){case 3:Au(t),ha();break;case 5:ii(t);break;case 1:To(t.type)&&Io(t);break;case 4:oi(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Po(ga,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Po(li,1&li.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Mu(e,t,n):(Po(li,1&li.current),null!==(e=Vu(e,t,n))?e.sibling:null);Po(li,1&li.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Wu(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Po(li,li.current),r)break;return null;case 22:case 23:return t.lanes=0,ju(e,t,n)}return Vu(e,t,n)}(e,t,n);wu=0!=(131072&e.flags)}else wu=!1,aa&&0!=(1048576&t.flags)&&ea(t,Qo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Hu(e,t),e=t.pendingProps;var o=Lo(t,_o.current);ja(t,n),o=Ei(null,t,r,e,o,n);var i=ji();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,To(r)?(i=!0,Io(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,La(t),o.updater=$a,t.stateNode=o,o._reactInternals=t,qa(t,r,e,n),t=_u(null,t,r,!0,i,n)):(t.tag=0,aa&&i&&ta(t),xu(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Hu(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Tc(e)?1:0;if(null!=e){if((e=e.$$typeof)===C)return 11;if(e===R)return 14}return 2}(r),e=ya(r,e),o){case 0:t=Pu(null,t,r,e,n);break e;case 1:t=Cu(null,t,r,e,n);break e;case 11:t=Su(null,t,r,e,n);break e;case 14:t=ku(null,t,r,ya(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Pu(e,t,r,o=t.elementType===r?o:ya(r,o),n);case 1:return r=t.type,o=t.pendingProps,Cu(e,t,r,o=t.elementType===r?o:ya(r,o),n);case 3:e:{if(Au(t),null===e)throw Error(a(387));r=t.pendingProps,o=(i=t.memoizedState).element,Ta(e,t),Ma(t,r,null,n);var u=t.memoizedState;if(r=u.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:u.cache,pendingSuspenseBoundaries:u.pendingSuspenseBoundaries,transitions:u.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Ru(e,t,r,n,o=su(Error(a(423)),t));break e}if(r!==o){t=Ru(e,t,r,n,o=su(Error(a(424)),t));break e}for(oa=co(t.stateNode.containerInfo.firstChild),ra=t,aa=!0,ia=null,n=Xa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ha(),r===o){t=Vu(e,t,n);break e}xu(e,t,r,n)}t=t.child}return t;case 5:return ii(t),null===e&&sa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,no(r,o)?u=null:null!==i&&no(r,i)&&(t.flags|=32),Ou(e,t),xu(e,t,u,n),t.child;case 6:return null===e&&sa(t),null;case 13:return Mu(e,t,n);case 4:return oi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ya(t,null,r,n):xu(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Su(e,t,r,o=t.elementType===r?o:ya(r,o),n);case 7:return xu(e,t,t.pendingProps,n),t.child;case 8:case 12:return xu(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,u=o.value,Po(ga,r._currentValue),r._currentValue=u,null!==i)if(ur(i.value,u)){if(i.children===o.children&&!Ao.current){t=Vu(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var l=i.dependencies;if(null!==l){u=i.child;for(var c=l.firstContext;null!==c;){if(c.context===r){if(1===i.tag){(c=Na(-1,n&-n)).tag=2;var s=i.updateQueue;if(null!==s){var f=(s=s.shared).pending;null===f?c.next=c:(c.next=f.next,f.next=c),s.pending=c}}i.lanes|=n,null!==(c=i.alternate)&&(c.lanes|=n),Ea(i.return,n,t),l.lanes|=n;break}c=c.next}}else if(10===i.tag)u=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(u=i.return))throw Error(a(341));u.lanes|=n,null!==(l=u.alternate)&&(l.lanes|=n),Ea(u,n,t),u=i.sibling}else u=i.child;if(null!==u)u.return=i;else for(u=i;null!==u;){if(u===t){u=null;break}if(null!==(i=u.sibling)){i.return=u.return,u=i;break}u=u.return}i=u}xu(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,ja(t,n),r=r(o=Oa(o)),t.flags|=1,xu(e,t,r,n),t.child;case 14:return o=ya(r=t.type,t.pendingProps),ku(e,t,r,o=ya(r.type,o),n);case 15:return Eu(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ya(r,o),Hu(e,t),t.tag=1,To(r)?(e=!0,Io(t)):e=!1,ja(t,n),Ha(t,r,o),qa(t,r,o,n),_u(null,t,r,!0,e,n);case 19:return Wu(e,t,n);case 22:return ju(e,t,n)}throw Error(a(156,t.tag))};var Gc="function"==typeof reportError?reportError:function(e){console.error(e)};function Kc(e){this._internalRoot=e}function Jc(e){this._internalRoot=e}function Yc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zc(){}function es(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a;if("function"==typeof o){var u=o;o=function(){var e=Vc(i);u.call(e)}}Hc(t,i,e,o)}else i=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=Vc(i);a.call(e)}}var i=Wc(t,r,e,0,null,!1,0,"",Zc);return e._reactRootContainer=i,e[mo]=i.current,$r(8===e.nodeType?e.parentNode:e),fc(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var u=r;r=function(){var e=Vc(l);u.call(e)}}var l=Uc(e,0,!1,null,0,!1,0,"",Zc);return e._reactRootContainer=l,e[mo]=l.current,$r(8===e.nodeType?e.parentNode:e),fc((function(){Hc(t,l,n,r)})),l}(n,t,e,o,r);return Vc(i)}Jc.prototype.render=Kc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Hc(e,t,null,null)},Jc.prototype.unmount=Kc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;fc((function(){Hc(null,e,null,null)})),t[mo]=null}},Jc.prototype.unstable_scheduleHydration=function(e){if(e){var t=Et();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Tt.length&&0!==t&&t<Tt[n].priority;n++);Tt.splice(n,0,e),0===n&&It(e)}},xt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),oc(t,Ye()),0==(6&_l)&&(Wl=Ye()+500,Wo()))}break;case 13:fc((function(){var t=Aa(e,1);if(null!==t){var n=tc();rc(t,e,1,n)}})),Qc(e,1)}},St=function(e){if(13===e.tag){var t=Aa(e,134217728);null!==t&&rc(t,e,134217728,tc()),Qc(e,134217728)}},kt=function(e){if(13===e.tag){var t=nc(e),n=Aa(e,t);null!==n&&rc(n,e,t,tc()),Qc(e,t)}},Et=function(){return bt},jt=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Se=function(e,t,n){switch(t){case"input":if(X(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=So(r);if(!o)throw Error(a(90));Q(r),X(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Ce=sc,_e=fc;var ts={usingClientEntryPoint:!1,Events:[wo,xo,So,Oe,Pe,sc]},ns={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rs={bundleType:ns.bundleType,version:ns.version,rendererPackageName:ns.rendererPackageName,rendererConfig:ns.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ve(e))?null:e.stateNode},findFiberByHostInstance:ns.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var os=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!os.isDisabled&&os.supportsFiber)try{ot=os.inject(rs),at=os}catch(se){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ts,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Yc(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Yc(e))throw Error(a(299));var n=!1,r="",o=Gc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Uc(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,$r(8===e.nodeType?e.parentNode:e),new Kc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=Ve(t))?null:e.stateNode},t.flushSync=function(e){return fc(e)},t.hydrate=function(e,t,n){if(!Xc(t))throw Error(a(200));return es(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Yc(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",u=Gc;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(u=n.onRecoverableError)),t=Wc(t,null,e,1,null!=n?n:null,o,0,i,u),e[mo]=t.current,$r(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Jc(t)},t.render=function(e,t,n){if(!Xc(t))throw Error(a(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xc(e))throw Error(a(40));return!!e._reactRootContainer&&(fc((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=sc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xc(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return es(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:function(e,t,n){"use strict";var r=n(3935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},3935:function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:function(e,t){"use strict";var n,r=Symbol.for("react.element"),o=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),u=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),c=Symbol.for("react.context"),s=Symbol.for("react.server_context"),f=Symbol.for("react.forward_ref"),d=Symbol.for("react.suspense"),p=Symbol.for("react.suspense_list"),h=Symbol.for("react.memo"),m=Symbol.for("react.lazy"),v=Symbol.for("react.offscreen");function y(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case a:case u:case i:case d:case p:return e;default:switch(e=e&&e.$$typeof){case s:case c:case f:case m:case h:case l:return e;default:return t}}case o:return t}}}n=Symbol.for("react.module.reference"),t.isContextConsumer=function(e){return y(e)===c},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===u||e===i||e===d||e===p||e===v||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===h||e.$$typeof===l||e.$$typeof===c||e.$$typeof===f||e.$$typeof===n||void 0!==e.getModuleId)},t.typeOf=y},9864:function(e,t,n){"use strict";e.exports=n(9921)},6113:function(e,t,n){"use strict";n.r(t),n.d(t,{Provider:function(){return F},ReactReduxContext:function(){return c},batch:function(){return a.unstable_batchedUpdates},connect:function(){return M},createDispatchHook:function(){return $},createSelectorHook:function(){return h},createStoreHook:function(){return B},shallowEqual:function(){return L},useDispatch:function(){return W},useSelector:function(){return m},useStore:function(){return U}});var r=n(1688),o=n(2798),a=n(3935);let i=function(e){e()};const u=()=>i;var l=n(7294);const c=(0,l.createContext)(null);function s(){return(0,l.useContext)(c)}const f=()=>{throw new Error("uSES not initialized!")};let d=f;const p=(e,t)=>e===t;function h(e=c){const t=e===c?s:()=>(0,l.useContext)(e);return function(e,n=p){const{store:r,subscription:o,getServerState:a}=t(),i=d(o.addNestedSub,r.getState,a||r.getState,e,n);return(0,l.useDebugValue)(i),i}}const m=h();function v(){return v=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},v.apply(this,arguments)}function y(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var g=n(8679),b=n.n(g),w=n(9864);const x=["initMapStateToProps","initMapDispatchToProps","initMergeProps"];function S(e,t,n,r,{areStatesEqual:o,areOwnPropsEqual:a,areStatePropsEqual:i}){let u,l,c,s,f,d=!1;return function(p,h){return d?function(d,p){const h=!a(p,l),m=!o(d,u,p,l);return u=d,l=p,h&&m?(c=e(u,l),t.dependsOnOwnProps&&(s=t(r,l)),f=n(c,s,l),f):h?(e.dependsOnOwnProps&&(c=e(u,l)),t.dependsOnOwnProps&&(s=t(r,l)),f=n(c,s,l),f):m?function(){const t=e(u,l),r=!i(t,c);return c=t,r&&(f=n(c,s,l)),f}():f}(p,h):(u=p,l=h,c=e(u,l),s=t(r,l),f=n(c,s,l),d=!0,f)}}function k(e){return function(t){const n=e(t);function r(){return n}return r.dependsOnOwnProps=!1,r}}function E(e){return e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function j(e,t){return function(t,{displayName:n}){const r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e,void 0)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=E(e);let o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=E(o),o=r(t,n)),o},r}}function O(e,t){return(n,r)=>{throw new Error(`Invalid value of type ${typeof e} for ${t} argument when connecting component ${r.wrappedComponentName}.`)}}function P(e,t,n){return v({},n,e,t)}const C={notify(){},get:()=>[]};function _(e,t){let n,r=C;function o(){i.onStateChange&&i.onStateChange()}function a(){n||(n=t?t.addNestedSub(o):e.subscribe(o),r=function(){const e=u();let t=null,n=null;return{clear(){t=null,n=null},notify(){e((()=>{let e=t;for(;e;)e.callback(),e=e.next}))},get(){let e=[],n=t;for(;n;)e.push(n),n=n.next;return e},subscribe(e){let r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())}const i={addNestedSub:function(e){return a(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:o,isSubscribed:function(){return Boolean(n)},trySubscribe:a,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=C)},getListeners:()=>r};return i}const A="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?l.useLayoutEffect:l.useEffect;function R(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function L(e,t){if(R(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;const n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(let r=0;r<n.length;r++)if(!Object.prototype.hasOwnProperty.call(t,n[r])||!R(e[n[r]],t[n[r]]))return!1;return!0}const T=["reactReduxForwardedRef"];let N=f;const z=[null,null];function D(e,t,n,r,o,a){e.current=r,n.current=!1,o.current&&(o.current=null,a())}function I(e,t){return e===t}var M=function(e,t,n,{pure:r,areStatesEqual:o=I,areOwnPropsEqual:a=L,areStatePropsEqual:i=L,areMergedPropsEqual:u=L,forwardRef:s=!1,context:f=c}={}){const d=f,p=function(e){return e?"function"==typeof e?j(e):O(e,"mapStateToProps"):k((()=>({})))}(e),h=function(e){return e&&"object"==typeof e?k((t=>function(e,t){const n={};for(const r in e){const o=e[r];"function"==typeof o&&(n[r]=(...e)=>t(o(...e)))}return n}(e,t))):e?"function"==typeof e?j(e):O(e,"mapDispatchToProps"):k((e=>({dispatch:e})))}(t),m=function(e){return e?"function"==typeof e?function(e){return function(t,{displayName:n,areMergedPropsEqual:r}){let o,a=!1;return function(t,n,i){const u=e(t,n,i);return a?r(u,o)||(o=u):(a=!0,o=u),o}}}(e):O(e,"mergeProps"):()=>P}(n),g=Boolean(e);return e=>{const t=e.displayName||e.name||"Component",n=`Connect(${t})`,r={shouldHandleStateChanges:g,displayName:n,wrappedComponentName:t,WrappedComponent:e,initMapStateToProps:p,initMapDispatchToProps:h,initMergeProps:m,areStatesEqual:o,areStatePropsEqual:i,areOwnPropsEqual:a,areMergedPropsEqual:u};function c(t){const[n,o,a]=(0,l.useMemo)((()=>{const{reactReduxForwardedRef:e}=t,n=y(t,T);return[t.context,e,n]}),[t]),i=(0,l.useMemo)((()=>n&&n.Consumer&&(0,w.isContextConsumer)(l.createElement(n.Consumer,null))?n:d),[n,d]),u=(0,l.useContext)(i),c=Boolean(t.store)&&Boolean(t.store.getState)&&Boolean(t.store.dispatch),s=Boolean(u)&&Boolean(u.store),f=c?t.store:u.store,p=s?u.getServerState:f.getState,h=(0,l.useMemo)((()=>function(e,t){let{initMapStateToProps:n,initMapDispatchToProps:r,initMergeProps:o}=t,a=y(t,x);return S(n(e,a),r(e,a),o(e,a),e,a)}(f.dispatch,r)),[f]),[m,b]=(0,l.useMemo)((()=>{if(!g)return z;const e=_(f,c?void 0:u.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[f,c,u]),k=(0,l.useMemo)((()=>c?u:v({},u,{subscription:m})),[c,u,m]),E=(0,l.useRef)(),j=(0,l.useRef)(a),O=(0,l.useRef)(),P=(0,l.useRef)(!1),C=((0,l.useRef)(!1),(0,l.useRef)(!1)),R=(0,l.useRef)();A((()=>(C.current=!0,()=>{C.current=!1})),[]);const L=(0,l.useMemo)((()=>()=>O.current&&a===j.current?O.current:h(f.getState(),a)),[f,a]),I=(0,l.useMemo)((()=>e=>m?function(e,t,n,r,o,a,i,u,l,c,s){if(!e)return()=>{};let f=!1,d=null;const p=()=>{if(f||!u.current)return;const e=t.getState();let n,p;try{n=r(e,o.current)}catch(e){p=e,d=e}p||(d=null),n===a.current?i.current||c():(a.current=n,l.current=n,i.current=!0,s())};return n.onStateChange=p,n.trySubscribe(),p(),()=>{if(f=!0,n.tryUnsubscribe(),n.onStateChange=null,d)throw d}}(g,f,m,h,j,E,P,C,O,b,e):()=>{}),[m]);var M,F;let B;M=D,F=[j,E,P,a,O,b],A((()=>M(...F)),undefined);try{B=N(I,L,p?()=>h(p(),a):L)}catch(e){throw R.current&&(e.message+=`\nThe error may be correlated with this previous error:\n${R.current.stack}\n\n`),e}A((()=>{R.current=void 0,O.current=void 0,E.current=B}));const U=(0,l.useMemo)((()=>l.createElement(e,v({},B,{ref:o}))),[o,e,B]);return(0,l.useMemo)((()=>g?l.createElement(i.Provider,{value:k},U):U),[i,U,k])}const f=l.memo(c);if(f.WrappedComponent=e,f.displayName=c.displayName=n,s){const t=l.forwardRef((function(e,t){return l.createElement(f,v({},e,{reactReduxForwardedRef:t}))}));return t.displayName=n,t.WrappedComponent=e,b()(t,e)}return b()(f,e)}},F=function({store:e,context:t,children:n,serverState:r}){const o=(0,l.useMemo)((()=>{const t=_(e);return{store:e,subscription:t,getServerState:r?()=>r:void 0}}),[e,r]),a=(0,l.useMemo)((()=>e.getState()),[e]);A((()=>{const{subscription:t}=o;return t.onStateChange=t.notifyNestedSubs,t.trySubscribe(),a!==e.getState()&&t.notifyNestedSubs(),()=>{t.tryUnsubscribe(),t.onStateChange=void 0}}),[o,a]);const i=t||c;return l.createElement(i.Provider,{value:o},n)};function B(e=c){const t=e===c?s:()=>(0,l.useContext)(e);return function(){const{store:e}=t();return e}}const U=B();function $(e=c){const t=e===c?U:B(e);return function(){return t().dispatch}}const W=$();var H,V;H=o.useSyncExternalStoreWithSelector,d=H,(e=>{N=e})(r.useSyncExternalStore),V=a.unstable_batchedUpdates,i=V},9655:function(e,t,n){"use strict";n.r(t),n.d(t,{AbortedDeferredError:function(){return a.X3},Await:function(){return o.KP},BrowserRouter:function(){return b},Form:function(){return O},HashRouter:function(){return w},Link:function(){return E},MemoryRouter:function(){return o.VA},NavLink:function(){return j},Navigate:function(){return o.Fg},NavigationType:function(){return a.aU},Outlet:function(){return o.j3},Route:function(){return o.AW},Router:function(){return o.F0},RouterProvider:function(){return o.pG},Routes:function(){return o.Z5},ScrollRestoration:function(){return C},UNSAFE_DataRouterContext:function(){return o.w3},UNSAFE_DataRouterStateContext:function(){return o.FR},UNSAFE_LocationContext:function(){return o.gd},UNSAFE_NavigationContext:function(){return o.Us},UNSAFE_RouteContext:function(){return o.pW},UNSAFE_enhanceManualRouteObjects:function(){return o.DG},UNSAFE_useScrollRestoration:function(){return W},createBrowserRouter:function(){return m},createHashRouter:function(){return v},createMemoryRouter:function(){return o.bi},createPath:function(){return a.Ep},createRoutesFromChildren:function(){return o.is},createRoutesFromElements:function(){return o.i7},createSearchParams:function(){return f},defer:function(){return a.PQ},generatePath:function(){return a.Gn},isRouteErrorResponse:function(){return a.WK},json:function(){return a.AV},matchPath:function(){return a.LX},matchRoutes:function(){return a.fp},parsePath:function(){return a.cP},redirect:function(){return a.uX},renderMatches:function(){return o.Oe},resolvePath:function(){return a.i3},unstable_HistoryRouter:function(){return x},unstable_useBlocker:function(){return o.aQ},unstable_usePrompt:function(){return V},useActionData:function(){return o.nA},useAsyncError:function(){return o.iG},useAsyncValue:function(){return o.qv},useBeforeUnload:function(){return H},useFetcher:function(){return F},useFetchers:function(){return B},useFormAction:function(){return I},useHref:function(){return o.oQ},useInRouterContext:function(){return o.GV},useLinkClickHandler:function(){return T},useLoaderData:function(){return o.f_},useLocation:function(){return o.TH},useMatch:function(){return o.bS},useMatches:function(){return o.SN},useNavigate:function(){return o.s0},useNavigation:function(){return o.HJ},useNavigationType:function(){return o.ur},useOutlet:function(){return o.pC},useOutletContext:function(){return o.bx},useParams:function(){return o.UO},useResolvedPath:function(){return o.WU},useRevalidator:function(){return o.xW},useRouteError:function(){return o.lk},useRouteLoaderData:function(){return o.V4},useRoutes:function(){return o.V$},useSearchParams:function(){return N},useSubmit:function(){return z}});var r=n(7294),o=n(9250),a=n(2599);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}function u(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}const l="get",c="application/x-www-form-urlencoded";function s(e){return null!=e&&"string"==typeof e.tagName}function f(e){return void 0===e&&(e=""),new URLSearchParams("string"==typeof e||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce(((t,n)=>{let r=e[n];return t.concat(Array.isArray(r)?r.map((e=>[n,e])):[[n,r]])}),[]))}const d=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"],p=["aria-current","caseSensitive","className","end","style","to","children"],h=["reloadDocument","replace","method","action","onSubmit","fetcherKey","routeId","relative","preventScrollReset"];function m(e,t){return(0,a.p7)({basename:null==t?void 0:t.basename,history:(0,a.lX)({window:null==t?void 0:t.window}),hydrationData:(null==t?void 0:t.hydrationData)||y(),routes:(0,o.DG)(e)}).initialize()}function v(e,t){return(0,a.p7)({basename:null==t?void 0:t.basename,history:(0,a.q_)({window:null==t?void 0:t.window}),hydrationData:(null==t?void 0:t.hydrationData)||y(),routes:(0,o.DG)(e)}).initialize()}function y(){var e;let t=null==(e=window)?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=i({},t,{errors:g(t.errors)})),t}function g(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,r]of t)if(r&&"RouteErrorResponse"===r.__type)n[e]=new a.iQ(r.status,r.statusText,r.data,!0===r.internal);else if(r&&"Error"===r.__type){let t=new Error(r.message);t.stack="",n[e]=t}else n[e]=r;return n}function b(e){let{basename:t,children:n,window:i}=e,u=r.useRef();null==u.current&&(u.current=(0,a.lX)({window:i,v5Compat:!0}));let l=u.current,[c,s]=r.useState({action:l.action,location:l.location});return r.useLayoutEffect((()=>l.listen(s)),[l]),r.createElement(o.F0,{basename:t,children:n,location:c.location,navigationType:c.action,navigator:l})}function w(e){let{basename:t,children:n,window:i}=e,u=r.useRef();null==u.current&&(u.current=(0,a.q_)({window:i,v5Compat:!0}));let l=u.current,[c,s]=r.useState({action:l.action,location:l.location});return r.useLayoutEffect((()=>l.listen(s)),[l]),r.createElement(o.F0,{basename:t,children:n,location:c.location,navigationType:c.action,navigator:l})}function x(e){let{basename:t,children:n,history:a}=e;const[i,u]=r.useState({action:a.action,location:a.location});return r.useLayoutEffect((()=>a.listen(u)),[a]),r.createElement(o.F0,{basename:t,children:n,location:i.location,navigationType:i.action,navigator:a})}const S="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,k=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,E=r.forwardRef((function(e,t){let n,{onClick:l,relative:c,reloadDocument:s,replace:f,state:p,target:h,to:m,preventScrollReset:v}=e,y=u(e,d),{basename:g}=r.useContext(o.Us),b=!1;if("string"==typeof m&&k.test(m)&&(n=m,S)){let e=new URL(window.location.href),t=m.startsWith("//")?new URL(e.protocol+m):new URL(m),n=(0,a.Zn)(t.pathname,g);t.origin===e.origin&&null!=n?m=n+t.search+t.hash:b=!0}let w=(0,o.oQ)(m,{relative:c}),x=T(m,{replace:f,state:p,target:h,preventScrollReset:v,relative:c});return r.createElement("a",i({},y,{href:n||w,onClick:b||s?l:function(e){l&&l(e),e.defaultPrevented||x(e)},ref:t,target:h}))})),j=r.forwardRef((function(e,t){let{"aria-current":n="page",caseSensitive:a=!1,className:l="",end:c=!1,style:s,to:f,children:d}=e,h=u(e,p),m=(0,o.WU)(f,{relative:h.relative}),v=(0,o.TH)(),y=r.useContext(o.FR),{navigator:g}=r.useContext(o.Us),b=g.encodeLocation?g.encodeLocation(m).pathname:m.pathname,w=v.pathname,x=y&&y.navigation&&y.navigation.location?y.navigation.location.pathname:null;a||(w=w.toLowerCase(),x=x?x.toLowerCase():null,b=b.toLowerCase());let S,k=w===b||!c&&w.startsWith(b)&&"/"===w.charAt(b.length),j=null!=x&&(x===b||!c&&x.startsWith(b)&&"/"===x.charAt(b.length)),O=k?n:void 0;S="function"==typeof l?l({isActive:k,isPending:j}):[l,k?"active":null,j?"pending":null].filter(Boolean).join(" ");let P="function"==typeof s?s({isActive:k,isPending:j}):s;return r.createElement(E,i({},h,{"aria-current":O,className:S,ref:t,style:P,to:f}),"function"==typeof d?d({isActive:k,isPending:j}):d)})),O=r.forwardRef(((e,t)=>r.createElement(P,i({},e,{ref:t})))),P=r.forwardRef(((e,t)=>{let{reloadDocument:n,replace:o,method:a=l,action:c,onSubmit:s,fetcherKey:f,routeId:d,relative:p,preventScrollReset:m}=e,v=u(e,h),y=D(f,d),g="get"===a.toLowerCase()?"get":"post",b=I(c,{relative:p});return r.createElement("form",i({ref:t,method:g,action:b,onSubmit:n?s:e=>{if(s&&s(e),e.defaultPrevented)return;e.preventDefault();let t=e.nativeEvent.submitter,n=(null==t?void 0:t.getAttribute("formmethod"))||a;y(t||e.currentTarget,{method:n,replace:o,relative:p,preventScrollReset:m})}},v))}));function C(e){let{getKey:t,storageKey:n}=e;return W({getKey:t,storageKey:n}),null}var _,A;function R(e){let t=r.useContext(o.w3);return t||(0,a.J0)(!1),t}function L(e){let t=r.useContext(o.FR);return t||(0,a.J0)(!1),t}function T(e,t){let{target:n,replace:i,state:u,preventScrollReset:l,relative:c}=void 0===t?{}:t,s=(0,o.s0)(),f=(0,o.TH)(),d=(0,o.WU)(e,{relative:c});return r.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,n)){t.preventDefault();let n=void 0!==i?i:(0,a.Ep)(f)===(0,a.Ep)(d);s(e,{replace:n,state:u,preventScrollReset:l,relative:c})}}),[f,s,d,i,u,n,e,l,c])}function N(e){let t=r.useRef(f(e)),n=r.useRef(!1),a=(0,o.TH)(),i=r.useMemo((()=>function(e,t){let n=f(e);if(t)for(let e of t.keys())n.has(e)||t.getAll(e).forEach((t=>{n.append(e,t)}));return n}(a.search,n.current?null:t.current)),[a.search]),u=(0,o.s0)(),l=r.useCallback(((e,t)=>{const r=f("function"==typeof e?e(i):e);n.current=!0,u("?"+r,t)}),[u,i]);return[i,l]}function z(){return D()}function D(e,t){let{router:n}=R(_.UseSubmitImpl),o=I();return r.useCallback((function(r,i){if(void 0===i&&(i={}),"undefined"==typeof document)throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");let{method:u,encType:f,formData:d,url:p}=function(e,t,n){let r,o,a,i;if(s(u=e)&&"form"===u.tagName.toLowerCase()){let u=n.submissionTrigger;r=n.method||e.getAttribute("method")||l,o=n.action||e.getAttribute("action")||t,a=n.encType||e.getAttribute("enctype")||c,i=new FormData(e),u&&u.name&&i.append(u.name,u.value)}else if(function(e){return s(e)&&"button"===e.tagName.toLowerCase()}(e)||function(e){return s(e)&&"input"===e.tagName.toLowerCase()}(e)&&("submit"===e.type||"image"===e.type)){let u=e.form;if(null==u)throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');r=n.method||e.getAttribute("formmethod")||u.getAttribute("method")||l,o=n.action||e.getAttribute("formaction")||u.getAttribute("action")||t,a=n.encType||e.getAttribute("formenctype")||u.getAttribute("enctype")||c,i=new FormData(u),e.name&&i.append(e.name,e.value)}else{if(s(e))throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');if(r=n.method||l,o=n.action||t,a=n.encType||c,e instanceof FormData)i=e;else if(i=new FormData,e instanceof URLSearchParams)for(let[t,n]of e)i.append(t,n);else if(null!=e)for(let t of Object.keys(e))i.append(t,e[t])}var u;let{protocol:f,host:d}=window.location;return{url:new URL(o,f+"//"+d),method:r.toLowerCase(),encType:a,formData:i}}(r,o,i),h=p.pathname+p.search,m={replace:i.replace,preventScrollReset:i.preventScrollReset,formData:d,formMethod:u,formEncType:f};e?(null==t&&(0,a.J0)(!1),n.fetch(e,t,h,m)):n.navigate(h,m)}),[o,n,e,t])}function I(e,t){let{relative:n}=void 0===t?{}:t,{basename:u}=r.useContext(o.Us),l=r.useContext(o.pW);l||(0,a.J0)(!1);let[c]=l.matches.slice(-1),s=i({},(0,o.WU)(e||".",{relative:n})),f=(0,o.TH)();if(null==e&&(s.search=f.search,s.hash=f.hash,c.route.index)){let e=new URLSearchParams(s.search);e.delete("index"),s.search=e.toString()?"?"+e.toString():""}return e&&"."!==e||!c.route.index||(s.search=s.search?s.search.replace(/^\?/,"?index&"):"?index"),"/"!==u&&(s.pathname="/"===s.pathname?u:(0,a.RQ)([u,s.pathname])),(0,a.Ep)(s)}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmitImpl="useSubmitImpl",e.UseFetcher="useFetcher"})(_||(_={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(A||(A={}));let M=0;function F(){var e;let{router:t}=R(_.UseFetcher),n=r.useContext(o.pW);n||(0,a.J0)(!1);let u=null==(e=n.matches[n.matches.length-1])?void 0:e.route.id;null==u&&(0,a.J0)(!1);let[l]=r.useState((()=>String(++M))),[c]=r.useState((()=>(u||(0,a.J0)(!1),function(e,t){return r.forwardRef(((n,o)=>r.createElement(P,i({},n,{ref:o,fetcherKey:e,routeId:t}))))}(l,u)))),[s]=r.useState((()=>e=>{t||(0,a.J0)(!1),u||(0,a.J0)(!1),t.fetch(l,u,e)})),f=D(l,u),d=t.getFetcher(l),p=r.useMemo((()=>i({Form:c,submit:f,load:s},d)),[d,c,f,s]);return r.useEffect((()=>()=>{t?t.deleteFetcher(l):console.warn("No fetcher available to clean up from useFetcher()")}),[t,l]),p}function B(){return[...L(A.UseFetchers).fetchers.values()]}const U="react-router-scroll-positions";let $={};function W(e){let{getKey:t,storageKey:n}=void 0===e?{}:e,{router:a}=R(_.UseScrollRestoration),{restoreScrollPosition:i,preventScrollReset:u}=L(A.UseScrollRestoration),l=(0,o.TH)(),c=(0,o.SN)(),s=(0,o.HJ)();r.useEffect((()=>(window.history.scrollRestoration="manual",()=>{window.history.scrollRestoration="auto"})),[]),function(e,t){let{capture:n}={};r.useEffect((()=>{let t=null!=n?{capture:n}:void 0;return window.addEventListener("pagehide",e,t),()=>{window.removeEventListener("pagehide",e,t)}}),[e,n])}(r.useCallback((()=>{if("idle"===s.state){let e=(t?t(l,c):null)||l.key;$[e]=window.scrollY}sessionStorage.setItem(n||U,JSON.stringify($)),window.history.scrollRestoration="auto"}),[n,t,s.state,l,c])),"undefined"!=typeof document&&(r.useLayoutEffect((()=>{try{let e=sessionStorage.getItem(n||U);e&&($=JSON.parse(e))}catch(e){}}),[n]),r.useLayoutEffect((()=>{let e=null==a?void 0:a.enableScrollRestoration($,(()=>window.scrollY),t);return()=>e&&e()}),[a,t]),r.useLayoutEffect((()=>{if(!1!==i)if("number"!=typeof i){if(l.hash){let e=document.getElementById(l.hash.slice(1));if(e)return void e.scrollIntoView()}!0!==u&&window.scrollTo(0,0)}else window.scrollTo(0,i)}),[l,i,u]))}function H(e,t){let{capture:n}=t||{};r.useEffect((()=>{let t=null!=n?{capture:n}:void 0;return window.addEventListener("beforeunload",e,t),()=>{window.removeEventListener("beforeunload",e,t)}}),[e,n])}function V(e){let{when:t,message:n}=e,a=(0,o.aQ)(t);r.useEffect((()=>{"blocked"!==a.state||t||a.reset()}),[a,t]),r.useEffect((()=>{"blocked"===a.state&&(window.confirm(n)?setTimeout(a.proceed,0):a.reset())}),[a,n])}},9250:function(e,t,n){"use strict";var r;n.d(t,{AW:function(){return te},DG:function(){return fe},F0:function(){return ne},FR:function(){return p},Fg:function(){return Z},GV:function(){return w},HJ:function(){return B},KP:function(){return oe},Oe:function(){return se},SN:function(){return $},TH:function(){return x},UO:function(){return C},Us:function(){return m},V$:function(){return A},V4:function(){return H},VA:function(){return X},WU:function(){return _},Z5:function(){return re},aQ:function(){return J},bS:function(){return k},bi:function(){return de},bx:function(){return O},f_:function(){return W},gd:function(){return v},i7:function(){return ce},iG:function(){return G},is:function(){return ce},j3:function(){return ee},lk:function(){return q},nA:function(){return V},oQ:function(){return b},pC:function(){return P},pG:function(){return Y},pW:function(){return y},qv:function(){return Q},s0:function(){return E},ur:function(){return S},w3:function(){return d},xW:function(){return U}});var o=n(2599),a=n(7294);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}"function"==typeof Object.is&&Object.is;const{useState:u,useEffect:l,useLayoutEffect:c,useDebugValue:s}=r||(r=n.t(a,2));"undefined"==typeof window||void 0===window.document||window.document.createElement;const f=(r||(r=n.t(a,2))).useSyncExternalStore,d=a.createContext(null),p=a.createContext(null),h=a.createContext(null),m=a.createContext(null),v=a.createContext(null),y=a.createContext({outlet:null,matches:[]}),g=a.createContext(null);function b(e,t){let{relative:n}=void 0===t?{}:t;w()||(0,o.J0)(!1);let{basename:r,navigator:i}=a.useContext(m),{hash:u,pathname:l,search:c}=_(e,{relative:n}),s=l;return"/"!==r&&(s="/"===l?r:(0,o.RQ)([r,l])),i.createHref({pathname:s,search:c,hash:u})}function w(){return null!=a.useContext(v)}function x(){return w()||(0,o.J0)(!1),a.useContext(v).location}function S(){return a.useContext(v).navigationType}function k(e){w()||(0,o.J0)(!1);let{pathname:t}=x();return a.useMemo((()=>(0,o.LX)(e,t)),[t,e])}function E(){w()||(0,o.J0)(!1);let{basename:e,navigator:t}=a.useContext(m),{matches:n}=a.useContext(y),{pathname:r}=x(),i=JSON.stringify((0,o.Zq)(n).map((e=>e.pathnameBase))),u=a.useRef(!1);return a.useEffect((()=>{u.current=!0})),a.useCallback((function(n,a){if(void 0===a&&(a={}),!u.current)return;if("number"==typeof n)return void t.go(n);let l=(0,o.pC)(n,JSON.parse(i),r,"path"===a.relative);"/"!==e&&(l.pathname="/"===l.pathname?e:(0,o.RQ)([e,l.pathname])),(a.replace?t.replace:t.push)(l,a.state,a)}),[e,t,i,r])}const j=a.createContext(null);function O(){return a.useContext(j)}function P(e){let t=a.useContext(y).outlet;return t?a.createElement(j.Provider,{value:e},t):t}function C(){let{matches:e}=a.useContext(y),t=e[e.length-1];return t?t.params:{}}function _(e,t){let{relative:n}=void 0===t?{}:t,{matches:r}=a.useContext(y),{pathname:i}=x(),u=JSON.stringify((0,o.Zq)(r).map((e=>e.pathnameBase)));return a.useMemo((()=>(0,o.pC)(e,JSON.parse(u),i,"path"===n)),[e,u,i,n])}function A(e,t){w()||(0,o.J0)(!1);let{navigator:n}=a.useContext(m),r=a.useContext(p),{matches:u}=a.useContext(y),l=u[u.length-1],c=l?l.params:{},s=(l&&l.pathname,l?l.pathnameBase:"/");l&&l.route;let f,d=x();if(t){var h;let e="string"==typeof t?(0,o.cP)(t):t;"/"===s||(null==(h=e.pathname)?void 0:h.startsWith(s))||(0,o.J0)(!1),f=e}else f=d;let g=f.pathname||"/",b="/"===s?g:g.slice(s.length)||"/",S=(0,o.fp)(e,{pathname:b}),k=N(S&&S.map((e=>Object.assign({},e,{params:Object.assign({},c,e.params),pathname:(0,o.RQ)([s,n.encodeLocation?n.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?s:(0,o.RQ)([s,n.encodeLocation?n.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),u,r||void 0);return t&&k?a.createElement(v.Provider,{value:{location:i({pathname:"/",search:"",hash:"",state:null,key:"default"},f),navigationType:o.aU.Pop}},k):k}function R(){let e=q(),t=(0,o.WK)(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,r={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return a.createElement(a.Fragment,null,a.createElement("h2",null,"Unexpected Application Error!"),a.createElement("h3",{style:{fontStyle:"italic"}},t),n?a.createElement("pre",{style:r},n):null,null)}class L extends a.Component{constructor(e){super(e),this.state={location:e.location,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location?{error:e.error,location:e.location}:{error:e.error||t.error,location:t.location}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?a.createElement(y.Provider,{value:this.props.routeContext},a.createElement(g.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function T(e){let{routeContext:t,match:n,children:r}=e,o=a.useContext(d);return o&&o.static&&o.staticContext&&n.route.errorElement&&(o.staticContext._deepestRenderedBoundaryId=n.route.id),a.createElement(y.Provider,{value:t},r)}function N(e,t,n){if(void 0===t&&(t=[]),null==e){if(null==n||!n.errors)return null;e=n.matches}let r=e,i=null==n?void 0:n.errors;if(null!=i){let e=r.findIndex((e=>e.route.id&&(null==i?void 0:i[e.route.id])));e>=0||(0,o.J0)(!1),r=r.slice(0,Math.min(r.length,e+1))}return r.reduceRight(((e,o,u)=>{let l=o.route.id?null==i?void 0:i[o.route.id]:null,c=n?o.route.errorElement||a.createElement(R,null):null,s=t.concat(r.slice(0,u+1)),f=()=>a.createElement(T,{match:o,routeContext:{outlet:e,matches:s}},l?c:void 0!==o.route.element?o.route.element:e);return n&&(o.route.errorElement||0===u)?a.createElement(L,{location:n.location,component:c,error:l,children:f(),routeContext:{outlet:null,matches:s}}):f()}),null)}var z,D;function I(e){let t=a.useContext(d);return t||(0,o.J0)(!1),t}function M(e){let t=a.useContext(p);return t||(0,o.J0)(!1),t}function F(e){let t=function(e){let t=a.useContext(y);return t||(0,o.J0)(!1),t}(),n=t.matches[t.matches.length-1];return n.route.id||(0,o.J0)(!1),n.route.id}function B(){return M(D.UseNavigation).navigation}function U(){let e=I(z.UseRevalidator),t=M(D.UseRevalidator);return{revalidate:e.router.revalidate,state:t.revalidation}}function $(){let{matches:e,loaderData:t}=M(D.UseMatches);return a.useMemo((()=>e.map((e=>{let{pathname:n,params:r}=e;return{id:e.route.id,pathname:n,params:r,data:t[e.route.id],handle:e.route.handle}}))),[e,t])}function W(){let e=M(D.UseLoaderData),t=F(D.UseLoaderData);if(!e.errors||null==e.errors[t])return e.loaderData[t];console.error("You cannot `useLoaderData` in an errorElement (routeId: "+t+")")}function H(e){return M(D.UseRouteLoaderData).loaderData[e]}function V(){let e=M(D.UseActionData);return a.useContext(y)||(0,o.J0)(!1),Object.values((null==e?void 0:e.actionData)||{})[0]}function q(){var e;let t=a.useContext(g),n=M(D.UseRouteError),r=F(D.UseRouteError);return t||(null==(e=n.errors)?void 0:e[r])}function Q(){let e=a.useContext(h);return null==e?void 0:e._data}function G(){let e=a.useContext(h);return null==e?void 0:e._error}!function(e){e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator"}(z||(z={})),function(e){e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator"}(D||(D={}));let K=0;function J(e){let{router:t}=I(z.UseBlocker),[n]=a.useState((()=>String(++K))),r=a.useCallback((t=>"function"==typeof e?!!e(t):!!e),[e]),o=t.getBlocker(n,r);return a.useEffect((()=>()=>t.deleteBlocker(n)),[t,n]),o}function Y(e){let{fallbackElement:t,router:n}=e,r=f(n.subscribe,(()=>n.state),(()=>n.state)),o=a.useMemo((()=>({createHref:n.createHref,encodeLocation:n.encodeLocation,go:e=>n.navigate(e),push:(e,t,r)=>n.navigate(e,{state:t,preventScrollReset:null==r?void 0:r.preventScrollReset}),replace:(e,t,r)=>n.navigate(e,{replace:!0,state:t,preventScrollReset:null==r?void 0:r.preventScrollReset})})),[n]),i=n.basename||"/";return a.createElement(a.Fragment,null,a.createElement(d.Provider,{value:{router:n,navigator:o,static:!1,basename:i}},a.createElement(p.Provider,{value:r},a.createElement(ne,{basename:n.basename,location:n.state.location,navigationType:n.state.historyAction,navigator:o},n.state.initialized?a.createElement(re,null):t))),null)}function X(e){let{basename:t,children:n,initialEntries:r,initialIndex:i}=e,u=a.useRef();null==u.current&&(u.current=(0,o.PP)({initialEntries:r,initialIndex:i,v5Compat:!0}));let l=u.current,[c,s]=a.useState({action:l.action,location:l.location});return a.useLayoutEffect((()=>l.listen(s)),[l]),a.createElement(ne,{basename:t,children:n,location:c.location,navigationType:c.action,navigator:l})}function Z(e){let{to:t,replace:n,state:r,relative:i}=e;w()||(0,o.J0)(!1);let u=a.useContext(p),l=E();return a.useEffect((()=>{u&&"idle"!==u.navigation.state||l(t,{replace:n,state:r,relative:i})})),null}function ee(e){return P(e.context)}function te(e){(0,o.J0)(!1)}function ne(e){let{basename:t="/",children:n=null,location:r,navigationType:i=o.aU.Pop,navigator:u,static:l=!1}=e;w()&&(0,o.J0)(!1);let c=t.replace(/^\/*/,"/"),s=a.useMemo((()=>({basename:c,navigator:u,static:l})),[c,u,l]);"string"==typeof r&&(r=(0,o.cP)(r));let{pathname:f="/",search:d="",hash:p="",state:h=null,key:y="default"}=r,g=a.useMemo((()=>{let e=(0,o.Zn)(f,c);return null==e?null:{pathname:e,search:d,hash:p,state:h,key:y}}),[c,f,d,p,h,y]);return null==g?null:a.createElement(m.Provider,{value:s},a.createElement(v.Provider,{children:n,value:{location:g,navigationType:i}}))}function re(e){let{children:t,location:n}=e,r=a.useContext(d);return A(r&&!t?r.router.routes:ce(t),n)}function oe(e){let{children:t,errorElement:n,resolve:r}=e;return a.createElement(ue,{resolve:r,errorElement:n},a.createElement(le,null,t))}var ae;!function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(ae||(ae={}));const ie=new Promise((()=>{}));class ue extends a.Component{constructor(e){super(e),this.state={error:null}}static getDerivedStateFromError(e){return{error:e}}componentDidCatch(e,t){console.error("<Await> caught the following error during render",e,t)}render(){let{children:e,errorElement:t,resolve:n}=this.props,r=null,i=ae.pending;if(n instanceof Promise)if(this.state.error){i=ae.error;let e=this.state.error;r=Promise.reject().catch((()=>{})),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_error",{get:()=>e})}else n._tracked?(r=n,i=void 0!==r._error?ae.error:void 0!==r._data?ae.success:ae.pending):(i=ae.pending,Object.defineProperty(n,"_tracked",{get:()=>!0}),r=n.then((e=>Object.defineProperty(n,"_data",{get:()=>e})),(e=>Object.defineProperty(n,"_error",{get:()=>e}))));else i=ae.success,r=Promise.resolve(),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_data",{get:()=>n});if(i===ae.error&&r._error instanceof o.X3)throw ie;if(i===ae.error&&!t)throw r._error;if(i===ae.error)return a.createElement(h.Provider,{value:r,children:t});if(i===ae.success)return a.createElement(h.Provider,{value:r,children:e});throw r}}function le(e){let{children:t}=e,n=Q(),r="function"==typeof t?t(n):t;return a.createElement(a.Fragment,null,r)}function ce(e,t){void 0===t&&(t=[]);let n=[];return a.Children.forEach(e,((e,r)=>{if(!a.isValidElement(e))return;if(e.type===a.Fragment)return void n.push.apply(n,ce(e.props.children,t));e.type!==te&&(0,o.J0)(!1),e.props.index&&e.props.children&&(0,o.J0)(!1);let i=[...t,r],u={id:e.props.id||i.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,hasErrorBoundary:null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle};e.props.children&&(u.children=ce(e.props.children,i)),n.push(u)})),n}function se(e){return N(e)}function fe(e){return e.map((e=>{let t=i({},e);return null==t.hasErrorBoundary&&(t.hasErrorBoundary=null!=t.errorElement),t.children&&(t.children=fe(t.children)),t}))}function de(e,t){return(0,o.p7)({basename:null==t?void 0:t.basename,history:(0,o.PP)({initialEntries:null==t?void 0:t.initialEntries,initialIndex:null==t?void 0:t.initialIndex}),hydrationData:null==t?void 0:t.hydrationData,routes:fe(e)}).initialize()}},5251:function(e,t,n){"use strict";var r=n(7294),o=Symbol.for("react.element"),a=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,u=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,a={},c=null,s=null;for(r in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(s=t.ref),t)i.call(t,r)&&!l.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:o,type:e,key:c,ref:s,props:a,_owner:u.current}}t.Fragment=a,t.jsx=c,t.jsxs=c},2408:function(e,t){"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),u=Symbol.for("react.provider"),l=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,v={};function y(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=y.prototype;var w=b.prototype=new g;w.constructor=b,m(w,y.prototype),w.isPureReactComponent=!0;var x=Array.isArray,S=Object.prototype.hasOwnProperty,k={current:null},E={key:!0,ref:!0,__self:!0,__source:!0};function j(e,t,r){var o,a={},i=null,u=null;if(null!=t)for(o in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(i=""+t.key),t)S.call(t,o)&&!E.hasOwnProperty(o)&&(a[o]=t[o]);var l=arguments.length-2;if(1===l)a.children=r;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];a.children=c}if(e&&e.defaultProps)for(o in l=e.defaultProps)void 0===a[o]&&(a[o]=l[o]);return{$$typeof:n,type:e,key:i,ref:u,props:a,_owner:k.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var P=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function _(e,t,o,a,i){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var l=!1;if(null===e)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return i=i(l=e),e=""===a?"."+C(l,0):a,x(i)?(o="",null!=e&&(o=e.replace(P,"$&/")+"/"),_(i,t,o,"",(function(e){return e}))):null!=i&&(O(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||l&&l.key===i.key?"":(""+i.key).replace(P,"$&/")+"/")+e)),t.push(i)),1;if(l=0,a=""===a?".":a+":",x(e))for(var c=0;c<e.length;c++){var s=a+C(u=e[c],c);l+=_(u,t,o,s,i)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),c=0;!(u=e.next()).done;)l+=_(u=u.value,t,o,s=a+C(u,c++),i);else if("object"===u)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function A(e,t,n){if(null==e)return e;var r=[],o=0;return _(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function R(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var L={current:null},T={transition:null},N={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:T,ReactCurrentOwner:k};t.Children={map:A,forEach:function(e,t,n){A(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return A(e,(function(){t++})),t},toArray:function(e){return A(e,(function(e){return e}))||[]},only:function(e){if(!O(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=s,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,i=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,u=k.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in t)S.call(t,c)&&!E.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==l?l[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=r;else if(1<c){l=Array(c);for(var s=0;s<c;s++)l[s]=arguments[s+2];o.children=l}return{$$typeof:n,type:e.type,key:a,ref:i,props:o,_owner:u}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},t.createElement=j,t.createFactory=function(e){var t=j.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=O,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:R}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=T.transition;T.transition={};try{e()}finally{T.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return L.current.useCallback(e,t)},t.useContext=function(e){return L.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return L.current.useDeferredValue(e)},t.useEffect=function(e,t){return L.current.useEffect(e,t)},t.useId=function(){return L.current.useId()},t.useImperativeHandle=function(e,t,n){return L.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return L.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return L.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return L.current.useMemo(e,t)},t.useReducer=function(e,t,n){return L.current.useReducer(e,t,n)},t.useRef=function(e){return L.current.useRef(e)},t.useState=function(e){return L.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return L.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return L.current.useTransition()},t.version="18.2.0"},7294:function(e,t,n){"use strict";e.exports=n(2408)},5893:function(e,t,n){"use strict";e.exports=n(5251)},53:function(e,t){"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var u=2*(r+1)-1,l=e[u],c=u+1,s=e[c];if(0>a(l,n))c<o&&0>a(s,l)?(e[r]=s,e[c]=n,r=c):(e[r]=l,e[u]=n,r=u);else{if(!(c<o&&0>a(s,n)))break e;e[r]=s,e[c]=n,r=c}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var u=Date,l=u.now();t.unstable_now=function(){return u.now()-l}}var c=[],s=[],f=1,d=null,p=3,h=!1,m=!1,v=!1,y="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(s);null!==t;){if(null===t.callback)o(s);else{if(!(t.startTime<=e))break;o(s),t.sortIndex=t.expirationTime,n(c,t)}t=r(s)}}function x(e){if(v=!1,w(e),!m)if(null!==r(c))m=!0,T(S);else{var t=r(s);null!==t&&N(x,t.startTime-e)}}function S(e,n){m=!1,v&&(v=!1,g(O),O=-1),h=!0;var a=p;try{for(w(n),d=r(c);null!==d&&(!(d.expirationTime>n)||e&&!_());){var i=d.callback;if("function"==typeof i){d.callback=null,p=d.priorityLevel;var u=i(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?d.callback=u:d===r(c)&&o(c),w(n)}else o(c);d=r(c)}if(null!==d)var l=!0;else{var f=r(s);null!==f&&N(x,f.startTime-n),l=!1}return l}finally{d=null,p=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,E=!1,j=null,O=-1,P=5,C=-1;function _(){return!(t.unstable_now()-C<P)}function A(){if(null!==j){var e=t.unstable_now();C=e;var n=!0;try{n=j(!0,e)}finally{n?k():(E=!1,j=null)}}else E=!1}if("function"==typeof b)k=function(){b(A)};else if("undefined"!=typeof MessageChannel){var R=new MessageChannel,L=R.port2;R.port1.onmessage=A,k=function(){L.postMessage(null)}}else k=function(){y(A,0)};function T(e){j=e,E||(E=!0,k())}function N(e,n){O=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,T(S))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:a,expirationTime:u=a+u,sortIndex:-1},a>i?(e.sortIndex=a,n(s,e),null===r(c)&&e===r(s)&&(v?(g(O),O=-1):v=!0,N(x,a-i))):(e.sortIndex=u,n(c,e),m||h||(m=!0,T(S))),e},t.unstable_shouldYield=_,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},3840:function(e,t,n){"use strict";e.exports=n(53)},6774:function(e){e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var a=Object.keys(e),i=Object.keys(t);if(a.length!==i.length)return!1;for(var u=Object.prototype.hasOwnProperty.bind(t),l=0;l<a.length;l++){var c=a[l];if(!u(c))return!1;var s=e[c],f=t[c];if(!1===(o=n?n.call(r,s,f,c):void 0)||void 0===o&&s!==f)return!1}return!0}},2788:function(e,t,n){"use strict";n.r(t),n.d(t,{ServerStyleSheet:function(){return Be},StyleSheetConsumer:function(){return oe},StyleSheetContext:function(){return re},StyleSheetManager:function(){return se},ThemeConsumer:function(){return Le},ThemeContext:function(){return Re},ThemeProvider:function(){return Te},__PRIVATE__:function(){return We},createGlobalStyle:function(){return Me},css:function(){return we},default:function(){return He},isStyledComponent:function(){return w},keyframes:function(){return Fe},useTheme:function(){return $e},version:function(){return S},withTheme:function(){return Ue}});var r=n(9864),o=n(7294),a=n(6774),i=n.n(a),u=function(e){function t(e,r,l,c,d){for(var p,h,m,v,w,S=0,k=0,E=0,j=0,O=0,L=0,N=m=p=0,D=0,I=0,M=0,F=0,B=l.length,U=B-1,$="",W="",H="",V="";D<B;){if(h=l.charCodeAt(D),D===U&&0!==k+j+E+S&&(0!==k&&(h=47===k?10:47),j=E=S=0,B++,U++),0===k+j+E+S){if(D===U&&(0<I&&($=$.replace(f,"")),0<$.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:$+=l.charAt(D)}h=59}switch(h){case 123:for(p=($=$.trim()).charCodeAt(0),m=1,F=++D;D<B;){switch(h=l.charCodeAt(D)){case 123:m++;break;case 125:m--;break;case 47:switch(h=l.charCodeAt(D+1)){case 42:case 47:e:{for(N=D+1;N<U;++N)switch(l.charCodeAt(N)){case 47:if(42===h&&42===l.charCodeAt(N-1)&&D+2!==N){D=N+1;break e}break;case 10:if(47===h){D=N+1;break e}}D=N}}break;case 91:h++;case 40:h++;case 34:case 39:for(;D++<U&&l.charCodeAt(D)!==h;);}if(0===m)break;D++}if(m=l.substring(F,D),0===p&&(p=($=$.replace(s,"").trim()).charCodeAt(0)),64===p){switch(0<I&&($=$.replace(f,"")),h=$.charCodeAt(1)){case 100:case 109:case 115:case 45:I=r;break;default:I=R}if(F=(m=t(r,I,m,h,d+1)).length,0<T&&(w=u(3,m,I=n(R,$,M),r,C,P,F,h,d,c),$=I.join(""),void 0!==w&&0===(F=(m=w.trim()).length)&&(h=0,m="")),0<F)switch(h){case 115:$=$.replace(x,i);case 100:case 109:case 45:m=$+"{"+m+"}";break;case 107:m=($=$.replace(y,"$1 $2"))+"{"+m+"}",m=1===A||2===A&&a("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=$+m,112===c&&(W+=m,m="")}else m=""}else m=t(r,n(r,$,M),m,c,d+1);H+=m,m=M=I=N=p=0,$="",h=l.charCodeAt(++D);break;case 125:case 59:if(1<(F=($=(0<I?$.replace(f,""):$).trim()).length))switch(0===N&&(p=$.charCodeAt(0),45===p||96<p&&123>p)&&(F=($=$.replace(" ",":")).length),0<T&&void 0!==(w=u(1,$,r,e,C,P,W.length,c,d,c))&&0===(F=($=w.trim()).length)&&($="\0\0"),p=$.charCodeAt(0),h=$.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){V+=$+l.charAt(D);break}default:58!==$.charCodeAt(F-1)&&(W+=o($,p,h,$.charCodeAt(2)))}M=I=N=p=0,$="",h=l.charCodeAt(++D)}}switch(h){case 13:case 10:47===k?k=0:0===1+p&&107!==c&&0<$.length&&(I=1,$+="\0"),0<T*z&&u(0,$,r,e,C,P,W.length,c,d,c),P=1,C++;break;case 59:case 125:if(0===k+j+E+S){P++;break}default:switch(P++,v=l.charAt(D),h){case 9:case 32:if(0===j+S+k)switch(O){case 44:case 58:case 9:case 32:v="";break;default:32!==h&&(v=" ")}break;case 0:v="\\0";break;case 12:v="\\f";break;case 11:v="\\v";break;case 38:0===j+k+S&&(I=M=1,v="\f"+v);break;case 108:if(0===j+k+S+_&&0<N)switch(D-N){case 2:112===O&&58===l.charCodeAt(D-3)&&(_=O);case 8:111===L&&(_=L)}break;case 58:0===j+k+S&&(N=D);break;case 44:0===k+E+j+S&&(I=1,v+="\r");break;case 34:case 39:0===k&&(j=j===h?0:0===j?h:j);break;case 91:0===j+k+E&&S++;break;case 93:0===j+k+E&&S--;break;case 41:0===j+k+S&&E--;break;case 40:0===j+k+S&&(0===p&&(2*O+3*L==533||(p=1)),E++);break;case 64:0===k+E+j+S+N+m&&(m=1);break;case 42:case 47:if(!(0<j+S+E))switch(k){case 0:switch(2*h+3*l.charCodeAt(D+1)){case 235:k=47;break;case 220:F=D,k=42}break;case 42:47===h&&42===O&&F+2!==D&&(33===l.charCodeAt(F+2)&&(W+=l.substring(F,D+1)),v="",k=0)}}0===k&&($+=v)}L=O,O=h,D++}if(0<(F=W.length)){if(I=r,0<T&&void 0!==(w=u(2,W,I,e,C,P,F,c,d,c))&&0===(W=w).length)return V+W+H;if(W=I.join(",")+"{"+W+"}",0!=A*_){switch(2!==A||a(W,2)||(_=0),_){case 111:W=W.replace(b,":-moz-$1")+W;break;case 112:W=W.replace(g,"::-webkit-input-$1")+W.replace(g,"::-moz-$1")+W.replace(g,":-ms-input-$1")+W}_=0}}return V+W+H}function n(e,t,n){var o=t.trim().split(m);t=o;var a=o.length,i=e.length;switch(i){case 0:case 1:var u=0;for(e=0===i?"":e[0]+" ";u<a;++u)t[u]=r(e,t[u],n).trim();break;default:var l=u=0;for(t=[];u<a;++u)for(var c=0;c<i;++c)t[l++]=r(e[c]+" ",o[u],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(v,"$1"+e.trim());case 58:return e.trim()+t.replace(v,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(v,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var i=e+";",u=2*t+3*n+4*r;if(944===u){e=i.indexOf(":",9)+1;var l=i.substring(e,i.length-1).trim();return l=i.substring(0,e).trim()+l+";",1===A||2===A&&a(l,1)?"-webkit-"+l+l:l}if(0===A||2===A&&!a(i,1))return i;switch(u){case 1015:return 97===i.charCodeAt(10)?"-webkit-"+i+i:i;case 951:return 116===i.charCodeAt(3)?"-webkit-"+i+i:i;case 963:return 110===i.charCodeAt(5)?"-webkit-"+i+i:i;case 1009:if(100!==i.charCodeAt(4))break;case 969:case 942:return"-webkit-"+i+i;case 978:return"-webkit-"+i+"-moz-"+i+i;case 1019:case 983:return"-webkit-"+i+"-moz-"+i+"-ms-"+i+i;case 883:if(45===i.charCodeAt(8))return"-webkit-"+i+i;if(0<i.indexOf("image-set(",11))return i.replace(O,"$1-webkit-$2")+i;break;case 932:if(45===i.charCodeAt(4))switch(i.charCodeAt(5)){case 103:return"-webkit-box-"+i.replace("-grow","")+"-webkit-"+i+"-ms-"+i.replace("grow","positive")+i;case 115:return"-webkit-"+i+"-ms-"+i.replace("shrink","negative")+i;case 98:return"-webkit-"+i+"-ms-"+i.replace("basis","preferred-size")+i}return"-webkit-"+i+"-ms-"+i+i;case 964:return"-webkit-"+i+"-ms-flex-"+i+i;case 1023:if(99!==i.charCodeAt(8))break;return"-webkit-box-pack"+(l=i.substring(i.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+i+"-ms-flex-pack"+l+i;case 1005:return p.test(i)?i.replace(d,":-webkit-")+i.replace(d,":-moz-")+i:i;case 1e3:switch(t=(l=i.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(t)){case 226:l=i.replace(w,"tb");break;case 232:l=i.replace(w,"tb-rl");break;case 220:l=i.replace(w,"lr");break;default:return i}return"-webkit-"+i+"-ms-"+l+i;case 1017:if(-1===i.indexOf("sticky",9))break;case 975:switch(t=(i=e).length-10,u=(l=(33===i.charCodeAt(t)?i.substring(0,t):i).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(111>l.charCodeAt(8))break;case 115:i=i.replace(l,"-webkit-"+l)+";"+i;break;case 207:case 102:i=i.replace(l,"-webkit-"+(102<u?"inline-":"")+"box")+";"+i.replace(l,"-webkit-"+l)+";"+i.replace(l,"-ms-"+l+"box")+";"+i}return i+";";case 938:if(45===i.charCodeAt(5))switch(i.charCodeAt(6)){case 105:return l=i.replace("-items",""),"-webkit-"+i+"-webkit-box-"+l+"-ms-flex-"+l+i;case 115:return"-webkit-"+i+"-ms-flex-item-"+i.replace(k,"")+i;default:return"-webkit-"+i+"-ms-flex-line-pack"+i.replace("align-content","").replace(k,"")+i}break;case 973:case 989:if(45!==i.charCodeAt(3)||122===i.charCodeAt(4))break;case 931:case 953:if(!0===j.test(e))return 115===(l=e.substring(e.indexOf(":")+1)).charCodeAt(0)?o(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):i.replace(l,"-webkit-"+l)+i.replace(l,"-moz-"+l.replace("fill-",""))+i;break;case 962:if(i="-webkit-"+i+(102===i.charCodeAt(5)?"-ms-"+i:"")+i,211===n+r&&105===i.charCodeAt(13)&&0<i.indexOf("transform",10))return i.substring(0,i.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+i}return i}function a(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),N(2!==t?r:r.replace(E,"$1"),n,t)}function i(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(S," or ($1)").substring(4):"("+t+")"}function u(e,t,n,r,o,a,i,u,l,s){for(var f,d=0,p=t;d<T;++d)switch(f=L[d].call(c,e,p,n,r,o,a,i,u,l,s)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function l(e){return void 0!==(e=e.prefix)&&(N=null,e?"function"!=typeof e?A=1:(A=2,N=e):A=0),l}function c(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<T){var o=u(-1,n,r,r,C,P,0,0,0,0);void 0!==o&&"string"==typeof o&&(n=o)}var a=t(R,r,n,0,0);return 0<T&&void 0!==(o=u(-2,a,r,r,C,P,a.length,0,0,0))&&(a=o),_=0,P=C=1,a}var s=/^\0+/g,f=/[\0\r\f]/g,d=/: */g,p=/zoo|gra/,h=/([,: ])(transform)/g,m=/,\r+?/g,v=/([\t\r\n ])*\f?&/g,y=/@(k\w+)\s*(\S*)\s*/,g=/::(place)/g,b=/:(read-only)/g,w=/[svh]\w+-[tblr]{2}/,x=/\(\s*(.*)\s*\)/g,S=/([\s\S]*?);/g,k=/-self|flex-/g,E=/[^]*?(:[rp][el]a[\w-]+)[^]*/,j=/stretch|:\s*\w+\-(?:conte|avail)/,O=/([^-])(image-set\()/,P=1,C=1,_=0,A=1,R=[],L=[],T=0,N=null,z=0;return c.use=function e(t){switch(t){case void 0:case null:T=L.length=0;break;default:if("function"==typeof t)L[T++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else z=0|!!t}return e},c.set=l,void 0!==e&&l(e),c},l={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},c=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,s=function(e){var t=Object.create(null);return function(e){return void 0===t[e]&&(t[e]=(n=e,c.test(n)||111===n.charCodeAt(0)&&110===n.charCodeAt(1)&&n.charCodeAt(2)<91)),t[e];var n}}(),f=n(8679),d=n.n(f);function p(){return(p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var h=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},m=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,r.typeOf)(e)},v=Object.freeze([]),y=Object.freeze({});function g(e){return"function"==typeof e}function b(e){return e.displayName||e.name||"Component"}function w(e){return e&&"string"==typeof e.styledComponentId}var x="undefined"!=typeof process&&void 0!==process.env&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",S="5.3.8",k="undefined"!=typeof window&&"HTMLElement"in window,E=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env&&(void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY)),j={};function O(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var P=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&O(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var a=r;a<o;a++)this.groupSizes[a]=0}for(var i=this.indexOfGroup(e+1),u=0,l=t.length;u<l;u++)this.tag.insertRule(i,t[u])&&(this.groupSizes[e]++,i++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,a=r;a<o;a++)t+=this.tag.getRule(a)+"/*!sc*/\n";return t},e}(),C=new Map,_=new Map,A=1,R=function(e){if(C.has(e))return C.get(e);for(;_.has(A);)A++;var t=A++;return C.set(e,t),_.set(t,e),t},L=function(e){return _.get(e)},T=function(e,t){t>=A&&(A=t+1),C.set(e,t),_.set(t,e)},N="style["+x+'][data-styled-version="5.3.8"]',z=new RegExp("^"+x+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),D=function(e,t,n){for(var r,o=n.split(","),a=0,i=o.length;a<i;a++)(r=o[a])&&e.registerName(t,r)},I=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),r=[],o=0,a=n.length;o<a;o++){var i=n[o].trim();if(i){var u=i.match(z);if(u){var l=0|parseInt(u[1],10),c=u[2];0!==l&&(T(c,l),D(e,c,u[3]),e.getTag().insertRules(l,r)),r.length=0}else r.push(i)}}},M=function(){return n.nc},F=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(x))return r}}(n),a=void 0!==o?o.nextSibling:null;r.setAttribute(x,"active"),r.setAttribute("data-styled-version","5.3.8");var i=M();return i&&r.setAttribute("nonce",i),n.insertBefore(r,a),r},B=function(){function e(e){var t=this.element=F(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}O(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),U=function(){function e(e){var t=this.element=F(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),$=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),W=k,H={isServer:!k,useCSSOMInjection:!E},V=function(){function e(e,t,n){void 0===e&&(e=y),void 0===t&&(t={}),this.options=p({},H,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&k&&W&&(W=!1,function(e){for(var t=document.querySelectorAll(N),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(x)&&(I(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return R(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(p({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new $(o):r?new B(o):new U(o),new P(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(R(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(R(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(R(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var a=L(o);if(void 0!==a){var i=e.names.get(a),u=t.getGroup(o);if(i&&u&&i.size){var l=x+".g"+o+'[id="'+a+'"]',c="";void 0!==i&&i.forEach((function(e){e.length>0&&(c+=e+",")})),r+=""+u+l+'{content:"'+c+'"}/*!sc*/\n'}}}return r}(this)},e}(),q=/(a)(d)/gi,Q=function(e){return String.fromCharCode(e+(e>25?39:97))};function G(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=Q(t%52)+n;return(Q(t%52)+n).replace(q,"$1-$2")}var K=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},J=function(e){return K(5381,e)};function Y(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(g(n)&&!w(n))return!1}return!0}var X=J("5.3.8"),Z=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&Y(e),this.componentId=t,this.baseHash=K(X,t),this.baseStyle=n,V.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var a=ge(this.rules,e,t,n).join(""),i=G(K(this.baseHash,a)>>>0);if(!t.hasNameForId(r,i)){var u=n(a,"."+i,void 0,r);t.insertRules(r,i,u)}o.push(i),this.staticRulesId=i}else{for(var l=this.rules.length,c=K(this.baseHash,n.hash),s="",f=0;f<l;f++){var d=this.rules[f];if("string"==typeof d)s+=d;else if(d){var p=ge(d,e,t,n),h=Array.isArray(p)?p.join(""):p;c=K(c,h+f),s+=h}}if(s){var m=G(c>>>0);if(!t.hasNameForId(r,m)){var v=n(s,"."+m,void 0,r);t.insertRules(r,m,v)}o.push(m)}}return o.join(" ")},e}(),ee=/^\s*\/\/.*$/gm,te=[":","[",".","#"];function ne(e){var t,n,r,o,a=void 0===e?y:e,i=a.options,l=void 0===i?y:i,c=a.plugins,s=void 0===c?v:c,f=new u(l),d=[],p=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,a,i,u,l,c,s,f){switch(n){case 1:if(0===s&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===c)return r+"/*|*/";break;case 3:switch(c){case 102:case 112:return e(o[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){d.push(e)})),h=function(e,r,a){return 0===r&&-1!==te.indexOf(a[n.length])||a.match(o)?e:"."+t};function m(e,a,i,u){void 0===u&&(u="&");var l=e.replace(ee,""),c=a&&i?i+" "+a+" { "+l+" }":l;return t=u,n=a,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),f(i||!a?"":a,c)}return f.use([].concat(s,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,h))},p,function(e){if(-2===e){var t=d;return d=[],t}}])),m.hash=s.length?s.reduce((function(e,t){return t.name||O(15),K(e,t.name)}),5381).toString():"",m}var re=o.createContext(),oe=re.Consumer,ae=o.createContext(),ie=(ae.Consumer,new V),ue=ne();function le(){return(0,o.useContext)(re)||ie}function ce(){return(0,o.useContext)(ae)||ue}function se(e){var t=(0,o.useState)(e.stylisPlugins),n=t[0],r=t[1],a=le(),u=(0,o.useMemo)((function(){var t=a;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),l=(0,o.useMemo)((function(){return ne({options:{prefix:!e.disableVendorPrefixes},plugins:n})}),[e.disableVendorPrefixes,n]);return(0,o.useEffect)((function(){i()(n,e.stylisPlugins)||r(e.stylisPlugins)}),[e.stylisPlugins]),o.createElement(re.Provider,{value:u},o.createElement(ae.Provider,{value:l},e.children))}var fe=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=ue);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return O(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=ue),this.name+e.hash},e}(),de=/([A-Z])/,pe=/([A-Z])/g,he=/^ms-/,me=function(e){return"-"+e.toLowerCase()};function ve(e){return de.test(e)?e.replace(pe,me).replace(he,"-ms-"):e}var ye=function(e){return null==e||!1===e||""===e};function ge(e,t,n,r){if(Array.isArray(e)){for(var o,a=[],i=0,u=e.length;i<u;i+=1)""!==(o=ge(e[i],t,n,r))&&(Array.isArray(o)?a.push.apply(a,o):a.push(o));return a}return ye(e)?"":w(e)?"."+e.styledComponentId:g(e)?"function"!=typeof(c=e)||c.prototype&&c.prototype.isReactComponent||!t?e:ge(e(t),t,n,r):e instanceof fe?n?(e.inject(n,r),e.getName(r)):e:m(e)?function e(t,n){var r,o,a=[];for(var i in t)t.hasOwnProperty(i)&&!ye(t[i])&&(Array.isArray(t[i])&&t[i].isCss||g(t[i])?a.push(ve(i)+":",t[i],";"):m(t[i])?a.push.apply(a,e(t[i],i)):a.push(ve(i)+": "+(r=i,(null==(o=t[i])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in l?String(o).trim():o+"px")+";")));return n?[n+" {"].concat(a,["}"]):a}(e):e.toString();var c}var be=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function we(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return g(e)||m(e)?be(ge(h(v,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:be(ge(h(e,n)))}new Set;var xe=function(e,t,n){return void 0===n&&(n=y),e.theme!==n.theme&&e.theme||t||n.theme},Se=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,ke=/(^-|-$)/g;function Ee(e){return e.replace(Se,"-").replace(ke,"")}var je=function(e){return G(J(e)>>>0)};function Oe(e){return"string"==typeof e&&!0}var Pe=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Ce=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function _e(e,t,n){var r=e[n];Pe(t)&&Pe(r)?Ae(r,t):e[n]=t}function Ae(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,a=n;o<a.length;o++){var i=a[o];if(Pe(i))for(var u in i)Ce(u)&&_e(e,i[u],u)}return e}var Re=o.createContext(),Le=Re.Consumer;function Te(e){var t=(0,o.useContext)(Re),n=(0,o.useMemo)((function(){return function(e,t){return e?g(e)?e(t):Array.isArray(e)||"object"!=typeof e?O(8):t?p({},t,{},e):e:O(14)}(e.theme,t)}),[e.theme,t]);return e.children?o.createElement(Re.Provider,{value:n},e.children):null}var Ne={};function ze(e,t,n){var r=w(e),a=!Oe(e),i=t.attrs,u=void 0===i?v:i,l=t.componentId,c=void 0===l?function(e,t){var n="string"!=typeof e?"sc":Ee(e);Ne[n]=(Ne[n]||0)+1;var r=n+"-"+je("5.3.8"+n+Ne[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):l,f=t.displayName,h=void 0===f?function(e){return Oe(e)?"styled."+e:"Styled("+b(e)+")"}(e):f,m=t.displayName&&t.componentId?Ee(t.displayName)+"-"+t.componentId:t.componentId||c,x=r&&e.attrs?Array.prototype.concat(e.attrs,u).filter(Boolean):u,S=t.shouldForwardProp;r&&e.shouldForwardProp&&(S=t.shouldForwardProp?function(n,r,o){return e.shouldForwardProp(n,r,o)&&t.shouldForwardProp(n,r,o)}:e.shouldForwardProp);var k,E=new Z(n,m,r?e.componentStyle:void 0),j=E.isStatic&&0===u.length,O=function(e,t){return function(e,t,n,r){var a=e.attrs,i=e.componentStyle,u=e.defaultProps,l=e.foldedComponentIds,c=e.shouldForwardProp,f=e.styledComponentId,d=e.target,h=function(e,t,n){void 0===e&&(e=y);var r=p({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,a,i=e;for(t in g(i)&&(i=i(r)),i)r[t]=o[t]="className"===t?(n=o[t],a=i[t],n&&a?n+" "+a:n||a):i[t]})),[r,o]}(xe(t,(0,o.useContext)(Re),u)||y,t,a),m=h[0],v=h[1],b=function(e,t,n,r){var o=le(),a=ce();return t?e.generateAndInjectStyles(y,o,a):e.generateAndInjectStyles(n,o,a)}(i,r,m),w=n,x=v.$as||t.$as||v.as||t.as||d,S=Oe(x),k=v!==t?p({},t,{},v):t,E={};for(var j in k)"$"!==j[0]&&"as"!==j&&("forwardedAs"===j?E.as=k[j]:(c?c(j,s,x):!S||s(j))&&(E[j]=k[j]));return t.style&&v.style!==t.style&&(E.style=p({},t.style,{},v.style)),E.className=Array.prototype.concat(l,f,b!==f?b:null,t.className,v.className).filter(Boolean).join(" "),E.ref=w,(0,o.createElement)(x,E)}(k,e,t,j)};return O.displayName=h,(k=o.forwardRef(O)).attrs=x,k.componentStyle=E,k.displayName=h,k.shouldForwardProp=S,k.foldedComponentIds=r?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):v,k.styledComponentId=m,k.target=r?e.target:e,k.withComponent=function(e){var r=t.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["componentId"]),a=r&&r+"-"+(Oe(e)?e:Ee(b(e)));return ze(e,p({},o,{attrs:x,componentId:a}),n)},Object.defineProperty(k,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=r?Ae({},e.defaultProps,t):t}}),k.toString=function(){return"."+k.styledComponentId},a&&d()(k,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),k}var De=function(e){return function e(t,n,o){if(void 0===o&&(o=y),!(0,r.isValidElementType)(n))return O(1,String(n));var a=function(){return t(n,o,we.apply(void 0,arguments))};return a.withConfig=function(r){return e(t,n,p({},o,{},r))},a.attrs=function(r){return e(t,n,p({},o,{attrs:Array.prototype.concat(o.attrs,r).filter(Boolean)}))},a}(ze,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){De[e]=De(e)}));var Ie=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=Y(e),V.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(ge(this.rules,t,n,r).join(""),""),a=this.componentId+e;n.insertRules(a,a,o)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,r){e>2&&V.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},e}();function Me(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var a=we.apply(void 0,[e].concat(n)),i="sc-global-"+je(JSON.stringify(a)),u=new Ie(a,i);function l(e){var t=le(),n=ce(),r=(0,o.useContext)(Re),a=(0,o.useRef)(t.allocateGSInstance(i)).current;return t.server&&c(a,e,t,r,n),(0,o.useLayoutEffect)((function(){if(!t.server)return c(a,e,t,r,n),function(){return u.removeStyles(a,t)}}),[a,e,t,r,n]),null}function c(e,t,n,r,o){if(u.isStatic)u.renderStyles(e,j,n,o);else{var a=p({},t,{theme:xe(t,r,l.defaultProps)});u.renderStyles(e,a,n,o)}}return o.memo(l)}function Fe(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=we.apply(void 0,[e].concat(n)).join(""),a=je(o);return new fe(a,o)}var Be=function(){function e(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return"";var n=M();return"<style "+[n&&'nonce="'+n+'"',x+'="true"','data-styled-version="5.3.8"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?O(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return O(2);var n=((t={})[x]="",t["data-styled-version"]="5.3.8",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),r=M();return r&&(n.nonce=r),[o.createElement("style",p({},n,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new V({isServer:!0}),this.sealed=!1}var t=e.prototype;return t.collectStyles=function(e){return this.sealed?O(2):o.createElement(se,{sheet:this.instance},e)},t.interleaveWithNodeStream=function(e){return O(3)},e}(),Ue=function(e){var t=o.forwardRef((function(t,n){var r=(0,o.useContext)(Re),a=e.defaultProps,i=xe(t,r,a);return o.createElement(e,p({},t,{theme:i,ref:n}))}));return d()(t,e),t.displayName="WithTheme("+b(e)+")",t},$e=function(){return(0,o.useContext)(Re)},We={StyleSheet:V,masterSheet:ie},He=De},8421:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{l(r.next(e))}catch(e){a(e)}}function u(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}l((r=r.apply(e,t||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893),i=n(7294),u=n(9655),l=o(n(8079)),c=o(n(1956)),s=o(n(5008)),f=o(n(7941)),d=o(n(441)),p=o(n(9907)),h=o(n(6205)),m=o(n(201)),v=n(6902),y=n(8272),g=n(5818),b=o(n(5069));t.default=()=>{const e=(0,l.default)();(0,i.useEffect)((()=>{!function(){r(this,void 0,void 0,(function*(){localStorage.getItem("token")&&(yield e((0,g.fetchCheck)()))}))}()}),[]);const{pageNumber:t}=(0,u.useParams)();return(0,a.jsxs)(u.HashRouter,{children:[(0,a.jsx)(v.GlobalStyles,{}),(0,a.jsx)(y.GlobalFonts,{}),(0,a.jsx)(b.default,{}),(0,a.jsx)(u.Routes,{children:(0,a.jsxs)(u.Route,{element:(0,a.jsx)(c.default,{}),children:[(0,a.jsx)(u.Route,{path:`:${t}`,element:(0,a.jsx)(s.default,{})}),(0,a.jsx)(u.Route,{path:"/beers/:id",element:(0,a.jsx)(f.default,{})}),(0,a.jsx)(u.Route,{path:"/basket",element:(0,a.jsx)(d.default,{})}),(0,a.jsx)(u.Route,{path:"/form",element:(0,a.jsx)(p.default,{})}),(0,a.jsx)(u.Route,{path:"/login",element:(0,a.jsx)(h.default,{})}),(0,a.jsx)(u.Route,{path:"/profile",element:(0,a.jsx)(m.default,{})}),(0,a.jsx)(u.Route,{path:"/",element:(0,a.jsx)(u.Navigate,{replace:!0,to:"/page_1"})})]})})]})}},6678:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const u=n(5893),l=n(7294),c=i(n(44)),s=i(n(8079)),f=n(5818),d=a(n(6605));t.default=()=>{const e=(0,s.default)(),t=(0,c.default)((e=>({authorization:e.session.authorization,name:e.session.name}))),n={singOut:(0,l.useCallback)((()=>{e((0,f.fetchSignOut)())}),[])};return(0,u.jsx)(d.AuthorizationContainer,{children:t.authorization?(0,u.jsxs)(d.Wrapper,{children:[(0,u.jsx)(d.AutLink,{to:"/profile",children:t.name}),(0,u.jsx)(d.AutButton,{type:"button",onClick:n.singOut,children:"Sing Out"})]}):(0,u.jsx)(d.AutLinkSingIn,{to:"/login",children:"Sign In"})})}},6907:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});const i=n(5893),u=a(n(9650));t.default=()=>(0,i.jsx)(u.FooterStyle,{children:(0,i.jsx)(u.ContainerFooter,{children:(0,i.jsx)("p",{children:"Copyright @D.Stolyarova"})})})},7400:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});const i=n(5893),u=n(9412),l=a(n(5834));t.default=()=>(0,i.jsx)(l.HeaderStyle,{children:(0,i.jsxs)(l.HeaderContainer,{children:[(0,i.jsx)(l.LinkLogo,{to:"/",children:"Beer"}),(0,i.jsx)(l.LinkCart,{to:"/basket",children:(0,i.jsx)("img",{src:u,alt:"basket",width:40,height:40})})]})})},1956:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(5893),a=r(n(7400)),i=r(n(6907)),u=r(n(6678)),l=n(9655);t.default=()=>(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(u.default,{}),(0,o.jsx)(a.default,{}),(0,o.jsx)("main",{children:(0,o.jsx)(l.Outlet,{})}),(0,o.jsx)(i.default,{})]})},3062:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});const i=n(5893),u=a(n(4470));t.default=e=>(0,i.jsxs)(u.CommentsStyle,{children:[(0,i.jsx)(u.CommentsTitle,{children:"Reviews"}),(0,i.jsx)(u.CommentsList,{children:e.comments.length?e.comments.map(((e,t)=>(0,i.jsxs)("li",{children:[(0,i.jsx)("h3",{children:e.email.split("@")[0]}),(0,i.jsx)("p",{children:e.body})]},t))):(0,i.jsx)("li",{children:"No comments"})})]})},5008:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{l(r.next(e))}catch(e){a(e)}}function u(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}l((r=r.apply(e,t||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893),i=o(n(1353)),u=o(n(44)),l=o(n(8079)),c=n(5415),s=n(5415),f=o(n(2940)),d=o(n(5268));t.default=()=>{const e=(0,l.default)(),t=(0,u.default)((e=>({beersIds:(0,c.selectBeerIds)(e),status:e.beers.status,error:e.beers.error,count:e.beers.count}))),n=window.location.hash.split("_")[1];return(0,i.default)((()=>r(void 0,void 0,void 0,(function*(){yield e((0,c.fetchBeers)(n)),console.log("ef main")}))),[n]),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(f.default,{status:t.status,beersIds:t.beersIds,error:t.error}),(0,a.jsx)(d.default,{currentPage:Number(n),count:t.count,onhandler:t=>e((0,s.addCurrentPage)(t))})]})}},7941:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{l(r.next(e))}catch(e){a(e)}}function u(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}l((r=r.apply(e,t||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5893),i=n(7294),u=n(9655),l=o(n(8079)),c=o(n(44)),s=n(5415),f=n(1323),d=o(n(8362)),p=o(n(3062));t.default=()=>{const e=(0,l.default)(),{id:t}=(0,u.useParams)();(0,i.useEffect)((()=>{!function(){r(this,void 0,void 0,(function*(){yield e((0,s.fetchOneBeers)(t)),yield e((0,f.fetchComments)(t)),console.log("Effect OneBeer")}))}()}),[]);const n=(0,c.default)((e=>({status:e.beers.oneBeerStatus,error:e.beers.error,beer:e.beers.oneBeer,comments:e.comments.comments})));return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(d.default,{status:n.status,error:n.error,beerId:t,beer:n.beer}),(0,a.jsx)(p.default,{comments:n.comments})]})}},5415:function(e,t,n){"use strict";var r,o,a=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{l(r.next(e))}catch(e){a(e)}}function u(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}l((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.selectBeerIds=t.selectBeerById=t.selectAllBeers=t.removeFromBasketOneBeer=t.addToBasketOneBeer=t.deletingAllFromTheBasket=t.removeFromBasket=t.addCurrentPage=t.addToBasket=t.fetchBeers=t.fetchOneBeers=void 0;const i=n(3629),u={status:"idle",entities:{},ids:[],count:1,oneBeer:{isCart:!1},oneBeerStatus:"idle",currentPage:1,error:""},l=(0,i.createEntityAdapter)();l.getInitialState(u),t.fetchOneBeers=(0,i.createAsyncThunk)("beers/fetchOneBeers",(e=>a(void 0,void 0,void 0,(function*(){const t=yield fetch(`https://api.punkapi.com/v2/beers/${e}`),n=yield t.json();return yield function(){let t={};localStorage.getItem("basket")&&(t=JSON.parse(localStorage.getItem("basket")),t[e]?n[0].isCart=!0:n[0].isCart=!1)}(),n})))),t.fetchBeers=(0,i.createAsyncThunk)("beers/fetchBeers",(e=>a(void 0,void 0,void 0,(function*(){const t=yield fetch(`https://api.punkapi.com/v2/beers?page=${e}&per_page=12`),n=yield t.json();return yield function(){let e={};localStorage.getItem("basket")&&(e=JSON.parse(localStorage.getItem("basket")));for(let t=0;t<n.length;t++)e[n[t].id]?n[t].isCart=!0:n[t].isCart=!1}(),n}))));const c=(0,i.createSlice)({name:"beers",initialState:u,reducers:{addToBasket(e,t){e.entities[t.payload].isCart=!0},removeFromBasket(e,t){0!==e.ids.length&&(e.entities[t.payload].isCart=!1)},deletingAllFromTheBasket(e,t){if(0!==e.ids.length)for(let n=0;n<t.payload.length;n++)e.entities[t.payload[n]].isCart=!1},addCurrentPage(e,t){e.currentPage=t.payload},addToBasketOneBeer(e,t){e.entities[t.payload]&&(e.entities[t.payload].isCart=!0),e.oneBeer.isCart=!0},removeFromBasketOneBeer(e,t){e.entities[t.payload]&&(e.entities[t.payload].isCart=!1),e.oneBeer.isCart=!1}},extraReducers(e){e.addCase(t.fetchBeers.pending,(e=>{e.status="loading"})).addCase(t.fetchBeers.fulfilled,((e,t)=>{e.status="succeeded",e.count=Math.ceil(8),0!==e.ids.length&&l.removeAll(e),l.upsertMany(e,t.payload)})).addCase(t.fetchBeers.rejected,((e,t)=>{e.status="failed",e.error=t.error.message})).addCase(t.fetchOneBeers.pending,(e=>{e.oneBeerStatus="loading"})).addCase(t.fetchOneBeers.fulfilled,((e,t)=>{e.oneBeerStatus="succeeded",e.oneBeer=Object.assign({},t.payload[0])})).addCase(t.fetchOneBeers.rejected,((e,t)=>{e.oneBeerStatus="failed",e.error=t.error.message}))}});t.default=c.reducer,r=c.actions,t.addToBasket=r.addToBasket,t.addCurrentPage=r.addCurrentPage,t.removeFromBasket=r.removeFromBasket,t.deletingAllFromTheBasket=r.deletingAllFromTheBasket,t.addToBasketOneBeer=r.addToBasketOneBeer,t.removeFromBasketOneBeer=r.removeFromBasketOneBeer,o=l.getSelectors((e=>e.beers)),t.selectAllBeers=o.selectAll,t.selectBeerById=o.selectById,t.selectBeerIds=o.selectIds},1323:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{l(r.next(e))}catch(e){a(e)}}function u(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}l((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.fetchComments=void 0;const o=n(3629);t.fetchComments=(0,o.createAsyncThunk)("comments/fetchComments",(e=>r(void 0,void 0,void 0,(function*(){const t=yield fetch(`https://jsonplaceholder.typicode.com/comments?postId=${e}`);return yield t.json()}))));const a=(0,o.createSlice)({name:"comments",initialState:{comments:[],status:"idle",error:""},reducers:{},extraReducers(e){e.addCase(t.fetchComments.pending,(e=>{e.status="loading"})).addCase(t.fetchComments.fulfilled,((e,t)=>{e.status="succeeded",e.comments=t.payload})).addCase(t.fetchComments.rejected,(e=>{e.status="failed",e.error="failed"}))}});t.default=a.reducer},8079:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(6113).useDispatch;t.default=r},44:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(6113).useSelector;t.default=r},2629:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(5893),a=n(7294),i=n(745),u=r(n(8421)),l=n(6113),c=r(n(8923)),s=n(2788),f=n(1480),d=document.getElementById("root");(0,i.createRoot)(d).render((0,o.jsx)(a.StrictMode,{children:(0,o.jsx)(l.Provider,{store:c.default,children:(0,o.jsx)(s.ThemeProvider,{theme:f.theme,children:(0,o.jsx)(u.default,{})})})}))},8923:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(3629),a=r(n(5415)),i=r(n(1184)),u=r(n(5818)),l=r(n(841)),c=r(n(1323)),s=(0,o.configureStore)({reducer:{beers:a.default,basket:i.default,session:u.default,user:l.default,comments:c.default}});t.default=s},3250:function(e,t,n){"use strict";var r=n(7294),o="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},a=r.useState,i=r.useEffect,u=r.useLayoutEffect,l=r.useDebugValue;function c(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!o(e,n)}catch(e){return!0}}var s="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),r=a({inst:{value:n,getSnapshot:t}}),o=r[0].inst,s=r[1];return u((function(){o.value=n,o.getSnapshot=t,c(o)&&s({inst:o})}),[e,n,t]),i((function(){return c(o)&&s({inst:o}),e((function(){c(o)&&s({inst:o})}))}),[e]),l(n),n};t.useSyncExternalStore=void 0!==r.useSyncExternalStore?r.useSyncExternalStore:s},139:function(e,t,n){"use strict";var r=n(7294),o=n(1688),a="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},i=o.useSyncExternalStore,u=r.useRef,l=r.useEffect,c=r.useMemo,s=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,o){var f=u(null);if(null===f.current){var d={hasValue:!1,value:null};f.current=d}else d=f.current;f=c((function(){function e(e){if(!l){if(l=!0,i=e,e=r(e),void 0!==o&&d.hasValue){var t=d.value;if(o(t,e))return u=t}return u=e}if(t=u,a(i,e))return t;var n=r(e);return void 0!==o&&o(t,n)?t:(i=e,u=n)}var i,u,l=!1,c=void 0===n?null:n;return[function(){return e(t())},null===c?void 0:function(){return e(c())}]}),[t,n,r,o]);var p=i(e,f[0],f[1]);return l((function(){d.hasValue=!0,d.value=p}),[p]),s(p),p}},1688:function(e,t,n){"use strict";e.exports=n(3250)},2798:function(e,t,n){"use strict";e.exports=n(139)},9412:function(e,t,n){"use strict";e.exports=n.p+"7ac9efb47d97d6eaa210.svg"}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={exports:{}};return n[e].call(a.exports,a,a.exports,o),a.exports}o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,{a:t}),t},t=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var a=Object.create(null);o.r(a);var i={};e=e||[null,t({}),t([]),t(t)];for(var u=2&r&&n;"object"==typeof u&&!~e.indexOf(u);u=t(u))Object.getOwnPropertyNames(u).forEach((function(e){i[e]=function(){return n[e]}}));return i.default=function(){return n},o.d(a,i),a},o.d=function(e,t){for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},function(){var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&!e;)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e}(),o.nc=void 0,o(2629)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZUFBZWt4QyxFQUFTLGFBQWMsQ0FBRS8wQyxPQUFPLEdBQ3ZELGFDTkEsSUFBSWdvRyxFQUNBUixFQUFvQjFtRyxFQUFFbW5HLGdCQUFlRCxFQUFZUixFQUFvQjFtRyxFQUFFd29CLFNBQVcsSUFDdEYsSUFBSThCLEVBQVdvOEUsRUFBb0IxbUcsRUFBRXNxQixTQUNyQyxJQUFLNDhFLEdBQWE1OEUsSUFDYkEsRUFBUzg4RSxnQkFDWkYsRUFBWTU4RSxFQUFTODhFLGNBQWN6K0QsTUFDL0J1K0QsR0FBVyxDQUNmLElBQUlHLEVBQVUvOEUsRUFBU2c5RSxxQkFBcUIsVUFDNUMsR0FBR0QsRUFBUS9xRyxPQUVWLElBREEsSUFBSW9CLEVBQUkycEcsRUFBUS9xRyxPQUFTLEVBQ2xCb0IsR0FBSyxJQUFNd3BHLEdBQVdBLEVBQVlHLEVBQVEzcEcsS0FBS2lyQyxHQUV4RCxDQUlELElBQUt1K0QsRUFBVyxNQUFNLElBQUl4cUcsTUFBTSx5REFDaEN3cUcsRUFBWUEsRUFBVXg5RSxRQUFRLE9BQVEsSUFBSUEsUUFBUSxRQUFTLElBQUlBLFFBQVEsWUFBYSxLQUNwRmc5RSxFQUFvQmhvRyxFQUFJd29HLEtDbEJ4QlIsRUFBb0JhLFFBQUt6aUcsRUNHQzRoRyxFQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXJlYWN0L3dlYnBhY2svcnVudGltZS9jcmVhdGUgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL2ltbWVyL2Rpc3QvaW1tZXIuZXNtLm1qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Qcm9wZXJ0eUtleS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b1ByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3Jlc2VsZWN0L2VzL2RlZmF1bHRNZW1vaXplLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3Jlc2VsZWN0L2VzL2luZGV4LmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlZHV4LXRodW5rL2VzL2luZGV4LmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0ByZWR1eGpzL3Rvb2xraXQvZGlzdC9yZWR1eC10b29sa2l0LmVzbS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9AcmVtaXgtcnVuL3JvdXRlci9kaXN0L3JvdXRlci5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2FwcC9zdHlsZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Jhc2UvYXV0aG9yaXphdGlvbi9zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9iYXNlL2Zvb3Rlci9zdHlsZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Jhc2UvaGVhZGVyL3N0eWxlLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvdWkvYnV0dG9uLWJlZXIvc3R5bGUuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy91aS9idXR0b24tYmVlci9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9ibG9ja3MvYmVlci9zdHlsZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Jsb2Nrcy9iZWVyL2luZGV4LmpzeCIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL3VpL2J1dHRvbi9zdHlsZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL3VpL2J1dHRvbi9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9ibG9ja3MvY2FyZC1iZWVyL3N0eWxlLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvYmxvY2tzL2NhcmQtYmVlci9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9ibG9ja3MvYmVlcnMtbGlzdC9zdHlsZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Jsb2Nrcy9iZWVycy1saXN0L2luZGV4LmpzeCIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Jsb2Nrcy9jb21tZW50cy9zdHlsZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Jsb2Nrcy9wYWdpbmF0aW9uL3N0eWxlLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvYmxvY2tzL3BhZ2luYXRpb24vaW5kZXguanN4Iiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvYmxvY2tzL2NhcmQtYmVlci1iYXNrZXQvc3R5bGUuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9ibG9ja3MvY2FyZC1iZWVyLWJhc2tldC9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9wYWdlL2Jhc2tldC9zdHlsZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL3BhZ2UvYmFza2V0L2luZGV4LmpzeCIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Jsb2Nrcy9saXN0LW9yZGVyL3N0eWxlLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvYmxvY2tzL2xpc3Qtb3JkZXIvaW5kZXguanN4Iiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvdWkvd3JhcHBlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL3VpL2J1dHRvbi1zaWduL3N0eWxlLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvdWkvYnV0dG9uLXNpZ24vaW5kZXguanN4Iiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvdWkvbW9kYWwvc3R5bGUuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy91aS9tb2RhbC9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy91aS9pbnB1dC9zdHlsZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL3VpL2lucHV0L2luZGV4LmpzeCIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL3BhZ2UvZm9ybS1wYWdlL3N0eWxlLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvcGFnZS9mb3JtLXBhZ2UvaW5kZXguanN4Iiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvdWkvaW5wdXQtbG9naW4vc3R5bGUuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy91aS9pbnB1dC1sb2dpbi9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9ibG9ja3MvZm9ybS9zdHlsZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Jsb2Nrcy9mb3JtL2luZGV4LmpzeCIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Jsb2Nrcy90ZXN0L3N0eWxlLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvYmxvY2tzL3Rlc3QvaW5kZXguanN4Iiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvcGFnZS9sb2dpbi9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9ibG9ja3MvcHJvZmlsZS1jYXJkL3N0eWxlLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvYmxvY2tzL3Byb2ZpbGUtY2FyZC9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9wYWdlL3Byb2ZpbGUvaW5kZXguanN4Iiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvdGhlbWUvdGhlbWUuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy91aS9jb250YWluZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy91aS9zY3JvbGwtdG8tdG9wL2luZGV4LmpzeCIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL3VpL3NwaW5uZXIvaW5kZXguanN4Iiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2ZlYXR1cmVzL2Jhc2tldFNsaWNlLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2ZlYXR1cmVzL3Nlc3Npb24tc2xpY2UuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvZmVhdHVyZXMvdXNlci1zbGljZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9mb250cy9mb250cy5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9ob29rcy91c2UtaW5pdC5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9zdHlsZS9taXhpbnMuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvbG9kYXNoLmRlYm91bmNlL2luZGV4LmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9iYXRjaC5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlUmVkdXhDb250ZXh0LmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3VzZVN5bmNFeHRlcm5hbFN0b3JlLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVNlbGVjdG9yLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvaW52YWxpZEFyZ0ZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tZXJnZVByb3BzLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmluZEFjdGlvbkNyZWF0b3JzLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU3RvcmUuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlRGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3NoYWxsb3dlcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsaXMvZGlzdC9zdHlsaXMuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC91bml0bGVzcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmVzbS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvZW1vdGlvbi1tZW1vaXplLmVzbS5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9kaXN0L3N0eWxlZC1jb21wb25lbnRzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvYXBwL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2Jhc2UvYXV0aG9yaXphdGlvbi9pbmRleC50c3giLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9iYXNlL2Zvb3Rlci9pbmRleC50c3giLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9iYXNlL2hlYWRlci9pbmRleC50c3giLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9iYXNlL2xheW91dC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvY29tcG9uZW50cy9ibG9ja3MvY29tbWVudHMvaW5kZXgudHN4Iiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvcGFnZS9tYWluL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9jb21wb25lbnRzL3BhZ2Uvb25lLWJlZXIvaW5kZXgudHN4Iiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2ZlYXR1cmVzL2JlZXJzLXNsaWNlLnRzIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2ZlYXR1cmVzL2NvbW1lbnRzLXNsaWNlLnRzIiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL2hvb2tzL3VzZS1kaXNwYXRjaC50cyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL3NyYy9ob29rcy91c2Utc2VsZWN0b3IudHMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9zcmMvaW5kZXgudHN4Iiwid2VicGFjazovL215LXJlYWN0Ly4vc3JjL3N0b3JlLnRzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL2Nqcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL215LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL2Nqcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltL3dpdGgtc2VsZWN0b3IucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3QvLi9ub2RlX21vZHVsZXMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvc2hpbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9teS1yZWFjdC8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL3dpdGgtc2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vbXktcmVhY3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbXktcmVhY3Qvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vbXktcmVhY3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL215LXJlYWN0L3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vbXktcmVhY3Qvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9teS1yZWFjdC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL215LXJlYWN0L3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL215LXJlYWN0L3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9teS1yZWFjdC93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mID8gZnVuY3Rpb24ob2JqKSB7IHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKTsgfSA6IGZ1bmN0aW9uKG9iaikgeyByZXR1cm4gb2JqLl9fcHJvdG9fXzsgfTtcbnZhciBsZWFmUHJvdG90eXBlcztcbi8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLy8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLy8gbW9kZSAmIDE2OiByZXR1cm4gdmFsdWUgd2hlbiBpdCdzIFByb21pc2UtbGlrZVxuLy8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuX193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcblx0aWYobW9kZSAmIDEpIHZhbHVlID0gdGhpcyh2YWx1ZSk7XG5cdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG5cdGlmKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUpIHtcblx0XHRpZigobW9kZSAmIDQpICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcblx0XHRpZigobW9kZSAmIDE2KSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZhbHVlO1xuXHR9XG5cdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG5cdHZhciBkZWYgPSB7fTtcblx0bGVhZlByb3RvdHlwZXMgPSBsZWFmUHJvdG90eXBlcyB8fCBbbnVsbCwgZ2V0UHJvdG8oe30pLCBnZXRQcm90byhbXSksIGdldFByb3RvKGdldFByb3RvKV07XG5cdGZvcih2YXIgY3VycmVudCA9IG1vZGUgJiAyICYmIHZhbHVlOyB0eXBlb2YgY3VycmVudCA9PSAnb2JqZWN0JyAmJiAhfmxlYWZQcm90b3R5cGVzLmluZGV4T2YoY3VycmVudCk7IGN1cnJlbnQgPSBnZXRQcm90byhjdXJyZW50KSkge1xuXHRcdE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGN1cnJlbnQpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7IGRlZltrZXldID0gZnVuY3Rpb24oKSB7IHJldHVybiB2YWx1ZVtrZXldOyB9OyB9KTtcblx0fVxuXHRkZWZbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdmFsdWU7IH07XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChucywgZGVmKTtcblx0cmV0dXJuIG5zO1xufTsiLCJmdW5jdGlvbiBuKG4pe2Zvcih2YXIgcj1hcmd1bWVudHMubGVuZ3RoLHQ9QXJyYXkocj4xP3ItMTowKSxlPTE7ZTxyO2UrKyl0W2UtMV09YXJndW1lbnRzW2VdO2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpe3ZhciBpPVlbbl0sbz1pP1wiZnVuY3Rpb25cIj09dHlwZW9mIGk/aS5hcHBseShudWxsLHQpOmk6XCJ1bmtub3duIGVycm9yIG5yOiBcIituO3Rocm93IEVycm9yKFwiW0ltbWVyXSBcIitvKX10aHJvdyBFcnJvcihcIltJbW1lcl0gbWluaWZpZWQgZXJyb3IgbnI6IFwiK24rKHQubGVuZ3RoP1wiIFwiK3QubWFwKChmdW5jdGlvbihuKXtyZXR1cm5cIidcIituK1wiJ1wifSkpLmpvaW4oXCIsXCIpOlwiXCIpK1wiLiBGaW5kIHRoZSBmdWxsIGVycm9yIGF0OiBodHRwczovL2JpdC5seS8zY1hFS1dmXCIpfWZ1bmN0aW9uIHIobil7cmV0dXJuISFuJiYhIW5bUV19ZnVuY3Rpb24gdChuKXt2YXIgcjtyZXR1cm4hIW4mJihmdW5jdGlvbihuKXtpZighbnx8XCJvYmplY3RcIiE9dHlwZW9mIG4pcmV0dXJuITE7dmFyIHI9T2JqZWN0LmdldFByb3RvdHlwZU9mKG4pO2lmKG51bGw9PT1yKXJldHVybiEwO3ZhciB0PU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHIsXCJjb25zdHJ1Y3RvclwiKSYmci5jb25zdHJ1Y3RvcjtyZXR1cm4gdD09PU9iamVjdHx8XCJmdW5jdGlvblwiPT10eXBlb2YgdCYmRnVuY3Rpb24udG9TdHJpbmcuY2FsbCh0KT09PVp9KG4pfHxBcnJheS5pc0FycmF5KG4pfHwhIW5bTF18fCEhKG51bGw9PT0ocj1uLmNvbnN0cnVjdG9yKXx8dm9pZCAwPT09cj92b2lkIDA6cltMXSl8fHMobil8fHYobikpfWZ1bmN0aW9uIGUodCl7cmV0dXJuIHIodCl8fG4oMjMsdCksdFtRXS50fWZ1bmN0aW9uIGkobixyLHQpe3ZvaWQgMD09PXQmJih0PSExKSwwPT09byhuKT8odD9PYmplY3Qua2V5czpubikobikuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dCYmXCJzeW1ib2xcIj09dHlwZW9mIGV8fHIoZSxuW2VdLG4pfSkpOm4uZm9yRWFjaCgoZnVuY3Rpb24odCxlKXtyZXR1cm4gcihlLHQsbil9KSl9ZnVuY3Rpb24gbyhuKXt2YXIgcj1uW1FdO3JldHVybiByP3IuaT4zP3IuaS00OnIuaTpBcnJheS5pc0FycmF5KG4pPzE6cyhuKT8yOnYobik/MzowfWZ1bmN0aW9uIHUobixyKXtyZXR1cm4gMj09PW8obik/bi5oYXMocik6T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4scil9ZnVuY3Rpb24gYShuLHIpe3JldHVybiAyPT09byhuKT9uLmdldChyKTpuW3JdfWZ1bmN0aW9uIGYobixyLHQpe3ZhciBlPW8obik7Mj09PWU/bi5zZXQocix0KTozPT09ZT9uLmFkZCh0KTpuW3JdPXR9ZnVuY3Rpb24gYyhuLHIpe3JldHVybiBuPT09cj8wIT09bnx8MS9uPT0xL3I6biE9biYmciE9cn1mdW5jdGlvbiBzKG4pe3JldHVybiBYJiZuIGluc3RhbmNlb2YgTWFwfWZ1bmN0aW9uIHYobil7cmV0dXJuIHEmJm4gaW5zdGFuY2VvZiBTZXR9ZnVuY3Rpb24gcChuKXtyZXR1cm4gbi5vfHxuLnR9ZnVuY3Rpb24gbChuKXtpZihBcnJheS5pc0FycmF5KG4pKXJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChuKTt2YXIgcj1ybihuKTtkZWxldGUgcltRXTtmb3IodmFyIHQ9bm4ociksZT0wO2U8dC5sZW5ndGg7ZSsrKXt2YXIgaT10W2VdLG89cltpXTshMT09PW8ud3JpdGFibGUmJihvLndyaXRhYmxlPSEwLG8uY29uZmlndXJhYmxlPSEwKSwoby5nZXR8fG8uc2V0KSYmKHJbaV09e2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCxlbnVtZXJhYmxlOm8uZW51bWVyYWJsZSx2YWx1ZTpuW2ldfSl9cmV0dXJuIE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG4pLHIpfWZ1bmN0aW9uIGQobixlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITEpLHkobil8fHIobil8fCF0KG4pfHwobyhuKT4xJiYobi5zZXQ9bi5hZGQ9bi5jbGVhcj1uLmRlbGV0ZT1oKSxPYmplY3QuZnJlZXplKG4pLGUmJmkobiwoZnVuY3Rpb24obixyKXtyZXR1cm4gZChyLCEwKX0pLCEwKSksbn1mdW5jdGlvbiBoKCl7bigyKX1mdW5jdGlvbiB5KG4pe3JldHVybiBudWxsPT1ufHxcIm9iamVjdFwiIT10eXBlb2Ygbnx8T2JqZWN0LmlzRnJvemVuKG4pfWZ1bmN0aW9uIGIocil7dmFyIHQ9dG5bcl07cmV0dXJuIHR8fG4oMTgsciksdH1mdW5jdGlvbiBtKG4scil7dG5bbl18fCh0bltuXT1yKX1mdW5jdGlvbiBfKCl7cmV0dXJuXCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVnx8VXx8bigwKSxVfWZ1bmN0aW9uIGoobixyKXtyJiYoYihcIlBhdGNoZXNcIiksbi51PVtdLG4ucz1bXSxuLnY9cil9ZnVuY3Rpb24gZyhuKXtPKG4pLG4ucC5mb3JFYWNoKFMpLG4ucD1udWxsfWZ1bmN0aW9uIE8obil7bj09PVUmJihVPW4ubCl9ZnVuY3Rpb24gdyhuKXtyZXR1cm4gVT17cDpbXSxsOlUsaDpuLG06ITAsXzowfX1mdW5jdGlvbiBTKG4pe3ZhciByPW5bUV07MD09PXIuaXx8MT09PXIuaT9yLmooKTpyLmc9ITB9ZnVuY3Rpb24gUChyLGUpe2UuXz1lLnAubGVuZ3RoO3ZhciBpPWUucFswXSxvPXZvaWQgMCE9PXImJnIhPT1pO3JldHVybiBlLmguT3x8YihcIkVTNVwiKS5TKGUscixvKSxvPyhpW1FdLlAmJihnKGUpLG4oNCkpLHQocikmJihyPU0oZSxyKSxlLmx8fHgoZSxyKSksZS51JiZiKFwiUGF0Y2hlc1wiKS5NKGlbUV0udCxyLGUudSxlLnMpKTpyPU0oZSxpLFtdKSxnKGUpLGUudSYmZS52KGUudSxlLnMpLHIhPT1IP3I6dm9pZCAwfWZ1bmN0aW9uIE0obixyLHQpe2lmKHkocikpcmV0dXJuIHI7dmFyIGU9cltRXTtpZighZSlyZXR1cm4gaShyLChmdW5jdGlvbihpLG8pe3JldHVybiBBKG4sZSxyLGksbyx0KX0pLCEwKSxyO2lmKGUuQSE9PW4pcmV0dXJuIHI7aWYoIWUuUClyZXR1cm4geChuLGUudCwhMCksZS50O2lmKCFlLkkpe2UuST0hMCxlLkEuXy0tO3ZhciBvPTQ9PT1lLml8fDU9PT1lLmk/ZS5vPWwoZS5rKTplLm8sdT1vLGE9ITE7Mz09PWUuaSYmKHU9bmV3IFNldChvKSxvLmNsZWFyKCksYT0hMCksaSh1LChmdW5jdGlvbihyLGkpe3JldHVybiBBKG4sZSxvLHIsaSx0LGEpfSkpLHgobixvLCExKSx0JiZuLnUmJmIoXCJQYXRjaGVzXCIpLk4oZSx0LG4udSxuLnMpfXJldHVybiBlLm99ZnVuY3Rpb24gQShlLGksbyxhLGMscyx2KXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZjPT09byYmbig1KSxyKGMpKXt2YXIgcD1NKGUsYyxzJiZpJiYzIT09aS5pJiYhdShpLlIsYSk/cy5jb25jYXQoYSk6dm9pZCAwKTtpZihmKG8sYSxwKSwhcihwKSlyZXR1cm47ZS5tPSExfWVsc2UgdiYmby5hZGQoYyk7aWYodChjKSYmIXkoYykpe2lmKCFlLmguRCYmZS5fPDEpcmV0dXJuO00oZSxjKSxpJiZpLkEubHx8eChlLGMpfX1mdW5jdGlvbiB4KG4scix0KXt2b2lkIDA9PT10JiYodD0hMSksIW4ubCYmbi5oLkQmJm4ubSYmZChyLHQpfWZ1bmN0aW9uIHoobixyKXt2YXIgdD1uW1FdO3JldHVybih0P3AodCk6bilbcl19ZnVuY3Rpb24gSShuLHIpe2lmKHIgaW4gbilmb3IodmFyIHQ9T2JqZWN0LmdldFByb3RvdHlwZU9mKG4pO3Q7KXt2YXIgZT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQscik7aWYoZSlyZXR1cm4gZTt0PU9iamVjdC5nZXRQcm90b3R5cGVPZih0KX19ZnVuY3Rpb24gayhuKXtuLlB8fChuLlA9ITAsbi5sJiZrKG4ubCkpfWZ1bmN0aW9uIEUobil7bi5vfHwobi5vPWwobi50KSl9ZnVuY3Rpb24gTihuLHIsdCl7dmFyIGU9cyhyKT9iKFwiTWFwU2V0XCIpLkYocix0KTp2KHIpP2IoXCJNYXBTZXRcIikuVChyLHQpOm4uTz9mdW5jdGlvbihuLHIpe3ZhciB0PUFycmF5LmlzQXJyYXkobiksZT17aTp0PzE6MCxBOnI/ci5BOl8oKSxQOiExLEk6ITEsUjp7fSxsOnIsdDpuLGs6bnVsbCxvOm51bGwsajpudWxsLEM6ITF9LGk9ZSxvPWVuO3QmJihpPVtlXSxvPW9uKTt2YXIgdT1Qcm94eS5yZXZvY2FibGUoaSxvKSxhPXUucmV2b2tlLGY9dS5wcm94eTtyZXR1cm4gZS5rPWYsZS5qPWEsZn0ocix0KTpiKFwiRVM1XCIpLkoocix0KTtyZXR1cm4odD90LkE6XygpKS5wLnB1c2goZSksZX1mdW5jdGlvbiBSKGUpe3JldHVybiByKGUpfHxuKDIyLGUpLGZ1bmN0aW9uIG4ocil7aWYoIXQocikpcmV0dXJuIHI7dmFyIGUsdT1yW1FdLGM9byhyKTtpZih1KXtpZighdS5QJiYodS5pPDR8fCFiKFwiRVM1XCIpLksodSkpKXJldHVybiB1LnQ7dS5JPSEwLGU9RChyLGMpLHUuST0hMX1lbHNlIGU9RChyLGMpO3JldHVybiBpKGUsKGZ1bmN0aW9uKHIsdCl7dSYmYSh1LnQscik9PT10fHxmKGUscixuKHQpKX0pKSwzPT09Yz9uZXcgU2V0KGUpOmV9KGUpfWZ1bmN0aW9uIEQobixyKXtzd2l0Y2gocil7Y2FzZSAyOnJldHVybiBuZXcgTWFwKG4pO2Nhc2UgMzpyZXR1cm4gQXJyYXkuZnJvbShuKX1yZXR1cm4gbChuKX1mdW5jdGlvbiBGKCl7ZnVuY3Rpb24gdChuLHIpe3ZhciB0PXNbbl07cmV0dXJuIHQ/dC5lbnVtZXJhYmxlPXI6c1tuXT10PXtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTpyLGdldDpmdW5jdGlvbigpe3ZhciByPXRoaXNbUV07cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmZihyKSxlbi5nZXQocixuKX0sc2V0OmZ1bmN0aW9uKHIpe3ZhciB0PXRoaXNbUV07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmZih0KSxlbi5zZXQodCxuLHIpfX0sdH1mdW5jdGlvbiBlKG4pe2Zvcih2YXIgcj1uLmxlbmd0aC0xO3I+PTA7ci0tKXt2YXIgdD1uW3JdW1FdO2lmKCF0LlApc3dpdGNoKHQuaSl7Y2FzZSA1OmEodCkmJmsodCk7YnJlYWs7Y2FzZSA0Om8odCkmJmsodCl9fX1mdW5jdGlvbiBvKG4pe2Zvcih2YXIgcj1uLnQsdD1uLmssZT1ubih0KSxpPWUubGVuZ3RoLTE7aT49MDtpLS0pe3ZhciBvPWVbaV07aWYobyE9PVEpe3ZhciBhPXJbb107aWYodm9pZCAwPT09YSYmIXUocixvKSlyZXR1cm4hMDt2YXIgZj10W29dLHM9ZiYmZltRXTtpZihzP3MudCE9PWE6IWMoZixhKSlyZXR1cm4hMH19dmFyIHY9ISFyW1FdO3JldHVybiBlLmxlbmd0aCE9PW5uKHIpLmxlbmd0aCsodj8wOjEpfWZ1bmN0aW9uIGEobil7dmFyIHI9bi5rO2lmKHIubGVuZ3RoIT09bi50Lmxlbmd0aClyZXR1cm4hMDt2YXIgdD1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsci5sZW5ndGgtMSk7aWYodCYmIXQuZ2V0KXJldHVybiEwO2Zvcih2YXIgZT0wO2U8ci5sZW5ndGg7ZSsrKWlmKCFyLmhhc093blByb3BlcnR5KGUpKXJldHVybiEwO3JldHVybiExfWZ1bmN0aW9uIGYocil7ci5nJiZuKDMsSlNPTi5zdHJpbmdpZnkocChyKSkpfXZhciBzPXt9O20oXCJFUzVcIix7SjpmdW5jdGlvbihuLHIpe3ZhciBlPUFycmF5LmlzQXJyYXkobiksaT1mdW5jdGlvbihuLHIpe2lmKG4pe2Zvcih2YXIgZT1BcnJheShyLmxlbmd0aCksaT0wO2k8ci5sZW5ndGg7aSsrKU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiXCIraSx0KGksITApKTtyZXR1cm4gZX12YXIgbz1ybihyKTtkZWxldGUgb1tRXTtmb3IodmFyIHU9bm4obyksYT0wO2E8dS5sZW5ndGg7YSsrKXt2YXIgZj11W2FdO29bZl09dChmLG58fCEhb1tmXS5lbnVtZXJhYmxlKX1yZXR1cm4gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2Yociksbyl9KGUsbiksbz17aTplPzU6NCxBOnI/ci5BOl8oKSxQOiExLEk6ITEsUjp7fSxsOnIsdDpuLGs6aSxvOm51bGwsZzohMSxDOiExfTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGksUSx7dmFsdWU6byx3cml0YWJsZTohMH0pLGl9LFM6ZnVuY3Rpb24obix0LG8pe28/cih0KSYmdFtRXS5BPT09biYmZShuLnApOihuLnUmJmZ1bmN0aW9uIG4ocil7aWYociYmXCJvYmplY3RcIj09dHlwZW9mIHIpe3ZhciB0PXJbUV07aWYodCl7dmFyIGU9dC50LG89dC5rLGY9dC5SLGM9dC5pO2lmKDQ9PT1jKWkobywoZnVuY3Rpb24ocil7ciE9PVEmJih2b2lkIDAhPT1lW3JdfHx1KGUscik/ZltyXXx8bihvW3JdKTooZltyXT0hMCxrKHQpKSl9KSksaShlLChmdW5jdGlvbihuKXt2b2lkIDAhPT1vW25dfHx1KG8sbil8fChmW25dPSExLGsodCkpfSkpO2Vsc2UgaWYoNT09PWMpe2lmKGEodCkmJihrKHQpLGYubGVuZ3RoPSEwKSxvLmxlbmd0aDxlLmxlbmd0aClmb3IodmFyIHM9by5sZW5ndGg7czxlLmxlbmd0aDtzKyspZltzXT0hMTtlbHNlIGZvcih2YXIgdj1lLmxlbmd0aDt2PG8ubGVuZ3RoO3YrKylmW3ZdPSEwO2Zvcih2YXIgcD1NYXRoLm1pbihvLmxlbmd0aCxlLmxlbmd0aCksbD0wO2w8cDtsKyspby5oYXNPd25Qcm9wZXJ0eShsKXx8KGZbbF09ITApLHZvaWQgMD09PWZbbF0mJm4ob1tsXSl9fX19KG4ucFswXSksZShuLnApKX0sSzpmdW5jdGlvbihuKXtyZXR1cm4gND09PW4uaT9vKG4pOmEobil9fSl9ZnVuY3Rpb24gVCgpe2Z1bmN0aW9uIGUobil7aWYoIXQobikpcmV0dXJuIG47aWYoQXJyYXkuaXNBcnJheShuKSlyZXR1cm4gbi5tYXAoZSk7aWYocyhuKSlyZXR1cm4gbmV3IE1hcChBcnJheS5mcm9tKG4uZW50cmllcygpKS5tYXAoKGZ1bmN0aW9uKG4pe3JldHVybltuWzBdLGUoblsxXSldfSkpKTtpZih2KG4pKXJldHVybiBuZXcgU2V0KEFycmF5LmZyb20obikubWFwKGUpKTt2YXIgcj1PYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihuKSk7Zm9yKHZhciBpIGluIG4pcltpXT1lKG5baV0pO3JldHVybiB1KG4sTCkmJihyW0xdPW5bTF0pLHJ9ZnVuY3Rpb24gZihuKXtyZXR1cm4gcihuKT9lKG4pOm59dmFyIGM9XCJhZGRcIjttKFwiUGF0Y2hlc1wiLHskOmZ1bmN0aW9uKHIsdCl7cmV0dXJuIHQuZm9yRWFjaCgoZnVuY3Rpb24odCl7Zm9yKHZhciBpPXQucGF0aCx1PXQub3AsZj1yLHM9MDtzPGkubGVuZ3RoLTE7cysrKXt2YXIgdj1vKGYpLHA9aVtzXTtcInN0cmluZ1wiIT10eXBlb2YgcCYmXCJudW1iZXJcIiE9dHlwZW9mIHAmJihwPVwiXCIrcCksMCE9PXYmJjEhPT12fHxcIl9fcHJvdG9fX1wiIT09cCYmXCJjb25zdHJ1Y3RvclwiIT09cHx8bigyNCksXCJmdW5jdGlvblwiPT10eXBlb2YgZiYmXCJwcm90b3R5cGVcIj09PXAmJm4oMjQpLFwib2JqZWN0XCIhPXR5cGVvZihmPWEoZixwKSkmJm4oMTUsaS5qb2luKFwiL1wiKSl9dmFyIGw9byhmKSxkPWUodC52YWx1ZSksaD1pW2kubGVuZ3RoLTFdO3N3aXRjaCh1KXtjYXNlXCJyZXBsYWNlXCI6c3dpdGNoKGwpe2Nhc2UgMjpyZXR1cm4gZi5zZXQoaCxkKTtjYXNlIDM6bigxNik7ZGVmYXVsdDpyZXR1cm4gZltoXT1kfWNhc2UgYzpzd2l0Y2gobCl7Y2FzZSAxOnJldHVyblwiLVwiPT09aD9mLnB1c2goZCk6Zi5zcGxpY2UoaCwwLGQpO2Nhc2UgMjpyZXR1cm4gZi5zZXQoaCxkKTtjYXNlIDM6cmV0dXJuIGYuYWRkKGQpO2RlZmF1bHQ6cmV0dXJuIGZbaF09ZH1jYXNlXCJyZW1vdmVcIjpzd2l0Y2gobCl7Y2FzZSAxOnJldHVybiBmLnNwbGljZShoLDEpO2Nhc2UgMjpyZXR1cm4gZi5kZWxldGUoaCk7Y2FzZSAzOnJldHVybiBmLmRlbGV0ZSh0LnZhbHVlKTtkZWZhdWx0OnJldHVybiBkZWxldGUgZltoXX1kZWZhdWx0Om4oMTcsdSl9fSkpLHJ9LE46ZnVuY3Rpb24obixyLHQsZSl7c3dpdGNoKG4uaSl7Y2FzZSAwOmNhc2UgNDpjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKG4scix0LGUpe3ZhciBvPW4udCxzPW4ubztpKG4uUiwoZnVuY3Rpb24obixpKXt2YXIgdj1hKG8sbikscD1hKHMsbiksbD1pP3UobyxuKT9cInJlcGxhY2VcIjpjOlwicmVtb3ZlXCI7aWYodiE9PXB8fFwicmVwbGFjZVwiIT09bCl7dmFyIGQ9ci5jb25jYXQobik7dC5wdXNoKFwicmVtb3ZlXCI9PT1sP3tvcDpsLHBhdGg6ZH06e29wOmwscGF0aDpkLHZhbHVlOnB9KSxlLnB1c2gobD09PWM/e29wOlwicmVtb3ZlXCIscGF0aDpkfTpcInJlbW92ZVwiPT09bD97b3A6YyxwYXRoOmQsdmFsdWU6Zih2KX06e29wOlwicmVwbGFjZVwiLHBhdGg6ZCx2YWx1ZTpmKHYpfSl9fSkpfShuLHIsdCxlKTtjYXNlIDU6Y2FzZSAxOnJldHVybiBmdW5jdGlvbihuLHIsdCxlKXt2YXIgaT1uLnQsbz1uLlIsdT1uLm87aWYodS5sZW5ndGg8aS5sZW5ndGgpe3ZhciBhPVt1LGldO2k9YVswXSx1PWFbMV07dmFyIHM9W2UsdF07dD1zWzBdLGU9c1sxXX1mb3IodmFyIHY9MDt2PGkubGVuZ3RoO3YrKylpZihvW3ZdJiZ1W3ZdIT09aVt2XSl7dmFyIHA9ci5jb25jYXQoW3ZdKTt0LnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6cCx2YWx1ZTpmKHVbdl0pfSksZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOnAsdmFsdWU6ZihpW3ZdKX0pfWZvcih2YXIgbD1pLmxlbmd0aDtsPHUubGVuZ3RoO2wrKyl7dmFyIGQ9ci5jb25jYXQoW2xdKTt0LnB1c2goe29wOmMscGF0aDpkLHZhbHVlOmYodVtsXSl9KX1pLmxlbmd0aDx1Lmxlbmd0aCYmZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOnIuY29uY2F0KFtcImxlbmd0aFwiXSksdmFsdWU6aS5sZW5ndGh9KX0obixyLHQsZSk7Y2FzZSAzOnJldHVybiBmdW5jdGlvbihuLHIsdCxlKXt2YXIgaT1uLnQsbz1uLm8sdT0wO2kuZm9yRWFjaCgoZnVuY3Rpb24obil7aWYoIW8uaGFzKG4pKXt2YXIgaT1yLmNvbmNhdChbdV0pO3QucHVzaCh7b3A6XCJyZW1vdmVcIixwYXRoOmksdmFsdWU6bn0pLGUudW5zaGlmdCh7b3A6YyxwYXRoOmksdmFsdWU6bn0pfXUrK30pKSx1PTAsby5mb3JFYWNoKChmdW5jdGlvbihuKXtpZighaS5oYXMobikpe3ZhciBvPXIuY29uY2F0KFt1XSk7dC5wdXNoKHtvcDpjLHBhdGg6byx2YWx1ZTpufSksZS51bnNoaWZ0KHtvcDpcInJlbW92ZVwiLHBhdGg6byx2YWx1ZTpufSl9dSsrfSkpfShuLHIsdCxlKX19LE06ZnVuY3Rpb24obixyLHQsZSl7dC5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOltdLHZhbHVlOnI9PT1IP3ZvaWQgMDpyfSksZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOltdLHZhbHVlOm59KX19KX1mdW5jdGlvbiBDKCl7ZnVuY3Rpb24gcihuLHIpe2Z1bmN0aW9uIHQoKXt0aGlzLmNvbnN0cnVjdG9yPW59YShuLHIpLG4ucHJvdG90eXBlPSh0LnByb3RvdHlwZT1yLnByb3RvdHlwZSxuZXcgdCl9ZnVuY3Rpb24gZShuKXtuLm98fChuLlI9bmV3IE1hcCxuLm89bmV3IE1hcChuLnQpKX1mdW5jdGlvbiBvKG4pe24ub3x8KG4ubz1uZXcgU2V0LG4udC5mb3JFYWNoKChmdW5jdGlvbihyKXtpZih0KHIpKXt2YXIgZT1OKG4uQS5oLHIsbik7bi5wLnNldChyLGUpLG4uby5hZGQoZSl9ZWxzZSBuLm8uYWRkKHIpfSkpKX1mdW5jdGlvbiB1KHIpe3IuZyYmbigzLEpTT04uc3RyaW5naWZ5KHAocikpKX12YXIgYT1mdW5jdGlvbihuLHIpe3JldHVybihhPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihuLHIpe24uX19wcm90b19fPXJ9fHxmdW5jdGlvbihuLHIpe2Zvcih2YXIgdCBpbiByKXIuaGFzT3duUHJvcGVydHkodCkmJihuW3RdPXJbdF0pfSkobixyKX0sZj1mdW5jdGlvbigpe2Z1bmN0aW9uIG4obixyKXtyZXR1cm4gdGhpc1tRXT17aToyLGw6cixBOnI/ci5BOl8oKSxQOiExLEk6ITEsbzp2b2lkIDAsUjp2b2lkIDAsdDpuLGs6dGhpcyxDOiExLGc6ITF9LHRoaXN9cihuLE1hcCk7dmFyIG89bi5wcm90b3R5cGU7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5zaXplfX0pLG8uaGFzPWZ1bmN0aW9uKG4pe3JldHVybiBwKHRoaXNbUV0pLmhhcyhuKX0sby5zZXQ9ZnVuY3Rpb24obixyKXt2YXIgdD10aGlzW1FdO3JldHVybiB1KHQpLHAodCkuaGFzKG4pJiZwKHQpLmdldChuKT09PXJ8fChlKHQpLGsodCksdC5SLnNldChuLCEwKSx0Lm8uc2V0KG4sciksdC5SLnNldChuLCEwKSksdGhpc30sby5kZWxldGU9ZnVuY3Rpb24obil7aWYoIXRoaXMuaGFzKG4pKXJldHVybiExO3ZhciByPXRoaXNbUV07cmV0dXJuIHUociksZShyKSxrKHIpLHIudC5oYXMobik/ci5SLnNldChuLCExKTpyLlIuZGVsZXRlKG4pLHIuby5kZWxldGUobiksITB9LG8uY2xlYXI9ZnVuY3Rpb24oKXt2YXIgbj10aGlzW1FdO3UobikscChuKS5zaXplJiYoZShuKSxrKG4pLG4uUj1uZXcgTWFwLGkobi50LChmdW5jdGlvbihyKXtuLlIuc2V0KHIsITEpfSkpLG4uby5jbGVhcigpKX0sby5mb3JFYWNoPWZ1bmN0aW9uKG4scil7dmFyIHQ9dGhpcztwKHRoaXNbUV0pLmZvckVhY2goKGZ1bmN0aW9uKGUsaSl7bi5jYWxsKHIsdC5nZXQoaSksaSx0KX0pKX0sby5nZXQ9ZnVuY3Rpb24obil7dmFyIHI9dGhpc1tRXTt1KHIpO3ZhciBpPXAocikuZ2V0KG4pO2lmKHIuSXx8IXQoaSkpcmV0dXJuIGk7aWYoaSE9PXIudC5nZXQobikpcmV0dXJuIGk7dmFyIG89TihyLkEuaCxpLHIpO3JldHVybiBlKHIpLHIuby5zZXQobixvKSxvfSxvLmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5rZXlzKCl9LG8udmFsdWVzPWZ1bmN0aW9uKCl7dmFyIG4scj10aGlzLHQ9dGhpcy5rZXlzKCk7cmV0dXJuKG49e30pW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHIudmFsdWVzKCl9LG4ubmV4dD1mdW5jdGlvbigpe3ZhciBuPXQubmV4dCgpO3JldHVybiBuLmRvbmU/bjp7ZG9uZTohMSx2YWx1ZTpyLmdldChuLnZhbHVlKX19LG59LG8uZW50cmllcz1mdW5jdGlvbigpe3ZhciBuLHI9dGhpcyx0PXRoaXMua2V5cygpO3JldHVybihuPXt9KVtWXT1mdW5jdGlvbigpe3JldHVybiByLmVudHJpZXMoKX0sbi5uZXh0PWZ1bmN0aW9uKCl7dmFyIG49dC5uZXh0KCk7aWYobi5kb25lKXJldHVybiBuO3ZhciBlPXIuZ2V0KG4udmFsdWUpO3JldHVybntkb25lOiExLHZhbHVlOltuLnZhbHVlLGVdfX0sbn0sb1tWXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVudHJpZXMoKX0sbn0oKSxjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuLHIpe3JldHVybiB0aGlzW1FdPXtpOjMsbDpyLEE6cj9yLkE6XygpLFA6ITEsSTohMSxvOnZvaWQgMCx0Om4sazp0aGlzLHA6bmV3IE1hcCxnOiExLEM6ITF9LHRoaXN9cihuLFNldCk7dmFyIHQ9bi5wcm90b3R5cGU7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5zaXplfX0pLHQuaGFzPWZ1bmN0aW9uKG4pe3ZhciByPXRoaXNbUV07cmV0dXJuIHUociksci5vPyEhci5vLmhhcyhuKXx8ISghci5wLmhhcyhuKXx8IXIuby5oYXMoci5wLmdldChuKSkpOnIudC5oYXMobil9LHQuYWRkPWZ1bmN0aW9uKG4pe3ZhciByPXRoaXNbUV07cmV0dXJuIHUociksdGhpcy5oYXMobil8fChvKHIpLGsociksci5vLmFkZChuKSksdGhpc30sdC5kZWxldGU9ZnVuY3Rpb24obil7aWYoIXRoaXMuaGFzKG4pKXJldHVybiExO3ZhciByPXRoaXNbUV07cmV0dXJuIHUociksbyhyKSxrKHIpLHIuby5kZWxldGUobil8fCEhci5wLmhhcyhuKSYmci5vLmRlbGV0ZShyLnAuZ2V0KG4pKX0sdC5jbGVhcj1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07dShuKSxwKG4pLnNpemUmJihvKG4pLGsobiksbi5vLmNsZWFyKCkpfSx0LnZhbHVlcz1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksbyhuKSxuLm8udmFsdWVzKCl9LHQuZW50cmllcz1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksbyhuKSxuLm8uZW50cmllcygpfSx0LmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZXMoKX0sdFtWXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlcygpfSx0LmZvckVhY2g9ZnVuY3Rpb24obixyKXtmb3IodmFyIHQ9dGhpcy52YWx1ZXMoKSxlPXQubmV4dCgpOyFlLmRvbmU7KW4uY2FsbChyLGUudmFsdWUsZS52YWx1ZSx0aGlzKSxlPXQubmV4dCgpfSxufSgpO20oXCJNYXBTZXRcIix7RjpmdW5jdGlvbihuLHIpe3JldHVybiBuZXcgZihuLHIpfSxUOmZ1bmN0aW9uKG4scil7cmV0dXJuIG5ldyBjKG4scil9fSl9ZnVuY3Rpb24gSigpe0YoKSxDKCksVCgpfWZ1bmN0aW9uIEsobil7cmV0dXJuIG59ZnVuY3Rpb24gJChuKXtyZXR1cm4gbn12YXIgRyxVLFc9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbChcInhcIiksWD1cInVuZGVmaW5lZFwiIT10eXBlb2YgTWFwLHE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFNldCxCPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm94eSYmdm9pZCAwIT09UHJveHkucmV2b2NhYmxlJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCxIPVc/U3ltYm9sLmZvcihcImltbWVyLW5vdGhpbmdcIik6KChHPXt9KVtcImltbWVyLW5vdGhpbmdcIl09ITAsRyksTD1XP1N5bWJvbC5mb3IoXCJpbW1lci1kcmFmdGFibGVcIik6XCJfXyRpbW1lcl9kcmFmdGFibGVcIixRPVc/U3ltYm9sLmZvcihcImltbWVyLXN0YXRlXCIpOlwiX18kaW1tZXJfc3RhdGVcIixWPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcnx8XCJAQGl0ZXJhdG9yXCIsWT17MDpcIklsbGVnYWwgc3RhdGVcIiwxOlwiSW1tZXIgZHJhZnRzIGNhbm5vdCBoYXZlIGNvbXB1dGVkIHByb3BlcnRpZXNcIiwyOlwiVGhpcyBvYmplY3QgaGFzIGJlZW4gZnJvemVuIGFuZCBzaG91bGQgbm90IGJlIG11dGF0ZWRcIiwzOmZ1bmN0aW9uKG4pe3JldHVyblwiQ2Fubm90IHVzZSBhIHByb3h5IHRoYXQgaGFzIGJlZW4gcmV2b2tlZC4gRGlkIHlvdSBwYXNzIGFuIG9iamVjdCBmcm9tIGluc2lkZSBhbiBpbW1lciBmdW5jdGlvbiB0byBhbiBhc3luYyBwcm9jZXNzPyBcIitufSw0OlwiQW4gaW1tZXIgcHJvZHVjZXIgcmV0dXJuZWQgYSBuZXcgdmFsdWUgKmFuZCogbW9kaWZpZWQgaXRzIGRyYWZ0LiBFaXRoZXIgcmV0dXJuIGEgbmV3IHZhbHVlICpvciogbW9kaWZ5IHRoZSBkcmFmdC5cIiw1OlwiSW1tZXIgZm9yYmlkcyBjaXJjdWxhciByZWZlcmVuY2VzXCIsNjpcIlRoZSBmaXJzdCBvciBzZWNvbmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvblwiLDc6XCJUaGUgdGhpcmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvbiBvciB1bmRlZmluZWRcIiw4OlwiRmlyc3QgYXJndW1lbnQgdG8gYGNyZWF0ZURyYWZ0YCBtdXN0IGJlIGEgcGxhaW4gb2JqZWN0LCBhbiBhcnJheSwgb3IgYW4gaW1tZXJhYmxlIG9iamVjdFwiLDk6XCJGaXJzdCBhcmd1bWVudCB0byBgZmluaXNoRHJhZnRgIG11c3QgYmUgYSBkcmFmdCByZXR1cm5lZCBieSBgY3JlYXRlRHJhZnRgXCIsMTA6XCJUaGUgZ2l2ZW4gZHJhZnQgaXMgYWxyZWFkeSBmaW5hbGl6ZWRcIiwxMTpcIk9iamVjdC5kZWZpbmVQcm9wZXJ0eSgpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIsMTI6XCJPYmplY3Quc2V0UHJvdG90eXBlT2YoKSBjYW5ub3QgYmUgdXNlZCBvbiBhbiBJbW1lciBkcmFmdFwiLDEzOlwiSW1tZXIgb25seSBzdXBwb3J0cyBkZWxldGluZyBhcnJheSBpbmRpY2VzXCIsMTQ6XCJJbW1lciBvbmx5IHN1cHBvcnRzIHNldHRpbmcgYXJyYXkgaW5kaWNlcyBhbmQgdGhlICdsZW5ndGgnIHByb3BlcnR5XCIsMTU6ZnVuY3Rpb24obil7cmV0dXJuXCJDYW5ub3QgYXBwbHkgcGF0Y2gsIHBhdGggZG9lc24ndCByZXNvbHZlOiBcIitufSwxNjonU2V0cyBjYW5ub3QgaGF2ZSBcInJlcGxhY2VcIiBwYXRjaGVzLicsMTc6ZnVuY3Rpb24obil7cmV0dXJuXCJVbnN1cHBvcnRlZCBwYXRjaCBvcGVyYXRpb246IFwiK259LDE4OmZ1bmN0aW9uKG4pe3JldHVyblwiVGhlIHBsdWdpbiBmb3IgJ1wiK24rXCInIGhhcyBub3QgYmVlbiBsb2FkZWQgaW50byBJbW1lci4gVG8gZW5hYmxlIHRoZSBwbHVnaW4sIGltcG9ydCBhbmQgY2FsbCBgZW5hYmxlXCIrbitcIigpYCB3aGVuIGluaXRpYWxpemluZyB5b3VyIGFwcGxpY2F0aW9uLlwifSwyMDpcIkNhbm5vdCB1c2UgcHJveGllcyBpZiBQcm94eSwgUHJveHkucmV2b2NhYmxlIG9yIFJlZmxlY3QgYXJlIG5vdCBhdmFpbGFibGVcIiwyMTpmdW5jdGlvbihuKXtyZXR1cm5cInByb2R1Y2UgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHRoaW5ncyB0aGF0IGFyZSBkcmFmdGFibGU6IHBsYWluIG9iamVjdHMsIGFycmF5cywgTWFwLCBTZXQgb3IgY2xhc3NlcyB0aGF0IGFyZSBtYXJrZWQgd2l0aCAnW2ltbWVyYWJsZV06IHRydWUnLiBHb3QgJ1wiK24rXCInXCJ9LDIyOmZ1bmN0aW9uKG4pe3JldHVyblwiJ2N1cnJlbnQnIGV4cGVjdHMgYSBkcmFmdCwgZ290OiBcIitufSwyMzpmdW5jdGlvbihuKXtyZXR1cm5cIidvcmlnaW5hbCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6IFwiK259LDI0OlwiUGF0Y2hpbmcgcmVzZXJ2ZWQgYXR0cmlidXRlcyBsaWtlIF9fcHJvdG9fXywgcHJvdG90eXBlIGFuZCBjb25zdHJ1Y3RvciBpcyBub3QgYWxsb3dlZFwifSxaPVwiXCIrT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcixubj1cInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5vd25LZXlzP1JlZmxlY3Qub3duS2V5czp2b2lkIDAhPT1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP2Z1bmN0aW9uKG4pe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhuKSl9Ok9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLHJuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzfHxmdW5jdGlvbihuKXt2YXIgcj17fTtyZXR1cm4gbm4obikuZm9yRWFjaCgoZnVuY3Rpb24odCl7clt0XT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG4sdCl9KSkscn0sdG49e30sZW49e2dldDpmdW5jdGlvbihuLHIpe2lmKHI9PT1RKXJldHVybiBuO3ZhciBlPXAobik7aWYoIXUoZSxyKSlyZXR1cm4gZnVuY3Rpb24obixyLHQpe3ZhciBlLGk9SShyLHQpO3JldHVybiBpP1widmFsdWVcImluIGk/aS52YWx1ZTpudWxsPT09KGU9aS5nZXQpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmNhbGwobi5rKTp2b2lkIDB9KG4sZSxyKTt2YXIgaT1lW3JdO3JldHVybiBuLkl8fCF0KGkpP2k6aT09PXoobi50LHIpPyhFKG4pLG4ub1tyXT1OKG4uQS5oLGksbikpOml9LGhhczpmdW5jdGlvbihuLHIpe3JldHVybiByIGluIHAobil9LG93bktleXM6ZnVuY3Rpb24obil7cmV0dXJuIFJlZmxlY3Qub3duS2V5cyhwKG4pKX0sc2V0OmZ1bmN0aW9uKG4scix0KXt2YXIgZT1JKHAobikscik7aWYobnVsbD09ZT92b2lkIDA6ZS5zZXQpcmV0dXJuIGUuc2V0LmNhbGwobi5rLHQpLCEwO2lmKCFuLlApe3ZhciBpPXoocChuKSxyKSxvPW51bGw9PWk/dm9pZCAwOmlbUV07aWYobyYmby50PT09dClyZXR1cm4gbi5vW3JdPXQsbi5SW3JdPSExLCEwO2lmKGModCxpKSYmKHZvaWQgMCE9PXR8fHUobi50LHIpKSlyZXR1cm4hMDtFKG4pLGsobil9cmV0dXJuIG4ub1tyXT09PXQmJih2b2lkIDAhPT10fHxyIGluIG4ubyl8fE51bWJlci5pc05hTih0KSYmTnVtYmVyLmlzTmFOKG4ub1tyXSl8fChuLm9bcl09dCxuLlJbcl09ITApLCEwfSxkZWxldGVQcm9wZXJ0eTpmdW5jdGlvbihuLHIpe3JldHVybiB2b2lkIDAhPT16KG4udCxyKXx8ciBpbiBuLnQ/KG4uUltyXT0hMSxFKG4pLGsobikpOmRlbGV0ZSBuLlJbcl0sbi5vJiZkZWxldGUgbi5vW3JdLCEwfSxnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ZnVuY3Rpb24obixyKXt2YXIgdD1wKG4pLGU9UmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtyZXR1cm4gZT97d3JpdGFibGU6ITAsY29uZmlndXJhYmxlOjEhPT1uLml8fFwibGVuZ3RoXCIhPT1yLGVudW1lcmFibGU6ZS5lbnVtZXJhYmxlLHZhbHVlOnRbcl19OmV9LGRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKCl7bigxMSl9LGdldFByb3RvdHlwZU9mOmZ1bmN0aW9uKG4pe3JldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobi50KX0sc2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24oKXtuKDEyKX19LG9uPXt9O2koZW4sKGZ1bmN0aW9uKG4scil7b25bbl09ZnVuY3Rpb24oKXtyZXR1cm4gYXJndW1lbnRzWzBdPWFyZ3VtZW50c1swXVswXSxyLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KSksb24uZGVsZXRlUHJvcGVydHk9ZnVuY3Rpb24ocix0KXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZpc05hTihwYXJzZUludCh0KSkmJm4oMTMpLG9uLnNldC5jYWxsKHRoaXMscix0LHZvaWQgMCl9LG9uLnNldD1mdW5jdGlvbihyLHQsZSl7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJsZW5ndGhcIiE9PXQmJmlzTmFOKHBhcnNlSW50KHQpKSYmbigxNCksZW4uc2V0LmNhbGwodGhpcyxyWzBdLHQsZSxyWzBdKX07dmFyIHVuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShyKXt2YXIgZT10aGlzO3RoaXMuTz1CLHRoaXMuRD0hMCx0aGlzLnByb2R1Y2U9ZnVuY3Rpb24ocixpLG8pe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHImJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGkpe3ZhciB1PWk7aT1yO3ZhciBhPWU7cmV0dXJuIGZ1bmN0aW9uKG4pe3ZhciByPXRoaXM7dm9pZCAwPT09biYmKG49dSk7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsZT1BcnJheSh0PjE/dC0xOjApLG89MTtvPHQ7bysrKWVbby0xXT1hcmd1bWVudHNbb107cmV0dXJuIGEucHJvZHVjZShuLChmdW5jdGlvbihuKXt2YXIgdDtyZXR1cm4odD1pKS5jYWxsLmFwcGx5KHQsW3Isbl0uY29uY2F0KGUpKX0pKX19dmFyIGY7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgaSYmbig2KSx2b2lkIDAhPT1vJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBvJiZuKDcpLHQocikpe3ZhciBjPXcoZSkscz1OKGUscix2b2lkIDApLHY9ITA7dHJ5e2Y9aShzKSx2PSExfWZpbmFsbHl7dj9nKGMpOk8oYyl9cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb21pc2UmJmYgaW5zdGFuY2VvZiBQcm9taXNlP2YudGhlbigoZnVuY3Rpb24obil7cmV0dXJuIGooYyxvKSxQKG4sYyl9KSwoZnVuY3Rpb24obil7dGhyb3cgZyhjKSxufSkpOihqKGMsbyksUChmLGMpKX1pZighcnx8XCJvYmplY3RcIiE9dHlwZW9mIHIpe2lmKHZvaWQgMD09PShmPWkocikpJiYoZj1yKSxmPT09SCYmKGY9dm9pZCAwKSxlLkQmJmQoZiwhMCksbyl7dmFyIHA9W10sbD1bXTtiKFwiUGF0Y2hlc1wiKS5NKHIsZixwLGwpLG8ocCxsKX1yZXR1cm4gZn1uKDIxLHIpfSx0aGlzLnByb2R1Y2VXaXRoUGF0Y2hlcz1mdW5jdGlvbihuLHIpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG4pcmV0dXJuIGZ1bmN0aW9uKHIpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGk9QXJyYXkodD4xP3QtMTowKSxvPTE7bzx0O28rKylpW28tMV09YXJndW1lbnRzW29dO3JldHVybiBlLnByb2R1Y2VXaXRoUGF0Y2hlcyhyLChmdW5jdGlvbihyKXtyZXR1cm4gbi5hcHBseSh2b2lkIDAsW3JdLmNvbmNhdChpKSl9KSl9O3ZhciB0LGksbz1lLnByb2R1Y2UobixyLChmdW5jdGlvbihuLHIpe3Q9bixpPXJ9KSk7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb21pc2UmJm8gaW5zdGFuY2VvZiBQcm9taXNlP28udGhlbigoZnVuY3Rpb24obil7cmV0dXJuW24sdCxpXX0pKTpbbyx0LGldfSxcImJvb2xlYW5cIj09dHlwZW9mKG51bGw9PXI/dm9pZCAwOnIudXNlUHJveGllcykmJnRoaXMuc2V0VXNlUHJveGllcyhyLnVzZVByb3hpZXMpLFwiYm9vbGVhblwiPT10eXBlb2YobnVsbD09cj92b2lkIDA6ci5hdXRvRnJlZXplKSYmdGhpcy5zZXRBdXRvRnJlZXplKHIuYXV0b0ZyZWV6ZSl9dmFyIGk9ZS5wcm90b3R5cGU7cmV0dXJuIGkuY3JlYXRlRHJhZnQ9ZnVuY3Rpb24oZSl7dChlKXx8big4KSxyKGUpJiYoZT1SKGUpKTt2YXIgaT13KHRoaXMpLG89Tih0aGlzLGUsdm9pZCAwKTtyZXR1cm4gb1tRXS5DPSEwLE8oaSksb30saS5maW5pc2hEcmFmdD1mdW5jdGlvbihyLHQpe3ZhciBlPXImJnJbUV07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKGUmJmUuQ3x8big5KSxlLkkmJm4oMTApKTt2YXIgaT1lLkE7cmV0dXJuIGooaSx0KSxQKHZvaWQgMCxpKX0saS5zZXRBdXRvRnJlZXplPWZ1bmN0aW9uKG4pe3RoaXMuRD1ufSxpLnNldFVzZVByb3hpZXM9ZnVuY3Rpb24ocil7ciYmIUImJm4oMjApLHRoaXMuTz1yfSxpLmFwcGx5UGF0Y2hlcz1mdW5jdGlvbihuLHQpe3ZhciBlO2ZvcihlPXQubGVuZ3RoLTE7ZT49MDtlLS0pe3ZhciBpPXRbZV07aWYoMD09PWkucGF0aC5sZW5ndGgmJlwicmVwbGFjZVwiPT09aS5vcCl7bj1pLnZhbHVlO2JyZWFrfX1lPi0xJiYodD10LnNsaWNlKGUrMSkpO3ZhciBvPWIoXCJQYXRjaGVzXCIpLiQ7cmV0dXJuIHIobik/byhuLHQpOnRoaXMucHJvZHVjZShuLChmdW5jdGlvbihuKXtyZXR1cm4gbyhuLHQpfSkpfSxlfSgpLGFuPW5ldyB1bixmbj1hbi5wcm9kdWNlLGNuPWFuLnByb2R1Y2VXaXRoUGF0Y2hlcy5iaW5kKGFuKSxzbj1hbi5zZXRBdXRvRnJlZXplLmJpbmQoYW4pLHZuPWFuLnNldFVzZVByb3hpZXMuYmluZChhbikscG49YW4uYXBwbHlQYXRjaGVzLmJpbmQoYW4pLGxuPWFuLmNyZWF0ZURyYWZ0LmJpbmQoYW4pLGRuPWFuLmZpbmlzaERyYWZ0LmJpbmQoYW4pO2V4cG9ydCBkZWZhdWx0IGZuO2V4cG9ydHt1biBhcyBJbW1lcixwbiBhcyBhcHBseVBhdGNoZXMsSyBhcyBjYXN0RHJhZnQsJCBhcyBjYXN0SW1tdXRhYmxlLGxuIGFzIGNyZWF0ZURyYWZ0LFIgYXMgY3VycmVudCxKIGFzIGVuYWJsZUFsbFBsdWdpbnMsRiBhcyBlbmFibGVFUzUsQyBhcyBlbmFibGVNYXBTZXQsVCBhcyBlbmFibGVQYXRjaGVzLGRuIGFzIGZpbmlzaERyYWZ0LGQgYXMgZnJlZXplLEwgYXMgaW1tZXJhYmxlLHIgYXMgaXNEcmFmdCx0IGFzIGlzRHJhZnRhYmxlLEggYXMgbm90aGluZyxlIGFzIG9yaWdpbmFsLGZuIGFzIHByb2R1Y2UsY24gYXMgcHJvZHVjZVdpdGhQYXRjaGVzLHNuIGFzIHNldEF1dG9GcmVlemUsdm4gYXMgc2V0VXNlUHJveGllc307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbW1lci5lc20uanMubWFwXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgfSwgX3R5cGVvZihvYmopO1xufSIsImltcG9ydCB0b1Byb3BlcnR5S2V5IGZyb20gXCIuL3RvUHJvcGVydHlLZXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAga2V5ID0gdG9Qcm9wZXJ0eUtleShrZXkpO1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gb2JqO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCIuL3R5cGVvZi5qc1wiO1xuaW1wb3J0IHRvUHJpbWl0aXZlIGZyb20gXCIuL3RvUHJpbWl0aXZlLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7XG4gIHJldHVybiBfdHlwZW9mKGtleSkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkge1xuICBpZiAoX3R5cGVvZihpbnB1dCkgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDtcbiAgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdO1xuICBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCBcImRlZmF1bHRcIik7XG4gICAgaWYgKF90eXBlb2YocmVzKSAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlcztcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7XG59IiwiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCIuL2RlZmluZVByb3BlcnR5LmpzXCI7XG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgIGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTtcbiAgICBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMic7XG5cbi8qKlxuICogQWRhcHRlZCBmcm9tIFJlYWN0OiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9tYXN0ZXIvcGFja2FnZXMvc2hhcmVkL2Zvcm1hdFByb2RFcnJvck1lc3NhZ2UuanNcbiAqXG4gKiBEbyBub3QgcmVxdWlyZSB0aGlzIG1vZHVsZSBkaXJlY3RseSEgVXNlIG5vcm1hbCB0aHJvdyBlcnJvciBjYWxscy4gVGhlc2UgbWVzc2FnZXMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGVycm9yIGNvZGVzXG4gKiBkdXJpbmcgYnVpbGQuXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICovXG5mdW5jdGlvbiBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKGNvZGUpIHtcbiAgcmV0dXJuIFwiTWluaWZpZWQgUmVkdXggZXJyb3IgI1wiICsgY29kZSArIFwiOyB2aXNpdCBodHRwczovL3JlZHV4LmpzLm9yZy9FcnJvcnM/Y29kZT1cIiArIGNvZGUgKyBcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciBcIiArICd1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzLiAnO1xufVxuXG4vLyBJbmxpbmVkIHZlcnNpb24gb2YgdGhlIGBzeW1ib2wtb2JzZXJ2YWJsZWAgcG9seWZpbGxcbnZhciAkJG9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wub2JzZXJ2YWJsZSB8fCAnQEBvYnNlcnZhYmxlJztcbn0pKCk7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vLyBJbmxpbmVkIC8gc2hvcnRlbmVkIHZlcnNpb24gb2YgYGtpbmRPZmAgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9raW5kLW9mXG5mdW5jdGlvbiBtaW5pS2luZE9mKHZhbCkge1xuICBpZiAodmFsID09PSB2b2lkIDApIHJldHVybiAndW5kZWZpbmVkJztcbiAgaWYgKHZhbCA9PT0gbnVsbCkgcmV0dXJuICdudWxsJztcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdzeW1ib2wnOlxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICB9XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSByZXR1cm4gJ2FycmF5JztcbiAgaWYgKGlzRGF0ZSh2YWwpKSByZXR1cm4gJ2RhdGUnO1xuICBpZiAoaXNFcnJvcih2YWwpKSByZXR1cm4gJ2Vycm9yJztcbiAgdmFyIGNvbnN0cnVjdG9yTmFtZSA9IGN0b3JOYW1lKHZhbCk7XG5cbiAgc3dpdGNoIChjb25zdHJ1Y3Rvck5hbWUpIHtcbiAgICBjYXNlICdTeW1ib2wnOlxuICAgIGNhc2UgJ1Byb21pc2UnOlxuICAgIGNhc2UgJ1dlYWtNYXAnOlxuICAgIGNhc2UgJ1dlYWtTZXQnOlxuICAgIGNhc2UgJ01hcCc6XG4gICAgY2FzZSAnU2V0JzpcbiAgICAgIHJldHVybiBjb25zdHJ1Y3Rvck5hbWU7XG4gIH0gLy8gb3RoZXJcblxuXG4gIHJldHVybiB0eXBlLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCAnJyk7XG59XG5cbmZ1bmN0aW9uIGN0b3JOYW1lKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbC5jb25zdHJ1Y3RvciA9PT0gJ2Z1bmN0aW9uJyA/IHZhbC5jb25zdHJ1Y3Rvci5uYW1lIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNFcnJvcih2YWwpIHtcbiAgcmV0dXJuIHZhbCBpbnN0YW5jZW9mIEVycm9yIHx8IHR5cGVvZiB2YWwubWVzc2FnZSA9PT0gJ3N0cmluZycgJiYgdmFsLmNvbnN0cnVjdG9yICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3Iuc3RhY2tUcmFjZUxpbWl0ID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIHRydWU7XG4gIHJldHVybiB0eXBlb2YgdmFsLnRvRGF0ZVN0cmluZyA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsLmdldERhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbC5zZXREYXRlID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBraW5kT2YodmFsKSB7XG4gIHZhciB0eXBlT2ZWYWwgPSB0eXBlb2YgdmFsO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdHlwZU9mVmFsID0gbWluaUtpbmRPZih2YWwpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGVPZlZhbDtcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZFxuICpcbiAqICoqV2UgcmVjb21tZW5kIHVzaW5nIHRoZSBgY29uZmlndXJlU3RvcmVgIG1ldGhvZFxuICogb2YgdGhlIGBAcmVkdXhqcy90b29sa2l0YCBwYWNrYWdlKiosIHdoaWNoIHJlcGxhY2VzIGBjcmVhdGVTdG9yZWAuXG4gKlxuICogUmVkdXggVG9vbGtpdCBpcyBvdXIgcmVjb21tZW5kZWQgYXBwcm9hY2ggZm9yIHdyaXRpbmcgUmVkdXggbG9naWMgdG9kYXksXG4gKiBpbmNsdWRpbmcgc3RvcmUgc2V0dXAsIHJlZHVjZXJzLCBkYXRhIGZldGNoaW5nLCBhbmQgbW9yZS5cbiAqXG4gKiAqKkZvciBtb3JlIGRldGFpbHMsIHBsZWFzZSByZWFkIHRoaXMgUmVkdXggZG9jcyBwYWdlOioqXG4gKiAqKmh0dHBzOi8vcmVkdXguanMub3JnL2ludHJvZHVjdGlvbi93aHktcnRrLWlzLXJlZHV4LXRvZGF5KipcbiAqXG4gKiBgY29uZmlndXJlU3RvcmVgIGZyb20gUmVkdXggVG9vbGtpdCBpcyBhbiBpbXByb3ZlZCB2ZXJzaW9uIG9mIGBjcmVhdGVTdG9yZWAgdGhhdFxuICogc2ltcGxpZmllcyBzZXR1cCBhbmQgaGVscHMgYXZvaWQgY29tbW9uIGJ1Z3MuXG4gKlxuICogWW91IHNob3VsZCBub3QgYmUgdXNpbmcgdGhlIGByZWR1eGAgY29yZSBwYWNrYWdlIGJ5IGl0c2VsZiB0b2RheSwgZXhjZXB0IGZvciBsZWFybmluZyBwdXJwb3Nlcy5cbiAqIFRoZSBgY3JlYXRlU3RvcmVgIG1ldGhvZCBmcm9tIHRoZSBjb3JlIGByZWR1eGAgcGFja2FnZSB3aWxsIG5vdCBiZSByZW1vdmVkLCBidXQgd2UgZW5jb3VyYWdlXG4gKiBhbGwgdXNlcnMgdG8gbWlncmF0ZSB0byB1c2luZyBSZWR1eCBUb29sa2l0IGZvciBhbGwgUmVkdXggY29kZS5cbiAqXG4gKiBJZiB5b3Ugd2FudCB0byB1c2UgYGNyZWF0ZVN0b3JlYCB3aXRob3V0IHRoaXMgdmlzdWFsIGRlcHJlY2F0aW9uIHdhcm5pbmcsIHVzZVxuICogdGhlIGBsZWdhY3lfY3JlYXRlU3RvcmVgIGltcG9ydCBpbnN0ZWFkOlxuICpcbiAqIGBpbXBvcnQgeyBsZWdhY3lfY3JlYXRlU3RvcmUgYXMgY3JlYXRlU3RvcmV9IGZyb20gJ3JlZHV4J2BcbiAqXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDApIDogJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbi4gU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC00LXN0b3JlI2NyZWF0aW5nLWEtc3RvcmUtd2l0aC1lbmhhbmNlcnMgZm9yIGFuIGV4YW1wbGUuJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxKSA6IFwiRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YoZW5oYW5jZXIpICsgXCInXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMikgOiBcIkV4cGVjdGVkIHRoZSByb290IHJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihyZWR1Y2VyKSArIFwiJ1wiKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50UmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBjdXJyZW50U3RhdGUgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgdmFyIGN1cnJlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICB2YXIgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAvKipcbiAgICogVGhpcyBtYWtlcyBhIHNoYWxsb3cgY29weSBvZiBjdXJyZW50TGlzdGVuZXJzIHNvIHdlIGNhbiB1c2VcbiAgICogbmV4dExpc3RlbmVycyBhcyBhIHRlbXBvcmFyeSBsaXN0IHdoaWxlIGRpc3BhdGNoaW5nLlxuICAgKlxuICAgKiBUaGlzIHByZXZlbnRzIGFueSBidWdzIGFyb3VuZCBjb25zdW1lcnMgY2FsbGluZ1xuICAgKiBzdWJzY3JpYmUvdW5zdWJzY3JpYmUgaW4gdGhlIG1pZGRsZSBvZiBhIGRpc3BhdGNoLlxuICAgKi9cblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMykgOiAnWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0KSA6IFwiRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YobGlzdGVuZXIpICsgXCInXCIpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1KSA6ICdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGkvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDYpIDogJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBjdXJyZW50TGlzdGVuZXJzID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGFjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDcpIDogXCJBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gSW5zdGVhZCwgdGhlIGFjdHVhbCB0eXBlIHdhczogJ1wiICsga2luZE9mKGFjdGlvbikgKyBcIicuIFlvdSBtYXkgbmVlZCB0byBhZGQgbWlkZGxld2FyZSB0byB5b3VyIHN0b3JlIHNldHVwIHRvIGhhbmRsZSBkaXNwYXRjaGluZyBvdGhlciB2YWx1ZXMsIHN1Y2ggYXMgJ3JlZHV4LXRodW5rJyB0byBoYW5kbGUgZGlzcGF0Y2hpbmcgZnVuY3Rpb25zLiBTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjbWlkZGxld2FyZSBhbmQgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTYtYXN5bmMtbG9naWMjdXNpbmctdGhlLXJlZHV4LXRodW5rLW1pZGRsZXdhcmUgZm9yIGV4YW1wbGVzLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOCkgOiAnQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiBZb3UgbWF5IGhhdmUgbWlzc3BlbGxlZCBhbiBhY3Rpb24gdHlwZSBzdHJpbmcgY29uc3RhbnQuJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDkpIDogJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMCkgOiBcIkV4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKG5leHRSZWR1Y2VyKSk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjsgLy8gVGhpcyBhY3Rpb24gaGFzIGEgc2ltaWxpYXIgZWZmZWN0IHRvIEFjdGlvblR5cGVzLklOSVQuXG4gICAgLy8gQW55IHJlZHVjZXJzIHRoYXQgZXhpc3RlZCBpbiBib3RoIHRoZSBuZXcgYW5kIG9sZCByb290UmVkdWNlclxuICAgIC8vIHdpbGwgcmVjZWl2ZSB0aGUgcHJldmlvdXMgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gICAgLy8gdGhlIG5ldyBzdGF0ZSB0cmVlIHdpdGggYW55IHJlbGV2YW50IGRhdGEgZnJvbSB0aGUgb2xkIG9uZS5cblxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDExKSA6IFwiRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihvYnNlcnZlcikgKyBcIidcIik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfSAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cblxuXG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gIH0pO1xuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqXG4gKiAqKldlIHJlY29tbWVuZCB1c2luZyBgY29uZmlndXJlU3RvcmVgIGZyb20gdGhlXG4gKiBgQHJlZHV4anMvdG9vbGtpdGAgcGFja2FnZSoqLCB3aGljaCByZXBsYWNlcyBgY3JlYXRlU3RvcmVgOlxuICogKipodHRwczovL3JlZHV4LmpzLm9yZy9pbnRyb2R1Y3Rpb24vd2h5LXJ0ay1pcy1yZWR1eC10b2RheSoqXG4gKlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbnZhciBsZWdhY3lfY3JlYXRlU3RvcmUgPSBjcmVhdGVTdG9yZTtcblxuLyoqXG4gKiBQcmludHMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgd2FybmluZyBtZXNzYWdlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuXG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuXG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsga2luZE9mKGlucHV0U3RhdGUpICsgXCJcXFwiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIFwiICsgKFwia2V5czogXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCJcIik7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gXCJVbmV4cGVjdGVkIFwiICsgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyAna2V5cycgOiAna2V5JykgKyBcIiBcIiArIChcIlxcXCJcIiArIHVuZXhwZWN0ZWRLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiIGZvdW5kIGluIFwiICsgYXJndW1lbnROYW1lICsgXCIuIFwiKSArIFwiRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiBcIiArIChcIlxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLlwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTIpIDogXCJUaGUgc2xpY2UgcmVkdWNlciBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTMpIDogXCJUaGUgc2xpY2UgcmVkdWNlciBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgJ1wiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiJyBvciBvdGhlciBhY3Rpb25zIGluIFxcXCJyZWR1eC8qXFxcIiBcIikgKyBcIm5hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlIFwiICsgXCJjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCBcIiArIFwiaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIFwiICsgXCJhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQsIGJ1dCBjYW4gYmUgbnVsbC5cIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBmaW5hbFJlZHVjZXJzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoXCJObyByZWR1Y2VyIHByb3ZpZGVkIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cblxuICB2YXIgZmluYWxSZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKGZpbmFsUmVkdWNlcnMpOyAvLyBUaGlzIGlzIHVzZWQgdG8gbWFrZSBzdXJlIHdlIGRvbid0IHdhcm4gYWJvdXQgdGhlIHNhbWVcbiAgLy8ga2V5cyBtdWx0aXBsZSB0aW1lcy5cblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlID0ge307XG4gIH1cblxuICB2YXIgc2hhcGVBc3NlcnRpb25FcnJvcjtcblxuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoc2hhcGVBc3NlcnRpb25FcnJvcikge1xuICAgICAgdGhyb3cgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpO1xuXG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcblxuICAgICAgaWYgKHR5cGVvZiBuZXh0U3RhdGVGb3JLZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBhY3Rpb25UeXBlID0gYWN0aW9uICYmIGFjdGlvbi50eXBlO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNCkgOiBcIldoZW4gY2FsbGVkIHdpdGggYW4gYWN0aW9uIG9mIHR5cGUgXCIgKyAoYWN0aW9uVHlwZSA/IFwiXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgOiAnKHVua25vd24gdHlwZSknKSArIFwiLCB0aGUgc2xpY2UgcmVkdWNlciBmb3Iga2V5IFxcXCJcIiArIF9rZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHN0YXRlKS5sZW5ndGg7XG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYW4gYWN0aW9uIGNyZWF0b3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGRpc3BhdGNoIHdyYXBwZWQgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTYpIDogXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGJ1dCBpbnN0ZWFkIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YoYWN0aW9uQ3JlYXRvcnMpICsgXCInLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuXG5mdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtaWRkbGV3YXJlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gICAgICB2YXIgX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1KSA6ICdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzdG9yZSksIHt9LCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMsIGFwcGx5TWlkZGxld2FyZSwgYmluZEFjdGlvbkNyZWF0b3JzLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlLCBsZWdhY3lfY3JlYXRlU3RvcmUgfTtcbiIsIi8vIENhY2hlIGltcGxlbWVudGF0aW9uIGJhc2VkIG9uIEVyaWsgUmFzbXVzc2VuJ3MgYGxydS1tZW1vaXplYDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9lcmlrcmFzL2xydS1tZW1vaXplXG52YXIgTk9UX0ZPVU5EID0gJ05PVF9GT1VORCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNpbmdsZXRvbkNhY2hlKGVxdWFscykge1xuICB2YXIgZW50cnk7XG4gIHJldHVybiB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICBpZiAoZW50cnkgJiYgZXF1YWxzKGVudHJ5LmtleSwga2V5KSkge1xuICAgICAgICByZXR1cm4gZW50cnkudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBOT1RfRk9VTkQ7XG4gICAgfSxcbiAgICBwdXQ6IGZ1bmN0aW9uIHB1dChrZXksIHZhbHVlKSB7XG4gICAgICBlbnRyeSA9IHtcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfTtcbiAgICB9LFxuICAgIGdldEVudHJpZXM6IGZ1bmN0aW9uIGdldEVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gZW50cnkgPyBbZW50cnldIDogW107XG4gICAgfSxcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBlbnRyeSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxydUNhY2hlKG1heFNpemUsIGVxdWFscykge1xuICB2YXIgZW50cmllcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgY2FjaGVJbmRleCA9IGVudHJpZXMuZmluZEluZGV4KGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgcmV0dXJuIGVxdWFscyhrZXksIGVudHJ5LmtleSk7XG4gICAgfSk7IC8vIFdlIGZvdW5kIGEgY2FjaGVkIGVudHJ5XG5cbiAgICBpZiAoY2FjaGVJbmRleCA+IC0xKSB7XG4gICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2NhY2hlSW5kZXhdOyAvLyBDYWNoZWQgZW50cnkgbm90IGF0IHRvcCBvZiBjYWNoZSwgbW92ZSBpdCB0byB0aGUgdG9wXG5cbiAgICAgIGlmIChjYWNoZUluZGV4ID4gMCkge1xuICAgICAgICBlbnRyaWVzLnNwbGljZShjYWNoZUluZGV4LCAxKTtcbiAgICAgICAgZW50cmllcy51bnNoaWZ0KGVudHJ5KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVudHJ5LnZhbHVlO1xuICAgIH0gLy8gTm8gZW50cnkgZm91bmQgaW4gY2FjaGUsIHJldHVybiBzZW50aW5lbFxuXG5cbiAgICByZXR1cm4gTk9UX0ZPVU5EO1xuICB9XG5cbiAgZnVuY3Rpb24gcHV0KGtleSwgdmFsdWUpIHtcbiAgICBpZiAoZ2V0KGtleSkgPT09IE5PVF9GT1VORCkge1xuICAgICAgLy8gVE9ETyBJcyB1bnNoaWZ0IHNsb3c/XG4gICAgICBlbnRyaWVzLnVuc2hpZnQoe1xuICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9KTtcblxuICAgICAgaWYgKGVudHJpZXMubGVuZ3RoID4gbWF4U2l6ZSkge1xuICAgICAgICBlbnRyaWVzLnBvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEVudHJpZXMoKSB7XG4gICAgcmV0dXJuIGVudHJpZXM7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICBlbnRyaWVzID0gW107XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldDogZ2V0LFxuICAgIHB1dDogcHV0LFxuICAgIGdldEVudHJpZXM6IGdldEVudHJpZXMsXG4gICAgY2xlYXI6IGNsZWFyXG4gIH07XG59XG5cbmV4cG9ydCB2YXIgZGVmYXVsdEVxdWFsaXR5Q2hlY2sgPSBmdW5jdGlvbiBkZWZhdWx0RXF1YWxpdHlDaGVjayhhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDYWNoZUtleUNvbXBhcmF0b3IoZXF1YWxpdHlDaGVjaykge1xuICByZXR1cm4gZnVuY3Rpb24gYXJlQXJndW1lbnRzU2hhbGxvd2x5RXF1YWwocHJldiwgbmV4dCkge1xuICAgIGlmIChwcmV2ID09PSBudWxsIHx8IG5leHQgPT09IG51bGwgfHwgcHJldi5sZW5ndGggIT09IG5leHQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBEbyB0aGlzIGluIGEgZm9yIGxvb3AgKGFuZCBub3QgYSBgZm9yRWFjaGAgb3IgYW4gYGV2ZXJ5YCkgc28gd2UgY2FuIGRldGVybWluZSBlcXVhbGl0eSBhcyBmYXN0IGFzIHBvc3NpYmxlLlxuXG5cbiAgICB2YXIgbGVuZ3RoID0gcHJldi5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWVxdWFsaXR5Q2hlY2socHJldltpXSwgbmV4dFtpXSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xufVxuLy8gZGVmYXVsdE1lbW9pemUgbm93IHN1cHBvcnRzIGEgY29uZmlndXJhYmxlIGNhY2hlIHNpemUgd2l0aCBMUlUgYmVoYXZpb3IsXG4vLyBhbmQgb3B0aW9uYWwgY29tcGFyaXNvbiBvZiB0aGUgcmVzdWx0IHZhbHVlIHdpdGggZXhpc3RpbmcgdmFsdWVzXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lbW9pemUoZnVuYywgZXF1YWxpdHlDaGVja09yT3B0aW9ucykge1xuICB2YXIgcHJvdmlkZWRPcHRpb25zID0gdHlwZW9mIGVxdWFsaXR5Q2hlY2tPck9wdGlvbnMgPT09ICdvYmplY3QnID8gZXF1YWxpdHlDaGVja09yT3B0aW9ucyA6IHtcbiAgICBlcXVhbGl0eUNoZWNrOiBlcXVhbGl0eUNoZWNrT3JPcHRpb25zXG4gIH07XG4gIHZhciBfcHJvdmlkZWRPcHRpb25zJGVxdWEgPSBwcm92aWRlZE9wdGlvbnMuZXF1YWxpdHlDaGVjayxcbiAgICAgIGVxdWFsaXR5Q2hlY2sgPSBfcHJvdmlkZWRPcHRpb25zJGVxdWEgPT09IHZvaWQgMCA/IGRlZmF1bHRFcXVhbGl0eUNoZWNrIDogX3Byb3ZpZGVkT3B0aW9ucyRlcXVhLFxuICAgICAgX3Byb3ZpZGVkT3B0aW9ucyRtYXhTID0gcHJvdmlkZWRPcHRpb25zLm1heFNpemUsXG4gICAgICBtYXhTaXplID0gX3Byb3ZpZGVkT3B0aW9ucyRtYXhTID09PSB2b2lkIDAgPyAxIDogX3Byb3ZpZGVkT3B0aW9ucyRtYXhTLFxuICAgICAgcmVzdWx0RXF1YWxpdHlDaGVjayA9IHByb3ZpZGVkT3B0aW9ucy5yZXN1bHRFcXVhbGl0eUNoZWNrO1xuICB2YXIgY29tcGFyYXRvciA9IGNyZWF0ZUNhY2hlS2V5Q29tcGFyYXRvcihlcXVhbGl0eUNoZWNrKTtcbiAgdmFyIGNhY2hlID0gbWF4U2l6ZSA9PT0gMSA/IGNyZWF0ZVNpbmdsZXRvbkNhY2hlKGNvbXBhcmF0b3IpIDogY3JlYXRlTHJ1Q2FjaGUobWF4U2l6ZSwgY29tcGFyYXRvcik7IC8vIHdlIHJlZmVyZW5jZSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgdGhlbSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuXG4gIGZ1bmN0aW9uIG1lbW9pemVkKCkge1xuICAgIHZhciB2YWx1ZSA9IGNhY2hlLmdldChhcmd1bWVudHMpO1xuXG4gICAgaWYgKHZhbHVlID09PSBOT1RfRk9VTkQpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhbHVlID0gZnVuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuXG4gICAgICBpZiAocmVzdWx0RXF1YWxpdHlDaGVjaykge1xuICAgICAgICB2YXIgZW50cmllcyA9IGNhY2hlLmdldEVudHJpZXMoKTtcbiAgICAgICAgdmFyIG1hdGNoaW5nRW50cnkgPSBlbnRyaWVzLmZpbmQoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdEVxdWFsaXR5Q2hlY2soZW50cnkudmFsdWUsIHZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG1hdGNoaW5nRW50cnkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG1hdGNoaW5nRW50cnkudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2FjaGUucHV0KGFyZ3VtZW50cywgdmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIG1lbW9pemVkLmNsZWFyQ2FjaGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNhY2hlLmNsZWFyKCk7XG4gIH07XG5cbiAgcmV0dXJuIG1lbW9pemVkO1xufSIsImltcG9ydCB7IGRlZmF1bHRNZW1vaXplLCBkZWZhdWx0RXF1YWxpdHlDaGVjayB9IGZyb20gJy4vZGVmYXVsdE1lbW9pemUnO1xuZXhwb3J0IHsgZGVmYXVsdE1lbW9pemUsIGRlZmF1bHRFcXVhbGl0eUNoZWNrIH07XG5cbmZ1bmN0aW9uIGdldERlcGVuZGVuY2llcyhmdW5jcykge1xuICB2YXIgZGVwZW5kZW5jaWVzID0gQXJyYXkuaXNBcnJheShmdW5jc1swXSkgPyBmdW5jc1swXSA6IGZ1bmNzO1xuXG4gIGlmICghZGVwZW5kZW5jaWVzLmV2ZXJ5KGZ1bmN0aW9uIChkZXApIHtcbiAgICByZXR1cm4gdHlwZW9mIGRlcCA9PT0gJ2Z1bmN0aW9uJztcbiAgfSkpIHtcbiAgICB2YXIgZGVwZW5kZW5jeVR5cGVzID0gZGVwZW5kZW5jaWVzLm1hcChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGRlcCA9PT0gJ2Z1bmN0aW9uJyA/IFwiZnVuY3Rpb24gXCIgKyAoZGVwLm5hbWUgfHwgJ3VubmFtZWQnKSArIFwiKClcIiA6IHR5cGVvZiBkZXA7XG4gICAgfSkuam9pbignLCAnKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJjcmVhdGVTZWxlY3RvciBleHBlY3RzIGFsbCBpbnB1dC1zZWxlY3RvcnMgdG8gYmUgZnVuY3Rpb25zLCBidXQgcmVjZWl2ZWQgdGhlIGZvbGxvd2luZyB0eXBlczogW1wiICsgZGVwZW5kZW5jeVR5cGVzICsgXCJdXCIpO1xuICB9XG5cbiAgcmV0dXJuIGRlcGVuZGVuY2llcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcihtZW1vaXplKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtZW1vaXplT3B0aW9uc0Zyb21BcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtZW1vaXplT3B0aW9uc0Zyb21BcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBjcmVhdGVTZWxlY3RvciA9IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGZ1bmNzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgdmFyIF9yZWNvbXB1dGF0aW9ucyA9IDA7XG5cbiAgICB2YXIgX2xhc3RSZXN1bHQ7IC8vIER1ZSB0byB0aGUgaW50cmljYWNpZXMgb2YgcmVzdCBwYXJhbXMsIHdlIGNhbid0IGRvIGFuIG9wdGlvbmFsIGFyZyBhZnRlciBgLi4uZnVuY3NgLlxuICAgIC8vIFNvLCBzdGFydCBieSBkZWNsYXJpbmcgdGhlIGRlZmF1bHQgdmFsdWUgaGVyZS5cbiAgICAvLyAoQW5kIHllcywgdGhlIHdvcmRzICdtZW1vaXplJyBhbmQgJ29wdGlvbnMnIGFwcGVhciB0b28gbWFueSB0aW1lcyBpbiB0aGlzIG5leHQgc2VxdWVuY2UuKVxuXG5cbiAgICB2YXIgZGlyZWN0bHlQYXNzZWRPcHRpb25zID0ge1xuICAgICAgbWVtb2l6ZU9wdGlvbnM6IHVuZGVmaW5lZFxuICAgIH07IC8vIE5vcm1hbGx5LCB0aGUgcmVzdWx0IGZ1bmMgb3IgXCJvdXRwdXQgc2VsZWN0b3JcIiBpcyB0aGUgbGFzdCBhcmdcblxuICAgIHZhciByZXN1bHRGdW5jID0gZnVuY3MucG9wKCk7IC8vIElmIHRoZSByZXN1bHQgZnVuYyBpcyBhY3R1YWxseSBhbiBfb2JqZWN0XywgYXNzdW1lIGl0J3Mgb3VyIG9wdGlvbnMgb2JqZWN0XG5cbiAgICBpZiAodHlwZW9mIHJlc3VsdEZ1bmMgPT09ICdvYmplY3QnKSB7XG4gICAgICBkaXJlY3RseVBhc3NlZE9wdGlvbnMgPSByZXN1bHRGdW5jOyAvLyBhbmQgcG9wIHRoZSByZWFsIHJlc3VsdCBmdW5jIG9mZlxuXG4gICAgICByZXN1bHRGdW5jID0gZnVuY3MucG9wKCk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZXN1bHRGdW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjcmVhdGVTZWxlY3RvciBleHBlY3RzIGFuIG91dHB1dCBmdW5jdGlvbiBhZnRlciB0aGUgaW5wdXRzLCBidXQgcmVjZWl2ZWQ6IFtcIiArIHR5cGVvZiByZXN1bHRGdW5jICsgXCJdXCIpO1xuICAgIH0gLy8gRGV0ZXJtaW5lIHdoaWNoIHNldCBvZiBvcHRpb25zIHdlJ3JlIHVzaW5nLiBQcmVmZXIgb3B0aW9ucyBwYXNzZWQgZGlyZWN0bHksXG4gICAgLy8gYnV0IGZhbGwgYmFjayB0byBvcHRpb25zIGdpdmVuIHRvIGNyZWF0ZVNlbGVjdG9yQ3JlYXRvci5cblxuXG4gICAgdmFyIF9kaXJlY3RseVBhc3NlZE9wdGlvbiA9IGRpcmVjdGx5UGFzc2VkT3B0aW9ucyxcbiAgICAgICAgX2RpcmVjdGx5UGFzc2VkT3B0aW9uMiA9IF9kaXJlY3RseVBhc3NlZE9wdGlvbi5tZW1vaXplT3B0aW9ucyxcbiAgICAgICAgbWVtb2l6ZU9wdGlvbnMgPSBfZGlyZWN0bHlQYXNzZWRPcHRpb24yID09PSB2b2lkIDAgPyBtZW1vaXplT3B0aW9uc0Zyb21BcmdzIDogX2RpcmVjdGx5UGFzc2VkT3B0aW9uMjsgLy8gU2ltcGxpZnlpbmcgYXNzdW1wdGlvbjogaXQncyB1bmxpa2VseSB0aGF0IHRoZSBmaXJzdCBvcHRpb25zIGFyZyBvZiB0aGUgcHJvdmlkZWQgbWVtb2l6ZXJcbiAgICAvLyBpcyBhbiBhcnJheS4gSW4gbW9zdCBsaWJzIEkndmUgbG9va2VkIGF0LCBpdCdzIGFuIGVxdWFsaXR5IGZ1bmN0aW9uIG9yIG9wdGlvbnMgb2JqZWN0LlxuICAgIC8vIEJhc2VkIG9uIHRoYXQsIGlmIGBtZW1vaXplT3B0aW9uc2AgX2lzXyBhbiBhcnJheSwgd2UgYXNzdW1lIGl0J3MgYSBmdWxsXG4gICAgLy8gdXNlci1wcm92aWRlZCBhcnJheSBvZiBvcHRpb25zLiBPdGhlcndpc2UsIGl0IG11c3QgYmUganVzdCB0aGUgX2ZpcnN0XyBhcmcsIGFuZCBzb1xuICAgIC8vIHdlIHdyYXAgaXQgaW4gYW4gYXJyYXkgc28gd2UgY2FuIGFwcGx5IGl0LlxuXG4gICAgdmFyIGZpbmFsTWVtb2l6ZU9wdGlvbnMgPSBBcnJheS5pc0FycmF5KG1lbW9pemVPcHRpb25zKSA/IG1lbW9pemVPcHRpb25zIDogW21lbW9pemVPcHRpb25zXTtcbiAgICB2YXIgZGVwZW5kZW5jaWVzID0gZ2V0RGVwZW5kZW5jaWVzKGZ1bmNzKTtcbiAgICB2YXIgbWVtb2l6ZWRSZXN1bHRGdW5jID0gbWVtb2l6ZS5hcHBseSh2b2lkIDAsIFtmdW5jdGlvbiByZWNvbXB1dGF0aW9uV3JhcHBlcigpIHtcbiAgICAgIF9yZWNvbXB1dGF0aW9ucysrOyAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuXG4gICAgICByZXR1cm4gcmVzdWx0RnVuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1dLmNvbmNhdChmaW5hbE1lbW9pemVPcHRpb25zKSk7IC8vIElmIGEgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIGV4YWN0IHNhbWUgYXJndW1lbnRzIHdlIGRvbid0IG5lZWQgdG8gdHJhdmVyc2Ugb3VyIGRlcGVuZGVuY2llcyBhZ2Fpbi5cblxuICAgIHZhciBzZWxlY3RvciA9IG1lbW9pemUoZnVuY3Rpb24gZGVwZW5kZW5jaWVzQ2hlY2tlcigpIHtcbiAgICAgIHZhciBwYXJhbXMgPSBbXTtcbiAgICAgIHZhciBsZW5ndGggPSBkZXBlbmRlbmNpZXMubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGFwcGx5IGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyBhbmQgbXV0YXRlIGEgbG9jYWwgbGlzdCBvZiBwYXJhbXMgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHBhcmFtcy5wdXNoKGRlcGVuZGVuY2llc1tpXS5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgIH0gLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGZvciBwZXJmb3JtYW5jZS5cblxuXG4gICAgICBfbGFzdFJlc3VsdCA9IG1lbW9pemVkUmVzdWx0RnVuYy5hcHBseShudWxsLCBwYXJhbXMpO1xuICAgICAgcmV0dXJuIF9sYXN0UmVzdWx0O1xuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oc2VsZWN0b3IsIHtcbiAgICAgIHJlc3VsdEZ1bmM6IHJlc3VsdEZ1bmMsXG4gICAgICBtZW1vaXplZFJlc3VsdEZ1bmM6IG1lbW9pemVkUmVzdWx0RnVuYyxcbiAgICAgIGRlcGVuZGVuY2llczogZGVwZW5kZW5jaWVzLFxuICAgICAgbGFzdFJlc3VsdDogZnVuY3Rpb24gbGFzdFJlc3VsdCgpIHtcbiAgICAgICAgcmV0dXJuIF9sYXN0UmVzdWx0O1xuICAgICAgfSxcbiAgICAgIHJlY29tcHV0YXRpb25zOiBmdW5jdGlvbiByZWNvbXB1dGF0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIF9yZWNvbXB1dGF0aW9ucztcbiAgICAgIH0sXG4gICAgICByZXNldFJlY29tcHV0YXRpb25zOiBmdW5jdGlvbiByZXNldFJlY29tcHV0YXRpb25zKCkge1xuICAgICAgICByZXR1cm4gX3JlY29tcHV0YXRpb25zID0gMDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH07IC8vIEB0cy1pZ25vcmVcblxuXG4gIHJldHVybiBjcmVhdGVTZWxlY3Rvcjtcbn1cbmV4cG9ydCB2YXIgY3JlYXRlU2VsZWN0b3IgPSAvKiAjX19QVVJFX18gKi9jcmVhdGVTZWxlY3RvckNyZWF0b3IoZGVmYXVsdE1lbW9pemUpO1xuLy8gTWFudWFsIGRlZmluaXRpb24gb2Ygc3RhdGUgYW5kIG91dHB1dCBhcmd1bWVudHNcbmV4cG9ydCB2YXIgY3JlYXRlU3RydWN0dXJlZFNlbGVjdG9yID0gZnVuY3Rpb24gY3JlYXRlU3RydWN0dXJlZFNlbGVjdG9yKHNlbGVjdG9ycywgc2VsZWN0b3JDcmVhdG9yKSB7XG4gIGlmIChzZWxlY3RvckNyZWF0b3IgPT09IHZvaWQgMCkge1xuICAgIHNlbGVjdG9yQ3JlYXRvciA9IGNyZWF0ZVNlbGVjdG9yO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvcnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3IgZXhwZWN0cyBmaXJzdCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QgJyArIChcIndoZXJlIGVhY2ggcHJvcGVydHkgaXMgYSBzZWxlY3RvciwgaW5zdGVhZCByZWNlaXZlZCBhIFwiICsgdHlwZW9mIHNlbGVjdG9ycykpO1xuICB9XG5cbiAgdmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyhzZWxlY3RvcnMpO1xuICB2YXIgcmVzdWx0U2VsZWN0b3IgPSBzZWxlY3RvckNyZWF0b3IoIC8vIEB0cy1pZ25vcmVcbiAgb2JqZWN0S2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBzZWxlY3RvcnNba2V5XTtcbiAgfSksIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIHZhbHVlcyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgdmFsdWVzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlcy5yZWR1Y2UoZnVuY3Rpb24gKGNvbXBvc2l0aW9uLCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIGNvbXBvc2l0aW9uW29iamVjdEtleXNbaW5kZXhdXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIGNvbXBvc2l0aW9uO1xuICAgIH0sIHt9KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHRTZWxlY3Rvcjtcbn07IiwiLyoqIEEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIGEgcG90ZW50aWFsIFwiZXh0cmEgYXJndW1lbnRcIiB2YWx1ZSB0byBiZSBpbmplY3RlZCBsYXRlcixcclxuICogYW5kIHJldHVybnMgYW4gaW5zdGFuY2Ugb2YgdGhlIHRodW5rIG1pZGRsZXdhcmUgdGhhdCB1c2VzIHRoYXQgdmFsdWVcclxuICovXG5mdW5jdGlvbiBjcmVhdGVUaHVua01pZGRsZXdhcmUoZXh0cmFBcmd1bWVudCkge1xuICAvLyBTdGFuZGFyZCBSZWR1eCBtaWRkbGV3YXJlIGRlZmluaXRpb24gcGF0dGVybjpcbiAgLy8gU2VlOiBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSN3cml0aW5nLWN1c3RvbS1taWRkbGV3YXJlXG4gIHZhciBtaWRkbGV3YXJlID0gZnVuY3Rpb24gbWlkZGxld2FyZShfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgLy8gVGhlIHRodW5rIG1pZGRsZXdhcmUgbG9va3MgZm9yIGFueSBmdW5jdGlvbnMgdGhhdCB3ZXJlIHBhc3NlZCB0byBgc3RvcmUuZGlzcGF0Y2hgLlxuICAgICAgICAvLyBJZiB0aGlzIFwiYWN0aW9uXCIgaXMgcmVhbGx5IGEgZnVuY3Rpb24sIGNhbGwgaXQgYW5kIHJldHVybiB0aGUgcmVzdWx0LlxuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIC8vIEluamVjdCB0aGUgc3RvcmUncyBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIG1ldGhvZHMsIGFzIHdlbGwgYXMgYW55IFwiZXh0cmEgYXJnXCJcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH0gLy8gT3RoZXJ3aXNlLCBwYXNzIHRoZSBhY3Rpb24gZG93biB0aGUgbWlkZGxld2FyZSBjaGFpbiBhcyB1c3VhbFxuXG5cbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcblxuICByZXR1cm4gbWlkZGxld2FyZTtcbn1cblxudmFyIHRodW5rID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKCk7IC8vIEF0dGFjaCB0aGUgZmFjdG9yeSBmdW5jdGlvbiBzbyB1c2VycyBjYW4gY3JlYXRlIGEgY3VzdG9taXplZCB2ZXJzaW9uXG4vLyB3aXRoIHdoYXRldmVyIFwiZXh0cmEgYXJnXCIgdGhleSB3YW50IHRvIGluamVjdCBpbnRvIHRoZWlyIHRodW5rc1xuXG50aHVuay53aXRoRXh0cmFBcmd1bWVudCA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZTtcbmV4cG9ydCBkZWZhdWx0IHRodW5rOyIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcclxuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxyXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcclxuICAgIHJldHVybiB0bztcclxufTtcclxudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcclxudmFyIF9fZGVmUHJvcHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcztcclxudmFyIF9fZ2V0T3duUHJvcERlc2NzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XHJcbnZhciBfX2dldE93blByb3BTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcclxudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XHJcbnZhciBfX3Byb3BJc0VudW0gPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xyXG52YXIgX19kZWZOb3JtYWxQcm9wID0gZnVuY3Rpb24gKG9iaiwga2V5LCB2YWx1ZSkgeyByZXR1cm4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlOyB9O1xyXG52YXIgX19zcHJlYWRWYWx1ZXMgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgZm9yICh2YXIgcHJvcCBpbiBiIHx8IChiID0ge30pKVxyXG4gICAgICAgIGlmIChfX2hhc093blByb3AuY2FsbChiLCBwcm9wKSlcclxuICAgICAgICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xyXG4gICAgaWYgKF9fZ2V0T3duUHJvcFN5bWJvbHMpXHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYyA9IF9fZ2V0T3duUHJvcFN5bWJvbHMoYik7IF9pIDwgX2MubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBwcm9wID0gX2NbX2ldO1xyXG4gICAgICAgICAgICBpZiAoX19wcm9wSXNFbnVtLmNhbGwoYiwgcHJvcCkpXHJcbiAgICAgICAgICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIGE7XHJcbn07XHJcbnZhciBfX3NwcmVhZFByb3BzID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIF9fZGVmUHJvcHMoYSwgX19nZXRPd25Qcm9wRGVzY3MoYikpOyB9O1xyXG52YXIgX19hc3luYyA9IGZ1bmN0aW9uIChfX3RoaXMsIF9fYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgdmFyIGZ1bGZpbGxlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciByZWplY3RlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgc3RlcCA9IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LmRvbmUgPyByZXNvbHZlKHgudmFsdWUpIDogUHJvbWlzZS5yZXNvbHZlKHgudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH07XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KF9fdGhpcywgX19hcmd1bWVudHMpKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbi8vIHNyYy9pbmRleC50c1xyXG5pbXBvcnQgeyBlbmFibGVFUzUgfSBmcm9tIFwiaW1tZXJcIjtcclxuZXhwb3J0ICogZnJvbSBcInJlZHV4XCI7XHJcbmltcG9ydCB7IGRlZmF1bHQgYXMgZGVmYXVsdDIsIGN1cnJlbnQgYXMgY3VycmVudDIsIGZyZWV6ZSwgb3JpZ2luYWwsIGlzRHJhZnQgYXMgaXNEcmFmdDQgfSBmcm9tIFwiaW1tZXJcIjtcclxuaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IgYXMgY3JlYXRlU2VsZWN0b3IyIH0gZnJvbSBcInJlc2VsZWN0XCI7XHJcbi8vIHNyYy9jcmVhdGVEcmFmdFNhZmVTZWxlY3Rvci50c1xyXG5pbXBvcnQgeyBjdXJyZW50LCBpc0RyYWZ0IH0gZnJvbSBcImltbWVyXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSBcInJlc2VsZWN0XCI7XHJcbnZhciBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBhcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBzZWxlY3RvciA9IGNyZWF0ZVNlbGVjdG9yLmFwcGx5KHZvaWQgMCwgYXJncyk7XHJcbiAgICB2YXIgd3JhcHBlZFNlbGVjdG9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHJlc3QgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICByZXN0W19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2VsZWN0b3IuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtpc0RyYWZ0KHZhbHVlKSA/IGN1cnJlbnQodmFsdWUpIDogdmFsdWVdLCByZXN0KSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHdyYXBwZWRTZWxlY3RvcjtcclxufTtcclxuLy8gc3JjL2NvbmZpZ3VyZVN0b3JlLnRzXHJcbmltcG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21wb3NlIGFzIGNvbXBvc2UyLCBhcHBseU1pZGRsZXdhcmUsIGNvbWJpbmVSZWR1Y2VycyB9IGZyb20gXCJyZWR1eFwiO1xyXG4vLyBzcmMvZGV2dG9vbHNFeHRlbnNpb24udHNcclxuaW1wb3J0IHsgY29tcG9zZSB9IGZyb20gXCJyZWR1eFwiO1xyXG52YXIgY29tcG9zZVdpdGhEZXZUb29scyA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyA/IHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gOiBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcclxuICAgICAgICByZXR1cm4gdm9pZCAwO1xyXG4gICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09IFwib2JqZWN0XCIpXHJcbiAgICAgICAgcmV0dXJuIGNvbXBvc2U7XHJcbiAgICByZXR1cm4gY29tcG9zZS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xyXG59O1xyXG52YXIgZGV2VG9vbHNFbmhhbmNlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gPyB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyA6IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAobm9vcDIpIHtcclxuICAgICAgICByZXR1cm4gbm9vcDI7XHJcbiAgICB9O1xyXG59O1xyXG4vLyBzcmMvaXNQbGFpbk9iamVjdC50c1xyXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IHZhbHVlID09PSBudWxsKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSk7XHJcbiAgICBpZiAocHJvdG8gPT09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB2YXIgYmFzZVByb3RvID0gcHJvdG87XHJcbiAgICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKGJhc2VQcm90bykgIT09IG51bGwpIHtcclxuICAgICAgICBiYXNlUHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYmFzZVByb3RvKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcm90byA9PT0gYmFzZVByb3RvO1xyXG59XHJcbi8vIHNyYy9nZXREZWZhdWx0TWlkZGxld2FyZS50c1xyXG5pbXBvcnQgdGh1bmtNaWRkbGV3YXJlIGZyb20gXCJyZWR1eC10aHVua1wiO1xyXG4vLyBzcmMvdXRpbHMudHNcclxuaW1wb3J0IGNyZWF0ZU5leHRTdGF0ZSwgeyBpc0RyYWZ0YWJsZSB9IGZyb20gXCJpbW1lclwiO1xyXG5mdW5jdGlvbiBnZXRUaW1lTWVhc3VyZVV0aWxzKG1heERlbGF5LCBmbk5hbWUpIHtcclxuICAgIHZhciBlbGFwc2VkID0gMDtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWVhc3VyZVRpbWU6IGZ1bmN0aW9uIChmbikge1xyXG4gICAgICAgICAgICB2YXIgc3RhcnRlZCA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgIHZhciBmaW5pc2hlZCA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgICAgICBlbGFwc2VkICs9IGZpbmlzaGVkIC0gc3RhcnRlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgd2FybklmRXhjZWVkZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKGVsYXBzZWQgPiBtYXhEZWxheSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGZuTmFtZSArIFwiIHRvb2sgXCIgKyBlbGFwc2VkICsgXCJtcywgd2hpY2ggaXMgbW9yZSB0aGFuIHRoZSB3YXJuaW5nIHRocmVzaG9sZCBvZiBcIiArIG1heERlbGF5ICsgXCJtcy4gXFxuSWYgeW91ciBzdGF0ZSBvciBhY3Rpb25zIGFyZSB2ZXJ5IGxhcmdlLCB5b3UgbWF5IHdhbnQgdG8gZGlzYWJsZSB0aGUgbWlkZGxld2FyZSBhcyBpdCBtaWdodCBjYXVzZSB0b28gbXVjaCBvZiBhIHNsb3dkb3duIGluIGRldmVsb3BtZW50IG1vZGUuIFNlZSBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL2FwaS9nZXREZWZhdWx0TWlkZGxld2FyZSBmb3IgaW5zdHJ1Y3Rpb25zLlxcbkl0IGlzIGRpc2FibGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzLCBzbyB5b3UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCB0aGF0LlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxudmFyIE1pZGRsZXdhcmVBcnJheSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhNaWRkbGV3YXJlQXJyYXksIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBNaWRkbGV3YXJlQXJyYXkoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmdzKSB8fCB0aGlzO1xyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihfdGhpcywgTWlkZGxld2FyZUFycmF5LnByb3RvdHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1pZGRsZXdhcmVBcnJheSwgU3ltYm9sLnNwZWNpZXMsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1pZGRsZXdhcmVBcnJheTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBNaWRkbGV3YXJlQXJyYXkucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJyID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJyW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmNvbmNhdC5hcHBseSh0aGlzLCBhcnIpO1xyXG4gICAgfTtcclxuICAgIE1pZGRsZXdhcmVBcnJheS5wcm90b3R5cGUucHJlcGVuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJyID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJyW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcnIubGVuZ3RoID09PSAxICYmIEFycmF5LmlzQXJyYXkoYXJyWzBdKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IChNaWRkbGV3YXJlQXJyYXkuYmluZC5hcHBseShNaWRkbGV3YXJlQXJyYXksIF9fc3ByZWFkQXJyYXkoW3ZvaWQgMF0sIGFyclswXS5jb25jYXQodGhpcykpKSkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyAoTWlkZGxld2FyZUFycmF5LmJpbmQuYXBwbHkoTWlkZGxld2FyZUFycmF5LCBfX3NwcmVhZEFycmF5KFt2b2lkIDBdLCBhcnIuY29uY2F0KHRoaXMpKSkpKCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE1pZGRsZXdhcmVBcnJheTtcclxufShBcnJheSkpO1xyXG52YXIgRW5oYW5jZXJBcnJheSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhFbmhhbmNlckFycmF5LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRW5oYW5jZXJBcnJheSgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3MpIHx8IHRoaXM7XHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKF90aGlzLCBFbmhhbmNlckFycmF5LnByb3RvdHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVuaGFuY2VyQXJyYXksIFN5bWJvbC5zcGVjaWVzLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBFbmhhbmNlckFycmF5O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEVuaGFuY2VyQXJyYXkucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJyID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJyW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmNvbmNhdC5hcHBseSh0aGlzLCBhcnIpO1xyXG4gICAgfTtcclxuICAgIEVuaGFuY2VyQXJyYXkucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyciA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFycltfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGFyclswXSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyAoRW5oYW5jZXJBcnJheS5iaW5kLmFwcGx5KEVuaGFuY2VyQXJyYXksIF9fc3ByZWFkQXJyYXkoW3ZvaWQgMF0sIGFyclswXS5jb25jYXQodGhpcykpKSkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyAoRW5oYW5jZXJBcnJheS5iaW5kLmFwcGx5KEVuaGFuY2VyQXJyYXksIF9fc3ByZWFkQXJyYXkoW3ZvaWQgMF0sIGFyci5jb25jYXQodGhpcykpKSkoKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRW5oYW5jZXJBcnJheTtcclxufShBcnJheSkpO1xyXG5mdW5jdGlvbiBmcmVlemVEcmFmdGFibGUodmFsKSB7XHJcbiAgICByZXR1cm4gaXNEcmFmdGFibGUodmFsKSA/IGNyZWF0ZU5leHRTdGF0ZSh2YWwsIGZ1bmN0aW9uICgpIHtcclxuICAgIH0pIDogdmFsO1xyXG59XHJcbi8vIHNyYy9pbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUudHNcclxudmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIjtcclxudmFyIHByZWZpeCA9IFwiSW52YXJpYW50IGZhaWxlZFwiO1xyXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XHJcbiAgICBpZiAoY29uZGl0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8IFwiXCIpKTtcclxufVxyXG5mdW5jdGlvbiBzdHJpbmdpZnkob2JqLCBzZXJpYWxpemVyLCBpbmRlbnQsIGRlY3ljbGVyKSB7XHJcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCBnZXRTZXJpYWxpemUoc2VyaWFsaXplciwgZGVjeWNsZXIpLCBpbmRlbnQpO1xyXG59XHJcbmZ1bmN0aW9uIGdldFNlcmlhbGl6ZShzZXJpYWxpemVyLCBkZWN5Y2xlcikge1xyXG4gICAgdmFyIHN0YWNrID0gW10sIGtleXMgPSBbXTtcclxuICAgIGlmICghZGVjeWNsZXIpXHJcbiAgICAgICAgZGVjeWNsZXIgPSBmdW5jdGlvbiAoXywgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHN0YWNrWzBdID09PSB2YWx1ZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIltDaXJjdWxhciB+XVwiO1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbQ2lyY3VsYXIgfi5cIiArIGtleXMuc2xpY2UoMCwgc3RhY2suaW5kZXhPZih2YWx1ZSkpLmpvaW4oXCIuXCIpICsgXCJdXCI7XHJcbiAgICAgICAgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIGlmIChzdGFjay5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHZhciB0aGlzUG9zID0gc3RhY2suaW5kZXhPZih0aGlzKTtcclxuICAgICAgICAgICAgfnRoaXNQb3MgPyBzdGFjay5zcGxpY2UodGhpc1BvcyArIDEpIDogc3RhY2sucHVzaCh0aGlzKTtcclxuICAgICAgICAgICAgfnRoaXNQb3MgPyBrZXlzLnNwbGljZSh0aGlzUG9zLCBJbmZpbml0eSwga2V5KSA6IGtleXMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICBpZiAofnN0YWNrLmluZGV4T2YodmFsdWUpKVxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBkZWN5Y2xlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHN0YWNrLnB1c2godmFsdWUpO1xyXG4gICAgICAgIHJldHVybiBzZXJpYWxpemVyID09IG51bGwgPyB2YWx1ZSA6IHNlcmlhbGl6ZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNJbW11dGFibGVEZWZhdWx0KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IHZhbHVlID09IG51bGwgfHwgT2JqZWN0LmlzRnJvemVuKHZhbHVlKTtcclxufVxyXG5mdW5jdGlvbiB0cmFja0Zvck11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaikge1xyXG4gICAgdmFyIHRyYWNrZWRQcm9wZXJ0aWVzID0gdHJhY2tQcm9wZXJ0aWVzKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZGV0ZWN0TXV0YXRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCB0cmFja2VkUHJvcGVydGllcywgb2JqKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaiwgcGF0aCkge1xyXG4gICAgaWYgKGlnbm9yZVBhdGhzID09PSB2b2lkIDApIHsgaWdub3JlUGF0aHMgPSBbXTsgfVxyXG4gICAgaWYgKHBhdGggPT09IHZvaWQgMCkgeyBwYXRoID0gXCJcIjsgfVxyXG4gICAgdmFyIHRyYWNrZWQgPSB7IHZhbHVlOiBvYmogfTtcclxuICAgIGlmICghaXNJbW11dGFibGUob2JqKSkge1xyXG4gICAgICAgIHRyYWNrZWQuY2hpbGRyZW4gPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZFBhdGggPSBwYXRoID8gcGF0aCArIFwiLlwiICsga2V5IDoga2V5O1xyXG4gICAgICAgICAgICBpZiAoaWdub3JlUGF0aHMubGVuZ3RoICYmIGlnbm9yZVBhdGhzLmluZGV4T2YoY2hpbGRQYXRoKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRyYWNrZWQuY2hpbGRyZW5ba2V5XSA9IHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9ialtrZXldLCBjaGlsZFBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cmFja2VkO1xyXG59XHJcbmZ1bmN0aW9uIGRldGVjdE11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlZFBhdGhzLCB0cmFja2VkUHJvcGVydHksIG9iaiwgc2FtZVBhcmVudFJlZiwgcGF0aCkge1xyXG4gICAgaWYgKGlnbm9yZWRQYXRocyA9PT0gdm9pZCAwKSB7IGlnbm9yZWRQYXRocyA9IFtdOyB9XHJcbiAgICBpZiAoc2FtZVBhcmVudFJlZiA9PT0gdm9pZCAwKSB7IHNhbWVQYXJlbnRSZWYgPSBmYWxzZTsgfVxyXG4gICAgaWYgKHBhdGggPT09IHZvaWQgMCkgeyBwYXRoID0gXCJcIjsgfVxyXG4gICAgdmFyIHByZXZPYmogPSB0cmFja2VkUHJvcGVydHkgPyB0cmFja2VkUHJvcGVydHkudmFsdWUgOiB2b2lkIDA7XHJcbiAgICB2YXIgc2FtZVJlZiA9IHByZXZPYmogPT09IG9iajtcclxuICAgIGlmIChzYW1lUGFyZW50UmVmICYmICFzYW1lUmVmICYmICFOdW1iZXIuaXNOYU4ob2JqKSkge1xyXG4gICAgICAgIHJldHVybiB7IHdhc011dGF0ZWQ6IHRydWUsIHBhdGg6IHBhdGggfTtcclxuICAgIH1cclxuICAgIGlmIChpc0ltbXV0YWJsZShwcmV2T2JqKSB8fCBpc0ltbXV0YWJsZShvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgd2FzTXV0YXRlZDogZmFsc2UgfTtcclxuICAgIH1cclxuICAgIHZhciBrZXlzVG9EZXRlY3QgPSB7fTtcclxuICAgIGZvciAodmFyIGtleSBpbiB0cmFja2VkUHJvcGVydHkuY2hpbGRyZW4pIHtcclxuICAgICAgICBrZXlzVG9EZXRlY3Rba2V5XSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAga2V5c1RvRGV0ZWN0W2tleV0gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgdmFyIGhhc0lnbm9yZWRQYXRocyA9IGlnbm9yZWRQYXRocy5sZW5ndGggPiAwO1xyXG4gICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgdmFyIG5lc3RlZFBhdGggPSBwYXRoID8gcGF0aCArIFwiLlwiICsga2V5IDoga2V5O1xyXG4gICAgICAgIGlmIChoYXNJZ25vcmVkUGF0aHMpIHtcclxuICAgICAgICAgICAgdmFyIGhhc01hdGNoZXMgPSBpZ25vcmVkUGF0aHMuc29tZShmdW5jdGlvbiAoaWdub3JlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlnbm9yZWQgaW5zdGFuY2VvZiBSZWdFeHApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWdub3JlZC50ZXN0KG5lc3RlZFBhdGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5lc3RlZFBhdGggPT09IGlnbm9yZWQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoaGFzTWF0Y2hlcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVzdWx0ID0gZGV0ZWN0TXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVkUGF0aHMsIHRyYWNrZWRQcm9wZXJ0eS5jaGlsZHJlbltrZXldLCBvYmpba2V5XSwgc2FtZVJlZiwgbmVzdGVkUGF0aCk7XHJcbiAgICAgICAgaWYgKHJlc3VsdC53YXNNdXRhdGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiByZXN1bHQgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZm9yICh2YXIga2V5IGluIGtleXNUb0RldGVjdCkge1xyXG4gICAgICAgIHZhciBzdGF0ZV8xID0gX2xvb3BfMShrZXkpO1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc3RhdGVfMSA9PT0gXCJvYmplY3RcIilcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlXzEudmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyB3YXNNdXRhdGVkOiBmYWxzZSB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gbmV4dChhY3Rpb24pOyB9OyB9OyB9O1xyXG4gICAgfVxyXG4gICAgdmFyIF9jID0gb3B0aW9ucy5pc0ltbXV0YWJsZSwgaXNJbW11dGFibGUgPSBfYyA9PT0gdm9pZCAwID8gaXNJbW11dGFibGVEZWZhdWx0IDogX2MsIGlnbm9yZWRQYXRocyA9IG9wdGlvbnMuaWdub3JlZFBhdGhzLCBfZCA9IG9wdGlvbnMud2FybkFmdGVyLCB3YXJuQWZ0ZXIgPSBfZCA9PT0gdm9pZCAwID8gMzIgOiBfZCwgaWdub3JlID0gb3B0aW9ucy5pZ25vcmU7XHJcbiAgICBpZ25vcmVkUGF0aHMgPSBpZ25vcmVkUGF0aHMgfHwgaWdub3JlO1xyXG4gICAgdmFyIHRyYWNrID0gdHJhY2tGb3JNdXRhdGlvbnMuYmluZChudWxsLCBpc0ltbXV0YWJsZSwgaWdub3JlZFBhdGhzKTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICB2YXIgZ2V0U3RhdGUgPSBfYy5nZXRTdGF0ZTtcclxuICAgICAgICB2YXIgc3RhdGUgPSBnZXRTdGF0ZSgpO1xyXG4gICAgICAgIHZhciB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xyXG4gICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7IHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBtZWFzdXJlVXRpbHMgPSBnZXRUaW1lTWVhc3VyZVV0aWxzKHdhcm5BZnRlciwgXCJJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmVcIik7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IGdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0cmFja2VyLmRldGVjdE11dGF0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcclxuICAgICAgICAgICAgICAgIGludmFyaWFudCghcmVzdWx0Lndhc011dGF0ZWQsIFwiQSBzdGF0ZSBtdXRhdGlvbiB3YXMgZGV0ZWN0ZWQgYmV0d2VlbiBkaXNwYXRjaGVzLCBpbiB0aGUgcGF0aCAnXCIgKyAocmVzdWx0LnBhdGggfHwgXCJcIikgKyBcIicuICBUaGlzIG1heSBjYXVzZSBpbmNvcnJlY3QgYmVoYXZpb3IuIChodHRwczovL3JlZHV4LmpzLm9yZy9zdHlsZS1ndWlkZS9zdHlsZS1ndWlkZSNkby1ub3QtbXV0YXRlLXN0YXRlKVwiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHZhciBkaXNwYXRjaGVkQWN0aW9uID0gbmV4dChhY3Rpb24pO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUgPSBnZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJhY2tlci5kZXRlY3RNdXRhdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIHRyYWNrZXIgPSB0cmFjayhzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQud2FzTXV0YXRlZCAmJiBpbnZhcmlhbnQoIXJlc3VsdC53YXNNdXRhdGVkLCBcIkEgc3RhdGUgbXV0YXRpb24gd2FzIGRldGVjdGVkIGluc2lkZSBhIGRpc3BhdGNoLCBpbiB0aGUgcGF0aDogXCIgKyAocmVzdWx0LnBhdGggfHwgXCJcIikgKyBcIi4gVGFrZSBhIGxvb2sgYXQgdGhlIHJlZHVjZXIocykgaGFuZGxpbmcgdGhlIGFjdGlvbiBcIiArIHN0cmluZ2lmeShhY3Rpb24pICsgXCIuIChodHRwczovL3JlZHV4LmpzLm9yZy9zdHlsZS1ndWlkZS9zdHlsZS1ndWlkZSNkby1ub3QtbXV0YXRlLXN0YXRlKVwiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy53YXJuSWZFeGNlZWRlZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2hlZEFjdGlvbjtcclxuICAgICAgICB9OyB9O1xyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvc2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLnRzXHJcbmZ1bmN0aW9uIGlzUGxhaW4odmFsKSB7XHJcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XHJcbiAgICByZXR1cm4gdmFsID09IG51bGwgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlID09PSBcImJvb2xlYW5cIiB8fCB0eXBlID09PSBcIm51bWJlclwiIHx8IEFycmF5LmlzQXJyYXkodmFsKSB8fCBpc1BsYWluT2JqZWN0KHZhbCk7XHJcbn1cclxuZnVuY3Rpb24gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKHZhbHVlLCBwYXRoLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzLCBjYWNoZSkge1xyXG4gICAgaWYgKHBhdGggPT09IHZvaWQgMCkgeyBwYXRoID0gXCJcIjsgfVxyXG4gICAgaWYgKGlzU2VyaWFsaXphYmxlID09PSB2b2lkIDApIHsgaXNTZXJpYWxpemFibGUgPSBpc1BsYWluOyB9XHJcbiAgICBpZiAoaWdub3JlZFBhdGhzID09PSB2b2lkIDApIHsgaWdub3JlZFBhdGhzID0gW107IH1cclxuICAgIHZhciBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZTtcclxuICAgIGlmICghaXNTZXJpYWxpemFibGUodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAga2V5UGF0aDogcGF0aCB8fCBcIjxyb290PlwiLFxyXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChjYWNoZSA9PSBudWxsID8gdm9pZCAwIDogY2FjaGUuaGFzKHZhbHVlKSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB2YXIgZW50cmllcyA9IGdldEVudHJpZXMgIT0gbnVsbCA/IGdldEVudHJpZXModmFsdWUpIDogT2JqZWN0LmVudHJpZXModmFsdWUpO1xyXG4gICAgdmFyIGhhc0lnbm9yZWRQYXRocyA9IGlnbm9yZWRQYXRocy5sZW5ndGggPiAwO1xyXG4gICAgdmFyIF9sb29wXzIgPSBmdW5jdGlvbiAoa2V5LCBuZXN0ZWRWYWx1ZSkge1xyXG4gICAgICAgIHZhciBuZXN0ZWRQYXRoID0gcGF0aCA/IHBhdGggKyBcIi5cIiArIGtleSA6IGtleTtcclxuICAgICAgICBpZiAoaGFzSWdub3JlZFBhdGhzKSB7XHJcbiAgICAgICAgICAgIHZhciBoYXNNYXRjaGVzID0gaWdub3JlZFBhdGhzLnNvbWUoZnVuY3Rpb24gKGlnbm9yZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpZ25vcmVkIGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlnbm9yZWQudGVzdChuZXN0ZWRQYXRoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXN0ZWRQYXRoID09PSBpZ25vcmVkO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGhhc01hdGNoZXMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc1NlcmlhbGl6YWJsZShuZXN0ZWRWYWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHtcclxuICAgICAgICAgICAgICAgICAgICBrZXlQYXRoOiBuZXN0ZWRQYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXN0ZWRWYWx1ZVxyXG4gICAgICAgICAgICAgICAgfSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIG5lc3RlZFZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKG5lc3RlZFZhbHVlLCBuZXN0ZWRQYXRoLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzLCBjYWNoZSk7XHJcbiAgICAgICAgICAgIGlmIChmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBlbnRyaWVzXzEgPSBlbnRyaWVzOyBfaSA8IGVudHJpZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgX2MgPSBlbnRyaWVzXzFbX2ldLCBrZXkgPSBfY1swXSwgbmVzdGVkVmFsdWUgPSBfY1sxXTtcclxuICAgICAgICB2YXIgc3RhdGVfMiA9IF9sb29wXzIoa2V5LCBuZXN0ZWRWYWx1ZSk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZV8yID09PSBcIm9iamVjdFwiKVxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGVfMi52YWx1ZTtcclxuICAgIH1cclxuICAgIGlmIChjYWNoZSAmJiBpc05lc3RlZEZyb3plbih2YWx1ZSkpXHJcbiAgICAgICAgY2FjaGUuYWRkKHZhbHVlKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBpc05lc3RlZEZyb3plbih2YWx1ZSkge1xyXG4gICAgaWYgKCFPYmplY3QuaXNGcm96ZW4odmFsdWUpKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgX2MgPSBPYmplY3QudmFsdWVzKHZhbHVlKTsgX2kgPCBfYy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgbmVzdGVkVmFsdWUgPSBfY1tfaV07XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuZXN0ZWRWYWx1ZSAhPT0gXCJvYmplY3RcIiB8fCBuZXN0ZWRWYWx1ZSA9PT0gbnVsbClcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgaWYgKCFpc05lc3RlZEZyb3plbihuZXN0ZWRWYWx1ZSkpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gbmV4dChhY3Rpb24pOyB9OyB9OyB9O1xyXG4gICAgfVxyXG4gICAgdmFyIF9jID0gb3B0aW9ucy5pc1NlcmlhbGl6YWJsZSwgaXNTZXJpYWxpemFibGUgPSBfYyA9PT0gdm9pZCAwID8gaXNQbGFpbiA6IF9jLCBnZXRFbnRyaWVzID0gb3B0aW9ucy5nZXRFbnRyaWVzLCBfZCA9IG9wdGlvbnMuaWdub3JlZEFjdGlvbnMsIGlnbm9yZWRBY3Rpb25zID0gX2QgPT09IHZvaWQgMCA/IFtdIDogX2QsIF9lID0gb3B0aW9ucy5pZ25vcmVkQWN0aW9uUGF0aHMsIGlnbm9yZWRBY3Rpb25QYXRocyA9IF9lID09PSB2b2lkIDAgPyBbXCJtZXRhLmFyZ1wiLCBcIm1ldGEuYmFzZVF1ZXJ5TWV0YVwiXSA6IF9lLCBfZiA9IG9wdGlvbnMuaWdub3JlZFBhdGhzLCBpZ25vcmVkUGF0aHMgPSBfZiA9PT0gdm9pZCAwID8gW10gOiBfZiwgX2cgPSBvcHRpb25zLndhcm5BZnRlciwgd2FybkFmdGVyID0gX2cgPT09IHZvaWQgMCA/IDMyIDogX2csIF9oID0gb3B0aW9ucy5pZ25vcmVTdGF0ZSwgaWdub3JlU3RhdGUgPSBfaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfaCwgX2ogPSBvcHRpb25zLmlnbm9yZUFjdGlvbnMsIGlnbm9yZUFjdGlvbnMgPSBfaiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfaiwgX2sgPSBvcHRpb25zLmRpc2FibGVDYWNoZSwgZGlzYWJsZUNhY2hlID0gX2sgPT09IHZvaWQgMCA/IGZhbHNlIDogX2s7XHJcbiAgICB2YXIgY2FjaGUgPSAhZGlzYWJsZUNhY2hlICYmIFdlYWtTZXQgPyBuZXcgV2Vha1NldCgpIDogdm9pZCAwO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZUFQSSkgeyByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gbmV4dChhY3Rpb24pO1xyXG4gICAgICAgIHZhciBtZWFzdXJlVXRpbHMgPSBnZXRUaW1lTWVhc3VyZVV0aWxzKHdhcm5BZnRlciwgXCJTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmVcIik7XHJcbiAgICAgICAgaWYgKCFpZ25vcmVBY3Rpb25zICYmICEoaWdub3JlZEFjdGlvbnMubGVuZ3RoICYmIGlnbm9yZWRBY3Rpb25zLmluZGV4T2YoYWN0aW9uLnR5cGUpICE9PSAtMSkpIHtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKGFjdGlvbiwgXCJcIiwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRBY3Rpb25QYXRocywgY2FjaGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5UGF0aCA9IGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUua2V5UGF0aCwgdmFsdWUgPSBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJBIG5vbi1zZXJpYWxpemFibGUgdmFsdWUgd2FzIGRldGVjdGVkIGluIGFuIGFjdGlvbiwgaW4gdGhlIHBhdGg6IGBcIiArIGtleVBhdGggKyBcImAuIFZhbHVlOlwiLCB2YWx1ZSwgXCJcXG5UYWtlIGEgbG9vayBhdCB0aGUgbG9naWMgdGhhdCBkaXNwYXRjaGVkIHRoaXMgYWN0aW9uOiBcIiwgYWN0aW9uLCBcIlxcbihTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvZmFxL2FjdGlvbnMjd2h5LXNob3VsZC10eXBlLWJlLWEtc3RyaW5nLW9yLWF0LWxlYXN0LXNlcmlhbGl6YWJsZS13aHktc2hvdWxkLW15LWFjdGlvbi10eXBlcy1iZS1jb25zdGFudHMpXCIsIFwiXFxuKFRvIGFsbG93IG5vbi1zZXJpYWxpemFibGUgdmFsdWVzIHNlZTogaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy91c2FnZS91c2FnZS1ndWlkZSN3b3JraW5nLXdpdGgtbm9uLXNlcmlhbGl6YWJsZS1kYXRhKVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaWdub3JlU3RhdGUpIHtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHN0b3JlQVBJLmdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKHN0YXRlLCBcIlwiLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzLCBjYWNoZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleVBhdGggPSBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUua2V5UGF0aCwgdmFsdWUgPSBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSB3YXMgZGV0ZWN0ZWQgaW4gdGhlIHN0YXRlLCBpbiB0aGUgcGF0aDogYFwiICsga2V5UGF0aCArIFwiYC4gVmFsdWU6XCIsIHZhbHVlLCBcIlxcblRha2UgYSBsb29rIGF0IHRoZSByZWR1Y2VyKHMpIGhhbmRsaW5nIHRoaXMgYWN0aW9uIHR5cGU6IFwiICsgYWN0aW9uLnR5cGUgKyBcIi5cXG4oU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2ZhcS9vcmdhbml6aW5nLXN0YXRlI2Nhbi1pLXB1dC1mdW5jdGlvbnMtcHJvbWlzZXMtb3Itb3RoZXItbm9uLXNlcmlhbGl6YWJsZS1pdGVtcy1pbi1teS1zdG9yZS1zdGF0ZSlcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMud2FybklmRXhjZWVkZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07IH07IH07XHJcbn1cclxuLy8gc3JjL2dldERlZmF1bHRNaWRkbGV3YXJlLnRzXHJcbmZ1bmN0aW9uIGlzQm9vbGVhbih4KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHggPT09IFwiYm9vbGVhblwiO1xyXG59XHJcbmZ1bmN0aW9uIGN1cnJ5R2V0RGVmYXVsdE1pZGRsZXdhcmUoKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gZ2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucyk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XHJcbiAgICB2YXIgX2MgPSBvcHRpb25zLnRodW5rLCB0aHVuayA9IF9jID09PSB2b2lkIDAgPyB0cnVlIDogX2MsIF9kID0gb3B0aW9ucy5pbW11dGFibGVDaGVjaywgaW1tdXRhYmxlQ2hlY2sgPSBfZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9kLCBfZSA9IG9wdGlvbnMuc2VyaWFsaXphYmxlQ2hlY2ssIHNlcmlhbGl6YWJsZUNoZWNrID0gX2UgPT09IHZvaWQgMCA/IHRydWUgOiBfZTtcclxuICAgIHZhciBtaWRkbGV3YXJlQXJyYXkgPSBuZXcgTWlkZGxld2FyZUFycmF5KCk7XHJcbiAgICBpZiAodGh1bmspIHtcclxuICAgICAgICBpZiAoaXNCb29sZWFuKHRodW5rKSkge1xyXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaCh0aHVua01pZGRsZXdhcmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbWlkZGxld2FyZUFycmF5LnB1c2godGh1bmtNaWRkbGV3YXJlLndpdGhFeHRyYUFyZ3VtZW50KHRodW5rLmV4dHJhQXJndW1lbnQpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgaWYgKGltbXV0YWJsZUNoZWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBpbW11dGFibGVPcHRpb25zID0ge307XHJcbiAgICAgICAgICAgIGlmICghaXNCb29sZWFuKGltbXV0YWJsZUNoZWNrKSkge1xyXG4gICAgICAgICAgICAgICAgaW1tdXRhYmxlT3B0aW9ucyA9IGltbXV0YWJsZUNoZWNrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1pZGRsZXdhcmVBcnJheS51bnNoaWZ0KGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShpbW11dGFibGVPcHRpb25zKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzZXJpYWxpemFibGVDaGVjaykge1xyXG4gICAgICAgICAgICB2YXIgc2VyaWFsaXphYmxlT3B0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICBpZiAoIWlzQm9vbGVhbihzZXJpYWxpemFibGVDaGVjaykpIHtcclxuICAgICAgICAgICAgICAgIHNlcmlhbGl6YWJsZU9wdGlvbnMgPSBzZXJpYWxpemFibGVDaGVjaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaChjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUoc2VyaWFsaXphYmxlT3B0aW9ucykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBtaWRkbGV3YXJlQXJyYXk7XHJcbn1cclxuLy8gc3JjL2NvbmZpZ3VyZVN0b3JlLnRzXHJcbnZhciBJU19QUk9EVUNUSU9OID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiO1xyXG5mdW5jdGlvbiBjb25maWd1cmVTdG9yZShvcHRpb25zKSB7XHJcbiAgICB2YXIgY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlID0gY3VycnlHZXREZWZhdWx0TWlkZGxld2FyZSgpO1xyXG4gICAgdmFyIF9jID0gb3B0aW9ucyB8fCB7fSwgX2QgPSBfYy5yZWR1Y2VyLCByZWR1Y2VyID0gX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLCBfZSA9IF9jLm1pZGRsZXdhcmUsIG1pZGRsZXdhcmUgPSBfZSA9PT0gdm9pZCAwID8gY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKCkgOiBfZSwgX2YgPSBfYy5kZXZUb29scywgZGV2VG9vbHMgPSBfZiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9mLCBfZyA9IF9jLnByZWxvYWRlZFN0YXRlLCBwcmVsb2FkZWRTdGF0ZSA9IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZywgX2ggPSBfYy5lbmhhbmNlcnMsIGVuaGFuY2VycyA9IF9oID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaDtcclxuICAgIHZhciByb290UmVkdWNlcjtcclxuICAgIGlmICh0eXBlb2YgcmVkdWNlciA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgcm9vdFJlZHVjZXIgPSByZWR1Y2VyO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChyZWR1Y2VyKSkge1xyXG4gICAgICAgIHJvb3RSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHJlZHVjZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcInJlZHVjZXJcIiBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50LCBhbmQgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdCBvZiBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGNvbWJpbmVSZWR1Y2VycycpO1xyXG4gICAgfVxyXG4gICAgdmFyIGZpbmFsTWlkZGxld2FyZSA9IG1pZGRsZXdhcmU7XHJcbiAgICBpZiAodHlwZW9mIGZpbmFsTWlkZGxld2FyZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgZmluYWxNaWRkbGV3YXJlID0gZmluYWxNaWRkbGV3YXJlKGN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSk7XHJcbiAgICAgICAgaWYgKCFJU19QUk9EVUNUSU9OICYmICFBcnJheS5pc0FycmF5KGZpbmFsTWlkZGxld2FyZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2hlbiB1c2luZyBhIG1pZGRsZXdhcmUgYnVpbGRlciBmdW5jdGlvbiwgYW4gYXJyYXkgb2YgbWlkZGxld2FyZSBtdXN0IGJlIHJldHVybmVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghSVNfUFJPRFVDVElPTiAmJiBmaW5hbE1pZGRsZXdhcmUuc29tZShmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gdHlwZW9mIGl0ZW0gIT09IFwiZnVuY3Rpb25cIjsgfSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJlYWNoIG1pZGRsZXdhcmUgcHJvdmlkZWQgdG8gY29uZmlndXJlU3RvcmUgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xyXG4gICAgfVxyXG4gICAgdmFyIG1pZGRsZXdhcmVFbmhhbmNlciA9IGFwcGx5TWlkZGxld2FyZS5hcHBseSh2b2lkIDAsIGZpbmFsTWlkZGxld2FyZSk7XHJcbiAgICB2YXIgZmluYWxDb21wb3NlID0gY29tcG9zZTI7XHJcbiAgICBpZiAoZGV2VG9vbHMpIHtcclxuICAgICAgICBmaW5hbENvbXBvc2UgPSBjb21wb3NlV2l0aERldlRvb2xzKF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICAgICAgdHJhY2U6ICFJU19QUk9EVUNUSU9OXHJcbiAgICAgICAgfSwgdHlwZW9mIGRldlRvb2xzID09PSBcIm9iamVjdFwiICYmIGRldlRvb2xzKSk7XHJcbiAgICB9XHJcbiAgICB2YXIgZGVmYXVsdEVuaGFuY2VycyA9IG5ldyBFbmhhbmNlckFycmF5KG1pZGRsZXdhcmVFbmhhbmNlcik7XHJcbiAgICB2YXIgc3RvcmVFbmhhbmNlcnMgPSBkZWZhdWx0RW5oYW5jZXJzO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZW5oYW5jZXJzKSkge1xyXG4gICAgICAgIHN0b3JlRW5oYW5jZXJzID0gX19zcHJlYWRBcnJheShbbWlkZGxld2FyZUVuaGFuY2VyXSwgZW5oYW5jZXJzKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBlbmhhbmNlcnMgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIHN0b3JlRW5oYW5jZXJzID0gZW5oYW5jZXJzKGRlZmF1bHRFbmhhbmNlcnMpO1xyXG4gICAgfVxyXG4gICAgdmFyIGNvbXBvc2VkRW5oYW5jZXIgPSBmaW5hbENvbXBvc2UuYXBwbHkodm9pZCAwLCBzdG9yZUVuaGFuY2Vycyk7XHJcbiAgICByZXR1cm4gY3JlYXRlU3RvcmUocm9vdFJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBjb21wb3NlZEVuaGFuY2VyKTtcclxufVxyXG4vLyBzcmMvY3JlYXRlQWN0aW9uLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZUFjdGlvbih0eXBlLCBwcmVwYXJlQWN0aW9uKSB7XHJcbiAgICBmdW5jdGlvbiBhY3Rpb25DcmVhdG9yKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocHJlcGFyZUFjdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgcHJlcGFyZWQgPSBwcmVwYXJlQWN0aW9uLmFwcGx5KHZvaWQgMCwgYXJncyk7XHJcbiAgICAgICAgICAgIGlmICghcHJlcGFyZWQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInByZXBhcmVBY3Rpb24gZGlkIG5vdCByZXR1cm4gYW4gb2JqZWN0XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogcHJlcGFyZWQucGF5bG9hZFxyXG4gICAgICAgICAgICB9LCBcIm1ldGFcIiBpbiBwcmVwYXJlZCAmJiB7IG1ldGE6IHByZXBhcmVkLm1ldGEgfSksIFwiZXJyb3JcIiBpbiBwcmVwYXJlZCAmJiB7IGVycm9yOiBwcmVwYXJlZC5lcnJvciB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogdHlwZSwgcGF5bG9hZDogYXJnc1swXSB9O1xyXG4gICAgfVxyXG4gICAgYWN0aW9uQ3JlYXRvci50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFwiXCIgKyB0eXBlOyB9O1xyXG4gICAgYWN0aW9uQ3JlYXRvci50eXBlID0gdHlwZTtcclxuICAgIGFjdGlvbkNyZWF0b3IubWF0Y2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBhY3Rpb24udHlwZSA9PT0gdHlwZTsgfTtcclxuICAgIHJldHVybiBhY3Rpb25DcmVhdG9yO1xyXG59XHJcbmZ1bmN0aW9uIGlzQWN0aW9uKGFjdGlvbikge1xyXG4gICAgcmV0dXJuIGlzUGxhaW5PYmplY3QoYWN0aW9uKSAmJiBcInR5cGVcIiBpbiBhY3Rpb247XHJcbn1cclxuZnVuY3Rpb24gaXNGU0EoYWN0aW9uKSB7XHJcbiAgICByZXR1cm4gaXNBY3Rpb24oYWN0aW9uKSAmJiB0eXBlb2YgYWN0aW9uLnR5cGUgPT09IFwic3RyaW5nXCIgJiYgT2JqZWN0LmtleXMoYWN0aW9uKS5ldmVyeShpc1ZhbGlkS2V5KTtcclxufVxyXG5mdW5jdGlvbiBpc1ZhbGlkS2V5KGtleSkge1xyXG4gICAgcmV0dXJuIFtcInR5cGVcIiwgXCJwYXlsb2FkXCIsIFwiZXJyb3JcIiwgXCJtZXRhXCJdLmluZGV4T2Yoa2V5KSA+IC0xO1xyXG59XHJcbmZ1bmN0aW9uIGdldFR5cGUoYWN0aW9uQ3JlYXRvcikge1xyXG4gICAgcmV0dXJuIFwiXCIgKyBhY3Rpb25DcmVhdG9yO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVSZWR1Y2VyLnRzXHJcbmltcG9ydCBjcmVhdGVOZXh0U3RhdGUyLCB7IGlzRHJhZnQgYXMgaXNEcmFmdDIsIGlzRHJhZnRhYmxlIGFzIGlzRHJhZnRhYmxlMiB9IGZyb20gXCJpbW1lclwiO1xyXG4vLyBzcmMvbWFwQnVpbGRlcnMudHNcclxuZnVuY3Rpb24gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2soYnVpbGRlckNhbGxiYWNrKSB7XHJcbiAgICB2YXIgYWN0aW9uc01hcCA9IHt9O1xyXG4gICAgdmFyIGFjdGlvbk1hdGNoZXJzID0gW107XHJcbiAgICB2YXIgZGVmYXVsdENhc2VSZWR1Y2VyO1xyXG4gICAgdmFyIGJ1aWxkZXIgPSB7XHJcbiAgICAgICAgYWRkQ2FzZTogZnVuY3Rpb24gKHR5cGVPckFjdGlvbkNyZWF0b3IsIHJlZHVjZXIpIHtcclxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbk1hdGNoZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgYnVpbGRlci5hZGRDYXNlYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkTWF0Y2hlcmBcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGJ1aWxkZXIuYWRkQ2FzZWAgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIGBidWlsZGVyLmFkZERlZmF1bHRDYXNlYFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiB0eXBlT3JBY3Rpb25DcmVhdG9yID09PSBcInN0cmluZ1wiID8gdHlwZU9yQWN0aW9uQ3JlYXRvciA6IHR5cGVPckFjdGlvbkNyZWF0b3IudHlwZTtcclxuICAgICAgICAgICAgaWYgKHR5cGUgaW4gYWN0aW9uc01hcCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWRkQ2FzZSBjYW5ub3QgYmUgY2FsbGVkIHdpdGggdHdvIHJlZHVjZXJzIGZvciB0aGUgc2FtZSBhY3Rpb24gdHlwZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhY3Rpb25zTWFwW3R5cGVdID0gcmVkdWNlcjtcclxuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhZGRNYXRjaGVyOiBmdW5jdGlvbiAobWF0Y2hlciwgcmVkdWNlcikge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGJ1aWxkZXIuYWRkTWF0Y2hlcmAgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIGBidWlsZGVyLmFkZERlZmF1bHRDYXNlYFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhY3Rpb25NYXRjaGVycy5wdXNoKHsgbWF0Y2hlcjogbWF0Y2hlciwgcmVkdWNlcjogcmVkdWNlciB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhZGREZWZhdWx0Q2FzZTogZnVuY3Rpb24gKHJlZHVjZXIpIHtcclxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRDYXNlUmVkdWNlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImBidWlsZGVyLmFkZERlZmF1bHRDYXNlYCBjYW4gb25seSBiZSBjYWxsZWQgb25jZVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0Q2FzZVJlZHVjZXIgPSByZWR1Y2VyO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgYnVpbGRlckNhbGxiYWNrKGJ1aWxkZXIpO1xyXG4gICAgcmV0dXJuIFthY3Rpb25zTWFwLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyXTtcclxufVxyXG4vLyBzcmMvY3JlYXRlUmVkdWNlci50c1xyXG5mdW5jdGlvbiBpc1N0YXRlRnVuY3Rpb24oeCkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCI7XHJcbn1cclxudmFyIGhhc1dhcm5lZEFib3V0T2JqZWN0Tm90YXRpb24gPSBmYWxzZTtcclxuZnVuY3Rpb24gY3JlYXRlUmVkdWNlcihpbml0aWFsU3RhdGUsIG1hcE9yQnVpbGRlckNhbGxiYWNrLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyKSB7XHJcbiAgICBpZiAoYWN0aW9uTWF0Y2hlcnMgPT09IHZvaWQgMCkgeyBhY3Rpb25NYXRjaGVycyA9IFtdOyB9XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBtYXBPckJ1aWxkZXJDYWxsYmFjayA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICBpZiAoIWhhc1dhcm5lZEFib3V0T2JqZWN0Tm90YXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGhhc1dhcm5lZEFib3V0T2JqZWN0Tm90YXRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVGhlIG9iamVjdCBub3RhdGlvbiBmb3IgYGNyZWF0ZVJlZHVjZXJgIGlzIGRlcHJlY2F0ZWQsIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gUlRLIDIuMC4gUGxlYXNlIHVzZSB0aGUgJ2J1aWxkZXIgY2FsbGJhY2snIG5vdGF0aW9uIGluc3RlYWQ6IGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvYXBpL2NyZWF0ZVJlZHVjZXJcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB2YXIgX2MgPSB0eXBlb2YgbWFwT3JCdWlsZGVyQ2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIiA/IGV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrKG1hcE9yQnVpbGRlckNhbGxiYWNrKSA6IFttYXBPckJ1aWxkZXJDYWxsYmFjaywgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcl0sIGFjdGlvbnNNYXAgPSBfY1swXSwgZmluYWxBY3Rpb25NYXRjaGVycyA9IF9jWzFdLCBmaW5hbERlZmF1bHRDYXNlUmVkdWNlciA9IF9jWzJdO1xyXG4gICAgdmFyIGdldEluaXRpYWxTdGF0ZTtcclxuICAgIGlmIChpc1N0YXRlRnVuY3Rpb24oaW5pdGlhbFN0YXRlKSkge1xyXG4gICAgICAgIGdldEluaXRpYWxTdGF0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZyZWV6ZURyYWZ0YWJsZShpbml0aWFsU3RhdGUoKSk7IH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2YXIgZnJvemVuSW5pdGlhbFN0YXRlXzEgPSBmcmVlemVEcmFmdGFibGUoaW5pdGlhbFN0YXRlKTtcclxuICAgICAgICBnZXRJbml0aWFsU3RhdGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBmcm96ZW5Jbml0aWFsU3RhdGVfMTsgfTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7IHN0YXRlID0gZ2V0SW5pdGlhbFN0YXRlKCk7IH1cclxuICAgICAgICB2YXIgY2FzZVJlZHVjZXJzID0gX19zcHJlYWRBcnJheShbXHJcbiAgICAgICAgICAgIGFjdGlvbnNNYXBbYWN0aW9uLnR5cGVdXHJcbiAgICAgICAgXSwgZmluYWxBY3Rpb25NYXRjaGVycy5maWx0ZXIoZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRjaGVyID0gX2MubWF0Y2hlcjtcclxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXIoYWN0aW9uKTtcclxuICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHZhciByZWR1Y2VyMiA9IF9jLnJlZHVjZXI7XHJcbiAgICAgICAgICAgIHJldHVybiByZWR1Y2VyMjtcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgaWYgKGNhc2VSZWR1Y2Vycy5maWx0ZXIoZnVuY3Rpb24gKGNyKSB7IHJldHVybiAhIWNyOyB9KS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgY2FzZVJlZHVjZXJzID0gW2ZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNhc2VSZWR1Y2Vycy5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzU3RhdGUsIGNhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgIGlmIChjYXNlUmVkdWNlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzRHJhZnQyKHByZXZpb3VzU3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRyYWZ0ID0gcHJldmlvdXNTdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gY2FzZVJlZHVjZXIoZHJhZnQsIGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWlzRHJhZnRhYmxlMihwcmV2aW91c1N0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjYXNlUmVkdWNlcihwcmV2aW91c1N0YXRlLCBhY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNTdGF0ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJBIGNhc2UgcmVkdWNlciBvbiBhIG5vbi1kcmFmdGFibGUgdmFsdWUgbXVzdCBub3QgcmV0dXJuIHVuZGVmaW5lZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVOZXh0U3RhdGUyKHByZXZpb3VzU3RhdGUsIGZ1bmN0aW9uIChkcmFmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FzZVJlZHVjZXIoZHJhZnQsIGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XHJcbiAgICAgICAgfSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgcmVkdWNlci5nZXRJbml0aWFsU3RhdGUgPSBnZXRJbml0aWFsU3RhdGU7XHJcbiAgICByZXR1cm4gcmVkdWNlcjtcclxufVxyXG4vLyBzcmMvY3JlYXRlU2xpY2UudHNcclxudmFyIGhhc1dhcm5lZEFib3V0T2JqZWN0Tm90YXRpb24yID0gZmFsc2U7XHJcbmZ1bmN0aW9uIGdldFR5cGUyKHNsaWNlLCBhY3Rpb25LZXkpIHtcclxuICAgIHJldHVybiBzbGljZSArIFwiL1wiICsgYWN0aW9uS2V5O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVNsaWNlKG9wdGlvbnMpIHtcclxuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lO1xyXG4gICAgaWYgKCFuYW1lKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYG5hbWVgIGlzIGEgcmVxdWlyZWQgb3B0aW9uIGZvciBjcmVhdGVTbGljZVwiKTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJkZXZlbG9wbWVudFwiKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaW5pdGlhbFN0YXRlID09PSB2b2lkIDApIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIllvdSBtdXN0IHByb3ZpZGUgYW4gYGluaXRpYWxTdGF0ZWAgdmFsdWUgdGhhdCBpcyBub3QgYHVuZGVmaW5lZGAuIFlvdSBtYXkgaGF2ZSBtaXNzcGVsbGVkIGBpbml0aWFsU3RhdGVgXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciBpbml0aWFsU3RhdGUgPSB0eXBlb2Ygb3B0aW9ucy5pbml0aWFsU3RhdGUgPT0gXCJmdW5jdGlvblwiID8gb3B0aW9ucy5pbml0aWFsU3RhdGUgOiBmcmVlemVEcmFmdGFibGUob3B0aW9ucy5pbml0aWFsU3RhdGUpO1xyXG4gICAgdmFyIHJlZHVjZXJzID0gb3B0aW9ucy5yZWR1Y2VycyB8fCB7fTtcclxuICAgIHZhciByZWR1Y2VyTmFtZXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XHJcbiAgICB2YXIgc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWUgPSB7fTtcclxuICAgIHZhciBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSA9IHt9O1xyXG4gICAgdmFyIGFjdGlvbkNyZWF0b3JzID0ge307XHJcbiAgICByZWR1Y2VyTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAocmVkdWNlck5hbWUpIHtcclxuICAgICAgICB2YXIgbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUgPSByZWR1Y2Vyc1tyZWR1Y2VyTmFtZV07XHJcbiAgICAgICAgdmFyIHR5cGUgPSBnZXRUeXBlMihuYW1lLCByZWR1Y2VyTmFtZSk7XHJcbiAgICAgICAgdmFyIGNhc2VSZWR1Y2VyO1xyXG4gICAgICAgIHZhciBwcmVwYXJlQ2FsbGJhY2s7XHJcbiAgICAgICAgaWYgKFwicmVkdWNlclwiIGluIG1heWJlUmVkdWNlcldpdGhQcmVwYXJlKSB7XHJcbiAgICAgICAgICAgIGNhc2VSZWR1Y2VyID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUucmVkdWNlcjtcclxuICAgICAgICAgICAgcHJlcGFyZUNhbGxiYWNrID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUucHJlcGFyZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNhc2VSZWR1Y2VyID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lW3JlZHVjZXJOYW1lXSA9IGNhc2VSZWR1Y2VyO1xyXG4gICAgICAgIHNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlW3R5cGVdID0gY2FzZVJlZHVjZXI7XHJcbiAgICAgICAgYWN0aW9uQ3JlYXRvcnNbcmVkdWNlck5hbWVdID0gcHJlcGFyZUNhbGxiYWNrID8gY3JlYXRlQWN0aW9uKHR5cGUsIHByZXBhcmVDYWxsYmFjaykgOiBjcmVhdGVBY3Rpb24odHlwZSk7XHJcbiAgICB9KTtcclxuICAgIGZ1bmN0aW9uIGJ1aWxkUmVkdWNlcigpIHtcclxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5leHRyYVJlZHVjZXJzID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWhhc1dhcm5lZEFib3V0T2JqZWN0Tm90YXRpb24yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbjIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlRoZSBvYmplY3Qgbm90YXRpb24gZm9yIGBjcmVhdGVTbGljZS5leHRyYVJlZHVjZXJzYCBpcyBkZXByZWNhdGVkLCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIFJUSyAyLjAuIFBsZWFzZSB1c2UgdGhlICdidWlsZGVyIGNhbGxiYWNrJyBub3RhdGlvbiBpbnN0ZWFkOiBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL2FwaS9jcmVhdGVTbGljZVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgX2MgPSB0eXBlb2Ygb3B0aW9ucy5leHRyYVJlZHVjZXJzID09PSBcImZ1bmN0aW9uXCIgPyBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayhvcHRpb25zLmV4dHJhUmVkdWNlcnMpIDogW29wdGlvbnMuZXh0cmFSZWR1Y2Vyc10sIF9kID0gX2NbMF0sIGV4dHJhUmVkdWNlcnMgPSBfZCA9PT0gdm9pZCAwID8ge30gOiBfZCwgX2UgPSBfY1sxXSwgYWN0aW9uTWF0Y2hlcnMgPSBfZSA9PT0gdm9pZCAwID8gW10gOiBfZSwgX2YgPSBfY1syXSwgZGVmYXVsdENhc2VSZWR1Y2VyID0gX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mO1xyXG4gICAgICAgIHZhciBmaW5hbENhc2VSZWR1Y2VycyA9IF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHt9LCBleHRyYVJlZHVjZXJzKSwgc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGUpO1xyXG4gICAgICAgIHJldHVybiBjcmVhdGVSZWR1Y2VyKGluaXRpYWxTdGF0ZSwgZnVuY3Rpb24gKGJ1aWxkZXIpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGZpbmFsQ2FzZVJlZHVjZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBidWlsZGVyLmFkZENhc2Uoa2V5LCBmaW5hbENhc2VSZWR1Y2Vyc1trZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGFjdGlvbk1hdGNoZXJzXzEgPSBhY3Rpb25NYXRjaGVyczsgX2kgPCBhY3Rpb25NYXRjaGVyc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG0gPSBhY3Rpb25NYXRjaGVyc18xW19pXTtcclxuICAgICAgICAgICAgICAgIGJ1aWxkZXIuYWRkTWF0Y2hlcihtLm1hdGNoZXIsIG0ucmVkdWNlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRlZmF1bHRDYXNlUmVkdWNlcikge1xyXG4gICAgICAgICAgICAgICAgYnVpbGRlci5hZGREZWZhdWx0Q2FzZShkZWZhdWx0Q2FzZVJlZHVjZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB2YXIgX3JlZHVjZXI7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgcmVkdWNlcjogZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcclxuICAgICAgICAgICAgaWYgKCFfcmVkdWNlcilcclxuICAgICAgICAgICAgICAgIF9yZWR1Y2VyID0gYnVpbGRSZWR1Y2VyKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBfcmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFjdGlvbnM6IGFjdGlvbkNyZWF0b3JzLFxyXG4gICAgICAgIGNhc2VSZWR1Y2Vyczogc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWUsXHJcbiAgICAgICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghX3JlZHVjZXIpXHJcbiAgICAgICAgICAgICAgICBfcmVkdWNlciA9IGJ1aWxkUmVkdWNlcigpO1xyXG4gICAgICAgICAgICByZXR1cm4gX3JlZHVjZXIuZ2V0SW5pdGlhbFN0YXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvZW50aXR5X3N0YXRlLnRzXHJcbmZ1bmN0aW9uIGdldEluaXRpYWxFbnRpdHlTdGF0ZSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaWRzOiBbXSxcclxuICAgICAgICBlbnRpdGllczoge31cclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlSW5pdGlhbFN0YXRlRmFjdG9yeSgpIHtcclxuICAgIGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZShhZGRpdGlvbmFsU3RhdGUpIHtcclxuICAgICAgICBpZiAoYWRkaXRpb25hbFN0YXRlID09PSB2b2lkIDApIHsgYWRkaXRpb25hbFN0YXRlID0ge307IH1cclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihnZXRJbml0aWFsRW50aXR5U3RhdGUoKSwgYWRkaXRpb25hbFN0YXRlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IGdldEluaXRpYWxTdGF0ZTogZ2V0SW5pdGlhbFN0YXRlIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3N0YXRlX3NlbGVjdG9ycy50c1xyXG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RvcnNGYWN0b3J5KCkge1xyXG4gICAgZnVuY3Rpb24gZ2V0U2VsZWN0b3JzKHNlbGVjdFN0YXRlKSB7XHJcbiAgICAgICAgdmFyIHNlbGVjdElkcyA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gc3RhdGUuaWRzOyB9O1xyXG4gICAgICAgIHZhciBzZWxlY3RFbnRpdGllcyA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gc3RhdGUuZW50aXRpZXM7IH07XHJcbiAgICAgICAgdmFyIHNlbGVjdEFsbCA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdElkcywgc2VsZWN0RW50aXRpZXMsIGZ1bmN0aW9uIChpZHMsIGVudGl0aWVzKSB7IHJldHVybiBpZHMubWFwKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gZW50aXRpZXNbaWRdOyB9KTsgfSk7XHJcbiAgICAgICAgdmFyIHNlbGVjdElkID0gZnVuY3Rpb24gKF8sIGlkKSB7IHJldHVybiBpZDsgfTtcclxuICAgICAgICB2YXIgc2VsZWN0QnlJZCA9IGZ1bmN0aW9uIChlbnRpdGllcywgaWQpIHsgcmV0dXJuIGVudGl0aWVzW2lkXTsgfTtcclxuICAgICAgICB2YXIgc2VsZWN0VG90YWwgPSBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RJZHMsIGZ1bmN0aW9uIChpZHMpIHsgcmV0dXJuIGlkcy5sZW5ndGg7IH0pO1xyXG4gICAgICAgIGlmICghc2VsZWN0U3RhdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdElkczogc2VsZWN0SWRzLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0RW50aXRpZXM6IHNlbGVjdEVudGl0aWVzLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0QWxsOiBzZWxlY3RBbGwsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RUb3RhbDogc2VsZWN0VG90YWwsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RCeUlkOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RFbnRpdGllcywgc2VsZWN0SWQsIHNlbGVjdEJ5SWQpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMgPSBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0RW50aXRpZXMpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNlbGVjdElkczogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdElkcyksXHJcbiAgICAgICAgICAgIHNlbGVjdEVudGl0aWVzOiBzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMsXHJcbiAgICAgICAgICAgIHNlbGVjdEFsbDogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdEFsbCksXHJcbiAgICAgICAgICAgIHNlbGVjdFRvdGFsOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0VG90YWwpLFxyXG4gICAgICAgICAgICBzZWxlY3RCeUlkOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMsIHNlbGVjdElkLCBzZWxlY3RCeUlkKVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBnZXRTZWxlY3RvcnM6IGdldFNlbGVjdG9ycyB9O1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy9zdGF0ZV9hZGFwdGVyLnRzXHJcbmltcG9ydCBjcmVhdGVOZXh0U3RhdGUzLCB7IGlzRHJhZnQgYXMgaXNEcmFmdDMgfSBmcm9tIFwiaW1tZXJcIjtcclxuZnVuY3Rpb24gY3JlYXRlU2luZ2xlQXJndW1lbnRTdGF0ZU9wZXJhdG9yKG11dGF0b3IpIHtcclxuICAgIHZhciBvcGVyYXRvciA9IGNyZWF0ZVN0YXRlT3BlcmF0b3IoZnVuY3Rpb24gKF8sIHN0YXRlKSB7IHJldHVybiBtdXRhdG9yKHN0YXRlKTsgfSk7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gb3BlcmF0aW9uKHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIG9wZXJhdG9yKHN0YXRlLCB2b2lkIDApO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVTdGF0ZU9wZXJhdG9yKG11dGF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb24oc3RhdGUsIGFyZykge1xyXG4gICAgICAgIGZ1bmN0aW9uIGlzUGF5bG9hZEFjdGlvbkFyZ3VtZW50KGFyZzIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlzRlNBKGFyZzIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcnVuTXV0YXRvciA9IGZ1bmN0aW9uIChkcmFmdCkge1xyXG4gICAgICAgICAgICBpZiAoaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQoYXJnKSkge1xyXG4gICAgICAgICAgICAgICAgbXV0YXRvcihhcmcucGF5bG9hZCwgZHJhZnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbXV0YXRvcihhcmcsIGRyYWZ0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKGlzRHJhZnQzKHN0YXRlKSkge1xyXG4gICAgICAgICAgICBydW5NdXRhdG9yKHN0YXRlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU5leHRTdGF0ZTMoc3RhdGUsIHJ1bk11dGF0b3IpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3V0aWxzLnRzXHJcbmZ1bmN0aW9uIHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCkge1xyXG4gICAgdmFyIGtleSA9IHNlbGVjdElkKGVudGl0eSk7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGtleSA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFwiVGhlIGVudGl0eSBwYXNzZWQgdG8gdGhlIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24gcmV0dXJuZWQgdW5kZWZpbmVkLlwiLCBcIllvdSBzaG91bGQgcHJvYmFibHkgcHJvdmlkZSB5b3VyIG93biBgc2VsZWN0SWRgIGltcGxlbWVudGF0aW9uLlwiLCBcIlRoZSBlbnRpdHkgdGhhdCB3YXMgcGFzc2VkOlwiLCBlbnRpdHksIFwiVGhlIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb246XCIsIHNlbGVjdElkLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGtleTtcclxufVxyXG5mdW5jdGlvbiBlbnN1cmVFbnRpdGllc0FycmF5KGVudGl0aWVzKSB7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50aXRpZXMpKSB7XHJcbiAgICAgICAgZW50aXRpZXMgPSBPYmplY3QudmFsdWVzKGVudGl0aWVzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBlbnRpdGllcztcclxufVxyXG5mdW5jdGlvbiBzcGxpdEFkZGVkVXBkYXRlZEVudGl0aWVzKG5ld0VudGl0aWVzLCBzZWxlY3RJZCwgc3RhdGUpIHtcclxuICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICB2YXIgYWRkZWQgPSBbXTtcclxuICAgIHZhciB1cGRhdGVkID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIG5ld0VudGl0aWVzXzEgPSBuZXdFbnRpdGllczsgX2kgPCBuZXdFbnRpdGllc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBlbnRpdHkgPSBuZXdFbnRpdGllc18xW19pXTtcclxuICAgICAgICB2YXIgaWQgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpO1xyXG4gICAgICAgIGlmIChpZCBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICB1cGRhdGVkLnB1c2goeyBpZDogaWQsIGNoYW5nZXM6IGVudGl0eSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFkZGVkLnB1c2goZW50aXR5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW2FkZGVkLCB1cGRhdGVkXTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvdW5zb3J0ZWRfc3RhdGVfYWRhcHRlci50c1xyXG5mdW5jdGlvbiBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCkge1xyXG4gICAgZnVuY3Rpb24gYWRkT25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XHJcbiAgICAgICAgaWYgKGtleSBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRlLmlkcy5wdXNoKGtleSk7XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXNba2V5XSA9IGVudGl0eTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBuZXdFbnRpdGllc18yID0gbmV3RW50aXRpZXM7IF9pIDwgbmV3RW50aXRpZXNfMi5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGVudGl0eSA9IG5ld0VudGl0aWVzXzJbX2ldO1xyXG4gICAgICAgICAgICBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBrZXkgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpO1xyXG4gICAgICAgIGlmICghKGtleSBpbiBzdGF0ZS5lbnRpdGllcykpIHtcclxuICAgICAgICAgICAgc3RhdGUuaWRzLnB1c2goa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXNba2V5XSA9IGVudGl0eTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBuZXdFbnRpdGllc18zID0gbmV3RW50aXRpZXM7IF9pIDwgbmV3RW50aXRpZXNfMy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGVudGl0eSA9IG5ld0VudGl0aWVzXzNbX2ldO1xyXG4gICAgICAgICAgICBzZXRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldEFsbE11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBzdGF0ZS5pZHMgPSBbXTtcclxuICAgICAgICBzdGF0ZS5lbnRpdGllcyA9IHt9O1xyXG4gICAgICAgIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZW1vdmVPbmVNdXRhYmx5KGtleSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gcmVtb3ZlTWFueU11dGFibHkoW2tleV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZU1hbnlNdXRhYmx5KGtleXMsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGRpZE11dGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIGlmIChrZXkgaW4gc3RhdGUuZW50aXRpZXMpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5lbnRpdGllc1trZXldO1xyXG4gICAgICAgICAgICAgICAgZGlkTXV0YXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChkaWRNdXRhdGUpIHtcclxuICAgICAgICAgICAgc3RhdGUuaWRzID0gc3RhdGUuaWRzLmZpbHRlcihmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIGlkIGluIHN0YXRlLmVudGl0aWVzOyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZW1vdmVBbGxNdXRhYmx5KHN0YXRlKSB7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihzdGF0ZSwge1xyXG4gICAgICAgICAgICBpZHM6IFtdLFxyXG4gICAgICAgICAgICBlbnRpdGllczoge31cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHRha2VOZXdLZXkoa2V5cywgdXBkYXRlLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBvcmlnaW5hbDIgPSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xyXG4gICAgICAgIHZhciB1cGRhdGVkID0gT2JqZWN0LmFzc2lnbih7fSwgb3JpZ2luYWwyLCB1cGRhdGUuY2hhbmdlcyk7XHJcbiAgICAgICAgdmFyIG5ld0tleSA9IHNlbGVjdElkVmFsdWUodXBkYXRlZCwgc2VsZWN0SWQpO1xyXG4gICAgICAgIHZhciBoYXNOZXdLZXkgPSBuZXdLZXkgIT09IHVwZGF0ZS5pZDtcclxuICAgICAgICBpZiAoaGFzTmV3S2V5KSB7XHJcbiAgICAgICAgICAgIGtleXNbdXBkYXRlLmlkXSA9IG5ld0tleTtcclxuICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRlLmVudGl0aWVzW25ld0tleV0gPSB1cGRhdGVkO1xyXG4gICAgICAgIHJldHVybiBoYXNOZXdLZXk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cGRhdGVPbmVNdXRhYmx5KHVwZGF0ZSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBkYXRlTWFueU11dGFibHkoW3VwZGF0ZV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIG5ld0tleXMgPSB7fTtcclxuICAgICAgICB2YXIgdXBkYXRlc1BlckVudGl0eSA9IHt9O1xyXG4gICAgICAgIHVwZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAodXBkYXRlKSB7XHJcbiAgICAgICAgICAgIGlmICh1cGRhdGUuaWQgaW4gc3RhdGUuZW50aXRpZXMpIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogdXBkYXRlLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZXM6IF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHt9LCB1cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0gPyB1cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0uY2hhbmdlcyA6IG51bGwpLCB1cGRhdGUuY2hhbmdlcylcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB1cGRhdGVzID0gT2JqZWN0LnZhbHVlcyh1cGRhdGVzUGVyRW50aXR5KTtcclxuICAgICAgICB2YXIgZGlkTXV0YXRlRW50aXRpZXMgPSB1cGRhdGVzLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgaWYgKGRpZE11dGF0ZUVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHZhciBkaWRNdXRhdGVJZHMgPSB1cGRhdGVzLmZpbHRlcihmdW5jdGlvbiAodXBkYXRlKSB7IHJldHVybiB0YWtlTmV3S2V5KG5ld0tleXMsIHVwZGF0ZSwgc3RhdGUpOyB9KS5sZW5ndGggPiAwO1xyXG4gICAgICAgICAgICBpZiAoZGlkTXV0YXRlSWRzKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5pZHMgPSBPYmplY3Qua2V5cyhzdGF0ZS5lbnRpdGllcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBfYyA9IHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSksIGFkZGVkID0gX2NbMF0sIHVwZGF0ZWQgPSBfY1sxXTtcclxuICAgICAgICB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVkLCBzdGF0ZSk7XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkoYWRkZWQsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVtb3ZlQWxsOiBjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3IocmVtb3ZlQWxsTXV0YWJseSksXHJcbiAgICAgICAgYWRkT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE9uZU11dGFibHkpLFxyXG4gICAgICAgIGFkZE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkTWFueU11dGFibHkpLFxyXG4gICAgICAgIHNldE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRPbmVNdXRhYmx5KSxcclxuICAgICAgICBzZXRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE1hbnlNdXRhYmx5KSxcclxuICAgICAgICBzZXRBbGw6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0QWxsTXV0YWJseSksXHJcbiAgICAgICAgdXBkYXRlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU9uZU11dGFibHkpLFxyXG4gICAgICAgIHVwZGF0ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlTWFueU11dGFibHkpLFxyXG4gICAgICAgIHVwc2VydE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRPbmVNdXRhYmx5KSxcclxuICAgICAgICB1cHNlcnRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE1hbnlNdXRhYmx5KSxcclxuICAgICAgICByZW1vdmVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IocmVtb3ZlT25lTXV0YWJseSksXHJcbiAgICAgICAgcmVtb3ZlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihyZW1vdmVNYW55TXV0YWJseSlcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3NvcnRlZF9zdGF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCwgc29ydCkge1xyXG4gICAgdmFyIF9jID0gY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpLCByZW1vdmVPbmUgPSBfYy5yZW1vdmVPbmUsIHJlbW92ZU1hbnkgPSBfYy5yZW1vdmVNYW55LCByZW1vdmVBbGwgPSBfYy5yZW1vdmVBbGw7XHJcbiAgICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gYWRkTWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgdmFyIG1vZGVscyA9IG5ld0VudGl0aWVzLmZpbHRlcihmdW5jdGlvbiAobW9kZWwpIHsgcmV0dXJuICEoc2VsZWN0SWRWYWx1ZShtb2RlbCwgc2VsZWN0SWQpIGluIHN0YXRlLmVudGl0aWVzKTsgfSk7XHJcbiAgICAgICAgaWYgKG1vZGVscy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgbWVyZ2UobW9kZWxzLCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHNldE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzZXRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xyXG4gICAgICAgIGlmIChuZXdFbnRpdGllcy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgbWVyZ2UobmV3RW50aXRpZXMsIHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzZXRBbGxNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXMgPSB7fTtcclxuICAgICAgICBzdGF0ZS5pZHMgPSBbXTtcclxuICAgICAgICBhZGRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBkYXRlT25lTXV0YWJseSh1cGRhdGUsIHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHVwZGF0ZU1hbnlNdXRhYmx5KFt1cGRhdGVdLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBhcHBsaWVkVXBkYXRlcyA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgdXBkYXRlc18xID0gdXBkYXRlczsgX2kgPCB1cGRhdGVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB1cGRhdGUgPSB1cGRhdGVzXzFbX2ldO1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcclxuICAgICAgICAgICAgaWYgKCFlbnRpdHkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFwcGxpZWRVcGRhdGVzID0gdHJ1ZTtcclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihlbnRpdHksIHVwZGF0ZS5jaGFuZ2VzKTtcclxuICAgICAgICAgICAgdmFyIG5ld0lkID0gc2VsZWN0SWQoZW50aXR5KTtcclxuICAgICAgICAgICAgaWYgKHVwZGF0ZS5pZCAhPT0gbmV3SWQpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUuZW50aXRpZXNbbmV3SWRdID0gZW50aXR5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcHBsaWVkVXBkYXRlcykge1xyXG4gICAgICAgICAgICByZXNvcnRFbnRpdGllcyhzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBzZXJ0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHVwc2VydE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cHNlcnRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgX2MgPSBzcGxpdEFkZGVkVXBkYXRlZEVudGl0aWVzKG5ld0VudGl0aWVzLCBzZWxlY3RJZCwgc3RhdGUpLCBhZGRlZCA9IF9jWzBdLCB1cGRhdGVkID0gX2NbMV07XHJcbiAgICAgICAgdXBkYXRlTWFueU11dGFibHkodXBkYXRlZCwgc3RhdGUpO1xyXG4gICAgICAgIGFkZE1hbnlNdXRhYmx5KGFkZGVkLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhcmVBcnJheXNFcXVhbChhLCBiKSB7XHJcbiAgICAgICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGggJiYgaSA8IGIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGFbaV0gPT09IGJbaV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBtZXJnZShtb2RlbHMsIHN0YXRlKSB7XHJcbiAgICAgICAgbW9kZWxzLmZvckVhY2goZnVuY3Rpb24gKG1vZGVsKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLmVudGl0aWVzW3NlbGVjdElkKG1vZGVsKV0gPSBtb2RlbDtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXNvcnRFbnRpdGllcyhzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZXNvcnRFbnRpdGllcyhzdGF0ZSkge1xyXG4gICAgICAgIHZhciBhbGxFbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoc3RhdGUuZW50aXRpZXMpO1xyXG4gICAgICAgIGFsbEVudGl0aWVzLnNvcnQoc29ydCk7XHJcbiAgICAgICAgdmFyIG5ld1NvcnRlZElkcyA9IGFsbEVudGl0aWVzLm1hcChzZWxlY3RJZCk7XHJcbiAgICAgICAgdmFyIGlkcyA9IHN0YXRlLmlkcztcclxuICAgICAgICBpZiAoIWFyZUFycmF5c0VxdWFsKGlkcywgbmV3U29ydGVkSWRzKSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMgPSBuZXdTb3J0ZWRJZHM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZW1vdmVPbmU6IHJlbW92ZU9uZSxcclxuICAgICAgICByZW1vdmVNYW55OiByZW1vdmVNYW55LFxyXG4gICAgICAgIHJlbW92ZUFsbDogcmVtb3ZlQWxsLFxyXG4gICAgICAgIGFkZE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRPbmVNdXRhYmx5KSxcclxuICAgICAgICB1cGRhdGVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlT25lTXV0YWJseSksXHJcbiAgICAgICAgdXBzZXJ0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE9uZU11dGFibHkpLFxyXG4gICAgICAgIHNldE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRPbmVNdXRhYmx5KSxcclxuICAgICAgICBzZXRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE1hbnlNdXRhYmx5KSxcclxuICAgICAgICBzZXRBbGw6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0QWxsTXV0YWJseSksXHJcbiAgICAgICAgYWRkTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRNYW55TXV0YWJseSksXHJcbiAgICAgICAgdXBkYXRlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVNYW55TXV0YWJseSksXHJcbiAgICAgICAgdXBzZXJ0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRNYW55TXV0YWJseSlcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL2NyZWF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZUVudGl0eUFkYXB0ZXIob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIHZhciBfYyA9IF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICBzb3J0Q29tcGFyZXI6IGZhbHNlLFxyXG4gICAgICAgIHNlbGVjdElkOiBmdW5jdGlvbiAoaW5zdGFuY2UpIHsgcmV0dXJuIGluc3RhbmNlLmlkOyB9XHJcbiAgICB9LCBvcHRpb25zKSwgc2VsZWN0SWQgPSBfYy5zZWxlY3RJZCwgc29ydENvbXBhcmVyID0gX2Muc29ydENvbXBhcmVyO1xyXG4gICAgdmFyIHN0YXRlRmFjdG9yeSA9IGNyZWF0ZUluaXRpYWxTdGF0ZUZhY3RvcnkoKTtcclxuICAgIHZhciBzZWxlY3RvcnNGYWN0b3J5ID0gY3JlYXRlU2VsZWN0b3JzRmFjdG9yeSgpO1xyXG4gICAgdmFyIHN0YXRlQWRhcHRlciA9IHNvcnRDb21wYXJlciA/IGNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCwgc29ydENvbXBhcmVyKSA6IGNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkKTtcclxuICAgIHJldHVybiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7XHJcbiAgICAgICAgc2VsZWN0SWQ6IHNlbGVjdElkLFxyXG4gICAgICAgIHNvcnRDb21wYXJlcjogc29ydENvbXBhcmVyXHJcbiAgICB9LCBzdGF0ZUZhY3RvcnkpLCBzZWxlY3RvcnNGYWN0b3J5KSwgc3RhdGVBZGFwdGVyKTtcclxufVxyXG4vLyBzcmMvbmFub2lkLnRzXHJcbnZhciB1cmxBbHBoYWJldCA9IFwiTW9kdWxlU3ltYmhhc093blByLTAxMjM0NTY3ODlBQkNERUZHSE5SVmZnY3RpVXZ6X0txWVRKa0x4cFpYSWpRV1wiO1xyXG52YXIgbmFub2lkID0gZnVuY3Rpb24gKHNpemUpIHtcclxuICAgIGlmIChzaXplID09PSB2b2lkIDApIHsgc2l6ZSA9IDIxOyB9XHJcbiAgICB2YXIgaWQgPSBcIlwiO1xyXG4gICAgdmFyIGkgPSBzaXplO1xyXG4gICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgIGlkICs9IHVybEFscGhhYmV0W01hdGgucmFuZG9tKCkgKiA2NCB8IDBdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlkO1xyXG59O1xyXG4vLyBzcmMvY3JlYXRlQXN5bmNUaHVuay50c1xyXG52YXIgY29tbW9uUHJvcGVydGllcyA9IFtcclxuICAgIFwibmFtZVwiLFxyXG4gICAgXCJtZXNzYWdlXCIsXHJcbiAgICBcInN0YWNrXCIsXHJcbiAgICBcImNvZGVcIlxyXG5dO1xyXG52YXIgUmVqZWN0V2l0aFZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVqZWN0V2l0aFZhbHVlKHBheWxvYWQsIG1ldGEpIHtcclxuICAgICAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xyXG4gICAgICAgIHRoaXMubWV0YSA9IG1ldGE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVqZWN0V2l0aFZhbHVlO1xyXG59KCkpO1xyXG52YXIgRnVsZmlsbFdpdGhNZXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRnVsZmlsbFdpdGhNZXRhKHBheWxvYWQsIG1ldGEpIHtcclxuICAgICAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xyXG4gICAgICAgIHRoaXMubWV0YSA9IG1ldGE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRnVsZmlsbFdpdGhNZXRhO1xyXG59KCkpO1xyXG52YXIgbWluaVNlcmlhbGl6ZUVycm9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgdmFyIHNpbXBsZUVycm9yID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjb21tb25Qcm9wZXJ0aWVzXzEgPSBjb21tb25Qcm9wZXJ0aWVzOyBfaSA8IGNvbW1vblByb3BlcnRpZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gY29tbW9uUHJvcGVydGllc18xW19pXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZVtwcm9wZXJ0eV0gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHNpbXBsZUVycm9yW3Byb3BlcnR5XSA9IHZhbHVlW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2ltcGxlRXJyb3I7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBtZXNzYWdlOiBTdHJpbmcodmFsdWUpIH07XHJcbn07XHJcbnZhciBjcmVhdGVBc3luY1RodW5rID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFzeW5jVGh1bmsyKHR5cGVQcmVmaXgsIHBheWxvYWRDcmVhdG9yLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIGZ1bGZpbGxlZCA9IGNyZWF0ZUFjdGlvbih0eXBlUHJlZml4ICsgXCIvZnVsZmlsbGVkXCIsIGZ1bmN0aW9uIChwYXlsb2FkLCByZXF1ZXN0SWQsIGFyZywgbWV0YSkgeyByZXR1cm4gKHtcclxuICAgICAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcclxuICAgICAgICAgICAgbWV0YTogX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgbWV0YSB8fCB7fSksIHtcclxuICAgICAgICAgICAgICAgIGFyZzogYXJnLFxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0U3RhdHVzOiBcImZ1bGZpbGxlZFwiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgICAgIHZhciBwZW5kaW5nID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyBcIi9wZW5kaW5nXCIsIGZ1bmN0aW9uIChyZXF1ZXN0SWQsIGFyZywgbWV0YSkgeyByZXR1cm4gKHtcclxuICAgICAgICAgICAgcGF5bG9hZDogdm9pZCAwLFxyXG4gICAgICAgICAgICBtZXRhOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBtZXRhIHx8IHt9KSwge1xyXG4gICAgICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RTdGF0dXM6IFwicGVuZGluZ1wiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgICAgIHZhciByZWplY3RlZCA9IGNyZWF0ZUFjdGlvbih0eXBlUHJlZml4ICsgXCIvcmVqZWN0ZWRcIiwgZnVuY3Rpb24gKGVycm9yLCByZXF1ZXN0SWQsIGFyZywgcGF5bG9hZCwgbWV0YSkgeyByZXR1cm4gKHtcclxuICAgICAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcclxuICAgICAgICAgICAgZXJyb3I6IChvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplRXJyb3IgfHwgbWluaVNlcmlhbGl6ZUVycm9yKShlcnJvciB8fCBcIlJlamVjdGVkXCIpLFxyXG4gICAgICAgICAgICBtZXRhOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBtZXRhIHx8IHt9KSwge1xyXG4gICAgICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgIHJlamVjdGVkV2l0aFZhbHVlOiAhIXBheWxvYWQsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0U3RhdHVzOiBcInJlamVjdGVkXCIsXHJcbiAgICAgICAgICAgICAgICBhYm9ydGVkOiAoZXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yLm5hbWUpID09PSBcIkFib3J0RXJyb3JcIixcclxuICAgICAgICAgICAgICAgIGNvbmRpdGlvbjogKGVycm9yID09IG51bGwgPyB2b2lkIDAgOiBlcnJvci5uYW1lKSA9PT0gXCJDb25kaXRpb25FcnJvclwiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgICAgIHZhciBkaXNwbGF5ZWRXYXJuaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIEFDID0gdHlwZW9mIEFib3J0Q29udHJvbGxlciAhPT0gXCJ1bmRlZmluZWRcIiA/IEFib3J0Q29udHJvbGxlciA6IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZnVuY3Rpb24gY2xhc3NfMSgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2lnbmFsID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0ZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgb25hYm9ydDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVhc29uOiB2b2lkIDAsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3dJZkFib3J0ZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNsYXNzXzEucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZGlzcGxheWVkV2FybmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5ZWRXYXJuaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiVGhpcyBwbGF0Zm9ybSBkb2VzIG5vdCBpbXBsZW1lbnQgQWJvcnRDb250cm9sbGVyLiBcXG5JZiB5b3Ugd2FudCB0byB1c2UgdGhlIEFib3J0Q29udHJvbGxlciB0byByZWFjdCB0byBgYWJvcnRgIGV2ZW50cywgcGxlYXNlIGNvbnNpZGVyIGltcG9ydGluZyBhIHBvbHlmaWxsIGxpa2UgJ2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC9kaXN0L2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC1vbmx5Jy5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gY2xhc3NfMTtcclxuICAgICAgICB9KCkpO1xyXG4gICAgICAgIGZ1bmN0aW9uIGFjdGlvbkNyZWF0b3IoYXJnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlcXVlc3RJZCA9IChvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmlkR2VuZXJhdG9yKSA/IG9wdGlvbnMuaWRHZW5lcmF0b3IoYXJnKSA6IG5hbm9pZCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGFib3J0Q29udHJvbGxlciA9IG5ldyBBQygpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGFib3J0UmVhc29uO1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFib3J0KHJlYXNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0UmVhc29uID0gcmVhc29uO1xyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlci5hYm9ydCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHByb21pc2UyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgZmluYWxBY3Rpb24sIGNvbmRpdGlvblJlc3VsdCwgYWJvcnRlZFByb21pc2UsIGVycl8xLCBza2lwRGlzcGF0Y2g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jLnRyeXMucHVzaChbMCwgNCwgLCA1XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvblJlc3VsdCA9IChfYSA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuY29uZGl0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChvcHRpb25zLCBhcmcsIHsgZ2V0U3RhdGU6IGdldFN0YXRlLCBleHRyYTogZXh0cmEgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNUaGVuYWJsZShjb25kaXRpb25SZXN1bHQpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgY29uZGl0aW9uUmVzdWx0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvblJlc3VsdCA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmRpdGlvblJlc3VsdCA9PT0gZmFsc2UgfHwgYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hYm9ydGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb25kaXRpb25FcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiQWJvcnRlZCBkdWUgdG8gY29uZGl0aW9uIGNhbGxiYWNrIHJldHVybmluZyBmYWxzZS5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnRlZFByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAoXywgcmVqZWN0KSB7IHJldHVybiBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZWplY3Qoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJBYm9ydEVycm9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBhYm9ydFJlYXNvbiB8fCBcIkFib3J0ZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgfSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChwZW5kaW5nKHJlcXVlc3RJZCwgYXJnLCAoX2IgPSBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmdldFBlbmRpbmdNZXRhKSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChvcHRpb25zLCB7IHJlcXVlc3RJZDogcmVxdWVzdElkLCBhcmc6IGFyZyB9LCB7IGdldFN0YXRlOiBnZXRTdGF0ZSwgZXh0cmE6IGV4dHJhIH0pKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UucmFjZShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnRlZFByb21pc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHBheWxvYWRDcmVhdG9yKGFyZywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IGV4dHJhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsOiBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydDogYWJvcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdFdpdGhWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBtZXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlamVjdFdpdGhWYWx1ZSh2YWx1ZSwgbWV0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGxXaXRoVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgbWV0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGdWxmaWxsV2l0aE1ldGEodmFsdWUsIG1ldGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUmVqZWN0V2l0aFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEZ1bGZpbGxXaXRoTWV0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZChyZXN1bHQucGF5bG9hZCwgcmVxdWVzdElkLCBhcmcsIHJlc3VsdC5tZXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVsZmlsbGVkKHJlc3VsdCwgcmVxdWVzdElkLCBhcmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEFjdGlvbiA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJfMSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxBY3Rpb24gPSBlcnJfMSBpbnN0YW5jZW9mIFJlamVjdFdpdGhWYWx1ZSA/IHJlamVjdGVkKG51bGwsIHJlcXVlc3RJZCwgYXJnLCBlcnJfMS5wYXlsb2FkLCBlcnJfMS5tZXRhKSA6IHJlamVjdGVkKGVycl8xLCByZXF1ZXN0SWQsIGFyZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcERpc3BhdGNoID0gb3B0aW9ucyAmJiAhb3B0aW9ucy5kaXNwYXRjaENvbmRpdGlvblJlamVjdGlvbiAmJiByZWplY3RlZC5tYXRjaChmaW5hbEFjdGlvbikgJiYgZmluYWxBY3Rpb24ubWV0YS5jb25kaXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2tpcERpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChmaW5hbEFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZpbmFsQWN0aW9uXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihwcm9taXNlMiwge1xyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0OiBhYm9ydCxcclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgICAgICBhcmc6IGFyZyxcclxuICAgICAgICAgICAgICAgICAgICB1bndyYXA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2UyLnRoZW4odW53cmFwUmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWN0aW9uQ3JlYXRvciwge1xyXG4gICAgICAgICAgICBwZW5kaW5nOiBwZW5kaW5nLFxyXG4gICAgICAgICAgICByZWplY3RlZDogcmVqZWN0ZWQsXHJcbiAgICAgICAgICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxyXG4gICAgICAgICAgICB0eXBlUHJlZml4OiB0eXBlUHJlZml4XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVBc3luY1RodW5rMi53aXRoVHlwZXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjcmVhdGVBc3luY1RodW5rMjsgfTtcclxuICAgIHJldHVybiBjcmVhdGVBc3luY1RodW5rMjtcclxufSkoKTtcclxuZnVuY3Rpb24gdW53cmFwUmVzdWx0KGFjdGlvbikge1xyXG4gICAgaWYgKGFjdGlvbi5tZXRhICYmIGFjdGlvbi5tZXRhLnJlamVjdGVkV2l0aFZhbHVlKSB7XHJcbiAgICAgICAgdGhyb3cgYWN0aW9uLnBheWxvYWQ7XHJcbiAgICB9XHJcbiAgICBpZiAoYWN0aW9uLmVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgYWN0aW9uLmVycm9yO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkO1xyXG59XHJcbmZ1bmN0aW9uIGlzVGhlbmFibGUodmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09IFwiZnVuY3Rpb25cIjtcclxufVxyXG4vLyBzcmMvdHNIZWxwZXJzLnRzXHJcbnZhciBoYXNNYXRjaEZ1bmN0aW9uID0gZnVuY3Rpb24gKHYpIHtcclxuICAgIHJldHVybiB2ICYmIHR5cGVvZiB2Lm1hdGNoID09PSBcImZ1bmN0aW9uXCI7XHJcbn07XHJcbi8vIHNyYy9tYXRjaGVycy50c1xyXG52YXIgbWF0Y2hlcyA9IGZ1bmN0aW9uIChtYXRjaGVyLCBhY3Rpb24pIHtcclxuICAgIGlmIChoYXNNYXRjaEZ1bmN0aW9uKG1hdGNoZXIpKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIubWF0Y2goYWN0aW9uKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBtYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGlzQW55T2YoKSB7XHJcbiAgICB2YXIgbWF0Y2hlcnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgbWF0Y2hlcnNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXJzLnNvbWUoZnVuY3Rpb24gKG1hdGNoZXIpIHsgcmV0dXJuIG1hdGNoZXMobWF0Y2hlciwgYWN0aW9uKTsgfSk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzQWxsT2YoKSB7XHJcbiAgICB2YXIgbWF0Y2hlcnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgbWF0Y2hlcnNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXJzLmV2ZXJ5KGZ1bmN0aW9uIChtYXRjaGVyKSB7IHJldHVybiBtYXRjaGVzKG1hdGNoZXIsIGFjdGlvbik7IH0pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIHZhbGlkU3RhdHVzKSB7XHJcbiAgICBpZiAoIWFjdGlvbiB8fCAhYWN0aW9uLm1ldGEpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIGhhc1ZhbGlkUmVxdWVzdElkID0gdHlwZW9mIGFjdGlvbi5tZXRhLnJlcXVlc3RJZCA9PT0gXCJzdHJpbmdcIjtcclxuICAgIHZhciBoYXNWYWxpZFJlcXVlc3RTdGF0dXMgPSB2YWxpZFN0YXR1cy5pbmRleE9mKGFjdGlvbi5tZXRhLnJlcXVlc3RTdGF0dXMpID4gLTE7XHJcbiAgICByZXR1cm4gaGFzVmFsaWRSZXF1ZXN0SWQgJiYgaGFzVmFsaWRSZXF1ZXN0U3RhdHVzO1xyXG59XHJcbmZ1bmN0aW9uIGlzQXN5bmNUaHVua0FycmF5KGEpIHtcclxuICAgIHJldHVybiB0eXBlb2YgYVswXSA9PT0gXCJmdW5jdGlvblwiICYmIFwicGVuZGluZ1wiIGluIGFbMF0gJiYgXCJmdWxmaWxsZWRcIiBpbiBhWzBdICYmIFwicmVqZWN0ZWRcIiBpbiBhWzBdO1xyXG59XHJcbmZ1bmN0aW9uIGlzUGVuZGluZygpIHtcclxuICAgIHZhciBhc3luY1RodW5rcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhc3luY1RodW5rc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFtcInBlbmRpbmdcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNQZW5kaW5nKCkoYXN5bmNUaHVua3NbMF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgbWF0Y2hlcnMgPSBhc3luY1RodW5rcy5tYXAoZnVuY3Rpb24gKGFzeW5jVGh1bmspIHsgcmV0dXJuIGFzeW5jVGh1bmsucGVuZGluZzsgfSk7XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc1JlamVjdGVkKCkge1xyXG4gICAgdmFyIGFzeW5jVGh1bmtzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFzeW5jVGh1bmtzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicmVqZWN0ZWRcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNSZWplY3RlZCgpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXJzID0gYXN5bmNUaHVua3MubWFwKGZ1bmN0aW9uIChhc3luY1RodW5rKSB7IHJldHVybiBhc3luY1RodW5rLnJlamVjdGVkOyB9KTtcclxuICAgICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZi5hcHBseSh2b2lkIDAsIG1hdGNoZXJzKTtcclxuICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzUmVqZWN0ZWRXaXRoVmFsdWUoKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBoYXNGbGFnID0gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHJldHVybiBhY3Rpb24gJiYgYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEucmVqZWN0ZWRXaXRoVmFsdWU7XHJcbiAgICB9O1xyXG4gICAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FsbE9mKGlzUmVqZWN0ZWQuYXBwbHkodm9pZCAwLCBhc3luY1RodW5rcyksIGhhc0ZsYWcpO1xyXG4gICAgICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzUmVqZWN0ZWRXaXRoVmFsdWUoKShhc3luY1RodW5rc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FsbE9mKGlzUmVqZWN0ZWQuYXBwbHkodm9pZCAwLCBhc3luY1RodW5rcyksIGhhc0ZsYWcpO1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNGdWxmaWxsZWQoKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJmdWxmaWxsZWRcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNGdWxmaWxsZWQoKShhc3luY1RodW5rc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBtYXRjaGVycyA9IGFzeW5jVGh1bmtzLm1hcChmdW5jdGlvbiAoYXN5bmNUaHVuaykgeyByZXR1cm4gYXN5bmNUaHVuay5mdWxmaWxsZWQ7IH0pO1xyXG4gICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNBc3luY1RodW5rQWN0aW9uKCkge1xyXG4gICAgdmFyIGFzeW5jVGh1bmtzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFzeW5jVGh1bmtzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicGVuZGluZ1wiLCBcImZ1bGZpbGxlZFwiLCBcInJlamVjdGVkXCJdKTsgfTtcclxuICAgIH1cclxuICAgIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzQXN5bmNUaHVua0FjdGlvbigpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXJzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBhc3luY1RodW5rc18xID0gYXN5bmNUaHVua3M7IF9pIDwgYXN5bmNUaHVua3NfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGFzeW5jVGh1bmsgPSBhc3luY1RodW5rc18xW19pXTtcclxuICAgICAgICAgICAgbWF0Y2hlcnMucHVzaChhc3luY1RodW5rLnBlbmRpbmcsIGFzeW5jVGh1bmsucmVqZWN0ZWQsIGFzeW5jVGh1bmsuZnVsZmlsbGVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvbGlzdGVuZXJNaWRkbGV3YXJlL3V0aWxzLnRzXHJcbnZhciBhc3NlcnRGdW5jdGlvbiA9IGZ1bmN0aW9uIChmdW5jLCBleHBlY3RlZCkge1xyXG4gICAgaWYgKHR5cGVvZiBmdW5jICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGV4cGVjdGVkICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XHJcbiAgICB9XHJcbn07XHJcbnZhciBub29wID0gZnVuY3Rpb24gKCkge1xyXG59O1xyXG52YXIgY2F0Y2hSZWplY3Rpb24gPSBmdW5jdGlvbiAocHJvbWlzZTIsIG9uRXJyb3IpIHtcclxuICAgIGlmIChvbkVycm9yID09PSB2b2lkIDApIHsgb25FcnJvciA9IG5vb3A7IH1cclxuICAgIHByb21pc2UyLmNhdGNoKG9uRXJyb3IpO1xyXG4gICAgcmV0dXJuIHByb21pc2UyO1xyXG59O1xyXG52YXIgYWRkQWJvcnRTaWduYWxMaXN0ZW5lciA9IGZ1bmN0aW9uIChhYm9ydFNpZ25hbCwgY2FsbGJhY2spIHtcclxuICAgIGFib3J0U2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBjYWxsYmFjaywgeyBvbmNlOiB0cnVlIH0pO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFib3J0U2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBjYWxsYmFjayk7IH07XHJcbn07XHJcbnZhciBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uID0gZnVuY3Rpb24gKGFib3J0Q29udHJvbGxlciwgcmVhc29uKSB7XHJcbiAgICB2YXIgc2lnbmFsID0gYWJvcnRDb250cm9sbGVyLnNpZ25hbDtcclxuICAgIGlmIChzaWduYWwuYWJvcnRlZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghKFwicmVhc29uXCIgaW4gc2lnbmFsKSkge1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzaWduYWwsIFwicmVhc29uXCIsIHtcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgdmFsdWU6IHJlYXNvbixcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgO1xyXG4gICAgYWJvcnRDb250cm9sbGVyLmFib3J0KHJlYXNvbik7XHJcbn07XHJcbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvZXhjZXB0aW9ucy50c1xyXG52YXIgdGFzayA9IFwidGFza1wiO1xyXG52YXIgbGlzdGVuZXIgPSBcImxpc3RlbmVyXCI7XHJcbnZhciBjb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xyXG52YXIgY2FuY2VsbGVkID0gXCJjYW5jZWxsZWRcIjtcclxudmFyIHRhc2tDYW5jZWxsZWQgPSBcInRhc2stXCIgKyBjYW5jZWxsZWQ7XHJcbnZhciB0YXNrQ29tcGxldGVkID0gXCJ0YXNrLVwiICsgY29tcGxldGVkO1xyXG52YXIgbGlzdGVuZXJDYW5jZWxsZWQgPSBsaXN0ZW5lciArIFwiLVwiICsgY2FuY2VsbGVkO1xyXG52YXIgbGlzdGVuZXJDb21wbGV0ZWQgPSBsaXN0ZW5lciArIFwiLVwiICsgY29tcGxldGVkO1xyXG52YXIgVGFza0Fib3J0RXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBUYXNrQWJvcnRFcnJvcihjb2RlKSB7XHJcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBcIlRhc2tBYm9ydEVycm9yXCI7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gdGFzayArIFwiIFwiICsgY2FuY2VsbGVkICsgXCIgKHJlYXNvbjogXCIgKyBjb2RlICsgXCIpXCI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gVGFza0Fib3J0RXJyb3I7XHJcbn0oKSk7XHJcbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvdGFzay50c1xyXG52YXIgdmFsaWRhdGVBY3RpdmUgPSBmdW5jdGlvbiAoc2lnbmFsKSB7XHJcbiAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVGFza0Fib3J0RXJyb3Ioc2lnbmFsLnJlYXNvbik7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHJhY2VXaXRoU2lnbmFsKHNpZ25hbCwgcHJvbWlzZTIpIHtcclxuICAgIHZhciBjbGVhbnVwID0gbm9vcDtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgdmFyIG5vdGlmeVJlamVjdGlvbiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlamVjdChuZXcgVGFza0Fib3J0RXJyb3Ioc2lnbmFsLnJlYXNvbikpOyB9O1xyXG4gICAgICAgIGlmIChzaWduYWwuYWJvcnRlZCkge1xyXG4gICAgICAgICAgICBub3RpZnlSZWplY3Rpb24oKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjbGVhbnVwID0gYWRkQWJvcnRTaWduYWxMaXN0ZW5lcihzaWduYWwsIG5vdGlmeVJlamVjdGlvbik7XHJcbiAgICAgICAgcHJvbWlzZTIuZmluYWxseShmdW5jdGlvbiAoKSB7IHJldHVybiBjbGVhbnVwKCk7IH0pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcclxuICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNsZWFudXAgPSBub29wO1xyXG4gICAgfSk7XHJcbn1cclxudmFyIHJ1blRhc2sgPSBmdW5jdGlvbiAodGFzazIsIGNsZWFuVXApIHsgcmV0dXJuIF9fYXN5bmModm9pZCAwLCBudWxsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdmFsdWUsIGVycm9yXzE7XHJcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzAsIDMsIDQsIDVdKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UucmVzb2x2ZSgpXTtcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGFzazIoKV07XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBcIm9rXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICBlcnJvcl8xID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBlcnJvcl8xIGluc3RhbmNlb2YgVGFza0Fib3J0RXJyb3IgPyBcImNhbmNlbGxlZFwiIDogXCJyZWplY3RlZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3JfMVxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICBjbGVhblVwID09IG51bGwgPyB2b2lkIDAgOiBjbGVhblVwKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xyXG4gICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSk7IH07XHJcbnZhciBjcmVhdGVQYXVzZSA9IGZ1bmN0aW9uIChzaWduYWwpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAocHJvbWlzZTIpIHtcclxuICAgICAgICByZXR1cm4gY2F0Y2hSZWplY3Rpb24ocmFjZVdpdGhTaWduYWwoc2lnbmFsLCBwcm9taXNlMikudGhlbihmdW5jdGlvbiAob3V0cHV0KSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZlKHNpZ25hbCk7XHJcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfTtcclxufTtcclxudmFyIGNyZWF0ZURlbGF5ID0gZnVuY3Rpb24gKHNpZ25hbCkge1xyXG4gICAgdmFyIHBhdXNlID0gY3JlYXRlUGF1c2Uoc2lnbmFsKTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGltZW91dE1zKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdXNlKG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJldHVybiBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXRNcyk7IH0pKTtcclxuICAgIH07XHJcbn07XHJcbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvaW5kZXgudHNcclxudmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XHJcbnZhciBJTlRFUk5BTF9OSUxfVE9LRU4gPSB7fTtcclxudmFyIGFsbSA9IFwibGlzdGVuZXJNaWRkbGV3YXJlXCI7XHJcbnZhciBjcmVhdGVGb3JrID0gZnVuY3Rpb24gKHBhcmVudEFib3J0U2lnbmFsKSB7XHJcbiAgICB2YXIgbGlua0NvbnRyb2xsZXJzID0gZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHsgcmV0dXJuIGFkZEFib3J0U2lnbmFsTGlzdGVuZXIocGFyZW50QWJvcnRTaWduYWwsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgcGFyZW50QWJvcnRTaWduYWwucmVhc29uKTsgfSk7IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhc2tFeGVjdXRvcikge1xyXG4gICAgICAgIGFzc2VydEZ1bmN0aW9uKHRhc2tFeGVjdXRvciwgXCJ0YXNrRXhlY3V0b3JcIik7XHJcbiAgICAgICAgdmFyIGNoaWxkQWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xyXG4gICAgICAgIGxpbmtDb250cm9sbGVycyhjaGlsZEFib3J0Q29udHJvbGxlcik7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJ1blRhc2soZnVuY3Rpb24gKCkgeyByZXR1cm4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdDI7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZlKHBhcmVudEFib3J0U2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGFza0V4ZWN1dG9yKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXVzZTogY3JlYXRlUGF1c2UoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogY3JlYXRlRGVsYXkoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0MiA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3VsdDJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjaGlsZEFib3J0Q29udHJvbGxlciwgdGFza0NvbXBsZXRlZCk7IH0pO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3VsdDogY3JlYXRlUGF1c2UocGFyZW50QWJvcnRTaWduYWwpKHJlc3VsdCksXHJcbiAgICAgICAgICAgIGNhbmNlbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjaGlsZEFib3J0Q29udHJvbGxlciwgdGFza0NhbmNlbGxlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxufTtcclxudmFyIGNyZWF0ZVRha2VQYXR0ZXJuID0gZnVuY3Rpb24gKHN0YXJ0TGlzdGVuaW5nLCBzaWduYWwpIHtcclxuICAgIHZhciB0YWtlID0gZnVuY3Rpb24gKHByZWRpY2F0ZSwgdGltZW91dCkgeyByZXR1cm4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdW5zdWJzY3JpYmUsIHR1cGxlUHJvbWlzZSwgcHJvbWlzZXMsIG91dHB1dDtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUFjdGl2ZShzaWduYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdHVwbGVQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcExpc3RlbmluZyA9IHN0YXJ0TGlzdGVuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWRpY2F0ZTogcHJlZGljYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiBmdW5jdGlvbiAoYWN0aW9uLCBsaXN0ZW5lckFwaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyQXBpLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJBcGkuZ2V0U3RhdGUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJBcGkuZ2V0T3JpZ2luYWxTdGF0ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3BMaXN0ZW5pbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb21pc2VzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0dXBsZVByb21pc2VcclxuICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXR1cm4gc2V0VGltZW91dChyZXNvbHZlLCB0aW1lb3V0LCBudWxsKTsgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgX2MudHJ5cy5wdXNoKFsxLCAsIDMsIDRdKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByYWNlV2l0aFNpZ25hbChzaWduYWwsIFByb21pc2UucmFjZShwcm9taXNlcykpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoc2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgb3V0cHV0XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHByZWRpY2F0ZSwgdGltZW91dCkgeyByZXR1cm4gY2F0Y2hSZWplY3Rpb24odGFrZShwcmVkaWNhdGUsIHRpbWVvdXQpKTsgfTtcclxufTtcclxudmFyIGdldExpc3RlbmVyRW50cnlQcm9wc0Zyb20gPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgdmFyIHR5cGUgPSBvcHRpb25zLnR5cGUsIGFjdGlvbkNyZWF0b3IgPSBvcHRpb25zLmFjdGlvbkNyZWF0b3IsIG1hdGNoZXIgPSBvcHRpb25zLm1hdGNoZXIsIHByZWRpY2F0ZSA9IG9wdGlvbnMucHJlZGljYXRlLCBlZmZlY3QgPSBvcHRpb25zLmVmZmVjdDtcclxuICAgIGlmICh0eXBlKSB7XHJcbiAgICAgICAgcHJlZGljYXRlID0gY3JlYXRlQWN0aW9uKHR5cGUpLm1hdGNoO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoYWN0aW9uQ3JlYXRvcikge1xyXG4gICAgICAgIHR5cGUgPSBhY3Rpb25DcmVhdG9yLnR5cGU7XHJcbiAgICAgICAgcHJlZGljYXRlID0gYWN0aW9uQ3JlYXRvci5tYXRjaDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKG1hdGNoZXIpIHtcclxuICAgICAgICBwcmVkaWNhdGUgPSBtYXRjaGVyO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocHJlZGljYXRlKSB7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDcmVhdGluZyBvciByZW1vdmluZyBhIGxpc3RlbmVyIHJlcXVpcmVzIG9uZSBvZiB0aGUga25vd24gZmllbGRzIGZvciBtYXRjaGluZyBhbiBhY3Rpb25cIik7XHJcbiAgICB9XHJcbiAgICBhc3NlcnRGdW5jdGlvbihlZmZlY3QsIFwib3B0aW9ucy5saXN0ZW5lclwiKTtcclxuICAgIHJldHVybiB7IHByZWRpY2F0ZTogcHJlZGljYXRlLCB0eXBlOiB0eXBlLCBlZmZlY3Q6IGVmZmVjdCB9O1xyXG59O1xyXG52YXIgY3JlYXRlTGlzdGVuZXJFbnRyeSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICB2YXIgX2MgPSBnZXRMaXN0ZW5lckVudHJ5UHJvcHNGcm9tKG9wdGlvbnMpLCB0eXBlID0gX2MudHlwZSwgcHJlZGljYXRlID0gX2MucHJlZGljYXRlLCBlZmZlY3QgPSBfYy5lZmZlY3Q7XHJcbiAgICB2YXIgaWQgPSBuYW5vaWQoKTtcclxuICAgIHZhciBlbnRyeSA9IHtcclxuICAgICAgICBpZDogaWQsXHJcbiAgICAgICAgZWZmZWN0OiBlZmZlY3QsXHJcbiAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICBwcmVkaWNhdGU6IHByZWRpY2F0ZSxcclxuICAgICAgICBwZW5kaW5nOiBuZXcgU2V0KCksXHJcbiAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdWJzY3JpYmUgbm90IGluaXRpYWxpemVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gZW50cnk7XHJcbn07XHJcbnZhciBjYW5jZWxBY3RpdmVMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoZW50cnkpIHtcclxuICAgIGVudHJ5LnBlbmRpbmcuZm9yRWFjaChmdW5jdGlvbiAoY29udHJvbGxlcikge1xyXG4gICAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgbGlzdGVuZXJDYW5jZWxsZWQpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBjcmVhdGVDbGVhckxpc3RlbmVyTWlkZGxld2FyZSA9IGZ1bmN0aW9uIChsaXN0ZW5lck1hcCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBsaXN0ZW5lck1hcC5mb3JFYWNoKGNhbmNlbEFjdGl2ZUxpc3RlbmVycyk7XHJcbiAgICAgICAgbGlzdGVuZXJNYXAuY2xlYXIoKTtcclxuICAgIH07XHJcbn07XHJcbnZhciBzYWZlbHlOb3RpZnlFcnJvciA9IGZ1bmN0aW9uIChlcnJvckhhbmRsZXIsIGVycm9yVG9Ob3RpZnksIGVycm9ySW5mbykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBlcnJvckhhbmRsZXIoZXJyb3JUb05vdGlmeSwgZXJyb3JJbmZvKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvckhhbmRsZXJFcnJvcikge1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aHJvdyBlcnJvckhhbmRsZXJFcnJvcjtcclxuICAgICAgICB9LCAwKTtcclxuICAgIH1cclxufTtcclxudmFyIGFkZExpc3RlbmVyID0gY3JlYXRlQWN0aW9uKGFsbSArIFwiL2FkZFwiKTtcclxudmFyIGNsZWFyQWxsTGlzdGVuZXJzID0gY3JlYXRlQWN0aW9uKGFsbSArIFwiL3JlbW92ZUFsbFwiKTtcclxudmFyIHJlbW92ZUxpc3RlbmVyID0gY3JlYXRlQWN0aW9uKGFsbSArIFwiL3JlbW92ZVwiKTtcclxudmFyIGRlZmF1bHRFcnJvckhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIF9fc3ByZWFkQXJyYXkoW2FsbSArIFwiL2Vycm9yXCJdLCBhcmdzKSk7XHJcbn07XHJcbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyTWlkZGxld2FyZShtaWRkbGV3YXJlT3B0aW9ucykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIGlmIChtaWRkbGV3YXJlT3B0aW9ucyA9PT0gdm9pZCAwKSB7IG1pZGRsZXdhcmVPcHRpb25zID0ge307IH1cclxuICAgIHZhciBsaXN0ZW5lck1hcCA9IG5ldyBNYXAoKTtcclxuICAgIHZhciBleHRyYSA9IG1pZGRsZXdhcmVPcHRpb25zLmV4dHJhLCBfYyA9IG1pZGRsZXdhcmVPcHRpb25zLm9uRXJyb3IsIG9uRXJyb3IgPSBfYyA9PT0gdm9pZCAwID8gZGVmYXVsdEVycm9ySGFuZGxlciA6IF9jO1xyXG4gICAgYXNzZXJ0RnVuY3Rpb24ob25FcnJvciwgXCJvbkVycm9yXCIpO1xyXG4gICAgdmFyIGluc2VydEVudHJ5ID0gZnVuY3Rpb24gKGVudHJ5KSB7XHJcbiAgICAgICAgZW50cnkudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBsaXN0ZW5lck1hcC5kZWxldGUoZW50cnkuaWQpOyB9O1xyXG4gICAgICAgIGxpc3RlbmVyTWFwLnNldChlbnRyeS5pZCwgZW50cnkpO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2FuY2VsT3B0aW9ucykge1xyXG4gICAgICAgICAgICBlbnRyeS51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICBpZiAoY2FuY2VsT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogY2FuY2VsT3B0aW9ucy5jYW5jZWxBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIGNhbmNlbEFjdGl2ZUxpc3RlbmVycyhlbnRyeSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIHZhciBmaW5kTGlzdGVuZXJFbnRyeSA9IGZ1bmN0aW9uIChjb21wYXJhdG9yKSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYyA9IEFycmF5LmZyb20obGlzdGVuZXJNYXAudmFsdWVzKCkpOyBfaSA8IF9jLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW50cnkgPSBfY1tfaV07XHJcbiAgICAgICAgICAgIGlmIChjb21wYXJhdG9yKGVudHJ5KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2b2lkIDA7XHJcbiAgICB9O1xyXG4gICAgdmFyIHN0YXJ0TGlzdGVuaW5nID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgZW50cnkgPSBmaW5kTGlzdGVuZXJFbnRyeShmdW5jdGlvbiAoZXhpc3RpbmdFbnRyeSkgeyByZXR1cm4gZXhpc3RpbmdFbnRyeS5lZmZlY3QgPT09IG9wdGlvbnMuZWZmZWN0OyB9KTtcclxuICAgICAgICBpZiAoIWVudHJ5KSB7XHJcbiAgICAgICAgICAgIGVudHJ5ID0gY3JlYXRlTGlzdGVuZXJFbnRyeShvcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluc2VydEVudHJ5KGVudHJ5KTtcclxuICAgIH07XHJcbiAgICB2YXIgc3RvcExpc3RlbmluZyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF9jID0gZ2V0TGlzdGVuZXJFbnRyeVByb3BzRnJvbShvcHRpb25zKSwgdHlwZSA9IF9jLnR5cGUsIGVmZmVjdCA9IF9jLmVmZmVjdCwgcHJlZGljYXRlID0gX2MucHJlZGljYXRlO1xyXG4gICAgICAgIHZhciBlbnRyeSA9IGZpbmRMaXN0ZW5lckVudHJ5KGZ1bmN0aW9uIChlbnRyeTIpIHtcclxuICAgICAgICAgICAgdmFyIG1hdGNoUHJlZGljYXRlT3JUeXBlID0gdHlwZW9mIHR5cGUgPT09IFwic3RyaW5nXCIgPyBlbnRyeTIudHlwZSA9PT0gdHlwZSA6IGVudHJ5Mi5wcmVkaWNhdGUgPT09IHByZWRpY2F0ZTtcclxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoUHJlZGljYXRlT3JUeXBlICYmIGVudHJ5Mi5lZmZlY3QgPT09IGVmZmVjdDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoZW50cnkpIHtcclxuICAgICAgICAgICAgZW50cnkudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2FuY2VsQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBjYW5jZWxBY3RpdmVMaXN0ZW5lcnMoZW50cnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAhIWVudHJ5O1xyXG4gICAgfTtcclxuICAgIHZhciBub3RpZnlMaXN0ZW5lciA9IGZ1bmN0aW9uIChlbnRyeSwgYWN0aW9uLCBhcGksIGdldE9yaWdpbmFsU3RhdGUpIHsgcmV0dXJuIF9fYXN5bmMoX3RoaXMsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaW50ZXJuYWxUYXNrQ29udHJvbGxlciwgdGFrZSwgbGlzdGVuZXJFcnJvcl8xO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVGFza0NvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZSA9IGNyZWF0ZVRha2VQYXR0ZXJuKHN0YXJ0TGlzdGVuaW5nLCBpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIF9jLnRyeXMucHVzaChbMSwgMywgNCwgNV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LnBlbmRpbmcuYWRkKGludGVybmFsVGFza0NvbnRyb2xsZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UucmVzb2x2ZShlbnRyeS5lZmZlY3QoYWN0aW9uLCBhc3NpZ24oe30sIGFwaSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0T3JpZ2luYWxTdGF0ZTogZ2V0T3JpZ2luYWxTdGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbjogZnVuY3Rpb24gKHByZWRpY2F0ZSwgdGltZW91dCkgeyByZXR1cm4gdGFrZShwcmVkaWNhdGUsIHRpbWVvdXQpLnRoZW4oQm9vbGVhbik7IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWtlOiB0YWtlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXk6IGNyZWF0ZURlbGF5KGludGVybmFsVGFza0NvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdXNlOiBjcmVhdGVQYXVzZShpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYTogZXh0cmEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IGludGVybmFsVGFza0NvbnRyb2xsZXIuc2lnbmFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yazogY3JlYXRlRm9yayhpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnN1YnNjcmliZTogZW50cnkudW5zdWJzY3JpYmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lck1hcC5zZXQoZW50cnkuaWQsIGVudHJ5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxBY3RpdmVMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5wZW5kaW5nLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2xsZXIsIF8sIHNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbGxlciAhPT0gaW50ZXJuYWxUYXNrQ29udHJvbGxlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjb250cm9sbGVyLCBsaXN0ZW5lckNhbmNlbGxlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQuZGVsZXRlKGNvbnRyb2xsZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lckVycm9yXzEgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobGlzdGVuZXJFcnJvcl8xIGluc3RhbmNlb2YgVGFza0Fib3J0RXJyb3IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhZmVseU5vdGlmeUVycm9yKG9uRXJyb3IsIGxpc3RlbmVyRXJyb3JfMSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2VkQnk6IFwiZWZmZWN0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oaW50ZXJuYWxUYXNrQ29udHJvbGxlciwgbGlzdGVuZXJDb21wbGV0ZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LnBlbmRpbmcuZGVsZXRlKGludGVybmFsVGFza0NvbnRyb2xsZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7IH07XHJcbiAgICB2YXIgY2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUgPSBjcmVhdGVDbGVhckxpc3RlbmVyTWlkZGxld2FyZShsaXN0ZW5lck1hcCk7XHJcbiAgICB2YXIgbWlkZGxld2FyZSA9IGZ1bmN0aW9uIChhcGkpIHsgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7IHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgaWYgKCFpc0FjdGlvbihhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhZGRMaXN0ZW5lci5tYXRjaChhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGFydExpc3RlbmluZyhhY3Rpb24ucGF5bG9hZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjbGVhckFsbExpc3RlbmVycy5tYXRjaChhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIGNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlbW92ZUxpc3RlbmVyLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0b3BMaXN0ZW5pbmcoYWN0aW9uLnBheWxvYWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb3JpZ2luYWxTdGF0ZSA9IGFwaS5nZXRTdGF0ZSgpO1xyXG4gICAgICAgIHZhciBnZXRPcmlnaW5hbFN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAob3JpZ2luYWxTdGF0ZSA9PT0gSU5URVJOQUxfTklMX1RPS0VOKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYWxtICsgXCI6IGdldE9yaWdpbmFsU3RhdGUgY2FuIG9ubHkgYmUgY2FsbGVkIHN5bmNocm9ub3VzbHlcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsU3RhdGU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG5leHQoYWN0aW9uKTtcclxuICAgICAgICAgICAgaWYgKGxpc3RlbmVyTWFwLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFN0YXRlID0gYXBpLmdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXJFbnRyaWVzID0gQXJyYXkuZnJvbShsaXN0ZW5lck1hcC52YWx1ZXMoKSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGxpc3RlbmVyRW50cmllc18xID0gbGlzdGVuZXJFbnRyaWVzOyBfaSA8IGxpc3RlbmVyRW50cmllc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IGxpc3RlbmVyRW50cmllc18xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcnVuTGlzdGVuZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBydW5MaXN0ZW5lciA9IGVudHJ5LnByZWRpY2F0ZShhY3Rpb24sIGN1cnJlbnRTdGF0ZSwgb3JpZ2luYWxTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChwcmVkaWNhdGVFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBydW5MaXN0ZW5lciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYWZlbHlOb3RpZnlFcnJvcihvbkVycm9yLCBwcmVkaWNhdGVFcnJvciwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2VkQnk6IFwicHJlZGljYXRlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcnVuTGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVyKGVudHJ5LCBhY3Rpb24sIGFwaSwgZ2V0T3JpZ2luYWxTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsU3RhdGUgPSBJTlRFUk5BTF9OSUxfVE9LRU47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9OyB9OyB9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtaWRkbGV3YXJlOiBtaWRkbGV3YXJlLFxyXG4gICAgICAgIHN0YXJ0TGlzdGVuaW5nOiBzdGFydExpc3RlbmluZyxcclxuICAgICAgICBzdG9wTGlzdGVuaW5nOiBzdG9wTGlzdGVuaW5nLFxyXG4gICAgICAgIGNsZWFyTGlzdGVuZXJzOiBjbGVhckxpc3RlbmVyTWlkZGxld2FyZVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvYXV0b0JhdGNoRW5oYW5jZXIudHNcclxudmFyIFNIT1VMRF9BVVRPQkFUQ0ggPSBcIlJUS19hdXRvQmF0Y2hcIjtcclxudmFyIHByZXBhcmVBdXRvQmF0Y2hlZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uIChwYXlsb2FkKSB7XHJcbiAgICB2YXIgX2M7XHJcbiAgICByZXR1cm4gKHtcclxuICAgICAgICBwYXlsb2FkOiBwYXlsb2FkLFxyXG4gICAgICAgIG1ldGE6IChfYyA9IHt9LCBfY1tTSE9VTERfQVVUT0JBVENIXSA9IHRydWUsIF9jKVxyXG4gICAgfSk7XHJcbn07IH07XHJcbnZhciBwcm9taXNlO1xyXG52YXIgcXVldWVNaWNyb3Rhc2tTaGltID0gdHlwZW9mIHF1ZXVlTWljcm90YXNrID09PSBcImZ1bmN0aW9uXCIgPyBxdWV1ZU1pY3JvdGFzay5iaW5kKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogZ2xvYmFsVGhpcykgOiBmdW5jdGlvbiAoY2IpIHsgcmV0dXJuIChwcm9taXNlIHx8IChwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCkpKS50aGVuKGNiKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgIHRocm93IGVycjtcclxufSwgMCk7IH0pOyB9O1xyXG52YXIgY3JlYXRlUXVldWVXaXRoVGltZXIgPSBmdW5jdGlvbiAodGltZW91dCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChub3RpZnkpIHtcclxuICAgICAgICBzZXRUaW1lb3V0KG5vdGlmeSwgdGltZW91dCk7XHJcbiAgICB9O1xyXG59O1xyXG52YXIgckFGID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA6IGNyZWF0ZVF1ZXVlV2l0aFRpbWVyKDEwKTtcclxudmFyIGF1dG9CYXRjaEVuaGFuY2VyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHsgdHlwZTogXCJyYWZcIiB9OyB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHN0b3JlID0gbmV4dC5hcHBseSh2b2lkIDAsIGFyZ3MpO1xyXG4gICAgICAgIHZhciBub3RpZnlpbmcgPSB0cnVlO1xyXG4gICAgICAgIHZhciBzaG91bGROb3RpZnlBdEVuZE9mVGljayA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBub3RpZmljYXRpb25RdWV1ZWQgPSBmYWxzZTtcclxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gbmV3IFNldCgpO1xyXG4gICAgICAgIHZhciBxdWV1ZUNhbGxiYWNrID0gb3B0aW9ucy50eXBlID09PSBcInRpY2tcIiA/IHF1ZXVlTWljcm90YXNrU2hpbSA6IG9wdGlvbnMudHlwZSA9PT0gXCJyYWZcIiA/IHJBRiA6IG9wdGlvbnMudHlwZSA9PT0gXCJjYWxsYmFja1wiID8gb3B0aW9ucy5xdWV1ZU5vdGlmaWNhdGlvbiA6IGNyZWF0ZVF1ZXVlV2l0aFRpbWVyKG9wdGlvbnMudGltZW91dCk7XHJcbiAgICAgICAgdmFyIG5vdGlmeUxpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbm90aWZpY2F0aW9uUXVldWVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGROb3RpZnlBdEVuZE9mVGljaykge1xyXG4gICAgICAgICAgICAgICAgc2hvdWxkTm90aWZ5QXRFbmRPZlRpY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7IHJldHVybiBsKCk7IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RvcmUsIHtcclxuICAgICAgICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiAobGlzdGVuZXIyKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgd3JhcHBlZExpc3RlbmVyID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbm90aWZ5aW5nICYmIGxpc3RlbmVyMigpOyB9O1xyXG4gICAgICAgICAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gc3RvcmUuc3Vic2NyaWJlKHdyYXBwZWRMaXN0ZW5lcik7XHJcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuYWRkKGxpc3RlbmVyMik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcjIpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm90aWZ5aW5nID0gISgoX2EgPSBhY3Rpb24gPT0gbnVsbCA/IHZvaWQgMCA6IGFjdGlvbi5tZXRhKSA9PSBudWxsID8gdm9pZCAwIDogX2FbU0hPVUxEX0FVVE9CQVRDSF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3VsZE5vdGlmeUF0RW5kT2ZUaWNrID0gIW5vdGlmeWluZztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hvdWxkTm90aWZ5QXRFbmRPZlRpY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFub3RpZmljYXRpb25RdWV1ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblF1ZXVlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZUNhbGxiYWNrKG5vdGlmeUxpc3RlbmVycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgICAgICBub3RpZnlpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9OyB9O1xyXG59O1xyXG4vLyBzcmMvaW5kZXgudHNcclxuZW5hYmxlRVM1KCk7XHJcbmV4cG9ydCB7IEVuaGFuY2VyQXJyYXksIE1pZGRsZXdhcmVBcnJheSwgU0hPVUxEX0FVVE9CQVRDSCwgVGFza0Fib3J0RXJyb3IsIGFkZExpc3RlbmVyLCBhdXRvQmF0Y2hFbmhhbmNlciwgY2xlYXJBbGxMaXN0ZW5lcnMsIGNvbmZpZ3VyZVN0b3JlLCBjcmVhdGVBY3Rpb24sIGNyZWF0ZUFzeW5jVGh1bmssIGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yLCBjcmVhdGVFbnRpdHlBZGFwdGVyLCBjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUsIGNyZWF0ZUxpc3RlbmVyTWlkZGxld2FyZSwgZGVmYXVsdDIgYXMgY3JlYXRlTmV4dFN0YXRlLCBjcmVhdGVSZWR1Y2VyLCBjcmVhdGVTZWxlY3RvcjIgYXMgY3JlYXRlU2VsZWN0b3IsIGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSwgY3JlYXRlU2xpY2UsIGN1cnJlbnQyIGFzIGN1cnJlbnQsIGZpbmROb25TZXJpYWxpemFibGVWYWx1ZSwgZnJlZXplLCBnZXREZWZhdWx0TWlkZGxld2FyZSwgZ2V0VHlwZSwgaXNBY3Rpb24sIGlzQWxsT2YsIGlzQW55T2YsIGlzQXN5bmNUaHVua0FjdGlvbiwgaXNEcmFmdDQgYXMgaXNEcmFmdCwgaXNGU0EgYXMgaXNGbHV4U3RhbmRhcmRBY3Rpb24sIGlzRnVsZmlsbGVkLCBpc0ltbXV0YWJsZURlZmF1bHQsIGlzUGVuZGluZywgaXNQbGFpbiwgaXNQbGFpbk9iamVjdCwgaXNSZWplY3RlZCwgaXNSZWplY3RlZFdpdGhWYWx1ZSwgbWluaVNlcmlhbGl6ZUVycm9yLCBuYW5vaWQsIG9yaWdpbmFsLCBwcmVwYXJlQXV0b0JhdGNoZWQsIHJlbW92ZUxpc3RlbmVyLCB1bndyYXBSZXN1bHQgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVkdXgtdG9vbGtpdC5lc20uanMubWFwIiwiLyoqXG4gKiBAcmVtaXgtcnVuL3JvdXRlciB2MS4zLjNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFR5cGVzIGFuZCBDb25zdGFudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQWN0aW9ucyByZXByZXNlbnQgdGhlIHR5cGUgb2YgY2hhbmdlIHRvIGEgbG9jYXRpb24gdmFsdWUuXG4gKi9cbnZhciBBY3Rpb247XG5cbihmdW5jdGlvbiAoQWN0aW9uKSB7XG4gIC8qKlxuICAgKiBBIFBPUCBpbmRpY2F0ZXMgYSBjaGFuZ2UgdG8gYW4gYXJiaXRyYXJ5IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoXG4gICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlXG4gICAqIG5hdmlnYXRpb24sIG9ubHkgdGhhdCB0aGUgY3VycmVudCBpbmRleCBjaGFuZ2VkLlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuXG4gICAqL1xuICBBY3Rpb25bXCJQb3BcIl0gPSBcIlBPUFwiO1xuICAvKipcbiAgICogQSBQVVNIIGluZGljYXRlcyBhIG5ldyBlbnRyeSBiZWluZyBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaywgc3VjaCBhcyB3aGVuXG4gICAqIGEgbGluayBpcyBjbGlja2VkIGFuZCBhIG5ldyBwYWdlIGxvYWRzLiBXaGVuIHRoaXMgaGFwcGVucywgYWxsIHN1YnNlcXVlbnRcbiAgICogZW50cmllcyBpbiB0aGUgc3RhY2sgYXJlIGxvc3QuXG4gICAqL1xuXG4gIEFjdGlvbltcIlB1c2hcIl0gPSBcIlBVU0hcIjtcbiAgLyoqXG4gICAqIEEgUkVQTEFDRSBpbmRpY2F0ZXMgdGhlIGVudHJ5IGF0IHRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrXG4gICAqIGJlaW5nIHJlcGxhY2VkIGJ5IGEgbmV3IG9uZS5cbiAgICovXG5cbiAgQWN0aW9uW1wiUmVwbGFjZVwiXSA9IFwiUkVQTEFDRVwiO1xufSkoQWN0aW9uIHx8IChBY3Rpb24gPSB7fSkpO1xuXG5jb25zdCBQb3BTdGF0ZUV2ZW50VHlwZSA9IFwicG9wc3RhdGVcIjtcbi8qKlxuICogTWVtb3J5IGhpc3Rvcnkgc3RvcmVzIHRoZSBjdXJyZW50IGxvY2F0aW9uIGluIG1lbW9yeS4gSXQgaXMgZGVzaWduZWQgZm9yIHVzZVxuICogaW4gc3RhdGVmdWwgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzIGxpa2UgdGVzdHMgYW5kIFJlYWN0IE5hdGl2ZS5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGxldCB7XG4gICAgaW5pdGlhbEVudHJpZXMgPSBbXCIvXCJdLFxuICAgIGluaXRpYWxJbmRleCxcbiAgICB2NUNvbXBhdCA9IGZhbHNlXG4gIH0gPSBvcHRpb25zO1xuICBsZXQgZW50cmllczsgLy8gRGVjbGFyZSBzbyB3ZSBjYW4gYWNjZXNzIGZyb20gY3JlYXRlTWVtb3J5TG9jYXRpb25cblxuICBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKChlbnRyeSwgaW5kZXgpID0+IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKGVudHJ5LCB0eXBlb2YgZW50cnkgPT09IFwic3RyaW5nXCIgPyBudWxsIDogZW50cnkuc3RhdGUsIGluZGV4ID09PSAwID8gXCJkZWZhdWx0XCIgOiB1bmRlZmluZWQpKTtcbiAgbGV0IGluZGV4ID0gY2xhbXBJbmRleChpbml0aWFsSW5kZXggPT0gbnVsbCA/IGVudHJpZXMubGVuZ3RoIC0gMSA6IGluaXRpYWxJbmRleCk7XG4gIGxldCBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICBsZXQgbGlzdGVuZXIgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGNsYW1wSW5kZXgobikge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCAwKSwgZW50cmllcy5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbigpIHtcbiAgICByZXR1cm4gZW50cmllc1tpbmRleF07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUsIGtleSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oZW50cmllcyA/IGdldEN1cnJlbnRMb2NhdGlvbigpLnBhdGhuYW1lIDogXCIvXCIsIHRvLCBzdGF0ZSwga2V5KTtcbiAgICB3YXJuaW5nJDEobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSBcIi9cIiwgXCJyZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gbWVtb3J5IGhpc3Rvcnk6IFwiICsgSlNPTi5zdHJpbmdpZnkodG8pKTtcbiAgICByZXR1cm4gbG9jYXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgaW5kZXgoKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfSxcblxuICAgIGdldCBhY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0Q3VycmVudExvY2F0aW9uKCk7XG4gICAgfSxcblxuICAgIGNyZWF0ZUhyZWYsXG5cbiAgICBjcmVhdGVVUkwodG8pIHtcbiAgICAgIHJldHVybiBuZXcgVVJMKGNyZWF0ZUhyZWYodG8pLCBcImh0dHA6Ly9sb2NhbGhvc3RcIik7XG4gICAgfSxcblxuICAgIGVuY29kZUxvY2F0aW9uKHRvKSB7XG4gICAgICBsZXQgcGF0aCA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhuYW1lOiBwYXRoLnBhdGhuYW1lIHx8IFwiXCIsXG4gICAgICAgIHNlYXJjaDogcGF0aC5zZWFyY2ggfHwgXCJcIixcbiAgICAgICAgaGFzaDogcGF0aC5oYXNoIHx8IFwiXCJcbiAgICAgIH07XG4gICAgfSxcblxuICAgIHB1c2godG8sIHN0YXRlKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUpO1xuICAgICAgaW5kZXggKz0gMTtcbiAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCBlbnRyaWVzLmxlbmd0aCwgbmV4dExvY2F0aW9uKTtcblxuICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YTogMVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVwbGFjZSh0bywgc3RhdGUpIHtcbiAgICAgIGFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgICAgbGV0IG5leHRMb2NhdGlvbiA9IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKHRvLCBzdGF0ZSk7XG4gICAgICBlbnRyaWVzW2luZGV4XSA9IG5leHRMb2NhdGlvbjtcblxuICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YTogMFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZ28oZGVsdGEpIHtcbiAgICAgIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgICBsZXQgbmV4dEluZGV4ID0gY2xhbXBJbmRleChpbmRleCArIGRlbHRhKTtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBlbnRyaWVzW25leHRJbmRleF07XG4gICAgICBpbmRleCA9IG5leHRJbmRleDtcblxuICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgbGlzdGVuKGZuKSB7XG4gICAgICBsaXN0ZW5lciA9IGZuO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbGlzdGVuZXIgPSBudWxsO1xuICAgICAgfTtcbiAgICB9XG5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG4vKipcbiAqIEJyb3dzZXIgaGlzdG9yeSBzdG9yZXMgdGhlIGxvY2F0aW9uIGluIHJlZ3VsYXIgVVJMcy4gVGhpcyBpcyB0aGUgc3RhbmRhcmQgZm9yXG4gKiBtb3N0IHdlYiBhcHBzLCBidXQgaXQgcmVxdWlyZXMgc29tZSBjb25maWd1cmF0aW9uIG9uIHRoZSBzZXJ2ZXIgdG8gZW5zdXJlIHlvdVxuICogc2VydmUgdGhlIHNhbWUgYXBwIGF0IG11bHRpcGxlIFVSTHMuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVicm93c2VyaGlzdG9yeVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpIHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24oXCJcIiwge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSwgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzXG4gICAgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzciB8fCBudWxsLCBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5IHx8IFwiZGVmYXVsdFwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIcmVmKHdpbmRvdywgdG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgfVxuXG4gIHJldHVybiBnZXRVcmxCYXNlZEhpc3RvcnkoY3JlYXRlQnJvd3NlckxvY2F0aW9uLCBjcmVhdGVCcm93c2VySHJlZiwgbnVsbCwgb3B0aW9ucyk7XG59XG4vKipcbiAqIEhhc2ggaGlzdG9yeSBzdG9yZXMgdGhlIGxvY2F0aW9uIGluIHdpbmRvdy5sb2NhdGlvbi5oYXNoLiBUaGlzIG1ha2VzIGl0IGlkZWFsXG4gKiBmb3Igc2l0dWF0aW9ucyB3aGVyZSB5b3UgZG9uJ3Qgd2FudCB0byBzZW5kIHRoZSBsb2NhdGlvbiB0byB0aGUgc2VydmVyIGZvclxuICogc29tZSByZWFzb24sIGVpdGhlciBiZWNhdXNlIHlvdSBkbyBjYW5ub3QgY29uZmlndXJlIGl0IG9yIHRoZSBVUkwgc3BhY2UgaXNcbiAqIHJlc2VydmVkIGZvciBzb21ldGhpbmcgZWxzZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZWhhc2hoaXN0b3J5XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSGFzaExvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSkge1xuICAgIGxldCB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgICAgc2VhcmNoID0gXCJcIixcbiAgICAgIGhhc2ggPSBcIlwiXG4gICAgfSA9IHBhcnNlUGF0aCh3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSkpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihcIlwiLCB7XG4gICAgICBwYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2hcbiAgICB9LCAvLyBzdGF0ZSBkZWZhdWx0cyB0byBgbnVsbGAgYmVjYXVzZSBgd2luZG93Lmhpc3Rvcnkuc3RhdGVgIGRvZXNcbiAgICBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUudXNyIHx8IG51bGwsIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS5rZXkgfHwgXCJkZWZhdWx0XCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSGFzaEhyZWYod2luZG93LCB0bykge1xuICAgIGxldCBiYXNlID0gd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJiYXNlXCIpO1xuICAgIGxldCBocmVmID0gXCJcIjtcblxuICAgIGlmIChiYXNlICYmIGJhc2UuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSkge1xuICAgICAgbGV0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgbGV0IGhhc2hJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcbiAgICAgIGhyZWYgPSBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWYgKyBcIiNcIiArICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlSGFzaExvY2F0aW9uKGxvY2F0aW9uLCB0bykge1xuICAgIHdhcm5pbmckMShsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09IFwiL1wiLCBcInJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBoYXNoIGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKTtcbiAgfVxuXG4gIHJldHVybiBnZXRVcmxCYXNlZEhpc3RvcnkoY3JlYXRlSGFzaExvY2F0aW9uLCBjcmVhdGVIYXNoSHJlZiwgdmFsaWRhdGVIYXNoTG9jYXRpb24sIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gaW52YXJpYW50KHZhbHVlLCBtZXNzYWdlKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdhcm5pbmckMShjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gV2VsY29tZSB0byBkZWJ1Z2dpbmcgaGlzdG9yeSFcbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGVycm9yIGlzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHlvdSBjYW4gbW9yZSBlYXNpbHlcbiAgICAgIC8vIGZpbmQgdGhlIHNvdXJjZSBmb3IgYSB3YXJuaW5nIHRoYXQgYXBwZWFycyBpbiB0aGUgY29uc29sZSBieVxuICAgICAgLy8gZW5hYmxpbmcgXCJwYXVzZSBvbiBleGNlcHRpb25zXCIgaW4geW91ciBKYXZhU2NyaXB0IGRlYnVnZ2VyLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA4KTtcbn1cbi8qKlxuICogRm9yIGJyb3dzZXItYmFzZWQgaGlzdG9yaWVzLCB3ZSBjb21iaW5lIHRoZSBzdGF0ZSBhbmQga2V5IGludG8gYW4gb2JqZWN0XG4gKi9cblxuXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KSB7XG4gIHJldHVybiB7XG4gICAgdXNyOiBsb2NhdGlvbi5zdGF0ZSxcbiAgICBrZXk6IGxvY2F0aW9uLmtleSxcbiAgICBpZHg6IGluZGV4XG4gIH07XG59XG4vKipcbiAqIENyZWF0ZXMgYSBMb2NhdGlvbiBvYmplY3Qgd2l0aCBhIHVuaXF1ZSBrZXkgZnJvbSB0aGUgZ2l2ZW4gUGF0aFxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24oY3VycmVudCwgdG8sIHN0YXRlLCBrZXkpIHtcbiAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICBzdGF0ZSA9IG51bGw7XG4gIH1cblxuICBsZXQgbG9jYXRpb24gPSBfZXh0ZW5kcyh7XG4gICAgcGF0aG5hbWU6IHR5cGVvZiBjdXJyZW50ID09PSBcInN0cmluZ1wiID8gY3VycmVudCA6IGN1cnJlbnQucGF0aG5hbWUsXG4gICAgc2VhcmNoOiBcIlwiLFxuICAgIGhhc2g6IFwiXCJcbiAgfSwgdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvLCB7XG4gICAgc3RhdGUsXG4gICAgLy8gVE9ETzogVGhpcyBjb3VsZCBiZSBjbGVhbmVkIHVwLiAgcHVzaC9yZXBsYWNlIHNob3VsZCBwcm9iYWJseSBqdXN0IHRha2VcbiAgICAvLyBmdWxsIExvY2F0aW9ucyBub3cgYW5kIGF2b2lkIHRoZSBuZWVkIHRvIHJ1biB0aHJvdWdoIHRoaXMgZmxvdyBhdCBhbGxcbiAgICAvLyBCdXQgdGhhdCdzIGEgcHJldHR5IGJpZyByZWZhY3RvciB0byB0aGUgY3VycmVudCB0ZXN0IHN1aXRlIHNvIGdvaW5nIHRvXG4gICAgLy8ga2VlcCBhcyBpcyBmb3IgdGhlIHRpbWUgYmVpbmcgYW5kIGp1c3QgbGV0IGFueSBpbmNvbWluZyBrZXlzIHRha2UgcHJlY2VkZW5jZVxuICAgIGtleTogdG8gJiYgdG8ua2V5IHx8IGtleSB8fCBjcmVhdGVLZXkoKVxuICB9KTtcblxuICByZXR1cm4gbG9jYXRpb247XG59XG4vKipcbiAqIENyZWF0ZXMgYSBzdHJpbmcgVVJMIHBhdGggZnJvbSB0aGUgZ2l2ZW4gcGF0aG5hbWUsIHNlYXJjaCwgYW5kIGhhc2ggY29tcG9uZW50cy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVQYXRoKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCJcbiAgfSA9IF9yZWY7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSBcIj9cIikgcGF0aG5hbWUgKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gXCI/XCIgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gXCIjXCIpIHBhdGhuYW1lICs9IGhhc2guY2hhckF0KDApID09PSBcIiNcIiA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRobmFtZTtcbn1cbi8qKlxuICogUGFyc2VzIGEgc3RyaW5nIFVSTCBwYXRoIGludG8gaXRzIHNlcGFyYXRlIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgbGV0IHBhcnNlZFBhdGggPSB7fTtcblxuICBpZiAocGF0aCkge1xuICAgIGxldCBoYXNoSW5kZXggPSBwYXRoLmluZGV4T2YoXCIjXCIpO1xuXG4gICAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLmhhc2ggPSBwYXRoLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuXG4gICAgbGV0IHNlYXJjaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiP1wiKTtcblxuICAgIGlmIChzZWFyY2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLnNlYXJjaCA9IHBhdGguc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHBhcnNlZFBhdGgucGF0aG5hbWUgPSBwYXRoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJzZWRQYXRoO1xufVxuXG5mdW5jdGlvbiBnZXRVcmxCYXNlZEhpc3RvcnkoZ2V0TG9jYXRpb24sIGNyZWF0ZUhyZWYsIHZhbGlkYXRlTG9jYXRpb24sIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGxldCB7XG4gICAgd2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcsXG4gICAgdjVDb21wYXQgPSBmYWxzZVxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgbGV0IGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIGxldCBsaXN0ZW5lciA9IG51bGw7XG4gIGxldCBpbmRleCA9IGdldEluZGV4KCk7IC8vIEluZGV4IHNob3VsZCBvbmx5IGJlIG51bGwgd2hlbiB3ZSBpbml0aWFsaXplLiBJZiBub3QsIGl0J3MgYmVjYXVzZSB0aGVcbiAgLy8gdXNlciBjYWxsZWQgaGlzdG9yeS5wdXNoU3RhdGUgb3IgaGlzdG9yeS5yZXBsYWNlU3RhdGUgZGlyZWN0bHksIGluIHdoaWNoXG4gIC8vIGNhc2Ugd2Ugc2hvdWxkIGxvZyBhIHdhcm5pbmcgYXMgaXQgd2lsbCByZXN1bHQgaW4gYnVncy5cblxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSwge1xuICAgICAgaWR4OiBpbmRleFxuICAgIH0pLCBcIlwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEluZGV4KCkge1xuICAgIGxldCBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwge1xuICAgICAgaWR4OiBudWxsXG4gICAgfTtcbiAgICByZXR1cm4gc3RhdGUuaWR4O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKCkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgbGV0IG5leHRJbmRleCA9IGdldEluZGV4KCk7XG4gICAgbGV0IGRlbHRhID0gbmV4dEluZGV4ID09IG51bGwgPyBudWxsIDogbmV4dEluZGV4IC0gaW5kZXg7XG4gICAgaW5kZXggPSBuZXh0SW5kZXg7XG5cbiAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGFcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2godG8sIHN0YXRlKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oaGlzdG9yeS5sb2NhdGlvbiwgdG8sIHN0YXRlKTtcbiAgICBpZiAodmFsaWRhdGVMb2NhdGlvbikgdmFsaWRhdGVMb2NhdGlvbihsb2NhdGlvbiwgdG8pO1xuICAgIGluZGV4ID0gZ2V0SW5kZXgoKSArIDE7XG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpO1xuICAgIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pOyAvLyB0cnkuLi5jYXRjaCBiZWNhdXNlIGlPUyBsaW1pdHMgdXMgdG8gMTAwIHB1c2hTdGF0ZSBjYWxscyA6L1xuXG4gICAgdHJ5IHtcbiAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKGhpc3RvcnlTdGF0ZSwgXCJcIiwgdXJsKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gVGhleSBhcmUgZ29pbmcgdG8gbG9zZSBzdGF0ZSBoZXJlLCBidXQgdGhlcmUgaXMgbm8gcmVhbFxuICAgICAgLy8gd2F5IHRvIHdhcm4gdGhlbSBhYm91dCBpdCBzaW5jZSB0aGUgcGFnZSB3aWxsIHJlZnJlc2guLi5cbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24odXJsKTtcbiAgICB9XG5cbiAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGE6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oaGlzdG9yeS5sb2NhdGlvbiwgdG8sIHN0YXRlKTtcbiAgICBpZiAodmFsaWRhdGVMb2NhdGlvbikgdmFsaWRhdGVMb2NhdGlvbihsb2NhdGlvbiwgdG8pO1xuICAgIGluZGV4ID0gZ2V0SW5kZXgoKTtcbiAgICBsZXQgaGlzdG9yeVN0YXRlID0gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uLCBpbmRleCk7XG4gICAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoaGlzdG9yeVN0YXRlLCBcIlwiLCB1cmwpO1xuXG4gICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcih7XG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgIGRlbHRhOiAwXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVVUkwodG8pIHtcbiAgICAvLyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIGlzIFwibnVsbFwiICh0aGUgbGl0ZXJhbCBzdHJpbmcgdmFsdWUpIGluIEZpcmVmb3hcbiAgICAvLyB1bmRlciBjZXJ0YWluIGNvbmRpdGlvbnMsIG5vdGFibHkgd2hlbiBzZXJ2aW5nIGZyb20gYSBsb2NhbCBIVE1MIGZpbGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODc4Mjk3XG4gICAgbGV0IGJhc2UgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICE9PSBcIm51bGxcIiA/IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gOiB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICBsZXQgaHJlZiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gICAgaW52YXJpYW50KGJhc2UsIFwiTm8gd2luZG93LmxvY2F0aW9uLihvcmlnaW58aHJlZikgYXZhaWxhYmxlIHRvIGNyZWF0ZSBVUkwgZm9yIGhyZWY6IFwiICsgaHJlZik7XG4gICAgcmV0dXJuIG5ldyBVUkwoaHJlZiwgYmFzZSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGdldExvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSk7XG4gICAgfSxcblxuICAgIGxpc3Rlbihmbikge1xuICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkEgaGlzdG9yeSBvbmx5IGFjY2VwdHMgb25lIGFjdGl2ZSBsaXN0ZW5lclwiKTtcbiAgICAgIH1cblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudFR5cGUsIGhhbmRsZVBvcCk7XG4gICAgICBsaXN0ZW5lciA9IGZuO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudFR5cGUsIGhhbmRsZVBvcCk7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcblxuICAgIGNyZWF0ZUhyZWYodG8pIHtcbiAgICAgIHJldHVybiBjcmVhdGVIcmVmKHdpbmRvdywgdG8pO1xuICAgIH0sXG5cbiAgICBjcmVhdGVVUkwsXG5cbiAgICBlbmNvZGVMb2NhdGlvbih0bykge1xuICAgICAgLy8gRW5jb2RlIGEgTG9jYXRpb24gdGhlIHNhbWUgd2F5IHdpbmRvdy5sb2NhdGlvbiB3b3VsZFxuICAgICAgbGV0IHVybCA9IGNyZWF0ZVVSTCh0byk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZTogdXJsLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2g6IHVybC5zZWFyY2gsXG4gICAgICAgIGhhc2g6IHVybC5oYXNoXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBwdXNoLFxuICAgIHJlcGxhY2UsXG5cbiAgICBnbyhuKSB7XG4gICAgICByZXR1cm4gZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgICB9XG5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59IC8vI2VuZHJlZ2lvblxuXG52YXIgUmVzdWx0VHlwZTtcblxuKGZ1bmN0aW9uIChSZXN1bHRUeXBlKSB7XG4gIFJlc3VsdFR5cGVbXCJkYXRhXCJdID0gXCJkYXRhXCI7XG4gIFJlc3VsdFR5cGVbXCJkZWZlcnJlZFwiXSA9IFwiZGVmZXJyZWRcIjtcbiAgUmVzdWx0VHlwZVtcInJlZGlyZWN0XCJdID0gXCJyZWRpcmVjdFwiO1xuICBSZXN1bHRUeXBlW1wiZXJyb3JcIl0gPSBcImVycm9yXCI7XG59KShSZXN1bHRUeXBlIHx8IChSZXN1bHRUeXBlID0ge30pKTtcblxuZnVuY3Rpb24gaXNJbmRleFJvdXRlKHJvdXRlKSB7XG4gIHJldHVybiByb3V0ZS5pbmRleCA9PT0gdHJ1ZTtcbn0gLy8gV2FsayB0aGUgcm91dGUgdHJlZSBnZW5lcmF0aW5nIHVuaXF1ZSBJRHMgd2hlcmUgbmVjZXNzYXJ5IHNvIHdlIGFyZSB3b3JraW5nXG4vLyBzb2xlbHkgd2l0aCBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdCdzIHdpdGhpbiB0aGUgUm91dGVyXG5cblxuZnVuY3Rpb24gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZXMsIHBhcmVudFBhdGgsIGFsbElkcykge1xuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFtdO1xuICB9XG5cbiAgaWYgKGFsbElkcyA9PT0gdm9pZCAwKSB7XG4gICAgYWxsSWRzID0gbmV3IFNldCgpO1xuICB9XG5cbiAgcmV0dXJuIHJvdXRlcy5tYXAoKHJvdXRlLCBpbmRleCkgPT4ge1xuICAgIGxldCB0cmVlUGF0aCA9IFsuLi5wYXJlbnRQYXRoLCBpbmRleF07XG4gICAgbGV0IGlkID0gdHlwZW9mIHJvdXRlLmlkID09PSBcInN0cmluZ1wiID8gcm91dGUuaWQgOiB0cmVlUGF0aC5qb2luKFwiLVwiKTtcbiAgICBpbnZhcmlhbnQocm91dGUuaW5kZXggIT09IHRydWUgfHwgIXJvdXRlLmNoaWxkcmVuLCBcIkNhbm5vdCBzcGVjaWZ5IGNoaWxkcmVuIG9uIGFuIGluZGV4IHJvdXRlXCIpO1xuICAgIGludmFyaWFudCghYWxsSWRzLmhhcyhpZCksIFwiRm91bmQgYSByb3V0ZSBpZCBjb2xsaXNpb24gb24gaWQgXFxcIlwiICsgaWQgKyBcIlxcXCIuICBSb3V0ZSBcIiArIFwiaWQncyBtdXN0IGJlIGdsb2JhbGx5IHVuaXF1ZSB3aXRoaW4gRGF0YSBSb3V0ZXIgdXNhZ2VzXCIpO1xuICAgIGFsbElkcy5hZGQoaWQpO1xuXG4gICAgaWYgKGlzSW5kZXhSb3V0ZShyb3V0ZSkpIHtcbiAgICAgIGxldCBpbmRleFJvdXRlID0gX2V4dGVuZHMoe30sIHJvdXRlLCB7XG4gICAgICAgIGlkXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGluZGV4Um91dGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXRoT3JMYXlvdXRSb3V0ZSA9IF9leHRlbmRzKHt9LCByb3V0ZSwge1xuICAgICAgICBpZCxcbiAgICAgICAgY2hpbGRyZW46IHJvdXRlLmNoaWxkcmVuID8gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgdHJlZVBhdGgsIGFsbElkcykgOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcGF0aE9yTGF5b3V0Um91dGU7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogTWF0Y2hlcyB0aGUgZ2l2ZW4gcm91dGVzIHRvIGEgbG9jYXRpb24gYW5kIHJldHVybnMgdGhlIG1hdGNoIGRhdGEuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9tYXRjaC1yb3V0ZXNcbiAqL1xuXG5mdW5jdGlvbiBtYXRjaFJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IHZvaWQgMCkge1xuICAgIGJhc2VuYW1lID0gXCIvXCI7XG4gIH1cblxuICBsZXQgbG9jYXRpb24gPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gIGxldCBwYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCIsIGJhc2VuYW1lKTtcblxuICBpZiAocGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbGV0IGJyYW5jaGVzID0gZmxhdHRlblJvdXRlcyhyb3V0ZXMpO1xuICByYW5rUm91dGVCcmFuY2hlcyhicmFuY2hlcyk7XG4gIGxldCBtYXRjaGVzID0gbnVsbDtcblxuICBmb3IgKGxldCBpID0gMDsgbWF0Y2hlcyA9PSBudWxsICYmIGkgPCBicmFuY2hlcy5sZW5ndGg7ICsraSkge1xuICAgIG1hdGNoZXMgPSBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaGVzW2ldLCAvLyBJbmNvbWluZyBwYXRobmFtZXMgYXJlIGdlbmVyYWxseSBlbmNvZGVkIGZyb20gZWl0aGVyIHdpbmRvdy5sb2NhdGlvblxuICAgIC8vIG9yIGZyb20gcm91dGVyLm5hdmlnYXRlLCBidXQgd2Ugd2FudCB0byBtYXRjaCBhZ2FpbnN0IHRoZSB1bmVuY29kZWRcbiAgICAvLyBwYXRocyBpbiB0aGUgcm91dGUgZGVmaW5pdGlvbnMuICBNZW1vcnkgcm91dGVyIGxvY2F0aW9ucyB3b24ndCBiZVxuICAgIC8vIGVuY29kZWQgaGVyZSBidXQgdGhlcmUgYWxzbyBzaG91bGRuJ3QgYmUgYW55dGhpbmcgdG8gZGVjb2RlIHNvIHRoaXNcbiAgICAvLyBzaG91bGQgYmUgYSBzYWZlIG9wZXJhdGlvbi4gIFRoaXMgYXZvaWRzIG5lZWRpbmcgbWF0Y2hSb3V0ZXMgdG8gYmVcbiAgICAvLyBoaXN0b3J5LWF3YXJlLlxuICAgIHNhZmVseURlY29kZVVSSShwYXRobmFtZSkpO1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5Sb3V0ZXMocm91dGVzLCBicmFuY2hlcywgcGFyZW50c01ldGEsIHBhcmVudFBhdGgpIHtcbiAgaWYgKGJyYW5jaGVzID09PSB2b2lkIDApIHtcbiAgICBicmFuY2hlcyA9IFtdO1xuICB9XG5cbiAgaWYgKHBhcmVudHNNZXRhID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRzTWV0YSA9IFtdO1xuICB9XG5cbiAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhcmVudFBhdGggPSBcIlwiO1xuICB9XG5cbiAgbGV0IGZsYXR0ZW5Sb3V0ZSA9IChyb3V0ZSwgaW5kZXgsIHJlbGF0aXZlUGF0aCkgPT4ge1xuICAgIGxldCBtZXRhID0ge1xuICAgICAgcmVsYXRpdmVQYXRoOiByZWxhdGl2ZVBhdGggPT09IHVuZGVmaW5lZCA/IHJvdXRlLnBhdGggfHwgXCJcIiA6IHJlbGF0aXZlUGF0aCxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IHJvdXRlLmNhc2VTZW5zaXRpdmUgPT09IHRydWUsXG4gICAgICBjaGlsZHJlbkluZGV4OiBpbmRleCxcbiAgICAgIHJvdXRlXG4gICAgfTtcblxuICAgIGlmIChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgaW52YXJpYW50KG1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgocGFyZW50UGF0aCksIFwiQWJzb2x1dGUgcm91dGUgcGF0aCBcXFwiXCIgKyBtZXRhLnJlbGF0aXZlUGF0aCArIFwiXFxcIiBuZXN0ZWQgdW5kZXIgcGF0aCBcIiArIChcIlxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCIgaXMgbm90IHZhbGlkLiBBbiBhYnNvbHV0ZSBjaGlsZCByb3V0ZSBwYXRoIFwiKSArIFwibXVzdCBzdGFydCB3aXRoIHRoZSBjb21iaW5lZCBwYXRoIG9mIGFsbCBpdHMgcGFyZW50IHJvdXRlcy5cIik7XG4gICAgICBtZXRhLnJlbGF0aXZlUGF0aCA9IG1ldGEucmVsYXRpdmVQYXRoLnNsaWNlKHBhcmVudFBhdGgubGVuZ3RoKTtcbiAgICB9XG5cbiAgICBsZXQgcGF0aCA9IGpvaW5QYXRocyhbcGFyZW50UGF0aCwgbWV0YS5yZWxhdGl2ZVBhdGhdKTtcbiAgICBsZXQgcm91dGVzTWV0YSA9IHBhcmVudHNNZXRhLmNvbmNhdChtZXRhKTsgLy8gQWRkIHRoZSBjaGlsZHJlbiBiZWZvcmUgYWRkaW5nIHRoaXMgcm91dGUgdG8gdGhlIGFycmF5IHNvIHdlIHRyYXZlcnNlIHRoZVxuICAgIC8vIHJvdXRlIHRyZWUgZGVwdGgtZmlyc3QgYW5kIGNoaWxkIHJvdXRlcyBhcHBlYXIgYmVmb3JlIHRoZWlyIHBhcmVudHMgaW5cbiAgICAvLyB0aGUgXCJmbGF0dGVuZWRcIiB2ZXJzaW9uLlxuXG4gICAgaWYgKHJvdXRlLmNoaWxkcmVuICYmIHJvdXRlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIGludmFyaWFudCggLy8gT3VyIHR5cGVzIGtub3cgYmV0dGVyLCBidXQgcnVudGltZSBKUyBtYXkgbm90IVxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgcm91dGUuaW5kZXggIT09IHRydWUsIFwiSW5kZXggcm91dGVzIG11c3Qgbm90IGhhdmUgY2hpbGQgcm91dGVzLiBQbGVhc2UgcmVtb3ZlIFwiICsgKFwiYWxsIGNoaWxkIHJvdXRlcyBmcm9tIHJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIi5cIikpO1xuICAgICAgZmxhdHRlblJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgYnJhbmNoZXMsIHJvdXRlc01ldGEsIHBhdGgpO1xuICAgIH0gLy8gUm91dGVzIHdpdGhvdXQgYSBwYXRoIHNob3VsZG4ndCBldmVyIG1hdGNoIGJ5IHRoZW1zZWx2ZXMgdW5sZXNzIHRoZXkgYXJlXG4gICAgLy8gaW5kZXggcm91dGVzLCBzbyBkb24ndCBhZGQgdGhlbSB0byB0aGUgbGlzdCBvZiBwb3NzaWJsZSBicmFuY2hlcy5cblxuXG4gICAgaWYgKHJvdXRlLnBhdGggPT0gbnVsbCAmJiAhcm91dGUuaW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBicmFuY2hlcy5wdXNoKHtcbiAgICAgIHBhdGgsXG4gICAgICBzY29yZTogY29tcHV0ZVNjb3JlKHBhdGgsIHJvdXRlLmluZGV4KSxcbiAgICAgIHJvdXRlc01ldGFcbiAgICB9KTtcbiAgfTtcblxuICByb3V0ZXMuZm9yRWFjaCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgdmFyIF9yb3V0ZSRwYXRoO1xuXG4gICAgLy8gY29hcnNlLWdyYWluIGNoZWNrIGZvciBvcHRpb25hbCBwYXJhbXNcbiAgICBpZiAocm91dGUucGF0aCA9PT0gXCJcIiB8fCAhKChfcm91dGUkcGF0aCA9IHJvdXRlLnBhdGgpICE9IG51bGwgJiYgX3JvdXRlJHBhdGguaW5jbHVkZXMoXCI/XCIpKSkge1xuICAgICAgZmxhdHRlblJvdXRlKHJvdXRlLCBpbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGV4cGxvZGVkIG9mIGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHJvdXRlLnBhdGgpKSB7XG4gICAgICAgIGZsYXR0ZW5Sb3V0ZShyb3V0ZSwgaW5kZXgsIGV4cGxvZGVkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYnJhbmNoZXM7XG59XG4vKipcbiAqIENvbXB1dGVzIGFsbCBjb21iaW5hdGlvbnMgb2Ygb3B0aW9uYWwgcGF0aCBzZWdtZW50cyBmb3IgYSBnaXZlbiBwYXRoLFxuICogZXhjbHVkaW5nIGNvbWJpbmF0aW9ucyB0aGF0IGFyZSBhbWJpZ3VvdXMgYW5kIG9mIGxvd2VyIHByaW9yaXR5LlxuICpcbiAqIEZvciBleGFtcGxlLCBgL29uZS86dHdvPy90aHJlZS86Zm91cj8vOmZpdmU/YCBleHBsb2RlcyB0bzpcbiAqIC0gYC9vbmUvdGhyZWVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWVgXG4gKiAtIGAvb25lL3RocmVlLzpmb3VyYFxuICogLSBgL29uZS90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zm91cmBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvdGhyZWUvOmZvdXIvOmZpdmVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZvdXIvOmZpdmVgXG4gKi9cblxuXG5mdW5jdGlvbiBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhwYXRoKSB7XG4gIGxldCBzZWdtZW50cyA9IHBhdGguc3BsaXQoXCIvXCIpO1xuICBpZiAoc2VnbWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gW107XG4gIGxldCBbZmlyc3QsIC4uLnJlc3RdID0gc2VnbWVudHM7IC8vIE9wdGlvbmFsIHBhdGggc2VnbWVudHMgYXJlIGRlbm90ZWQgYnkgYSB0cmFpbGluZyBgP2BcblxuICBsZXQgaXNPcHRpb25hbCA9IGZpcnN0LmVuZHNXaXRoKFwiP1wiKTsgLy8gQ29tcHV0ZSB0aGUgY29ycmVzcG9uZGluZyByZXF1aXJlZCBzZWdtZW50OiBgZm9vP2AgLT4gYGZvb2BcblxuICBsZXQgcmVxdWlyZWQgPSBmaXJzdC5yZXBsYWNlKC9cXD8kLywgXCJcIik7XG5cbiAgaWYgKHJlc3QubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSW50ZXByZXQgZW1wdHkgc3RyaW5nIGFzIG9taXR0aW5nIGFuIG9wdGlvbmFsIHNlZ21lbnRcbiAgICAvLyBgW1wib25lXCIsIFwiXCIsIFwidGhyZWVcIl1gIGNvcnJlc3BvbmRzIHRvIG9taXR0aW5nIGA6dHdvYCBmcm9tIGAvb25lLzp0d28/L3RocmVlYCAtPiBgL29uZS90aHJlZWBcbiAgICByZXR1cm4gaXNPcHRpb25hbCA/IFtyZXF1aXJlZCwgXCJcIl0gOiBbcmVxdWlyZWRdO1xuICB9XG5cbiAgbGV0IHJlc3RFeHBsb2RlZCA9IGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHJlc3Quam9pbihcIi9cIikpO1xuICBsZXQgcmVzdWx0ID0gW107IC8vIEFsbCBjaGlsZCBwYXRocyB3aXRoIHRoZSBwcmVmaXguICBEbyB0aGlzIGZvciBhbGwgY2hpbGRyZW4gYmVmb3JlIHRoZVxuICAvLyBvcHRpb25hbCB2ZXJzaW9uIGZvciBhbGwgY2hpbGRyZW4gc28gd2UgZ2V0IGNvbnNpc3RlbnQgb3JkZXJpbmcgd2hlcmUgdGhlXG4gIC8vIHBhcmVudCBvcHRpb25hbCBhc3BlY3QgaXMgcHJlZmVycmVkIGFzIHJlcXVpcmVkLiAgT3RoZXJ3aXNlLCB3ZSBjYW4gZ2V0XG4gIC8vIGNoaWxkIHNlY3Rpb25zIGludGVyc3BlcnNlZCB3aGVyZSBkZWVwZXIgb3B0aW9uYWwgc2VnbWVudHMgYXJlIGhpZ2hlciB0aGFuXG4gIC8vIHBhcmVudCBvcHRpb25hbCBzZWdtZW50cywgd2hlcmUgZm9yIGV4YW1wbGUsIC86dHdvIHdvdWxkIGV4cGxvZGVzIF9lYXJsaWVyX1xuICAvLyB0aGVuIC86b25lLiAgQnkgYWx3YXlzIGluY2x1ZGluZyB0aGUgcGFyZW50IGFzIHJlcXVpcmVkIF9mb3IgYWxsIGNoaWxkcmVuX1xuICAvLyBmaXJzdCwgd2UgYXZvaWQgdGhpcyBpc3N1ZVxuXG4gIHJlc3VsdC5wdXNoKC4uLnJlc3RFeHBsb2RlZC5tYXAoc3VicGF0aCA9PiBzdWJwYXRoID09PSBcIlwiID8gcmVxdWlyZWQgOiBbcmVxdWlyZWQsIHN1YnBhdGhdLmpvaW4oXCIvXCIpKSk7IC8vIFRoZW4gaWYgdGhpcyBpcyBhbiBvcHRpb25hbCB2YWx1ZSwgYWRkIGFsbCBjaGlsZCB2ZXJzaW9ucyB3aXRob3V0XG5cbiAgaWYgKGlzT3B0aW9uYWwpIHtcbiAgICByZXN1bHQucHVzaCguLi5yZXN0RXhwbG9kZWQpO1xuICB9IC8vIGZvciBhYnNvbHV0ZSBwYXRocywgZW5zdXJlIGAvYCBpbnN0ZWFkIG9mIGVtcHR5IHNlZ21lbnRcblxuXG4gIHJldHVybiByZXN1bHQubWFwKGV4cGxvZGVkID0+IHBhdGguc3RhcnRzV2l0aChcIi9cIikgJiYgZXhwbG9kZWQgPT09IFwiXCIgPyBcIi9cIiA6IGV4cGxvZGVkKTtcbn1cblxuZnVuY3Rpb24gcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpIHtcbiAgYnJhbmNoZXMuc29ydCgoYSwgYikgPT4gYS5zY29yZSAhPT0gYi5zY29yZSA/IGIuc2NvcmUgLSBhLnNjb3JlIC8vIEhpZ2hlciBzY29yZSBmaXJzdFxuICA6IGNvbXBhcmVJbmRleGVzKGEucm91dGVzTWV0YS5tYXAobWV0YSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpLCBiLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSkpO1xufVxuXG5jb25zdCBwYXJhbVJlID0gL146XFx3KyQvO1xuY29uc3QgZHluYW1pY1NlZ21lbnRWYWx1ZSA9IDM7XG5jb25zdCBpbmRleFJvdXRlVmFsdWUgPSAyO1xuY29uc3QgZW1wdHlTZWdtZW50VmFsdWUgPSAxO1xuY29uc3Qgc3RhdGljU2VnbWVudFZhbHVlID0gMTA7XG5jb25zdCBzcGxhdFBlbmFsdHkgPSAtMjtcblxuY29uc3QgaXNTcGxhdCA9IHMgPT4gcyA9PT0gXCIqXCI7XG5cbmZ1bmN0aW9uIGNvbXB1dGVTY29yZShwYXRoLCBpbmRleCkge1xuICBsZXQgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgbGV0IGluaXRpYWxTY29yZSA9IHNlZ21lbnRzLmxlbmd0aDtcblxuICBpZiAoc2VnbWVudHMuc29tZShpc1NwbGF0KSkge1xuICAgIGluaXRpYWxTY29yZSArPSBzcGxhdFBlbmFsdHk7XG4gIH1cblxuICBpZiAoaW5kZXgpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gaW5kZXhSb3V0ZVZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzLmZpbHRlcihzID0+ICFpc1NwbGF0KHMpKS5yZWR1Y2UoKHNjb3JlLCBzZWdtZW50KSA9PiBzY29yZSArIChwYXJhbVJlLnRlc3Qoc2VnbWVudCkgPyBkeW5hbWljU2VnbWVudFZhbHVlIDogc2VnbWVudCA9PT0gXCJcIiA/IGVtcHR5U2VnbWVudFZhbHVlIDogc3RhdGljU2VnbWVudFZhbHVlKSwgaW5pdGlhbFNjb3JlKTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZUluZGV4ZXMoYSwgYikge1xuICBsZXQgc2libGluZ3MgPSBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5zbGljZSgwLCAtMSkuZXZlcnkoKG4sIGkpID0+IG4gPT09IGJbaV0pO1xuICByZXR1cm4gc2libGluZ3MgPyAvLyBJZiB0d28gcm91dGVzIGFyZSBzaWJsaW5ncywgd2Ugc2hvdWxkIHRyeSB0byBtYXRjaCB0aGUgZWFybGllciBzaWJsaW5nXG4gIC8vIGZpcnN0LiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gaGF2ZSBmaW5lLWdyYWluZWQgY29udHJvbCBvdmVyIHRoZSBtYXRjaGluZ1xuICAvLyBiZWhhdmlvciBieSBzaW1wbHkgcHV0dGluZyByb3V0ZXMgd2l0aCBpZGVudGljYWwgcGF0aHMgaW4gdGhlIG9yZGVyIHRoZXlcbiAgLy8gd2FudCB0aGVtIHRyaWVkLlxuICBhW2EubGVuZ3RoIC0gMV0gLSBiW2IubGVuZ3RoIC0gMV0gOiAvLyBPdGhlcndpc2UsIGl0IGRvZXNuJ3QgcmVhbGx5IG1ha2Ugc2Vuc2UgdG8gcmFuayBub24tc2libGluZ3MgYnkgaW5kZXgsXG4gIC8vIHNvIHRoZXkgc29ydCBlcXVhbGx5LlxuICAwO1xufVxuXG5mdW5jdGlvbiBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaCwgcGF0aG5hbWUpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXNNZXRhXG4gIH0gPSBicmFuY2g7XG4gIGxldCBtYXRjaGVkUGFyYW1zID0ge307XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBcIi9cIjtcbiAgbGV0IG1hdGNoZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdXRlc01ldGEubGVuZ3RoOyArK2kpIHtcbiAgICBsZXQgbWV0YSA9IHJvdXRlc01ldGFbaV07XG4gICAgbGV0IGVuZCA9IGkgPT09IHJvdXRlc01ldGEubGVuZ3RoIC0gMTtcbiAgICBsZXQgcmVtYWluaW5nUGF0aG5hbWUgPSBtYXRjaGVkUGF0aG5hbWUgPT09IFwiL1wiID8gcGF0aG5hbWUgOiBwYXRobmFtZS5zbGljZShtYXRjaGVkUGF0aG5hbWUubGVuZ3RoKSB8fCBcIi9cIjtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaFBhdGgoe1xuICAgICAgcGF0aDogbWV0YS5yZWxhdGl2ZVBhdGgsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBtZXRhLmNhc2VTZW5zaXRpdmUsXG4gICAgICBlbmRcbiAgICB9LCByZW1haW5pbmdQYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgT2JqZWN0LmFzc2lnbihtYXRjaGVkUGFyYW1zLCBtYXRjaC5wYXJhbXMpO1xuICAgIGxldCByb3V0ZSA9IG1ldGEucm91dGU7XG4gICAgbWF0Y2hlcy5wdXNoKHtcbiAgICAgIC8vIFRPRE86IENhbiB0aGlzIGFzIGJlIGF2b2lkZWQ/XG4gICAgICBwYXJhbXM6IG1hdGNoZWRQYXJhbXMsXG4gICAgICBwYXRobmFtZTogam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lXSksXG4gICAgICBwYXRobmFtZUJhc2U6IG5vcm1hbGl6ZVBhdGhuYW1lKGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKSksXG4gICAgICByb3V0ZVxuICAgIH0pO1xuXG4gICAgaWYgKG1hdGNoLnBhdGhuYW1lQmFzZSAhPT0gXCIvXCIpIHtcbiAgICAgIG1hdGNoZWRQYXRobmFtZSA9IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlcztcbn1cbi8qKlxuICogUmV0dXJucyBhIHBhdGggd2l0aCBwYXJhbXMgaW50ZXJwb2xhdGVkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvZ2VuZXJhdGUtcGF0aFxuICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKG9yaWdpbmFsUGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgbGV0IHBhdGggPSBvcmlnaW5hbFBhdGg7XG5cbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIqXCIpICYmIHBhdGggIT09IFwiKlwiICYmICFwYXRoLmVuZHNXaXRoKFwiLypcIikpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCBcIlJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIiB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSBcIiArIChcIlxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIgYmVjYXVzZSB0aGUgYCpgIGNoYXJhY3RlciBtdXN0IFwiKSArIFwiYWx3YXlzIGZvbGxvdyBhIGAvYCBpbiB0aGUgcGF0dGVybi4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIFwiICsgKFwicGxlYXNlIGNoYW5nZSB0aGUgcm91dGUgcGF0aCB0byBcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiLlwiKSk7XG4gICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIik7XG4gIH1cblxuICByZXR1cm4gcGF0aC5yZXBsYWNlKC9eOihcXHcrKShcXD8/KS9nLCAoXywga2V5LCBvcHRpb25hbCkgPT4ge1xuICAgIGxldCBwYXJhbSA9IHBhcmFtc1trZXldO1xuXG4gICAgaWYgKG9wdGlvbmFsID09PSBcIj9cIikge1xuICAgICAgcmV0dXJuIHBhcmFtID09IG51bGwgPyBcIlwiIDogcGFyYW07XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtID09IG51bGwpIHtcbiAgICAgIGludmFyaWFudChmYWxzZSwgXCJNaXNzaW5nIFxcXCI6XCIgKyBrZXkgKyBcIlxcXCIgcGFyYW1cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmFtO1xuICB9KS5yZXBsYWNlKC9cXC86KFxcdyspKFxcPz8pL2csIChfLCBrZXksIG9wdGlvbmFsKSA9PiB7XG4gICAgbGV0IHBhcmFtID0gcGFyYW1zW2tleV07XG5cbiAgICBpZiAob3B0aW9uYWwgPT09IFwiP1wiKSB7XG4gICAgICByZXR1cm4gcGFyYW0gPT0gbnVsbCA/IFwiXCIgOiBcIi9cIiArIHBhcmFtO1xuICAgIH1cblxuICAgIGlmIChwYXJhbSA9PSBudWxsKSB7XG4gICAgICBpbnZhcmlhbnQoZmFsc2UsIFwiTWlzc2luZyBcXFwiOlwiICsga2V5ICsgXCJcXFwiIHBhcmFtXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBcIi9cIiArIHBhcmFtO1xuICB9KSAvLyBSZW1vdmUgYW55IG9wdGlvbmFsIG1hcmtlcnMgZnJvbSBvcHRpb25hbCBzdGF0aWMgc2VnbWVudHNcbiAgLnJlcGxhY2UoL1xcPy9nLCBcIlwiKS5yZXBsYWNlKC8oXFwvPylcXCovLCAoXywgcHJlZml4LCBfXywgc3RyKSA9PiB7XG4gICAgY29uc3Qgc3RhciA9IFwiKlwiO1xuXG4gICAgaWYgKHBhcmFtc1tzdGFyXSA9PSBudWxsKSB7XG4gICAgICAvLyBJZiBubyBzcGxhdCB3YXMgcHJvdmlkZWQsIHRyaW0gdGhlIHRyYWlsaW5nIHNsYXNoIF91bmxlc3NfIGl0J3NcbiAgICAgIC8vIHRoZSBlbnRpcmUgcGF0aFxuICAgICAgcmV0dXJuIHN0ciA9PT0gXCIvKlwiID8gXCIvXCIgOiBcIlwiO1xuICAgIH0gLy8gQXBwbHkgdGhlIHNwbGF0XG5cblxuICAgIHJldHVybiBcIlwiICsgcHJlZml4ICsgcGFyYW1zW3N0YXJdO1xuICB9KTtcbn1cbi8qKlxuICogUGVyZm9ybXMgcGF0dGVybiBtYXRjaGluZyBvbiBhIFVSTCBwYXRobmFtZSBhbmQgcmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dFxuICogdGhlIG1hdGNoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvbWF0Y2gtcGF0aFxuICovXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSkge1xuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09IFwic3RyaW5nXCIpIHtcbiAgICBwYXR0ZXJuID0ge1xuICAgICAgcGF0aDogcGF0dGVybixcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlLFxuICAgICAgZW5kOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIGxldCBbbWF0Y2hlciwgcGFyYW1OYW1lc10gPSBjb21waWxlUGF0aChwYXR0ZXJuLnBhdGgsIHBhdHRlcm4uY2FzZVNlbnNpdGl2ZSwgcGF0dGVybi5lbmQpO1xuICBsZXQgbWF0Y2ggPSBwYXRobmFtZS5tYXRjaChtYXRjaGVyKTtcbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBtYXRjaFswXTtcbiAgbGV0IHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gIGxldCBjYXB0dXJlR3JvdXBzID0gbWF0Y2guc2xpY2UoMSk7XG4gIGxldCBwYXJhbXMgPSBwYXJhbU5hbWVzLnJlZHVjZSgobWVtbywgcGFyYW1OYW1lLCBpbmRleCkgPT4ge1xuICAgIC8vIFdlIG5lZWQgdG8gY29tcHV0ZSB0aGUgcGF0aG5hbWVCYXNlIGhlcmUgdXNpbmcgdGhlIHJhdyBzcGxhdCB2YWx1ZVxuICAgIC8vIGluc3RlYWQgb2YgdXNpbmcgcGFyYW1zW1wiKlwiXSBsYXRlciBiZWNhdXNlIGl0IHdpbGwgYmUgZGVjb2RlZCB0aGVuXG4gICAgaWYgKHBhcmFtTmFtZSA9PT0gXCIqXCIpIHtcbiAgICAgIGxldCBzcGxhdFZhbHVlID0gY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIjtcbiAgICAgIHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5zbGljZSgwLCBtYXRjaGVkUGF0aG5hbWUubGVuZ3RoIC0gc3BsYXRWYWx1ZS5sZW5ndGgpLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgICB9XG5cbiAgICBtZW1vW3BhcmFtTmFtZV0gPSBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQoY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIiwgcGFyYW1OYW1lKTtcbiAgICByZXR1cm4gbWVtbztcbiAgfSwge30pO1xuICByZXR1cm4ge1xuICAgIHBhcmFtcyxcbiAgICBwYXRobmFtZTogbWF0Y2hlZFBhdGhuYW1lLFxuICAgIHBhdGhuYW1lQmFzZSxcbiAgICBwYXR0ZXJuXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIGNhc2VTZW5zaXRpdmUsIGVuZCkge1xuICBpZiAoY2FzZVNlbnNpdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdm9pZCAwKSB7XG4gICAgZW5kID0gdHJ1ZTtcbiAgfVxuXG4gIHdhcm5pbmcocGF0aCA9PT0gXCIqXCIgfHwgIXBhdGguZW5kc1dpdGgoXCIqXCIpIHx8IHBhdGguZW5kc1dpdGgoXCIvKlwiKSwgXCJSb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdlcmUgXCIgKyAoXCJcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiIGJlY2F1c2UgdGhlIGAqYCBjaGFyYWN0ZXIgbXVzdCBcIikgKyBcImFsd2F5cyBmb2xsb3cgYSBgL2AgaW4gdGhlIHBhdHRlcm4uIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCBcIiArIChcInBsZWFzZSBjaGFuZ2UgdGhlIHJvdXRlIHBhdGggdG8gXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIi5cIikpO1xuICBsZXQgcGFyYW1OYW1lcyA9IFtdO1xuICBsZXQgcmVnZXhwU291cmNlID0gXCJeXCIgKyBwYXRoLnJlcGxhY2UoL1xcLypcXCo/JC8sIFwiXCIpIC8vIElnbm9yZSB0cmFpbGluZyAvIGFuZCAvKiwgd2UnbGwgaGFuZGxlIGl0IGJlbG93XG4gIC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKSAvLyBNYWtlIHN1cmUgaXQgaGFzIGEgbGVhZGluZyAvXG4gIC5yZXBsYWNlKC9bXFxcXC4qK14kP3t9fCgpW1xcXV0vZywgXCJcXFxcJCZcIikgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcnNcbiAgLnJlcGxhY2UoL1xcLzooXFx3KykvZywgKF8sIHBhcmFtTmFtZSkgPT4ge1xuICAgIHBhcmFtTmFtZXMucHVzaChwYXJhbU5hbWUpO1xuICAgIHJldHVybiBcIi8oW15cXFxcL10rKVwiO1xuICB9KTtcblxuICBpZiAocGF0aC5lbmRzV2l0aChcIipcIikpIHtcbiAgICBwYXJhbU5hbWVzLnB1c2goXCIqXCIpO1xuICAgIHJlZ2V4cFNvdXJjZSArPSBwYXRoID09PSBcIipcIiB8fCBwYXRoID09PSBcIi8qXCIgPyBcIiguKikkXCIgLy8gQWxyZWFkeSBtYXRjaGVkIHRoZSBpbml0aWFsIC8sIGp1c3QgbWF0Y2ggdGhlIHJlc3RcbiAgICA6IFwiKD86XFxcXC8oLispfFxcXFwvKikkXCI7IC8vIERvbid0IGluY2x1ZGUgdGhlIC8gaW4gcGFyYW1zW1wiKlwiXVxuICB9IGVsc2UgaWYgKGVuZCkge1xuICAgIC8vIFdoZW4gbWF0Y2hpbmcgdG8gdGhlIGVuZCwgaWdub3JlIHRyYWlsaW5nIHNsYXNoZXNcbiAgICByZWdleHBTb3VyY2UgKz0gXCJcXFxcLyokXCI7XG4gIH0gZWxzZSBpZiAocGF0aCAhPT0gXCJcIiAmJiBwYXRoICE9PSBcIi9cIikge1xuICAgIC8vIElmIG91ciBwYXRoIGlzIG5vbi1lbXB0eSBhbmQgY29udGFpbnMgYW55dGhpbmcgYmV5b25kIGFuIGluaXRpYWwgc2xhc2gsXG4gICAgLy8gdGhlbiB3ZSBoYXZlIF9zb21lXyBmb3JtIG9mIHBhdGggaW4gb3VyIHJlZ2V4IHNvIHdlIHNob3VsZCBleHBlY3QgdG9cbiAgICAvLyBtYXRjaCBvbmx5IGlmIHdlIGZpbmQgdGhlIGVuZCBvZiB0aGlzIHBhdGggc2VnbWVudC4gIExvb2sgZm9yIGFuIG9wdGlvbmFsXG4gICAgLy8gbm9uLWNhcHR1cmVkIHRyYWlsaW5nIHNsYXNoICh0byBtYXRjaCBhIHBvcnRpb24gb2YgdGhlIFVSTCkgb3IgdGhlIGVuZFxuICAgIC8vIG9mIHRoZSBwYXRoIChpZiB3ZSd2ZSBtYXRjaGVkIHRvIHRoZSBlbmQpLiAgV2UgdXNlZCB0byBkbyB0aGlzIHdpdGggYVxuICAgIC8vIHdvcmQgYm91bmRhcnkgYnV0IHRoYXQgZ2l2ZXMgZmFsc2UgcG9zaXRpdmVzIG9uIHJvdXRlcyBsaWtlXG4gICAgLy8gL3VzZXItcHJlZmVyZW5jZXMgc2luY2UgYC1gIGNvdW50cyBhcyBhIHdvcmQgYm91bmRhcnkuXG4gICAgcmVnZXhwU291cmNlICs9IFwiKD86KD89XFxcXC98JCkpXCI7XG4gIH0gZWxzZSA7XG5cbiAgbGV0IG1hdGNoZXIgPSBuZXcgUmVnRXhwKHJlZ2V4cFNvdXJjZSwgY2FzZVNlbnNpdGl2ZSA/IHVuZGVmaW5lZCA6IFwiaVwiKTtcbiAgcmV0dXJuIFttYXRjaGVyLCBwYXJhbU5hbWVzXTtcbn1cblxuZnVuY3Rpb24gc2FmZWx5RGVjb2RlVVJJKHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSSh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgd2FybmluZyhmYWxzZSwgXCJUaGUgVVJMIHBhdGggXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgY291bGQgbm90IGJlIGRlY29kZWQgYmVjYXVzZSBpdCBpcyBpcyBhIFwiICsgXCJtYWxmb3JtZWQgVVJMIHNlZ21lbnQuIFRoaXMgaXMgcHJvYmFibHkgZHVlIHRvIGEgYmFkIHBlcmNlbnQgXCIgKyAoXCJlbmNvZGluZyAoXCIgKyBlcnJvciArIFwiKS5cIikpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQodmFsdWUsIHBhcmFtTmFtZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdhcm5pbmcoZmFsc2UsIFwiVGhlIHZhbHVlIGZvciB0aGUgVVJMIHBhcmFtIFxcXCJcIiArIHBhcmFtTmFtZSArIFwiXFxcIiB3aWxsIG5vdCBiZSBkZWNvZGVkIGJlY2F1c2VcIiArIChcIiB0aGUgc3RyaW5nIFxcXCJcIiArIHZhbHVlICsgXCJcXFwiIGlzIGEgbWFsZm9ybWVkIFVSTCBzZWdtZW50LiBUaGlzIGlzIHByb2JhYmx5XCIpICsgKFwiIGR1ZSB0byBhIGJhZCBwZXJjZW50IGVuY29kaW5nIChcIiArIGVycm9yICsgXCIpLlwiKSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSByZXR1cm4gcGF0aG5hbWU7XG5cbiAgaWYgKCFwYXRobmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoYmFzZW5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBXZSB3YW50IHRvIGxlYXZlIHRyYWlsaW5nIHNsYXNoIGJlaGF2aW9yIGluIHRoZSB1c2VyJ3MgY29udHJvbCwgc28gaWYgdGhleVxuICAvLyBzcGVjaWZ5IGEgYmFzZW5hbWUgd2l0aCBhIHRyYWlsaW5nIHNsYXNoLCB3ZSBzaG91bGQgc3VwcG9ydCBpdFxuXG5cbiAgbGV0IHN0YXJ0SW5kZXggPSBiYXNlbmFtZS5lbmRzV2l0aChcIi9cIikgPyBiYXNlbmFtZS5sZW5ndGggLSAxIDogYmFzZW5hbWUubGVuZ3RoO1xuICBsZXQgbmV4dENoYXIgPSBwYXRobmFtZS5jaGFyQXQoc3RhcnRJbmRleCk7XG5cbiAgaWYgKG5leHRDaGFyICYmIG5leHRDaGFyICE9PSBcIi9cIikge1xuICAgIC8vIHBhdGhuYW1lIGRvZXMgbm90IHN0YXJ0IHdpdGggYmFzZW5hbWUvXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcGF0aG5hbWUuc2xpY2Uoc3RhcnRJbmRleCkgfHwgXCIvXCI7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gd2FybmluZyhjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gV2VsY29tZSB0byBkZWJ1Z2dpbmcgQHJlbWl4LXJ1bi9yb3V0ZXIhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIGEgcmVzb2x2ZWQgcGF0aCBvYmplY3QgcmVsYXRpdmUgdG8gdGhlIGdpdmVuIHBhdGhuYW1lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvcmVzb2x2ZS1wYXRoXG4gKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVBhdGgodG8sIGZyb21QYXRobmFtZSkge1xuICBpZiAoZnJvbVBhdGhuYW1lID09PSB2b2lkIDApIHtcbiAgICBmcm9tUGF0aG5hbWUgPSBcIi9cIjtcbiAgfVxuXG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IHRvUGF0aG5hbWUsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIlxuICB9ID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvO1xuICBsZXQgcGF0aG5hbWUgPSB0b1BhdGhuYW1lID8gdG9QYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKSA/IHRvUGF0aG5hbWUgOiByZXNvbHZlUGF0aG5hbWUodG9QYXRobmFtZSwgZnJvbVBhdGhuYW1lKSA6IGZyb21QYXRobmFtZTtcbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2g6IG5vcm1hbGl6ZVNlYXJjaChzZWFyY2gpLFxuICAgIGhhc2g6IG5vcm1hbGl6ZUhhc2goaGFzaClcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHJlbGF0aXZlUGF0aCwgZnJvbVBhdGhuYW1lKSB7XG4gIGxldCBzZWdtZW50cyA9IGZyb21QYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgbGV0IHJlbGF0aXZlU2VnbWVudHMgPSByZWxhdGl2ZVBhdGguc3BsaXQoXCIvXCIpO1xuICByZWxhdGl2ZVNlZ21lbnRzLmZvckVhY2goc2VnbWVudCA9PiB7XG4gICAgaWYgKHNlZ21lbnQgPT09IFwiLi5cIikge1xuICAgICAgLy8gS2VlcCB0aGUgcm9vdCBcIlwiIHNlZ21lbnQgc28gdGhlIHBhdGhuYW1lIHN0YXJ0cyBhdCAvXG4gICAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gMSkgc2VnbWVudHMucG9wKCk7XG4gICAgfSBlbHNlIGlmIChzZWdtZW50ICE9PSBcIi5cIikge1xuICAgICAgc2VnbWVudHMucHVzaChzZWdtZW50KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc2VnbWVudHMubGVuZ3RoID4gMSA/IHNlZ21lbnRzLmpvaW4oXCIvXCIpIDogXCIvXCI7XG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWRQYXRoRXJyb3IoY2hhciwgZmllbGQsIGRlc3QsIHBhdGgpIHtcbiAgcmV0dXJuIFwiQ2Fubm90IGluY2x1ZGUgYSAnXCIgKyBjaGFyICsgXCInIGNoYXJhY3RlciBpbiBhIG1hbnVhbGx5IHNwZWNpZmllZCBcIiArIChcImB0by5cIiArIGZpZWxkICsgXCJgIGZpZWxkIFtcIiArIEpTT04uc3RyaW5naWZ5KHBhdGgpICsgXCJdLiAgUGxlYXNlIHNlcGFyYXRlIGl0IG91dCB0byB0aGUgXCIpICsgKFwiYHRvLlwiICsgZGVzdCArIFwiYCBmaWVsZC4gQWx0ZXJuYXRpdmVseSB5b3UgbWF5IHByb3ZpZGUgdGhlIGZ1bGwgcGF0aCBhcyBcIikgKyBcImEgc3RyaW5nIGluIDxMaW5rIHRvPVxcXCIuLi5cXFwiPiBhbmQgdGhlIHJvdXRlciB3aWxsIHBhcnNlIGl0IGZvciB5b3UuXCI7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKlxuICogV2hlbiBwcm9jZXNzaW5nIHJlbGF0aXZlIG5hdmlnYXRpb24gd2Ugd2FudCB0byBpZ25vcmUgYW5jZXN0b3Igcm91dGVzIHRoYXRcbiAqIGRvIG5vdCBjb250cmlidXRlIHRvIHRoZSBwYXRoLCBzdWNoIHRoYXQgaW5kZXgvcGF0aGxlc3MgbGF5b3V0IHJvdXRlcyBkb24ndFxuICogaW50ZXJmZXJlLlxuICpcbiAqIEZvciBleGFtcGxlLCB3aGVuIG1vdmluZyBhIHJvdXRlIGVsZW1lbnQgaW50byBhbiBpbmRleCByb3V0ZSBhbmQvb3IgYVxuICogcGF0aGxlc3MgbGF5b3V0IHJvdXRlLCByZWxhdGl2ZSBsaW5rIGJlaGF2aW9yIGNvbnRhaW5lZCB3aXRoaW4gc2hvdWxkIHN0YXlcbiAqIHRoZSBzYW1lLiAgQm90aCBvZiB0aGUgZm9sbG93aW5nIGV4YW1wbGVzIHNob3VsZCBsaW5rIGJhY2sgdG8gdGhlIHJvb3Q6XG4gKlxuICogICA8Um91dGUgcGF0aD1cIi9cIj5cbiAqICAgICA8Um91dGUgcGF0aD1cImFjY291bnRzXCIgZWxlbWVudD17PExpbmsgdG89XCIuLlwifT5cbiAqICAgPC9Sb3V0ZT5cbiAqXG4gKiAgIDxSb3V0ZSBwYXRoPVwiL1wiPlxuICogICAgIDxSb3V0ZSBwYXRoPVwiYWNjb3VudHNcIj5cbiAqICAgICAgIDxSb3V0ZSBlbGVtZW50PXs8QWNjb3VudHNMYXlvdXQgLz59PiAgICAgICAvLyA8LS0gRG9lcyBub3QgY29udHJpYnV0ZVxuICogICAgICAgICA8Um91dGUgaW5kZXggZWxlbWVudD17PExpbmsgdG89XCIuLlwifSAvPiAgLy8gPC0tIERvZXMgbm90IGNvbnRyaWJ1dGVcbiAqICAgICAgIDwvUm91dGVcbiAqICAgICA8L1JvdXRlPlxuICogICA8L1JvdXRlPlxuICovXG5cblxuZnVuY3Rpb24gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykge1xuICByZXR1cm4gbWF0Y2hlcy5maWx0ZXIoKG1hdGNoLCBpbmRleCkgPT4gaW5kZXggPT09IDAgfHwgbWF0Y2gucm91dGUucGF0aCAmJiBtYXRjaC5yb3V0ZS5wYXRoLmxlbmd0aCA+IDApO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUbyh0b0FyZywgcm91dGVQYXRobmFtZXMsIGxvY2F0aW9uUGF0aG5hbWUsIGlzUGF0aFJlbGF0aXZlKSB7XG4gIGlmIChpc1BhdGhSZWxhdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgaXNQYXRoUmVsYXRpdmUgPSBmYWxzZTtcbiAgfVxuXG4gIGxldCB0bztcblxuICBpZiAodHlwZW9mIHRvQXJnID09PSBcInN0cmluZ1wiKSB7XG4gICAgdG8gPSBwYXJzZVBhdGgodG9BcmcpO1xuICB9IGVsc2Uge1xuICAgIHRvID0gX2V4dGVuZHMoe30sIHRvQXJnKTtcbiAgICBpbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIj9cIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCI/XCIsIFwicGF0aG5hbWVcIiwgXCJzZWFyY2hcIiwgdG8pKTtcbiAgICBpbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIiNcIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCIjXCIsIFwicGF0aG5hbWVcIiwgXCJoYXNoXCIsIHRvKSk7XG4gICAgaW52YXJpYW50KCF0by5zZWFyY2ggfHwgIXRvLnNlYXJjaC5pbmNsdWRlcyhcIiNcIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCIjXCIsIFwic2VhcmNoXCIsIFwiaGFzaFwiLCB0bykpO1xuICB9XG5cbiAgbGV0IGlzRW1wdHlQYXRoID0gdG9BcmcgPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCI7XG4gIGxldCB0b1BhdGhuYW1lID0gaXNFbXB0eVBhdGggPyBcIi9cIiA6IHRvLnBhdGhuYW1lO1xuICBsZXQgZnJvbTsgLy8gUm91dGluZyBpcyByZWxhdGl2ZSB0byB0aGUgY3VycmVudCBwYXRobmFtZSBpZiBleHBsaWNpdGx5IHJlcXVlc3RlZC5cbiAgLy9cbiAgLy8gSWYgYSBwYXRobmFtZSBpcyBleHBsaWNpdGx5IHByb3ZpZGVkIGluIGB0b2AsIGl0IHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGVcbiAgLy8gcm91dGUgY29udGV4dC4gVGhpcyBpcyBleHBsYWluZWQgaW4gYE5vdGUgb24gYDxMaW5rIHRvPmAgdmFsdWVzYCBpbiBvdXJcbiAgLy8gbWlncmF0aW9uIGd1aWRlIGZyb20gdjUgYXMgYSBtZWFucyBvZiBkaXNhbWJpZ3VhdGlvbiBiZXR3ZWVuIGB0b2AgdmFsdWVzXG4gIC8vIHRoYXQgYmVnaW4gd2l0aCBgL2AgYW5kIHRob3NlIHRoYXQgZG8gbm90LiBIb3dldmVyLCB0aGlzIGlzIHByb2JsZW1hdGljIGZvclxuICAvLyBgdG9gIHZhbHVlcyB0aGF0IGRvIG5vdCBwcm92aWRlIGEgcGF0aG5hbWUuIGB0b2AgY2FuIHNpbXBseSBiZSBhIHNlYXJjaCBvclxuICAvLyBoYXNoIHN0cmluZywgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgYXNzdW1lIHRoYXQgdGhlIG5hdmlnYXRpb24gaXMgcmVsYXRpdmVcbiAgLy8gdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24ncyBwYXRobmFtZSBhbmQgKm5vdCogdGhlIHJvdXRlIHBhdGhuYW1lLlxuXG4gIGlmIChpc1BhdGhSZWxhdGl2ZSB8fCB0b1BhdGhuYW1lID09IG51bGwpIHtcbiAgICBmcm9tID0gbG9jYXRpb25QYXRobmFtZTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcm91dGVQYXRobmFtZUluZGV4ID0gcm91dGVQYXRobmFtZXMubGVuZ3RoIC0gMTtcblxuICAgIGlmICh0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIuLlwiKSkge1xuICAgICAgbGV0IHRvU2VnbWVudHMgPSB0b1BhdGhuYW1lLnNwbGl0KFwiL1wiKTsgLy8gRWFjaCBsZWFkaW5nIC4uIHNlZ21lbnQgbWVhbnMgXCJnbyB1cCBvbmUgcm91dGVcIiBpbnN0ZWFkIG9mIFwiZ28gdXAgb25lXG4gICAgICAvLyBVUkwgc2VnbWVudFwiLiAgVGhpcyBpcyBhIGtleSBkaWZmZXJlbmNlIGZyb20gaG93IDxhIGhyZWY+IHdvcmtzIGFuZCBhXG4gICAgICAvLyBtYWpvciByZWFzb24gd2UgY2FsbCB0aGlzIGEgXCJ0b1wiIHZhbHVlIGluc3RlYWQgb2YgYSBcImhyZWZcIi5cblxuICAgICAgd2hpbGUgKHRvU2VnbWVudHNbMF0gPT09IFwiLi5cIikge1xuICAgICAgICB0b1NlZ21lbnRzLnNoaWZ0KCk7XG4gICAgICAgIHJvdXRlUGF0aG5hbWVJbmRleCAtPSAxO1xuICAgICAgfVxuXG4gICAgICB0by5wYXRobmFtZSA9IHRvU2VnbWVudHMuam9pbihcIi9cIik7XG4gICAgfSAvLyBJZiB0aGVyZSBhcmUgbW9yZSBcIi4uXCIgc2VnbWVudHMgdGhhbiBwYXJlbnQgcm91dGVzLCByZXNvbHZlIHJlbGF0aXZlIHRvXG4gICAgLy8gdGhlIHJvb3QgLyBVUkwuXG5cblxuICAgIGZyb20gPSByb3V0ZVBhdGhuYW1lSW5kZXggPj0gMCA/IHJvdXRlUGF0aG5hbWVzW3JvdXRlUGF0aG5hbWVJbmRleF0gOiBcIi9cIjtcbiAgfVxuXG4gIGxldCBwYXRoID0gcmVzb2x2ZVBhdGgodG8sIGZyb20pOyAvLyBFbnN1cmUgdGhlIHBhdGhuYW1lIGhhcyBhIHRyYWlsaW5nIHNsYXNoIGlmIHRoZSBvcmlnaW5hbCBcInRvXCIgaGFkIG9uZVxuXG4gIGxldCBoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggPSB0b1BhdGhuYW1lICYmIHRvUGF0aG5hbWUgIT09IFwiL1wiICYmIHRvUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpOyAvLyBPciBpZiB0aGlzIHdhcyBhIGxpbmsgdG8gdGhlIGN1cnJlbnQgcGF0aCB3aGljaCBoYXMgYSB0cmFpbGluZyBzbGFzaFxuXG4gIGxldCBoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCA9IChpc0VtcHR5UGF0aCB8fCB0b1BhdGhuYW1lID09PSBcIi5cIikgJiYgbG9jYXRpb25QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7XG5cbiAgaWYgKCFwYXRoLnBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSAmJiAoaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoIHx8IGhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoKSkge1xuICAgIHBhdGgucGF0aG5hbWUgKz0gXCIvXCI7XG4gIH1cblxuICByZXR1cm4gcGF0aDtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRUb1BhdGhuYW1lKHRvKSB7XG4gIC8vIEVtcHR5IHN0cmluZ3Mgc2hvdWxkIGJlIHRyZWF0ZWQgdGhlIHNhbWUgYXMgLyBwYXRoc1xuICByZXR1cm4gdG8gPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCIgPyBcIi9cIiA6IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykucGF0aG5hbWUgOiB0by5wYXRobmFtZTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jb25zdCBqb2luUGF0aHMgPSBwYXRocyA9PiBwYXRocy5qb2luKFwiL1wiKS5yZXBsYWNlKC9cXC9cXC8rL2csIFwiL1wiKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jb25zdCBub3JtYWxpemVQYXRobmFtZSA9IHBhdGhuYW1lID0+IHBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikucmVwbGFjZSgvXlxcLyovLCBcIi9cIik7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuY29uc3Qgbm9ybWFsaXplU2VhcmNoID0gc2VhcmNoID0+ICFzZWFyY2ggfHwgc2VhcmNoID09PSBcIj9cIiA/IFwiXCIgOiBzZWFyY2guc3RhcnRzV2l0aChcIj9cIikgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jb25zdCBub3JtYWxpemVIYXNoID0gaGFzaCA9PiAhaGFzaCB8fCBoYXNoID09PSBcIiNcIiA/IFwiXCIgOiBoYXNoLnN0YXJ0c1dpdGgoXCIjXCIpID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbi8qKlxuICogVGhpcyBpcyBhIHNob3J0Y3V0IGZvciBjcmVhdGluZyBgYXBwbGljYXRpb24vanNvbmAgcmVzcG9uc2VzLiBDb252ZXJ0cyBgZGF0YWBcbiAqIHRvIEpTT04gYW5kIHNldHMgdGhlIGBDb250ZW50LVR5cGVgIGhlYWRlci5cbiAqL1xuXG5jb25zdCBqc29uID0gZnVuY3Rpb24ganNvbihkYXRhLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0ge307XG4gIH1cblxuICBsZXQgcmVzcG9uc2VJbml0ID0gdHlwZW9mIGluaXQgPT09IFwibnVtYmVyXCIgPyB7XG4gICAgc3RhdHVzOiBpbml0XG4gIH0gOiBpbml0O1xuICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHJlc3BvbnNlSW5pdC5oZWFkZXJzKTtcblxuICBpZiAoIWhlYWRlcnMuaGFzKFwiQ29udGVudC1UeXBlXCIpKSB7XG4gICAgaGVhZGVycy5zZXQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShkYXRhKSwgX2V4dGVuZHMoe30sIHJlc3BvbnNlSW5pdCwge1xuICAgIGhlYWRlcnNcbiAgfSkpO1xufTtcbmNsYXNzIEFib3J0ZWREZWZlcnJlZEVycm9yIGV4dGVuZHMgRXJyb3Ige31cbmNsYXNzIERlZmVycmVkRGF0YSB7XG4gIGNvbnN0cnVjdG9yKGRhdGEsIHJlc3BvbnNlSW5pdCkge1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLmRlZmVycmVkS2V5cyA9IFtdO1xuICAgIGludmFyaWFudChkYXRhICYmIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KGRhdGEpLCBcImRlZmVyKCkgb25seSBhY2NlcHRzIHBsYWluIG9iamVjdHNcIik7IC8vIFNldCB1cCBhbiBBYm9ydENvbnRyb2xsZXIgKyBQcm9taXNlIHdlIGNhbiByYWNlIGFnYWluc3QgdG8gZXhpdCBlYXJseVxuICAgIC8vIGNhbmNlbGxhdGlvblxuXG4gICAgbGV0IHJlamVjdDtcbiAgICB0aGlzLmFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgICBsZXQgb25BYm9ydCA9ICgpID0+IHJlamVjdChuZXcgQWJvcnRlZERlZmVycmVkRXJyb3IoXCJEZWZlcnJlZCBkYXRhIGFib3J0ZWRcIikpO1xuXG4gICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsID0gKCkgPT4gdGhpcy5jb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG5cbiAgICB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB0aGlzLmRhdGEgPSBPYmplY3QuZW50cmllcyhkYXRhKS5yZWR1Y2UoKGFjYywgX3JlZikgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWY7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgW2tleV06IHRoaXMudHJhY2tQcm9taXNlKGtleSwgdmFsdWUpXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG5cbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAvLyBBbGwgaW5jb21pbmcgdmFsdWVzIHdlcmUgcmVzb2x2ZWRcbiAgICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCgpO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdCA9IHJlc3BvbnNlSW5pdDtcbiAgfVxuXG4gIHRyYWNrUHJvbWlzZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHRoaXMuZGVmZXJyZWRLZXlzLnB1c2goa2V5KTtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmFkZChrZXkpOyAvLyBXZSBzdG9yZSBhIGxpdHRsZSB3cmFwcGVyIHByb21pc2UgdGhhdCB3aWxsIGJlIGV4dGVuZGVkIHdpdGhcbiAgICAvLyBfZGF0YS9fZXJyb3IgcHJvcHMgdXBvbiByZXNvbHZlL3JlamVjdFxuXG4gICAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJhY2UoW3ZhbHVlLCB0aGlzLmFib3J0UHJvbWlzZV0pLnRoZW4oZGF0YSA9PiB0aGlzLm9uU2V0dGxlKHByb21pc2UsIGtleSwgbnVsbCwgZGF0YSksIGVycm9yID0+IHRoaXMub25TZXR0bGUocHJvbWlzZSwga2V5LCBlcnJvcikpOyAvLyBSZWdpc3RlciByZWplY3Rpb24gbGlzdGVuZXJzIHRvIGF2b2lkIHVuY2F1Z2h0IHByb21pc2UgcmVqZWN0aW9ucyBvblxuICAgIC8vIGVycm9ycyBvciBhYm9ydGVkIGRlZmVycmVkIHZhbHVlc1xuXG4gICAgcHJvbWlzZS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBvblNldHRsZShwcm9taXNlLCBrZXksIGVycm9yLCBkYXRhKSB7XG4gICAgaWYgKHRoaXMuY29udHJvbGxlci5zaWduYWwuYWJvcnRlZCAmJiBlcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yKSB7XG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmRlbGV0ZShrZXkpO1xuXG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gTm90aGluZyBsZWZ0IHRvIGFib3J0IVxuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgfVxuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZW1pdChmYWxzZSwga2V5KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2RhdGFcIiwge1xuICAgICAgZ2V0OiAoKSA9PiBkYXRhXG4gICAgfSk7XG4gICAgdGhpcy5lbWl0KGZhbHNlLCBrZXkpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgZW1pdChhYm9ydGVkLCBzZXR0bGVkS2V5KSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKHN1YnNjcmliZXIgPT4gc3Vic2NyaWJlcihhYm9ydGVkLCBzZXR0bGVkS2V5KSk7XG4gIH1cblxuICBzdWJzY3JpYmUoZm4pIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHRoaXMuc3Vic2NyaWJlcnMuZGVsZXRlKGZuKTtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmZvckVhY2goKHYsIGspID0+IHRoaXMucGVuZGluZ0tleXNTZXQuZGVsZXRlKGspKTtcbiAgICB0aGlzLmVtaXQodHJ1ZSk7XG4gIH1cblxuICBhc3luYyByZXNvbHZlRGF0YShzaWduYWwpIHtcbiAgICBsZXQgYWJvcnRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKCF0aGlzLmRvbmUpIHtcbiAgICAgIGxldCBvbkFib3J0ID0gKCkgPT4gdGhpcy5jYW5jZWwoKTtcblxuICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICAgIGFib3J0ZWQgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmUoYWJvcnRlZCA9PiB7XG4gICAgICAgICAgc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcblxuICAgICAgICAgIGlmIChhYm9ydGVkIHx8IHRoaXMuZG9uZSkge1xuICAgICAgICAgICAgcmVzb2x2ZShhYm9ydGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFib3J0ZWQ7XG4gIH1cblxuICBnZXQgZG9uZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wZW5kaW5nS2V5c1NldC5zaXplID09PSAwO1xuICB9XG5cbiAgZ2V0IHVud3JhcHBlZERhdGEoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuZGF0YSAhPT0gbnVsbCAmJiB0aGlzLmRvbmUsIFwiQ2FuIG9ubHkgdW53cmFwIGRhdGEgb24gaW5pdGlhbGl6ZWQgYW5kIHNldHRsZWQgZGVmZXJyZWRzXCIpO1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLmRhdGEpLnJlZHVjZSgoYWNjLCBfcmVmMikgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWYyO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgIFtrZXldOiB1bndyYXBUcmFja2VkUHJvbWlzZSh2YWx1ZSlcbiAgICAgIH0pO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIGdldCBwZW5kaW5nS2V5cygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnBlbmRpbmdLZXlzU2V0KTtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIGlzVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSAmJiB2YWx1ZS5fdHJhY2tlZCA9PT0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gdW53cmFwVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgaWYgKCFpc1RyYWNrZWRQcm9taXNlKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGlmICh2YWx1ZS5fZXJyb3IpIHtcbiAgICB0aHJvdyB2YWx1ZS5fZXJyb3I7XG4gIH1cblxuICByZXR1cm4gdmFsdWUuX2RhdGE7XG59XG5cbmNvbnN0IGRlZmVyID0gZnVuY3Rpb24gZGVmZXIoZGF0YSwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IHt9O1xuICB9XG5cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IHR5cGVvZiBpbml0ID09PSBcIm51bWJlclwiID8ge1xuICAgIHN0YXR1czogaW5pdFxuICB9IDogaW5pdDtcbiAgcmV0dXJuIG5ldyBEZWZlcnJlZERhdGEoZGF0YSwgcmVzcG9uc2VJbml0KTtcbn07XG4vKipcbiAqIEEgcmVkaXJlY3QgcmVzcG9uc2UuIFNldHMgdGhlIHN0YXR1cyBjb2RlIGFuZCB0aGUgYExvY2F0aW9uYCBoZWFkZXIuXG4gKiBEZWZhdWx0cyB0byBcIjMwMiBGb3VuZFwiLlxuICovXG5cbmNvbnN0IHJlZGlyZWN0ID0gZnVuY3Rpb24gcmVkaXJlY3QodXJsLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0gMzAyO1xuICB9XG5cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IGluaXQ7XG5cbiAgaWYgKHR5cGVvZiByZXNwb25zZUluaXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXNwb25zZUluaXQgPSB7XG4gICAgICBzdGF0dXM6IHJlc3BvbnNlSW5pdFxuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHJlc3BvbnNlSW5pdC5zdGF0dXMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXNwb25zZUluaXQuc3RhdHVzID0gMzAyO1xuICB9XG5cbiAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7XG4gIGhlYWRlcnMuc2V0KFwiTG9jYXRpb25cIiwgdXJsKTtcbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCBfZXh0ZW5kcyh7fSwgcmVzcG9uc2VJbml0LCB7XG4gICAgaGVhZGVyc1xuICB9KSk7XG59O1xuLyoqXG4gKiBAcHJpdmF0ZVxuICogVXRpbGl0eSBjbGFzcyB3ZSB1c2UgdG8gaG9sZCBhdXRvLXVud3JhcHBlZCA0eHgvNXh4IFJlc3BvbnNlIGJvZGllc1xuICovXG5cbmNsYXNzIEVycm9yUmVzcG9uc2Uge1xuICBjb25zdHJ1Y3RvcihzdGF0dXMsIHN0YXR1c1RleHQsIGRhdGEsIGludGVybmFsKSB7XG4gICAgaWYgKGludGVybmFsID09PSB2b2lkIDApIHtcbiAgICAgIGludGVybmFsID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dCB8fCBcIlwiO1xuICAgIHRoaXMuaW50ZXJuYWwgPSBpbnRlcm5hbDtcblxuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGEudG9TdHJpbmcoKTtcbiAgICAgIHRoaXMuZXJyb3IgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgfVxuXG59XG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlcnJvciBpcyBhbiBFcnJvclJlc3BvbnNlIGdlbmVyYXRlZCBmcm9tIGEgNHh4LzV4eFxuICogUmVzcG9uc2UgdGhyb3duIGZyb20gYW4gYWN0aW9uL2xvYWRlclxuICovXG5cbmZ1bmN0aW9uIGlzUm91dGVFcnJvclJlc3BvbnNlKGVycm9yKSB7XG4gIHJldHVybiBlcnJvciAhPSBudWxsICYmIHR5cGVvZiBlcnJvci5zdGF0dXMgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIGVycm9yLnN0YXR1c1RleHQgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIGVycm9yLmludGVybmFsID09PSBcImJvb2xlYW5cIiAmJiBcImRhdGFcIiBpbiBlcnJvcjtcbn1cblxuY29uc3QgdmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIgPSBbXCJwb3N0XCIsIFwicHV0XCIsIFwicGF0Y2hcIiwgXCJkZWxldGVcIl07XG5jb25zdCB2YWxpZE11dGF0aW9uTWV0aG9kcyA9IG5ldyBTZXQodmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIpO1xuY29uc3QgdmFsaWRSZXF1ZXN0TWV0aG9kc0FyciA9IFtcImdldFwiLCAuLi52YWxpZE11dGF0aW9uTWV0aG9kc0Fycl07XG5jb25zdCB2YWxpZFJlcXVlc3RNZXRob2RzID0gbmV3IFNldCh2YWxpZFJlcXVlc3RNZXRob2RzQXJyKTtcbmNvbnN0IHJlZGlyZWN0U3RhdHVzQ29kZXMgPSBuZXcgU2V0KFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF0pO1xuY29uc3QgcmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzID0gbmV3IFNldChbMzA3LCAzMDhdKTtcbmNvbnN0IElETEVfTkFWSUdBVElPTiA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBsb2NhdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgZm9ybURhdGE6IHVuZGVmaW5lZFxufTtcbmNvbnN0IElETEVfRkVUQ0hFUiA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBkYXRhOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkXG59O1xuY29uc3QgSURMRV9CTE9DS0VSID0ge1xuICBzdGF0ZTogXCJ1bmJsb2NrZWRcIixcbiAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICByZXNldDogdW5kZWZpbmVkLFxuICBsb2NhdGlvbjogdW5kZWZpbmVkXG59O1xuY29uc3QgQUJTT0xVVEVfVVJMX1JFR0VYID0gL14oPzpbYS16XVthLXowLTkrLi1dKjp8XFwvXFwvKS9pO1xuY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbmNvbnN0IGlzU2VydmVyID0gIWlzQnJvd3NlcjsgLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIGNyZWF0ZVJvdXRlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBDcmVhdGUgYSByb3V0ZXIgYW5kIGxpc3RlbiB0byBoaXN0b3J5IFBPUCBuYXZpZ2F0aW9uc1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlcihpbml0KSB7XG4gIGludmFyaWFudChpbml0LnJvdXRlcy5sZW5ndGggPiAwLCBcIllvdSBtdXN0IHByb3ZpZGUgYSBub24tZW1wdHkgcm91dGVzIGFycmF5IHRvIGNyZWF0ZVJvdXRlclwiKTtcbiAgbGV0IGRhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKGluaXQucm91dGVzKTtcbiAgbGV0IGluRmxpZ2h0RGF0YVJvdXRlczsgLy8gQ2xlYW51cCBmdW5jdGlvbiBmb3IgaGlzdG9yeVxuXG4gIGxldCB1bmxpc3Rlbkhpc3RvcnkgPSBudWxsOyAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9ucyB0byBjYWxsIG9uIGFsbCBzdGF0ZSBjaGFuZ2VzXG5cbiAgbGV0IHN1YnNjcmliZXJzID0gbmV3IFNldCgpOyAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIG9iamVjdCB0byBob2xkIHNjcm9sbCByZXN0b3JhdGlvbiBsb2NhdGlvbnMgZHVyaW5nIHJvdXRpbmdcblxuICBsZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBudWxsOyAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBzY3JvbGwgcmVzdG9yYXRpb24ga2V5c1xuXG4gIGxldCBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IG51bGw7IC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb24gdG8gZ2V0IGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXG5cbiAgbGV0IGdldFNjcm9sbFBvc2l0aW9uID0gbnVsbDsgLy8gT25lLXRpbWUgZmxhZyB0byBjb250cm9sIHRoZSBpbml0aWFsIGh5ZHJhdGlvbiBzY3JvbGwgcmVzdG9yYXRpb24uICBCZWNhdXNlXG4gIC8vIHdlIGRvbid0IGdldCB0aGUgc2F2ZWQgcG9zaXRpb25zIGZyb20gPFNjcm9sbFJlc3RvcmF0aW9uIC8+IHVudGlsIF9hZnRlcl9cbiAgLy8gdGhlIGluaXRpYWwgcmVuZGVyLCB3ZSBuZWVkIHRvIG1hbnVhbGx5IHRyaWdnZXIgYSBzZXBhcmF0ZSB1cGRhdGVTdGF0ZSB0b1xuICAvLyBzZW5kIGFsb25nIHRoZSByZXN0b3JlU2Nyb2xsUG9zaXRpb25cbiAgLy8gU2V0IHRvIHRydWUgaWYgd2UgaGF2ZSBgaHlkcmF0aW9uRGF0YWAgc2luY2Ugd2UgYXNzdW1lIHdlIHdlcmUgU1NSJ2QgYW5kIHRoYXRcbiAgLy8gU1NSIGRpZCB0aGUgaW5pdGlhbCBzY3JvbGwgcmVzdG9yYXRpb24uXG5cbiAgbGV0IGluaXRpYWxTY3JvbGxSZXN0b3JlZCA9IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsO1xuICBsZXQgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBpbml0Lmhpc3RvcnkubG9jYXRpb24sIGluaXQuYmFzZW5hbWUpO1xuICBsZXQgaW5pdGlhbEVycm9ycyA9IG51bGw7XG5cbiAgaWYgKGluaXRpYWxNYXRjaGVzID09IG51bGwpIHtcbiAgICAvLyBJZiB3ZSBkbyBub3QgbWF0Y2ggYSB1c2VyLXByb3ZpZGVkLXJvdXRlLCBmYWxsIGJhY2sgdG8gdGhlIHJvb3RcbiAgICAvLyB0byBhbGxvdyB0aGUgZXJyb3IgYm91bmRhcnkgdG8gdGFrZSBvdmVyXG4gICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgIHBhdGhuYW1lOiBpbml0Lmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWVcbiAgICB9KTtcbiAgICBsZXQge1xuICAgICAgbWF0Y2hlcyxcbiAgICAgIHJvdXRlXG4gICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGluaXRpYWxFcnJvcnMgPSB7XG4gICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgIH07XG4gIH1cblxuICBsZXQgaW5pdGlhbGl6ZWQgPSAhaW5pdGlhbE1hdGNoZXMuc29tZShtID0+IG0ucm91dGUubG9hZGVyKSB8fCBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbDtcbiAgbGV0IHJvdXRlcjtcbiAgbGV0IHN0YXRlID0ge1xuICAgIGhpc3RvcnlBY3Rpb246IGluaXQuaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGluaXQuaGlzdG9yeS5sb2NhdGlvbixcbiAgICBtYXRjaGVzOiBpbml0aWFsTWF0Y2hlcyxcbiAgICBpbml0aWFsaXplZCxcbiAgICBuYXZpZ2F0aW9uOiBJRExFX05BVklHQVRJT04sXG4gICAgLy8gRG9uJ3QgcmVzdG9yZSBvbiBpbml0aWFsIHVwZGF0ZVN0YXRlKCkgaWYgd2Ugd2VyZSBTU1InZFxuICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGwgPyBmYWxzZSA6IG51bGwsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0OiBmYWxzZSxcbiAgICByZXZhbGlkYXRpb246IFwiaWRsZVwiLFxuICAgIGxvYWRlckRhdGE6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEubG9hZGVyRGF0YSB8fCB7fSxcbiAgICBhY3Rpb25EYXRhOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmFjdGlvbkRhdGEgfHwgbnVsbCxcbiAgICBlcnJvcnM6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEuZXJyb3JzIHx8IGluaXRpYWxFcnJvcnMsXG4gICAgZmV0Y2hlcnM6IG5ldyBNYXAoKSxcbiAgICBibG9ja2VyczogbmV3IE1hcCgpXG4gIH07IC8vIC0tIFN0YXRlZnVsIGludGVybmFsIHZhcmlhYmxlcyB0byBtYW5hZ2UgbmF2aWdhdGlvbnMgLS1cbiAgLy8gQ3VycmVudCBuYXZpZ2F0aW9uIGluIHByb2dyZXNzICh0byBiZSBjb21taXR0ZWQgaW4gY29tcGxldGVOYXZpZ2F0aW9uKVxuXG4gIGxldCBwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlBvcDsgLy8gU2hvdWxkIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gcHJldmVudCB0aGUgc2Nyb2xsIHJlc2V0IGlmIHNjcm9sbCBjYW5ub3RcbiAgLy8gYmUgcmVzdG9yZWQ/XG5cbiAgbGV0IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSBmYWxzZTsgLy8gQWJvcnRDb250cm9sbGVyIGZvciB0aGUgYWN0aXZlIG5hdmlnYXRpb25cblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyOyAvLyBXZSB1c2UgdGhpcyB0byBhdm9pZCB0b3VjaGluZyBoaXN0b3J5IGluIGNvbXBsZXRlTmF2aWdhdGlvbiBpZiBhXG4gIC8vIHJldmFsaWRhdGlvbiBpcyBlbnRpcmVseSB1bmludGVycnVwdGVkXG5cbiAgbGV0IGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IGZhbHNlOyAvLyBVc2UgdGhpcyBpbnRlcm5hbCBmbGFnIHRvIGZvcmNlIHJldmFsaWRhdGlvbiBvZiBhbGwgbG9hZGVyczpcbiAgLy8gIC0gc3VibWlzc2lvbnMgKGNvbXBsZXRlZCBvciBpbnRlcnJ1cHRlZClcbiAgLy8gIC0gdXNlUmV2YWxpZGF0ZSgpXG4gIC8vICAtIFgtUmVtaXgtUmV2YWxpZGF0ZSAoZnJvbSByZWRpcmVjdClcblxuICBsZXQgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlOyAvLyBVc2UgdGhpcyBpbnRlcm5hbCBhcnJheSB0byBjYXB0dXJlIHJvdXRlcyB0aGF0IHJlcXVpcmUgcmV2YWxpZGF0aW9uIGR1ZVxuICAvLyB0byBhIGNhbmNlbGxlZCBkZWZlcnJlZCBvbiBhY3Rpb24gc3VibWlzc2lvblxuXG4gIGxldCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcyA9IFtdOyAvLyBVc2UgdGhpcyBpbnRlcm5hbCBhcnJheSB0byBjYXB0dXJlIGZldGNoZXIgbG9hZHMgdGhhdCB3ZXJlIGNhbmNlbGxlZCBieSBhblxuICAvLyBhY3Rpb24gbmF2aWdhdGlvbiBhbmQgcmVxdWlyZSByZXZhbGlkYXRpb25cblxuICBsZXQgY2FuY2VsbGVkRmV0Y2hlckxvYWRzID0gW107IC8vIEFib3J0Q29udHJvbGxlcnMgZm9yIGFueSBpbi1mbGlnaHQgZmV0Y2hlcnNcblxuICBsZXQgZmV0Y2hDb250cm9sbGVycyA9IG5ldyBNYXAoKTsgLy8gVHJhY2sgbG9hZHMgYmFzZWQgb24gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgc3RhcnRlZFxuXG4gIGxldCBpbmNyZW1lbnRpbmdMb2FkSWQgPSAwOyAvLyBUcmFjayB0aGUgb3V0c3RhbmRpbmcgcGVuZGluZyBuYXZpZ2F0aW9uIGRhdGEgbG9hZCB0byBiZSBjb21wYXJlZCBhZ2FpbnN0XG4gIC8vIHRoZSBnbG9iYWxseSBpbmNyZW1lbnRpbmcgbG9hZCB3aGVuIGEgZmV0Y2hlciBsb2FkIGxhbmRzIGFmdGVyIGEgY29tcGxldGVkXG4gIC8vIG5hdmlnYXRpb25cblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPSAtMTsgLy8gRmV0Y2hlcnMgdGhhdCB0cmlnZ2VyZWQgZGF0YSByZWxvYWRzIGFzIGEgcmVzdWx0IG9mIHRoZWlyIGFjdGlvbnNcblxuICBsZXQgZmV0Y2hSZWxvYWRJZHMgPSBuZXcgTWFwKCk7IC8vIEZldGNoZXJzIHRoYXQgdHJpZ2dlcmVkIHJlZGlyZWN0IG5hdmlnYXRpb25zIGZyb20gdGhlaXIgYWN0aW9uc1xuXG4gIGxldCBmZXRjaFJlZGlyZWN0SWRzID0gbmV3IFNldCgpOyAvLyBNb3N0IHJlY2VudCBocmVmL21hdGNoIGZvciBmZXRjaGVyLmxvYWQgY2FsbHMgZm9yIGZldGNoZXJzXG5cbiAgbGV0IGZldGNoTG9hZE1hdGNoZXMgPSBuZXcgTWFwKCk7IC8vIFN0b3JlIERlZmVycmVkRGF0YSBpbnN0YW5jZXMgZm9yIGFjdGl2ZSByb3V0ZSBtYXRjaGVzLiAgV2hlbiBhXG4gIC8vIHJvdXRlIGxvYWRlciByZXR1cm5zIGRlZmVyKCkgd2Ugc3RpY2sgb25lIGluIGhlcmUuICBUaGVuLCB3aGVuIGEgbmVzdGVkXG4gIC8vIHByb21pc2UgcmVzb2x2ZXMgd2UgdXBkYXRlIGxvYWRlckRhdGEuICBJZiBhIG5ldyBuYXZpZ2F0aW9uIHN0YXJ0cyB3ZVxuICAvLyBjYW5jZWwgYWN0aXZlIGRlZmVycmVkcyBmb3IgZWxpbWluYXRlZCByb3V0ZXMuXG5cbiAgbGV0IGFjdGl2ZURlZmVycmVkcyA9IG5ldyBNYXAoKTsgLy8gU3RvcmUgYmxvY2tlciBmdW5jdGlvbnMgaW4gYSBzZXBhcmF0ZSBNYXAgb3V0c2lkZSBvZiByb3V0ZXIgc3RhdGUgc2luY2VcbiAgLy8gd2UgZG9uJ3QgbmVlZCB0byB1cGRhdGUgVUkgc3RhdGUgaWYgdGhleSBjaGFuZ2VcblxuICBsZXQgYmxvY2tlckZ1bmN0aW9ucyA9IG5ldyBNYXAoKTsgLy8gRmxhZyB0byBpZ25vcmUgdGhlIG5leHQgaGlzdG9yeSB1cGRhdGUsIHNvIHdlIGNhbiByZXZlcnQgdGhlIFVSTCBjaGFuZ2Ugb25cbiAgLy8gYSBQT1AgbmF2aWdhdGlvbiB0aGF0IHdhcyBibG9ja2VkIGJ5IHRoZSB1c2VyIHdpdGhvdXQgdG91Y2hpbmcgcm91dGVyIHN0YXRlXG5cbiAgbGV0IGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gZmFsc2U7IC8vIEluaXRpYWxpemUgdGhlIHJvdXRlciwgYWxsIHNpZGUgZWZmZWN0cyBzaG91bGQgYmUga2lja2VkIG9mZiBmcm9tIGhlcmUuXG4gIC8vIEltcGxlbWVudGVkIGFzIGEgRmx1ZW50IEFQSSBmb3IgZWFzZSBvZjpcbiAgLy8gICBsZXQgcm91dGVyID0gY3JlYXRlUm91dGVyKGluaXQpLmluaXRpYWxpemUoKTtcblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIC8vIElmIGhpc3RvcnkgaW5mb3JtcyB1cyBvZiBhIFBPUCBuYXZpZ2F0aW9uLCBzdGFydCB0aGUgbmF2aWdhdGlvbiBidXQgZG8gbm90IHVwZGF0ZVxuICAgIC8vIHN0YXRlLiAgV2UnbGwgdXBkYXRlIG91ciBvd24gc3RhdGUgb25jZSB0aGUgbmF2aWdhdGlvbiBjb21wbGV0ZXNcbiAgICB1bmxpc3Rlbkhpc3RvcnkgPSBpbml0Lmhpc3RvcnkubGlzdGVuKF9yZWYgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgYWN0aW9uOiBoaXN0b3J5QWN0aW9uLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgZGVsdGFcbiAgICAgIH0gPSBfcmVmO1xuXG4gICAgICAvLyBJZ25vcmUgdGhpcyBldmVudCBpZiBpdCB3YXMganVzdCB1cyByZXNldHRpbmcgdGhlIFVSTCBmcm9tIGFcbiAgICAgIC8vIGJsb2NrZWQgUE9QIG5hdmlnYXRpb25cbiAgICAgIGlmIChpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSkge1xuICAgICAgICBpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHdhcm5pbmcoYmxvY2tlckZ1bmN0aW9ucy5zaXplID09PSAwIHx8IGRlbHRhICE9IG51bGwsIFwiWW91IGFyZSB0cnlpbmcgdG8gdXNlIGEgYmxvY2tlciBvbiBhIFBPUCBuYXZpZ2F0aW9uIHRvIGEgbG9jYXRpb24gXCIgKyBcInRoYXQgd2FzIG5vdCBjcmVhdGVkIGJ5IEByZW1peC1ydW4vcm91dGVyLiBUaGlzIHdpbGwgZmFpbCBzaWxlbnRseSBpbiBcIiArIFwicHJvZHVjdGlvbi4gVGhpcyBjYW4gaGFwcGVuIGlmIHlvdSBhcmUgbmF2aWdhdGluZyBvdXRzaWRlIHRoZSByb3V0ZXIgXCIgKyBcInZpYSBgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlYC9gd2luZG93LmxvY2F0aW9uLmhhc2hgIGluc3RlYWQgb2YgdXNpbmcgXCIgKyBcInJvdXRlciBuYXZpZ2F0aW9uIEFQSXMuICBUaGlzIGNhbiBhbHNvIGhhcHBlbiBpZiB5b3UgYXJlIHVzaW5nIFwiICsgXCJjcmVhdGVIYXNoUm91dGVyIGFuZCB0aGUgdXNlciBtYW51YWxseSBjaGFuZ2VzIHRoZSBVUkwuXCIpO1xuICAgICAgbGV0IGJsb2NrZXJLZXkgPSBzaG91bGRCbG9ja05hdmlnYXRpb24oe1xuICAgICAgICBjdXJyZW50TG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBuZXh0TG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBoaXN0b3J5QWN0aW9uXG4gICAgICB9KTtcblxuICAgICAgaWYgKGJsb2NrZXJLZXkgJiYgZGVsdGEgIT0gbnVsbCkge1xuICAgICAgICAvLyBSZXN0b3JlIHRoZSBVUkwgdG8gbWF0Y2ggdGhlIGN1cnJlbnQgVUksIGJ1dCBkb24ndCB1cGRhdGUgcm91dGVyIHN0YXRlXG4gICAgICAgIGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgaW5pdC5oaXN0b3J5LmdvKGRlbHRhICogLTEpOyAvLyBQdXQgdGhlIGJsb2NrZXIgaW50byBhIGJsb2NrZWQgc3RhdGVcblxuICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICBzdGF0ZTogXCJibG9ja2VkXCIsXG4gICAgICAgICAgbG9jYXRpb24sXG5cbiAgICAgICAgICBwcm9jZWVkKCkge1xuICAgICAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgICAgICAgIHN0YXRlOiBcInByb2NlZWRpbmdcIixcbiAgICAgICAgICAgICAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICByZXNldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBsb2NhdGlvblxuICAgICAgICAgICAgfSk7IC8vIFJlLWRvIHRoZSBzYW1lIFBPUCBuYXZpZ2F0aW9uIHdlIGp1c3QgYmxvY2tlZFxuXG4gICAgICAgICAgICBpbml0Lmhpc3RvcnkuZ28oZGVsdGEpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICByZXNldCgpIHtcbiAgICAgICAgICAgIGRlbGV0ZUJsb2NrZXIoYmxvY2tlcktleSk7XG4gICAgICAgICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgICAgICAgIGJsb2NrZXJzOiBuZXcgTWFwKHJvdXRlci5zdGF0ZS5ibG9ja2VycylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIGxvY2F0aW9uKTtcbiAgICB9KTsgLy8gS2ljayBvZmYgaW5pdGlhbCBkYXRhIGxvYWQgaWYgbmVlZGVkLiAgVXNlIFBvcCB0byBhdm9pZCBtb2RpZnlpbmcgaGlzdG9yeVxuXG4gICAgaWYgKCFzdGF0ZS5pbml0aWFsaXplZCkge1xuICAgICAgc3RhcnROYXZpZ2F0aW9uKEFjdGlvbi5Qb3AsIHN0YXRlLmxvY2F0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm91dGVyO1xuICB9IC8vIENsZWFuIHVwIGEgcm91dGVyIGFuZCBpdCdzIHNpZGUgZWZmZWN0c1xuXG5cbiAgZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodW5saXN0ZW5IaXN0b3J5KSB7XG4gICAgICB1bmxpc3Rlbkhpc3RvcnkoKTtcbiAgICB9XG5cbiAgICBzdWJzY3JpYmVycy5jbGVhcigpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5mb3JFYWNoKChfLCBrZXkpID0+IGRlbGV0ZUZldGNoZXIoa2V5KSk7XG4gICAgc3RhdGUuYmxvY2tlcnMuZm9yRWFjaCgoXywga2V5KSA9PiBkZWxldGVCbG9ja2VyKGtleSkpO1xuICB9IC8vIFN1YnNjcmliZSB0byBzdGF0ZSB1cGRhdGVzIGZvciB0aGUgcm91dGVyXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUoZm4pIHtcbiAgICBzdWJzY3JpYmVycy5hZGQoZm4pO1xuICAgIHJldHVybiAoKSA9PiBzdWJzY3JpYmVycy5kZWxldGUoZm4pO1xuICB9IC8vIFVwZGF0ZSBvdXIgc3RhdGUgYW5kIG5vdGlmeSB0aGUgY2FsbGluZyBjb250ZXh0IG9mIHRoZSBjaGFuZ2VcblxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVN0YXRlKG5ld1N0YXRlKSB7XG4gICAgc3RhdGUgPSBfZXh0ZW5kcyh7fSwgc3RhdGUsIG5ld1N0YXRlKTtcbiAgICBzdWJzY3JpYmVycy5mb3JFYWNoKHN1YnNjcmliZXIgPT4gc3Vic2NyaWJlcihzdGF0ZSkpO1xuICB9IC8vIENvbXBsZXRlIGEgbmF2aWdhdGlvbiByZXR1cm5pbmcgdGhlIHN0YXRlLm5hdmlnYXRpb24gYmFjayB0byB0aGUgSURMRV9OQVZJR0FUSU9OXG4gIC8vIGFuZCBzZXR0aW5nIHN0YXRlLltoaXN0b3J5QWN0aW9uL2xvY2F0aW9uL21hdGNoZXNdIHRvIHRoZSBuZXcgcm91dGUuXG4gIC8vIC0gTG9jYXRpb24gaXMgYSByZXF1aXJlZCBwYXJhbVxuICAvLyAtIE5hdmlnYXRpb24gd2lsbCBhbHdheXMgYmUgc2V0IHRvIElETEVfTkFWSUdBVElPTlxuICAvLyAtIENhbiBwYXNzIGFueSBvdGhlciBzdGF0ZSBpbiBuZXdTdGF0ZVxuXG5cbiAgZnVuY3Rpb24gY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBuZXdTdGF0ZSkge1xuICAgIHZhciBfbG9jYXRpb24kc3RhdGUsIF9sb2NhdGlvbiRzdGF0ZTI7XG5cbiAgICAvLyBEZWR1Y2UgaWYgd2UncmUgaW4gYSBsb2FkaW5nL2FjdGlvblJlbG9hZCBzdGF0ZTpcbiAgICAvLyAtIFdlIGhhdmUgY29tbWl0dGVkIGFjdGlvbkRhdGEgaW4gdGhlIHN0b3JlXG4gICAgLy8gLSBUaGUgY3VycmVudCBuYXZpZ2F0aW9uIHdhcyBhIG11dGF0aW9uIHN1Ym1pc3Npb25cbiAgICAvLyAtIFdlJ3JlIHBhc3QgdGhlIHN1Ym1pdHRpbmcgc3RhdGUgYW5kIGludG8gdGhlIGxvYWRpbmcgc3RhdGVcbiAgICAvLyAtIFRoZSBsb2NhdGlvbiBiZWluZyBsb2FkZWQgaXMgbm90IHRoZSByZXN1bHQgb2YgYSByZWRpcmVjdFxuICAgIGxldCBpc0FjdGlvblJlbG9hZCA9IHN0YXRlLmFjdGlvbkRhdGEgIT0gbnVsbCAmJiBzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QgIT0gbnVsbCAmJiBpc011dGF0aW9uTWV0aG9kKHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCkgJiYgc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgKChfbG9jYXRpb24kc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sb2NhdGlvbiRzdGF0ZS5faXNSZWRpcmVjdCkgIT09IHRydWU7XG4gICAgbGV0IGFjdGlvbkRhdGE7XG5cbiAgICBpZiAobmV3U3RhdGUuYWN0aW9uRGF0YSkge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKG5ld1N0YXRlLmFjdGlvbkRhdGEpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYWN0aW9uRGF0YSA9IG5ld1N0YXRlLmFjdGlvbkRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBFbXB0eSBhY3Rpb25EYXRhIC0+IGNsZWFyIHByaW9yIGFjdGlvbkRhdGEgZHVlIHRvIGFuIGFjdGlvbiBlcnJvclxuICAgICAgICBhY3Rpb25EYXRhID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQWN0aW9uUmVsb2FkKSB7XG4gICAgICAvLyBLZWVwIHRoZSBjdXJyZW50IGRhdGEgaWYgd2UncmUgd3JhcHBpbmcgdXAgdGhlIGFjdGlvbiByZWxvYWRcbiAgICAgIGFjdGlvbkRhdGEgPSBzdGF0ZS5hY3Rpb25EYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDbGVhciBhY3Rpb25EYXRhIG9uIGFueSBvdGhlciBjb21wbGV0ZWQgbmF2aWdhdGlvbnNcbiAgICAgIGFjdGlvbkRhdGEgPSBudWxsO1xuICAgIH0gLy8gQWx3YXlzIHByZXNlcnZlIGFueSBleGlzdGluZyBsb2FkZXJEYXRhIGZyb20gcmUtdXNlZCByb3V0ZXNcblxuXG4gICAgbGV0IGxvYWRlckRhdGEgPSBuZXdTdGF0ZS5sb2FkZXJEYXRhID8gbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIG5ld1N0YXRlLmxvYWRlckRhdGEsIG5ld1N0YXRlLm1hdGNoZXMgfHwgW10sIG5ld1N0YXRlLmVycm9ycykgOiBzdGF0ZS5sb2FkZXJEYXRhOyAvLyBPbiBhIHN1Y2Nlc3NmdWwgbmF2aWdhdGlvbiB3ZSBjYW4gYXNzdW1lIHdlIGdvdCB0aHJvdWdoIGFsbCBibG9ja2Vyc1xuICAgIC8vIHNvIHdlIGNhbiBzdGFydCBmcmVzaFxuXG4gICAgZm9yIChsZXQgW2tleV0gb2YgYmxvY2tlckZ1bmN0aW9ucykge1xuICAgICAgZGVsZXRlQmxvY2tlcihrZXkpO1xuICAgIH0gLy8gQWx3YXlzIHJlc3BlY3QgdGhlIHVzZXIgZmxhZy4gIE90aGVyd2lzZSBkb24ndCByZXNldCBvbiBtdXRhdGlvblxuICAgIC8vIHN1Ym1pc3Npb24gbmF2aWdhdGlvbnMgdW5sZXNzIHRoZXkgcmVkaXJlY3RcblxuXG4gICAgbGV0IHByZXZlbnRTY3JvbGxSZXNldCA9IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUgfHwgc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kICE9IG51bGwgJiYgaXNNdXRhdGlvbk1ldGhvZChzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QpICYmICgoX2xvY2F0aW9uJHN0YXRlMiA9IGxvY2F0aW9uLnN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2xvY2F0aW9uJHN0YXRlMi5faXNSZWRpcmVjdCkgIT09IHRydWU7XG5cbiAgICBpZiAoaW5GbGlnaHREYXRhUm91dGVzKSB7XG4gICAgICBkYXRhUm91dGVzID0gaW5GbGlnaHREYXRhUm91dGVzO1xuICAgICAgaW5GbGlnaHREYXRhUm91dGVzID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHVwZGF0ZVN0YXRlKF9leHRlbmRzKHt9LCBuZXdTdGF0ZSwge1xuICAgICAgYWN0aW9uRGF0YSxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBoaXN0b3J5QWN0aW9uOiBwZW5kaW5nQWN0aW9uLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBpbml0aWFsaXplZDogdHJ1ZSxcbiAgICAgIG5hdmlnYXRpb246IElETEVfTkFWSUdBVElPTixcbiAgICAgIHJldmFsaWRhdGlvbjogXCJpZGxlXCIsXG4gICAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IGdldFNhdmVkU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG5ld1N0YXRlLm1hdGNoZXMgfHwgc3RhdGUubWF0Y2hlcyksXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICBibG9ja2VyczogbmV3IE1hcChzdGF0ZS5ibG9ja2VycylcbiAgICB9KSk7XG5cbiAgICBpZiAoaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSA7IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5Qb3ApIDsgZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlB1c2gpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5wdXNoKGxvY2F0aW9uLCBsb2NhdGlvbi5zdGF0ZSk7XG4gICAgfSBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUmVwbGFjZSkge1xuICAgICAgaW5pdC5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIGxvY2F0aW9uLnN0YXRlKTtcbiAgICB9IC8vIFJlc2V0IHN0YXRlZnVsIG5hdmlnYXRpb24gdmFyc1xuXG5cbiAgICBwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gZmFsc2U7XG4gICAgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gZmFsc2U7XG4gICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO1xuICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzID0gW107XG4gICAgY2FuY2VsbGVkRmV0Y2hlckxvYWRzID0gW107XG4gIH0gLy8gVHJpZ2dlciBhIG5hdmlnYXRpb24gZXZlbnQsIHdoaWNoIGNhbiBlaXRoZXIgYmUgYSBudW1lcmljYWwgUE9QIG9yIGEgUFVTSFxuICAvLyByZXBsYWNlIHdpdGggYW4gb3B0aW9uYWwgc3VibWlzc2lvblxuXG5cbiAgYXN5bmMgZnVuY3Rpb24gbmF2aWdhdGUodG8sIG9wdHMpIHtcbiAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpbml0Lmhpc3RvcnkuZ28odG8pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCB7XG4gICAgICBwYXRoLFxuICAgICAgc3VibWlzc2lvbixcbiAgICAgIGVycm9yXG4gICAgfSA9IG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyh0bywgb3B0cyk7XG4gICAgbGV0IGN1cnJlbnRMb2NhdGlvbiA9IHN0YXRlLmxvY2F0aW9uO1xuICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihzdGF0ZS5sb2NhdGlvbiwgcGF0aCwgb3B0cyAmJiBvcHRzLnN0YXRlKTsgLy8gV2hlbiB1c2luZyBuYXZpZ2F0ZSBhcyBhIFBVU0gvUkVQTEFDRSB3ZSBhcmVuJ3QgcmVhZGluZyBhbiBhbHJlYWR5LWVuY29kZWRcbiAgICAvLyBVUkwgZnJvbSB3aW5kb3cubG9jYXRpb24sIHNvIHdlIG5lZWQgdG8gZW5jb2RlIGl0IGhlcmUgc28gdGhlIGJlaGF2aW9yXG4gICAgLy8gcmVtYWlucyB0aGUgc2FtZSBhcyBQT1AgYW5kIG5vbi1kYXRhLXJvdXRlciB1c2FnZXMuICBuZXcgVVJMKCkgZG9lcyBhbGxcbiAgICAvLyB0aGUgc2FtZSBlbmNvZGluZyB3ZSdkIGdldCBmcm9tIGEgaGlzdG9yeS5wdXNoU3RhdGUvd2luZG93LmxvY2F0aW9uIHJlYWRcbiAgICAvLyB3aXRob3V0IGhhdmluZyB0byB0b3VjaCBoaXN0b3J5XG5cbiAgICBuZXh0TG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgbmV4dExvY2F0aW9uLCBpbml0Lmhpc3RvcnkuZW5jb2RlTG9jYXRpb24obmV4dExvY2F0aW9uKSk7XG4gICAgbGV0IHVzZXJSZXBsYWNlID0gb3B0cyAmJiBvcHRzLnJlcGxhY2UgIT0gbnVsbCA/IG9wdHMucmVwbGFjZSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgaGlzdG9yeUFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuXG4gICAgaWYgKHVzZXJSZXBsYWNlID09PSB0cnVlKSB7XG4gICAgICBoaXN0b3J5QWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgfSBlbHNlIGlmICh1c2VyUmVwbGFjZSA9PT0gZmFsc2UpIDsgZWxzZSBpZiAoc3VibWlzc2lvbiAhPSBudWxsICYmIGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSAmJiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24gPT09IHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lICsgc3RhdGUubG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICAvLyBCeSBkZWZhdWx0IG9uIHN1Ym1pc3Npb25zIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uIHdlIFJFUExBQ0Ugc28gdGhhdFxuICAgICAgLy8gdXNlcnMgZG9uJ3QgaGF2ZSB0byBkb3VibGUtY2xpY2sgdGhlIGJhY2sgYnV0dG9uIHRvIGdldCB0byB0aGUgcHJpb3JcbiAgICAgIC8vIGxvY2F0aW9uLiAgSWYgdGhlIHVzZXIgcmVkaXJlY3RzIHRvIGEgZGlmZmVyZW50IGxvY2F0aW9uIGZyb20gdGhlXG4gICAgICAvLyBhY3Rpb24vbG9hZGVyIHRoaXMgd2lsbCBiZSBpZ25vcmVkIGFuZCB0aGUgcmVkaXJlY3Qgd2lsbCBiZSBhIFBVU0hcbiAgICAgIGhpc3RvcnlBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB9XG5cbiAgICBsZXQgcHJldmVudFNjcm9sbFJlc2V0ID0gb3B0cyAmJiBcInByZXZlbnRTY3JvbGxSZXNldFwiIGluIG9wdHMgPyBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgYmxvY2tlcktleSA9IHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSk7XG5cbiAgICBpZiAoYmxvY2tlcktleSkge1xuICAgICAgLy8gUHV0IHRoZSBibG9ja2VyIGludG8gYSBibG9ja2VkIHN0YXRlXG4gICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgc3RhdGU6IFwiYmxvY2tlZFwiLFxuICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuXG4gICAgICAgIHByb2NlZWQoKSB7XG4gICAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgICAgICBzdGF0ZTogXCJwcm9jZWVkaW5nXCIsXG4gICAgICAgICAgICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICByZXNldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvblxuICAgICAgICAgIH0pOyAvLyBTZW5kIHRoZSBzYW1lIG5hdmlnYXRpb24gdGhyb3VnaFxuXG4gICAgICAgICAgbmF2aWdhdGUodG8sIG9wdHMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgIGRlbGV0ZUJsb2NrZXIoYmxvY2tlcktleSk7XG4gICAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgICAgYmxvY2tlcnM6IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIGF3YWl0IHN0YXJ0TmF2aWdhdGlvbihoaXN0b3J5QWN0aW9uLCBuZXh0TG9jYXRpb24sIHtcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICAvLyBTZW5kIHRocm91Z2ggdGhlIGZvcm1EYXRhIHNlcmlhbGl6YXRpb24gZXJyb3IgaWYgd2UgaGF2ZSBvbmUgc28gd2UgY2FuXG4gICAgICAvLyByZW5kZXIgYXQgdGhlIHJpZ2h0IGVycm9yIGJvdW5kYXJ5IGFmdGVyIHdlIG1hdGNoIHJvdXRlc1xuICAgICAgcGVuZGluZ0Vycm9yOiBlcnJvcixcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHJlcGxhY2U6IG9wdHMgJiYgb3B0cy5yZXBsYWNlXG4gICAgfSk7XG4gIH0gLy8gUmV2YWxpZGF0ZSBhbGwgY3VycmVudCBsb2FkZXJzLiAgSWYgYSBuYXZpZ2F0aW9uIGlzIGluIHByb2dyZXNzIG9yIGlmIHRoaXNcbiAgLy8gaXMgaW50ZXJydXB0ZWQgYnkgYSBuYXZpZ2F0aW9uLCBhbGxvdyB0aGlzIHRvIFwic3VjY2VlZFwiIGJ5IGNhbGxpbmcgYWxsXG4gIC8vIGxvYWRlcnMgZHVyaW5nIHRoZSBuZXh0IGxvYWRlciByb3VuZFxuXG5cbiAgZnVuY3Rpb24gcmV2YWxpZGF0ZSgpIHtcbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIHJldmFsaWRhdGlvbjogXCJsb2FkaW5nXCJcbiAgICB9KTsgLy8gSWYgd2UncmUgY3VycmVudGx5IHN1Ym1pdHRpbmcgYW4gYWN0aW9uLCB3ZSBkb24ndCBuZWVkIHRvIHN0YXJ0IGEgbmV3XG4gICAgLy8gbmF2aWdhdGlvbiwgd2UnbGwganVzdCBsZXQgdGhlIGZvbGxvdyB1cCBsb2FkZXIgZXhlY3V0aW9uIGNhbGwgYWxsIGxvYWRlcnNcblxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcInN1Ym1pdHRpbmdcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gSWYgd2UncmUgY3VycmVudGx5IGluIGFuIGlkbGUgc3RhdGUsIHN0YXJ0IGEgbmV3IG5hdmlnYXRpb24gZm9yIHRoZSBjdXJyZW50XG4gICAgLy8gYWN0aW9uL2xvY2F0aW9uIGFuZCBtYXJrIGl0IGFzIHVuaW50ZXJydXB0ZWQsIHdoaWNoIHdpbGwgc2tpcCB0aGUgaGlzdG9yeVxuICAgIC8vIHVwZGF0ZSBpbiBjb21wbGV0ZU5hdmlnYXRpb25cblxuXG4gICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICBzdGFydE5hdmlnYXRpb24oc3RhdGUuaGlzdG9yeUFjdGlvbiwgc3RhdGUubG9jYXRpb24sIHtcbiAgICAgICAgc3RhcnRVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIE90aGVyd2lzZSwgaWYgd2UncmUgY3VycmVudGx5IGluIGEgbG9hZGluZyBzdGF0ZSwganVzdCBzdGFydCBhIG5ld1xuICAgIC8vIG5hdmlnYXRpb24gdG8gdGhlIG5hdmlnYXRpb24ubG9jYXRpb24gYnV0IGRvIG5vdCB0cmlnZ2VyIGFuIHVuaW50ZXJydXB0ZWRcbiAgICAvLyByZXZhbGlkYXRpb24gc28gdGhhdCBoaXN0b3J5IGNvcnJlY3RseSB1cGRhdGVzIG9uY2UgdGhlIG5hdmlnYXRpb24gY29tcGxldGVzXG5cblxuICAgIHN0YXJ0TmF2aWdhdGlvbihwZW5kaW5nQWN0aW9uIHx8IHN0YXRlLmhpc3RvcnlBY3Rpb24sIHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIHtcbiAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbjogc3RhdGUubmF2aWdhdGlvblxuICAgIH0pO1xuICB9IC8vIFN0YXJ0IGEgbmF2aWdhdGlvbiB0byB0aGUgZ2l2ZW4gYWN0aW9uL2xvY2F0aW9uLiAgQ2FuIG9wdGlvbmFsbHkgcHJvdmlkZSBhXG4gIC8vIG92ZXJyaWRlTmF2aWdhdGlvbiB3aGljaCB3aWxsIG92ZXJyaWRlIHRoZSBub3JtYWxMb2FkIGluIHRoZSBjYXNlIG9mIGEgcmVkaXJlY3RcbiAgLy8gbmF2aWdhdGlvblxuXG5cbiAgYXN5bmMgZnVuY3Rpb24gc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIGxvY2F0aW9uLCBvcHRzKSB7XG4gICAgLy8gQWJvcnQgYW55IGluLXByb2dyZXNzIG5hdmlnYXRpb25zIGFuZCBzdGFydCBhIG5ldyBvbmUuIFVuc2V0IGFueSBvbmdvaW5nXG4gICAgLy8gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb25zIHVubGVzcyB0b2xkIG90aGVyd2lzZSwgc2luY2Ugd2Ugd2FudCB0aGlzXG4gICAgLy8gbmV3IG5hdmlnYXRpb24gdG8gdXBkYXRlIGhpc3Rvcnkgbm9ybWFsbHlcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICBwZW5kaW5nQWN0aW9uID0gaGlzdG9yeUFjdGlvbjtcbiAgICBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSAob3B0cyAmJiBvcHRzLnN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbikgPT09IHRydWU7IC8vIFNhdmUgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIGV2ZXJ5IHRpbWUgd2Ugc3RhcnQgYSBuZXcgbmF2aWdhdGlvbixcbiAgICAvLyBhbmQgdHJhY2sgd2hldGhlciB3ZSBzaG91bGQgcmVzZXQgc2Nyb2xsIG9uIGNvbXBsZXRpb25cblxuICAgIHNhdmVTY3JvbGxQb3NpdGlvbihzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlcyk7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IChvcHRzICYmIG9wdHMucHJldmVudFNjcm9sbFJlc2V0KSA9PT0gdHJ1ZTtcbiAgICBsZXQgcm91dGVzVG9Vc2UgPSBpbkZsaWdodERhdGFSb3V0ZXMgfHwgZGF0YVJvdXRlcztcbiAgICBsZXQgbG9hZGluZ05hdmlnYXRpb24gPSBvcHRzICYmIG9wdHMub3ZlcnJpZGVOYXZpZ2F0aW9uO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIGxvY2F0aW9uLCBpbml0LmJhc2VuYW1lKTsgLy8gU2hvcnQgY2lyY3VpdCB3aXRoIGEgNDA0IG9uIHRoZSByb290IGVycm9yIGJvdW5kYXJ5IGlmIHdlIG1hdGNoIG5vdGhpbmdcblxuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgcm91dGVcbiAgICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlc1RvVXNlKTsgLy8gQ2FuY2VsIGFsbCBwZW5kaW5nIGRlZmVycmVkIG9uIDQwNHMgc2luY2Ugd2UgZG9uJ3Qga2VlcCBhbnkgcm91dGVzXG5cbiAgICAgIGNhbmNlbEFjdGl2ZURlZmVycmVkcygpO1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCB7XG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gU2hvcnQgY2lyY3VpdCBpZiBpdCdzIG9ubHkgYSBoYXNoIGNoYW5nZSBhbmQgbm90IGEgbXV0YXRpb24gc3VibWlzc2lvblxuICAgIC8vIEZvciBleGFtcGxlLCBvbiAvcGFnZSNoYXNoIGFuZCBzdWJtaXQgYSA8Rm9ybSBtZXRob2Q9XCJwb3N0XCI+IHdoaWNoIHdpbGxcbiAgICAvLyBkZWZhdWx0IHRvIGEgbmF2aWdhdGlvbiB0byAvcGFnZVxuXG5cbiAgICBpZiAoaXNIYXNoQ2hhbmdlT25seShzdGF0ZS5sb2NhdGlvbiwgbG9jYXRpb24pICYmICEob3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChvcHRzLnN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpKSB7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlc1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBDcmVhdGUgYSBjb250cm9sbGVyL1JlcXVlc3QgZm9yIHRoaXMgbmF2aWdhdGlvblxuXG5cbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IHJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIGxvY2F0aW9uLCBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuc2lnbmFsLCBvcHRzICYmIG9wdHMuc3VibWlzc2lvbik7XG4gICAgbGV0IHBlbmRpbmdBY3Rpb25EYXRhO1xuICAgIGxldCBwZW5kaW5nRXJyb3I7XG5cbiAgICBpZiAob3B0cyAmJiBvcHRzLnBlbmRpbmdFcnJvcikge1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBlbmRpbmdFcnJvciwgaXQgbWVhbnMgdGhlIHVzZXIgYXR0ZW1wdGVkIGEgR0VUIHN1Ym1pc3Npb25cbiAgICAgIC8vIHdpdGggYmluYXJ5IEZvcm1EYXRhIHNvIGFzc2lnbiBoZXJlIGFuZCBza2lwIHRvIGhhbmRsZUxvYWRlcnMuICBUaGF0XG4gICAgICAvLyB3YXkgd2UgaGFuZGxlIGNhbGxpbmcgbG9hZGVycyBhYm92ZSB0aGUgYm91bmRhcnkgZXRjLiAgSXQncyBub3QgcmVhbGx5XG4gICAgICAvLyBkaWZmZXJlbnQgZnJvbSBhbiBhY3Rpb25FcnJvciBpbiB0aGF0IHNlbnNlLlxuICAgICAgcGVuZGluZ0Vycm9yID0ge1xuICAgICAgICBbZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzKS5yb3V0ZS5pZF06IG9wdHMucGVuZGluZ0Vycm9yXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAob3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChvcHRzLnN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICAgIC8vIENhbGwgYWN0aW9uIGlmIHdlIHJlY2VpdmVkIGFuIGFjdGlvbiBzdWJtaXNzaW9uXG4gICAgICBsZXQgYWN0aW9uT3V0cHV0ID0gYXdhaXQgaGFuZGxlQWN0aW9uKHJlcXVlc3QsIGxvY2F0aW9uLCBvcHRzLnN1Ym1pc3Npb24sIG1hdGNoZXMsIHtcbiAgICAgICAgcmVwbGFjZTogb3B0cy5yZXBsYWNlXG4gICAgICB9KTtcblxuICAgICAgaWYgKGFjdGlvbk91dHB1dC5zaG9ydENpcmN1aXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHBlbmRpbmdBY3Rpb25EYXRhID0gYWN0aW9uT3V0cHV0LnBlbmRpbmdBY3Rpb25EYXRhO1xuICAgICAgcGVuZGluZ0Vycm9yID0gYWN0aW9uT3V0cHV0LnBlbmRpbmdBY3Rpb25FcnJvcjtcblxuICAgICAgbGV0IG5hdmlnYXRpb24gPSBfZXh0ZW5kcyh7XG4gICAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgICAgbG9jYXRpb25cbiAgICAgIH0sIG9wdHMuc3VibWlzc2lvbik7XG5cbiAgICAgIGxvYWRpbmdOYXZpZ2F0aW9uID0gbmF2aWdhdGlvbjsgLy8gQ3JlYXRlIGEgR0VUIHJlcXVlc3QgZm9yIHRoZSBsb2FkZXJzXG5cbiAgICAgIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChyZXF1ZXN0LnVybCwge1xuICAgICAgICBzaWduYWw6IHJlcXVlc3Quc2lnbmFsXG4gICAgICB9KTtcbiAgICB9IC8vIENhbGwgbG9hZGVyc1xuXG5cbiAgICBsZXQge1xuICAgICAgc2hvcnRDaXJjdWl0ZWQsXG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IGF3YWl0IGhhbmRsZUxvYWRlcnMocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIGxvYWRpbmdOYXZpZ2F0aW9uLCBvcHRzICYmIG9wdHMuc3VibWlzc2lvbiwgb3B0cyAmJiBvcHRzLnJlcGxhY2UsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IpO1xuXG4gICAgaWYgKHNob3J0Q2lyY3VpdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBDbGVhbiB1cCBub3cgdGhhdCB0aGUgYWN0aW9uL2xvYWRlcnMgaGF2ZSBjb21wbGV0ZWQuICBEb24ndCBjbGVhbiB1cCBpZlxuICAgIC8vIHdlIHNob3J0IGNpcmN1aXRlZCBiZWNhdXNlIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciB3aWxsIGhhdmUgYWxyZWFkeVxuICAgIC8vIGJlZW4gYXNzaWduZWQgdG8gYSBuZXcgY29udHJvbGxlciBmb3IgdGhlIG5leHQgbmF2aWdhdGlvblxuXG5cbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwgX2V4dGVuZHMoe1xuICAgICAgbWF0Y2hlc1xuICAgIH0sIHBlbmRpbmdBY3Rpb25EYXRhID8ge1xuICAgICAgYWN0aW9uRGF0YTogcGVuZGluZ0FjdGlvbkRhdGFcbiAgICB9IDoge30sIHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9KSk7XG4gIH0gLy8gQ2FsbCB0aGUgYWN0aW9uIG1hdGNoZWQgYnkgdGhlIGxlYWYgcm91dGUgZm9yIHRoaXMgbmF2aWdhdGlvbiBhbmQgaGFuZGxlXG4gIC8vIHJlZGlyZWN0cy9lcnJvcnNcblxuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUFjdGlvbihyZXF1ZXN0LCBsb2NhdGlvbiwgc3VibWlzc2lvbiwgbWF0Y2hlcywgb3B0cykge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7IC8vIFB1dCB1cyBpbiBhIHN1Ym1pdHRpbmcgc3RhdGVcblxuICAgIGxldCBuYXZpZ2F0aW9uID0gX2V4dGVuZHMoe1xuICAgICAgc3RhdGU6IFwic3VibWl0dGluZ1wiLFxuICAgICAgbG9jYXRpb25cbiAgICB9LCBzdWJtaXNzaW9uKTtcblxuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIG5hdmlnYXRpb25cbiAgICB9KTsgLy8gQ2FsbCBvdXIgYWN0aW9uIGFuZCBnZXQgdGhlIHJlc3VsdFxuXG4gICAgbGV0IHJlc3VsdDtcbiAgICBsZXQgYWN0aW9uTWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbik7XG5cbiAgICBpZiAoIWFjdGlvbk1hdGNoLnJvdXRlLmFjdGlvbikge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgICByb3V0ZUlkOiBhY3Rpb25NYXRjaC5yb3V0ZS5pZFxuICAgICAgICB9KVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFwiYWN0aW9uXCIsIHJlcXVlc3QsIGFjdGlvbk1hdGNoLCBtYXRjaGVzLCByb3V0ZXIuYmFzZW5hbWUpO1xuXG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IHJlcGxhY2U7XG5cbiAgICAgIGlmIChvcHRzICYmIG9wdHMucmVwbGFjZSAhPSBudWxsKSB7XG4gICAgICAgIHJlcGxhY2UgPSBvcHRzLnJlcGxhY2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiB0aGUgdXNlciBkaWRuJ3QgZXhwbGljaXR5IGluZGljYXRlIHJlcGxhY2UgYmVoYXZpb3IsIHJlcGxhY2UgaWZcbiAgICAgICAgLy8gd2UgcmVkaXJlY3RlZCB0byB0aGUgZXhhY3Qgc2FtZSBsb2NhdGlvbiB3ZSdyZSBjdXJyZW50bHkgYXQgdG8gYXZvaWRcbiAgICAgICAgLy8gZG91YmxlIGJhY2stYnV0dG9uc1xuICAgICAgICByZXBsYWNlID0gcmVzdWx0LmxvY2F0aW9uID09PSBzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSArIHN0YXRlLmxvY2F0aW9uLnNlYXJjaDtcbiAgICAgIH1cblxuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlc3VsdCwge1xuICAgICAgICBzdWJtaXNzaW9uLFxuICAgICAgICByZXBsYWNlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTsgLy8gQnkgZGVmYXVsdCwgYWxsIHN1Ym1pc3Npb25zIGFyZSBSRVBMQUNFIG5hdmlnYXRpb25zLCBidXQgaWYgdGhlXG4gICAgICAvLyBhY3Rpb24gdGhyZXcgYW4gZXJyb3IgdGhhdCdsbCBiZSByZW5kZXJlZCBpbiBhbiBlcnJvckVsZW1lbnQsIHdlIGZhbGxcbiAgICAgIC8vIGJhY2sgdG8gUFVTSCBzbyB0aGF0IHRoZSB1c2VyIGNhbiB1c2UgdGhlIGJhY2sgYnV0dG9uIHRvIGdldCBiYWNrIHRvXG4gICAgICAvLyB0aGUgcHJlLXN1Ym1pc3Npb24gZm9ybSBsb2NhdGlvbiB0byB0cnkgYWdhaW5cblxuICAgICAgaWYgKChvcHRzICYmIG9wdHMucmVwbGFjZSkgIT09IHRydWUpIHtcbiAgICAgICAgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAvLyBTZW5kIGJhY2sgYW4gZW1wdHkgb2JqZWN0IHdlIGNhbiB1c2UgdG8gY2xlYXIgb3V0IGFueSBwcmlvciBhY3Rpb25EYXRhXG4gICAgICAgIHBlbmRpbmdBY3Rpb25EYXRhOiB7fSxcbiAgICAgICAgcGVuZGluZ0FjdGlvbkVycm9yOiB7XG4gICAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZXJyb3JcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICB0eXBlOiBcImRlZmVyLWFjdGlvblwiXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGVuZGluZ0FjdGlvbkRhdGE6IHtcbiAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmRhdGFcbiAgICAgIH1cbiAgICB9O1xuICB9IC8vIENhbGwgYWxsIGFwcGxpY2FibGUgbG9hZGVycyBmb3IgdGhlIGdpdmVuIG1hdGNoZXMsIGhhbmRsaW5nIHJlZGlyZWN0cyxcbiAgLy8gZXJyb3JzLCBldGMuXG5cblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVMb2FkZXJzKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCBvdmVycmlkZU5hdmlnYXRpb24sIHN1Ym1pc3Npb24sIHJlcGxhY2UsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IpIHtcbiAgICAvLyBGaWd1cmUgb3V0IHRoZSByaWdodCBuYXZpZ2F0aW9uIHdlIHdhbnQgdG8gdXNlIGZvciBkYXRhIGxvYWRpbmdcbiAgICBsZXQgbG9hZGluZ05hdmlnYXRpb24gPSBvdmVycmlkZU5hdmlnYXRpb247XG5cbiAgICBpZiAoIWxvYWRpbmdOYXZpZ2F0aW9uKSB7XG4gICAgICBsZXQgbmF2aWdhdGlvbiA9IF9leHRlbmRzKHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWRcbiAgICAgIH0sIHN1Ym1pc3Npb24pO1xuXG4gICAgICBsb2FkaW5nTmF2aWdhdGlvbiA9IG5hdmlnYXRpb247XG4gICAgfSAvLyBJZiB0aGlzIHdhcyBhIHJlZGlyZWN0IGZyb20gYW4gYWN0aW9uIHdlIGRvbid0IGhhdmUgYSBcInN1Ym1pc3Npb25cIiBidXRcbiAgICAvLyB3ZSBoYXZlIGl0IG9uIHRoZSBsb2FkaW5nIG5hdmlnYXRpb24gc28gdXNlIHRoYXQgaWYgYXZhaWxhYmxlXG5cblxuICAgIGxldCBhY3RpdmVTdWJtaXNzaW9uID0gc3VibWlzc2lvbiA/IHN1Ym1pc3Npb24gOiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtTWV0aG9kICYmIGxvYWRpbmdOYXZpZ2F0aW9uLmZvcm1BY3Rpb24gJiYgbG9hZGluZ05hdmlnYXRpb24uZm9ybURhdGEgJiYgbG9hZGluZ05hdmlnYXRpb24uZm9ybUVuY1R5cGUgPyB7XG4gICAgICBmb3JtTWV0aG9kOiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbjogbG9hZGluZ05hdmlnYXRpb24uZm9ybUFjdGlvbixcbiAgICAgIGZvcm1EYXRhOiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtRGF0YSxcbiAgICAgIGZvcm1FbmNUeXBlOiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtRW5jVHlwZVxuICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IFttYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVyc10gPSBnZXRNYXRjaGVzVG9Mb2FkKGluaXQuaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIGFjdGl2ZVN1Ym1pc3Npb24sIGxvY2F0aW9uLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcywgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLCBmZXRjaExvYWRNYXRjaGVzLCByb3V0ZXNUb1VzZSwgaW5pdC5iYXNlbmFtZSwgcGVuZGluZ0FjdGlvbkRhdGEsIHBlbmRpbmdFcnJvcik7IC8vIENhbmNlbCBwZW5kaW5nIGRlZmVycmVkcyBmb3Igbm8tbG9uZ2VyLW1hdGNoZWQgcm91dGVzIG9yIHJvdXRlcyB3ZSdyZVxuICAgIC8vIGFib3V0IHRvIHJlbG9hZC4gIE5vdGUgdGhhdCBpZiB0aGlzIGlzIGFuIGFjdGlvbiByZWxvYWQgd2Ugd291bGQgaGF2ZVxuICAgIC8vIGFscmVhZHkgY2FuY2VsbGVkIGFsbCBwZW5kaW5nIGRlZmVycmVkcyBzbyB0aGlzIHdvdWxkIGJlIGEgbm8tb3BcblxuICAgIGNhbmNlbEFjdGl2ZURlZmVycmVkcyhyb3V0ZUlkID0+ICEobWF0Y2hlcyAmJiBtYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSkgfHwgbWF0Y2hlc1RvTG9hZCAmJiBtYXRjaGVzVG9Mb2FkLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSk7IC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1blxuXG4gICAgaWYgKG1hdGNoZXNUb0xvYWQubGVuZ3RoID09PSAwICYmIHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBfZXh0ZW5kcyh7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICAvLyBDb21taXQgcGVuZGluZyBlcnJvciBpZiB3ZSdyZSBzaG9ydCBjaXJjdWl0aW5nXG4gICAgICAgIGVycm9yczogcGVuZGluZ0Vycm9yIHx8IG51bGxcbiAgICAgIH0sIHBlbmRpbmdBY3Rpb25EYXRhID8ge1xuICAgICAgICBhY3Rpb25EYXRhOiBwZW5kaW5nQWN0aW9uRGF0YVxuICAgICAgfSA6IHt9KSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9IC8vIElmIHRoaXMgaXMgYW4gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb24sIHdlIHJlbWFpbiBpbiBvdXIgY3VycmVudCBpZGxlXG4gICAgLy8gc3RhdGUuICBJZiBub3QsIHdlIG5lZWQgdG8gc3dpdGNoIHRvIG91ciBsb2FkaW5nIHN0YXRlIGFuZCBsb2FkIGRhdGEsXG4gICAgLy8gcHJlc2VydmluZyBhbnkgbmV3IGFjdGlvbiBkYXRhIG9yIGV4aXN0aW5nIGFjdGlvbiBkYXRhIChpbiB0aGUgY2FzZSBvZlxuICAgIC8vIGEgcmV2YWxpZGF0aW9uIGludGVycnVwdGluZyBhbiBhY3Rpb25SZWxvYWQpXG5cblxuICAgIGlmICghaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQocmYua2V5KTtcbiAgICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSB7XG4gICAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICAgIGRhdGE6IGZldGNoZXIgJiYgZmV0Y2hlci5kYXRhLFxuICAgICAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHN0YXRlLmZldGNoZXJzLnNldChyZi5rZXksIHJldmFsaWRhdGluZ0ZldGNoZXIpO1xuICAgICAgfSk7XG4gICAgICBsZXQgYWN0aW9uRGF0YSA9IHBlbmRpbmdBY3Rpb25EYXRhIHx8IHN0YXRlLmFjdGlvbkRhdGE7XG4gICAgICB1cGRhdGVTdGF0ZShfZXh0ZW5kcyh7XG4gICAgICAgIG5hdmlnYXRpb246IGxvYWRpbmdOYXZpZ2F0aW9uXG4gICAgICB9LCBhY3Rpb25EYXRhID8gT2JqZWN0LmtleXMoYWN0aW9uRGF0YSkubGVuZ3RoID09PSAwID8ge1xuICAgICAgICBhY3Rpb25EYXRhOiBudWxsXG4gICAgICB9IDoge1xuICAgICAgICBhY3Rpb25EYXRhXG4gICAgICB9IDoge30sIHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA+IDAgPyB7XG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSA6IHt9KSk7XG4gICAgfVxuXG4gICAgcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IGZldGNoQ29udHJvbGxlcnMuc2V0KHJmLmtleSwgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyKSk7XG4gICAgbGV0IHtcbiAgICAgIHJlc3VsdHMsXG4gICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgZmV0Y2hlclJlc3VsdHNcbiAgICB9ID0gYXdhaXQgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKHN0YXRlLm1hdGNoZXMsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCByZXF1ZXN0KTtcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9IC8vIENsZWFuIHVwIF9hZnRlcl8gbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmIHdlIHNob3J0XG4gICAgLy8gY2lyY3VpdGVkIGJlY2F1c2UgZmV0Y2hDb250cm9sbGVycyB3b3VsZCBoYXZlIGJlZW4gYWJvcnRlZCBhbmRcbiAgICAvLyByZWFzc2lnbmVkIHRvIG5ldyBjb250cm9sbGVycyBmb3IgdGhlIG5leHQgbmF2aWdhdGlvblxuXG5cbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKHJmLmtleSkpOyAvLyBJZiBhbnkgbG9hZGVycyByZXR1cm5lZCBhIHJlZGlyZWN0IFJlc3BvbnNlLCBzdGFydCBhIG5ldyBSRVBMQUNFIG5hdmlnYXRpb25cblxuICAgIGxldCByZWRpcmVjdCA9IGZpbmRSZWRpcmVjdChyZXN1bHRzKTtcblxuICAgIGlmIChyZWRpcmVjdCkge1xuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0LCB7XG4gICAgICAgIHJlcGxhY2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfSAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuXG5cbiAgICBsZXQge1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0gPSBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgbG9hZGVyUmVzdWx0cywgcGVuZGluZ0Vycm9yLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcyk7IC8vIFdpcmUgdXAgc3Vic2NyaWJlcnMgdG8gdXBkYXRlIGxvYWRlckRhdGEgYXMgcHJvbWlzZXMgc2V0dGxlXG5cbiAgICBhY3RpdmVEZWZlcnJlZHMuZm9yRWFjaCgoZGVmZXJyZWREYXRhLCByb3V0ZUlkKSA9PiB7XG4gICAgICBkZWZlcnJlZERhdGEuc3Vic2NyaWJlKGFib3J0ZWQgPT4ge1xuICAgICAgICAvLyBOb3RlOiBObyBuZWVkIHRvIHVwZGF0ZVN0YXRlIGhlcmUgc2luY2UgdGhlIFRyYWNrZWRQcm9taXNlIG9uXG4gICAgICAgIC8vIGxvYWRlckRhdGEgaXMgc3RhYmxlIGFjcm9zcyByZXNvbHZlL3JlamVjdFxuICAgICAgICAvLyBSZW1vdmUgdGhpcyBpbnN0YW5jZSBpZiB3ZSB3ZXJlIGFib3J0ZWQgb3IgaWYgcHJvbWlzZXMgaGF2ZSBzZXR0bGVkXG4gICAgICAgIGlmIChhYm9ydGVkIHx8IGRlZmVycmVkRGF0YS5kb25lKSB7XG4gICAgICAgICAgYWN0aXZlRGVmZXJyZWRzLmRlbGV0ZShyb3V0ZUlkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpO1xuICAgIGxldCBkaWRBYm9ydEZldGNoTG9hZHMgPSBhYm9ydFN0YWxlRmV0Y2hMb2FkcyhwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9LCBkaWRBYm9ydEZldGNoTG9hZHMgfHwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID4gMCA/IHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0gOiB7fSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRGZXRjaGVyKGtleSkge1xuICAgIHJldHVybiBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KSB8fCBJRExFX0ZFVENIRVI7XG4gIH0gLy8gVHJpZ2dlciBhIGZldGNoZXIgbG9hZC9zdWJtaXQgZm9yIHRoZSBnaXZlbiBmZXRjaGVyIGtleVxuXG5cbiAgZnVuY3Rpb24gZmV0Y2goa2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKSB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyb3V0ZXIuZmV0Y2goKSB3YXMgY2FsbGVkIGR1cmluZyB0aGUgc2VydmVyIHJlbmRlciwgYnV0IGl0IHNob3VsZG4ndCBiZS4gXCIgKyBcIllvdSBhcmUgbGlrZWx5IGNhbGxpbmcgYSB1c2VGZXRjaGVyKCkgbWV0aG9kIGluIHRoZSBib2R5IG9mIHlvdXIgY29tcG9uZW50LiBcIiArIFwiVHJ5IG1vdmluZyBpdCB0byBhIHVzZUVmZmVjdCBvciBhIGNhbGxiYWNrLlwiKTtcbiAgICB9XG5cbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSkgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgaHJlZiwgaW5pdC5iYXNlbmFtZSk7XG5cbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBocmVmXG4gICAgICB9KSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uXG4gICAgfSA9IG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyhocmVmLCBvcHRzLCB0cnVlKTtcbiAgICBsZXQgbWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBwYXRoKTtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gKG9wdHMgJiYgb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQpID09PSB0cnVlO1xuXG4gICAgaWYgKHN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICBoYW5kbGVGZXRjaGVyQWN0aW9uKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIHN1Ym1pc3Npb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gU3RvcmUgb2ZmIHRoZSBtYXRjaCBzbyB3ZSBjYW4gY2FsbCBpdCdzIHNob3VsZFJldmFsaWRhdGUgb24gc3Vic2VxdWVudFxuICAgIC8vIHJldmFsaWRhdGlvbnNcblxuXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5zZXQoa2V5LCB7XG4gICAgICByb3V0ZUlkLFxuICAgICAgcGF0aFxuICAgIH0pO1xuICAgIGhhbmRsZUZldGNoZXJMb2FkZXIoa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgc3VibWlzc2lvbik7XG4gIH0gLy8gQ2FsbCB0aGUgYWN0aW9uIGZvciB0aGUgbWF0Y2hlZCBmZXRjaGVyLnN1Ym1pdCgpLCBhbmQgdGhlbiBoYW5kbGUgcmVkaXJlY3RzLFxuICAvLyBlcnJvcnMsIGFuZCByZXZhbGlkYXRpb25cblxuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUZldGNoZXJBY3Rpb24oa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgcmVxdWVzdE1hdGNoZXMsIHN1Ym1pc3Npb24pIHtcbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuICAgIGZldGNoTG9hZE1hdGNoZXMuZGVsZXRlKGtleSk7XG5cbiAgICBpZiAoIW1hdGNoLnJvdXRlLmFjdGlvbikge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBwYXRoLFxuICAgICAgICByb3V0ZUlkOiByb3V0ZUlkXG4gICAgICB9KTtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFB1dCB0aGlzIGZldGNoZXIgaW50byBpdCdzIHN1Ym1pdHRpbmcgc3RhdGVcblxuXG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuXG4gICAgbGV0IGZldGNoZXIgPSBfZXh0ZW5kcyh7XG4gICAgICBzdGF0ZTogXCJzdWJtaXR0aW5nXCJcbiAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICBkYXRhOiBleGlzdGluZ0ZldGNoZXIgJiYgZXhpc3RpbmdGZXRjaGVyLmRhdGEsXG4gICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgIH0pO1xuXG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7IC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIGZldGNoZXJcblxuICAgIGxldCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IGZldGNoUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgcGF0aCwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCwgc3VibWlzc2lvbik7XG4gICAgZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBhYm9ydENvbnRyb2xsZXIpO1xuICAgIGxldCBhY3Rpb25SZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgZmV0Y2hSZXF1ZXN0LCBtYXRjaCwgcmVxdWVzdE1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSk7XG5cbiAgICBpZiAoZmV0Y2hSZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAvLyBXZSBjYW4gZGVsZXRlIHRoaXMgc28gbG9uZyBhcyB3ZSB3ZXJlbid0IGFib3J0ZWQgYnkgb3Ugb3VyIG93biBmZXRjaGVyXG4gICAgICAvLyByZS1zdWJtaXQgd2hpY2ggd291bGQgaGF2ZSBwdXQgX25ld18gY29udHJvbGxlciBpcyBpbiBmZXRjaENvbnRyb2xsZXJzXG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoa2V5KTtcblxuICAgICAgbGV0IGxvYWRpbmdGZXRjaGVyID0gX2V4dGVuZHMoe1xuICAgICAgICBzdGF0ZTogXCJsb2FkaW5nXCJcbiAgICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgICAgZGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGxvYWRpbmdGZXRjaGVyKTtcbiAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgYWN0aW9uUmVzdWx0LCB7XG4gICAgICAgIGlzRmV0Y2hBY3Rpb25SZWRpcmVjdDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSAvLyBQcm9jZXNzIGFueSBub24tcmVkaXJlY3QgZXJyb3JzIHRocm93blxuXG5cbiAgICBpZiAoaXNFcnJvclJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBhY3Rpb25SZXN1bHQuZXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIHR5cGU6IFwiZGVmZXItYWN0aW9uXCJcbiAgICAgIH0pO1xuICAgIH0gLy8gU3RhcnQgdGhlIGRhdGEgbG9hZCBmb3IgY3VycmVudCBtYXRjaGVzLCBvciB0aGUgbmV4dCBsb2NhdGlvbiBpZiB3ZSdyZVxuICAgIC8vIGluIHRoZSBtaWRkbGUgb2YgYSBuYXZpZ2F0aW9uXG5cblxuICAgIGxldCBuZXh0TG9jYXRpb24gPSBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uIHx8IHN0YXRlLmxvY2F0aW9uO1xuICAgIGxldCByZXZhbGlkYXRpb25SZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBuZXh0TG9jYXRpb24sIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBtYXRjaGVzID0gc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSAhPT0gXCJpZGxlXCIgPyBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwgaW5pdC5iYXNlbmFtZSkgOiBzdGF0ZS5tYXRjaGVzO1xuICAgIGludmFyaWFudChtYXRjaGVzLCBcIkRpZG4ndCBmaW5kIGFueSBtYXRjaGVzIGFmdGVyIGZldGNoZXIgYWN0aW9uXCIpO1xuICAgIGxldCBsb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcbiAgICBmZXRjaFJlbG9hZElkcy5zZXQoa2V5LCBsb2FkSWQpO1xuXG4gICAgbGV0IGxvYWRGZXRjaGVyID0gX2V4dGVuZHMoe1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgZGF0YTogYWN0aW9uUmVzdWx0LmRhdGFcbiAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgIH0pO1xuXG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgbG9hZEZldGNoZXIpO1xuICAgIGxldCBbbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdID0gZ2V0TWF0Y2hlc1RvTG9hZChpbml0Lmhpc3RvcnksIHN0YXRlLCBtYXRjaGVzLCBzdWJtaXNzaW9uLCBuZXh0TG9jYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGZldGNoTG9hZE1hdGNoZXMsIHJvdXRlc1RvVXNlLCBpbml0LmJhc2VuYW1lLCB7XG4gICAgICBbbWF0Y2gucm91dGUuaWRdOiBhY3Rpb25SZXN1bHQuZGF0YVxuICAgIH0sIHVuZGVmaW5lZCAvLyBObyBuZWVkIHRvIHNlbmQgdGhyb3VnaCBlcnJvcnMgc2luY2Ugd2Ugc2hvcnQgY2lyY3VpdCBhYm92ZVxuICAgICk7IC8vIFB1dCBhbGwgcmV2YWxpZGF0aW5nIGZldGNoZXJzIGludG8gdGhlIGxvYWRpbmcgc3RhdGUsIGV4Y2VwdCBmb3IgdGhlXG4gICAgLy8gY3VycmVudCBmZXRjaGVyIHdoaWNoIHdlIHdhbnQgdG8ga2VlcCBpbiBpdCdzIGN1cnJlbnQgbG9hZGluZyBzdGF0ZSB3aGljaFxuICAgIC8vIGNvbnRhaW5zIGl0J3MgYWN0aW9uIHN1Ym1pc3Npb24gaW5mbyArIGFjdGlvbiBkYXRhXG5cbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5maWx0ZXIocmYgPT4gcmYua2V5ICE9PSBrZXkpLmZvckVhY2gocmYgPT4ge1xuICAgICAgbGV0IHN0YWxlS2V5ID0gcmYua2V5O1xuICAgICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChzdGFsZUtleSk7XG4gICAgICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlciA9IHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICBkYXRhOiBleGlzdGluZ0ZldGNoZXIgJiYgZXhpc3RpbmdGZXRjaGVyLmRhdGEsXG4gICAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChzdGFsZUtleSwgcmV2YWxpZGF0aW5nRmV0Y2hlcik7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLnNldChzdGFsZUtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICB9KTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgICBsZXQge1xuICAgICAgcmVzdWx0cyxcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH0gPSBhd2FpdCBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoc3RhdGUubWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIHJldmFsaWRhdGlvblJlcXVlc3QpO1xuXG4gICAgaWYgKGFib3J0Q29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyID0+IGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKHIua2V5KSk7XG4gICAgbGV0IHJlZGlyZWN0ID0gZmluZFJlZGlyZWN0KHJlc3VsdHMpO1xuXG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICByZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0KTtcbiAgICB9IC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG5cblxuICAgIGxldCB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBzdGF0ZS5tYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCB1bmRlZmluZWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKTtcbiAgICBsZXQgZG9uZUZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJpZGxlXCIsXG4gICAgICBkYXRhOiBhY3Rpb25SZXN1bHQuZGF0YSxcbiAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgXCIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgXCI6IHRydWVcbiAgICB9O1xuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICBsZXQgZGlkQWJvcnRGZXRjaExvYWRzID0gYWJvcnRTdGFsZUZldGNoTG9hZHMobG9hZElkKTsgLy8gSWYgd2UgYXJlIGN1cnJlbnRseSBpbiBhIG5hdmlnYXRpb24gbG9hZGluZyBzdGF0ZSBhbmQgdGhpcyBmZXRjaGVyIGlzXG4gICAgLy8gbW9yZSByZWNlbnQgdGhhbiB0aGUgbmF2aWdhdGlvbiwgd2Ugd2FudCB0aGUgbmV3ZXIgZGF0YSBzbyBhYm9ydCB0aGVcbiAgICAvLyBuYXZpZ2F0aW9uIGFuZCBjb21wbGV0ZSBpdCB3aXRoIHRoZSBmZXRjaGVyIGRhdGFcblxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJiBsb2FkSWQgPiBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCkge1xuICAgICAgaW52YXJpYW50KHBlbmRpbmdBY3Rpb24sIFwiRXhwZWN0ZWQgcGVuZGluZyBhY3Rpb25cIik7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24oc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhLFxuICAgICAgICBlcnJvcnMsXG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG90aGVyd2lzZSBqdXN0IHVwZGF0ZSB3aXRoIHRoZSBmZXRjaGVyIGRhdGEsIHByZXNlcnZpbmcgYW55IGV4aXN0aW5nXG4gICAgICAvLyBsb2FkZXJEYXRhIGZvciBsb2FkZXJzIHRoYXQgZGlkIG5vdCBuZWVkIHRvIHJlbG9hZC4gIFdlIGhhdmUgdG9cbiAgICAgIC8vIG1hbnVhbGx5IG1lcmdlIGhlcmUgc2luY2Ugd2UgYXJlbid0IGdvaW5nIHRocm91Z2ggY29tcGxldGVOYXZpZ2F0aW9uXG4gICAgICB1cGRhdGVTdGF0ZShfZXh0ZW5kcyh7XG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgbG9hZGVyRGF0YTogbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIGxvYWRlckRhdGEsIG1hdGNoZXMsIGVycm9ycylcbiAgICAgIH0sIGRpZEFib3J0RmV0Y2hMb2FkcyA/IHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9IDoge30pKTtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH0gLy8gQ2FsbCB0aGUgbWF0Y2hlZCBsb2FkZXIgZm9yIGZldGNoZXIubG9hZCgpLCBoYW5kbGluZyByZWRpcmVjdHMsIGVycm9ycywgZXRjLlxuXG5cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlRmV0Y2hlckxvYWRlcihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzLCBzdWJtaXNzaW9uKSB7XG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpOyAvLyBQdXQgdGhpcyBmZXRjaGVyIGludG8gaXQncyBsb2FkaW5nIHN0YXRlXG5cbiAgICBsZXQgbG9hZGluZ0ZldGNoZXIgPSBfZXh0ZW5kcyh7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZFxuICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgIGRhdGE6IGV4aXN0aW5nRmV0Y2hlciAmJiBleGlzdGluZ0ZldGNoZXIuZGF0YSxcbiAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlXG4gICAgfSk7XG5cbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkaW5nRmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7IC8vIENhbGwgdGhlIGxvYWRlciBmb3IgdGhpcyBmZXRjaGVyIHJvdXRlIG1hdGNoXG5cbiAgICBsZXQgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBmZXRjaFJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIHBhdGgsIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KGtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFwibG9hZGVyXCIsIGZldGNoUmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSk7IC8vIERlZmVycmVkIGlzbid0IHN1cHBvcnRlZCBmb3IgZmV0Y2hlciBsb2FkcywgYXdhaXQgZXZlcnl0aGluZyBhbmQgdHJlYXQgaXRcbiAgICAvLyBhcyBhIG5vcm1hbCBsb2FkLiAgcmVzb2x2ZURlZmVycmVkRGF0YSB3aWxsIHJldHVybiB1bmRlZmluZWQgaWYgdGhpc1xuICAgIC8vIGZldGNoZXIgZ2V0cyBhYm9ydGVkLCBzbyB3ZSBqdXN0IGxlYXZlIHJlc3VsdCB1bnRvdWNoZWQgYW5kIHNob3J0IGNpcmN1aXRcbiAgICAvLyBiZWxvdyBpZiB0aGF0IGhhcHBlbnNcblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdCA9IChhd2FpdCByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgZmV0Y2hSZXF1ZXN0LnNpZ25hbCwgdHJ1ZSkpIHx8IHJlc3VsdDtcbiAgICB9IC8vIFdlIGNhbiBkZWxldGUgdGhpcyBzbyBsb25nIGFzIHdlIHdlcmVuJ3QgYWJvcnRlZCBieSBvdSBvdXIgb3duIGZldGNoZXJcbiAgICAvLyByZS1sb2FkIHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuXG5cbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIH1cblxuICAgIGlmIChmZXRjaFJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElmIHRoZSBsb2FkZXIgdGhyZXcgYSByZWRpcmVjdCBSZXNwb25zZSwgc3RhcnQgYSBuZXcgUkVQTEFDRSBuYXZpZ2F0aW9uXG5cblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZXN1bHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gUHJvY2VzcyBhbnkgbm9uLXJlZGlyZWN0IGVycm9ycyB0aHJvd25cblxuXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KHN0YXRlLm1hdGNoZXMsIHJvdXRlSWQpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7IC8vIFRPRE86IEluIHJlbWl4LCB0aGlzIHdvdWxkIHJlc2V0IHRvIElETEVfTkFWSUdBVElPTiBpZiBpdCB3YXMgYSBjYXRjaCAtXG4gICAgICAvLyBkbyB3ZSBuZWVkIHRvIGJlaGF2ZSBhbnkgZGlmZmVyZW50bHkgd2l0aCBvdXIgbm9uLXJlZGlyZWN0IGVycm9ycz9cbiAgICAgIC8vIFdoYXQgaWYgaXQgd2FzIGEgbm9uLXJlZGlyZWN0IFJlc3BvbnNlP1xuXG4gICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKSxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW52YXJpYW50KCFpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCksIFwiVW5oYW5kbGVkIGZldGNoZXIgZGVmZXJyZWQgZGF0YVwiKTsgLy8gUHV0IHRoZSBmZXRjaGVyIGJhY2sgaW50byBhbiBpZGxlIHN0YXRlXG5cbiAgICBsZXQgZG9uZUZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJpZGxlXCIsXG4gICAgICBkYXRhOiByZXN1bHQuZGF0YSxcbiAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgXCIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgXCI6IHRydWVcbiAgICB9O1xuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVXRpbGl0eSBmdW5jdGlvbiB0byBoYW5kbGUgcmVkaXJlY3RzIHJldHVybmVkIGZyb20gYW4gYWN0aW9uIG9yIGxvYWRlci5cbiAgICogTm9ybWFsbHksIGEgcmVkaXJlY3QgXCJyZXBsYWNlc1wiIHRoZSBuYXZpZ2F0aW9uIHRoYXQgdHJpZ2dlcmVkIGl0LiAgU28sIGZvclxuICAgKiBleGFtcGxlOlxuICAgKlxuICAgKiAgLSB1c2VyIGlzIG9uIC9hXG4gICAqICAtIHVzZXIgY2xpY2tzIGEgbGluayB0byAvYlxuICAgKiAgLSBsb2FkZXIgZm9yIC9iIHJlZGlyZWN0cyB0byAvY1xuICAgKlxuICAgKiBJbiBhIG5vbi1KUyBhcHAgdGhlIGJyb3dzZXIgd291bGQgdHJhY2sgdGhlIGluLWZsaWdodCBuYXZpZ2F0aW9uIHRvIC9iIGFuZFxuICAgKiB0aGVuIHJlcGxhY2UgaXQgd2l0aCAvYyB3aGVuIGl0IGVuY291bnRlcmVkIHRoZSByZWRpcmVjdCByZXNwb25zZS4gIEluXG4gICAqIHRoZSBlbmQgaXQgd291bGQgb25seSBldmVyIHVwZGF0ZSB0aGUgVVJMIGJhciB3aXRoIC9jLlxuICAgKlxuICAgKiBJbiBjbGllbnQtc2lkZSByb3V0aW5nIHVzaW5nIHB1c2hTdGF0ZS9yZXBsYWNlU3RhdGUsIHdlIGFpbSB0byBlbXVsYXRlXG4gICAqIHRoaXMgYmVoYXZpb3IgYW5kIHdlIGFsc28gZG8gbm90IHVwZGF0ZSBoaXN0b3J5IHVudGlsIHRoZSBlbmQgb2YgdGhlXG4gICAqIG5hdmlnYXRpb24gKGluY2x1ZGluZyBwcm9jZXNzZWQgcmVkaXJlY3RzKS4gIFRoaXMgbWVhbnMgdGhhdCB3ZSBuZXZlclxuICAgKiBhY3R1YWxseSB0b3VjaCBoaXN0b3J5IHVudGlsIHdlJ3ZlIHByb2Nlc3NlZCByZWRpcmVjdHMsIHNvIHdlIGp1c3QgdXNlXG4gICAqIHRoZSBoaXN0b3J5IGFjdGlvbiBmcm9tIHRoZSBvcmlnaW5hbCBuYXZpZ2F0aW9uIChQVVNIIG9yIFJFUExBQ0UpLlxuICAgKi9cblxuXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZWRpcmVjdCwgX3RlbXApIHtcbiAgICB2YXIgX3dpbmRvdztcblxuICAgIGxldCB7XG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgcmVwbGFjZSxcbiAgICAgIGlzRmV0Y2hBY3Rpb25SZWRpcmVjdFxuICAgIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcblxuICAgIGlmIChyZWRpcmVjdC5yZXZhbGlkYXRlKSB7XG4gICAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgcmVkaXJlY3RMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHN0YXRlLmxvY2F0aW9uLCByZWRpcmVjdC5sb2NhdGlvbiwgLy8gVE9ETzogVGhpcyBjYW4gYmUgcmVtb3ZlZCBvbmNlIHdlIGdldCByaWQgb2YgdXNlVHJhbnNpdGlvbiBpbiBSZW1peCB2MlxuICAgIF9leHRlbmRzKHtcbiAgICAgIF9pc1JlZGlyZWN0OiB0cnVlXG4gICAgfSwgaXNGZXRjaEFjdGlvblJlZGlyZWN0ID8ge1xuICAgICAgX2lzRmV0Y2hBY3Rpb25SZWRpcmVjdDogdHJ1ZVxuICAgIH0gOiB7fSkpO1xuICAgIGludmFyaWFudChyZWRpcmVjdExvY2F0aW9uLCBcIkV4cGVjdGVkIGEgbG9jYXRpb24gb24gdGhlIHJlZGlyZWN0IG5hdmlnYXRpb25cIik7IC8vIENoZWNrIGlmIHRoaXMgYW4gYWJzb2x1dGUgZXh0ZXJuYWwgcmVkaXJlY3QgdGhhdCBnb2VzIHRvIGEgbmV3IG9yaWdpblxuXG4gICAgaWYgKEFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KHJlZGlyZWN0LmxvY2F0aW9uKSAmJiBpc0Jyb3dzZXIgJiYgdHlwZW9mICgoX3dpbmRvdyA9IHdpbmRvdykgPT0gbnVsbCA/IHZvaWQgMCA6IF93aW5kb3cubG9jYXRpb24pICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBsZXQgdXJsID0gaW5pdC5oaXN0b3J5LmNyZWF0ZVVSTChyZWRpcmVjdC5sb2NhdGlvbik7XG4gICAgICBsZXQgaXNEaWZmZXJlbnRCYXNlbmFtZSA9IHN0cmlwQmFzZW5hbWUodXJsLnBhdGhuYW1lLCBpbml0LmJhc2VuYW1lIHx8IFwiL1wiKSA9PSBudWxsO1xuXG4gICAgICBpZiAod2luZG93LmxvY2F0aW9uLm9yaWdpbiAhPT0gdXJsLm9yaWdpbiB8fCBpc0RpZmZlcmVudEJhc2VuYW1lKSB7XG4gICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UocmVkaXJlY3QubG9jYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24ocmVkaXJlY3QubG9jYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gLy8gVGhlcmUncyBubyBuZWVkIHRvIGFib3J0IG9uIHJlZGlyZWN0cywgc2luY2Ugd2UgZG9uJ3QgZGV0ZWN0IHRoZVxuICAgIC8vIHJlZGlyZWN0IHVudGlsIHRoZSBhY3Rpb24vbG9hZGVycyBoYXZlIHNldHRsZWRcblxuXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICBsZXQgcmVkaXJlY3RIaXN0b3J5QWN0aW9uID0gcmVwbGFjZSA9PT0gdHJ1ZSA/IEFjdGlvbi5SZXBsYWNlIDogQWN0aW9uLlB1c2g7IC8vIFVzZSB0aGUgaW5jb21pbmcgc3VibWlzc2lvbiBpZiBwcm92aWRlZCwgZmFsbGJhY2sgb24gdGhlIGFjdGl2ZSBvbmUgaW5cbiAgICAvLyBzdGF0ZS5uYXZpZ2F0aW9uXG5cbiAgICBsZXQge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhXG4gICAgfSA9IHN0YXRlLm5hdmlnYXRpb247XG5cbiAgICBpZiAoIXN1Ym1pc3Npb24gJiYgZm9ybU1ldGhvZCAmJiBmb3JtQWN0aW9uICYmIGZvcm1EYXRhICYmIGZvcm1FbmNUeXBlKSB7XG4gICAgICBzdWJtaXNzaW9uID0ge1xuICAgICAgICBmb3JtTWV0aG9kLFxuICAgICAgICBmb3JtQWN0aW9uLFxuICAgICAgICBmb3JtRW5jVHlwZSxcbiAgICAgICAgZm9ybURhdGFcbiAgICAgIH07XG4gICAgfSAvLyBJZiB0aGlzIHdhcyBhIDMwNy8zMDggc3VibWlzc2lvbiB3ZSB3YW50IHRvIHByZXNlcnZlIHRoZSBIVFRQIG1ldGhvZCBhbmRcbiAgICAvLyByZS1zdWJtaXQgdGhlIEdFVC9QT1NUL1BVVC9QQVRDSC9ERUxFVEUgYXMgYSBzdWJtaXNzaW9uIG5hdmlnYXRpb24gdG8gdGhlXG4gICAgLy8gcmVkaXJlY3RlZCBsb2NhdGlvblxuXG5cbiAgICBpZiAocmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzLmhhcyhyZWRpcmVjdC5zdGF0dXMpICYmIHN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIHN1Ym1pc3Npb246IF9leHRlbmRzKHt9LCBzdWJtaXNzaW9uLCB7XG4gICAgICAgICAgZm9ybUFjdGlvbjogcmVkaXJlY3QubG9jYXRpb25cbiAgICAgICAgfSksXG4gICAgICAgIC8vIFByZXNlcnZlIHRoaXMgZmxhZyBhY3Jvc3MgcmVkaXJlY3RzXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSwgd2Uga2ljayBvZmYgYSBuZXcgbG9hZGluZyBuYXZpZ2F0aW9uLCBwcmVzZXJ2aW5nIHRoZVxuICAgICAgLy8gc3VibWlzc2lvbiBpbmZvIGZvciB0aGUgZHVyYXRpb24gb2YgdGhpcyBuYXZpZ2F0aW9uXG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbjoge1xuICAgICAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgICAgICBsb2NhdGlvbjogcmVkaXJlY3RMb2NhdGlvbixcbiAgICAgICAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uID8gc3VibWlzc2lvbi5mb3JtTWV0aG9kIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24gPyBzdWJtaXNzaW9uLmZvcm1BY3Rpb24gOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24gPyBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uID8gc3VibWlzc2lvbi5mb3JtRGF0YSA6IHVuZGVmaW5lZFxuICAgICAgICB9LFxuICAgICAgICAvLyBQcmVzZXJ2ZSB0aGlzIGZsYWcgYWNyb3NzIHJlZGlyZWN0c1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YShjdXJyZW50TWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgZmV0Y2hlcnNUb0xvYWQsIHJlcXVlc3QpIHtcbiAgICAvLyBDYWxsIGFsbCBuYXZpZ2F0aW9uIGxvYWRlcnMgYW5kIHJldmFsaWRhdGluZyBmZXRjaGVyIGxvYWRlcnMgaW4gcGFyYWxsZWwsXG4gICAgLy8gdGhlbiBzbGljZSBvZmYgdGhlIHJlc3VsdHMgaW50byBzZXBhcmF0ZSBhcnJheXMgc28gd2UgY2FuIGhhbmRsZSB0aGVtXG4gICAgLy8gYWNjb3JkaW5nbHlcbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFsuLi5tYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgcmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSkpLCAuLi5mZXRjaGVyc1RvTG9hZC5tYXAoZiA9PiB7XG4gICAgICBpZiAoZi5tYXRjaGVzICYmIGYubWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIGYucGF0aCwgcmVxdWVzdC5zaWduYWwpLCBmLm1hdGNoLCBmLm1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgZXJyb3IgPSB7XG4gICAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgICAgIHBhdGhuYW1lOiBmLnBhdGhcbiAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICB9XG4gICAgfSldKTtcbiAgICBsZXQgbG9hZGVyUmVzdWx0cyA9IHJlc3VsdHMuc2xpY2UoMCwgbWF0Y2hlc1RvTG9hZC5sZW5ndGgpO1xuICAgIGxldCBmZXRjaGVyUmVzdWx0cyA9IHJlc3VsdHMuc2xpY2UobWF0Y2hlc1RvTG9hZC5sZW5ndGgpO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFtyZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCByZXF1ZXN0LnNpZ25hbCwgZmFsc2UsIHN0YXRlLmxvYWRlckRhdGEpLCByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBmZXRjaGVyc1RvTG9hZC5tYXAoZiA9PiBmLm1hdGNoKSwgZmV0Y2hlclJlc3VsdHMsIHJlcXVlc3Quc2lnbmFsLCB0cnVlKV0pO1xuICAgIHJldHVybiB7XG4gICAgICByZXN1bHRzLFxuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycnVwdEFjdGl2ZUxvYWRzKCkge1xuICAgIC8vIEV2ZXJ5IGludGVycnVwdGlvbiB0cmlnZ2VycyBhIHJldmFsaWRhdGlvblxuICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSB0cnVlOyAvLyBDYW5jZWwgcGVuZGluZyByb3V0ZS1sZXZlbCBkZWZlcnJlZHMgYW5kIG1hcmsgY2FuY2VsbGVkIHJvdXRlcyBmb3JcbiAgICAvLyByZXZhbGlkYXRpb25cblxuICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLnB1c2goLi4uY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCkpOyAvLyBBYm9ydCBpbi1mbGlnaHQgZmV0Y2hlciBsb2Fkc1xuXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChfLCBrZXkpID0+IHtcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSB7XG4gICAgICAgIGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5wdXNoKGtleSk7XG4gICAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZXJyb3IpIHtcbiAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgcm91dGVJZCk7XG4gICAgZGVsZXRlRmV0Y2hlcihrZXkpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGVycm9yczoge1xuICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IGVycm9yXG4gICAgICB9LFxuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWxldGVGZXRjaGVyKGtleSkge1xuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICBmZXRjaExvYWRNYXRjaGVzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoUmVkaXJlY3RJZHMuZGVsZXRlKGtleSk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBhYm9ydEZldGNoZXIoa2V5KSB7XG4gICAgbGV0IGNvbnRyb2xsZXIgPSBmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpO1xuICAgIGludmFyaWFudChjb250cm9sbGVyLCBcIkV4cGVjdGVkIGZldGNoIGNvbnRyb2xsZXI6IFwiICsga2V5KTtcbiAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcmtGZXRjaGVyc0RvbmUoa2V5cykge1xuICAgIGZvciAobGV0IGtleSBvZiBrZXlzKSB7XG4gICAgICBsZXQgZmV0Y2hlciA9IGdldEZldGNoZXIoa2V5KTtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IHtcbiAgICAgICAgc3RhdGU6IFwiaWRsZVwiLFxuICAgICAgICBkYXRhOiBmZXRjaGVyLmRhdGEsXG4gICAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtYXJrRmV0Y2hSZWRpcmVjdHNEb25lKCkge1xuICAgIGxldCBkb25lS2V5cyA9IFtdO1xuXG4gICAgZm9yIChsZXQga2V5IG9mIGZldGNoUmVkaXJlY3RJZHMpIHtcbiAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICBpbnZhcmlhbnQoZmV0Y2hlciwgXCJFeHBlY3RlZCBmZXRjaGVyOiBcIiArIGtleSk7XG5cbiAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSBcImxvYWRpbmdcIikge1xuICAgICAgICBmZXRjaFJlZGlyZWN0SWRzLmRlbGV0ZShrZXkpO1xuICAgICAgICBkb25lS2V5cy5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWFya0ZldGNoZXJzRG9uZShkb25lS2V5cyk7XG4gIH1cblxuICBmdW5jdGlvbiBhYm9ydFN0YWxlRmV0Y2hMb2FkcyhsYW5kZWRJZCkge1xuICAgIGxldCB5ZWV0ZWRLZXlzID0gW107XG5cbiAgICBmb3IgKGxldCBba2V5LCBpZF0gb2YgZmV0Y2hSZWxvYWRJZHMpIHtcbiAgICAgIGlmIChpZCA8IGxhbmRlZElkKSB7XG4gICAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICAgIGludmFyaWFudChmZXRjaGVyLCBcIkV4cGVjdGVkIGZldGNoZXI6IFwiICsga2V5KTtcblxuICAgICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICAgICAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICB5ZWV0ZWRLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIG1hcmtGZXRjaGVyc0RvbmUoeWVldGVkS2V5cyk7XG4gICAgcmV0dXJuIHllZXRlZEtleXMubGVuZ3RoID4gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEJsb2NrZXIoa2V5LCBmbikge1xuICAgIGxldCBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGtleSkgfHwgSURMRV9CTE9DS0VSO1xuXG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbnMuZ2V0KGtleSkgIT09IGZuKSB7XG4gICAgICBibG9ja2VyRnVuY3Rpb25zLnNldChrZXksIGZuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmxvY2tlcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGV0ZUJsb2NrZXIoa2V5KSB7XG4gICAgc3RhdGUuYmxvY2tlcnMuZGVsZXRlKGtleSk7XG4gICAgYmxvY2tlckZ1bmN0aW9ucy5kZWxldGUoa2V5KTtcbiAgfSAvLyBVdGlsaXR5IGZ1bmN0aW9uIHRvIHVwZGF0ZSBibG9ja2VycywgZW5zdXJpbmcgdmFsaWQgc3RhdGUgdHJhbnNpdGlvbnNcblxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUJsb2NrZXIoa2V5LCBuZXdCbG9ja2VyKSB7XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoa2V5KSB8fCBJRExFX0JMT0NLRVI7IC8vIFBvb3IgbWFucyBzdGF0ZSBtYWNoaW5lIDopXG4gICAgLy8gaHR0cHM6Ly9tZXJtYWlkLmxpdmUvZWRpdCNwYWtvOmVOcVZrYzlPd3pBTXhsOGw4bm5qQVlyRXRESU9IRUJJZ3d2S0pUUmVHeTNfbERwSXFPMjdrNmF3TUcwWGNyTGxuejg3bndkb25FU29nS1hYQnVFNzlycTc1WFpPMy15SGRzMFJKVnV2NzBZclBsVXJDRWUySGZyT1JTM3J1YnFaZnVodHBnNUM5d2s1dFo0VktjUlVxODhxOVo4UlMwLTQ4Y0UxaUhKa0wwdWdiSHVGTHVzOUw2c3BaeThuWDlNUDJDTmRvbVZhcG9zcXUzZkdheVQ4VDgtakpRd2hlcG9fVXRwZ0JRYURFVW9tMDRkWmhBTjFhSkJEbFVLSkJ4RTFjZUIyU21qME1sbi1JQlc1QUZVMmR3VWlrdHRfMlFhcTJkQmZhS2RFdXA4NVVWN1lkLWRLamxua2FibDJQdnIwRFRrVHJlTVxuXG4gICAgaW52YXJpYW50KGJsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiLCBcIkludmFsaWQgYmxvY2tlciBzdGF0ZSB0cmFuc2l0aW9uOiBcIiArIGJsb2NrZXIuc3RhdGUgKyBcIiAtPiBcIiArIG5ld0Jsb2NrZXIuc3RhdGUpO1xuICAgIHN0YXRlLmJsb2NrZXJzLnNldChrZXksIG5ld0Jsb2NrZXIpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGJsb2NrZXJzOiBuZXcgTWFwKHN0YXRlLmJsb2NrZXJzKVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkQmxvY2tOYXZpZ2F0aW9uKF9yZWYyKSB7XG4gICAgbGV0IHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbixcbiAgICAgIG5leHRMb2NhdGlvbixcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9ID0gX3JlZjI7XG5cbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBXZSBvbnkgc3VwcG9ydCBhIHNpbmdsZSBhY3RpdmUgYmxvY2tlciBhdCB0aGUgbW9tZW50IHNpbmNlIHdlIGRvbid0IGhhdmVcbiAgICAvLyBhbnkgY29tcGVsbGluZyB1c2UgY2FzZXMgZm9yIG11bHRpLWJsb2NrZXIgeWV0XG5cblxuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLnNpemUgPiAxKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIkEgcm91dGVyIG9ubHkgc3VwcG9ydHMgb25lIGJsb2NrZXIgYXQgYSB0aW1lXCIpO1xuICAgIH1cblxuICAgIGxldCBlbnRyaWVzID0gQXJyYXkuZnJvbShibG9ja2VyRnVuY3Rpb25zLmVudHJpZXMoKSk7XG4gICAgbGV0IFtibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb25dID0gZW50cmllc1tlbnRyaWVzLmxlbmd0aCAtIDFdO1xuICAgIGxldCBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGJsb2NrZXJLZXkpO1xuXG4gICAgaWYgKGJsb2NrZXIgJiYgYmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIpIHtcbiAgICAgIC8vIElmIHRoZSBibG9ja2VyIGlzIGN1cnJlbnRseSBwcm9jZWVkaW5nLCB3ZSBkb24ndCBuZWVkIHRvIHJlLWNoZWNrXG4gICAgICAvLyBpdCBhbmQgY2FuIGxldCB0aGlzIG5hdmlnYXRpb24gY29udGludWVcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEF0IHRoaXMgcG9pbnQsIHdlIGtub3cgd2UncmUgdW5ibG9ja2VkL2Jsb2NrZWQgc28gd2UgbmVlZCB0byBjaGVjayB0aGVcbiAgICAvLyB1c2VyLXByb3ZpZGVkIGJsb2NrZXIgZnVuY3Rpb25cblxuXG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbih7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSkpIHtcbiAgICAgIHJldHVybiBibG9ja2VyS2V5O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbEFjdGl2ZURlZmVycmVkcyhwcmVkaWNhdGUpIHtcbiAgICBsZXQgY2FuY2VsbGVkUm91dGVJZHMgPSBbXTtcbiAgICBhY3RpdmVEZWZlcnJlZHMuZm9yRWFjaCgoZGZkLCByb3V0ZUlkKSA9PiB7XG4gICAgICBpZiAoIXByZWRpY2F0ZSB8fCBwcmVkaWNhdGUocm91dGVJZCkpIHtcbiAgICAgICAgLy8gQ2FuY2VsIHRoZSBkZWZlcnJlZCAtIGJ1dCBkbyBub3QgcmVtb3ZlIGZyb20gYWN0aXZlRGVmZXJyZWRzIGhlcmUgLVxuICAgICAgICAvLyB3ZSByZWx5IG9uIHRoZSBzdWJzY3JpYmVycyB0byBkbyB0aGF0IHNvIG91ciB0ZXN0cyBjYW4gYXNzZXJ0IHByb3BlclxuICAgICAgICAvLyBjbGVhbnVwIHZpYSBfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHNcbiAgICAgICAgZGZkLmNhbmNlbCgpO1xuICAgICAgICBjYW5jZWxsZWRSb3V0ZUlkcy5wdXNoKHJvdXRlSWQpO1xuICAgICAgICBhY3RpdmVEZWZlcnJlZHMuZGVsZXRlKHJvdXRlSWQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjYW5jZWxsZWRSb3V0ZUlkcztcbiAgfSAvLyBPcHQgaW4gdG8gY2FwdHVyaW5nIGFuZCByZXBvcnRpbmcgc2Nyb2xsIHBvc2l0aW9ucyBkdXJpbmcgbmF2aWdhdGlvbnMsXG4gIC8vIHVzZWQgYnkgdGhlIDxTY3JvbGxSZXN0b3JhdGlvbj4gY29tcG9uZW50XG5cblxuICBmdW5jdGlvbiBlbmFibGVTY3JvbGxSZXN0b3JhdGlvbihwb3NpdGlvbnMsIGdldFBvc2l0aW9uLCBnZXRLZXkpIHtcbiAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IHBvc2l0aW9ucztcbiAgICBnZXRTY3JvbGxQb3NpdGlvbiA9IGdldFBvc2l0aW9uO1xuXG4gICAgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBnZXRLZXkgfHwgKGxvY2F0aW9uID0+IGxvY2F0aW9uLmtleSk7IC8vIFBlcmZvcm0gaW5pdGlhbCBoeWRyYXRpb24gc2Nyb2xsIHJlc3RvcmF0aW9uLCBzaW5jZSB3ZSBtaXNzIHRoZSBib2F0IG9uXG4gICAgLy8gdGhlIGluaXRpYWwgdXBkYXRlU3RhdGUoKSBiZWNhdXNlIHdlJ3ZlIG5vdCB5ZXQgcmVuZGVyZWQgPFNjcm9sbFJlc3RvcmF0aW9uLz5cbiAgICAvLyBhbmQgdGhlcmVmb3JlIGhhdmUgbm8gc2F2ZWRTY3JvbGxQb3NpdGlvbnMgYXZhaWxhYmxlXG5cblxuICAgIGlmICghaW5pdGlhbFNjcm9sbFJlc3RvcmVkICYmIHN0YXRlLm5hdmlnYXRpb24gPT09IElETEVfTkFWSUdBVElPTikge1xuICAgICAgaW5pdGlhbFNjcm9sbFJlc3RvcmVkID0gdHJ1ZTtcbiAgICAgIGxldCB5ID0gZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlcyk7XG5cbiAgICAgIGlmICh5ICE9IG51bGwpIHtcbiAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogeVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBudWxsO1xuICAgICAgZ2V0U2Nyb2xsUG9zaXRpb24gPSBudWxsO1xuICAgICAgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBudWxsO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzYXZlU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG1hdGNoZXMpIHtcbiAgICBpZiAoc2F2ZWRTY3JvbGxQb3NpdGlvbnMgJiYgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgJiYgZ2V0U2Nyb2xsUG9zaXRpb24pIHtcbiAgICAgIGxldCB1c2VyTWF0Y2hlcyA9IG1hdGNoZXMubWFwKG0gPT4gY3JlYXRlVXNlTWF0Y2hlc01hdGNoKG0sIHN0YXRlLmxvYWRlckRhdGEpKTtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxSZXN0b3JhdGlvbktleShsb2NhdGlvbiwgdXNlck1hdGNoZXMpIHx8IGxvY2F0aW9uLmtleTtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV0gPSBnZXRTY3JvbGxQb3NpdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNhdmVkU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG1hdGNoZXMpIHtcbiAgICBpZiAoc2F2ZWRTY3JvbGxQb3NpdGlvbnMgJiYgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgJiYgZ2V0U2Nyb2xsUG9zaXRpb24pIHtcbiAgICAgIGxldCB1c2VyTWF0Y2hlcyA9IG1hdGNoZXMubWFwKG0gPT4gY3JlYXRlVXNlTWF0Y2hlc01hdGNoKG0sIHN0YXRlLmxvYWRlckRhdGEpKTtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxSZXN0b3JhdGlvbktleShsb2NhdGlvbiwgdXNlck1hdGNoZXMpIHx8IGxvY2F0aW9uLmtleTtcbiAgICAgIGxldCB5ID0gc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XTtcblxuICAgICAgaWYgKHR5cGVvZiB5ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiB5O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ludGVybmFsU2V0Um91dGVzKG5ld1JvdXRlcykge1xuICAgIGluRmxpZ2h0RGF0YVJvdXRlcyA9IG5ld1JvdXRlcztcbiAgfVxuXG4gIHJvdXRlciA9IHtcbiAgICBnZXQgYmFzZW5hbWUoKSB7XG4gICAgICByZXR1cm4gaW5pdC5iYXNlbmFtZTtcbiAgICB9LFxuXG4gICAgZ2V0IHN0YXRlKCkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH0sXG5cbiAgICBnZXQgcm91dGVzKCkge1xuICAgICAgcmV0dXJuIGRhdGFSb3V0ZXM7XG4gICAgfSxcblxuICAgIGluaXRpYWxpemUsXG4gICAgc3Vic2NyaWJlLFxuICAgIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uLFxuICAgIG5hdmlnYXRlLFxuICAgIGZldGNoLFxuICAgIHJldmFsaWRhdGUsXG4gICAgLy8gUGFzc3Rocm91Z2ggdG8gaGlzdG9yeS1hd2FyZSBjcmVhdGVIcmVmIHVzZWQgYnkgdXNlSHJlZiBzbyB3ZSBnZXQgcHJvcGVyXG4gICAgLy8gaGFzaC1hd2FyZSBVUkxzIGluIERPTSBwYXRoc1xuICAgIGNyZWF0ZUhyZWY6IHRvID0+IGluaXQuaGlzdG9yeS5jcmVhdGVIcmVmKHRvKSxcbiAgICBlbmNvZGVMb2NhdGlvbjogdG8gPT4gaW5pdC5oaXN0b3J5LmVuY29kZUxvY2F0aW9uKHRvKSxcbiAgICBnZXRGZXRjaGVyLFxuICAgIGRlbGV0ZUZldGNoZXIsXG4gICAgZGlzcG9zZSxcbiAgICBnZXRCbG9ja2VyLFxuICAgIGRlbGV0ZUJsb2NrZXIsXG4gICAgX2ludGVybmFsRmV0Y2hDb250cm9sbGVyczogZmV0Y2hDb250cm9sbGVycyxcbiAgICBfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkcyxcbiAgICAvLyBUT0RPOiBSZW1vdmUgc2V0Um91dGVzLCBpdCdzIHRlbXBvcmFyeSB0byBhdm9pZCBkZWFsaW5nIHdpdGhcbiAgICAvLyB1cGRhdGluZyB0aGUgdHJlZSB3aGlsZSB2YWxpZGF0aW5nIHRoZSB1cGRhdGUgYWxnb3JpdGhtLlxuICAgIF9pbnRlcm5hbFNldFJvdXRlc1xuICB9O1xuICByZXR1cm4gcm91dGVyO1xufSAvLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gY3JlYXRlU3RhdGljSGFuZGxlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuY29uc3QgVU5TQUZFX0RFRkVSUkVEX1NZTUJPTCA9IFN5bWJvbChcImRlZmVycmVkXCIpO1xuZnVuY3Rpb24gY3JlYXRlU3RhdGljSGFuZGxlcihyb3V0ZXMsIG9wdHMpIHtcbiAgaW52YXJpYW50KHJvdXRlcy5sZW5ndGggPiAwLCBcIllvdSBtdXN0IHByb3ZpZGUgYSBub24tZW1wdHkgcm91dGVzIGFycmF5IHRvIGNyZWF0ZVN0YXRpY0hhbmRsZXJcIik7XG4gIGxldCBkYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZXMpO1xuICBsZXQgYmFzZW5hbWUgPSAob3B0cyA/IG9wdHMuYmFzZW5hbWUgOiBudWxsKSB8fCBcIi9cIjtcbiAgLyoqXG4gICAqIFRoZSBxdWVyeSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZG9jdW1lbnQgcmVxdWVzdHMsIGluIHdoaWNoIHdlIHdhbnQgdG9cbiAgICogY2FsbCBhbiBvcHRpb25hbCBhY3Rpb24gYW5kIHBvdGVudGlhbGx5IG11bHRpcGxlIGxvYWRlcnMgZm9yIGFsbCBuZXN0ZWRcbiAgICogcm91dGVzLiAgSXQgcmV0dXJucyBhIFN0YXRpY0hhbmRsZXJDb250ZXh0IG9iamVjdCwgd2hpY2ggaXMgdmVyeSBzaW1pbGFyXG4gICAqIHRvIHRoZSByb3V0ZXIgc3RhdGUgKGxvY2F0aW9uLCBsb2FkZXJEYXRhLCBhY3Rpb25EYXRhLCBlcnJvcnMsIGV0Yy4pIGFuZFxuICAgKiBhbHNvIGFkZHMgU1NSLXNwZWNpZmljIGluZm9ybWF0aW9uIHN1Y2ggYXMgdGhlIHN0YXR1c0NvZGUgYW5kIGhlYWRlcnNcbiAgICogZnJvbSBhY3Rpb24vbG9hZGVycyBSZXNwb25zZXMuXG4gICAqXG4gICAqIEl0IF9zaG91bGRfIG5ldmVyIHRocm93IGFuZCBzaG91bGQgcmVwb3J0IGFsbCBlcnJvcnMgdGhyb3VnaCB0aGVcbiAgICogcmV0dXJuZWQgY29udGV4dC5lcnJvcnMgb2JqZWN0LCBwcm9wZXJseSBhc3NvY2lhdGluZyBlcnJvcnMgdG8gdGhlaXIgZXJyb3JcbiAgICogYm91bmRhcnkuICBBZGRpdGlvbmFsbHksIGl0IHRyYWNrcyBfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB3aGljaCBjYW4gYmVcbiAgICogdXNlZCB0byBlbXVsYXRlIFJlYWN0IGVycm9yIGJvdW5kYXJpZXMgZHVyaW5nIFNTciBieSBwZXJmb3JtaW5nIGEgc2Vjb25kXG4gICAqIHBhc3Mgb25seSBkb3duIHRvIHRoZSBib3VuZGFyeUlkLlxuICAgKlxuICAgKiBUaGUgb25lIGV4Y2VwdGlvbiB3aGVyZSB3ZSBkbyBub3QgcmV0dXJuIGEgU3RhdGljSGFuZGxlckNvbnRleHQgaXMgd2hlbiBhXG4gICAqIHJlZGlyZWN0IHJlc3BvbnNlIGlzIHJldHVybmVkIG9yIHRocm93biBmcm9tIGFueSBhY3Rpb24vbG9hZGVyLiAgV2VcbiAgICogcHJvcGFnYXRlIHRoYXQgb3V0IGFuZCByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBzbyB0aGUgSFRUUCBzZXJ2ZXIgY2FuXG4gICAqIHJldHVybiBpdCBkaXJlY3RseS5cbiAgICovXG5cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnkocmVxdWVzdCwgX3RlbXAyKSB7XG4gICAgbGV0IHtcbiAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKFwiXCIsIGNyZWF0ZVBhdGgodXJsKSwgbnVsbCwgXCJkZWZhdWx0XCIpO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgbG9jYXRpb24sIGJhc2VuYW1lKTsgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcblxuICAgIGlmICghaXNWYWxpZE1ldGhvZChtZXRob2QpICYmIG1ldGhvZCAhPT0gXCJoZWFkXCIpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZFxuICAgICAgfSk7XG4gICAgICBsZXQge1xuICAgICAgICBtYXRjaGVzOiBtZXRob2ROb3RBbGxvd2VkTWF0Y2hlcyxcbiAgICAgICAgcm91dGVcbiAgICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKGRhdGFSb3V0ZXMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYmFzZW5hbWUsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBtYXRjaGVzOiBtZXRob2ROb3RBbGxvd2VkTWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1c0NvZGU6IGVycm9yLnN0YXR1cyxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGxcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICghbWF0Y2hlcykge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgcm91dGVcbiAgICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKGRhdGFSb3V0ZXMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYmFzZW5hbWUsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSBhd2FpdCBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0KTtcblxuICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSAvLyBXaGVuIHJldHVybmluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCwgd2UgcGF0Y2ggYmFjayBpbiB0aGUgbG9jYXRpb24gaGVyZVxuICAgIC8vIHNpbmNlIHdlIG5lZWQgaXQgZm9yIFJlYWN0IENvbnRleHQuICBCdXQgdGhpcyBoZWxwcyBrZWVwIG91ciBzdWJtaXQgYW5kXG4gICAgLy8gbG9hZFJvdXRlRGF0YSBvcGVyYXRpbmcgb24gYSBSZXF1ZXN0IGluc3RlYWQgb2YgYSBMb2NhdGlvblxuXG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgbG9jYXRpb24sXG4gICAgICBiYXNlbmFtZVxuICAgIH0sIHJlc3VsdCk7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBxdWVyeVJvdXRlKCkgbWV0aG9kIGlzIGludGVuZGVkIGZvciB0YXJnZXRlZCByb3V0ZSByZXF1ZXN0cywgZWl0aGVyXG4gICAqIGZvciBmZXRjaCA/X2RhdGEgcmVxdWVzdHMgb3IgcmVzb3VyY2Ugcm91dGUgcmVxdWVzdHMuICBJbiB0aGlzIGNhc2UsIHdlXG4gICAqIGFyZSBvbmx5IGV2ZXIgY2FsbGluZyBhIHNpbmdsZSBhY3Rpb24gb3IgbG9hZGVyLCBhbmQgd2UgYXJlIHJldHVybmluZyB0aGVcbiAgICogcmV0dXJuZWQgdmFsdWUgZGlyZWN0bHkuICBJbiBtb3N0IGNhc2VzLCB0aGlzIHdpbGwgYmUgYSBSZXNwb25zZSByZXR1cm5lZFxuICAgKiBmcm9tIHRoZSBhY3Rpb24vbG9hZGVyLCBidXQgaXQgbWF5IGJlIGEgcHJpbWl0aXZlIG9yIG90aGVyIHZhbHVlIGFzIHdlbGwgLVxuICAgKiBhbmQgaW4gc3VjaCBjYXNlcyB0aGUgY2FsbGluZyBjb250ZXh0IHNob3VsZCBoYW5kbGUgdGhhdCBhY2NvcmRpbmdseS5cbiAgICpcbiAgICogV2UgZG8gcmVzcGVjdCB0aGUgdGhyb3cvcmV0dXJuIGRpZmZlcmVudGlhdGlvbiwgc28gaWYgYW4gYWN0aW9uL2xvYWRlclxuICAgKiB0aHJvd3MsIHRoZW4gdGhpcyBtZXRob2Qgd2lsbCB0aHJvdyB0aGUgdmFsdWUuICBUaGlzIGlzIGltcG9ydGFudCBzbyB3ZVxuICAgKiBjYW4gZG8gcHJvcGVyIGJvdW5kYXJ5IGlkZW50aWZpY2F0aW9uIGluIFJlbWl4IHdoZXJlIGEgdGhyb3duIFJlc3BvbnNlXG4gICAqIG11c3QgZ28gdG8gdGhlIENhdGNoIEJvdW5kYXJ5IGJ1dCBhIHJldHVybmVkIFJlc3BvbnNlIGlzIGhhcHB5LXBhdGguXG4gICAqXG4gICAqIE9uZSB0aGluZyB0byBub3RlIGlzIHRoYXQgYW55IFJvdXRlci1pbml0aWF0ZWQgRXJyb3JzIHRoYXQgbWFrZSBzZW5zZVxuICAgKiB0byBhc3NvY2lhdGUgd2l0aCBhIHN0YXR1cyBjb2RlIHdpbGwgYmUgdGhyb3duIGFzIGFuIEVycm9yUmVzcG9uc2VcbiAgICogaW5zdGFuY2Ugd2hpY2ggaW5jbHVkZSB0aGUgcmF3IEVycm9yLCBzdWNoIHRoYXQgdGhlIGNhbGxpbmcgY29udGV4dCBjYW5cbiAgICogc2VyaWFsaXplIHRoZSBlcnJvciBhcyB0aGV5IHNlZSBmaXQgd2hpbGUgaW5jbHVkaW5nIHRoZSBwcm9wZXIgcmVzcG9uc2VcbiAgICogY29kZS4gIEV4YW1wbGVzIGhlcmUgYXJlIDQwNCBhbmQgNDA1IGVycm9ycyB0aGF0IG9jY3VyIHByaW9yIHRvIHJlYWNoaW5nXG4gICAqIGFueSB1c2VyLWRlZmluZWQgbG9hZGVycy5cbiAgICovXG5cblxuICBhc3luYyBmdW5jdGlvbiBxdWVyeVJvdXRlKHJlcXVlc3QsIF90ZW1wMykge1xuICAgIGxldCB7XG4gICAgICByb3V0ZUlkLFxuICAgICAgcmVxdWVzdENvbnRleHRcbiAgICB9ID0gX3RlbXAzID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMztcbiAgICBsZXQgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgbGV0IG1ldGhvZCA9IHJlcXVlc3QubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oXCJcIiwgY3JlYXRlUGF0aCh1cmwpLCBudWxsLCBcImRlZmF1bHRcIik7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgYmFzZW5hbWUpOyAvLyBTU1Igc3VwcG9ydHMgSEVBRCByZXF1ZXN0cyB3aGlsZSBTUEEgZG9lc24ndFxuXG4gICAgaWYgKCFpc1ZhbGlkTWV0aG9kKG1ldGhvZCkgJiYgbWV0aG9kICE9PSBcImhlYWRcIiAmJiBtZXRob2QgIT09IFwib3B0aW9uc1wiKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2RcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IG1hdGNoID0gcm91dGVJZCA/IG1hdGNoZXMuZmluZChtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpIDogZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuXG4gICAgaWYgKHJvdXRlSWQgJiYgIW1hdGNoKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMywge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoKSB7XG4gICAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoaXQgSSBkb24ndCB0aGluaz9cbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHF1ZXJ5SW1wbChyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIG1hdGNoKTtcblxuICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9ycyA/IE9iamVjdC52YWx1ZXMocmVzdWx0LmVycm9ycylbMF0gOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoZXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gSWYgd2UgZ290IGJhY2sgcmVzdWx0LmVycm9ycywgdGhhdCBtZWFucyB0aGUgbG9hZGVyL2FjdGlvbiB0aHJld1xuICAgICAgLy8gX3NvbWV0aGluZ18gdGhhdCB3YXNuJ3QgYSBSZXNwb25zZSwgYnV0IGl0J3Mgbm90IGd1YXJhbnRlZWQvcmVxdWlyZWRcbiAgICAgIC8vIHRvIGJlIGFuIGBpbnN0YW5jZW9mIEVycm9yYCBlaXRoZXIsIHNvIHdlIGhhdmUgdG8gdXNlIHRocm93IGhlcmUgdG9cbiAgICAgIC8vIHByZXNlcnZlIHRoZSBcImVycm9yXCIgc3RhdGUgb3V0c2lkZSBvZiBxdWVyeUltcGwuXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9IC8vIFBpY2sgb2ZmIHRoZSByaWdodCBzdGF0ZSB2YWx1ZSB0byByZXR1cm5cblxuXG4gICAgaWYgKHJlc3VsdC5hY3Rpb25EYXRhKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZXN1bHQuYWN0aW9uRGF0YSlbMF07XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdC5sb2FkZXJEYXRhKSB7XG4gICAgICB2YXIgX3Jlc3VsdCRhY3RpdmVEZWZlcnJlO1xuXG4gICAgICBsZXQgZGF0YSA9IE9iamVjdC52YWx1ZXMocmVzdWx0LmxvYWRlckRhdGEpWzBdO1xuXG4gICAgICBpZiAoKF9yZXN1bHQkYWN0aXZlRGVmZXJyZSA9IHJlc3VsdC5hY3RpdmVEZWZlcnJlZHMpICE9IG51bGwgJiYgX3Jlc3VsdCRhY3RpdmVEZWZlcnJlW21hdGNoLnJvdXRlLmlkXSkge1xuICAgICAgICBkYXRhW1VOU0FGRV9ERUZFUlJFRF9TWU1CT0xdID0gcmVzdWx0LmFjdGl2ZURlZmVycmVkc1ttYXRjaC5yb3V0ZS5pZF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoKSB7XG4gICAgaW52YXJpYW50KHJlcXVlc3Quc2lnbmFsLCBcInF1ZXJ5KCkvcXVlcnlSb3V0ZSgpIHJlcXVlc3RzIG11c3QgY29udGFpbiBhbiBBYm9ydENvbnRyb2xsZXIgc2lnbmFsXCIpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc011dGF0aW9uTWV0aG9kKHJlcXVlc3QubWV0aG9kLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBzdWJtaXQocmVxdWVzdCwgbWF0Y2hlcywgcm91dGVNYXRjaCB8fCBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbiksIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoICE9IG51bGwpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgcm91dGVNYXRjaCk7XG4gICAgICByZXR1cm4gaXNSZXNwb25zZShyZXN1bHQpID8gcmVzdWx0IDogX2V4dGVuZHMoe30sIHJlc3VsdCwge1xuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSWYgdGhlIHVzZXIgdGhyZXcvcmV0dXJuZWQgYSBSZXNwb25zZSBpbiBjYWxsTG9hZGVyT3JBY3Rpb24sIHdlIHRocm93XG4gICAgICAvLyBpdCB0byBiYWlsIG91dCBhbmQgdGhlbiByZXR1cm4gb3IgdGhyb3cgaGVyZSBiYXNlZCBvbiB3aGV0aGVyIHRoZSB1c2VyXG4gICAgICAvLyByZXR1cm5lZCBvciB0aHJld1xuICAgICAgaWYgKGlzUXVlcnlSb3V0ZVJlc3BvbnNlKGUpKSB7XG4gICAgICAgIGlmIChlLnR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IgJiYgIWlzUmVkaXJlY3RSZXNwb25zZShlLnJlc3BvbnNlKSkge1xuICAgICAgICAgIHRocm93IGUucmVzcG9uc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZS5yZXNwb25zZTtcbiAgICAgIH0gLy8gUmVkaXJlY3RzIGFyZSBhbHdheXMgcmV0dXJuZWQgc2luY2UgdGhleSBkb24ndCBwcm9wYWdhdGUgdG8gY2F0Y2hcbiAgICAgIC8vIGJvdW5kYXJpZXNcblxuXG4gICAgICBpZiAoaXNSZWRpcmVjdFJlc3BvbnNlKGUpKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHN1Ym1pdChyZXF1ZXN0LCBtYXRjaGVzLCBhY3Rpb25NYXRjaCwgcmVxdWVzdENvbnRleHQsIGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgbGV0IHJlc3VsdDtcblxuICAgIGlmICghYWN0aW9uTWF0Y2gucm91dGUuYWN0aW9uKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICBwYXRobmFtZTogbmV3IFVSTChyZXF1ZXN0LnVybCkucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWQ6IGFjdGlvbk1hdGNoLnJvdXRlLmlkXG4gICAgICB9KTtcblxuICAgICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgcmVxdWVzdCwgYWN0aW9uTWF0Y2gsIG1hdGNoZXMsIGJhc2VuYW1lLCB0cnVlLCBpc1JvdXRlUmVxdWVzdCwgcmVxdWVzdENvbnRleHQpO1xuXG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICBsZXQgbWV0aG9kID0gaXNSb3V0ZVJlcXVlc3QgPyBcInF1ZXJ5Um91dGVcIiA6IFwicXVlcnlcIjtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArIFwiKCkgY2FsbCBhYm9ydGVkXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFVoaGhoIC0gdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLCB3ZSBzaG91bGQgYWx3YXlzIHRocm93IHRoZXNlIGZyb21cbiAgICAgIC8vIGNhbGxMb2FkZXJPckFjdGlvbiwgYnV0IHRoZSB0eXBlIG5hcnJvd2luZyBoZXJlIGtlZXBzIFRTIGhhcHB5IGFuZCB3ZVxuICAgICAgLy8gY2FuIGdldCBiYWNrIG9uIHRoZSBcInRocm93IGFsbCByZWRpcmVjdCByZXNwb25zZXNcIiB0cmFpbiBoZXJlIHNob3VsZFxuICAgICAgLy8gdGhpcyBldmVyIGhhcHBlbiA6L1xuICAgICAgdGhyb3cgbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiByZXN1bHQuc3RhdHVzLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246IHJlc3VsdC5sb2NhdGlvblxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICB0eXBlOiBcImRlZmVyLWFjdGlvblwiXG4gICAgICB9KTtcblxuICAgICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgLy8gTm90ZTogVGhpcyBzaG91bGQgb25seSBiZSBub24tUmVzcG9uc2UgdmFsdWVzIGlmIHdlIGdldCBoZXJlLCBzaW5jZVxuICAgICAgLy8gaXNSb3V0ZVJlcXVlc3Qgc2hvdWxkIHRocm93IGFueSBSZXNwb25zZSByZWNlaXZlZCBpbiBjYWxsTG9hZGVyT3JBY3Rpb25cbiAgICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaGVzOiBbYWN0aW9uTWF0Y2hdLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YToge1xuICAgICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yczogbnVsbCxcbiAgICAgICAgLy8gTm90ZTogc3RhdHVzQ29kZSArIGhlYWRlcnMgYXJlIHVudXNlZCBoZXJlIHNpbmNlIHF1ZXJ5Um91dGUgd2lsbFxuICAgICAgICAvLyByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBvciB2YWx1ZVxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgdW5kZWZpbmVkLCB7XG4gICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICB9KTsgLy8gYWN0aW9uIHN0YXR1cyBjb2RlcyB0YWtlIHByZWNlZGVuY2Ugb3ZlciBsb2FkZXIgc3RhdHVzIGNvZGVzXG5cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgICAgICBzdGF0dXNDb2RlOiBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpID8gcmVzdWx0LmVycm9yLnN0YXR1cyA6IDUwMCxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5oZWFkZXJzXG4gICAgICAgIH0gOiB7fSlcbiAgICAgIH0pO1xuICAgIH0gLy8gQ3JlYXRlIGEgR0VUIHJlcXVlc3QgZm9yIHRoZSBsb2FkZXJzXG5cblxuICAgIGxldCBsb2FkZXJSZXF1ZXN0ID0gbmV3IFJlcXVlc3QocmVxdWVzdC51cmwsIHtcbiAgICAgIGhlYWRlcnM6IHJlcXVlc3QuaGVhZGVycyxcbiAgICAgIHJlZGlyZWN0OiByZXF1ZXN0LnJlZGlyZWN0LFxuICAgICAgc2lnbmFsOiByZXF1ZXN0LnNpZ25hbFxuICAgIH0pO1xuICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShsb2FkZXJSZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCByZXN1bHQuc3RhdHVzQ29kZSA/IHtcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXNDb2RlXG4gICAgfSA6IHt9LCB7XG4gICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICB9LFxuICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVyc1xuICAgICAgfSA6IHt9KVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgcm91dGVNYXRjaCwgcGVuZGluZ0FjdGlvbkVycm9yKSB7XG4gICAgbGV0IGlzUm91dGVSZXF1ZXN0ID0gcm91dGVNYXRjaCAhPSBudWxsOyAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5Um91dGUoKSlcblxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCAmJiAhKHJvdXRlTWF0Y2ggIT0gbnVsbCAmJiByb3V0ZU1hdGNoLnJvdXRlLmxvYWRlcikpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBuZXcgVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZDogcm91dGVNYXRjaCA9PSBudWxsID8gdm9pZCAwIDogcm91dGVNYXRjaC5yb3V0ZS5pZFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3RNYXRjaGVzID0gcm91dGVNYXRjaCA/IFtyb3V0ZU1hdGNoXSA6IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIE9iamVjdC5rZXlzKHBlbmRpbmdBY3Rpb25FcnJvciB8fCB7fSlbMF0pO1xuICAgIGxldCBtYXRjaGVzVG9Mb2FkID0gcmVxdWVzdE1hdGNoZXMuZmlsdGVyKG0gPT4gbS5yb3V0ZS5sb2FkZXIpOyAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5KCkpXG5cbiAgICBpZiAobWF0Y2hlc1RvTG9hZC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIC8vIEFkZCBhIG51bGwgZm9yIGFsbCBtYXRjaGVkIHJvdXRlcyBmb3IgcHJvcGVyIHJldmFsaWRhdGlvbiBvbiB0aGUgY2xpZW50XG4gICAgICAgIGxvYWRlckRhdGE6IG1hdGNoZXMucmVkdWNlKChhY2MsIG0pID0+IE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgICAgW20ucm91dGUuaWRdOiBudWxsXG4gICAgICAgIH0pLCB7fSksXG4gICAgICAgIGVycm9yczogcGVuZGluZ0FjdGlvbkVycm9yIHx8IG51bGwsXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFsuLi5tYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgcmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIGJhc2VuYW1lLCB0cnVlLCBpc1JvdXRlUmVxdWVzdCwgcmVxdWVzdENvbnRleHQpKV0pO1xuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIGxldCBtZXRob2QgPSBpc1JvdXRlUmVxdWVzdCA/IFwicXVlcnlSb3V0ZVwiIDogXCJxdWVyeVwiO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArIFwiKCkgY2FsbCBhYm9ydGVkXCIpO1xuICAgIH0gLy8gUHJvY2VzcyBhbmQgY29tbWl0IG91dHB1dCBmcm9tIGxvYWRlcnNcblxuXG4gICAgbGV0IGFjdGl2ZURlZmVycmVkcyA9IG5ldyBNYXAoKTtcbiAgICBsZXQgY29udGV4dCA9IHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0FjdGlvbkVycm9yLCBhY3RpdmVEZWZlcnJlZHMpOyAvLyBBZGQgYSBudWxsIGZvciBhbnkgbm9uLWxvYWRlciBtYXRjaGVzIGZvciBwcm9wZXIgcmV2YWxpZGF0aW9uIG9uIHRoZSBjbGllbnRcblxuICAgIGxldCBleGVjdXRlZExvYWRlcnMgPSBuZXcgU2V0KG1hdGNoZXNUb0xvYWQubWFwKG1hdGNoID0+IG1hdGNoLnJvdXRlLmlkKSk7XG4gICAgbWF0Y2hlcy5mb3JFYWNoKG1hdGNoID0+IHtcbiAgICAgIGlmICghZXhlY3V0ZWRMb2FkZXJzLmhhcyhtYXRjaC5yb3V0ZS5pZCkpIHtcbiAgICAgICAgY29udGV4dC5sb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgYWN0aXZlRGVmZXJyZWRzOiBhY3RpdmVEZWZlcnJlZHMuc2l6ZSA+IDAgPyBPYmplY3QuZnJvbUVudHJpZXMoYWN0aXZlRGVmZXJyZWRzLmVudHJpZXMoKSkgOiBudWxsXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGRhdGFSb3V0ZXMsXG4gICAgcXVlcnksXG4gICAgcXVlcnlSb3V0ZVxuICB9O1xufSAvLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSGVscGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBHaXZlbiBhbiBleGlzdGluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCBhbmQgYW4gZXJyb3IgdGhyb3duIGF0IHJlbmRlciB0aW1lLFxuICogcHJvdmlkZSBhbiB1cGRhdGVkIFN0YXRpY0hhbmRsZXJDb250ZXh0IHN1aXRhYmxlIGZvciBhIHNlY29uZCBTU1IgcmVuZGVyXG4gKi9cblxuZnVuY3Rpb24gZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvcihyb3V0ZXMsIGNvbnRleHQsIGVycm9yKSB7XG4gIGxldCBuZXdDb250ZXh0ID0gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgZXJyb3JzOiB7XG4gICAgICBbY29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB8fCByb3V0ZXNbMF0uaWRdOiBlcnJvclxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG5ld0NvbnRleHQ7XG59XG5cbmZ1bmN0aW9uIGlzU3VibWlzc2lvbk5hdmlnYXRpb24ob3B0cykge1xuICByZXR1cm4gb3B0cyAhPSBudWxsICYmIFwiZm9ybURhdGFcIiBpbiBvcHRzO1xufSAvLyBOb3JtYWxpemUgbmF2aWdhdGlvbiBvcHRpb25zIGJ5IGNvbnZlcnRpbmcgZm9ybU1ldGhvZD1HRVQgZm9ybURhdGEgb2JqZWN0cyB0b1xuLy8gVVJMU2VhcmNoUGFyYW1zIHNvIHRoZXkgYmVoYXZlIGlkZW50aWNhbGx5IHRvIGxpbmtzIHdpdGggcXVlcnkgcGFyYW1zXG5cblxuZnVuY3Rpb24gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKHRvLCBvcHRzLCBpc0ZldGNoZXIpIHtcbiAgaWYgKGlzRmV0Y2hlciA9PT0gdm9pZCAwKSB7XG4gICAgaXNGZXRjaGVyID0gZmFsc2U7XG4gIH1cblxuICBsZXQgcGF0aCA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7IC8vIFJldHVybiBsb2NhdGlvbiB2ZXJiYXRpbSBvbiBub24tc3VibWlzc2lvbiBuYXZpZ2F0aW9uc1xuXG4gIGlmICghb3B0cyB8fCAhaXNTdWJtaXNzaW9uTmF2aWdhdGlvbihvcHRzKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoXG4gICAgfTtcbiAgfVxuXG4gIGlmIChvcHRzLmZvcm1NZXRob2QgJiYgIWlzVmFsaWRNZXRob2Qob3B0cy5mb3JtTWV0aG9kKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoLFxuICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZDogb3B0cy5mb3JtTWV0aG9kXG4gICAgICB9KVxuICAgIH07XG4gIH0gLy8gQ3JlYXRlIGEgU3VibWlzc2lvbiBvbiBub24tR0VUIG5hdmlnYXRpb25zXG5cblxuICBsZXQgc3VibWlzc2lvbjtcblxuICBpZiAob3B0cy5mb3JtRGF0YSkge1xuICAgIHN1Ym1pc3Npb24gPSB7XG4gICAgICBmb3JtTWV0aG9kOiBvcHRzLmZvcm1NZXRob2QgfHwgXCJnZXRcIixcbiAgICAgIGZvcm1BY3Rpb246IHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpLFxuICAgICAgZm9ybUVuY1R5cGU6IG9wdHMgJiYgb3B0cy5mb3JtRW5jVHlwZSB8fCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLFxuICAgICAgZm9ybURhdGE6IG9wdHMuZm9ybURhdGFcbiAgICB9O1xuXG4gICAgaWYgKGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aCxcbiAgICAgICAgc3VibWlzc2lvblxuICAgICAgfTtcbiAgICB9XG4gIH0gLy8gRmxhdHRlbiBzdWJtaXNzaW9uIG9udG8gVVJMU2VhcmNoUGFyYW1zIGZvciBHRVQgc3VibWlzc2lvbnNcblxuXG4gIGxldCBwYXJzZWRQYXRoID0gcGFyc2VQYXRoKHBhdGgpO1xuICBsZXQgc2VhcmNoUGFyYW1zID0gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMob3B0cy5mb3JtRGF0YSk7IC8vIFNpbmNlIGZldGNoZXIgR0VUIHN1Ym1pc3Npb25zIG9ubHkgcnVuIGEgc2luZ2xlIGxvYWRlciAoYXMgb3Bwb3NlZCB0b1xuICAvLyBuYXZpZ2F0aW9uIEdFVCBzdWJtaXNzaW9ucyB3aGljaCBydW4gYWxsIGxvYWRlcnMpLCB3ZSBuZWVkIHRvIHByZXNlcnZlXG4gIC8vIGFueSBpbmNvbWluZyA/aW5kZXggcGFyYW1zXG5cbiAgaWYgKGlzRmV0Y2hlciAmJiBwYXJzZWRQYXRoLnNlYXJjaCAmJiBoYXNOYWtlZEluZGV4UXVlcnkocGFyc2VkUGF0aC5zZWFyY2gpKSB7XG4gICAgc2VhcmNoUGFyYW1zLmFwcGVuZChcImluZGV4XCIsIFwiXCIpO1xuICB9XG5cbiAgcGFyc2VkUGF0aC5zZWFyY2ggPSBcIj9cIiArIHNlYXJjaFBhcmFtcztcbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBjcmVhdGVQYXRoKHBhcnNlZFBhdGgpLFxuICAgIHN1Ym1pc3Npb25cbiAgfTtcbn0gLy8gRmlsdGVyIG91dCBhbGwgcm91dGVzIGJlbG93IGFueSBjYXVnaHQgZXJyb3IgYXMgdGhleSBhcmVuJ3QgZ29pbmcgdG9cbi8vIHJlbmRlciBzbyB3ZSBkb24ndCBuZWVkIHRvIGxvYWQgdGhlbVxuXG5cbmZ1bmN0aW9uIGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIGJvdW5kYXJ5SWQpIHtcbiAgbGV0IGJvdW5kYXJ5TWF0Y2hlcyA9IG1hdGNoZXM7XG5cbiAgaWYgKGJvdW5kYXJ5SWQpIHtcbiAgICBsZXQgaW5kZXggPSBtYXRjaGVzLmZpbmRJbmRleChtID0+IG0ucm91dGUuaWQgPT09IGJvdW5kYXJ5SWQpO1xuXG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIGJvdW5kYXJ5TWF0Y2hlcyA9IG1hdGNoZXMuc2xpY2UoMCwgaW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZGFyeU1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIGdldE1hdGNoZXNUb0xvYWQoaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIHN1Ym1pc3Npb24sIGxvY2F0aW9uLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcywgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLCBmZXRjaExvYWRNYXRjaGVzLCByb3V0ZXNUb1VzZSwgYmFzZW5hbWUsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IpIHtcbiAgbGV0IGFjdGlvblJlc3VsdCA9IHBlbmRpbmdFcnJvciA/IE9iamVjdC52YWx1ZXMocGVuZGluZ0Vycm9yKVswXSA6IHBlbmRpbmdBY3Rpb25EYXRhID8gT2JqZWN0LnZhbHVlcyhwZW5kaW5nQWN0aW9uRGF0YSlbMF0gOiB1bmRlZmluZWQ7XG4gIGxldCBjdXJyZW50VXJsID0gaGlzdG9yeS5jcmVhdGVVUkwoc3RhdGUubG9jYXRpb24pO1xuICBsZXQgbmV4dFVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKGxvY2F0aW9uKTtcbiAgbGV0IGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlID0gLy8gRm9yY2VkIHJldmFsaWRhdGlvbiBkdWUgdG8gc3VibWlzc2lvbiwgdXNlUmV2YWxpZGF0ZSwgb3IgWC1SZW1peC1SZXZhbGlkYXRlXG4gIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgfHwgLy8gQ2xpY2tlZCB0aGUgc2FtZSBsaW5rLCByZXN1Ym1pdHRlZCBhIEdFVCBmb3JtXG4gIGN1cnJlbnRVcmwudG9TdHJpbmcoKSA9PT0gbmV4dFVybC50b1N0cmluZygpIHx8IC8vIFNlYXJjaCBwYXJhbXMgYWZmZWN0IGFsbCBsb2FkZXJzXG4gIGN1cnJlbnRVcmwuc2VhcmNoICE9PSBuZXh0VXJsLnNlYXJjaDsgLy8gUGljayBuYXZpZ2F0aW9uIG1hdGNoZXMgdGhhdCBhcmUgbmV0LW5ldyBvciBxdWFsaWZ5IGZvciByZXZhbGlkYXRpb25cblxuICBsZXQgYm91bmRhcnlJZCA9IHBlbmRpbmdFcnJvciA/IE9iamVjdC5rZXlzKHBlbmRpbmdFcnJvcilbMF0gOiB1bmRlZmluZWQ7XG4gIGxldCBib3VuZGFyeU1hdGNoZXMgPSBnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeShtYXRjaGVzLCBib3VuZGFyeUlkKTtcbiAgbGV0IG5hdmlnYXRpb25NYXRjaGVzID0gYm91bmRhcnlNYXRjaGVzLmZpbHRlcigobWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgaWYgKG1hdGNoLnJvdXRlLmxvYWRlciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBBbHdheXMgY2FsbCB0aGUgbG9hZGVyIG9uIG5ldyByb3V0ZSBpbnN0YW5jZXMgYW5kIHBlbmRpbmcgZGVmZXIgY2FuY2VsbGF0aW9uc1xuXG5cbiAgICBpZiAoaXNOZXdMb2FkZXIoc3RhdGUubG9hZGVyRGF0YSwgc3RhdGUubWF0Y2hlc1tpbmRleF0sIG1hdGNoKSB8fCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5zb21lKGlkID0+IGlkID09PSBtYXRjaC5yb3V0ZS5pZCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8gVGhpcyBpcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBmb3Igd2hlbiB3ZSByZXZhbGlkYXRlLiAgSWYgdGhlIHJvdXRlXG4gICAgLy8gcHJvdmlkZXMgaXQncyBvd24gaW1wbGVtZW50YXRpb24sIHRoZW4gd2UgZ2l2ZSB0aGVtIGZ1bGwgY29udHJvbCBidXRcbiAgICAvLyBwcm92aWRlIHRoaXMgdmFsdWUgc28gdGhleSBjYW4gbGV2ZXJhZ2UgaXQgaWYgbmVlZGVkIGFmdGVyIHRoZXkgY2hlY2tcbiAgICAvLyB0aGVpciBvd24gc3BlY2lmaWMgdXNlIGNhc2VzXG5cblxuICAgIGxldCBjdXJyZW50Um91dGVNYXRjaCA9IHN0YXRlLm1hdGNoZXNbaW5kZXhdO1xuICAgIGxldCBuZXh0Um91dGVNYXRjaCA9IG1hdGNoO1xuICAgIHJldHVybiBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKG1hdGNoLCBfZXh0ZW5kcyh7XG4gICAgICBjdXJyZW50VXJsLFxuICAgICAgY3VycmVudFBhcmFtczogY3VycmVudFJvdXRlTWF0Y2gucGFyYW1zLFxuICAgICAgbmV4dFVybCxcbiAgICAgIG5leHRQYXJhbXM6IG5leHRSb3V0ZU1hdGNoLnBhcmFtc1xuICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgIGFjdGlvblJlc3VsdCxcbiAgICAgIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlOiBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZSB8fCBpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudFJvdXRlTWF0Y2gsIG5leHRSb3V0ZU1hdGNoKVxuICAgIH0pKTtcbiAgfSk7IC8vIFBpY2sgZmV0Y2hlci5sb2FkcyB0aGF0IG5lZWQgdG8gYmUgcmV2YWxpZGF0ZWRcblxuICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlcnMgPSBbXTtcbiAgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChmLCBrZXkpID0+IHtcbiAgICAvLyBEb24ndCByZXZhbGlkYXRlIGlmIGZldGNoZXIgd29uJ3QgYmUgcHJlc2VudCBpbiB0aGUgc3Vic2VxdWVudCByZW5kZXJcbiAgICBpZiAoIW1hdGNoZXMuc29tZShtID0+IG0ucm91dGUuaWQgPT09IGYucm91dGVJZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgZmV0Y2hlck1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgZi5wYXRoLCBiYXNlbmFtZSk7IC8vIElmIHRoZSBmZXRjaGVyIHBhdGggbm8gbG9uZ2VyIG1hdGNoZXMsIHB1c2ggaXQgaW4gd2l0aCBudWxsIG1hdGNoZXMgc29cbiAgICAvLyB3ZSBjYW4gdHJpZ2dlciBhIDQwNCBpbiBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGFcblxuICAgIGlmICghZmV0Y2hlck1hdGNoZXMpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goX2V4dGVuZHMoe1xuICAgICAgICBrZXlcbiAgICAgIH0sIGYsIHtcbiAgICAgICAgbWF0Y2hlczogbnVsbCxcbiAgICAgICAgbWF0Y2g6IG51bGxcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgZmV0Y2hlck1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2goZmV0Y2hlck1hdGNoZXMsIGYucGF0aCk7XG5cbiAgICBpZiAoY2FuY2VsbGVkRmV0Y2hlckxvYWRzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goX2V4dGVuZHMoe1xuICAgICAgICBrZXksXG4gICAgICAgIG1hdGNoZXM6IGZldGNoZXJNYXRjaGVzLFxuICAgICAgICBtYXRjaDogZmV0Y2hlck1hdGNoXG4gICAgICB9LCBmKSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBSZXZhbGlkYXRpbmcgZmV0Y2hlcnMgYXJlIGRlY291cGxlZCBmcm9tIHRoZSByb3V0ZSBtYXRjaGVzIHNpbmNlIHRoZXlcbiAgICAvLyBoaXQgYSBzdGF0aWMgaHJlZiwgc28gdGhleSBfYWx3YXlzXyBjaGVjayBzaG91bGRSZXZhbGlkYXRlIGFuZCB0aGVcbiAgICAvLyBkZWZhdWx0IGlzIHN0cmljdGx5IGlmIGEgcmV2YWxpZGF0aW9uIGlzIGV4cGxpY2l0bHkgcmVxdWlyZWQgKGFjdGlvblxuICAgIC8vIHN1Ym1pc3Npb25zLCB1c2VSZXZhbGlkYXRvciwgWC1SZW1peC1SZXZhbGlkYXRlKS5cblxuXG4gICAgbGV0IHNob3VsZFJldmFsaWRhdGUgPSBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGZldGNoZXJNYXRjaCwgX2V4dGVuZHMoe1xuICAgICAgY3VycmVudFVybCxcbiAgICAgIGN1cnJlbnRQYXJhbXM6IHN0YXRlLm1hdGNoZXNbc3RhdGUubWF0Y2hlcy5sZW5ndGggLSAxXS5wYXJhbXMsXG4gICAgICBuZXh0VXJsLFxuICAgICAgbmV4dFBhcmFtczogbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnBhcmFtc1xuICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgIGFjdGlvblJlc3VsdCxcbiAgICAgIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlXG4gICAgfSkpO1xuXG4gICAgaWYgKHNob3VsZFJldmFsaWRhdGUpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goX2V4dGVuZHMoe1xuICAgICAgICBrZXksXG4gICAgICAgIG1hdGNoZXM6IGZldGNoZXJNYXRjaGVzLFxuICAgICAgICBtYXRjaDogZmV0Y2hlck1hdGNoXG4gICAgICB9LCBmKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIFtuYXZpZ2F0aW9uTWF0Y2hlcywgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdO1xufVxuXG5mdW5jdGlvbiBpc05ld0xvYWRlcihjdXJyZW50TG9hZGVyRGF0YSwgY3VycmVudE1hdGNoLCBtYXRjaCkge1xuICBsZXQgaXNOZXcgPSAvLyBbYV0gLT4gW2EsIGJdXG4gICFjdXJyZW50TWF0Y2ggfHwgLy8gW2EsIGJdIC0+IFthLCBjXVxuICBtYXRjaC5yb3V0ZS5pZCAhPT0gY3VycmVudE1hdGNoLnJvdXRlLmlkOyAvLyBIYW5kbGUgdGhlIGNhc2UgdGhhdCB3ZSBkb24ndCBoYXZlIGRhdGEgZm9yIGEgcmUtdXNlZCByb3V0ZSwgcG90ZW50aWFsbHlcbiAgLy8gZnJvbSBhIHByaW9yIGVycm9yIG9yIGZyb20gYSBjYW5jZWxsZWQgcGVuZGluZyBkZWZlcnJlZFxuXG4gIGxldCBpc01pc3NpbmdEYXRhID0gY3VycmVudExvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdID09PSB1bmRlZmluZWQ7IC8vIEFsd2F5cyBsb2FkIGlmIHRoaXMgaXMgYSBuZXQtbmV3IHJvdXRlIG9yIHdlIGRvbid0IHlldCBoYXZlIGRhdGFcblxuICByZXR1cm4gaXNOZXcgfHwgaXNNaXNzaW5nRGF0YTtcbn1cblxuZnVuY3Rpb24gaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRNYXRjaCwgbWF0Y2gpIHtcbiAgbGV0IGN1cnJlbnRQYXRoID0gY3VycmVudE1hdGNoLnJvdXRlLnBhdGg7XG4gIHJldHVybiAoLy8gcGFyYW0gY2hhbmdlIGZvciB0aGlzIG1hdGNoLCAvdXNlcnMvMTIzIC0+IC91c2Vycy80NTZcbiAgICBjdXJyZW50TWF0Y2gucGF0aG5hbWUgIT09IG1hdGNoLnBhdGhuYW1lIHx8IC8vIHNwbGF0IHBhcmFtIGNoYW5nZWQsIHdoaWNoIGlzIG5vdCBwcmVzZW50IGluIG1hdGNoLnBhdGhcbiAgICAvLyBlLmcuIC9maWxlcy9pbWFnZXMvYXZhdGFyLmpwZyAtPiBmaWxlcy9maW5hbmNlcy54bHNcbiAgICBjdXJyZW50UGF0aCAhPSBudWxsICYmIGN1cnJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSAmJiBjdXJyZW50TWF0Y2gucGFyYW1zW1wiKlwiXSAhPT0gbWF0Y2gucGFyYW1zW1wiKlwiXVxuICApO1xufVxuXG5mdW5jdGlvbiBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGxvYWRlck1hdGNoLCBhcmcpIHtcbiAgaWYgKGxvYWRlck1hdGNoLnJvdXRlLnNob3VsZFJldmFsaWRhdGUpIHtcbiAgICBsZXQgcm91dGVDaG9pY2UgPSBsb2FkZXJNYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKGFyZyk7XG5cbiAgICBpZiAodHlwZW9mIHJvdXRlQ2hvaWNlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgcmV0dXJuIHJvdXRlQ2hvaWNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhcmcuZGVmYXVsdFNob3VsZFJldmFsaWRhdGU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNhbGxMb2FkZXJPckFjdGlvbih0eXBlLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgYmFzZW5hbWUsIGlzU3RhdGljUmVxdWVzdCwgaXNSb3V0ZVJlcXVlc3QsIHJlcXVlc3RDb250ZXh0KSB7XG4gIGlmIChiYXNlbmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgYmFzZW5hbWUgPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChpc1N0YXRpY1JlcXVlc3QgPT09IHZvaWQgMCkge1xuICAgIGlzU3RhdGljUmVxdWVzdCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzUm91dGVSZXF1ZXN0ID09PSB2b2lkIDApIHtcbiAgICBpc1JvdXRlUmVxdWVzdCA9IGZhbHNlO1xuICB9XG5cbiAgbGV0IHJlc3VsdFR5cGU7XG4gIGxldCByZXN1bHQ7IC8vIFNldHVwIGEgcHJvbWlzZSB3ZSBjYW4gcmFjZSBhZ2FpbnN0IHNvIHRoYXQgYWJvcnQgc2lnbmFscyBzaG9ydCBjaXJjdWl0XG5cbiAgbGV0IHJlamVjdDtcbiAgbGV0IGFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTtcblxuICBsZXQgb25SZWplY3QgPSAoKSA9PiByZWplY3QoKTtcblxuICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25SZWplY3QpO1xuXG4gIHRyeSB7XG4gICAgbGV0IGhhbmRsZXIgPSBtYXRjaC5yb3V0ZVt0eXBlXTtcbiAgICBpbnZhcmlhbnQoaGFuZGxlciwgXCJDb3VsZCBub3QgZmluZCB0aGUgXCIgKyB0eXBlICsgXCIgdG8gcnVuIG9uIHRoZSBcXFwiXCIgKyBtYXRjaC5yb3V0ZS5pZCArIFwiXFxcIiByb3V0ZVwiKTtcbiAgICByZXN1bHQgPSBhd2FpdCBQcm9taXNlLnJhY2UoW2hhbmRsZXIoe1xuICAgICAgcmVxdWVzdCxcbiAgICAgIHBhcmFtczogbWF0Y2gucGFyYW1zLFxuICAgICAgY29udGV4dDogcmVxdWVzdENvbnRleHRcbiAgICB9KSwgYWJvcnRQcm9taXNlXSk7XG4gICAgaW52YXJpYW50KHJlc3VsdCAhPT0gdW5kZWZpbmVkLCBcIllvdSBkZWZpbmVkIFwiICsgKHR5cGUgPT09IFwiYWN0aW9uXCIgPyBcImFuIGFjdGlvblwiIDogXCJhIGxvYWRlclwiKSArIFwiIGZvciByb3V0ZSBcIiArIChcIlxcXCJcIiArIG1hdGNoLnJvdXRlLmlkICsgXCJcXFwiIGJ1dCBkaWRuJ3QgcmV0dXJuIGFueXRoaW5nIGZyb20geW91ciBgXCIgKyB0eXBlICsgXCJgIFwiKSArIFwiZnVuY3Rpb24uIFBsZWFzZSByZXR1cm4gYSB2YWx1ZSBvciBgbnVsbGAuXCIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmVzdWx0VHlwZSA9IFJlc3VsdFR5cGUuZXJyb3I7XG4gICAgcmVzdWx0ID0gZTtcbiAgfSBmaW5hbGx5IHtcbiAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25SZWplY3QpO1xuICB9XG5cbiAgaWYgKGlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgIGxldCBzdGF0dXMgPSByZXN1bHQuc3RhdHVzOyAvLyBQcm9jZXNzIHJlZGlyZWN0c1xuXG4gICAgaWYgKHJlZGlyZWN0U3RhdHVzQ29kZXMuaGFzKHN0YXR1cykpIHtcbiAgICAgIGxldCBsb2NhdGlvbiA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICAgICAgaW52YXJpYW50KGxvY2F0aW9uLCBcIlJlZGlyZWN0cyByZXR1cm5lZC90aHJvd24gZnJvbSBsb2FkZXJzL2FjdGlvbnMgbXVzdCBoYXZlIGEgTG9jYXRpb24gaGVhZGVyXCIpOyAvLyBTdXBwb3J0IHJlbGF0aXZlIHJvdXRpbmcgaW4gaW50ZXJuYWwgcmVkaXJlY3RzXG5cbiAgICAgIGlmICghQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QobG9jYXRpb24pKSB7XG4gICAgICAgIGxldCBhY3RpdmVNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgwLCBtYXRjaGVzLmluZGV4T2YobWF0Y2gpICsgMSk7XG4gICAgICAgIGxldCByb3V0ZVBhdGhuYW1lcyA9IGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKGFjdGl2ZU1hdGNoZXMpLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpO1xuICAgICAgICBsZXQgcmVzb2x2ZWRMb2NhdGlvbiA9IHJlc29sdmVUbyhsb2NhdGlvbiwgcm91dGVQYXRobmFtZXMsIG5ldyBVUkwocmVxdWVzdC51cmwpLnBhdGhuYW1lKTtcbiAgICAgICAgaW52YXJpYW50KGNyZWF0ZVBhdGgocmVzb2x2ZWRMb2NhdGlvbiksIFwiVW5hYmxlIHRvIHJlc29sdmUgcmVkaXJlY3QgbG9jYXRpb246IFwiICsgbG9jYXRpb24pOyAvLyBQcmVwZW5kIHRoZSBiYXNlbmFtZSB0byB0aGUgcmVkaXJlY3QgbG9jYXRpb24gaWYgd2UgaGF2ZSBvbmVcblxuICAgICAgICBpZiAoYmFzZW5hbWUpIHtcbiAgICAgICAgICBsZXQgcGF0aCA9IHJlc29sdmVkTG9jYXRpb24ucGF0aG5hbWU7XG4gICAgICAgICAgcmVzb2x2ZWRMb2NhdGlvbi5wYXRobmFtZSA9IHBhdGggPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoXSk7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhdGlvbiA9IGNyZWF0ZVBhdGgocmVzb2x2ZWRMb2NhdGlvbik7XG4gICAgICB9IGVsc2UgaWYgKCFpc1N0YXRpY1JlcXVlc3QpIHtcbiAgICAgICAgLy8gU3RyaXAgb2ZmIHRoZSBwcm90b2NvbCtvcmlnaW4gZm9yIHNhbWUtb3JpZ2luICsgc2FtZS1iYXNlbmFtZSBhYnNvbHV0ZVxuICAgICAgICAvLyByZWRpcmVjdHMuIElmIHRoaXMgaXMgYSBzdGF0aWMgcmVxdWVzdCwgd2UgY2FuIGxldCBpdCBnbyBiYWNrIHRvIHRoZVxuICAgICAgICAvLyBicm93c2VyIGFzLWlzXG4gICAgICAgIGxldCBjdXJyZW50VXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgICAgIGxldCB1cmwgPSBsb2NhdGlvbi5zdGFydHNXaXRoKFwiLy9cIikgPyBuZXcgVVJMKGN1cnJlbnRVcmwucHJvdG9jb2wgKyBsb2NhdGlvbikgOiBuZXcgVVJMKGxvY2F0aW9uKTtcbiAgICAgICAgbGV0IGlzU2FtZUJhc2VuYW1lID0gc3RyaXBCYXNlbmFtZSh1cmwucGF0aG5hbWUsIGJhc2VuYW1lKSAhPSBudWxsO1xuXG4gICAgICAgIGlmICh1cmwub3JpZ2luID09PSBjdXJyZW50VXJsLm9yaWdpbiAmJiBpc1NhbWVCYXNlbmFtZSkge1xuICAgICAgICAgIGxvY2F0aW9uID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaCArIHVybC5oYXNoO1xuICAgICAgICB9XG4gICAgICB9IC8vIERvbid0IHByb2Nlc3MgcmVkaXJlY3RzIGluIHRoZSByb3V0ZXIgZHVyaW5nIHN0YXRpYyByZXF1ZXN0cyByZXF1ZXN0cy5cbiAgICAgIC8vIEluc3RlYWQsIHRocm93IHRoZSBSZXNwb25zZSBhbmQgbGV0IHRoZSBzZXJ2ZXIgaGFuZGxlIGl0IHdpdGggYW4gSFRUUFxuICAgICAgLy8gcmVkaXJlY3QuICBXZSBhbHNvIHVwZGF0ZSB0aGUgTG9jYXRpb24gaGVhZGVyIGluIHBsYWNlIGluIHRoaXMgZmxvdyBzb1xuICAgICAgLy8gYmFzZW5hbWUgYW5kIHJlbGF0aXZlIHJvdXRpbmcgaXMgdGFrZW4gaW50byBhY2NvdW50XG5cblxuICAgICAgaWYgKGlzU3RhdGljUmVxdWVzdCkge1xuICAgICAgICByZXN1bHQuaGVhZGVycy5zZXQoXCJMb2NhdGlvblwiLCBsb2NhdGlvbik7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5yZWRpcmVjdCxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgcmV2YWxpZGF0ZTogcmVzdWx0LmhlYWRlcnMuZ2V0KFwiWC1SZW1peC1SZXZhbGlkYXRlXCIpICE9PSBudWxsXG4gICAgICB9O1xuICAgIH0gLy8gRm9yIFNTUiBzaW5nbGUtcm91dGUgcmVxdWVzdHMsIHdlIHdhbnQgdG8gaGFuZCBSZXNwb25zZXMgYmFjayBkaXJlY3RseVxuICAgIC8vIHdpdGhvdXQgdW53cmFwcGluZy4gIFdlIGRvIHRoaXMgd2l0aCB0aGUgUXVlcnlSb3V0ZVJlc3BvbnNlIHdyYXBwZXJcbiAgICAvLyBpbnRlcmZhY2Ugc28gd2UgY2FuIGtub3cgd2hldGhlciBpdCB3YXMgcmV0dXJuZWQgb3IgdGhyb3duXG5cblxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgICAgIHRocm93IHtcbiAgICAgICAgdHlwZTogcmVzdWx0VHlwZSB8fCBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgIHJlc3BvbnNlOiByZXN1bHRcbiAgICAgIH07XG4gICAgfVxuXG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGNvbnRlbnRUeXBlID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpOyAvLyBDaGVjayBiZXR3ZWVuIHdvcmQgYm91bmRhcmllcyBpbnN0ZWFkIG9mIHN0YXJ0c1dpdGgoKSBkdWUgdG8gdGhlIGxhc3RcbiAgICAvLyBwYXJhZ3JhcGggb2YgaHR0cHM6Ly9odHRwd2cub3JnL3NwZWNzL3JmYzkxMTAuaHRtbCNmaWVsZC5jb250ZW50LXR5cGVcblxuICAgIGlmIChjb250ZW50VHlwZSAmJiAvXFxiYXBwbGljYXRpb25cXC9qc29uXFxiLy50ZXN0KGNvbnRlbnRUeXBlKSkge1xuICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC5qc29uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBhd2FpdCByZXN1bHQudGV4dCgpO1xuICAgIH1cblxuICAgIGlmIChyZXN1bHRUeXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiByZXN1bHRUeXBlLFxuICAgICAgICBlcnJvcjogbmV3IEVycm9yUmVzcG9uc2Uoc3RhdHVzLCByZXN1bHQuc3RhdHVzVGV4dCwgZGF0YSksXG4gICAgICAgIGhlYWRlcnM6IHJlc3VsdC5oZWFkZXJzXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICBkYXRhLFxuICAgICAgc3RhdHVzQ29kZTogcmVzdWx0LnN0YXR1cyxcbiAgICAgIGhlYWRlcnM6IHJlc3VsdC5oZWFkZXJzXG4gICAgfTtcbiAgfVxuXG4gIGlmIChyZXN1bHRUeXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IHJlc3VsdFR5cGUsXG4gICAgICBlcnJvcjogcmVzdWx0XG4gICAgfTtcbiAgfVxuXG4gIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBEZWZlcnJlZERhdGEpIHtcbiAgICB2YXIgX3Jlc3VsdCRpbml0LCBfcmVzdWx0JGluaXQyO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGVmZXJyZWQsXG4gICAgICBkZWZlcnJlZERhdGE6IHJlc3VsdCxcbiAgICAgIHN0YXR1c0NvZGU6IChfcmVzdWx0JGluaXQgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdC5zdGF0dXMsXG4gICAgICBoZWFkZXJzOiAoKF9yZXN1bHQkaW5pdDIgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdDIuaGVhZGVycykgJiYgbmV3IEhlYWRlcnMocmVzdWx0LmluaXQuaGVhZGVycylcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0XG4gIH07XG59IC8vIFV0aWxpdHkgbWV0aG9kIGZvciBjcmVhdGluZyB0aGUgUmVxdWVzdCBpbnN0YW5jZXMgZm9yIGxvYWRlcnMvYWN0aW9ucyBkdXJpbmdcbi8vIGNsaWVudC1zaWRlIG5hdmlnYXRpb25zIGFuZCBmZXRjaGVzLiAgRHVyaW5nIFNTUiB3ZSB3aWxsIGFsd2F5cyBoYXZlIGFcbi8vIFJlcXVlc3QgaW5zdGFuY2UgZnJvbSB0aGUgc3RhdGljIGhhbmRsZXIgKHF1ZXJ5L3F1ZXJ5Um91dGUpXG5cblxuZnVuY3Rpb24gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaGlzdG9yeSwgbG9jYXRpb24sIHNpZ25hbCwgc3VibWlzc2lvbikge1xuICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVVUkwoc3RyaXBIYXNoRnJvbVBhdGgobG9jYXRpb24pKS50b1N0cmluZygpO1xuICBsZXQgaW5pdCA9IHtcbiAgICBzaWduYWxcbiAgfTtcblxuICBpZiAoc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICBsZXQge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGFcbiAgICB9ID0gc3VibWlzc2lvbjtcbiAgICBpbml0Lm1ldGhvZCA9IGZvcm1NZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICBpbml0LmJvZHkgPSBmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiA/IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKGZvcm1EYXRhKSA6IGZvcm1EYXRhO1xuICB9IC8vIENvbnRlbnQtVHlwZSBpcyBpbmZlcnJlZCAoaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0KVxuXG5cbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHVybCwgaW5pdCk7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKGZvcm1EYXRhKSB7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG5cbiAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIGZvcm1EYXRhLmVudHJpZXMoKSkge1xuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2NvbnZlcnRpbmctYW4tZW50cnktbGlzdC10by1hLWxpc3Qtb2YtbmFtZS12YWx1ZS1wYWlyc1xuICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSBpbnN0YW5jZW9mIEZpbGUgPyB2YWx1ZS5uYW1lIDogdmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nRXJyb3IsIGFjdGl2ZURlZmVycmVkcykge1xuICAvLyBGaWxsIGluIGxvYWRlckRhdGEvZXJyb3JzIGZyb20gb3VyIGxvYWRlcnNcbiAgbGV0IGxvYWRlckRhdGEgPSB7fTtcbiAgbGV0IGVycm9ycyA9IG51bGw7XG4gIGxldCBzdGF0dXNDb2RlO1xuICBsZXQgZm91bmRFcnJvciA9IGZhbHNlO1xuICBsZXQgbG9hZGVySGVhZGVycyA9IHt9OyAvLyBQcm9jZXNzIGxvYWRlciByZXN1bHRzIGludG8gc3RhdGUubG9hZGVyRGF0YS9zdGF0ZS5lcnJvcnNcblxuICByZXN1bHRzLmZvckVhY2goKHJlc3VsdCwgaW5kZXgpID0+IHtcbiAgICBsZXQgaWQgPSBtYXRjaGVzVG9Mb2FkW2luZGV4XS5yb3V0ZS5pZDtcbiAgICBpbnZhcmlhbnQoIWlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSwgXCJDYW5ub3QgaGFuZGxlIHJlZGlyZWN0IHJlc3VsdHMgaW4gcHJvY2Vzc0xvYWRlckRhdGFcIik7XG5cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBMb29rIHVwd2FyZHMgZnJvbSB0aGUgbWF0Y2hlZCByb3V0ZSBmb3IgdGhlIGNsb3Nlc3QgYW5jZXN0b3JcbiAgICAgIC8vIGVycm9yIGJvdW5kYXJ5LCBkZWZhdWx0aW5nIHRvIHRoZSByb290IG1hdGNoXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgaWQpO1xuICAgICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9yOyAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZyBhY3Rpb24gZXJyb3IsIHdlIHJlcG9ydCBpdCBhdCB0aGUgaGlnaGVzdC1yb3V0ZVxuICAgICAgLy8gdGhhdCB0aHJvd3MgYSBsb2FkZXIgZXJyb3IsIGFuZCB0aGVuIGNsZWFyIGl0IG91dCB0byBpbmRpY2F0ZSB0aGF0XG4gICAgICAvLyBpdCB3YXMgY29uc3VtZWRcblxuICAgICAgaWYgKHBlbmRpbmdFcnJvcikge1xuICAgICAgICBlcnJvciA9IE9iamVjdC52YWx1ZXMocGVuZGluZ0Vycm9yKVswXTtcbiAgICAgICAgcGVuZGluZ0Vycm9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBlcnJvcnMgPSBlcnJvcnMgfHwge307IC8vIFByZWZlciBoaWdoZXIgZXJyb3IgdmFsdWVzIGlmIGxvd2VyIGVycm9ycyBidWJibGUgdG8gdGhlIHNhbWUgYm91bmRhcnlcblxuICAgICAgaWYgKGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSA9PSBudWxsKSB7XG4gICAgICAgIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSA9IGVycm9yO1xuICAgICAgfSAvLyBDbGVhciBvdXIgYW55IHByaW9yIGxvYWRlckRhdGEgZm9yIHRoZSB0aHJvd2luZyByb3V0ZVxuXG5cbiAgICAgIGxvYWRlckRhdGFbaWRdID0gdW5kZWZpbmVkOyAvLyBPbmNlIHdlIGZpbmQgb3VyIGZpcnN0IChoaWdoZXN0KSBlcnJvciwgd2Ugc2V0IHRoZSBzdGF0dXMgY29kZSBhbmRcbiAgICAgIC8vIHByZXZlbnQgZGVlcGVyIHN0YXR1cyBjb2RlcyBmcm9tIG92ZXJyaWRpbmdcblxuICAgICAgaWYgKCFmb3VuZEVycm9yKSB7XG4gICAgICAgIGZvdW5kRXJyb3IgPSB0cnVlO1xuICAgICAgICBzdGF0dXNDb2RlID0gaXNSb3V0ZUVycm9yUmVzcG9uc2UocmVzdWx0LmVycm9yKSA/IHJlc3VsdC5lcnJvci5zdGF0dXMgOiA1MDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXN1bHQuaGVhZGVycykge1xuICAgICAgICBsb2FkZXJIZWFkZXJzW2lkXSA9IHJlc3VsdC5oZWFkZXJzO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5zZXQoaWQsIHJlc3VsdC5kZWZlcnJlZERhdGEpO1xuICAgICAgICBsb2FkZXJEYXRhW2lkXSA9IHJlc3VsdC5kZWZlcnJlZERhdGEuZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRlckRhdGFbaWRdID0gcmVzdWx0LmRhdGE7XG4gICAgICB9IC8vIEVycm9yIHN0YXR1cyBjb2RlcyBhbHdheXMgb3ZlcnJpZGUgc3VjY2VzcyBzdGF0dXMgY29kZXMsIGJ1dCBpZiBhbGxcbiAgICAgIC8vIGxvYWRlcnMgYXJlIHN1Y2Nlc3NmdWwgd2UgdGFrZSB0aGUgZGVlcGVzdCBzdGF0dXMgY29kZS5cblxuXG4gICAgICBpZiAocmVzdWx0LnN0YXR1c0NvZGUgIT0gbnVsbCAmJiByZXN1bHQuc3RhdHVzQ29kZSAhPT0gMjAwICYmICFmb3VuZEVycm9yKSB7XG4gICAgICAgIHN0YXR1c0NvZGUgPSByZXN1bHQuc3RhdHVzQ29kZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfVxuICB9KTsgLy8gSWYgd2UgZGlkbid0IGNvbnN1bWUgdGhlIHBlbmRpbmcgYWN0aW9uIGVycm9yIChpLmUuLCBhbGwgbG9hZGVyc1xuICAvLyByZXNvbHZlZCksIHRoZW4gY29uc3VtZSBpdCBoZXJlLiAgQWxzbyBjbGVhciBvdXQgYW55IGxvYWRlckRhdGEgZm9yIHRoZVxuICAvLyB0aHJvd2luZyByb3V0ZVxuXG4gIGlmIChwZW5kaW5nRXJyb3IpIHtcbiAgICBlcnJvcnMgPSBwZW5kaW5nRXJyb3I7XG4gICAgbG9hZGVyRGF0YVtPYmplY3Qua2V5cyhwZW5kaW5nRXJyb3IpWzBdXSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnMsXG4gICAgc3RhdHVzQ29kZTogc3RhdHVzQ29kZSB8fCAyMDAsXG4gICAgbG9hZGVySGVhZGVyc1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcykge1xuICBsZXQge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH0gPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdFcnJvciwgYWN0aXZlRGVmZXJyZWRzKTsgLy8gUHJvY2VzcyByZXN1bHRzIGZyb20gb3VyIHJldmFsaWRhdGluZyBmZXRjaGVyc1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBsZXQge1xuICAgICAga2V5LFxuICAgICAgbWF0Y2hcbiAgICB9ID0gcmV2YWxpZGF0aW5nRmV0Y2hlcnNbaW5kZXhdO1xuICAgIGludmFyaWFudChmZXRjaGVyUmVzdWx0cyAhPT0gdW5kZWZpbmVkICYmIGZldGNoZXJSZXN1bHRzW2luZGV4XSAhPT0gdW5kZWZpbmVkLCBcIkRpZCBub3QgZmluZCBjb3JyZXNwb25kaW5nIGZldGNoZXIgcmVzdWx0XCIpO1xuICAgIGxldCByZXN1bHQgPSBmZXRjaGVyUmVzdWx0c1tpbmRleF07IC8vIFByb2Nlc3MgZmV0Y2hlciBub24tcmVkaXJlY3QgZXJyb3JzXG5cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgbWF0Y2ggPT0gbnVsbCA/IHZvaWQgMCA6IG1hdGNoLnJvdXRlLmlkKTtcblxuICAgICAgaWYgKCEoZXJyb3JzICYmIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSkpIHtcbiAgICAgICAgZXJyb3JzID0gX2V4dGVuZHMoe30sIGVycm9ycywge1xuICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICB9IGVsc2UgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLCByZWRpcmVjdHMgc2hvdWxkIGdldCBwcm9jZXNzZWQgYWJvdmUsIGJ1dCB3ZVxuICAgICAgLy8ga2VlcCB0aGlzIHRvIHR5cGUgbmFycm93IHRvIGEgc3VjY2VzcyByZXN1bHQgaW4gdGhlIGVsc2VcbiAgICAgIGludmFyaWFudChmYWxzZSwgXCJVbmhhbmRsZWQgZmV0Y2hlciByZXZhbGlkYXRpb24gcmVkaXJlY3RcIik7XG4gICAgfSBlbHNlIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFNob3VsZCBuZXZlciBnZXQgaGVyZSwgZGVmZXJyZWQgZGF0YSBzaG91bGQgYmUgYXdhaXRlZCBmb3IgZmV0Y2hlcnNcbiAgICAgIC8vIGluIHJlc29sdmVEZWZlcnJlZFJlc3VsdHNcbiAgICAgIGludmFyaWFudChmYWxzZSwgXCJVbmhhbmRsZWQgZmV0Y2hlciBkZWZlcnJlZCBkYXRhXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgZG9uZUZldGNoZXIgPSB7XG4gICAgICAgIHN0YXRlOiBcImlkbGVcIixcbiAgICAgICAgZGF0YTogcmVzdWx0LmRhdGEsXG4gICAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1lcmdlTG9hZGVyRGF0YShsb2FkZXJEYXRhLCBuZXdMb2FkZXJEYXRhLCBtYXRjaGVzLCBlcnJvcnMpIHtcbiAgbGV0IG1lcmdlZExvYWRlckRhdGEgPSBfZXh0ZW5kcyh7fSwgbmV3TG9hZGVyRGF0YSk7XG5cbiAgZm9yIChsZXQgbWF0Y2ggb2YgbWF0Y2hlcykge1xuICAgIGxldCBpZCA9IG1hdGNoLnJvdXRlLmlkO1xuXG4gICAgaWYgKG5ld0xvYWRlckRhdGEuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICBpZiAobmV3TG9hZGVyRGF0YVtpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtZXJnZWRMb2FkZXJEYXRhW2lkXSA9IG5ld0xvYWRlckRhdGFbaWRdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobG9hZGVyRGF0YVtpZF0gIT09IHVuZGVmaW5lZCAmJiBtYXRjaC5yb3V0ZS5sb2FkZXIpIHtcbiAgICAgIC8vIFByZXNlcnZlIGV4aXN0aW5nIGtleXMgbm90IGluY2x1ZGVkIGluIG5ld0xvYWRlckRhdGEgYW5kIHdoZXJlIGEgbG9hZGVyXG4gICAgICAvLyB3YXNuJ3QgcmVtb3ZlZCBieSBITVJcbiAgICAgIG1lcmdlZExvYWRlckRhdGFbaWRdID0gbG9hZGVyRGF0YVtpZF07XG4gICAgfVxuXG4gICAgaWYgKGVycm9ycyAmJiBlcnJvcnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAvLyBEb24ndCBrZWVwIGFueSBsb2FkZXIgZGF0YSBiZWxvdyB0aGUgYm91bmRhcnlcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtZXJnZWRMb2FkZXJEYXRhO1xufSAvLyBGaW5kIHRoZSBuZWFyZXN0IGVycm9yIGJvdW5kYXJ5LCBsb29raW5nIHVwd2FyZHMgZnJvbSB0aGUgbGVhZiByb3V0ZSAob3IgdGhlXG4vLyByb3V0ZSBzcGVjaWZpZWQgYnkgcm91dGVJZCkgZm9yIHRoZSBjbG9zZXN0IGFuY2VzdG9yIGVycm9yIGJvdW5kYXJ5LFxuLy8gZGVmYXVsdGluZyB0byB0aGUgcm9vdCBtYXRjaFxuXG5cbmZ1bmN0aW9uIGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgcm91dGVJZCkge1xuICBsZXQgZWxpZ2libGVNYXRjaGVzID0gcm91dGVJZCA/IG1hdGNoZXMuc2xpY2UoMCwgbWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSArIDEpIDogWy4uLm1hdGNoZXNdO1xuICByZXR1cm4gZWxpZ2libGVNYXRjaGVzLnJldmVyc2UoKS5maW5kKG0gPT4gbS5yb3V0ZS5oYXNFcnJvckJvdW5kYXJ5ID09PSB0cnVlKSB8fCBtYXRjaGVzWzBdO1xufVxuXG5mdW5jdGlvbiBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlcykge1xuICAvLyBQcmVmZXIgYSByb290IGxheW91dCByb3V0ZSBpZiBwcmVzZW50LCBvdGhlcndpc2Ugc2hpbSBpbiBhIHJvdXRlIG9iamVjdFxuICBsZXQgcm91dGUgPSByb3V0ZXMuZmluZChyID0+IHIuaW5kZXggfHwgIXIucGF0aCB8fCByLnBhdGggPT09IFwiL1wiKSB8fCB7XG4gICAgaWQ6IFwiX19zaGltLWVycm9yLXJvdXRlX19cIlxuICB9O1xuICByZXR1cm4ge1xuICAgIG1hdGNoZXM6IFt7XG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgcGF0aG5hbWU6IFwiXCIsXG4gICAgICBwYXRobmFtZUJhc2U6IFwiXCIsXG4gICAgICByb3V0ZVxuICAgIH1dLFxuICAgIHJvdXRlXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEludGVybmFsUm91dGVyRXJyb3Ioc3RhdHVzLCBfdGVtcDQpIHtcbiAgbGV0IHtcbiAgICBwYXRobmFtZSxcbiAgICByb3V0ZUlkLFxuICAgIG1ldGhvZCxcbiAgICB0eXBlXG4gIH0gPSBfdGVtcDQgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA0O1xuICBsZXQgc3RhdHVzVGV4dCA9IFwiVW5rbm93biBTZXJ2ZXIgRXJyb3JcIjtcbiAgbGV0IGVycm9yTWVzc2FnZSA9IFwiVW5rbm93biBAcmVtaXgtcnVuL3JvdXRlciBlcnJvclwiO1xuXG4gIGlmIChzdGF0dXMgPT09IDQwMCkge1xuICAgIHN0YXR1c1RleHQgPSBcIkJhZCBSZXF1ZXN0XCI7XG5cbiAgICBpZiAobWV0aG9kICYmIHBhdGhuYW1lICYmIHJvdXRlSWQpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiWW91IG1hZGUgYSBcIiArIG1ldGhvZCArIFwiIHJlcXVlc3QgdG8gXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCIgYnV0IFwiICsgKFwiZGlkIG5vdCBwcm92aWRlIGEgYGxvYWRlcmAgZm9yIHJvdXRlIFxcXCJcIiArIHJvdXRlSWQgKyBcIlxcXCIsIFwiKSArIFwic28gdGhlcmUgaXMgbm8gd2F5IHRvIGhhbmRsZSB0aGUgcmVxdWVzdC5cIjtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiZGVmZXItYWN0aW9uXCIpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiZGVmZXIoKSBpcyBub3Qgc3VwcG9ydGVkIGluIGFjdGlvbnNcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDMpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJGb3JiaWRkZW5cIjtcbiAgICBlcnJvck1lc3NhZ2UgPSBcIlJvdXRlIFxcXCJcIiArIHJvdXRlSWQgKyBcIlxcXCIgZG9lcyBub3QgbWF0Y2ggVVJMIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiXCI7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDQpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJOb3QgRm91bmRcIjtcbiAgICBlcnJvck1lc3NhZ2UgPSBcIk5vIHJvdXRlIG1hdGNoZXMgVVJMIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiXCI7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDUpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJNZXRob2QgTm90IEFsbG93ZWRcIjtcblxuICAgIGlmIChtZXRob2QgJiYgcGF0aG5hbWUgJiYgcm91dGVJZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJZb3UgbWFkZSBhIFwiICsgbWV0aG9kLnRvVXBwZXJDYXNlKCkgKyBcIiByZXF1ZXN0IHRvIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiIGJ1dCBcIiArIChcImRpZCBub3QgcHJvdmlkZSBhbiBgYWN0aW9uYCBmb3Igcm91dGUgXFxcIlwiICsgcm91dGVJZCArIFwiXFxcIiwgXCIpICsgXCJzbyB0aGVyZSBpcyBubyB3YXkgdG8gaGFuZGxlIHRoZSByZXF1ZXN0LlwiO1xuICAgIH0gZWxzZSBpZiAobWV0aG9kKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgcmVxdWVzdCBtZXRob2QgXFxcIlwiICsgbWV0aG9kLnRvVXBwZXJDYXNlKCkgKyBcIlxcXCJcIjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IEVycm9yUmVzcG9uc2Uoc3RhdHVzIHx8IDUwMCwgc3RhdHVzVGV4dCwgbmV3IEVycm9yKGVycm9yTWVzc2FnZSksIHRydWUpO1xufSAvLyBGaW5kIGFueSByZXR1cm5lZCByZWRpcmVjdCBlcnJvcnMsIHN0YXJ0aW5nIGZyb20gdGhlIGxvd2VzdCBtYXRjaFxuXG5cbmZ1bmN0aW9uIGZpbmRSZWRpcmVjdChyZXN1bHRzKSB7XG4gIGZvciAobGV0IGkgPSByZXN1bHRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaV07XG5cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzdHJpcEhhc2hGcm9tUGF0aChwYXRoKSB7XG4gIGxldCBwYXJzZWRQYXRoID0gdHlwZW9mIHBhdGggPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgocGF0aCkgOiBwYXRoO1xuICByZXR1cm4gY3JlYXRlUGF0aChfZXh0ZW5kcyh7fSwgcGFyc2VkUGF0aCwge1xuICAgIGhhc2g6IFwiXCJcbiAgfSkpO1xufVxuXG5mdW5jdGlvbiBpc0hhc2hDaGFuZ2VPbmx5KGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCAhPT0gYi5oYXNoO1xufVxuXG5mdW5jdGlvbiBpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gcmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZGVmZXJyZWQ7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3JSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiByZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcjtcbn1cblxuZnVuY3Rpb24gaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIChyZXN1bHQgJiYgcmVzdWx0LnR5cGUpID09PSBSZXN1bHRUeXBlLnJlZGlyZWN0O1xufVxuXG5mdW5jdGlvbiBpc1Jlc3BvbnNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZS5zdGF0dXMgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIHZhbHVlLnN0YXR1c1RleHQgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHZhbHVlLmhlYWRlcnMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlLmJvZHkgIT09IFwidW5kZWZpbmVkXCI7XG59XG5cbmZ1bmN0aW9uIGlzUmVkaXJlY3RSZXNwb25zZShyZXN1bHQpIHtcbiAgaWYgKCFpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBsZXQgc3RhdHVzID0gcmVzdWx0LnN0YXR1cztcbiAgbGV0IGxvY2F0aW9uID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIik7XG4gIHJldHVybiBzdGF0dXMgPj0gMzAwICYmIHN0YXR1cyA8PSAzOTkgJiYgbG9jYXRpb24gIT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNRdWVyeVJvdXRlUmVzcG9uc2Uob2JqKSB7XG4gIHJldHVybiBvYmogJiYgaXNSZXNwb25zZShvYmoucmVzcG9uc2UpICYmIChvYmoudHlwZSA9PT0gUmVzdWx0VHlwZS5kYXRhIHx8IFJlc3VsdFR5cGUuZXJyb3IpO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkTWV0aG9kKG1ldGhvZCkge1xuICByZXR1cm4gdmFsaWRSZXF1ZXN0TWV0aG9kcy5oYXMobWV0aG9kKTtcbn1cblxuZnVuY3Rpb24gaXNNdXRhdGlvbk1ldGhvZChtZXRob2QpIHtcbiAgcmV0dXJuIHZhbGlkTXV0YXRpb25NZXRob2RzLmhhcyhtZXRob2QpO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBzaWduYWwsIGlzRmV0Y2hlciwgY3VycmVudExvYWRlckRhdGEpIHtcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJlc3VsdHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaW5kZXhdO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdOyAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgbWF0Y2gsIHRoZW4gd2UgY2FuIGhhdmUgYSBkZWZlcnJlZCByZXN1bHQgdG8gZG9cbiAgICAvLyBhbnl0aGluZyB3aXRoLiAgVGhpcyBpcyBmb3IgcmV2YWxpZGF0aW5nIGZldGNoZXJzIHdoZXJlIHRoZSByb3V0ZSB3YXNcbiAgICAvLyByZW1vdmVkIGR1cmluZyBITVJcblxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGxldCBjdXJyZW50TWF0Y2ggPSBjdXJyZW50TWF0Y2hlcy5maW5kKG0gPT4gbS5yb3V0ZS5pZCA9PT0gbWF0Y2gucm91dGUuaWQpO1xuICAgIGxldCBpc1JldmFsaWRhdGluZ0xvYWRlciA9IGN1cnJlbnRNYXRjaCAhPSBudWxsICYmICFpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudE1hdGNoLCBtYXRjaCkgJiYgKGN1cnJlbnRMb2FkZXJEYXRhICYmIGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSkgIT09IHVuZGVmaW5lZDtcblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkgJiYgKGlzRmV0Y2hlciB8fCBpc1JldmFsaWRhdGluZ0xvYWRlcikpIHtcbiAgICAgIC8vIE5vdGU6IHdlIGRvIG5vdCBoYXZlIHRvIHRvdWNoIGFjdGl2ZURlZmVycmVkcyBoZXJlIHNpbmNlIHdlIHJhY2UgdGhlbVxuICAgICAgLy8gYWdhaW5zdCB0aGUgc2lnbmFsIGluIHJlc29sdmVEZWZlcnJlZERhdGEgYW5kIHRoZXknbGwgZ2V0IGFib3J0ZWRcbiAgICAgIC8vIHRoZXJlIGlmIG5lZWRlZFxuICAgICAgYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIHNpZ25hbCwgaXNGZXRjaGVyKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IHJlc3VsdCB8fCByZXN1bHRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBzaWduYWwsIHVud3JhcCkge1xuICBpZiAodW53cmFwID09PSB2b2lkIDApIHtcbiAgICB1bndyYXAgPSBmYWxzZTtcbiAgfVxuXG4gIGxldCBhYm9ydGVkID0gYXdhaXQgcmVzdWx0LmRlZmVycmVkRGF0YS5yZXNvbHZlRGF0YShzaWduYWwpO1xuXG4gIGlmIChhYm9ydGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHVud3JhcCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEudW53cmFwcGVkRGF0YVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBIYW5kbGUgYW55IFRyYWNrZWRQcm9taXNlLl9lcnJvciB2YWx1ZXMgZW5jb3VudGVyZWQgd2hpbGUgdW53cmFwcGluZ1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGVcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhXG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2gpIHtcbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMoc2VhcmNoKS5nZXRBbGwoXCJpbmRleFwiKS5zb21lKHYgPT4gdiA9PT0gXCJcIik7XG59IC8vIE5vdGU6IFRoaXMgc2hvdWxkIG1hdGNoIHRoZSBmb3JtYXQgZXhwb3J0ZWQgYnkgdXNlTWF0Y2hlcywgc28gaWYgeW91IGNoYW5nZVxuLy8gdGhpcyBwbGVhc2UgYWxzbyBjaGFuZ2UgdGhhdCA6KSAgRXZlbnR1YWxseSB3ZSdsbCBEUlkgdGhpcyB1cFxuXG5cbmZ1bmN0aW9uIGNyZWF0ZVVzZU1hdGNoZXNNYXRjaChtYXRjaCwgbG9hZGVyRGF0YSkge1xuICBsZXQge1xuICAgIHJvdXRlLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtc1xuICB9ID0gbWF0Y2g7XG4gIHJldHVybiB7XG4gICAgaWQ6IHJvdXRlLmlkLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtcyxcbiAgICBkYXRhOiBsb2FkZXJEYXRhW3JvdXRlLmlkXSxcbiAgICBoYW5kbGU6IHJvdXRlLmhhbmRsZVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbikge1xuICBsZXQgc2VhcmNoID0gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uKS5zZWFyY2ggOiBsb2NhdGlvbi5zZWFyY2g7XG5cbiAgaWYgKG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5pbmRleCAmJiBoYXNOYWtlZEluZGV4UXVlcnkoc2VhcmNoIHx8IFwiXCIpKSB7XG4gICAgLy8gUmV0dXJuIHRoZSBsZWFmIGluZGV4IHJvdXRlIHdoZW4gaW5kZXggaXMgcHJlc2VudFxuICAgIHJldHVybiBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIH0gLy8gT3RoZXJ3aXNlIGdyYWIgdGhlIGRlZXBlc3QgXCJwYXRoIGNvbnRyaWJ1dGluZ1wiIG1hdGNoIChpZ25vcmluZyBpbmRleCBhbmRcbiAgLy8gcGF0aGxlc3MgbGF5b3V0IHJvdXRlcylcblxuXG4gIGxldCBwYXRoTWF0Y2hlcyA9IGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpO1xuICByZXR1cm4gcGF0aE1hdGNoZXNbcGF0aE1hdGNoZXMubGVuZ3RoIC0gMV07XG59IC8vI2VuZHJlZ2lvblxuXG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQWN0aW9uLCBFcnJvclJlc3BvbnNlLCBJRExFX0JMT0NLRVIsIElETEVfRkVUQ0hFUiwgSURMRV9OQVZJR0FUSU9OLCBVTlNBRkVfREVGRVJSRURfU1lNQk9MLCBEZWZlcnJlZERhdGEgYXMgVU5TQUZFX0RlZmVycmVkRGF0YSwgY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyBhcyBVTlNBRkVfY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcywgZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMgYXMgVU5TQUZFX2dldFBhdGhDb250cmlidXRpbmdNYXRjaGVzLCBpbnZhcmlhbnQgYXMgVU5TQUZFX2ludmFyaWFudCwgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVQYXRoLCBjcmVhdGVSb3V0ZXIsIGNyZWF0ZVN0YXRpY0hhbmRsZXIsIGRlZmVyLCBnZW5lcmF0ZVBhdGgsIGdldFN0YXRpY0NvbnRleHRGcm9tRXJyb3IsIGdldFRvUGF0aG5hbWUsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBqb2luUGF0aHMsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIG5vcm1hbGl6ZVBhdGhuYW1lLCBwYXJzZVBhdGgsIHJlZGlyZWN0LCByZXNvbHZlUGF0aCwgcmVzb2x2ZVRvLCBzdHJpcEJhc2VuYW1lLCB3YXJuaW5nIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZXIuanMubWFwXG4iLCJpbXBvcnQgeyBjcmVhdGVHbG9iYWxTdHlsZSB9IGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuXG5leHBvcnQgY29uc3QgR2xvYmFsU3R5bGVzID0gY3JlYXRlR2xvYmFsU3R5bGVgXG5cbiAgYm9keSxcbiAgaHRtbCB7XG4gICAgbWFyZ2luOiAwO1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuXG4gIGJvZHkge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBtaW4taGVpZ2h0OiAxMDAlO1xuICAgIGZvbnQtZmFtaWx5OiBcIkludGVyXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZjtcbiAgICBmb250LXNpemU6IDE4cHg7XG4gICAgbGluZS1oZWlnaHQ6IDI3cHg7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBjb2xvcjogJHsocHJvcHMpID0+IHByb3BzLnRoZW1lLmNvbG9yQmxhY2t9O1xuICAgIHNjcm9sbGJhci1jb2xvcjogcmdiYSg0NCwgMTcxLCAyMSwgMC41KSByZ2JhKDQ0LCAxNzEsIDIxLCAwLjIpO1xuICAgIHNjcm9sbGJhci13aWR0aDogdGhpbjtcblxuICAgICY6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgICAgIHdpZHRoOiAxMHB4O1xuICAgICAgaGVpZ2h0OiA1cHg7XG4gICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgIH1cblxuICAgICY6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrLXBpZWNlIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNDQsIDE3MSwgMjEsIDAuMik7XG4gICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgICAgd2lkdGg6IDEwcHg7XG4gICAgfVxuXG4gICAgJjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6dmVydGljYWwge1xuICAgICAgaGVpZ2h0OiAzMHB4O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg0NCwgMTcxLCAyMSwgMC41KTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgfVxuICB9XG5cbiAgKixcbiAgKjo6YmVmb3JlLFxuICAqOjphZnRlciB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuXG4gIGEge1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgfVxuXG4gIGltZyxcbiAgdmlkZW8ge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgfVxuXG4gICNyb290IHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xuXG4gIGhlYWRlcixcbiAgZm9vdGVyIHtcbiAgICBmbGV4LXNocmluazogMDtcbiAgfVxuXG4gIG1haW4ge1xuICAgIGZsZXgtZ3JvdzogMTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIH1cbn1cbmA7XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuaW1wb3J0IENvbnRhaW5lciAgZnJvbSBcIi9zcmMvY29tcG9uZW50cy91aS9jb250YWluZXJcIjtcbmltcG9ydCB7IExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5leHBvcnQgY29uc3QgQXV0aG9yaXphdGlvbkNvbnRhaW5lciA9IHN0eWxlZChDb250YWluZXIpYFxuICBwYWRkaW5nLXRvcDogMTBweDtcbiAgcGFkZGluZy1ib3R0b206IDEwcHg7XG5cbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBlbmQ7XG5gO1xuXG5leHBvcnQgY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogMTBweDtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA2My45NGVtKSB7XG4gICAgZm9udC1zaXplOiAxNHB4O1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgQXV0TGluayA9IHN0eWxlZChMaW5rKWBcbiAgYmFja2dyb3VuZC1jb2xvcjogIzMzY2Y0OTtcbiAgcGFkZGluZzogMHB4IDZweDtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuXG4gIGNvbG9yOiAjZmZmZmZmO1xuICBmb250LXdlaWdodDogNTAwO1xuXG4gICY6aG92ZXIge1xuICAgIG9wYWNpdHk6IDAuNjtcbiAgfVxuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDQ3Ljk0ZW0pIHtcbiAgICAgICY6aG92ZXIge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBBdXRCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuICBwYWRkaW5nOiAwcHggNnB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjZWYxNjE2O1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG5cbiAgY29sb3I6ICNlZjE2MTY7XG4gIGZvbnQtc2l6ZTogMTRweDtcblxuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHVzZXItc2VsZWN0OiBub25lO1xuXG4gICY6aG92ZXIge1xuICAgIG9wYWNpdHk6IDAuNjtcbiAgfVxuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDQ3Ljk0ZW0pIHtcbiAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAmOmhvdmVyIHtcbiAgICAgIG9wYWNpdHk6IDE7XG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgQXV0TGlua1NpbmdJbiA9IHN0eWxlZChMaW5rKWBcbiAgcGFkZGluZzogMHB4IDZweDtcbiAgYm9yZGVyOiAxcHggc29saWQgIzBiM2RjYjtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuXG4gIGNvbG9yOiAjMGIzZGNiO1xuICBmb250LXNpemU6IDE0cHg7XG5cbiAgJjpob3ZlciB7XG4gICAgb3BhY2l0eTogMC42O1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgICAgJjpob3ZlciB7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgIH1cbiAgfVxuYDtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQgQ29udGFpbmVyIGZyb20gXCIvc3JjL2NvbXBvbmVudHMvdWkvY29udGFpbmVyXCI7XG5cbmV4cG9ydCBjb25zdCBGb290ZXJTdHlsZSA9IHN0eWxlZC5mb290ZXJgXG4gIHdpZHRoOiAxMDAlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjODE3YWJmO1xuYDtcblxuZXhwb3J0IGNvbnN0IENvbnRhaW5lckZvb3RlciA9IHN0eWxlZChDb250YWluZXIpYFxuICBwYWRkaW5nLXRvcDogMTBweDtcbiAgcGFkZGluZy1ib3R0b206IDEwcHg7XG5cbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuY29sb3JXaGl0ZX07XG5cbiAgZGlzcGxheTogZ3JpZDtcbiAganVzdGlmeS1jb250ZW50OiBlbmQ7XG5gO1xuIiwiaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcbmltcG9ydCBDb250YWluZXIgIGZyb20gXCIvc3JjL2NvbXBvbmVudHMvdWkvY29udGFpbmVyXCI7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IFBlcm1hbmVudE1hcmtlcjQwMCB9IGZyb20gXCIvc3JjL3N0eWxlL21peGluc1wiO1xuXG5leHBvcnQgY29uc3QgSGVhZGVyU3R5bGUgPSBzdHlsZWQuaGVhZGVyYFxuICB3aWR0aDogMTAwJTtcbiAgcG9zaXRpb246IHN0aWNreTtcbiAgdG9wOiAtMXB4O1xuICBsZWZ0OiAwO1xuICB6LWluZGV4OiAxO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmNvbG9yV2hpdGV9O1xuICBib3gtc2hhZG93OiAwcHggNnB4IDE4cHggMHB4ICNkNWQxZWE7XG5gO1xuXG5leHBvcnQgY29uc3QgSGVhZGVyQ29udGFpbmVyID0gc3R5bGVkKENvbnRhaW5lcilgXG4gIHBhZGRpbmctdG9wOiAyMHB4O1xuICBwYWRkaW5nLWJvdHRvbTogMjBweDtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNjMuOTRlbSkge1xuICAgIHBhZGRpbmctdG9wOiAxNXB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAxNXB4O1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgTGlua0xvZ28gPSBzdHlsZWQoTGluaylgXG4gICR7UGVybWFuZW50TWFya2VyNDAwfTtcbiAgZm9udC1zaXplOiAxLjVlbTtcbiAgY29sb3I6ICM4MTdhYmY7XG5cbiAgJjpob3ZlciB7XG4gICAgb3BhY2l0eTogMC41O1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgICY6aG92ZXIge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBMaW5rQ2FydCA9IHN0eWxlZChMaW5rKWBcbiAgcGFkZGluZzogMTBweDtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNjMWJkZTI7XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgJjpob3ZlciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuICAgIH1cbiAgfVxuYDtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQgeyBidXR0b25TIH0gZnJvbSBcIi9zcmMvc3R5bGUvbWl4aW5zXCI7XG5cbmV4cG9ydCBjb25zdCBCdXR0b25BY3RpdmVTdHlsZSA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9uU307XG5cbiAgYmFja2dyb3VuZC1jb2xvcjogIzU0OTcxNjtcbiAgYm9yZGVyOiAycHggc29saWQgIzU0OTcxNjtcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuY29sb3JXaGl0ZX07XG5gO1xuXG5leHBvcnQgY29uc3QgQnV0dG9uU3R5bGUgPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvblN9O1xuXG4gIGJvcmRlcjogMnB4IHNvbGlkICM1NDk3MTY7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuY29sb3JXaGl0ZX07XG4gIGNvbG9yOiAjNTQ5NzE2O1xuYDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgcmVtb3ZlUHJvZHVjdCB9IGZyb20gXCIvc3JjL2ZlYXR1cmVzL2Jhc2tldFNsaWNlXCI7XG5pbXBvcnQgeyBhZGRUb0Jhc2tldE9uZUJlZXIsIHJlbW92ZUZyb21CYXNrZXRPbmVCZWVyIH0gZnJvbSBcIi9zcmMvZmVhdHVyZXMvYmVlcnMtc2xpY2VcIjtcbmltcG9ydCAqIGFzIFMgZnJvbSBcIi4vc3R5bGVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIEJ1dHRvbkFjdGl2ZSh7IGJlZXJJZCwgY2xhc3NCIH0pIHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICByZXR1cm4oXG4gICAgPFMuQnV0dG9uQWN0aXZlU3R5bGVcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NCfVxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHJlbW92ZUZyb21CYXNrZXRPbmVCZWVyKGJlZXJJZCkpO1xuICAgICAgICBkaXNwYXRjaChyZW1vdmVQcm9kdWN0KGJlZXJJZCkpO1xuICAgICAgICBjb25zdCBiYXNrZXQgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiYmFza2V0XCIpKTtcbiAgICAgICAgZGVsZXRlIGJhc2tldFtiZWVySWRdO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImJhc2tldFwiLCBKU09OLnN0cmluZ2lmeShiYXNrZXQpKTsvLyDQstGL0L3QtdGB0YLQuCDQsiDRhNGD0L3QutGG0LjRjlxuICAgICAgfX0+UmVtb3ZlIGZyb20gY2FydFxuICAgIDwvUy5CdXR0b25BY3RpdmVTdHlsZT5cbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEJ1dHRvbih7IGJlZXJJZCwgY2xhc3NCIH0pIHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBiZWVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuYmVlcnMub25lQmVlcik7XG5cbiAgY29uc3QgYWRkTG9jYWxTdG9yYWdlID0gKGJlZXJJZCkgPT4ge1xuICAgIGlmKCFsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImJhc2tldFwiKSkge1xuICAgICAgY29uc3QgYmFza2V0ID0ge307XG4gICAgICBiYXNrZXRbYmVlcklkXSA9IHsuLi5iZWVyLCBxdWFudGl0eTogMSwgcHJpY2U6IGJlZXIuaWJ1LCBpc0NhcnQ6IHRydWV9O1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJiYXNrZXRcIiwgSlNPTi5zdHJpbmdpZnkoYmFza2V0KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGJhc2tldCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJiYXNrZXRcIikpO1xuICAgICAgYmFza2V0W2JlZXJJZF0gPSB7Li4uYmVlciwgcXVhbnRpdHk6IDEsIHByaWNlOiBiZWVyLmlidSwgaXNDYXJ0OiB0cnVlfTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiYmFza2V0XCIsIEpTT04uc3RyaW5naWZ5KGJhc2tldCkpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4oXG4gICAgPFMuQnV0dG9uU3R5bGVcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NCfVxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKGFkZFRvQmFza2V0T25lQmVlcihiZWVySWQpKTtcbiAgICAgICAgYWRkTG9jYWxTdG9yYWdlKGJlZXJJZCk7XG4gICAgICB9fT5BZGQgdG8gY2FydFxuICAgIDwvUy5CdXR0b25TdHlsZT5cbiAgKTtcbn1cbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQgQ29udGFpbmVyIGZyb20gXCIvc3JjL2NvbXBvbmVudHMvdWkvY29udGFpbmVyXCI7XG5pbXBvcnQgeyBUaXRsZSwgSW50ZXI1MDAgfSBmcm9tIFwiL3NyYy9zdHlsZS9taXhpbnNcIjtcblxuZXhwb3J0IGNvbnN0IFBhZ2VCZWVyU3R5bGUgPSBzdHlsZWQuc2VjdGlvbmBcbiAgd2lkdGg6IDEwMCU7XG5gO1xuXG5leHBvcnQgY29uc3QgUGFnZUJlZXJDb250YWluZXIgPSBzdHlsZWQoQ29udGFpbmVyKWBcbiAgcGFkZGluZy10b3A6IDIwcHg7XG4gIHBhZGRpbmctYm90dG9tOiAyMHB4O1xuXG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAyMHB4O1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDYzLjk0ZW0pIHtcbiAgICBnYXA6IDE1cHg7XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgZ2FwOiAxMHB4O1xuICB9XG5cbiAgLmJ1dHRvbiB7XG4gICAgd2lkdGg6IDUwJTtcblxuICAgIEBtZWRpYShtYXgtd2lkdGg6IDQ3Ljk0ZW0pIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IFBhZ2VCZWVySW1nID0gc3R5bGVkLmltZ2BcbiAgaGVpZ2h0OiBhdXRvO1xuYDtcblxuZXhwb3J0IGNvbnN0IFBhZ2VCZWVyVGl0bGUgPSBzdHlsZWQuaDJgXG4gICR7VGl0bGV9O1xuYDtcblxuZXhwb3J0IGNvbnN0IFBhZ2VCZWVyVGV4dCA9IHN0eWxlZC5wYFxuICBtYXJnaW46IDA7XG5cbiAgZm9udC1zaXplOiAxLjNlbTtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA2My45NGVtKSB7XG4gICAgZm9udC1zaXplOiAxZW07XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBQYWdlQmVlclN1YnR1dGxlID0gc3R5bGVkLmgzYFxuICBtYXJnaW46IDA7XG5cbiAgJHtJbnRlcjUwMH07XG4gIGZvbnQtc2l6ZTogMS40ZW07XG4gIGNvbG9yOiAjNDYwNWZmO1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDYzLjk0ZW0pIHtcbiAgICBmb250LXNpemU6IDEuMWVtO1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgUGFnZUJlZXJMaXN0SW5ncmVkaWVudHMgPSBzdHlsZWQudWxgXG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcblxuICBsaXN0LXN0eWxlOiBub25lO1xuYDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBTcGlubmVyIGZyb20gXCIvc3JjL2NvbXBvbmVudHMvdWkvc3Bpbm5lclwiO1xuaW1wb3J0IHsgQnV0dG9uQWN0aXZlLCBCdXR0b24gfSBmcm9tIFwiL3NyYy9jb21wb25lbnRzL3VpL2J1dHRvbi1iZWVyXCI7XG5pbXBvcnQgKiBhcyBTIGZyb20gXCIuL3N0eWxlXCI7XG5cbmZ1bmN0aW9uIEJlZXIoe2JlZXIsIGJlZXJJZCwgc3RhdHVzLCBlcnJvcn0pIHtcblxuICBsZXQgY29udGVudDtcbiAgaWYoc3RhdHVzID09PSBcImxvYWRpbmdcIikge1xuICAgIGNvbnRlbnQgPSA8U3Bpbm5lciB0ZXh0PVwiTG9hZGluZy4uLlwiIC8+XG4gIH0gZWxzZSBpZihzdGF0dXMgPT09IFwic3VjY2VlZGVkXCIpIHtcbiAgICBjb250ZW50ID0gPD5cbiAgICAgICAgICAgICAgICA8Uy5QYWdlQmVlckltZyBzcmM9e2JlZXIuaW1hZ2VfdXJsfSBhbHQ9e2JlZXIubmFtZX0gd2lkdGg9ezc1fSBoZWlnaHQ9ezIwMH0vPlxuICAgICAgICAgICAgICAgIDxTLlBhZ2VCZWVyVGl0bGU+e2JlZXIubmFtZX08L1MuUGFnZUJlZXJUaXRsZT5cbiAgICAgICAgICAgICAgICA8c3Bhbj5BbGMuOiB7YmVlci5hYnZ9ICU8L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW4+RGF0ZSBvZiBmaXJzdCBicmV3OiB7YmVlci5maXJzdF9icmV3ZWR9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxTLlBhZ2VCZWVyVGV4dD57YmVlci5kZXNjcmlwdGlvbn08L1MuUGFnZUJlZXJUZXh0PlxuICAgICAgICAgICAgICAgIDxTLlBhZ2VCZWVyU3VidHV0bGU+SW5ncmVkaWVudHM6PC9TLlBhZ2VCZWVyU3VidHV0bGU+XG4gICAgICAgICAgICAgICAgPFMuUGFnZUJlZXJMaXN0SW5ncmVkaWVudHM+XG4gICAgICAgICAgICAgICAgICA8bGk+TWFsdDoge2JlZXIuaW5ncmVkaWVudHMubWFsdFswXS5uYW1lfTwvbGk+XG4gICAgICAgICAgICAgICAgICA8bGk+SG9wczoge2JlZXIuaW5ncmVkaWVudHMuaG9wc1swXS5uYW1lfTwvbGk+XG4gICAgICAgICAgICAgICAgICA8bGk+WWVhc3Q6IHtiZWVyLmluZ3JlZGllbnRzLnllYXN0fTwvbGk+XG4gICAgICAgICAgICAgICAgPC9TLlBhZ2VCZWVyTGlzdEluZ3JlZGllbnRzPlxuICAgICAgICAgICAgICAgIHtiZWVyLmlzQ2FydCA/IDxCdXR0b25BY3RpdmUgY2xhc3NCPVwiYnV0dG9uXCIgYmVlcklkPXtiZWVySWR9Lz4gOiA8QnV0dG9uIGNsYXNzQj1cImJ1dHRvblwiIGJlZXJJZD17YmVlcklkfSAvPn1cbiAgICAgICAgICAgICAgPC8+XG4gIH0gZWxzZSBpZihzdGF0dXMgPT09IFwiZmFpbGVkXCIpIHtcbiAgICBjb250ZW50ID0gPGRpdj57ZXJyb3J9PC9kaXY+XG4gIH1cblxuICByZXR1cm4oXG4gICAgPFMuUGFnZUJlZXJTdHlsZT5cbiAgICAgIDxTLlBhZ2VCZWVyQ29udGFpbmVyPlxuICAgICAgICB7Y29udGVudH1cbiAgICAgIDwvUy5QYWdlQmVlckNvbnRhaW5lcj5cbiAgICA8L1MuUGFnZUJlZXJTdHlsZT5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQmVlcjtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQgeyBidXR0b25TIH0gZnJvbSBcIi9zcmMvc3R5bGUvbWl4aW5zXCI7XG5cbmV4cG9ydCBjb25zdCBCdXR0b25BY3RpdmVTdHlsZSA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9uU307XG5cbiAgYmFja2dyb3VuZC1jb2xvcjogIzU0OTcxNjtcbiAgYm9yZGVyOiAycHggc29saWQgIzU0OTcxNjtcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuY29sb3JXaGl0ZX07XG5gO1xuXG5leHBvcnQgY29uc3QgQnV0dG9uU3R5bGUgPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvblN9O1xuXG4gIGJvcmRlcjogMnB4IHNvbGlkICM1NDk3MTY7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuY29sb3JXaGl0ZX07XG4gIGNvbG9yOiAjNTQ5NzE2O1xuYDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgcmVtb3ZlUHJvZHVjdCB9IGZyb20gXCIvc3JjL2ZlYXR1cmVzL2Jhc2tldFNsaWNlXCI7XG5pbXBvcnQgeyBzZWxlY3RCZWVyQnlJZCwgYWRkVG9CYXNrZXQsIHJlbW92ZUZyb21CYXNrZXQgfSBmcm9tIFwiL3NyYy9mZWF0dXJlcy9iZWVycy1zbGljZVwiO1xuaW1wb3J0ICogYXMgUyBmcm9tIFwiLi9zdHlsZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gQnV0dG9uQWN0aXZlKHsgYmVlcklkLCBjbGFzc0IgfSkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIHJldHVybihcbiAgICA8Uy5CdXR0b25BY3RpdmVTdHlsZVxuICAgICAgY2xhc3NOYW1lPXtjbGFzc0J9XG4gICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgZGlzcGF0Y2gocmVtb3ZlRnJvbUJhc2tldChiZWVySWQpKTtcbiAgICAgICAgZGlzcGF0Y2gocmVtb3ZlUHJvZHVjdChiZWVySWQpKTtcbiAgICAgICAgY29uc3QgYmFza2V0ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImJhc2tldFwiKSk7XG4gICAgICAgIGRlbGV0ZSBiYXNrZXRbYmVlcklkXTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJiYXNrZXRcIiwgSlNPTi5zdHJpbmdpZnkoYmFza2V0KSk7Ly8g0LLRi9C90LXRgdGC0Lgg0LIg0YTRg9C90LrRhtC40Y5cbiAgICAgIH19PlJlbW92ZSBmcm9tIGNhcnRcbiAgICA8L1MuQnV0dG9uQWN0aXZlU3R5bGU+XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCdXR0b24oeyBiZWVySWQsIGNsYXNzQiB9KSB7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3QgYmVlciA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHNlbGVjdEJlZXJCeUlkKHN0YXRlLCBiZWVySWQpKTtcblxuICBjb25zdCBhZGRMb2NhbFN0b3JhZ2UgPSAoYmVlcklkKSA9PiB7XG4gICAgaWYoIWxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiYmFza2V0XCIpKSB7XG4gICAgICBjb25zdCBiYXNrZXQgPSB7fTtcbiAgICAgIGJhc2tldFtiZWVySWRdID0gey4uLmJlZXIsIHF1YW50aXR5OiAxLCBwcmljZTogYmVlci5pYnUsIGlzQ2FydDogdHJ1ZX07XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImJhc2tldFwiLCBKU09OLnN0cmluZ2lmeShiYXNrZXQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYmFza2V0ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImJhc2tldFwiKSk7XG4gICAgICBiYXNrZXRbYmVlcklkXSA9IHsuLi5iZWVyLCBxdWFudGl0eTogMSwgcHJpY2U6IGJlZXIuaWJ1LCBpc0NhcnQ6IHRydWV9O1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJiYXNrZXRcIiwgSlNPTi5zdHJpbmdpZnkoYmFza2V0KSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybihcbiAgICA8Uy5CdXR0b25TdHlsZVxuICAgICAgY2xhc3NOYW1lPXtjbGFzc0J9XG4gICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgZGlzcGF0Y2goYWRkVG9CYXNrZXQoYmVlcklkKSk7XG4gICAgICAgIGFkZExvY2FsU3RvcmFnZShiZWVySWQpO1xuICAgICAgfX0+QWRkIHRvIGNhcnRcbiAgICA8L1MuQnV0dG9uU3R5bGU+XG4gICk7XG59XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBUaXRsZSwgSW50ZXI1MDAgfSBmcm9tIFwiL3NyYy9zdHlsZS9taXhpbnNcIjtcblxuZXhwb3J0IGNvbnN0IExpbmtCZWVyID0gc3R5bGVkKExpbmspYFxuICBkaXNwbGF5OiBncmlkO1xuICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogMjBweDtcblxuICAmOmhvdmVyIGltZyB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjEpO1xuICB9XG5cbiAgJjpob3ZlciBoMiB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBzb2xpZCB1bmRlcmxpbmUgJHsocHJvcHMpID0+IHByb3BzLnRoZW1lLmNvbG9yQWN0aXZlTGlua30gMnB4O1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNjMuOTRlbSkge1xuICAgIGdhcDogMDtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IEltZ1N0eWxlID0gc3R5bGVkLmltZ2BcbiAgb2JqZWN0LWZpdDogY29udGFpbjtcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIC4zNXMgZWFzZS1vdXQ7XG5cbiAgbWFyZ2luOiAxMHB4O1xuYDtcblxuZXhwb3J0IGNvbnN0IEJlZXJUaXRsZSA9IHN0eWxlZC5oMmBcbiAgJHtUaXRsZX07XG5gO1xuXG5leHBvcnQgY29uc3QgQmVlckFsYyA9IHN0eWxlZC5zcGFuYFxuICBmb250LXNpemU6IDEuNWVtO1xuICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5jb2xvckJsYWNrfTtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA2My45NGVtKSB7XG4gICAgZm9udC1zaXplOiAxZW07XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgZm9udC1zaXplOiAwLjhlbTtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IEJlZXJQcmljZSA9IHN0eWxlZC5zcGFuYFxuICAke0ludGVyNTAwfTtcbiAgZm9udC1zaXplOiAyZW07XG4gIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmNvbG9yQmxhY2t9O1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDYzLjk0ZW0pIHtcbiAgICBmb250LXNpemU6IDFlbTtcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgIGZvbnQtc2l6ZTogMC44ZW07XG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xuICB9XG5gO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IHNlbGVjdEJlZXJCeUlkIH0gZnJvbSBcIi9zcmMvZmVhdHVyZXMvYmVlcnMtc2xpY2VcIjtcbmltcG9ydCB7IEJ1dHRvbkFjdGl2ZSwgQnV0dG9uIH0gZnJvbSBcIi9zcmMvY29tcG9uZW50cy91aS9idXR0b25cIjtcbmltcG9ydCAqIGFzIFMgZnJvbSBcIi4vc3R5bGVcIjtcblxuZnVuY3Rpb24gQ2FyZEJlZXIoeyBiZWVySWQgfSkge1xuICBjb25zdCBiZWVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc2VsZWN0QmVlckJ5SWQoc3RhdGUsIGJlZXJJZCkpO1xuXG4gIGxldCBidXR0b247XG5cbiAgaWYoYmVlci5pc0NhcnQgPT09IHRydWUpIHtcbiAgICBidXR0b24gPSA8QnV0dG9uQWN0aXZlIGJlZXJJZD17YmVlcklkfSAvPlxuICB9IGVsc2Uge1xuICAgIGJ1dHRvbiA9IDxCdXR0b24gYmVlcklkPXtiZWVySWR9IC8+XG4gIH1cblxuICByZXR1cm4oXG4gICAgPD5cbiAgICAgIDxTLkxpbmtCZWVyIHRvPXtgL2JlZXJzLyR7YmVlcklkfWB9PlxuICAgICAgICA8Uy5JbWdTdHlsZSBzcmM9e2JlZXIuaW1hZ2VfdXJsfSBhbHQ9e2JlZXIubmFtZX0gd2lkdGg9ezkwfSBoZWlnaHQ9ezIwMH0gLz5cbiAgICAgICAgPFMuQmVlclRpdGxlPntiZWVyLm5hbWV9PC9TLkJlZXJUaXRsZT5cbiAgICAgICAgPFMuQmVlckFsYz5BbGMuOiB7YmVlci5hYnZ9ICU8L1MuQmVlckFsYz5cbiAgICAgICAgPFMuQmVlclByaWNlPlByaWNlOiB7YmVlci5pYnV9JDwvUy5CZWVyUHJpY2U+XG4gICAgICA8L1MuTGlua0JlZXI+XG4gICAgICB7YnV0dG9ufVxuICAgIDwvPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDYXJkQmVlcjtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQgQ29udGFpbmVyIGZyb20gXCIvc3JjL2NvbXBvbmVudHMvdWkvY29udGFpbmVyXCI7XG5cbmV4cG9ydCBjb25zdCBCZWVyc1NlY3Rpb25TdHlsZSA9IHN0eWxlZC5zZWN0aW9uYFxuICB3aWR0aDogMTAwJTtcbmA7XG5cbmV4cG9ydCBjb25zdCBCZWVyc0NvbnRhaW5lciA9IHN0eWxlZChDb250YWluZXIpYFxuICBwYWRkaW5nLXRvcDogMTBweDtcbiAgcGFkZGluZy1ib3R0b206IDIwcHg7XG5gO1xuXG5leHBvcnQgY29uc3QgQmVlcnNMaXN0U3R5bGUgPSBzdHlsZWQudWxgXG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcblxuICBkaXNwbGF5OiBncmlkO1xuICBnYXA6IDMwcHggMjBweDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyIDFmciAxZnI7XG5cbiAgQG1lZGlhKG1heC13aWR0aDogODBlbSkge1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmciAxZnI7XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgQmVlckl0ZW1TdHlsZSA9IHN0eWxlZC5saWBcbiAgZGlzcGxheTogZ3JpZDtcbiAganVzdGlmeS1pdGVtczogY2VudGVyO1xuYDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBTcGlubmVyIGZyb20gXCIvc3JjL2NvbXBvbmVudHMvdWkvc3Bpbm5lclwiO1xuaW1wb3J0IENhcmRCZWVyIGZyb20gXCIvc3JjL2NvbXBvbmVudHMvYmxvY2tzL2NhcmQtYmVlclwiO1xuaW1wb3J0ICogYXMgUyBmcm9tIFwiLi9zdHlsZVwiO1xuXG5mdW5jdGlvbiBCZWVyc0xpc3QocHJvcHMpIHtcblxuICBsZXQgY29udGVudDtcblxuICBpZihwcm9wcy5zdGF0dXMgPT09IFwibG9hZGluZ1wiKSB7XG4gICAgY29udGVudCA9IDxTcGlubmVyIHRleHQ9XCJMb2FkaW5nLi4uXCIgLz5cbiAgfSBlbHNlIGlmKHByb3BzLnN0YXR1cyA9PT0gXCJzdWNjZWVkZWRcIikge1xuICAgIGNvbnRlbnQgPSBwcm9wcy5iZWVyc0lkcy5tYXAoYmVlcklkID0+IChcbiAgICAgIDxTLkJlZXJJdGVtU3R5bGUga2V5PXtiZWVySWR9PlxuICAgICAgICA8Q2FyZEJlZXIgYmVlcklkPXtiZWVySWR9IC8+XG4gICAgICA8L1MuQmVlckl0ZW1TdHlsZT5cbiAgICApKTtcbiAgfSBlbHNlIGlmKHByb3BzLnN0YXR1cyA9PT0gXCJmYWlsZWRcIikge1xuICAgIGNvbnRlbnQgPSA8ZGl2Pntwcm9wcy5lcnJvcn08L2Rpdj5cbiAgfVxuXG4gIHJldHVybihcbiAgICA8Uy5CZWVyc1NlY3Rpb25TdHlsZT5cbiAgICAgIDxTLkJlZXJzQ29udGFpbmVyPlxuICAgICAgICA8Uy5CZWVyc0xpc3RTdHlsZT5cbiAgICAgICAge2NvbnRlbnR9XG4gICAgICAgIDwvUy5CZWVyc0xpc3RTdHlsZT5cbiAgICAgIDwvUy5CZWVyc0NvbnRhaW5lcj5cbiAgICA8L1MuQmVlcnNTZWN0aW9uU3R5bGU+XG5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQmVlcnNMaXN0O1xuIiwiaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcbmltcG9ydCBDb250YWluZXIgZnJvbSBcIi9zcmMvY29tcG9uZW50cy91aS9jb250YWluZXJcIjtcbmltcG9ydCB7IFRpdGxlIH0gZnJvbSBcIi9zcmMvc3R5bGUvbWl4aW5zXCI7XG5cbmV4cG9ydCBjb25zdCBDb21tZW50c1N0eWxlID0gc3R5bGVkKENvbnRhaW5lcilgXG4gIHBhZGRpbmctdG9wOiAxMHB4O1xuICBwYWRkaW5nLWJvdHRvbTogMjBweDtcbmA7XG5cbmV4cG9ydCBjb25zdCBDb21tZW50c0xpc3QgPSBzdHlsZWQudWxgXG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbmA7XG5cbmV4cG9ydCBjb25zdCBDb21tZW50c1RpdGxlID0gc3R5bGVkLmgyYFxuICAke1RpdGxlfTtcblxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDYzLjk0ZW0pIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgIG1hcmdpbi1ib3R0b206IDVweDtcbiAgfVxuYDtcbiIsImltcG9ydCBzdHlsZWQsIHtjc3N9IGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuaW1wb3J0IENvbnRhaW5lciBmcm9tIFwiL3NyYy9jb21wb25lbnRzL3VpL2NvbnRhaW5lclwiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmNvbnN0IGl0ZW1TdHlsZSA9IGNzc2BcbiAgcGFkZGluZzogNXB4IDEwcHg7XG4gIGJvcmRlcjogMXB4ICMwMDAwMDAgc29saWQ7XG4gIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuXG4gIGZvbnQtc2l6ZTogMS41ZW07XG4gIGxpbmUtaGVpZ2h0OiAxNTAlO1xuXG4gICY6aG92ZXIge1xuICAgIG9wYWNpdHk6IDAuNjtcbiAgfVxuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDYzLjk0ZW0pIHtcbiAgICBmb250LXNpemU6IDFlbTtcbiAgfVxuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDQ3Ljk0ZW0pIHtcbiAgICBmb250LXNpemU6IDAuOWVtO1xuICAgIHBhZGRpbmc6IDJweCA3cHg7XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBQYWdpbmF0aW9uQ29udGFpbmVyID0gc3R5bGVkKENvbnRhaW5lcilgXG4gIHBhZGRpbmctdG9wOiA0MHB4O1xuICBwYWRkaW5nLWJvdHRvbTogNTBweDtcbmA7XG5cbmV4cG9ydCBjb25zdCBMaXN0ID0gc3R5bGVkLnVsYFxuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG5cbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGdhcDogMTBweDtcbmA7XG5cbmV4cG9ydCBjb25zdCBMaW5rQWN0aXZlUGFnID0gc3R5bGVkKExpbmspYFxuICAke2l0ZW1TdHlsZX07XG5cbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuY29sb3JXaGl0ZX07XG4gIGJhY2tncm91bmQtY29sb3I6ICM5M2ViOTQ7XG5gO1xuXG5leHBvcnQgY29uc3QgTGlua1BhZyA9IHN0eWxlZChMaW5rKWBcbiAgJHtpdGVtU3R5bGV9O1xuXG4gIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmNvbG9yQmxhY2t9O1xuYDtcblxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgUyBmcm9tIFwiLi9zdHlsZVwiO1xuXG5mdW5jdGlvbiBQYWdpbmF0aW9uKHsgY291bnQsIG9uaGFuZGxlciwgY3VycmVudFBhZ2UgfSkge1xuXG4gIGNvbnN0IG51bWJlclBhZ2VzID0gQXJyYXkuZnJvbSh7bGVuZ3RoOiBjb3VudH0sIChfLCBpbmRleCkgPT4gaW5kZXggKyAxKTtcblxuICByZXR1cm4oXG4gICAgPFMuUGFnaW5hdGlvbkNvbnRhaW5lcj5cbiAgICAgIDxTLkxpc3Q+XG4gICAgICAgIHtudW1iZXJQYWdlcy5tYXAobnVtYmVyID0+IHtcbiAgICAgICAgICBpZihudW1iZXIgPT09IGN1cnJlbnRQYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4oPGxpIGtleT17bnVtYmVyfT5cbiAgICAgICAgICAgICAgICAgICAgPFMuTGlua0FjdGl2ZVBhZyB0bz17YC9wYWdlXyR7bnVtYmVyfWB9IG9uQ2xpY2s9eygpID0+IHtvbmhhbmRsZXIobnVtYmVyKX19PntudW1iZXJ9PC9TLkxpbmtBY3RpdmVQYWc+XG4gICAgICAgICAgICAgICAgICA8L2xpPik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybig8bGkga2V5PXtudW1iZXJ9PlxuICAgICAgICAgICAgICAgICAgICA8Uy5MaW5rUGFnIHRvPXtgL3BhZ2VfJHtudW1iZXJ9YH0gb25DbGljaz17KCkgPT4ge29uaGFuZGxlcihudW1iZXIpfX0+e251bWJlcn08L1MuTGlua1BhZz5cbiAgICAgICAgICAgICAgICAgIDwvbGk+KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pfVxuICAgICAgPC9TLkxpc3Q+XG4gICAgPC9TLlBhZ2luYXRpb25Db250YWluZXI+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBhZ2luYXRpb247XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuaW1wb3J0IHsgVGl0bGUsIEludGVyNTAwIH0gZnJvbSBcIi9zcmMvc3R5bGUvbWl4aW5zXCI7XG5pbXBvcnQgY2xvc2UgZnJvbSBcIi9zcmMvYXNzZXRzL2ljb24tY2xvc2Uuc3ZnXCI7XG5cbmV4cG9ydCBjb25zdCBDYXJkQmVlckl0ZW0gPSBzdHlsZWQubGlgXG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIDFmciBhdXRvO1xuICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG8gYXV0byBhdXRvO1xuXG4gIGJveC1zaGFkb3c6IDAgMCAxNnB4ICNhMGUxOTg7XG4gIHBhZGRpbmc6IDEwcHg7XG5cbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDQ3Ljk0ZW0pIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IENhcmRCZWVySW1nID0gc3R5bGVkLmltZ2BcbiAgZ3JpZC1hcmVhOiAxLzEvLTEvMjtcbiAgb2JqZWN0LWZpdDogY29udGFpbjtcbmA7XG5cbmV4cG9ydCBjb25zdCBDYXJkQmVlclRpdGxlID0gc3R5bGVkLmgyYFxuICAke1RpdGxlfTtcblxuICBncmlkLWFyZWE6IDEvMi8yLzM7XG5gO1xuXG5leHBvcnQgY29uc3QgQ2FyZEJlZXJBbGMgPSBzdHlsZWQuc3BhbmBcbiAgZ3JpZC1hcmVhOiAyLzIvMy8zO1xuICBmb250LXNpemU6IDEuNGVtO1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDYzLjk0ZW0pIHtcbiAgICBmb250LXNpemU6IDFlbTtcbiAgfVxuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDQ3Ljk0ZW0pIHtcbiAgICBmb250LXNpemU6IDAuOGVtO1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgQ2FyZEJlZXJQcmljZSA9IHN0eWxlZC5zcGFuYFxuICBncmlkLWFyZWE6IDMvMi80LzM7XG4gIGZvbnQtc2l6ZTogMS43ZW07XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNjMuOTRlbSkge1xuICAgIGZvbnQtc2l6ZTogMS4zZW07XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgZm9udC1zaXplOiAxZW07XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBDYXJkQmVlcldwYXJDb3VudCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiA0MHB4O1xuXG4gIGdyaWQtYXJlYTogMy8zLzQvLTE7XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgQ2FyZEJlZXJUaXRsZUNvdW50ID0gc3R5bGVkLmgzYFxuICBtYXJnaW46IDA7XG5cbiAgJHtJbnRlcjUwMH07XG5gO1xuXG5leHBvcnQgY29uc3QgQ2FyZEJlZXJXcGFyQnV0dG9ucyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAxNXB4O1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDQ3Ljk0ZW0pIHtcbiAgICBnYXA6IDEwcHg7XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBDYXJkQmVlckJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogNDBweDtcbiAgaGVpZ2h0OiA0MHB4O1xuICBwYWRkaW5nOiAwIDVweDtcbiAgYm9yZGVyOiAxcHggc29saWQgIzJmYjYwNztcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmNvbG9yV2hpdGV9O1xuXG4gIGNvbG9yOiAjMmZiNjA3O1xuICBmb250LXNpemU6IDEuNWVtO1xuXG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG5cbiAgJjpob3ZlciB7XG4gICAgY29sb3I6ICM2MWVlMzc7XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBDYXJkQmVlckRlbGV0ZSA9IHN0eWxlZC5idXR0b25gXG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMzBweDtcbiAgaGVpZ2h0OiAzMHB4O1xuXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke2Nsb3NlfSk7XG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5jb2xvcldoaXRlfTtcbiAgYm9yZGVyOiAxcHggc29saWQgI2U2MTIxMjtcblxuXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICByaWdodDogMDtcblxuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHVzZXItc2VsZWN0OiBub25lO1xuXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmNmMzYzM7XG4gIH1cbmA7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgcmVtb3ZlRnJvbUJhc2tldCB9IGZyb20gXCIvc3JjL2ZlYXR1cmVzL2JlZXJzLXNsaWNlXCI7XG5pbXBvcnQgeyBpbmNyZW1lbnRCZWVycywgZGVjcmVtZW50QmVlcnMsIHVwZGF0ZVByaWNlLCByZW1vdmVQcm9kdWN0LCBzZWxlY3RCZWVyQmFza2V0QnlJZCB9IGZyb20gXCIvc3JjL2ZlYXR1cmVzL2Jhc2tldFNsaWNlXCI7XG5pbXBvcnQgKiBhcyBTIGZyb20gXCIuL3N0eWxlXCI7XG5cbmZ1bmN0aW9uIENhcmRCZWVyQmFza2V0KHsgYmVlcklkLCBoYW5kbGVyIH0pIHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBiZWVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc2VsZWN0QmVlckJhc2tldEJ5SWQoc3RhdGUsIGJlZXJJZCkpO1xuXG4gIGxldCBbIHF1YW50aXR5LCBzZXRRdWFudGl0eSBdID0gdXNlU3RhdGUoYmVlci5xdWFudGl0eSk7XG5cbiAgY29uc3QgZGVjcmVtZW50ID0gKCkgPT4ge1xuICAgIGlmKHF1YW50aXR5ID09PSAxKXtcbiAgICAgIHNldFF1YW50aXR5KHF1YW50aXR5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0UXVhbnRpdHkoLS1xdWFudGl0eSk7XG4gICAgfVxuICB9O1xuXG4gIC8vINC40LfQvNC10L3QtdC90LjQtSDQutC+0LvQuNGH0LXRgdGC0LLQsFxuICBjb25zdCB1cGRhdGVRdWFudGl0eUxvY2FsU3RvcmFnZSA9IChiZWVySWQpID0+IHtcbiAgICBjb25zdCBiYXNrZXQgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiYmFza2V0XCIpKTtcbiAgICAvLyDQvdCw0YXQvtC00LjQvCDQv9C40LLQvlxuICAgIGNvbnN0IGJlZXIgPSBiYXNrZXRbYmVlcklkXTtcbiAgICAvLyDQvtCx0L3QvtCy0LvRj9C10Lwg0LrQvtC70LjRh9C10YHRgtCy0L5cbiAgICBiZWVyLnF1YW50aXR5ID0gcXVhbnRpdHk7XG4gICAgLy8g0L7QsdC90L7QstC70Y/QtdC8INGG0LXQvdGDXG4gICAgYmVlci5wcmljZSA9IHF1YW50aXR5ICogYmVlci5pYnU7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJiYXNrZXRcIiwgSlNPTi5zdHJpbmdpZnkoYmFza2V0KSk7XG4gIH07XG5cbiAgcmV0dXJuKFxuICAgIDxTLkNhcmRCZWVySXRlbT5cbiAgICAgIDxTLkNhcmRCZWVySW1nIHNyYz17YmVlci5pbWFnZV91cmx9IGFsdD17YmVlci5uYW1lfSB3aWR0aD17NzV9IGhlaWdodD17MjAwfS8+XG4gICAgICA8Uy5DYXJkQmVlclRpdGxlPntiZWVyLm5hbWV9PC9TLkNhcmRCZWVyVGl0bGU+XG4gICAgICA8Uy5DYXJkQmVlckFsYz5BbGMuOiB7YmVlci5hYnZ9ICU8L1MuQ2FyZEJlZXJBbGM+XG4gICAgICA8Uy5DYXJkQmVlcldwYXJDb3VudD5cbiAgICAgICAgPFMuQ2FyZEJlZXJUaXRsZUNvdW50PlF1YW50aXR5PC9TLkNhcmRCZWVyVGl0bGVDb3VudD5cbiAgICAgICAgPFMuQ2FyZEJlZXJXcGFyQnV0dG9ucz5cbiAgICAgICAgICA8Uy5DYXJkQmVlckJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIGRlY3JlbWVudCgpO1xuICAgICAgICAgICAgICBkaXNwYXRjaChkZWNyZW1lbnRCZWVycyhiZWVySWQpKTtcbiAgICAgICAgICAgICAgZGlzcGF0Y2godXBkYXRlUHJpY2Uoe2lkOiBiZWVySWQsIHByaWNlOiBxdWFudGl0eSAqIGJlZXIuaWJ1fSkpO1xuICAgICAgICAgICAgICB1cGRhdGVRdWFudGl0eUxvY2FsU3RvcmFnZShiZWVySWQpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+LTwvUy5DYXJkQmVlckJ1dHRvbj5cbiAgICAgICAgICA8c3Bhbj57YmVlci5xdWFudGl0eX08L3NwYW4+XG4gICAgICAgICAgPFMuQ2FyZEJlZXJCdXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICBzZXRRdWFudGl0eSgrK3F1YW50aXR5KTtcbiAgICAgICAgICAgICAgZGlzcGF0Y2goaW5jcmVtZW50QmVlcnMoYmVlcklkKSk7XG4gICAgICAgICAgICAgIGRpc3BhdGNoKHVwZGF0ZVByaWNlKHtpZDogYmVlcklkLCBwcmljZTogcXVhbnRpdHkgKiBiZWVyLmlidX0pKTtcbiAgICAgICAgICAgICAgdXBkYXRlUXVhbnRpdHlMb2NhbFN0b3JhZ2UoYmVlcklkKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPis8L1MuQ2FyZEJlZXJCdXR0b24+XG4gICAgICAgIDwvUy5DYXJkQmVlcldwYXJCdXR0b25zPlxuICAgICAgPC9TLkNhcmRCZWVyV3BhckNvdW50PlxuICAgICAgPFMuQ2FyZEJlZXJQcmljZT5QcmljZToge2JlZXIucHJpY2V9JDwvUy5DYXJkQmVlclByaWNlPlxuICAgICAgPFMuQ2FyZEJlZXJEZWxldGUgdHlwZT1cImJ1dHRvblwiIGFyaWEtbGFiZWw9XCJEZWxldGVcIlxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgZGlzcGF0Y2gocmVtb3ZlRnJvbUJhc2tldChiZWVyLmlkKSk7XG4gICAgICAgICAgZGlzcGF0Y2gocmVtb3ZlUHJvZHVjdChiZWVyLmlkKSk7XG4gICAgICAgICAgaGFuZGxlcigpO1xuICAgICAgICAgIGNvbnN0IGJhc2tldCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJiYXNrZXRcIikpO1xuICAgICAgICAgIGRlbGV0ZSBiYXNrZXRbYmVlcklkXTtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImJhc2tldFwiLCBKU09OLnN0cmluZ2lmeShiYXNrZXQpKTsgLy8g0LLRi9C90LXRgdGC0Lgg0LIg0YTRg9C90LrRhtC40Y5cbiAgICAgICAgfX0+XG4gICAgICA8L1MuQ2FyZEJlZXJEZWxldGU+XG4gICAgPC9TLkNhcmRCZWVySXRlbT5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FyZEJlZXJCYXNrZXQ7XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgQ29udGFpbmVyIGZyb20gXCIvc3JjL2NvbXBvbmVudHMvdWkvY29udGFpbmVyXCI7XG5pbXBvcnQgeyBidXR0b25TIH0gZnJvbSAnL3NyYy9zdHlsZS9taXhpbnMnO1xuXG5leHBvcnQgY29uc3QgQmFza2V0U3R5bGUgPSBzdHlsZWQuc2VjdGlvbmBcbiAgd2lkdGg6IDEwMCU7XG5gO1xuXG5leHBvcnQgY29uc3QgQmFza2V0Q29udGFpbmVyID0gc3R5bGVkKENvbnRhaW5lcilgXG4gIHBhZGRpbmctdG9wOiA0MHB4O1xuICBwYWRkaW5nLWJvdHRvbTogNTBweDtcblxuICBkaXNwbGF5OiBncmlkO1xuICBnYXA6IDQ1cHg7XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNjMuOTRlbSkge1xuICAgIGdhcDogMjVweDtcblxuICAgIHBhZGRpbmctdG9wOiAyMHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAzMHB4O1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgIGdhcDogMTVweDtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IEJhc2tldFRvdGFsID0gc3R5bGVkLnNwYW5gXG4gIGZvbnQtc2l6ZTogMS41ZW07XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNjMuOTRlbSkge1xuICAgIGZvbnQtc2l6ZTogMWVtO1xuXG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBCYXNrZXRMaXN0U3R5bGUgPSBzdHlsZWQudWxgXG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcblxuICBkaXNwbGF5OiBncmlkO1xuICBnYXA6IDMwcHg7XG5cbiAgQG1lZGlhKG1heC13aWR0aDogODkuOTRlbSkge1xuICAgIGdhcDogMjVweDtcbiAgfVxuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDYzLjk0ZW0pIHtcbiAgICBnYXA6IDIwcHg7XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgZ2FwOiAxNXB4O1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgV3JhcEJ1dHRvbnMgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XG4gIGdhcDogMjBweDtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XG4gICAgZ2FwOiAxNXB4O1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgQnV0dG9uQ2xlYXIgPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvblN9O1xuXG4gIGJhY2tncm91bmQtY29sb3I6ICM1NDkzZWM7XG4gIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmNvbG9yV2hpdGV9O1xuYDtcblxuZXhwb3J0IGNvbnN0IExpbmtGb3JtID0gc3R5bGVkKExpbmspYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGZjNTFlO1xuICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5jb2xvcldoaXRlfTtcbiAgcGFkZGluZzogMTZweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG5cbiAgZm9udC1zaXplOiAxLjVlbTtcbiAgbGluZS1oZWlnaHQ6IDE1MCU7XG5cbiAgJjpob3ZlciB7XG4gICAgb3BhY2l0eTogMC42O1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNjMuOTRlbSkge1xuICAgIGZvbnQtc2l6ZTogMWVtO1xuICAgIHBhZGRpbmc6IDEwcHg7XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgZm9udC1zaXplOiAwLjllbTtcbiAgICBwYWRkaW5nOiA1cHggMTBweDtcbiAgfVxuYDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCBDYXJkQmVlckJhc2tldCBmcm9tIFwiL3NyYy9jb21wb25lbnRzL2Jsb2Nrcy9jYXJkLWJlZXItYmFza2V0XCI7XG5pbXBvcnQgeyBkZWxldGluZ0FsbEZyb21UaGVCYXNrZXQgfSBmcm9tIFwiL3NyYy9mZWF0dXJlcy9iZWVycy1zbGljZVwiO1xuaW1wb3J0IHsgYWRkUHJvZHVjdHMsIHNlbGVjdEJlZXJCYXNrZXRJZHMsIGNsZWFyQmFza2V0IH0gZnJvbSBcIi9zcmMvZmVhdHVyZXMvYmFza2V0U2xpY2VcIjtcbmltcG9ydCAqIGFzIFMgZnJvbSBcIi4vc3R5bGVcIjtcblxuZnVuY3Rpb24gQmFza2V0KCkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IGJlZXJzU3RvcmUgPSB1c2VTZWxlY3RvcihzZWxlY3RCZWVyQmFza2V0SWRzKTtcbiAgY29uc3QgWyBjb3VudCwgc2V0Q291bnQgXSA9IHVzZVN0YXRlKCcnKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBiZWVyc0Jhc2tldCA9IFtdO1xuICAgIGlmKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiYmFza2V0XCIpKSB7XG4gICAgICAvLyDQv9Cw0YDRgdC40Lwg0LrQvtGA0LfQuNC90YMsINGB0L7Qt9C00LDQtdC8INC80LDRgdGB0LjQsiDQvtCx0YrQtdC60YLQvtCyLdC30L3QsNGH0LXQvdC40LksINC00L7QsdCw0LLQu9GP0LXQvCDQutCw0LbQtNC+0LzRgyDRhtC10L3Rg1xuICAgICAgYmVlcnNCYXNrZXQgPSBPYmplY3QudmFsdWVzKEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJiYXNrZXRcIikpKS5tYXAoYmVlciA9PiAoey4uLmJlZXIsIHByaWNlOiBiZWVyLmlidSAqIGJlZXIucXVhbnRpdHl9KSk7XG4gICAgICBkaXNwYXRjaChhZGRQcm9kdWN0cyhiZWVyc0Jhc2tldCkpOyAvLyDQv9C10YDQtdC00LXQu9Cw0YLRjCBsb2NhbHN0b3JlINC/0LXRgNC10L3QtdGB0YLQuCDQsiByZWR1eFxuICAgICAgY29uc29sZS5sb2coJ0VmZmVjdCBCYXNrZXQnKVxuICAgIH1cbiAgICBzZXRDb3VudChiZWVyc1N0b3JlLmxlbmd0aCk7XG4gIH0sIFtiZWVyc1N0b3JlXSk7XG5cbiAgcmV0dXJuKFxuICAgIDxTLkJhc2tldFN0eWxlPlxuICAgICAgPFMuQmFza2V0Q29udGFpbmVyPlxuICAgICAgICA8Uy5CYXNrZXRUb3RhbD5Ub3RhbCB7Y291bnR9PC9TLkJhc2tldFRvdGFsPlxuICAgICAgICAgIHtiZWVyc1N0b3JlLmxlbmd0aCA/XG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICA8Uy5CYXNrZXRMaXN0U3R5bGU+XG4gICAgICAgICAgICAgICAge2JlZXJzU3RvcmUubWFwKChiZWVyLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuKFxuICAgICAgICAgICAgICAgICAgICA8Q2FyZEJlZXJCYXNrZXQga2V5PXtpbmRleH0gYmVlcklkPXtiZWVyfSBoYW5kbGVyPXsoKSA9PiBzZXRDb3VudChjb3VudCAtMSl9IC8+XG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICA8L1MuQmFza2V0TGlzdFN0eWxlPlxuICAgICAgICAgICAgICA8Uy5XcmFwQnV0dG9ucz5cbiAgICAgICAgICAgICAgICA8Uy5CdXR0b25DbGVhclxuICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiYmFza2V0XCIpO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChkZWxldGluZ0FsbEZyb21UaGVCYXNrZXQoYmVlcnNTdG9yZSkpO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChjbGVhckJhc2tldCgpKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0Q291bnQoYmVlcnNTdG9yZS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgICAgICBDbGVhciBiYXNrZXRcbiAgICAgICAgICAgICAgICA8L1MuQnV0dG9uQ2xlYXI+XG4gICAgICAgICAgICAgICAgPFMuTGlua0Zvcm0gdG89XCIvZm9ybVwiPkNoZWNrb3V0PC9TLkxpbmtGb3JtPlxuICAgICAgICAgICAgICA8L1MuV3JhcEJ1dHRvbnM+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAg0KFhcnQgaXMgZW1wdHkhXG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICB9XG4gICAgICA8L1MuQmFza2V0Q29udGFpbmVyPlxuICAgIDwvUy5CYXNrZXRTdHlsZT5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQmFza2V0O1xuXG5cbiIsImltcG9ydCBzdHlsZWQsIHsgY3NzIH0gZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5cbmNvbnN0IHN0eWxlSXRlbSA9IGNzc2BcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA0MCUgMzAlIDMwJTtcbiAganVzdGlmeS1pdGVtczogY2VudGVyO1xuYDtcblxuZXhwb3J0IGNvbnN0IFdyYXBUaXRsZSA9IHN0eWxlZC5kaXZgXG4gICR7c3R5bGVJdGVtfTtcblxuICBoNCB7XG4gICAgbWFyZ2luOiAwO1xuXG4gICAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgICAgbGluZS1oZWlnaHQ6IDEzMCU7XG4gICAgICBtYXJnaW46IDA7XG4gICAgICBmb250LXNpemU6IDAuOWVtO1xuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IExpc3RPcmRlckJlZXJzID0gc3R5bGVkLnVsYFxuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGJvcmRlcjogMXB4IGRhc2hlZCAjODVjNmU2O1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDQ3Ljk0ZW0pIHtcbiAgICBnYXA6IDVweDtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IExpc3RPcmRlckl0ZW0gPSBzdHlsZWQubGlgXG4gICR7c3R5bGVJdGVtfTtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGRhc2hlZCAjODVjNmU2O1xuXG4gIGgzIHtcbiAgICBqdXN0aWZ5LXNlbGY6IGZsZXgtc3RhcnQ7XG5cbiAgICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgICBwYWRkaW5nLWJvdHRvbTogNXB4O1xuICAgICAgbGluZS1oZWlnaHQ6IDEzMCU7XG4gICAgICBtYXJnaW46IDA7XG4gICAgICBmb250LXNpemU6IDAuOGVtO1xuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IFdyYXBQcmljZSA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgcGFkZGluZzogMjBweDtcblxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjODE3YWJmO1xuICBjb2xvcjogI2ZmZmZmZjtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgcGFkZGluZzogMTBweDtcbiAgfVxuYDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIFMgZnJvbSBcIi4vc3R5bGVcIjtcblxuZnVuY3Rpb24gTGlzdE9yZGVyKHByb3BzKSB7XG4gIGxldCB0b3RhbCA9IDA7XG4gIHJldHVybihcbiAgICA8PlxuICAgICAgPGgzPllvdXIgb3JkZXI8L2gzPlxuICAgICAgPFMuV3JhcFRpdGxlPlxuICAgICAgICA8aDQ+QmVlcjwvaDQ+XG4gICAgICAgIDxoND5RdWFudGl0eTwvaDQ+XG4gICAgICAgIDxoND5QcmljZTwvaDQ+XG4gICAgICA8L1MuV3JhcFRpdGxlPlxuICAgICAgPFMuTGlzdE9yZGVyQmVlcnM+XG4gICAgICAgIHtwcm9wcy5iZWVycy5tYXAoKGJlZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgdG90YWwgKz0gYmVlci5wcmljZTtcbiAgICAgICAgICByZXR1cm4oXG4gICAgICAgICAgICA8Uy5MaXN0T3JkZXJJdGVtIGtleT17aW5kZXh9PlxuICAgICAgICAgICAgICA8aDM+e2JlZXIubmFtZX08L2gzPlxuICAgICAgICAgICAgICA8c3Bhbj57YmVlci5xdWFudGl0eX08L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuPntiZWVyLnByaWNlfSAkPC9zcGFuPlxuICAgICAgICAgICAgPC9TLkxpc3RPcmRlckl0ZW0+XG4gICAgICAgICAgKTtcbiAgICAgICAgfSl9XG4gICAgICA8L1MuTGlzdE9yZGVyQmVlcnM+XG4gICAgICA8Uy5XcmFwUHJpY2U+XG4gICAgICAgIDxzcGFuPlRvdGFsOjwvc3Bhbj5cbiAgICAgICAgPHNwYW4+e3RvdGFsfSQ8L3NwYW4+XG4gICAgICA8L1MuV3JhcFByaWNlPlxuICAgIDwvPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBMaXN0T3JkZXI7XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDEwMCU7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBtYXJnaW4tdG9wOiAkeyhwcm9wcykgPT4gcHJvcHMudGhlbWUuaW5kZW50fTtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA4OS45NGVtKSB7XG4gICAgbWFyZ2luLXRvcDogJHsocHJvcHMpID0+IHByb3BzLnRoZW1lLmluZGVudERlc2t0b3B9O1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNjMuOTRlbSkge1xuICAgIG1hcmdpbi10b3A6ICR7KHByb3BzKSA9PiBwcm9wcy50aGVtZS5pbmRlbnRUYWJsZXR9O1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgIG1hcmdpbi10b3A6ICR7KHByb3BzKSA9PiBwcm9wcy50aGVtZS5pbmRlbnRNb2JpbGV9O1xuICB9XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBXcmFwcGVyIDtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBjb25zdCBTdHlsZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIHBhZGRpbmc6IDZweDtcbiAgYm9yZGVyOiAxcHggc29saWQgIzBiM2RjYjtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuXG4gIGNvbG9yOiAjMGIzZGNiO1xuICBmb250LXNpemU6IDE4cHg7XG5cbiAgY3Vyc29yOiBwb2ludGVyO1xuICB1c2VyLXNlbGVjdDogbm9uZTtcblxuICAmOmhvdmVyIHtcbiAgICBvcGFjaXR5OiAwLjY7XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgICAmOmhvdmVyIHtcbiAgICAgIG9wYWNpdHk6IDE7XG4gICAgfVxuICB9XG5gO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtTdHlsZUJ1dHRvbn0gZnJvbSBcIi4vc3R5bGVcIjtcblxuZnVuY3Rpb24gQnV0dG9uU2lnbihwcm9wcykge1xuICByZXR1cm4oXG4gICAgPFN0eWxlQnV0dG9uIHR5cGU9e3Byb3BzLnR5cGV9IG9uQ2xpY2s9e3Byb3BzLm9uQ2xpY2t9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlQnV0dG9uPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBCdXR0b25TaWduO1xuIiwiaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcblxuZXhwb3J0IGNvbnN0IFN0eWxlTW9kYWwgPSBzdHlsZWQuZGl2YFxuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgei1pbmRleDogOTk5OTtcblxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBtaW4taGVpZ2h0OiAxMDAlO1xuXG4gIG92ZXJmbG93LXg6IGF1dG87XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwwLDAsMC43KTtcbiAgcGFkZGluZzogMTBweDtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG5cbmV4cG9ydCBjb25zdCBTdHlsZUZyYW1lID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDgwJTtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblxuICBwYWRkaW5nOiA0MHB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBib3gtc2hhZG93OiAycHggNXB4IDEwcHggcmdiKDAgMCAwIC8gNSUpO1xuYDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7U3R5bGVNb2RhbCwgU3R5bGVGcmFtZX0gZnJvbSBcIi4vc3R5bGVcIjtcblxuZnVuY3Rpb24gTW9kYWwocHJvcHMpIHtcbiAgcmV0dXJuKFxuICAgIDxTdHlsZU1vZGFsPlxuICAgICAgPFN0eWxlRnJhbWU+XG4gICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgIDwvU3R5bGVGcmFtZT5cbiAgICA8L1N0eWxlTW9kYWw+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1vZGFsO1xuIiwiaW1wb3J0IHN0eWxlZCwgeyBjc3MgfSBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcblxuY29uc3QgU3R5bGVWYWxpZGF0aW9uID0gY3NzYFxuICAudmFsaWQge1xuICAgIGJvcmRlcjogMnB4IHNvbGlkIGdyZWVuO1xuICB9XG5cbiAgLmluVmFsaWQge1xuICAgIGJvcmRlcjogMnB4IHNvbGlkIHJlZDtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IFdyYXBJbnB1dCA9IHN0eWxlZC5kaXZgXG4gICR7U3R5bGVWYWxpZGF0aW9ufTtcbmA7XG5cbmV4cG9ydCBjb25zdCBJbnB1dFN0eWxlID0gc3R5bGVkLmlucHV0YFxuICB3aWR0aDogNTAlO1xuICBwYWRkaW5nOiAxMHB4O1xuXG4gIGJvcmRlcjogbm9uZTtcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICMxYTc3ZDI7XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmc6IDVweDtcbiAgfVxuYDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgUyBmcm9tIFwiLi9zdHlsZVwiO1xuXG5leHBvcnQgY29uc3QgSW5wdXROYW1lID0gKCkgPT4ge1xuICBjb25zdCBbIG5hbWUsIHNldE5hbWUgXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgWyBjbGFzc0lucHV0LCBzZXRDbGFzc0lucHV0IF0gPSB1c2VTdGF0ZSgnJyk7XG5cbiAgY29uc3Qgb25OYW1lQ2hhbmdlID0gZSA9PiBzZXROYW1lKGUudGFyZ2V0LnZhbHVlKTtcblxuICBjb25zdCBvbkJsdXJJbnB1dCA9ICgpID0+IHtcbiAgICBpZihuYW1lLmxlbmd0aCA8IDIpIHtcbiAgICAgIHNldENsYXNzSW5wdXQoXCJpblZhbGlkXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRDbGFzc0lucHV0KFwidmFsaWRcIik7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybihcbiAgICA8Uy5XcmFwSW5wdXQ+XG4gICAgICA8bGFiZWwgaHRtbEZvcj1cIm5hbWVcIiBhcmlhLWxhYmVsPVwiRW50ZXIgeW91ciBuYW1lXCI+PC9sYWJlbD5cbiAgICAgIDxTLklucHV0U3R5bGVcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc0lucHV0fVxuICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgIGlkPVwibmFtZVwiXG4gICAgICAgIG5hbWU9XCJuYW1lXCJcbiAgICAgICAgcGxhY2Vob2xkZXI9XCJOYW1lXCJcbiAgICAgICAgdmFsdWU9e25hbWV9XG4gICAgICAgIG9uQ2hhbmdlPXtvbk5hbWVDaGFuZ2V9XG4gICAgICAgIG9uQmx1cj17b25CbHVySW5wdXR9XG4gICAgICAgIHJlcXVpcmVkXG4gICAgICAvPlxuICA8L1MuV3JhcElucHV0PlxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IElucHV0TWFpbCA9ICgpID0+IHtcbiAgY29uc3QgWyBtYWlsLCBzZXRNYWlsIF0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFsgY2xhc3NJbnB1dCwgc2V0Q2xhc3NJbnB1dCBdID0gdXNlU3RhdGUoJycpO1xuXG4gIGNvbnN0IG9uTWFpbENoYW5nZSA9IGUgPT4gc2V0TWFpbChlLnRhcmdldC52YWx1ZSk7XG5cbiAgY29uc3Qgb25CbHVySW5wdXQgPSAoKSA9PiB7XG4gICAgaWYobWFpbC5sZW5ndGggPCAyKSB7XG4gICAgICBzZXRDbGFzc0lucHV0KFwiaW5WYWxpZFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Q2xhc3NJbnB1dChcInZhbGlkXCIpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4oXG4gICAgPFMuV3JhcElucHV0PlxuICAgICAgPGxhYmVsIGh0bWxGb3I9XCJlLW1haWxcIiBhcmlhLWxhYmVsPVwiRW50ZXIgeW91ciBlLW1haWxcIj48L2xhYmVsPlxuICAgICAgPFMuSW5wdXRTdHlsZVxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzSW5wdXR9XG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgaWQ9XCJlLW1haWxcIlxuICAgICAgICBuYW1lPVwiZS1tYWlsXCJcbiAgICAgICAgcGxhY2Vob2xkZXI9XCJFLW1haWxcIlxuICAgICAgICB2YWx1ZT17bWFpbH1cbiAgICAgICAgb25DaGFuZ2U9e29uTWFpbENoYW5nZX1cbiAgICAgICAgb25CbHVyPXtvbkJsdXJJbnB1dH1cbiAgICAgICAgcmVxdWlyZWRcbiAgICAgIC8+XG4gIDwvUy5XcmFwSW5wdXQ+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgSW5wdXRUZWwgPSAoKSA9PiB7XG4gIGNvbnN0IFsgdGVsLCBzZXRUZWwgXSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBbIGNsYXNzSW5wdXQsIHNldENsYXNzSW5wdXQgXSA9IHVzZVN0YXRlKFwiXCIpO1xuXG4gIGNvbnN0IG9uVGVsQ2hhbmdlID0gZSA9PiBzZXRUZWwoZS50YXJnZXQudmFsdWUpO1xuXG4gIGNvbnN0IG9uQmx1cklucHV0ID0gKCkgPT4ge1xuICAgIGlmKHRlbC5sZW5ndGggPCAxNikge1xuICAgICAgc2V0Q2xhc3NJbnB1dChcImluVmFsaWRcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldENsYXNzSW5wdXQoXCJ2YWxpZFwiKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuKFxuICAgIDxTLldyYXBJbnB1dD5cbiAgICAgIDxsYWJlbCBodG1sRm9yPVwidGVsXCIgYXJpYS1sYWJlbD1cIkVudGVyIHlvdXIgcGhvbmVcIj48L2xhYmVsPlxuICAgICAgPFMuSW5wdXRTdHlsZVxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzSW5wdXR9XG4gICAgICAgIHR5cGU9XCJ0ZWxcIlxuICAgICAgICBpZD1cInRlbFwiXG4gICAgICAgIG5hbWU9XCJ0ZWxcIlxuICAgICAgICBwbGFjZWhvbGRlcj1cIis3KDk5OSk5OTktOTktOTlcIlxuICAgICAgICB2YWx1ZT17dGVsfVxuICAgICAgICBvbkNoYW5nZT17b25UZWxDaGFuZ2V9XG4gICAgICAgIG9uQmx1cj17b25CbHVySW5wdXR9XG4gICAgICAgIHJlcXVpcmVkIC8+XG4gICAgPC9TLldyYXBJbnB1dD5cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBJbnB1dENvbnRyeSA9ICgpID0+IHtcbiAgY29uc3QgWyBjb3VudHJ5LCBzZXRDb3VudHJ5IF0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgWyBjbGFzc0lucHV0LCBzZXRDbGFzc0lucHV0IF0gPSB1c2VTdGF0ZShcIlwiKTtcblxuICBjb25zdCBvbkNvdW50cnlDaGFuZ2UgPSBlID0+IHNldENvdW50cnkoZS50YXJnZXQudmFsdWUpO1xuXG4gIGNvbnN0IG9uQmx1cklucHV0ID0gKCkgPT4ge1xuICAgIGlmKGNvdW50cnkubGVuZ3RoIDwgMykge1xuICAgICAgc2V0Q2xhc3NJbnB1dChcImluVmFsaWRcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldENsYXNzSW5wdXQoXCJ2YWxpZFwiKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuKFxuICAgIDxTLldyYXBJbnB1dD5cbiAgICAgIDxsYWJlbCBodG1sRm9yPVwiY291bnRyeVwiIGFyaWEtbGFiZWw9XCJFbnRlciB0aGUgbmFtZSBvZiB5b3VyIGNvdW50cnlcIj48L2xhYmVsPlxuICAgICAgPFMuSW5wdXRTdHlsZVxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzSW5wdXR9XG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgaWQ9XCJjb3VudHJ5XCJcbiAgICAgICAgbmFtZT1cImNvdW50cnlcIlxuICAgICAgICBwbGFjZWhvbGRlcj1cIkNvdW50cnlcIlxuICAgICAgICB2YWx1ZT17Y291bnRyeX1cbiAgICAgICAgb25DaGFuZ2U9e29uQ291bnRyeUNoYW5nZX1cbiAgICAgICAgb25CbHVyPXtvbkJsdXJJbnB1dH1cbiAgICAgICAgcmVxdWlyZWQgLz5cbiAgICA8L1MuV3JhcElucHV0PlxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IElucHV0Q2l0eSA9ICgpID0+IHtcbiAgY29uc3QgWyBjaXR5LCBzZXRDaXR5IF0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgWyBjbGFzc0lucHV0LCBzZXRDbGFzc0lucHV0IF0gPSB1c2VTdGF0ZShcIlwiKTtcblxuICBjb25zdCBvbkNpdHlDaGFuZ2UgPSBlID0+IHNldENpdHkoZS50YXJnZXQudmFsdWUpO1xuXG4gIGNvbnN0IG9uQmx1cklucHV0ID0gKCkgPT4ge1xuICAgIGlmKGNpdHkubGVuZ3RoIDwgMykge1xuICAgICAgc2V0Q2xhc3NJbnB1dChcImluVmFsaWRcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldENsYXNzSW5wdXQoXCJ2YWxpZFwiKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuKFxuICAgIDxTLldyYXBJbnB1dD5cbiAgICAgIDxsYWJlbCBodG1sRm9yPVwiY2l0eVwiIGFyaWEtbGFiZWw9XCJFbnRlciB0aGUgbmFtZSBvZiB5b3VyIGNpdHlcIj48L2xhYmVsPlxuICAgICAgPFMuSW5wdXRTdHlsZVxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzSW5wdXR9XG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgaWQ9XCJjaXR5XCJcbiAgICAgICAgbmFtZT1cImNpdHlcIlxuICAgICAgICBwbGFjZWhvbGRlcj1cIkNpdHlcIlxuICAgICAgICB2YWx1ZT17Y2l0eX1cbiAgICAgICAgb25DaGFuZ2U9e29uQ2l0eUNoYW5nZX1cbiAgICAgICAgb25CbHVyPXtvbkJsdXJJbnB1dH1cbiAgICAgICAgcmVxdWlyZWQgLz5cbiAgICA8L1MuV3JhcElucHV0PlxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IElucHV0U3RyZWV0ID0gKCkgPT4ge1xuICBjb25zdCBbIHN0cmVldCwgc2V0U3RyZWV0IF0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgWyBjbGFzc0lucHV0LCBzZXRDbGFzc0lucHV0IF0gPSB1c2VTdGF0ZShcIlwiKTtcblxuICBjb25zdCBvblN0cmVldENoYW5nZSA9IGUgPT4gc2V0U3RyZWV0KGUudGFyZ2V0LnZhbHVlKTtcblxuICBjb25zdCBvbkJsdXJJbnB1dCA9ICgpID0+IHtcbiAgICBpZihzdHJlZXQubGVuZ3RoIDwgMikge1xuICAgICAgc2V0Q2xhc3NJbnB1dChcImluVmFsaWRcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldENsYXNzSW5wdXQoXCJ2YWxpZFwiKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuKFxuICAgIDxTLldyYXBJbnB1dD5cbiAgICAgIDxsYWJlbCBodG1sRm9yPVwic3RyZWV0XCIgYXJpYS1sYWJlbD1cIkVudGVyIHlvdXIgc3RyZWV0IG5hbWVcIj48L2xhYmVsPlxuICAgICAgPFMuSW5wdXRTdHlsZVxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzSW5wdXR9XG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgaWQ9XCJzdHJlZXRcIlxuICAgICAgICBuYW1lPVwic3RyZWV0XCJcbiAgICAgICAgcGxhY2Vob2xkZXI9XCJTdHJlZXRcIlxuICAgICAgICB2YWx1ZT17c3RyZWV0fVxuICAgICAgICBvbkNoYW5nZT17b25TdHJlZXRDaGFuZ2V9XG4gICAgICAgIG9uQmx1cj17b25CbHVySW5wdXR9XG4gICAgICAgIHJlcXVpcmVkIC8+XG4gICAgPC9TLldyYXBJbnB1dD5cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBJbnB1dEhvdXNlID0gKCkgPT4ge1xuICBjb25zdCBbIGhvdXNlLCBzZXRIb3VzZSBdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFsgY2xhc3NJbnB1dCwgc2V0Q2xhc3NJbnB1dCBdID0gdXNlU3RhdGUoXCJcIik7XG5cbiAgY29uc3Qgb25Ib3VzZUNoYW5nZSA9IGUgPT4gc2V0SG91c2UoZS50YXJnZXQudmFsdWUpO1xuXG4gIGNvbnN0IG9uQmx1cklucHV0ID0gKCkgPT4ge1xuICAgIGlmKGhvdXNlLmxlbmd0aCA8IDIpIHtcbiAgICAgIHNldENsYXNzSW5wdXQoXCJpblZhbGlkXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRDbGFzc0lucHV0KFwidmFsaWRcIik7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybihcbiAgICA8Uy5XcmFwSW5wdXQ+XG4gICAgICA8bGFiZWwgaHRtbEZvcj1cImhvdXNlXCIgYXJpYS1sYWJlbD1cIkVudGVyIHlvdXIgaG91c2UgbnVtYmVyXCI+PC9sYWJlbD5cbiAgICAgIDxTLklucHV0U3R5bGVcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc0lucHV0fVxuICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgIGlkPVwiaG91c2VcIlxuICAgICAgICBuYW1lPVwiaG91c2VcIlxuICAgICAgICBwbGFjZWhvbGRlcj1cIkhvdXNlXCJcbiAgICAgICAgdmFsdWU9e2hvdXNlfVxuICAgICAgICBvbkNoYW5nZT17b25Ib3VzZUNoYW5nZX1cbiAgICAgICAgb25CbHVyPXtvbkJsdXJJbnB1dH1cbiAgICAgICAgcmVxdWlyZWQgLz5cbiAgICA8L1MuV3JhcElucHV0PlxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IElucHV0QXBhcnRtZW50ID0gKCkgPT4ge1xuICBjb25zdCBbIGFwYXJ0bWVudCwgc2V0QXBhcnRtZW50IF0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgWyBjbGFzc0lucHV0LCBzZXRDbGFzc0lucHV0IF0gPSB1c2VTdGF0ZShcIlwiKTtcblxuICBjb25zdCBvbkFwYXJ0bWVudENoYW5nZSA9IGUgPT4gc2V0QXBhcnRtZW50KGUudGFyZ2V0LnZhbHVlKTtcblxuICBjb25zdCBvbkJsdXJJbnB1dCA9ICgpID0+IHtcbiAgICBpZihhcGFydG1lbnQubGVuZ3RoIDwgMikge1xuICAgICAgc2V0Q2xhc3NJbnB1dChcImluVmFsaWRcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldENsYXNzSW5wdXQoXCJ2YWxpZFwiKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuKFxuICAgIDxTLldyYXBJbnB1dD5cbiAgICAgIDxsYWJlbCBodG1sRm9yPVwiYXBhcnRtZW50XCIgYXJpYS1sYWJlbD1cIkVudGVyIHlvdXIgYXBhcnRtZW50IG51bWJlclwiPjwvbGFiZWw+XG4gICAgICA8Uy5JbnB1dFN0eWxlXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NJbnB1dH1cbiAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICBpZD1cImFwYXJ0bWVudFwiXG4gICAgICAgIG5hbWU9XCJhcGFydG1lbnRcIlxuICAgICAgICBwbGFjZWhvbGRlcj1cIkFwYXJ0bWVudFwiXG4gICAgICAgIHZhbHVlPXthcGFydG1lbnR9XG4gICAgICAgIG9uQ2hhbmdlPXtvbkFwYXJ0bWVudENoYW5nZX1cbiAgICAgICAgb25CbHVyPXtvbkJsdXJJbnB1dH0gLz5cbiAgICA8L1MuV3JhcElucHV0PlxuICApO1xufTtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQgQ29udGFpbmVyIGZyb20gXCIvc3JjL2NvbXBvbmVudHMvdWkvY29udGFpbmVyXCI7XG5cbmV4cG9ydCBjb25zdCBGb3JtU3R5bGUgPSBzdHlsZWQuZm9ybWBcbiAgd2lkdGg6IDEwMCU7XG5gO1xuXG5leHBvcnQgY29uc3QgRm9ybUNvbnRhaW5lciA9IHN0eWxlZChDb250YWluZXIpYFxuICBwYWRkaW5nLXRvcDogNDBweDtcbiAgcGFkZGluZy1ib3R0b206IDUwcHg7XG5cbiAgY29sdW1uLWNvdW50OiAyO1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDYzLjk0ZW0pIHtcbiAgICBjb2x1bW4tY291bnQ6IDE7XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgcGFkZGluZy10b3A6IDIwcHg7XG4gICAgcGFkZGluZy1ib3R0b206IDIwcHg7XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBGb3JtRmllbGRzZXQgPSBzdHlsZWQuZmllbGRzZXRgXG4gIGJvcmRlcjogbm9uZTtcbiAgbWFyZ2luOiAwIDAgMjBweCAwO1xuICBwYWRkaW5nOiAwO1xuXG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdhcDogNXB4O1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDQ3Ljk0ZW0pIHtcbiAgICBtYXJnaW46IDAgMCAxNXB4IDA7XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBGb3JtTGVnZW5kID0gc3R5bGVkLmxlZ2VuZGBcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IEZvcm1UZXh0YXJlYSA9IHN0eWxlZC50ZXh0YXJlYWBcbiAgYm9yZGVyOiAwO1xuICBib3JkZXItYm90dG9tOiAycHggc29saWQgIzFhNzdkMjtcbiAgcmVzaXplOiBub25lO1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDQ3Ljk0ZW0pIHtcbiAgICBoZWlnaHQ6IDEwMHB4O1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgRm9ybVdyYXBDaGVja2JveCA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgZm9udC1zaXplOiAwLjhlbTtcbiAgfVxuXG4gIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuXG4gICAgd2lkdGg6IDFweDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBtYXJnaW46IC0xcHg7XG4gICAgcGFkZGluZzogMDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcblxuICAgIGJvcmRlcjogMDtcblxuICAgIGNsaXA6IHJlY3QoMCAwIDAgMCk7XG4gICAgY2xpcC1wYXRoOiBpbnNldCgxMDAlKTtcbiAgfVxuXG4gIGxhYmVsIHtcbiAgICBwYWRkaW5nLWxlZnQ6IDM2cHg7XG5cbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgICAmOjpiZWZvcmUge1xuICAgICAgY29udGVudDogXCJcIjtcbiAgICAgIHdpZHRoOiAyMnB4O1xuICAgICAgaGVpZ2h0OiAyMnB4O1xuXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgdG9wOiAwO1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgIzAwMDAwMDtcbiAgICB9XG4gIH1cblxuICBpbnB1dDpjaGVja2VkICsgbGFiZWw6OmFmdGVyIHtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIHdpZHRoOiAxMHB4O1xuICAgIGhlaWdodDogMTBweDtcblxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiA2cHg7XG4gICAgdG9wOiA2cHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJlNDNhNTtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IEZvcm1CdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICBkaXNwbGF5OiBibG9jaztcbiAgd2lkdGg6IDEwMCU7XG4gIGJvcmRlcjogbm9uZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzgxN2FiZjtcbiAgY29sb3I6ICNmZmZmZmY7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDVweDtcblxuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHVzZXItc2VsZWN0OiBub25lO1xuXG4gICY6aG92ZXIge1xuICAgIG9wYWNpdHk6IDAuNztcbiAgfVxuYDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlTmF2aWdhdGUsIHVzZUxvY2F0aW9uIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgZGVsZXRpbmdBbGxGcm9tVGhlQmFza2V0IH0gZnJvbSBcIi9zcmMvZmVhdHVyZXMvYmVlcnMtc2xpY2VcIjtcbmltcG9ydCB7IHNlbGVjdEFsbEJlZXJzQmFza2V0LCBhZGRQcm9kdWN0cywgY2xlYXJCYXNrZXQsIHNlbGVjdEJlZXJCYXNrZXRJZHMgfSBmcm9tIFwiL3NyYy9mZWF0dXJlcy9iYXNrZXRTbGljZVwiO1xuaW1wb3J0IExpc3RPcmRlciBmcm9tIFwiL3NyYy9jb21wb25lbnRzL2Jsb2Nrcy9saXN0LW9yZGVyL1wiO1xuaW1wb3J0IENvbnRhaW5lciBmcm9tIFwiL3NyYy9jb21wb25lbnRzL3VpL2NvbnRhaW5lclwiO1xuaW1wb3J0IFdyYXBwZXIgZnJvbSBcIi9zcmMvY29tcG9uZW50cy91aS93cmFwcGVyL1wiO1xuaW1wb3J0IEJ1dHRvblNpZ24gZnJvbSBcIi9zcmMvY29tcG9uZW50cy91aS9idXR0b24tc2lnbi9cIjtcbmltcG9ydCBNb2RhbCBmcm9tIFwiL3NyYy9jb21wb25lbnRzL3VpL21vZGFsXCI7XG5pbXBvcnQgeyBJbnB1dE5hbWUsIElucHV0TWFpbCwgSW5wdXRUZWwsIElucHV0Q29udHJ5LCBJbnB1dENpdHksIElucHV0U3RyZWV0LCBJbnB1dEhvdXNlLCBJbnB1dEFwYXJ0bWVudCB9IGZyb20gXCIvc3JjL2NvbXBvbmVudHMvdWkvaW5wdXRcIjtcbmltcG9ydCAqIGFzIFMgZnJvbSBcIi4vc3R5bGVcIjtcblxuZnVuY3Rpb24gRm9ybVBhZ2UoKSB7XG4gIGNvbnN0IFttb2RhbCwgc2V0TW9kYWxdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3QgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBjb25zdCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG5cbiAgY29uc3QgYmVlcnNTdG9yZSA9IHVzZVNlbGVjdG9yKHNlbGVjdEJlZXJCYXNrZXRJZHMpO1xuICBjb25zdCBiZWVycyA9IHVzZVNlbGVjdG9yKHNlbGVjdEFsbEJlZXJzQmFza2V0KTtcbiAgY29uc3QgYXV0aG9yaXphdGlvbiA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLnNlc3Npb24uYXV0aG9yaXphdGlvbik7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgYmVlcnNCYXNrZXQgPSBbXTtcbiAgICBpZihiZWVyc0Jhc2tldC5sZW5ndGggPT09IGJlZXJzLmxlbmd0aCAmJiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImJhc2tldFwiKSkge1xuICAgICAgLy8g0L/QsNGA0YHQuNC8INC60L7RgNC30LjQvdGDLCDRgdC+0LfQtNCw0LXQvCDQvNCw0YHRgdC40LIg0L7QsdGK0LXQutGC0L7Qsi3Qt9C90LDRh9C10L3QuNC5LCDQtNC+0LHQsNCy0LvRj9C10Lwg0LrQsNC20LTQvtC80YMg0YbQtdC90YNcbiAgICAgIGJlZXJzQmFza2V0ID0gT2JqZWN0LnZhbHVlcyhKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiYmFza2V0XCIpKSkubWFwKGJlZXIgPT4gKHsuLi5iZWVyLCBwcmljZTogYmVlci5pYnUgKiBiZWVyLnF1YW50aXR5fSkpO1xuICAgICAgZGlzcGF0Y2goYWRkUHJvZHVjdHMoYmVlcnNCYXNrZXQpKTsgLy8g0L/QtdGA0LXQtNC10LvQsNGC0YwgbG9jYWxzdG9yZSDQv9C10YDQtdC90LXRgdGC0Lgg0LIgcmVkdXhcbiAgICAgIGNvbnNvbGUubG9nKCdFZmZlY3QgRm9ybScpXG4gICAgfVxuICB9KSwgW107XG5cbiAgY29uc3QgY2FsbGJhY2tzID0ge1xuICAgIC8vINGB0L7RhdGA0LDQvdC10L3QuNC1INGB0YHRi9C70LrQuCDQvdCwINGB0YLRgNCw0L3QuNGG0YNcbiAgICBzYXZlTG9jYWw6IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIG5hdmlnYXRlKCcvbG9naW4nLCB7c3RhdGU6IHsgYmFjazogbG9jYXRpb24ucGF0aG5hbWUgfX0pXG4gICAgfSwgW10pLFxuXG4gICAgb25TdWJtaXQ6IHVzZUNhbGxiYWNrKChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImJhc2tldFwiKTtcbiAgICAgIGRpc3BhdGNoKGRlbGV0aW5nQWxsRnJvbVRoZUJhc2tldChiZWVyc1N0b3JlKSk7XG4gICAgICBkaXNwYXRjaChjbGVhckJhc2tldCgpKTtcbiAgICAgIHNldE1vZGFsKHRydWUpO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVGltZW91dFwiKVxuICAgICAgICBuYXZpZ2F0ZSgnLycpO1xuICAgICAgfSwgMjAwMCk7XG4gICAgfSwgW10pXG4gIH07XG5cbiAgcmV0dXJuKFxuICAgIDw+XG4gICAgICB7YXV0aG9yaXphdGlvbiA/XG4gICAgICA8PlxuICAgICAgICA8Uy5Gb3JtU3R5bGUgYWN0aW9uPVwiaHR0cHM6Ly9lY2hvLmh0bWxhY2FkZW15LnJ1XCIgbWV0aG9kPVwicG9zdFwiIG9uU3VibWl0PXtjYWxsYmFja3Mub25TdWJtaXR9PlxuICAgICAgICAgIDxTLkZvcm1Db250YWluZXI+XG4gICAgICAgICAgICA8Uy5Gb3JtRmllbGRzZXQ+XG4gICAgICAgICAgICAgIDxTLkZvcm1MZWdlbmQ+QnV5ZXIgZGF0YTwvUy5Gb3JtTGVnZW5kPlxuICAgICAgICAgICAgICA8SW5wdXROYW1lIC8+XG4gICAgICAgICAgICAgIDxJbnB1dE1haWwgLz5cbiAgICAgICAgICAgICAgPElucHV0VGVsIC8+XG4gICAgICAgICAgICA8L1MuRm9ybUZpZWxkc2V0PlxuICAgICAgICAgICAgPFMuRm9ybUZpZWxkc2V0PlxuICAgICAgICAgICAgICA8Uy5Gb3JtTGVnZW5kPkFkZHJlc3Mgb2YgdGhlIHJlY2lwaWVudDwvUy5Gb3JtTGVnZW5kPlxuICAgICAgICAgICAgICA8SW5wdXRDb250cnkgLz5cbiAgICAgICAgICAgICAgPElucHV0Q2l0eSAvPlxuICAgICAgICAgICAgICA8SW5wdXRTdHJlZXQgLz5cbiAgICAgICAgICAgICAgPElucHV0SG91c2UgLz5cbiAgICAgICAgICAgICAgPElucHV0QXBhcnRtZW50IC8+XG4gICAgICAgICAgICA8L1MuRm9ybUZpZWxkc2V0PlxuICAgICAgICAgICAgPFMuRm9ybUZpZWxkc2V0PlxuICAgICAgICAgICAgICA8Uy5Gb3JtTGVnZW5kPkNvbW1lbnRzPC9TLkZvcm1MZWdlbmQ+XG4gICAgICAgICAgICAgIDxTLkZvcm1UZXh0YXJlYSBuYW1lPVwibWVzc2FuZ1wiIGNvbHM9XCIxMFwiIHJvd3M9XCIxMFwiPjwvUy5Gb3JtVGV4dGFyZWE+XG4gICAgICAgICAgICA8L1MuRm9ybUZpZWxkc2V0PlxuICAgICAgICAgICAgPFMuRm9ybUZpZWxkc2V0PlxuICAgICAgICAgICAgICA8TGlzdE9yZGVyIGJlZXJzPXtiZWVyc30gLz5cbiAgICAgICAgICAgIDwvUy5Gb3JtRmllbGRzZXQ+XG4gICAgICAgICAgICA8Uy5Gb3JtRmllbGRzZXQ+XG4gICAgICAgICAgICAgIDxTLkZvcm1MZWdlbmQ+UGF5bWVudCBtZXRob2RzPC9TLkZvcm1MZWdlbmQ+XG4gICAgICAgICAgICAgIDxTLkZvcm1XcmFwQ2hlY2tib3g+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwiY2FzaFwiIG5hbWU9XCJjYXNoXCIgcmVxdWlyZWQgZGVmYXVsdENoZWNrZWQgLz5cbiAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImNhc2hcIj5DYXNoIHBheW1lbnQ8L2xhYmVsPlxuICAgICAgICAgICAgICA8L1MuRm9ybVdyYXBDaGVja2JveD5cbiAgICAgICAgICAgICAgPFMuRm9ybVdyYXBDaGVja2JveD5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cImNvbnNlbnRUb0RhdGFQcm9jZXNzaW5nXCIgaWQ9XCJjb25zZW50XCIgcmVxdWlyZWQgZGVmYXVsdENoZWNrZWQgLz5cbiAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImNvbnNlbnRcIj5JIGFncmVlIHRvIHRoZSBwcm9jZXNzaW5nIG9mIG15IHBlcnNvbmFsIGRhdGE8L2xhYmVsPlxuICAgICAgICAgICAgICA8L1MuRm9ybVdyYXBDaGVja2JveD5cbiAgICAgICAgICAgIDwvUy5Gb3JtRmllbGRzZXQ+XG4gICAgICAgICAgICA8Uy5Gb3JtQnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBhcmlhLWxhYmVsPVwiU3VibWl0IGFuIG9yZGVyIHRvIHRoZSBzdG9yZVwiPlBsYWNlIGFuIG9yZGVyPC9TLkZvcm1CdXR0b24+XG4gICAgICAgICAgPC9TLkZvcm1Db250YWluZXI+XG4gICAgICAgIDwvUy5Gb3JtU3R5bGU+XG4gICAgICB7bW9kYWwgPT09IHRydWUgJiYgPE1vZGFsPk9yZGVyIGNvbXBsZXRlZDwvTW9kYWw+fVxuICAgICAgPC8+XG4gICAgICA6IDxDb250YWluZXI+XG4gICAgICAgICAgPExpc3RPcmRlciBiZWVycz17YmVlcnN9IC8+XG4gICAgICAgICAgPFdyYXBwZXI+PEJ1dHRvblNpZ24gdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9e2NhbGxiYWNrcy5zYXZlTG9jYWx9PlNpZ24gaW48L0J1dHRvblNpZ24+IHRvIHBsYWNlIGFuIG9yZGVyPC9XcmFwcGVyPlxuICAgICAgICA8L0NvbnRhaW5lcj5cbiAgICAgIH1cbiAgICA8Lz5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9ybVBhZ2U7XG4iLCJpbXBvcnQgc3R5bGVkLCB7IGNzcyB9IGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuXG5leHBvcnQgY29uc3QgSW5wdXRXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDIwJTtcblxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNjMuOTRlbSkge1xuICAgIHdpZHRoOiA3MCU7XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cblxuICBsYWJlbCB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHotaW5kZXg6IDE7XG5cbiAgICAkeyhwcm9wcykgPT4ge1xuICAgICAgaWYocHJvcHMuY2hpbGRyZW5bMF0ucHJvcHMudmFsdWUgIT09ICcnKSB7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgdG9wOiAycHg7XG4gICAgICAgICAgbGVmdDogMTBweDtcbiAgICAgICAgICBmb250LXNpemU6IDAuNWVtO1xuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxMjAlO1xuICAgICAgICBgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICB0b3A6IDEwcHg7XG4gICAgICAgICAgbGVmdDogMTBweDtcbiAgICAgICAgYDtcbiAgICAgIH1cbiAgICB9fVxuICB9XG5cbiAgaW5wdXQge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmc6IDEycHggOHB4IDhweDtcblxuICAgIGZvbnQtc2l6ZTogMWVtO1xuXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgfVxuXG4gIGlucHV0OmZvY3VzICsgbGFiZWwge1xuICAgIHRvcDogMnB4O1xuICAgIGZvbnQtc2l6ZTogMC41ZW07XG4gICAgbGluZS1oZWlnaHQ6IDEyMCU7XG4gIH1cbmA7XG4iLCJpbXBvcnQgUmVhY3QsIHt1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIHVzZUxheW91dEVmZmVjdH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSBcImxvZGFzaC5kZWJvdW5jZVwiO1xuaW1wb3J0ICogYXMgUyBmcm9tIFwiLi9zdHlsZVwiO1xuXG5mdW5jdGlvbiBJbnB1dExvZ2luKHByb3BzKSB7XG4gIC8vINCS0L3Rg9GC0YDQtdC90L3QuNC5INGB0YLQtdC50YIg0LTQu9GPINCx0YvRgdGC0YDQvtCz0L4g0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDQstCy0L7QtNCwXG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlU3RhdGUocHJvcHMudmFsdWUpO1xuXG4gIGNvbnN0IG9uQ2hhbmdlRGVib3VuY2UgPSB1c2VDYWxsYmFjayhcbiAgICBkZWJvdW5jZSh2YWx1ZSA9PiBwcm9wcy5vbkNoYW5nZSh2YWx1ZSksIDYwMCksXG4gICAgW3Byb3BzLm9uQ2hhbmdlXVxuICApO1xuXG4gIC8vINCe0LHRgNCw0LHQvtGC0YfQuNC6INC40LfQvNC10L3QtdC90LjQuSDQsiDQv9C+0LvQtVxuICBjb25zdCBvbkNoYW5nZSA9IChlKSA9PiB7XG4gICAgc2V0VmFsdWUoZS50YXJnZXQudmFsdWUpO1xuICAgIG9uQ2hhbmdlRGVib3VuY2UoZS50YXJnZXQudmFsdWUpO1xuICB9O1xuXG4gIC8vINCe0LHQvdC+0LLQu9C10L3QuNC1INGB0YLQtdC50YLQsCwg0LXRgdC70Lgg0L/QtdGA0LXQtNCw0L0g0L3QvtCy0YvQuSB2YWx1ZVxuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4gc2V0VmFsdWUocHJvcHMudmFsdWUpLCBbcHJvcHMudmFsdWVdKTtcblxuICByZXR1cm4oXG4gICAgPFMuSW5wdXRXcmFwcGVyPlxuICAgICAgPGlucHV0ICB0eXBlPXtwcm9wcy50eXBlfVxuICAgICAgICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICAgICAgaWQ9e3Byb3BzLnRleHR9IC8+XG4gICAgICA8bGFiZWwgIGh0bWxGb3I9e3Byb3BzLnRleHR9Pntwcm9wcy50ZXh0fTwvbGFiZWw+XG4gICAgPC9TLklucHV0V3JhcHBlcj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgSW5wdXRMb2dpbjtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQgQ29udGFpbmVyIGZyb20gXCIvc3JjL2NvbXBvbmVudHMvdWkvY29udGFpbmVyXCI7XG5cbmV4cG9ydCBjb25zdCBGb3JtU3R5bGUgPSBzdHlsZWQuZm9ybWBcbiAgd2lkdGg6IDEwMCU7XG5gO1xuXG5leHBvcnQgY29uc3QgRm9ybUNvbnRhaW5lciA9IHN0eWxlZChDb250YWluZXIpYFxuICBwYWRkaW5nLXRvcDogMjBweDtcbiAgcGFkZGluZy1ib3R0b206IDIwcHg7XG5cbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZ2FwOiAyMHB4O1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDYzLjk0ZW0pIHtcbiAgICBnYXA6IDE1cHg7XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgZ2FwOiAxMHB4O1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgRm9ybUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMjAlO1xuICBib3JkZXI6IG5vbmU7XG4gIGJhY2tncm91bmQtY29sb3I6ICM4MTdhYmY7XG4gIGNvbG9yOiAjZmZmZmZmO1xuICBwYWRkaW5nOiAxMHB4O1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG5cbiAgY3Vyc29yOiBwb2ludGVyO1xuICB1c2VyLXNlbGVjdDogbm9uZTtcblxuICAmOmhvdmVyIHtcbiAgICBvcGFjaXR5OiAwLjc7XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA2My45NGVtKSB7XG4gICAgd2lkdGg6IDcwJTtcbiAgfVxuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDQ3Ljk0ZW0pIHtcbiAgICB3aWR0aDogMTAwJTtcblxuICAgICY6aG92ZXIge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG4gIH1cbmA7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBTIGZyb20gXCIuL3N0eWxlXCI7XG5cbmZ1bmN0aW9uIEZvcm0ocHJvcHMpIHtcbiAgcmV0dXJuKFxuICAgIDxTLkZvcm1TdHlsZSBhY3Rpb249e3Byb3BzLmFjdGlvbn0gbWV0aG9kPXtwcm9wcy5tZXRob2R9IG9uU3VibWl0PXtwcm9wcy5vblN1Ym1pdH0+XG4gICAgICA8Uy5Gb3JtQ29udGFpbmVyPlxuICAgICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgICAgIDxTLkZvcm1CdXR0b24gdHlwZT1cInN1Ym1pdFwiPntwcm9wcy50ZXh0QnV0dG9ufTwvUy5Gb3JtQnV0dG9uPlxuICAgICAgPC9TLkZvcm1Db250YWluZXI+XG4gICAgPC9TLkZvcm1TdHlsZT5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9ybTtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQgQ29udGFpbmVyIGZyb20gXCIvc3JjL2NvbXBvbmVudHMvdWkvY29udGFpbmVyXCI7XG5cbmV4cG9ydCBjb25zdCBUZXN0Q29udGFpbmVyID0gc3R5bGVkKENvbnRhaW5lcilgXG4gIHBhZGRpbmctdG9wOiA0MHB4O1xuICBjb2xvcjogI2NkYzVjNTtcbmA7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBTIGZyb20gXCIuL3N0eWxlXCI7XG5cbmZ1bmN0aW9uIFRlc3QoKSB7XG4gIHJldHVybihcbiAgICA8Uy5UZXN0Q29udGFpbmVyPlxuICAgICAgRm9yIHRoZSB0ZXN0XG4gICAgICA8ZGl2PkxvZ2luOiB0ZXN0XzE8L2Rpdj5cbiAgICAgIDxkaXY+UGFzc3dvcmQ6IDEyMzQ1NjwvZGl2PlxuICAgIDwvUy5UZXN0Q29udGFpbmVyPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUZXN0O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyB1c2VMb2NhdGlvbiwgdXNlTmF2aWdhdGUgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgZmV0Y2hBdXRob3JpemF0aW9uIH0gZnJvbSBcIi9zcmMvZmVhdHVyZXMvc2Vzc2lvbi1zbGljZVwiO1xuaW1wb3J0IElucHV0TG9naW4gZnJvbSBcIi9zcmMvY29tcG9uZW50cy91aS9pbnB1dC1sb2dpblwiO1xuaW1wb3J0IEZvcm0gZnJvbSBcIi9zcmMvY29tcG9uZW50cy9ibG9ja3MvZm9ybVwiO1xuaW1wb3J0IFRlc3QgZnJvbSBcIi9zcmMvY29tcG9uZW50cy9ibG9ja3MvdGVzdFwiO1xuXG5mdW5jdGlvbiBMb2dpbigpIHtcblxuICBjb25zdCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGNvbnN0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBbbmFtZSwgc2V0TmFtZV0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtwYXNzd29yZCwgc2V0UGFzc3dvcmRdID0gdXNlU3RhdGUoJycpO1xuXG4gIGNvbnN0IHVzZXIgPSB7XG4gICAgXCJsb2dpblwiOiBuYW1lLFxuICAgIFwicGFzc3dvcmRcIjogcGFzc3dvcmQsXG4gICAgXCJyZW1lbWJlclwiOiB0cnVlXG4gIH1cblxuICBjb25zdCBjYWxsYmFja3MgPSB7XG4gICAgLy8g0LfQsNC/0YDQvtGBINC90LAg0LDQstGC0L7RgNC30LDRhtC40Y4g0Lgg0L/QtdGA0LXQvdCw0L/RgNCw0LLQu9C10L3QuNC1INC90LAg0YHRgtGA0LDQvdC40YbRgyDRgSDQutC+0YLQvtGA0L7QuSDQv9GA0LjRiNC70Lgg0LjQu9C4INC90LAg0LPQu9Cw0LLQvdGD0Y5cbiAgICBvblN1Ym1pdDogdXNlQ2FsbGJhY2soYXN5bmMgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRpc3BhdGNoKGZldGNoQXV0aG9yaXphdGlvbih1c2VyKSkudW53cmFwKCk7XG5cbiAgICAgIGlmKCFyZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgY29uc3QgYmFjayA9ICBsb2NhdGlvbi5zdGF0ZT8uYmFjayAmJiBsb2NhdGlvbi5zdGF0ZT8uYmFjayAhPT0gbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICA/IGxvY2F0aW9uLnN0YXRlPy5iYWNrXG4gICAgICAgICAgICAgICAgICAgICAgOiAnLyc7XG4gICAgICAgIG5hdmlnYXRlKGJhY2spO1xuICAgICAgfVxuICAgIH0sIFt1c2VyLCBsb2NhdGlvbi5zdGF0ZV0pLFxuICAgIC8vINC40LfQvNC10L3QtdC90LjQtSDQu9C+0LPQuNC90LBcbiAgICBvbkNoYW5nZUxvZ2luOiB1c2VDYWxsYmFjaygodmFsdWUpID0+IHtcbiAgICAgIHNldE5hbWUodmFsdWUpO1xuICAgIH0sIFtdKSxcbiAgICAvLyDQuNC30LzQtdC90LXQvdC40LUg0L/QsNGA0L7Qu9GPXG4gICAgb25DaGFuZ2VQYXNzd29yZDogdXNlQ2FsbGJhY2soKHZhbHVlKSA9PiB7XG4gICAgICBzZXRQYXNzd29yZCh2YWx1ZSk7XG4gICAgfSwgW10pLFxuICB9XG5cbiAgY29uc3Qgc2VsZWN0ID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gKHtcbiAgICBhdXRob3JpemF0aW9uOiBzdGF0ZS5zZXNzaW9uLmF1dGhvcml6YXRpb24sXG4gICAgZXJyb3I6IHN0YXRlLnNlc3Npb24uZXJyb3IsXG4gIH0pKTtcblxuICByZXR1cm4oXG4gICAgPD5cbiAgICAgIDxGb3JtIGFjdGlvbj1cIi9hcGkvdjEvdXNlcnMvc2lnblwiIG1ldGhvZD1cIlBPU1RcIiBvblN1Ym1pdD17Y2FsbGJhY2tzLm9uU3VibWl0fSB0ZXh0QnV0dG9uPVwiU2lnbiBJblwiPlxuICAgICAgICA8SW5wdXRMb2dpbiB0eXBlPVwidGV4dFwiIHZhbHVlPXtuYW1lfSB0ZXh0PVwiTG9naW5cIiBvbkNoYW5nZT17Y2FsbGJhY2tzLm9uQ2hhbmdlTG9naW59IC8+XG4gICAgICAgIDxJbnB1dExvZ2luIHR5cGU9XCJwYXNzd29yZFwiIHZhbHVlPXtwYXNzd29yZH0gdGV4dD1cIlBhc3N3b3JkXCIgb25DaGFuZ2U9e2NhbGxiYWNrcy5vbkNoYW5nZVBhc3N3b3JkfS8+XG4gICAgICAgIHtzZWxlY3QuZXJyb3IgfHwgPGRpdj57c2VsZWN0LmVycm9yfTwvZGl2Pn1cbiAgICAgIDwvRm9ybT5cbiAgICAgIDxUZXN0IC8+XG4gICAgPC8+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvZ2luO1xuIiwiaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcbmltcG9ydCBDb250YWluZXIgZnJvbSBcIi9zcmMvY29tcG9uZW50cy91aS9jb250YWluZXJcIjtcbmltcG9ydCB7IFRpdGxlLCBJbnRlcjkwMCB9IGZyb20gXCIvc3JjL3N0eWxlL21peGluc1wiO1xuXG5leHBvcnQgY29uc3QgUHJvZmlsZVNlY3Rpb24gPSBzdHlsZWQuc2VjdGlvbmBcbiAgd2lkdGg6IDEwMCU7XG5gO1xuXG5leHBvcnQgY29uc3QgUHJvZmlsZUNvbnRhaW5lciA9IHN0eWxlZChDb250YWluZXIpYFxuICBwYWRkaW5nLXRvcDogMjBweDtcbiAgcGFkZGluZy1ib3R0b206IDIwcHg7XG5cbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIGdhcDogMTBweDtcbmA7XG5cbmV4cG9ydCBjb25zdCBQcm9maWxlVGl0bGUgPSBzdHlsZWQuaDJgXG4gICR7VGl0bGV9O1xuXG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNjMuOTRlbSkge1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgVGV4dCA9IHN0eWxlZC5zcGFuYFxuICAke0ludGVyOTAwfTtcbiAgZm9udC1zaXplOiAxLjVlbTtcbiAgbGluZS1oZWlnaHQ6IDExNSU7XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNjMuOTRlbSkge1xuICAgIGZvbnQtc2l6ZTogMS4zZW07XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgZm9udC1zaXplOiAwLjhlbTtcbiAgfVxuYDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIFMgZnJvbSBcIi4vc3R5bGVcIjtcblxuZnVuY3Rpb24gUHJvZmlsZUNhcmQocHJvcHMpIHtcbiAgcmV0dXJuKFxuICAgIDxTLlByb2ZpbGVTZWN0aW9uPlxuICAgICAgPFMuUHJvZmlsZUNvbnRhaW5lcj5cbiAgICAgICAgPFMuUHJvZmlsZVRpdGxlPlByb2ZpbGU8L1MuUHJvZmlsZVRpdGxlPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxTLlRleHQ+TmFtZTogPC9TLlRleHQ+XG4gICAgICAgICAge3Byb3BzLm5hbWV9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxTLlRleHQ+RS1tYWlsOiA8L1MuVGV4dD5cbiAgICAgICAgICB7cHJvcHMuZW1haWx9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxTLlRleHQ+VGVsZXBob25lOiA8L1MuVGV4dD5cbiAgICAgICAgICB7cHJvcHMudGVsZXBob25lfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvUy5Qcm9maWxlQ29udGFpbmVyPlxuICAgIDwvUy5Qcm9maWxlU2VjdGlvbj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvZmlsZUNhcmQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IGZldGNoVXNlciB9IGZyb20gXCIvc3JjL2ZlYXR1cmVzL3VzZXItc2xpY2VcIjtcbmltcG9ydCBTcGlubmVyIGZyb20gXCIvc3JjL2NvbXBvbmVudHMvdWkvc3Bpbm5lclwiO1xuaW1wb3J0IFByb2ZpbGVDYXJkIGZyb20gXCIvc3JjL2NvbXBvbmVudHMvYmxvY2tzL3Byb2ZpbGUtY2FyZFwiO1xuaW1wb3J0IHsgTmF2aWdhdGUgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5mdW5jdGlvbiBQcm9maWxlKCkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG5cbiAgY29uc3Qgc2VsZWN0ID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gKHtcbiAgICB0b2tlbjogc3RhdGUuc2Vzc2lvbi50b2tlbixcbiAgICBhdXRob3JpemF0aW9uOiBzdGF0ZS5zZXNzaW9uLmF1dGhvcml6YXRpb24sXG4gICAgc3RhdHVzOiBzdGF0ZS51c2VyLnN0YXR1cyxcbiAgICBlcnJvcjogc3RhdGUudXNlci5lcnJvcixcbiAgICBuYW1lOiBzdGF0ZS51c2VyLm5hbWUsXG4gICAgZW1haWw6IHN0YXRlLnVzZXIuZW1haWwsXG4gICAgdGVsZXBob25lOiBzdGF0ZS51c2VyLnRlbGVwaG9uZVxuICB9KSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZihzZWxlY3QudG9rZW4pIGRpc3BhdGNoKGZldGNoVXNlcihzZWxlY3QudG9rZW4pKTtcbiAgICBjb25zb2xlLmxvZyhcImVmZiBwcm9maWxlXCIpXG4gIH0sIFtzZWxlY3QudG9rZW5dKTtcblxuICBsZXQgY29udGVudDtcblxuICBpZihzZWxlY3Quc3RhdHVzID09PSBcImxvYWRpbmdcIikge1xuICAgIGNvbnRlbnQgPSA8U3Bpbm5lciB0ZXh0PVwiTG9hZGluZy4uLlwiIC8+XG4gIH0gZWxzZSBpZihzZWxlY3Quc3RhdHVzID09PSBcInN1Y2NlZWRlZFwiKSB7XG4gICAgY29udGVudCA9IHNlbGVjdC5hdXRob3JpemF0aW9uXG4gICAgICAgICAgICAgID8gPFByb2ZpbGVDYXJkIG5hbWU9e3NlbGVjdC5uYW1lfSBlbWFpbD17c2VsZWN0LmVtYWlsfSB0ZWxlcGhvbmU9e3NlbGVjdC50ZWxlcGhvbmV9IC8+XG4gICAgICAgICAgICAgIDogPE5hdmlnYXRlIHRvPXtcIi9sb2dpblwifSAvPjtcbiAgfSBlbHNlIGlmKHNlbGVjdC5zdGF0dXMgPT09IFwiZmFpbGVkXCIpIHtcbiAgICBjb250ZW50ID0gPGRpdj57c2VsZWN0LmVycm9yfTwvZGl2PlxuICB9XG5cbiAgcmV0dXJuKFxuICAgIDw+e2NvbnRlbnR9PC8+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb2ZpbGU7XG4iLCJleHBvcnQgY29uc3QgdGhlbWUgPSB7XG4gIGNvbG9yQmxhY2s6IFwiIzMzMzMzM1wiLFxuICBjb2xvcldoaXRlOiBcIiNmZmZmZmZcIixcbiAgY29sb3JBY3RpdmVMaW5rOiBcIiNmZjAxMDFcIixcbiAgZmZJbnRlcjogIGBcIkludGVyXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZmAsXG4gIGZmUGVybWFuZW50TWFya2VyOiBgXCJQZXJtYW5lbnQtTWFya2VyXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZmAsXG4gIGluZGVudDogXCIxMDBweFwiLFxuICBpbmRlbnREZXNrdG9wOiBcIjUwcHhcIixcbiAgaW5kZW50TW9iaWxlOiBcIjIwcHhcIixcbiAgaW5kZW50VGFibGV0OiBcIjMwcHhcIixcbn07XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbiAgbWF4LXdpZHRoOiAxNDQwcHg7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwYWRkaW5nOiAkeyhwcm9wcykgPT4gcHJvcHMudGhlbWUuaW5kZW50fTtcblxuICBAbWVkaWEobWF4LXdpZHRoOiA4OS45NGVtKSB7XG4gICAgcGFkZGluZzogJHsocHJvcHMpID0+IHByb3BzLnRoZW1lLmluZGVudERlc2t0b3B9O1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNjMuOTRlbSkge1xuICAgIHBhZGRpbmc6ICR7KHByb3BzKSA9PiBwcm9wcy50aGVtZS5pbmRlbnRUYWJsZXR9O1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgIHBhZGRpbmc6ICR7KHByb3BzKSA9PiBwcm9wcy50aGVtZS5pbmRlbnRNb2JpbGV9O1xuICB9XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBDb250YWluZXI7XG4iLCJpbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUxvY2F0aW9uIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuZnVuY3Rpb24gU2Nyb2xsVG9Ub3AoKSB7XG4gIGNvbnN0IHsgcGF0aG5hbWUgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICB9LCBbcGF0aG5hbWVdKTtcblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2Nyb2xsVG9Ub3A7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmZ1bmN0aW9uIFNwaW5uZXIgKHsgdGV4dCA9ICcnLCBzaXplID0gJzVlbScgfSl7XG4gIGNvbnN0IGhlYWRlciA9IHRleHQgPyA8aDQ+e3RleHR9PC9oND4gOiBudWxsXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIHtoZWFkZXJ9XG4gICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogc2l6ZSwgd2lkdGg6IHNpemUgfX0gLz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBTcGlubmVyO1xuIiwiaW1wb3J0IHsgY3JlYXRlU2xpY2UsIGNyZWF0ZUVudGl0eUFkYXB0ZXIgfSBmcm9tIFwiQHJlZHV4anMvdG9vbGtpdFwiO1xuXG5jb25zdCBiYXNrZXRBZGFwdGVyID0gY3JlYXRlRW50aXR5QWRhcHRlcigpO1xuXG5jb25zdCBpbml0aWFsU3RhdGUgPSBiYXNrZXRBZGFwdGVyLmdldEluaXRpYWxTdGF0ZSgpO1xuXG5jb25zdCBiYXNrZXRTbGljZSA9IGNyZWF0ZVNsaWNlKHtcbiAgbmFtZTogXCJiYXNrZXRcIixcbiAgaW5pdGlhbFN0YXRlLFxuICByZWR1Y2Vyczoge1xuICAgIGFkZFByb2R1Y3RzKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGJhc2tldEFkYXB0ZXIudXBzZXJ0TWFueShzdGF0ZSwgYWN0aW9uLnBheWxvYWQpO1xuICAgIH0sXG4gICAgcmVtb3ZlUHJvZHVjdChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBiYXNrZXRBZGFwdGVyLnJlbW92ZU9uZShzdGF0ZSwgYWN0aW9uLnBheWxvYWQpO1xuICAgIH0sXG4gICAgZGVjcmVtZW50QmVlcnMoc3RhdGUsIGFjdGlvbikge1xuICAgICAgaWYoc3RhdGUuZW50aXRpZXNbYWN0aW9uLnBheWxvYWRdLnF1YW50aXR5ID09PSAxKXtcbiAgICAgICAgc3RhdGUuZW50aXRpZXNbYWN0aW9uLnBheWxvYWRdLnF1YW50aXR5ID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLmVudGl0aWVzW2FjdGlvbi5wYXlsb2FkXS5xdWFudGl0eS0tO1xuICAgICAgfVxuICAgIH0sXG4gICAgaW5jcmVtZW50QmVlcnMoc3RhdGUsIGFjdGlvbikge1xuICAgICAgc3RhdGUuZW50aXRpZXNbYWN0aW9uLnBheWxvYWRdLnF1YW50aXR5Kys7XG4gICAgfSxcbiAgICB1cGRhdGVQcmljZShzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZS5lbnRpdGllc1thY3Rpb24ucGF5bG9hZC5pZF0ucHJpY2UgPSBhY3Rpb24ucGF5bG9hZC5wcmljZTtcbiAgICB9LFxuICAgIGNsZWFyQmFza2V0KHN0YXRlKSB7XG4gICAgICBiYXNrZXRBZGFwdGVyLnJlbW92ZUFsbChzdGF0ZSk7XG4gICAgfVxuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgYmFza2V0U2xpY2UucmVkdWNlcjtcblxuZXhwb3J0IGNvbnN0IHsgYWRkUHJvZHVjdHMsIGRlY3JlbWVudEJlZXJzLCBpbmNyZW1lbnRCZWVycywgdXBkYXRlUHJpY2UsIHJlbW92ZVByb2R1Y3QsIGNsZWFyQmFza2V0IH0gPSBiYXNrZXRTbGljZS5hY3Rpb25zO1xuXG5leHBvcnQgY29uc3Qge1xuICBzZWxlY3RBbGw6IHNlbGVjdEFsbEJlZXJzQmFza2V0LFxuICBzZWxlY3RCeUlkOiBzZWxlY3RCZWVyQmFza2V0QnlJZCxcbiAgc2VsZWN0SWRzOiBzZWxlY3RCZWVyQmFza2V0SWRzXG59ID0gYmFza2V0QWRhcHRlci5nZXRTZWxlY3RvcnMoc3RhdGUgPT4gc3RhdGUuYmFza2V0KTtcbiIsImltcG9ydCB7IGNyZWF0ZVNsaWNlLCBjcmVhdGVBc3luY1RodW5rIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcblxuLy8g0LfQsNC/0YDQvtGBINC90LAg0LDQstGC0L7RgNC40LfQsNGG0LjRjlxuZXhwb3J0IGNvbnN0IGZldGNoQXV0aG9yaXphdGlvbiA9IGNyZWF0ZUFzeW5jVGh1bmsoXCJzZXNzaW9uL2F1dGhvcml6YXRpb25cIiwgYXN5bmMgKGJvZHkpID0+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS92MS91c2Vycy9zaWduP2ZpZWxkcz10b2tlbiUyQ3Byb2ZpbGUobmFtZSknLHtcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICB9LFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxuICB9KTtcblxuICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgaWYocmVzdWx0LnJlc3VsdCkge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2tlbicsIHJlc3VsdC5yZXN1bHQudG9rZW4pO1xuICB9IGVsc2Uge1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd0b2tlbicpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG4vLyDQt9Cw0L/RgNC+0YEg0L3QsCDQstCw0LvQuNC00L3QvtGB0YLRjCDRgtC+0LrQtdC90LBcbmV4cG9ydCBjb25zdCBmZXRjaENoZWNrID0gY3JlYXRlQXN5bmNUaHVuayhcInNlc3Npb24vY2hlY2tcIiwgYXN5bmMoKSA9PiB7XG4gIGNvbnN0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyk7XG5cbiAgbGV0IHJlc3VsdDtcbiAgaWYodG9rZW4pIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL3YxL3VzZXJzL3NlbGY/ZmllbGRzPXRva2VuJTJDcHJvZmlsZShuYW1lKScsIHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdYLVRva2VuJzogdG9rZW5cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gXCJzZXNzaW9uIG5vXCI7XG4gIH1cblxuICByZXR1cm4ge3Jlc3VsdCwgdG9rZW59O1xufSlcblxuLy8g0LfQsNC/0YDQvtGBINC90LAg0LLRi9GF0L7QtFxuZXhwb3J0IGNvbnN0IGZldGNoU2lnbk91dCA9IGNyZWF0ZUFzeW5jVGh1bmsoXCJzZXNzaW9uL3NpZ25PdXRcIiwgYXN5bmMgKCkgPT4ge1xuXG4gIGNvbnN0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0b2tlblwiKTtcblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL3YxL3VzZXJzL3NpZ24nLCB7XG4gICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgJ1gtVG9rZW4nOiB0b2tlblxuICAgIH1cbiAgfSlcblxuICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgaWYocmVzdWx0LnJlc3VsdCkge1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd0b2tlbicpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKHJlc3VsdC5yZXN1bHQuZXJyb3IubWVzc2FnZSlcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxuY29uc3Qgc2Vzc2lvblNsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICBuYW1lOiBcInNlc3Npb25cIixcbiAgaW5pdGlhbFN0YXRlOiB7XG4gICAgYXV0aG9yaXphdGlvbjogZmFsc2UsXG4gICAgdG9rZW46IFwiXCIsXG4gICAgc3RhdHVzOiBcImlkbGVcIixcbiAgICBuYW1lOiBcIlwiXG4gIH0sXG4gIGV4dHJhUmVkdWNlcnMoYnVpbGRlcikge1xuICAgIGJ1aWxkZXJcbiAgICAgIC5hZGRDYXNlKGZldGNoQXV0aG9yaXphdGlvbi5wZW5kaW5nLCAoc3RhdGUpID0+IHtcbiAgICAgICAgc3RhdGUuc3RhdHVzID0gXCJsb2FkaW5nXCI7XG4gICAgICB9KVxuICAgICAgLmFkZENhc2UoZmV0Y2hBdXRob3JpemF0aW9uLmZ1bGZpbGxlZCwgKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAgICAgc3RhdGUuc3RhdHVzID0gXCJzdWNjZWVkZWRcIjtcbiAgICAgICAgaWYoYWN0aW9uLnBheWxvYWQuZXJyb3IpIHtcbiAgICAgICAgICBzdGF0ZS5lcnJvciA9IGFjdGlvbi5wYXlsb2FkLmVycm9yLm1lc3NhZ2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUuYXV0aG9yaXphdGlvbiA9IHRydWU7XG4gICAgICAgICAgc3RhdGUudG9rZW4gPSBhY3Rpb24ucGF5bG9hZC5yZXN1bHQudG9rZW47XG4gICAgICAgICAgc3RhdGUubmFtZSA9IGFjdGlvbi5wYXlsb2FkLnJlc3VsdC51c2VyLnByb2ZpbGUubmFtZTtcbiAgICAgICAgICBzdGF0ZS5lcnJvciA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuYWRkQ2FzZShmZXRjaEF1dGhvcml6YXRpb24ucmVqZWN0ZWQsIChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgICAgIHN0YXRlLnN0YXR1cyA9IFwiZmFpbGVkXCI7XG4gICAgICAgIHN0YXRlLmVycm9yID0gYWN0aW9uLnBheWxvYWQuZXJyb3IubWVzc2FnZTtcbiAgICAgIH0pXG4gICAgICAuYWRkQ2FzZShmZXRjaFNpZ25PdXQucGVuZGluZywgKHN0YXRlKSA9PiB7XG4gICAgICAgIHN0YXRlLnN0YXR1cyA9IFwibG9hZGluZ1wiO1xuICAgICAgfSlcbiAgICAgIC5hZGRDYXNlKGZldGNoU2lnbk91dC5mdWxmaWxsZWQsIChzdGF0ZSkgPT4ge1xuICAgICAgICBzdGF0ZS5zdGF0dXMgPSBcInN1Y2NlZWRlZFwiO1xuICAgICAgICBzdGF0ZS5lcnJvciA9IFwiXCI7XG4gICAgICAgIHN0YXRlLmF1dGhvcml6YXRpb24gPSBmYWxzZTtcbiAgICAgICAgc3RhdGUudG9rZW4gPSBcIlwiO1xuICAgICAgICBzdGF0ZS5uYW1lID0gXCJcIjtcbiAgICAgICAgc3RhdGUuZXJyb3IgPSBcIlwiO1xuICAgICAgfSlcbiAgICAgIC5hZGRDYXNlKGZldGNoU2lnbk91dC5yZWplY3RlZCwgKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAgICAgc3RhdGUuc3RhdHVzID0gXCJmYWlsZWRcIjtcbiAgICAgICAgc3RhdGUuZXJyb3IgPSBhY3Rpb24ucGF5bG9hZC5lcnJvci5tZXNzYWdlO1xuICAgICAgfSlcbiAgICAgIC5hZGRDYXNlKGZldGNoQ2hlY2sucGVuZGluZywgKHN0YXRlKSA9PiB7XG4gICAgICAgIHN0YXRlLnN0YXR1cyA9IFwibG9hZGluZ1wiO1xuICAgICAgfSlcbiAgICAgIC5hZGRDYXNlKGZldGNoQ2hlY2suZnVsZmlsbGVkLCAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgICAgICBzdGF0ZS5zdGF0dXMgPSBcInN1Y2NlZWRlZFwiO1xuICAgICAgICBpZihhY3Rpb24ucGF5bG9hZC5lcnJvcikge1xuICAgICAgICAgIHN0YXRlLmVycm9yID0gYWN0aW9uLnBheWxvYWQuZXJyb3IubWVzc2FnZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZS5hdXRob3JpemF0aW9uID0gdHJ1ZTtcbiAgICAgICAgICBzdGF0ZS50b2tlbiA9IGFjdGlvbi5wYXlsb2FkLnRva2VuO1xuICAgICAgICAgIHN0YXRlLm5hbWUgPSBhY3Rpb24ucGF5bG9hZC5yZXN1bHQucmVzdWx0LnByb2ZpbGUubmFtZTtcbiAgICAgICAgICBzdGF0ZS5lcnJvciA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuYWRkQ2FzZShmZXRjaENoZWNrLnJlamVjdGVkLCAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgICAgICBzdGF0ZS5zdGF0dXMgPSBcImZhaWxlZFwiO1xuICAgICAgICBzdGF0ZS5lcnJvciA9IGFjdGlvbi5wYXlsb2FkLmVycm9yLm1lc3NhZ2U7XG4gICAgICB9KVxuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc2Vzc2lvblNsaWNlLnJlZHVjZXI7XG4iLCJpbXBvcnQgeyBjcmVhdGVTbGljZSwgY3JlYXRlQXN5bmNUaHVuayB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XG5cbi8vINC/0L7Qu9GD0YfQtdC90LjQtSDQtNCw0L3QvdGL0YUg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPXG5leHBvcnQgY29uc3QgZmV0Y2hVc2VyID0gY3JlYXRlQXN5bmNUaHVuayhcInVzZXIvZGF0YVwiLCBhc3luYyAodG9rZW4pID0+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS92MS91c2Vycy9zZWxmJywge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgaGVhZGVyczoge1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICdYLVRva2VuJzogdG9rZW5cbiAgICB9XG4gIH0pXG5cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxuY29uc3QgdXNlclNsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICBuYW1lOiBcInVzZXJcIixcbiAgaW5pdGlhbFN0YXRlOiB7XG4gICAgc3RhdHVzOiBcImlkbGVcIixcbiAgICBuYW1lOiBcIlwiLFxuICAgIHRlbGVwaG9uZTogXCJcIixcbiAgICBlbWFpbDogXCJcIlxuICB9LFxuICBleHRyYVJlZHVjZXJzKGJ1aWxkZXIpIHtcbiAgICBidWlsZGVyXG4gICAgICAuYWRkQ2FzZShmZXRjaFVzZXIucGVuZGluZywgKHN0YXRlKSA9PiB7XG4gICAgICAgIHN0YXRlLnN0YXR1cyA9IFwibG9hZGluZ1wiO1xuICAgICAgfSlcbiAgICAgIC5hZGRDYXNlKGZldGNoVXNlci5mdWxmaWxsZWQsIChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgICAgIHN0YXRlLnN0YXR1cyA9IFwic3VjY2VlZGVkXCI7XG4gICAgICAgIGlmKGFjdGlvbi5wYXlsb2FkLmVycm9yKSB7XG4gICAgICAgICAgc3RhdGUuZXJyb3IgPSBhY3Rpb24ucGF5bG9hZC5lcnJvci5tZXNzYWdlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlLnRlbGVwaG9uZSA9IGFjdGlvbi5wYXlsb2FkLnJlc3VsdC5wcm9maWxlLnBob25lO1xuICAgICAgICAgIHN0YXRlLmVtYWlsID0gYWN0aW9uLnBheWxvYWQucmVzdWx0LmVtYWlsO1xuICAgICAgICAgIHN0YXRlLm5hbWUgPSBhY3Rpb24ucGF5bG9hZC5yZXN1bHQucHJvZmlsZS5uYW1lO1xuICAgICAgICAgIHN0YXRlLmVycm9yID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5hZGRDYXNlKGZldGNoVXNlci5yZWplY3RlZCwgKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAgICAgc3RhdGUuc3RhdHVzID0gXCJmYWlsZWRcIjtcbiAgICAgICAgc3RhdGUuZXJyb3IgPSBhY3Rpb24ucGF5bG9hZC5lcnJvci5tZXNzYWdlO1xuICAgICAgfSlcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHVzZXJTbGljZS5yZWR1Y2VyO1xuIiwiaW1wb3J0IHsgY3JlYXRlR2xvYmFsU3R5bGUgfSBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcblxuaW1wb3J0IFBlcm1hbmVudE1hcmtlcldvZmYgZnJvbSBcIi4vcGVybWFuZW50LW1hcmtlci1yZWd1bGFyLndvZmZcIjtcbmltcG9ydCBQZXJtYW5lbnRNYXJrZXJXb2ZmMiBmcm9tIFwiLi9wZXJtYW5lbnQtbWFya2VyLXJlZ3VsYXIud29mZjJcIjtcblxuaW1wb3J0IEludGVyUmVndWxhcldvZmYgZnJvbSBcIi4vaW50ZXItcmVndWxhci53b2ZmXCI7XG5pbXBvcnQgSW50ZXJSZWd1bGFyV29mZjIgZnJvbSBcIi4vaW50ZXItcmVndWxhci53b2ZmMlwiO1xuXG5pbXBvcnQgSW50ZXJNZWRpdW1Xb2ZmIGZyb20gXCIuL2ludGVyLW1lZGl1bS53b2ZmXCI7XG5pbXBvcnQgSW50ZXJNZWRpdW1Xb2ZmMiBmcm9tIFwiLi9pbnRlci1tZWRpdW0ud29mZjJcIjtcblxuaW1wb3J0IEludGVyQmxhY2tXb2ZmIGZyb20gXCIuL2ludGVyLWJsYWNrLndvZmZcIjtcbmltcG9ydCBJbnRlckJsYWNrV29mZjIgZnJvbSBcIi4vaW50ZXItYmxhY2sud29mZjJcIjtcblxuZXhwb3J0IGNvbnN0IEdsb2JhbEZvbnRzID0gY3JlYXRlR2xvYmFsU3R5bGVgXG4gIEBmb250LWZhY2Uge1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIGZvbnQtZmFtaWx5OiBcIlBlcm1hbmVudC1NYXJrZXJcIjtcblxuICAgIGZvbnQtZGlzcGxheTogc3dhcDtcbiAgICBzcmM6XG4gICAgICB1cmwoJHtQZXJtYW5lbnRNYXJrZXJXb2ZmMn0pIGZvcm1hdChcIndvZmYyXCIpLFxuICAgICAgdXJsKCR7UGVybWFuZW50TWFya2VyV29mZn0pIGZvcm1hdChcIndvZmZcIik7XG4gIH1cblxuICBAZm9udC1mYWNlIHtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBmb250LWZhbWlseTogXCJJbnRlclwiO1xuXG4gICAgZm9udC1kaXNwbGF5OiBzd2FwO1xuICAgIHNyYzpcbiAgICAgIHVybCgke0ludGVyUmVndWxhcldvZmYyfSkgZm9ybWF0KFwid29mZjJcIiksXG4gICAgICB1cmwoJHtJbnRlclJlZ3VsYXJXb2ZmfSkgZm9ybWF0KFwid29mZlwiKTtcbiAgfVxuXG4gIEBmb250LWZhY2Uge1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICAgIGZvbnQtZmFtaWx5OiBcIkludGVyXCI7XG5cbiAgICBmb250LWRpc3BsYXk6IHN3YXA7XG4gICAgc3JjOlxuICAgICAgdXJsKCR7SW50ZXJNZWRpdW1Xb2ZmMn0pIGZvcm1hdChcIndvZmYyXCIpLFxuICAgICAgdXJsKCR7SW50ZXJNZWRpdW1Xb2ZmfSkgZm9ybWF0KFwid29mZlwiKTtcbiAgfVxuXG5cbiAgQGZvbnQtZmFjZSB7XG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgIGZvbnQtd2VpZ2h0OiA5MDA7XG4gICAgZm9udC1mYW1pbHk6IFwiSW50ZXJcIjtcblxuICAgIGZvbnQtZGlzcGxheTogc3dhcDtcbiAgICBzcmM6XG4gICAgICB1cmwoJHtJbnRlckJsYWNrV29mZjJ9KSBmb3JtYXQoXCJ3b2ZmMlwiKSxcbiAgICAgIHVybCgke0ludGVyQmxhY2tXb2ZmfSkgZm9ybWF0KFwid29mZlwiKTtcbiAgfVxuYDtcblxuIiwiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuLyoqXHJcbiAqINCl0YPQuiDQtNC70Y8g0LDRgdC40L3RhdGA0L7QvdC90YvRhSDRgNCw0YHRh9GR0YLQvtCyLCDQutC+0YLQvtGA0YvQtSDQsdGD0LTRg9GCINC40YHQv9C+0LvQvdC10L3RiyDQv9GA0Lgg0L/QtdGA0LLQvtC8INGA0LXQvdC00LXRgNC1INC40LvQuCDQuNC30LzQtdC90LXQvdC40LggZGVwZW5kcy5cclxuICogQHBhcmFtIGluaXRGdW5jIHtGdW5jdGlvbn0g0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GM0YHQutCw0Y8g0YTRg9C90LrRhtC40Y9cclxuICogQHBhcmFtIGRlcGVuZHMge0FycmF5fSDQl9C90LDRh9C10L3QuNGPINC/0YDQuCDRgdC80LXQvdC1INC60L7RgtC+0YDRi9GFIGNhbGxiYWNrINGB0L3QvtCy0LAg0LjRgdC/0L7Qu9C90LjRgtGB0Y8uXHJcbiAqIEBwYXJhbSBvcHRpb25zIHt7YmFja0ZvcndhcmR9fVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlSW5pdChpbml0RnVuYywgZGVwZW5kcyA9IFtdLCBiYWNrRm9yd2FyZCA9IGZhbHNlKSB7XHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGluaXRGdW5jKGZhbHNlKTtcclxuICAgIC8vINCV0YHQu9C4INCyINC40YHRgtC+0YDQuNC4INCx0YDQsNGD0LfQtdGA0LAg0LzQtdC90Y/RjtGC0YHRjyDRgtC+0LvRjNC60L4gc2VhcmNoLdC/0LDRgNCw0LzQtdGC0YDRiywg0YLQviByZWFjdC1yb3V0ZXIg0L3QtSDQvtC/0L7QstC10YHRgtC40YJcclxuICAgIC8vINC60L7QvNC/0L7QvdC10L3RgiDQvtCxINC40LfQvNC10L3QtdC90LjRj9GFLCDQv9C+0Y3RgtC+0LzRgyDRhdGD0Log0LzQvtC20L3QviDRj9Cy0L3QviDQv9C+0LTQv9C40YHQsNGC0Ywg0L3QsCDRgdC+0LHRi9GC0LjQtSDQuNC30LzQtdC90LXQvdC40Y8g0LjRgdGC0L7RgNC40LhcclxuICAgIC8vINCx0YDQsNGD0LfQtdGA0LAgKNC10YHQu9C4INC90YPQttC90L4g0L7RgtGA0LXQsNCz0LjRgNC+0LLQsNGC0Ywg0L3QsCDQuNC30LzQtdC90LXQvdC40Y8gc2VhcmNoLdC/0LDRgNCw0LzQtdGC0YDQvtCyINC/0YDQuCDQv9C10YDQtdGF0L7QtNC1INC/0L4g0LjRgdGC0L7RgNC40LgpXHJcbiAgICBpZiAoYmFja0ZvcndhcmQpIHtcclxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgaW5pdEZ1bmMpO1xyXG4gICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGluaXRGdW5jKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9LCBkZXBlbmRzKTtcclxufVxyXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcblxuZXhwb3J0IGNvbnN0IFBlcm1hbmVudE1hcmtlcjQwMCA9IGNzc2BcbiAgZm9udC1mYW1pbHk6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuZmZQZXJtYW5lbnRNYXJrZXJ9O1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG5gO1xuXG5leHBvcnQgY29uc3QgSW50ZXI0MDAgPSBjc3NgXG4gIGZvbnQtZmFtaWx5OiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmZmSW50ZXJ9O1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG5gO1xuXG5leHBvcnQgY29uc3QgSW50ZXI1MDAgPSBjc3NgXG4gIGZvbnQtZmFtaWx5OiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmZmSW50ZXJ9O1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG5gO1xuXG5leHBvcnQgY29uc3QgSW50ZXI5MDAgPSBjc3NgXG4gIGZvbnQtZmFtaWx5OiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmZmSW50ZXJ9O1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtd2VpZ2h0OiA5MDA7XG5gO1xuXG5leHBvcnQgY29uc3QgVGl0bGUgPSBjc3NgXG4gIG1hcmdpbjogMDtcblxuICAke0ludGVyOTAwfTtcbiAgZm9udC1zaXplOiAyZW07XG4gIGxpbmUtaGVpZ2h0OiAxMTUlO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGNvbG9yOiAjZWU1YzA3O1xuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDYzLjk0ZW0pIHtcbiAgICBmb250LXNpemU6IDEuNWVtO1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNDcuOTRlbSkge1xuICAgIGZvbnQtc2l6ZTogMS4xZW07XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBidXR0b25TID0gY3NzYFxuICBmb250LXNpemU6IDEuNWVtO1xuICBsaW5lLWhlaWdodDogMTUwJTtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAyMHB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGJvcmRlcjogbm9uZTtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuXG4gIGFsaWduLXNlbGY6IGVuZDtcblxuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHVzZXItc2VsZWN0OiBub25lO1xuXG4gICY6aG92ZXIge1xuICAgIG9wYWNpdHk6IDAuODtcbiAgfVxuXG4gIEBtZWRpYShtYXgtd2lkdGg6IDg5Ljk0ZW0pIHtcbiAgICBwYWRkaW5nOiAxNXB4O1xuICB9XG5cbiAgQG1lZGlhKG1heC13aWR0aDogNjMuOTRlbSkge1xuICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgZm9udC1zaXplOiAxZW07XG4gIH1cblxuICBAbWVkaWEobWF4LXdpZHRoOiA0Ny45NGVtKSB7XG4gICAgcGFkZGluZzogN3B4O1xuICAgIGZvbnQtc2l6ZTogMC43ZW07XG4gIH1cbmA7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcXVlcnkub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyB0aGUgYFR5cGVFcnJvcmAgbWVzc2FnZSBmb3IgXCJGdW5jdGlvbnNcIiBtZXRob2RzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgbmF0aXZlTWluID0gTWF0aC5taW47XG5cbi8qKlxuICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgRGF0ZVxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gKiB9LCBfLm5vdygpKTtcbiAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gKi9cbnZhciBub3cgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICogaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gKlxuICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAqIH0pKTtcbiAqXG4gKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsYXN0QXJncyxcbiAgICAgIGxhc3RUaGlzLFxuICAgICAgbWF4V2FpdCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHRpbWVySWQsXG4gICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgcmVzdWx0ID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgcmV0dXJuIG1heGluZyA/IG5hdGl2ZU1pbihyZXN1bHQsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgIH1cbiAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgfVxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgfVxuICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICByZXR1cm4gZGVib3VuY2VkO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b051bWJlcigzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gSW5maW5pdHlcbiAqXG4gKiBfLnRvTnVtYmVyKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gTkFOO1xuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gIH1cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWJvdW5jZTtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLGNhPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gcChhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn12YXIgZGE9bmV3IFNldCxlYT17fTtmdW5jdGlvbiBmYShhLGIpe2hhKGEsYik7aGEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGhhKGEsYil7ZWFbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWRhLmFkZChiW2FdKX1cbnZhciBpYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksamE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxrYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbGE9XG57fSxtYT17fTtmdW5jdGlvbiBvYShhKXtpZihqYS5jYWxsKG1hLGEpKXJldHVybiEwO2lmKGphLmNhbGwobGEsYSkpcmV0dXJuITE7aWYoa2EudGVzdChhKSlyZXR1cm4gbWFbYV09ITA7bGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gcGEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBxYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxwYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciB6PXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO3pbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgcmE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBzYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxcbnNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbnoueGxpbmtIcmVmPW5ldyB2KFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHRhKGEsYixjLGQpe3ZhciBlPXouaGFzT3duUHJvcGVydHkoYik/eltiXTpudWxsO2lmKG51bGwhPT1lPzAhPT1lLnR5cGU6ZHx8ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdKXFhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9vYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSl9XG52YXIgdWE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsdmE9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksd2E9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSx5YT1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksemE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLEFhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxCYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksQ2E9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksRGE9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLEVhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxGYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxHYT1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxIYT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7U3ltYm9sLmZvcihcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7XG52YXIgSWE9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QuY2FjaGVcIik7U3ltYm9sLmZvcihcInJlYWN0LnRyYWNpbmdfbWFya2VyXCIpO3ZhciBKYT1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gS2EoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUphJiZhW0phXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBBPU9iamVjdC5hc3NpZ24sTGE7ZnVuY3Rpb24gTWEoYSl7aWYodm9pZCAwPT09TGEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TGE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK0xhK2F9dmFyIE5hPSExO1xuZnVuY3Rpb24gT2EoYSxiKXtpZighYXx8TmEpcmV0dXJuXCJcIjtOYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2gobCl7dmFyIGQ9bH1SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGwpe2Q9bH1hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGwpe2Q9bH1hKCl9fWNhdGNoKGwpe2lmKGwmJmQmJlwic3RyaW5nXCI9PT10eXBlb2YgbC5zdGFjayl7Zm9yKHZhciBlPWwuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSl7dmFyIGs9XCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTthLmRpc3BsYXlOYW1lJiZrLmluY2x1ZGVzKFwiPGFub255bW91cz5cIikmJihrPWsucmVwbGFjZShcIjxhbm9ueW1vdXM+XCIsYS5kaXNwbGF5TmFtZSkpO3JldHVybiBrfXdoaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtOYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP01hKGEpOlwiXCJ9XG5mdW5jdGlvbiBQYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTWEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBNYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTWEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBNYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9T2EoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9T2EoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9T2EoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBRYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHlhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHdhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBBYTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB6YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEVhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIEZhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIENhOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIEJhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIERhOnZhciBiPWEucmVuZGVyO2E9YS5kaXNwbGF5TmFtZTthfHwoYT1iLmRpc3BsYXlOYW1lfHxcbmIubmFtZXx8XCJcIixhPVwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtyZXR1cm4gYTtjYXNlIEdhOnJldHVybiBiPWEuZGlzcGxheU5hbWV8fG51bGwsbnVsbCE9PWI/YjpRYShhLnR5cGUpfHxcIk1lbW9cIjtjYXNlIEhhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBRYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gUmEoYSl7dmFyIGI9YS50eXBlO3N3aXRjaChhLnRhZyl7Y2FzZSAyNDpyZXR1cm5cIkNhY2hlXCI7Y2FzZSA5OnJldHVybihiLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIDEwOnJldHVybihiLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIDE4OnJldHVyblwiRGVoeWRyYXRlZEZyYWdtZW50XCI7Y2FzZSAxMTpyZXR1cm4gYT1iLnJlbmRlcixhPWEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJcIixiLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgNzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSA1OnJldHVybiBiO2Nhc2UgNDpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgMzpyZXR1cm5cIlJvb3RcIjtjYXNlIDY6cmV0dXJuXCJUZXh0XCI7Y2FzZSAxNjpyZXR1cm4gUWEoYik7Y2FzZSA4OnJldHVybiBiPT09emE/XCJTdHJpY3RNb2RlXCI6XCJNb2RlXCI7Y2FzZSAyMjpyZXR1cm5cIk9mZnNjcmVlblwiO1xuY2FzZSAxMjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSAyMTpyZXR1cm5cIlNjb3BlXCI7Y2FzZSAxMzpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSAxOTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwiO2Nhc2UgMjU6cmV0dXJuXCJUcmFjaW5nTWFya2VyXCI7Y2FzZSAxOmNhc2UgMDpjYXNlIDE3OmNhc2UgMjpjYXNlIDE0OmNhc2UgMTU6aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGIuZGlzcGxheU5hbWV8fGIubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2Nhc2UgXCJvYmplY3RcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIGFiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdGEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGJiKGEsYil7YWIoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9jYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZjYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGRiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgZWI9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHAoOTEpKTtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcihwKDkyKSk7aWYoZWIoYykpe2lmKDE8Yy5sZW5ndGgpdGhyb3cgRXJyb3IocCg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9ZnVuY3Rpb24ga2IoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1cbmZ1bmN0aW9uIGxiKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9rYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBtYixuYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIT09YS5uYW1lc3BhY2VVUkl8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXttYj1tYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTttYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1tYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBvYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHBiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxhc3BlY3RSYXRpbzohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsXG56b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHFiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhwYikuZm9yRWFjaChmdW5jdGlvbihhKXtxYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3BiW2JdPXBiW2FdfSl9KTtmdW5jdGlvbiByYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cGIuaGFzT3duUHJvcGVydHkoYSkmJnBiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHNiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXJiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHRiPUEoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB1YihhLGIpe2lmKGIpe2lmKHRiW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IocCg2MCkpO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTHx8IShcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IocCg2MikpO319XG5mdW5jdGlvbiB2YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHdiPW51bGw7ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcihwKDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYigpe312YXIgSWI9ITE7ZnVuY3Rpb24gSmIoYSxiLGMpe2lmKEliKXJldHVybiBhKGIsYyk7SWI9ITA7dHJ5e3JldHVybiBHYihhLGIsYyl9ZmluYWxseXtpZihJYj0hMSxudWxsIT09emJ8fG51bGwhPT1BYilIYigpLEZiKCl9fVxuZnVuY3Rpb24gS2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcihwKDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIExiPSExO2lmKGlhKXRyeXt2YXIgTWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KE1iLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtMYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpfWNhdGNoKGEpe0xiPSExfWZ1bmN0aW9uIE5iKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBPYj0hMSxQYj1udWxsLFFiPSExLFJiPW51bGwsU2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7T2I9ITA7UGI9YX19O2Z1bmN0aW9uIFRiKGEsYixjLGQsZSxmLGcsaCxrKXtPYj0hMTtQYj1udWxsO05iLmFwcGx5KFNiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBVYihhLGIsYyxkLGUsZixnLGgsayl7VGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKE9iKXtpZihPYil7dmFyIGw9UGI7T2I9ITE7UGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHAoMTk4KSk7UWJ8fChRYj0hMCxSYj1sKX19ZnVuY3Rpb24gVmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjQwOTgpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBXYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIFhiKGEpe2lmKFZiKGEpIT09YSl0aHJvdyBFcnJvcihwKDE4OCkpO31cbmZ1bmN0aW9uIFliKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVZiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIFhiKGUpLGE7aWYoZj09PWQpcmV0dXJuIFhiKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IocCgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcihwKDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHAoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gWmIoYSl7YT1ZYihhKTtyZXR1cm4gbnVsbCE9PWE/JGIoYSk6bnVsbH1mdW5jdGlvbiAkYihhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYTtmb3IoYT1hLmNoaWxkO251bGwhPT1hOyl7dmFyIGI9JGIoYSk7aWYobnVsbCE9PWIpcmV0dXJuIGI7YT1hLnNpYmxpbmd9cmV0dXJuIG51bGx9XG52YXIgYWM9Y2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxiYz1jYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxjYz1jYS51bnN0YWJsZV9zaG91bGRZaWVsZCxkYz1jYS51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsQj1jYS51bnN0YWJsZV9ub3csZWM9Y2EudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsZmM9Y2EudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZ2M9Y2EudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksaGM9Y2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksaWM9Y2EudW5zdGFibGVfTG93UHJpb3JpdHksamM9Y2EudW5zdGFibGVfSWRsZVByaW9yaXR5LGtjPW51bGwsbGM9bnVsbDtmdW5jdGlvbiBtYyhhKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJSb290KXRyeXtsYy5vbkNvbW1pdEZpYmVyUm9vdChrYyxhLHZvaWQgMCwxMjg9PT0oYS5jdXJyZW50LmZsYWdzJjEyOCkpfWNhdGNoKGIpe319XG52YXIgb2M9TWF0aC5jbHozMj9NYXRoLmNsejMyOm5jLHBjPU1hdGgubG9nLHFjPU1hdGguTE4yO2Z1bmN0aW9uIG5jKGEpe2E+Pj49MDtyZXR1cm4gMD09PWE/MzI6MzEtKHBjKGEpL3FjfDApfDB9dmFyIHJjPTY0LHNjPTQxOTQzMDQ7XG5mdW5jdGlvbiB0YyhhKXtzd2l0Y2goYSYtYSl7Y2FzZSAxOnJldHVybiAxO2Nhc2UgMjpyZXR1cm4gMjtjYXNlIDQ6cmV0dXJuIDQ7Y2FzZSA4OnJldHVybiA4O2Nhc2UgMTY6cmV0dXJuIDE2O2Nhc2UgMzI6cmV0dXJuIDMyO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGEmNDE5NDI0MDtjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybiBhJjEzMDAyMzQyNDtjYXNlIDEzNDIxNzcyODpyZXR1cm4gMTM0MjE3NzI4O2Nhc2UgMjY4NDM1NDU2OnJldHVybiAyNjg0MzU0NTY7Y2FzZSA1MzY4NzA5MTI6cmV0dXJuIDUzNjg3MDkxMjtjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuIDEwNzM3NDE4MjQ7XG5kZWZhdWx0OnJldHVybiBhfX1mdW5jdGlvbiB1YyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiAwO3ZhciBkPTAsZT1hLnN1c3BlbmRlZExhbmVzLGY9YS5waW5nZWRMYW5lcyxnPWMmMjY4NDM1NDU1O2lmKDAhPT1nKXt2YXIgaD1nJn5lOzAhPT1oP2Q9dGMoaCk6KGYmPWcsMCE9PWYmJihkPXRjKGYpKSl9ZWxzZSBnPWMmfmUsMCE9PWc/ZD10YyhnKTowIT09ZiYmKGQ9dGMoZikpO2lmKDA9PT1kKXJldHVybiAwO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmUpJiYoZT1kJi1kLGY9YiYtYixlPj1mfHwxNj09PWUmJjAhPT0oZiY0MTk0MjQwKSkpcmV0dXJuIGI7MCE9PShkJjQpJiYoZHw9YyYxNik7Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1vYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIHZjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OnJldHVybiBiKzI1MDtjYXNlIDg6Y2FzZSAxNjpjYXNlIDMyOmNhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGIrNUUzO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuLTE7Y2FzZSAxMzQyMTc3Mjg6Y2FzZSAyNjg0MzU0NTY6Y2FzZSA1MzY4NzA5MTI6Y2FzZSAxMDczNzQxODI0OnJldHVybi0xO2RlZmF1bHQ6cmV0dXJuLTF9fVxuZnVuY3Rpb24gd2MoYSxiKXtmb3IodmFyIGM9YS5zdXNwZW5kZWRMYW5lcyxkPWEucGluZ2VkTGFuZXMsZT1hLmV4cGlyYXRpb25UaW1lcyxmPWEucGVuZGluZ0xhbmVzOzA8Zjspe3ZhciBnPTMxLW9jKGYpLGg9MTw8ZyxrPWVbZ107aWYoLTE9PT1rKXtpZigwPT09KGgmYyl8fDAhPT0oaCZkKSllW2ddPXZjKGgsYil9ZWxzZSBrPD1iJiYoYS5leHBpcmVkTGFuZXN8PWgpO2YmPX5ofX1mdW5jdGlvbiB4YyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24geWMoKXt2YXIgYT1yYztyYzw8PTE7MD09PShyYyY0MTk0MjQwKSYmKHJjPTY0KTtyZXR1cm4gYX1mdW5jdGlvbiB6YyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEFjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjs1MzY4NzA5MTIhPT1iJiYoYS5zdXNwZW5kZWRMYW5lcz0wLGEucGluZ2VkTGFuZXM9MCk7YT1hLmV2ZW50VGltZXM7Yj0zMS1vYyhiKTthW2JdPWN9ZnVuY3Rpb24gQmMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcyZ+YjthLnBlbmRpbmdMYW5lcz1iO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWI7YS5tdXRhYmxlUmVhZExhbmVzJj1iO2EuZW50YW5nbGVkTGFuZXMmPWI7Yj1hLmVudGFuZ2xlbWVudHM7dmFyIGQ9YS5ldmVudFRpbWVzO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yzspe3ZhciBlPTMxLW9jKGMpLGY9MTw8ZTtiW2VdPTA7ZFtlXT0tMTthW2VdPS0xO2MmPX5mfX1cbmZ1bmN0aW9uIENjKGEsYil7dmFyIGM9YS5lbnRhbmdsZWRMYW5lc3w9Yjtmb3IoYT1hLmVudGFuZ2xlbWVudHM7Yzspe3ZhciBkPTMxLW9jKGMpLGU9MTw8ZDtlJmJ8YVtkXSZiJiYoYVtkXXw9Yik7YyY9fmV9fXZhciBDPTA7ZnVuY3Rpb24gRGMoYSl7YSY9LWE7cmV0dXJuIDE8YT80PGE/MCE9PShhJjI2ODQzNTQ1NSk/MTY6NTM2ODcwOTEyOjQ6MX12YXIgRWMsRmMsR2MsSGMsSWMsSmM9ITEsS2M9W10sTGM9bnVsbCxNYz1udWxsLE5jPW51bGwsT2M9bmV3IE1hcCxQYz1uZXcgTWFwLFFjPVtdLFJjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIFNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6TGM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOk1jPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOk5jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpPYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpQYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIFRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9e2Jsb2NrZWRPbjpiLGRvbUV2ZW50TmFtZTpjLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpmLHRhcmdldENvbnRhaW5lcnM6W2VdfSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJkZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIExjPVRjKExjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBNYz1UYyhNYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gTmM9VGMoTmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtPYy5zZXQoZixUYyhPYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsUGMuc2V0KGYsVGMoUGMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gVmMoYSl7dmFyIGI9V2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1WYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1XYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtJYyhhLnByaW9yaXR5LGZ1bmN0aW9uKCl7R2MoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24gWGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPVljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGw9PT1jKXtjPWEubmF0aXZlRXZlbnQ7dmFyIGQ9bmV3IGMuY29uc3RydWN0b3IoYy50eXBlLGMpO3diPWQ7Yy50YXJnZXQuZGlzcGF0Y2hFdmVudChkKTt3Yj1udWxsfWVsc2UgcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJkZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIFpjKGEsYixjKXtYYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gJGMoKXtKYz0hMTtudWxsIT09TGMmJlhjKExjKSYmKExjPW51bGwpO251bGwhPT1NYyYmWGMoTWMpJiYoTWM9bnVsbCk7bnVsbCE9PU5jJiZYYyhOYykmJihOYz1udWxsKTtPYy5mb3JFYWNoKFpjKTtQYy5mb3JFYWNoKFpjKX1cbmZ1bmN0aW9uIGFkKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxKY3x8KEpjPSEwLGNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soY2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksJGMpKSl9XG5mdW5jdGlvbiBiZChhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBhZChiLGEpfWlmKDA8S2MubGVuZ3RoKXthZChLY1swXSxhKTtmb3IodmFyIGM9MTtjPEtjLmxlbmd0aDtjKyspe3ZhciBkPUtjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09TGMmJmFkKExjLGEpO251bGwhPT1NYyYmYWQoTWMsYSk7bnVsbCE9PU5jJiZhZChOYyxhKTtPYy5mb3JFYWNoKGIpO1BjLmZvckVhY2goYik7Zm9yKGM9MDtjPFFjLmxlbmd0aDtjKyspZD1RY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8UWMubGVuZ3RoJiYoYz1RY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylWYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJlFjLnNoaWZ0KCl9dmFyIGNkPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGRkPSEwO1xuZnVuY3Rpb24gZWQoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTEsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1mdW5jdGlvbiBnZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9NCxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fVxuZnVuY3Rpb24gZmQoYSxiLGMsZCl7aWYoZGQpe3ZhciBlPVljKGEsYixjLGQpO2lmKG51bGw9PT1lKWhkKGEsYixkLGlkLGMpLFNjKGEsZCk7ZWxzZSBpZihVYyhlLGEsYixjLGQpKWQuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZihTYyhhLGQpLGImNCYmLTE8UmMuaW5kZXhPZihhKSl7Zm9yKDtudWxsIT09ZTspe3ZhciBmPUNiKGUpO251bGwhPT1mJiZFYyhmKTtmPVljKGEsYixjLGQpO251bGw9PT1mJiZoZChhLGIsZCxpZCxjKTtpZihmPT09ZSlicmVhaztlPWZ9bnVsbCE9PWUmJmQuc3RvcFByb3BhZ2F0aW9uKCl9ZWxzZSBoZChhLGIsZCxudWxsLGMpfX12YXIgaWQ9bnVsbDtcbmZ1bmN0aW9uIFljKGEsYixjLGQpe2lkPW51bGw7YT14YihkKTthPVdjKGEpO2lmKG51bGwhPT1hKWlmKGI9VmIoYSksbnVsbD09PWIpYT1udWxsO2Vsc2UgaWYoYz1iLnRhZywxMz09PWMpe2E9V2IoYik7aWYobnVsbCE9PWEpcmV0dXJuIGE7YT1udWxsfWVsc2UgaWYoMz09PWMpe2lmKGIuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpcmV0dXJuIDM9PT1iLnRhZz9iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7YT1udWxsfWVsc2UgYiE9PWEmJihhPW51bGwpO2lkPWE7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBqZChhKXtzd2l0Y2goYSl7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbGlja1wiOmNhc2UgXCJjbG9zZVwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcImtleXVwXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcInBhc3RlXCI6Y2FzZSBcInBhdXNlXCI6Y2FzZSBcInBsYXlcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVydXBcIjpjYXNlIFwicmF0ZWNoYW5nZVwiOmNhc2UgXCJyZXNldFwiOmNhc2UgXCJyZXNpemVcIjpjYXNlIFwic2Vla2VkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6Y2FzZSBcInZvbHVtZWNoYW5nZVwiOmNhc2UgXCJjaGFuZ2VcIjpjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6Y2FzZSBcInRleHRJbnB1dFwiOmNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6Y2FzZSBcImJlZm9yZWlucHV0XCI6Y2FzZSBcImJsdXJcIjpjYXNlIFwiZnVsbHNjcmVlbmNoYW5nZVwiOmNhc2UgXCJmb2N1c1wiOmNhc2UgXCJoYXNoY2hhbmdlXCI6Y2FzZSBcInBvcHN0YXRlXCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJzZWxlY3RzdGFydFwiOnJldHVybiAxO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInNjcm9sbFwiOmNhc2UgXCJ0b2dnbGVcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcIndoZWVsXCI6Y2FzZSBcIm1vdXNlZW50ZXJcIjpjYXNlIFwibW91c2VsZWF2ZVwiOmNhc2UgXCJwb2ludGVyZW50ZXJcIjpjYXNlIFwicG9pbnRlcmxlYXZlXCI6cmV0dXJuIDQ7XG5jYXNlIFwibWVzc2FnZVwiOnN3aXRjaChlYygpKXtjYXNlIGZjOnJldHVybiAxO2Nhc2UgZ2M6cmV0dXJuIDQ7Y2FzZSBoYzpjYXNlIGljOnJldHVybiAxNjtjYXNlIGpjOnJldHVybiA1MzY4NzA5MTI7ZGVmYXVsdDpyZXR1cm4gMTZ9ZGVmYXVsdDpyZXR1cm4gMTZ9fXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtmdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9XG5mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfUEoYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPUEoe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1BKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1BKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1BKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9QSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPUEoe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9QSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPUEoe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9QSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9QSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPUEoe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPUEoe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1pYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWlhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGlhKXt2YXIgeGU7aWYoaWEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTtKYihyZSxiKX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZTtcbmZ1bmN0aW9uIEllKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO2lmKCFqYS5jYWxsKGIsZSl8fCFIZShhW2VdLGJbZV0pKXJldHVybiExfXJldHVybiEwfWZ1bmN0aW9uIEplKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEtlKGEsYil7dmFyIGM9SmUoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9SmUoYyl9fWZ1bmN0aW9uIExlKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TGUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTWUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gTmUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbmZ1bmN0aW9uIE9lKGEpe3ZhciBiPU1lKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmYyYmYy5vd25lckRvY3VtZW50JiZMZShjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihudWxsIT09ZCYmTmUoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZihhPShiPWMub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3csYS5nZXRTZWxlY3Rpb24pe2E9YS5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jLnRleHRDb250ZW50Lmxlbmd0aCxmPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9mOk1hdGgubWluKGQuZW5kLGUpOyFhLmV4dGVuZCYmZj5kJiYoZT1kLGQ9ZixmPWUpO2U9S2UoYyxmKTt2YXIgZz1LZShjLFxuZCk7ZSYmZyYmKDEhPT1hLnJhbmdlQ291bnR8fGEuYW5jaG9yTm9kZSE9PWUubm9kZXx8YS5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8YS5mb2N1c05vZGUhPT1nLm5vZGV8fGEuZm9jdXNPZmZzZXQhPT1nLm9mZnNldCkmJihiPWIuY3JlYXRlUmFuZ2UoKSxiLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCksYS5yZW1vdmVBbGxSYW5nZXMoKSxmPmQ/KGEuYWRkUmFuZ2UoYiksYS5leHRlbmQoZy5ub2RlLGcub2Zmc2V0KSk6KGIuc2V0RW5kKGcubm9kZSxnLm9mZnNldCksYS5hZGRSYW5nZShiKSkpfWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmZvY3VzJiZjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9fVxudmFyIFBlPWlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZOZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZJZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5mdW5jdGlvbiBWZShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBXZT17YW5pbWF0aW9uZW5kOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6VmUoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxYZT17fSxZZT17fTtcbmlhJiYoWWU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgV2UuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgV2UudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBaZShhKXtpZihYZVthXSlyZXR1cm4gWGVbYV07aWYoIVdlW2FdKXJldHVybiBhO3ZhciBiPVdlW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFllKXJldHVybiBYZVthXT1iW2NdO3JldHVybiBhfXZhciAkZT1aZShcImFuaW1hdGlvbmVuZFwiKSxhZj1aZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxiZj1aZShcImFuaW1hdGlvbnN0YXJ0XCIpLGNmPVplKFwidHJhbnNpdGlvbmVuZFwiKSxkZj1uZXcgTWFwLGVmPVwiYWJvcnQgYXV4Q2xpY2sgY2FuY2VsIGNhblBsYXkgY2FuUGxheVRocm91Z2ggY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZHJhZyBkcmFnRW5kIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHJhZ1N0YXJ0IGRyb3AgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgZ290UG9pbnRlckNhcHR1cmUgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbG9zdFBvaW50ZXJDYXB0dXJlIG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHBvaW50ZXJDYW5jZWwgcG9pbnRlckRvd24gcG9pbnRlck1vdmUgcG9pbnRlck91dCBwb2ludGVyT3ZlciBwb2ludGVyVXAgcHJvZ3Jlc3MgcmF0ZUNoYW5nZSByZXNldCByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdWJtaXQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlIHNjcm9sbCB0b2dnbGUgdG91Y2hNb3ZlIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBmZihhLGIpe2RmLnNldChhLGIpO2ZhKGIsW2FdKX1mb3IodmFyIGdmPTA7Z2Y8ZWYubGVuZ3RoO2dmKyspe3ZhciBoZj1lZltnZl0samY9aGYudG9Mb3dlckNhc2UoKSxrZj1oZlswXS50b1VwcGVyQ2FzZSgpK2hmLnNsaWNlKDEpO2ZmKGpmLFwib25cIitrZil9ZmYoJGUsXCJvbkFuaW1hdGlvbkVuZFwiKTtmZihhZixcIm9uQW5pbWF0aW9uSXRlcmF0aW9uXCIpO2ZmKGJmLFwib25BbmltYXRpb25TdGFydFwiKTtmZihcImRibGNsaWNrXCIsXCJvbkRvdWJsZUNsaWNrXCIpO2ZmKFwiZm9jdXNpblwiLFwib25Gb2N1c1wiKTtmZihcImZvY3Vzb3V0XCIsXCJvbkJsdXJcIik7ZmYoY2YsXCJvblRyYW5zaXRpb25FbmRcIik7aGEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7XG5oYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2ZhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZmEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZmEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIGxmPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksbWY9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQobGYpKTtcbmZ1bmN0aW9uIG5mKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1ViKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a319fWlmKFFiKXRocm93IGE9UmIsUWI9ITEsUmI9bnVsbCxhO31cbmZ1bmN0aW9uIEQoYSxiKXt2YXIgYz1iW29mXTt2b2lkIDA9PT1jJiYoYz1iW29mXT1uZXcgU2V0KTt2YXIgZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KHBmKGIsYSwyLCExKSxjLmFkZChkKSl9ZnVuY3Rpb24gcWYoYSxiLGMpe3ZhciBkPTA7YiYmKGR8PTQpO3BmKGMsYSxkLGIpfXZhciByZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIHNmKGEpe2lmKCFhW3JmXSl7YVtyZl09ITA7ZGEuZm9yRWFjaChmdW5jdGlvbihiKXtcInNlbGVjdGlvbmNoYW5nZVwiIT09YiYmKG1mLmhhcyhiKXx8cWYoYiwhMSxhKSxxZihiLCEwLGEpKX0pO3ZhciBiPTk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O251bGw9PT1ifHxiW3JmXXx8KGJbcmZdPSEwLHFmKFwic2VsZWN0aW9uY2hhbmdlXCIsITEsYikpfX1cbmZ1bmN0aW9uIHBmKGEsYixjLGQpe3N3aXRjaChqZChiKSl7Y2FzZSAxOnZhciBlPWVkO2JyZWFrO2Nhc2UgNDplPWdkO2JyZWFrO2RlZmF1bHQ6ZT1mZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshTGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz1XYyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59SmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPWRmLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCxuPWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOm49XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6bj1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgJGU6Y2FzZSBhZjpjYXNlIGJmOms9SGQ7YnJlYWs7Y2FzZSBjZjprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB0PTAhPT0oYiY0KSxKPSF0JiZcInNjcm9sbFwiPT09YSx4PXQ/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dD1bXTtmb3IodmFyIHc9ZCx1O251bGwhPT1cbnc7KXt1PXc7dmFyIEY9dS5zdGF0ZU5vZGU7NT09PXUudGFnJiZudWxsIT09RiYmKHU9RixudWxsIT09eCYmKEY9S2Iodyx4KSxudWxsIT1GJiZ0LnB1c2godGYodyxGLHUpKSkpO2lmKEopYnJlYWs7dz13LnJldHVybn0wPHQubGVuZ3RoJiYoaD1uZXcgayhoLG4sbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6dH0pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJmMhPT13YiYmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKFdjKG4pfHxuW3VmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQsbj1uP1djKG4pOm51bGwsbnVsbCE9PVxubiYmKEo9VmIobiksbiE9PUp8fDUhPT1uLnRhZyYmNiE9PW4udGFnKSluPW51bGx9ZWxzZSBrPW51bGwsbj1kO2lmKGshPT1uKXt0PUJkO0Y9XCJvbk1vdXNlTGVhdmVcIjt4PVwib25Nb3VzZUVudGVyXCI7dz1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXQ9VGQsRj1cIm9uUG9pbnRlckxlYXZlXCIseD1cIm9uUG9pbnRlckVudGVyXCIsdz1cInBvaW50ZXJcIjtKPW51bGw9PWs/aDp1ZShrKTt1PW51bGw9PW4/aDp1ZShuKTtoPW5ldyB0KEYsdytcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PUo7aC5yZWxhdGVkVGFyZ2V0PXU7Rj1udWxsO1djKGUpPT09ZCYmKHQ9bmV3IHQoeCx3K1wiZW50ZXJcIixuLGMsZSksdC50YXJnZXQ9dSx0LnJlbGF0ZWRUYXJnZXQ9SixGPXQpO0o9RjtpZihrJiZuKWI6e3Q9azt4PW47dz0wO2Zvcih1PXQ7dTt1PXZmKHUpKXcrKzt1PTA7Zm9yKEY9eDtGO0Y9dmYoRikpdSsrO2Zvcig7MDx3LXU7KXQ9dmYodCksdy0tO2Zvcig7MDx1LXc7KXg9XG52Zih4KSx1LS07Zm9yKDt3LS07KXtpZih0PT09eHx8bnVsbCE9PXgmJnQ9PT14LmFsdGVybmF0ZSlicmVhayBiO3Q9dmYodCk7eD12Zih4KX10PW51bGx9ZWxzZSB0PW51bGw7bnVsbCE9PWsmJndmKGcsaCxrLHQsITEpO251bGwhPT1uJiZudWxsIT09SiYmd2YoZyxKLG4sdCwhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgbmE9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSluYT1GZTtlbHNle25hPURlO3ZhciB4YT1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKG5hPUVlKTtpZihuYSYmKG5hPW5hKGEsZCkpKXtuZShnLG5hLGMsZSk7YnJlYWsgYX14YSYmeGEoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJih4YT1oLl93cmFwcGVyU3RhdGUpJiZcbnhhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmNiKGgsXCJudW1iZXJcIixoLnZhbHVlKX14YT1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZSh4YSl8fFwidHJ1ZVwiPT09eGEuY29udGVudEVkaXRhYmxlKVFlPXhhLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgJGE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpiYT1cIm9uQ29tcG9zaXRpb25FbmRcIjtcbmJyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6YmE9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1iYT12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoYmE9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7YmEmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PWJhP1wib25Db21wb3NpdGlvbkVuZFwiPT09YmEmJmllJiYoJGE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSx4YT1vZShkLGJhKSwwPHhhLmxlbmd0aCYmKGJhPW5ldyBMZChiYSxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmJhLGxpc3RlbmVyczp4YX0pLCRhP2JhLmRhdGE9JGE6KCRhPWhlKGMpLG51bGwhPT0kYSYmKGJhLmRhdGE9JGEpKSkpO2lmKCRhPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLFxuMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPSRhKX1zZShnLGIpfSl9ZnVuY3Rpb24gdGYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPUtiKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KHRmKGEsZixlKSksZj1LYihhLGIpLG51bGwhPWYmJmQucHVzaCh0ZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIHZmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiB3ZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPUtiKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KHRmKGMsayxoKSkpOmV8fChrPUtiKGMsZiksbnVsbCE9ayYmZy5wdXNoKHRmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9dmFyIHhmPS9cXHJcXG4/L2cseWY9L1xcdTAwMDB8XFx1RkZGRC9nO2Z1bmN0aW9uIHpmKGEpe3JldHVybihcInN0cmluZ1wiPT09dHlwZW9mIGE/YTpcIlwiK2EpLnJlcGxhY2UoeGYsXCJcXG5cIikucmVwbGFjZSh5ZixcIlwiKX1mdW5jdGlvbiBBZihhLGIsYyl7Yj16ZihiKTtpZih6ZihhKSE9PWImJmMpdGhyb3cgRXJyb3IocCg0MjUpKTt9ZnVuY3Rpb24gQmYoKXt9XG52YXIgQ2Y9bnVsbCxEZj1udWxsO2Z1bmN0aW9uIEVmKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfVxudmFyIEZmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLEdmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxIZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlOnZvaWQgMCxKZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcXVldWVNaWNyb3Rhc2s/cXVldWVNaWNyb3Rhc2s6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBIZj9mdW5jdGlvbihhKXtyZXR1cm4gSGYucmVzb2x2ZShudWxsKS50aGVuKGEpLmNhdGNoKElmKX06RmY7ZnVuY3Rpb24gSWYoYSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGE7fSl9XG5mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIsZD0wO2Rve3ZhciBlPWMubmV4dFNpYmxpbmc7YS5yZW1vdmVDaGlsZChjKTtpZihlJiY4PT09ZS5ub2RlVHlwZSlpZihjPWUuZGF0YSxcIi8kXCI9PT1jKXtpZigwPT09ZCl7YS5yZW1vdmVDaGlsZChlKTtiZChiKTtyZXR1cm59ZC0tfWVsc2VcIiRcIiE9PWMmJlwiJD9cIiE9PWMmJlwiJCFcIiE9PWN8fGQrKztjPWV9d2hpbGUoYyk7YmQoYil9ZnVuY3Rpb24gTGYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWs7aWYoOD09PWIpe2I9YS5kYXRhO2lmKFwiJFwiPT09Ynx8XCIkIVwiPT09Ynx8XCIkP1wiPT09YilicmVhaztpZihcIi8kXCI9PT1iKXJldHVybiBudWxsfX1yZXR1cm4gYX1cbmZ1bmN0aW9uIE1mKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBOZj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxPZj1cIl9fcmVhY3RGaWJlciRcIitOZixQZj1cIl9fcmVhY3RQcm9wcyRcIitOZix1Zj1cIl9fcmVhY3RDb250YWluZXIkXCIrTmYsb2Y9XCJfX3JlYWN0RXZlbnRzJFwiK05mLFFmPVwiX19yZWFjdExpc3RlbmVycyRcIitOZixSZj1cIl9fcmVhY3RIYW5kbGVzJFwiK05mO1xuZnVuY3Rpb24gV2MoYSl7dmFyIGI9YVtPZl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbdWZdfHxjW09mXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPU1mKGEpO251bGwhPT1hOyl7aWYoYz1hW09mXSlyZXR1cm4gYzthPU1mKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbT2ZdfHxhW3VmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHAoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbUGZdfHxudWxsfXZhciBTZj1bXSxUZj0tMTtmdW5jdGlvbiBVZihhKXtyZXR1cm57Y3VycmVudDphfX1cbmZ1bmN0aW9uIEUoYSl7MD5UZnx8KGEuY3VycmVudD1TZltUZl0sU2ZbVGZdPW51bGwsVGYtLSl9ZnVuY3Rpb24gRyhhLGIpe1RmKys7U2ZbVGZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgVmY9e30sSD1VZihWZiksV2Y9VWYoITEpLFhmPVZmO2Z1bmN0aW9uIFlmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gVmY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBaZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uICRmKCl7RShXZik7RShIKX1mdW5jdGlvbiBhZyhhLGIsYyl7aWYoSC5jdXJyZW50IT09VmYpdGhyb3cgRXJyb3IocCgxNjgpKTtHKEgsYik7RyhXZixjKX1mdW5jdGlvbiBiZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7Yj1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGIpKXRocm93IEVycm9yKHAoMTA4LFJhKGEpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIEEoe30sYyxkKX1cbmZ1bmN0aW9uIGNnKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxWZjtYZj1ILmN1cnJlbnQ7RyhILGEpO0coV2YsV2YuY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gZGcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHAoMTY5KSk7Yz8oYT1iZyhhLGIsWGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxFKFdmKSxFKEgpLEcoSCxhKSk6RShXZik7RyhXZixjKX12YXIgZWc9bnVsbCxmZz0hMSxnZz0hMTtmdW5jdGlvbiBoZyhhKXtudWxsPT09ZWc/ZWc9W2FdOmVnLnB1c2goYSl9ZnVuY3Rpb24gaWcoYSl7Zmc9ITA7aGcoYSl9XG5mdW5jdGlvbiBqZygpe2lmKCFnZyYmbnVsbCE9PWVnKXtnZz0hMDt2YXIgYT0wLGI9Qzt0cnl7dmFyIGM9ZWc7Zm9yKEM9MTthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXTtkbyBkPWQoITApO3doaWxlKG51bGwhPT1kKX1lZz1udWxsO2ZnPSExfWNhdGNoKGUpe3Rocm93IG51bGwhPT1lZyYmKGVnPWVnLnNsaWNlKGErMSkpLGFjKGZjLGpnKSxlO31maW5hbGx5e0M9YixnZz0hMX19cmV0dXJuIG51bGx9dmFyIGtnPVtdLGxnPTAsbWc9bnVsbCxuZz0wLG9nPVtdLHBnPTAscWc9bnVsbCxyZz0xLHNnPVwiXCI7ZnVuY3Rpb24gdGcoYSxiKXtrZ1tsZysrXT1uZztrZ1tsZysrXT1tZzttZz1hO25nPWJ9XG5mdW5jdGlvbiB1ZyhhLGIsYyl7b2dbcGcrK109cmc7b2dbcGcrK109c2c7b2dbcGcrK109cWc7cWc9YTt2YXIgZD1yZzthPXNnO3ZhciBlPTMyLW9jKGQpLTE7ZCY9figxPDxlKTtjKz0xO3ZhciBmPTMyLW9jKGIpK2U7aWYoMzA8Zil7dmFyIGc9ZS1lJTU7Zj0oZCYoMTw8ZyktMSkudG9TdHJpbmcoMzIpO2Q+Pj1nO2UtPWc7cmc9MTw8MzItb2MoYikrZXxjPDxlfGQ7c2c9ZithfWVsc2Ugcmc9MTw8ZnxjPDxlfGQsc2c9YX1mdW5jdGlvbiB2ZyhhKXtudWxsIT09YS5yZXR1cm4mJih0ZyhhLDEpLHVnKGEsMSwwKSl9ZnVuY3Rpb24gd2coYSl7Zm9yKDthPT09bWc7KW1nPWtnWy0tbGddLGtnW2xnXT1udWxsLG5nPWtnWy0tbGddLGtnW2xnXT1udWxsO2Zvcig7YT09PXFnOylxZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxzZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxyZz1vZ1stLXBnXSxvZ1twZ109bnVsbH12YXIgeGc9bnVsbCx5Zz1udWxsLEk9ITEsemc9bnVsbDtcbmZ1bmN0aW9uIEFnKGEsYil7dmFyIGM9QmcoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yj1hLmRlbGV0aW9ucztudWxsPT09Yj8oYS5kZWxldGlvbnM9W2NdLGEuZmxhZ3N8PTE2KTpiLnB1c2goYyl9XG5mdW5jdGlvbiBDZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPUxmKGIuZmlyc3RDaGlsZCksITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPW51bGwsITApOiExO2Nhc2UgMTM6cmV0dXJuIGI9OCE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhjPW51bGwhPT1xZz97aWQ6cmcsb3ZlcmZsb3c6c2d9Om51bGwsYS5tZW1vaXplZFN0YXRlPXtkZWh5ZHJhdGVkOmIsdHJlZUNvbnRleHQ6YyxyZXRyeUxhbmU6MTA3Mzc0MTgyNH0sYz1CZygxOCxudWxsLG51bGwsMCksYy5zdGF0ZU5vZGU9YixjLnJldHVybj1hLGEuY2hpbGQ9Yyx4Zz1hLHlnPVxubnVsbCwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gRGcoYSl7cmV0dXJuIDAhPT0oYS5tb2RlJjEpJiYwPT09KGEuZmxhZ3MmMTI4KX1mdW5jdGlvbiBFZyhhKXtpZihJKXt2YXIgYj15ZztpZihiKXt2YXIgYz1iO2lmKCFDZyhhLGIpKXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2I9TGYoYy5uZXh0U2libGluZyk7dmFyIGQ9eGc7YiYmQ2coYSxiKT9BZyhkLGMpOihhLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MixJPSExLHhnPWEpfX1lbHNle2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7YS5mbGFncz1hLmZsYWdzJi00MDk3fDI7ST0hMTt4Zz1hfX19ZnVuY3Rpb24gRmcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO3hnPWF9XG5mdW5jdGlvbiBHZyhhKXtpZihhIT09eGcpcmV0dXJuITE7aWYoIUkpcmV0dXJuIEZnKGEpLEk9ITAsITE7dmFyIGI7KGI9MyE9PWEudGFnKSYmIShiPTUhPT1hLnRhZykmJihiPWEudHlwZSxiPVwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhRWYoYS50eXBlLGEubWVtb2l6ZWRQcm9wcykpO2lmKGImJihiPXlnKSl7aWYoRGcoYSkpdGhyb3cgSGcoKSxFcnJvcihwKDQxOCkpO2Zvcig7YjspQWcoYSxiKSxiPUxmKGIubmV4dFNpYmxpbmcpfUZnKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IocCgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7eWc9TGYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ315Zz1cbm51bGx9fWVsc2UgeWc9eGc/TGYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gSGcoKXtmb3IodmFyIGE9eWc7YTspYT1MZihhLm5leHRTaWJsaW5nKX1mdW5jdGlvbiBJZygpe3lnPXhnPW51bGw7ST0hMX1mdW5jdGlvbiBKZyhhKXtudWxsPT09emc/emc9W2FdOnpnLnB1c2goYSl9dmFyIEtnPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIExnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9QSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBNZz1VZihudWxsKSxOZz1udWxsLE9nPW51bGwsUGc9bnVsbDtmdW5jdGlvbiBRZygpe1BnPU9nPU5nPW51bGx9ZnVuY3Rpb24gUmcoYSl7dmFyIGI9TWcuY3VycmVudDtFKE1nKTthLl9jdXJyZW50VmFsdWU9Yn1cbmZ1bmN0aW9uIFNnKGEsYixjKXtmb3IoO251bGwhPT1hOyl7dmFyIGQ9YS5hbHRlcm5hdGU7KGEuY2hpbGRMYW5lcyZiKSE9PWI/KGEuY2hpbGRMYW5lc3w9YixudWxsIT09ZCYmKGQuY2hpbGRMYW5lc3w9YikpOm51bGwhPT1kJiYoZC5jaGlsZExhbmVzJmIpIT09YiYmKGQuY2hpbGRMYW5lc3w9Yik7aWYoYT09PWMpYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gVGcoYSxiKXtOZz1hO1BnPU9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYoVWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gVmcoYSl7dmFyIGI9YS5fY3VycmVudFZhbHVlO2lmKFBnIT09YSlpZihhPXtjb250ZXh0OmEsbWVtb2l6ZWRWYWx1ZTpiLG5leHQ6bnVsbH0sbnVsbD09PU9nKXtpZihudWxsPT09TmcpdGhyb3cgRXJyb3IocCgzMDgpKTtPZz1hO05nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YX19ZWxzZSBPZz1PZy5uZXh0PWE7cmV0dXJuIGJ9dmFyIFdnPW51bGw7ZnVuY3Rpb24gWGcoYSl7bnVsbD09PVdnP1dnPVthXTpXZy5wdXNoKGEpfWZ1bmN0aW9uIFlnKGEsYixjLGQpe3ZhciBlPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGMubmV4dD1jLFhnKGIpKTooYy5uZXh0PWUubmV4dCxlLm5leHQ9Yyk7Yi5pbnRlcmxlYXZlZD1jO3JldHVybiBaZyhhLGQpfVxuZnVuY3Rpb24gWmcoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfXZhciAkZz0hMTtmdW5jdGlvbiBhaChhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gYmgoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gY2goYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19XG5mdW5jdGlvbiBkaChhLGIsYyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtkPWQuc2hhcmVkO2lmKDAhPT0oSyYyKSl7dmFyIGU9ZC5wZW5kaW5nO251bGw9PT1lP2IubmV4dD1iOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLnBlbmRpbmc9YjtyZXR1cm4gWmcoYSxjKX1lPWQuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGIubmV4dD1iLFhnKGQpKTooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5pbnRlcmxlYXZlZD1iO3JldHVybiBaZyhhLGMpfWZ1bmN0aW9uIGVoKGEsYixjKXtiPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIuc2hhcmVkLDAhPT0oYyY0MTk0MjQwKSkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG5mdW5jdGlvbiBmaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gZ2goYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTskZz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBtPWEuYWx0ZXJuYXRlO251bGwhPT1tJiYobT1tLnVwZGF0ZVF1ZXVlLGg9bS5sYXN0QmFzZVVwZGF0ZSxoIT09ZyYmKG51bGw9PT1oP20uZmlyc3RCYXNlVXBkYXRlPWw6aC5uZXh0PWwsbS5sYXN0QmFzZVVwZGF0ZT1rKSl9aWYobnVsbCE9PWYpe3ZhciBxPWUuYmFzZVN0YXRlO2c9MDttPWw9az1udWxsO2g9Zjtkb3t2YXIgcj1oLmxhbmUseT1oLmV2ZW50VGltZTtpZigoZCZyKT09PXIpe251bGwhPT1tJiYobT1tLm5leHQ9e2V2ZW50VGltZTp5LGxhbmU6MCx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBuPWEsdD1oO3I9Yjt5PWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6bj10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4pe3E9bi5jYWxsKHkscSxyKTticmVhayBhfXE9bjticmVhayBhO2Nhc2UgMzpuLmZsYWdzPW4uZmxhZ3MmLTY1NTM3fDEyODtjYXNlIDA6bj10LnBheWxvYWQ7cj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbj9uLmNhbGwoeSxxLHIpOm47aWYobnVsbD09PXJ8fHZvaWQgMD09PXIpYnJlYWsgYTtxPUEoe30scSxyKTticmVhayBhO2Nhc2UgMjokZz0hMH19bnVsbCE9PWguY2FsbGJhY2smJjAhPT1oLmxhbmUmJihhLmZsYWdzfD02NCxyPWUuZWZmZWN0cyxudWxsPT09cj9lLmVmZmVjdHM9W2hdOnIucHVzaChoKSl9ZWxzZSB5PXtldmVudFRpbWU6eSxsYW5lOnIsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bT8obD1tPXksaz1xKTptPW0ubmV4dD15LGd8PXI7XG5oPWgubmV4dDtpZihudWxsPT09aClpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSByPWgsaD1yLm5leHQsci5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1yLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09bSYmKGs9cSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bTtiPWUuc2hhcmVkLmludGVybGVhdmVkO2lmKG51bGwhPT1iKXtlPWI7ZG8gZ3w9ZS5sYW5lLGU9ZS5uZXh0O3doaWxlKGUhPT1iKX1lbHNlIG51bGw9PT1mJiYoZS5zaGFyZWQubGFuZXM9MCk7aGh8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1xfX1cbmZ1bmN0aW9uIGloKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcihwKDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIGpoPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIGtoKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpBKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBuaD17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9WYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1MKCksZT1saChhKSxmPWNoKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9ZGgoYSxmLGUpO251bGwhPT1iJiYobWgoYixhLGUsZCksZWgoYixhLGUpKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1MKCksZT1saChhKSxmPWNoKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1kaChhLGYsZSk7bnVsbCE9PWImJihtaChiLGEsZSxkKSxlaChiLGEsZSkpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUwoKSxkPVxubGgoYSksZT1jaChjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO2I9ZGgoYSxlLGQpO251bGwhPT1iJiYobWgoYixhLGQsYyksZWgoYixhLGQpKX19O2Z1bmN0aW9uIG9oKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUllKGMsZCl8fCFJZShlLGYpOiEwfVxuZnVuY3Rpb24gcGgoYSxiLGMpe3ZhciBkPSExLGU9VmY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9VmcoZik6KGU9WmYoYik/WGY6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/WWYoYSxlKTpWZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPW5oO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gcWgoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJm5oLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gcmgoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1qaDthaChhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PVZnKGYpOihmPVpmKGIpP1hmOkguY3VycmVudCxlLmNvbnRleHQ9WWYoYSxmKSk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKGtoKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJm5oLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGdoKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQxOTQzMDgpfVxuZnVuY3Rpb24gc2goYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHAoMTQ3LGEpKTt2YXIgZT1kLGY9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWYpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZS5yZWZzO2I9PT1qaCYmKGI9ZS5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltmXTpiW2ZdPWF9O2IuX3N0cmluZ1JlZj1mO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcihwKDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcihwKDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gdGgoYSxiKXthPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTt0aHJvdyBFcnJvcihwKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1hP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmEpKTt9ZnVuY3Rpb24gdWgoYSl7dmFyIGI9YS5faW5pdDtyZXR1cm4gYihhLl9wYXlsb2FkKX1cbmZ1bmN0aW9uIHZoKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmRlbGV0aW9ucztudWxsPT09ZD8oYi5kZWxldGlvbnM9W2NdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYyl9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPXdoKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYi5mbGFnc3w9MTA0ODU3NixjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3N8PTIsYyk6ZDtiLmZsYWdzfD0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmXG5udWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzfD0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9eGgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXt2YXIgZj1jLnR5cGU7aWYoZj09PXlhKXJldHVybiBtKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsYy5rZXkpO2lmKG51bGwhPT1iJiYoYi5lbGVtZW50VHlwZT09PWZ8fFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYuJCR0eXBlb2Y9PT1IYSYmdWgoZik9PT1iLnR5cGUpKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1zaChhLGIsYyksZC5yZXR1cm49YSxkO2Q9eWgoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9c2goYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxcbmIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj16aChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9QWgoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBxKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGImJlwiXCIhPT1ifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9eGgoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGM9eWgoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksXG5jLnJlZj1zaChhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2Ugd2E6cmV0dXJuIGI9emgoYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2Nhc2UgSGE6dmFyIGQ9Yi5faW5pdDtyZXR1cm4gcShhLGQoYi5fcGF5bG9hZCksYyl9aWYoZWIoYil8fEthKGIpKXJldHVybiBiPUFoKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO3RoKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYyYmXCJcIiE9PWN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGw7Y2FzZSB3YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbDtjYXNlIEhhOnJldHVybiBlPWMuX2luaXQscihhLFxuYixlKGMuX3BheWxvYWQpLGQpfWlmKGViKGMpfHxLYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7dGgoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkJiZcIlwiIT09ZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKTtjYXNlIHdhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpO2Nhc2UgSGE6dmFyIGY9ZC5faW5pdDtyZXR1cm4geShhLGIsYyxmKGQuX3BheWxvYWQpLGUpfWlmKGViKGQpfHxLYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7dGgoYixkKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG4oZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbT1udWxsLHU9Zyx3PWc9MCx4PW51bGw7bnVsbCE9PXUmJnc8aC5sZW5ndGg7dysrKXt1LmluZGV4Pnc/KHg9dSx1PW51bGwpOng9dS5zaWJsaW5nO3ZhciBuPXIoZSx1LGhbd10sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT14KTticmVha31hJiZ1JiZudWxsPT09bi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHcpO251bGw9PT1tP2w9bjptLnNpYmxpbmc9bjttPW47dT14fWlmKHc9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLEkmJnRnKGUsdyksbDtpZihudWxsPT09dSl7Zm9yKDt3PGgubGVuZ3RoO3crKyl1PXEoZSxoW3ddLGspLG51bGwhPT11JiYoZz1mKHUsZyx3KSxudWxsPT09bT9sPXU6bS5zaWJsaW5nPXUsbT11KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcih1PWQoZSx1KTt3PGgubGVuZ3RoO3crKyl4PXkodSxlLHcsaFt3XSxrKSxudWxsIT09eCYmKGEmJm51bGwhPT14LmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PVxueC5rZXk/dzp4LmtleSksZz1mKHgsZyx3KSxudWxsPT09bT9sPXg6bS5zaWJsaW5nPXgsbT14KTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gdChlLGcsaCxrKXt2YXIgbD1LYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcihwKDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PWgpdGhyb3cgRXJyb3IocCgxNTEpKTtmb3IodmFyIHU9bD1udWxsLG09Zyx3PWc9MCx4PW51bGwsbj1oLm5leHQoKTtudWxsIT09bSYmIW4uZG9uZTt3Kyssbj1oLm5leHQoKSl7bS5pbmRleD53Pyh4PW0sbT1udWxsKTp4PW0uc2libGluZzt2YXIgdD1yKGUsbSxuLnZhbHVlLGspO2lmKG51bGw9PT10KXtudWxsPT09bSYmKG09eCk7YnJlYWt9YSYmbSYmbnVsbD09PXQuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHQsZyx3KTtudWxsPT09dT9sPXQ6dS5zaWJsaW5nPXQ7dT10O209eH1pZihuLmRvbmUpcmV0dXJuIGMoZSxcbm0pLEkmJnRnKGUsdyksbDtpZihudWxsPT09bSl7Zm9yKDshbi5kb25lO3crKyxuPWgubmV4dCgpKW49cShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj15KG0sZSx3LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1uLmtleT93Om4ua2V5KSxnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiBKKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXlhJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYpe3N3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHZhOmE6e2Zvcih2YXIgaz1cbmYua2V5LGw9ZDtudWxsIT09bDspe2lmKGwua2V5PT09ayl7az1mLnR5cGU7aWYoaz09PXlhKXtpZig3PT09bC50YWcpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWVsc2UgaWYobC5lbGVtZW50VHlwZT09PWt8fFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1IYSYmdWgoayk9PT1sLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMpO2QucmVmPXNoKGEsbCxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT15YT8oZD1BaChmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9eWgoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9c2goYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHdhOmE6e2ZvcihsPWYua2V5O251bGwhPT1cbmQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9emgoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBIYTpyZXR1cm4gbD1mLl9pbml0LEooYSxkLGwoZi5fcGF5bG9hZCksaCl9aWYoZWIoZikpcmV0dXJuIG4oYSxkLGYsaCk7aWYoS2EoZikpcmV0dXJuIHQoYSxkLGYsaCk7dGgoYSxmKX1yZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGYmJlwiXCIhPT1mfHxcIm51bWJlclwiPT09dHlwZW9mIGY/KGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTpcbihjKGEsZCksZD14aChmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKSk6YyhhLGQpfXJldHVybiBKfXZhciBCaD12aCghMCksQ2g9dmgoITEpLERoPXt9LEVoPVVmKERoKSxGaD1VZihEaCksR2g9VWYoRGgpO2Z1bmN0aW9uIEhoKGEpe2lmKGE9PT1EaCl0aHJvdyBFcnJvcihwKDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIEloKGEsYil7RyhHaCxiKTtHKEZoLGEpO0coRWgsRGgpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bGIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPWxiKGIsYSl9RShFaCk7RyhFaCxiKX1mdW5jdGlvbiBKaCgpe0UoRWgpO0UoRmgpO0UoR2gpfVxuZnVuY3Rpb24gS2goYSl7SGgoR2guY3VycmVudCk7dmFyIGI9SGgoRWguY3VycmVudCk7dmFyIGM9bGIoYixhLnR5cGUpO2IhPT1jJiYoRyhGaCxhKSxHKEVoLGMpKX1mdW5jdGlvbiBMaChhKXtGaC5jdXJyZW50PT09YSYmKEUoRWgpLEUoRmgpKX12YXIgTT1VZigwKTtcbmZ1bmN0aW9uIE1oKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBOaD1bXTtcbmZ1bmN0aW9uIE9oKCl7Zm9yKHZhciBhPTA7YTxOaC5sZW5ndGg7YSsrKU5oW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7TmgubGVuZ3RoPTB9dmFyIFBoPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsUWg9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsUmg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxTaD0hMSxUaD0hMSxVaD0wLFZoPTA7ZnVuY3Rpb24gUSgpe3Rocm93IEVycm9yKHAoMzIxKSk7fWZ1bmN0aW9uIFdoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBYaChhLGIsYyxkLGUsZil7Umg9ZjtOPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDtQaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP1loOlpoO2E9YyhkLGUpO2lmKFRoKXtmPTA7ZG97VGg9ITE7VWg9MDtpZigyNTw9Zil0aHJvdyBFcnJvcihwKDMwMSkpO2YrPTE7UD1PPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO1BoLmN1cnJlbnQ9JGg7YT1jKGQsZSl9d2hpbGUoVGgpfVBoLmN1cnJlbnQ9YWk7Yj1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtSaD0wO1A9Tz1OPW51bGw7U2g9ITE7aWYoYil0aHJvdyBFcnJvcihwKDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIGJpKCl7dmFyIGE9MCE9PVVoO1VoPTA7cmV0dXJuIGF9XG5mdW5jdGlvbiBjaSgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiBkaSgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gZWkoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBmaShhKXt2YXIgYj1kaSgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7Zj1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPW51bGwsaz1udWxsLGw9Zjtkb3t2YXIgbT1sLmxhbmU7aWYoKFJoJm0pPT09bSludWxsIT09ayYmKGs9ay5uZXh0PXtsYW5lOjAsYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLGVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9bC5oYXNFYWdlclN0YXRlP2wuZWFnZXJTdGF0ZTphKGQsbC5hY3Rpb24pO2Vsc2V7dmFyIHE9e2xhbmU6bSxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsXG5lYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1rPyhoPWs9cSxnPWQpOms9ay5uZXh0PXE7Ti5sYW5lc3w9bTtoaHw9bX1sPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWYpO251bGw9PT1rP2c9ZDprLm5leHQ9aDtIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChVZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZztiLmJhc2VRdWV1ZT1rO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1hPWMuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWEpe2U9YTtkbyBmPWUubGFuZSxOLmxhbmVzfD1mLGhofD1mLGU9ZS5uZXh0O3doaWxlKGUhPT1hKX1lbHNlIG51bGw9PT1lJiYoYy5sYW5lcz0wKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gZ2koYSl7dmFyIGI9ZGkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KFVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19ZnVuY3Rpb24gaGkoKXt9XG5mdW5jdGlvbiBpaShhLGIpe3ZhciBjPU4sZD1kaSgpLGU9YigpLGY9IUhlKGQubWVtb2l6ZWRTdGF0ZSxlKTtmJiYoZC5tZW1vaXplZFN0YXRlPWUsVWc9ITApO2Q9ZC5xdWV1ZTtqaShraS5iaW5kKG51bGwsYyxkLGEpLFthXSk7aWYoZC5nZXRTbmFwc2hvdCE9PWJ8fGZ8fG51bGwhPT1QJiZQLm1lbW9pemVkU3RhdGUudGFnJjEpe2MuZmxhZ3N8PTIwNDg7bGkoOSxtaS5iaW5kKG51bGwsYyxkLGUsYiksdm9pZCAwLG51bGwpO2lmKG51bGw9PT1SKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShSaCYzMCl8fG5pKGMsYixlKX1yZXR1cm4gZX1mdW5jdGlvbiBuaShhLGIsYyl7YS5mbGFnc3w9MTYzODQ7YT17Z2V0U25hcHNob3Q6Yix2YWx1ZTpjfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIuc3RvcmVzPVthXSk6KGM9Yi5zdG9yZXMsbnVsbD09PWM/Yi5zdG9yZXM9W2FdOmMucHVzaChhKSl9XG5mdW5jdGlvbiBtaShhLGIsYyxkKXtiLnZhbHVlPWM7Yi5nZXRTbmFwc2hvdD1kO29pKGIpJiZwaShhKX1mdW5jdGlvbiBraShhLGIsYyl7cmV0dXJuIGMoZnVuY3Rpb24oKXtvaShiKSYmcGkoYSl9KX1mdW5jdGlvbiBvaShhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGM9YigpO3JldHVybiFIZShhLGMpfWNhdGNoKGQpe3JldHVybiEwfX1mdW5jdGlvbiBwaShhKXt2YXIgYj1aZyhhLDEpO251bGwhPT1iJiZtaChiLGEsMSwtMSl9XG5mdW5jdGlvbiBxaShhKXt2YXIgYj1jaSgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmVpLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2IucXVldWU9YTthPWEuZGlzcGF0Y2g9cmkuYmluZChudWxsLE4sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIGxpKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBzaSgpe3JldHVybiBkaSgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gdGkoYSxiLGMsZCl7dmFyIGU9Y2koKTtOLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1saSgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gdWkoYSxiLGMsZCl7dmFyIGU9ZGkoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZXaChkLGcuZGVwcykpe2UubWVtb2l6ZWRTdGF0ZT1saShiLGMsZixkKTtyZXR1cm59fU4uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWxpKDF8YixjLGYsZCl9ZnVuY3Rpb24gdmkoYSxiKXtyZXR1cm4gdGkoODM5MDY1Niw4LGEsYil9ZnVuY3Rpb24gamkoYSxiKXtyZXR1cm4gdWkoMjA0OCw4LGEsYil9ZnVuY3Rpb24gd2koYSxiKXtyZXR1cm4gdWkoNCwyLGEsYil9ZnVuY3Rpb24geGkoYSxiKXtyZXR1cm4gdWkoNCw0LGEsYil9XG5mdW5jdGlvbiB5aShhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHppKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gdWkoNCw0LHlpLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIEFpKCl7fWZ1bmN0aW9uIEJpKGEsYil7dmFyIGM9ZGkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJldoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gQ2koYSxiKXt2YXIgYz1kaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmV2goYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gRGkoYSxiLGMpe2lmKDA9PT0oUmgmMjEpKXJldHVybiBhLmJhc2VTdGF0ZSYmKGEuYmFzZVN0YXRlPSExLFVnPSEwKSxhLm1lbW9pemVkU3RhdGU9YztIZShjLGIpfHwoYz15YygpLE4ubGFuZXN8PWMsaGh8PWMsYS5iYXNlU3RhdGU9ITApO3JldHVybiBifWZ1bmN0aW9uIEVpKGEsYil7dmFyIGM9QztDPTAhPT1jJiY0PmM/Yzo0O2EoITApO3ZhciBkPVFoLnRyYW5zaXRpb247UWgudHJhbnNpdGlvbj17fTt0cnl7YSghMSksYigpfWZpbmFsbHl7Qz1jLFFoLnRyYW5zaXRpb249ZH19ZnVuY3Rpb24gRmkoKXtyZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlfVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWxoKGEpO2M9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKEhpKGEpKUlpKGIsYyk7ZWxzZSBpZihjPVlnKGEsYixjLGQpLG51bGwhPT1jKXt2YXIgZT1MKCk7bWgoYyxhLGQsZSk7SmkoYyxiLGQpfX1cbmZ1bmN0aW9uIHJpKGEsYixjKXt2YXIgZD1saChhKSxlPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZihIaShhKSlJaShiLGUpO2Vsc2V7dmFyIGY9YS5hbHRlcm5hdGU7aWYoMD09PWEubGFuZXMmJihudWxsPT09Znx8MD09PWYubGFuZXMpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuaGFzRWFnZXJTdGF0ZT0hMDtlLmVhZ2VyU3RhdGU9aDtpZihIZShoLGcpKXt2YXIgaz1iLmludGVybGVhdmVkO251bGw9PT1rPyhlLm5leHQ9ZSxYZyhiKSk6KGUubmV4dD1rLm5leHQsay5uZXh0PWUpO2IuaW50ZXJsZWF2ZWQ9ZTtyZXR1cm59fWNhdGNoKGwpe31maW5hbGx5e31jPVlnKGEsYixlLGQpO251bGwhPT1jJiYoZT1MKCksbWgoYyxhLGQsZSksSmkoYyxiLGQpKX19XG5mdW5jdGlvbiBIaShhKXt2YXIgYj1hLmFsdGVybmF0ZTtyZXR1cm4gYT09PU58fG51bGwhPT1iJiZiPT09Tn1mdW5jdGlvbiBJaShhLGIpe1RoPVNoPSEwO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9ZnVuY3Rpb24gSmkoYSxiLGMpe2lmKDAhPT0oYyY0MTk0MjQwKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbnZhciBhaT17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUluc2VydGlvbkVmZmVjdDpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246USx1c2VNdXRhYmxlU291cmNlOlEsdXNlU3luY0V4dGVybmFsU3RvcmU6USx1c2VJZDpRLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWWg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7Y2koKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6dmksdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHRpKDQxOTQzMDgsXG40LHlpLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGkoNDE5NDMwOCw0LGEsYil9LHVzZUluc2VydGlvbkVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0aSg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPWNpKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWNpKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2QucXVldWU9YTthPWEuZGlzcGF0Y2g9R2kuYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPVxuY2koKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6cWksdXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3JldHVybiBjaSgpLm1lbW9pemVkU3RhdGU9YX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPXFpKCExKSxiPWFbMF07YT1FaS5iaW5kKG51bGwsYVsxXSk7Y2koKS5tZW1vaXplZFN0YXRlPWE7cmV0dXJuW2IsYV19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oKXt9LHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1OLGU9Y2koKTtpZihJKXtpZih2b2lkIDA9PT1jKXRocm93IEVycm9yKHAoNDA3KSk7Yz1jKCl9ZWxzZXtjPWIoKTtpZihudWxsPT09Uil0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oUmgmMzApfHxuaShkLGIsYyl9ZS5tZW1vaXplZFN0YXRlPWM7dmFyIGY9e3ZhbHVlOmMsZ2V0U25hcHNob3Q6Yn07ZS5xdWV1ZT1mO3ZpKGtpLmJpbmQobnVsbCxkLFxuZixhKSxbYV0pO2QuZmxhZ3N8PTIwNDg7bGkoOSxtaS5iaW5kKG51bGwsZCxmLGMsYiksdm9pZCAwLG51bGwpO3JldHVybiBjfSx1c2VJZDpmdW5jdGlvbigpe3ZhciBhPWNpKCksYj1SLmlkZW50aWZpZXJQcmVmaXg7aWYoSSl7dmFyIGM9c2c7dmFyIGQ9cmc7Yz0oZCZ+KDE8PDMyLW9jKGQpLTEpKS50b1N0cmluZygzMikrYztiPVwiOlwiK2IrXCJSXCIrYztjPVVoKys7MDxjJiYoYis9XCJIXCIrYy50b1N0cmluZygzMikpO2IrPVwiOlwifWVsc2UgYz1WaCsrLGI9XCI6XCIrYitcInJcIitjLnRvU3RyaW5nKDMyKStcIjpcIjtyZXR1cm4gYS5tZW1vaXplZFN0YXRlPWJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWmg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOkJpLHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OmppLHVzZUltcGVyYXRpdmVIYW5kbGU6emksdXNlSW5zZXJ0aW9uRWZmZWN0OndpLHVzZUxheW91dEVmZmVjdDp4aSx1c2VNZW1vOkNpLHVzZVJlZHVjZXI6ZmksdXNlUmVmOnNpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGZpKGVpKX0sXG51c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZGkoKTtyZXR1cm4gRGkoYixPLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1maShlaSlbMF0sYj1kaSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6aGksdXNlU3luY0V4dGVybmFsU3RvcmU6aWksdXNlSWQ6RmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSwkaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6QmksdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6amksdXNlSW1wZXJhdGl2ZUhhbmRsZTp6aSx1c2VJbnNlcnRpb25FZmZlY3Q6d2ksdXNlTGF5b3V0RWZmZWN0OnhpLHVzZU1lbW86Q2ksdXNlUmVkdWNlcjpnaSx1c2VSZWY6c2ksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gZ2koZWkpfSx1c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZGkoKTtyZXR1cm4gbnVsbD09PVxuTz9iLm1lbW9pemVkU3RhdGU9YTpEaShiLE8ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWdpKGVpKVswXSxiPWRpKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpoaSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTppaSx1c2VJZDpGaSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9O2Z1bmN0aW9uIEtpKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVBhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplLGRpZ2VzdDpudWxsfX1mdW5jdGlvbiBMaShhLGIsYyl7cmV0dXJue3ZhbHVlOmEsc291cmNlOm51bGwsc3RhY2s6bnVsbCE9Yz9jOm51bGwsZGlnZXN0Om51bGwhPWI/YjpudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBOaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBPaShhLGIsYyl7Yz1jaCgtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtQaXx8KFBpPSEwLFFpPWQpO01pKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gUmkoYSxiLGMpe2M9Y2goLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TWkoYSxiKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe01pKGEsYik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09U2k/U2k9bmV3IFNldChbdGhpc10pOlNpLmFkZCh0aGlzKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBUaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7aWYobnVsbD09PWQpe2Q9YS5waW5nQ2FjaGU9bmV3IE5pO3ZhciBlPW5ldyBTZXQ7ZC5zZXQoYixlKX1lbHNlIGU9ZC5nZXQoYiksdm9pZCAwPT09ZSYmKGU9bmV3IFNldCxkLnNldChiLGUpKTtlLmhhcyhjKXx8KGUuYWRkKGMpLGE9VWkuYmluZChudWxsLGEsYixjKSxiLnRoZW4oYSxhKSl9ZnVuY3Rpb24gVmkoYSl7ZG97dmFyIGI7aWYoYj0xMz09PWEudGFnKWI9YS5tZW1vaXplZFN0YXRlLGI9bnVsbCE9PWI/bnVsbCE9PWIuZGVoeWRyYXRlZD8hMDohMTohMDtpZihiKXJldHVybiBhO2E9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gV2koYSxiLGMsZCxlKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gYT09PWI/YS5mbGFnc3w9NjU1MzY6KGEuZmxhZ3N8PTEyOCxjLmZsYWdzfD0xMzEwNzIsYy5mbGFncyY9LTUyODA1LDE9PT1jLnRhZyYmKG51bGw9PT1jLmFsdGVybmF0ZT9jLnRhZz0xNzooYj1jaCgtMSwxKSxiLnRhZz0yLGRoKGMsYiwxKSkpLGMubGFuZXN8PTEpLGE7YS5mbGFnc3w9NjU1MzY7YS5sYW5lcz1lO3JldHVybiBhfXZhciBYaT11YS5SZWFjdEN1cnJlbnRPd25lcixVZz0hMTtmdW5jdGlvbiBZaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP0NoKGIsbnVsbCxjLGQpOkJoKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gWmkoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO1RnKGIsZSk7ZD1YaChhLGIsYyxkLGYsZSk7Yz1iaSgpO2lmKG51bGwhPT1hJiYhVWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSwkaShhLGIsZSk7SSYmYyYmdmcoYik7Yi5mbGFnc3w9MTtZaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGFqKGEsYixjLGQsZSl7aWYobnVsbD09PWEpe3ZhciBmPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmIWJqKGYpJiZ2b2lkIDA9PT1mLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1mLGNqKGEsYixmLGQsZSk7YT15aChjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGUpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1mPWEuY2hpbGQ7aWYoMD09PShhLmxhbmVzJmUpKXt2YXIgZz1mLm1lbW9pemVkUHJvcHM7Yz1jLmNvbXBhcmU7Yz1udWxsIT09Yz9jOkllO2lmKGMoZyxkKSYmYS5yZWY9PT1iLnJlZilyZXR1cm4gJGkoYSxiLGUpfWIuZmxhZ3N8PTE7YT13aChmLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGNqKGEsYixjLGQsZSl7aWYobnVsbCE9PWEpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihJZShmLGQpJiZhLnJlZj09PWIucmVmKWlmKFVnPSExLGIucGVuZGluZ1Byb3BzPWQ9ZiwwIT09KGEubGFuZXMmZSkpMCE9PShhLmZsYWdzJjEzMTA3MikmJihVZz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLCRpKGEsYixlKX1yZXR1cm4gZGooYSxiLGMsZCxlKX1cbmZ1bmN0aW9uIGVqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sRyhmaixnaiksZ2p8PWM7ZWxzZXtpZigwPT09KGMmMTA3Mzc0MTgyNCkpcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxiLnVwZGF0ZVF1ZXVlPW51bGwsRyhmaixnaiksZ2p8PWEsbnVsbDtiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9O2Q9bnVsbCE9PWY/Zi5iYXNlTGFuZXM6YztHKGZqLGdqKTtnanw9ZH1lbHNlIG51bGwhPT1cbmY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLEcoZmosZ2opLGdqfD1kO1lpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGhqKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyfWZ1bmN0aW9uIGRqKGEsYixjLGQsZSl7dmFyIGY9WmYoYyk/WGY6SC5jdXJyZW50O2Y9WWYoYixmKTtUZyhiLGUpO2M9WGgoYSxiLGMsZCxmLGUpO2Q9YmkoKTtpZihudWxsIT09YSYmIVVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsJGkoYSxiLGUpO0kmJmQmJnZnKGIpO2IuZmxhZ3N8PTE7WWkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaihhLGIsYyxkLGUpe2lmKFpmKGMpKXt2YXIgZj0hMDtjZyhiKX1lbHNlIGY9ITE7VGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpamooYSxiKSxwaChiLGMsZCkscmgoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9VmcobCk6KGw9WmYoYyk/WGY6SC5jdXJyZW50LGw9WWYoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1kfHxrIT09bCkmJnFoKGIsZyxkLGwpOyRnPSExO3ZhciByPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7Z2goYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHIhPT1rfHxXZi5jdXJyZW50fHwkZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihraChiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9JGd8fG9oKGIsYyxoLGQscixrLGwpKT8ocXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpKTpcbihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO2JoKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6TGcoYi50eXBlLGgpO2cucHJvcHM9bDtxPWIucGVuZGluZ1Byb3BzO3I9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9Vmcoayk6KGs9WmYoYyk/WGY6SC5jdXJyZW50LGs9WWYoYixrKSk7dmFyIHk9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG09XCJmdW5jdGlvblwiPT09dHlwZW9mIHl8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1xfHxyIT09aykmJnFoKGIsZyxkLGspOyRnPSExO3I9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtnaChiLGQsZyxlKTt2YXIgbj1iLm1lbW9pemVkU3RhdGU7aCE9PXF8fHIhPT1ufHxXZi5jdXJyZW50fHwkZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHkmJihraChiLGMseSxkKSxuPWIubWVtb2l6ZWRTdGF0ZSksKGw9JGd8fG9oKGIsYyxsLGQscixuLGspfHwhMSk/KG18fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0xMDI0KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPW4pLGcucHJvcHM9ZCxnLnN0YXRlPW4sZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09XG5hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGQ9ITEpfXJldHVybiBraihhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBraihhLGIsYyxkLGUsZil7aGooYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmMTI4KTtpZighZCYmIWcpcmV0dXJuIGUmJmRnKGIsYywhMSksJGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7WGkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1CaChiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPUJoKGIsbnVsbCxoLGYpKTpZaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZkZyhiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGxqKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/YWcoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmYWcoYSxiLmNvbnRleHQsITEpO0loKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIG1qKGEsYixjLGQsZSl7SWcoKTtKZyhlKTtiLmZsYWdzfD0yNTY7WWkoYSxiLGMsZCk7cmV0dXJuIGIuY2hpbGR9dmFyIG5qPXtkZWh5ZHJhdGVkOm51bGwsdHJlZUNvbnRleHQ6bnVsbCxyZXRyeUxhbmU6MH07ZnVuY3Rpb24gb2ooYSl7cmV0dXJue2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9fVxuZnVuY3Rpb24gcGooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9TS5jdXJyZW50LGY9ITEsZz0wIT09KGIuZmxhZ3MmMTI4KSxoOyhoPWcpfHwoaD1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2lmKGgpZj0hMCxiLmZsYWdzJj0tMTI5O2Vsc2UgaWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpZXw9MTtHKE0sZSYxKTtpZihudWxsPT09YSl7RWcoYik7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJihhPWEuZGVoeWRyYXRlZCxudWxsIT09YSkpcmV0dXJuIDA9PT0oYi5tb2RlJjEpP2IubGFuZXM9MTpcIiQhXCI9PT1hLmRhdGE/Yi5sYW5lcz04OmIubGFuZXM9MTA3Mzc0MTgyNCxudWxsO2c9ZC5jaGlsZHJlbjthPWQuZmFsbGJhY2s7cmV0dXJuIGY/KGQ9Yi5tb2RlLGY9Yi5jaGlsZCxnPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Z30sMD09PShkJjEpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9XG5nKTpmPXFqKGcsZCwwLG51bGwpLGE9QWgoYSxkLGMsbnVsbCksZi5yZXR1cm49YixhLnJldHVybj1iLGYuc2libGluZz1hLGIuY2hpbGQ9ZixiLmNoaWxkLm1lbW9pemVkU3RhdGU9b2ooYyksYi5tZW1vaXplZFN0YXRlPW5qLGEpOnJqKGIsZyl9ZT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUmJihoPWUuZGVoeWRyYXRlZCxudWxsIT09aCkpcmV0dXJuIHNqKGEsYixnLGQsaCxlLGMpO2lmKGYpe2Y9ZC5mYWxsYmFjaztnPWIubW9kZTtlPWEuY2hpbGQ7aD1lLnNpYmxpbmc7dmFyIGs9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpkLmNoaWxkcmVufTswPT09KGcmMSkmJmIuY2hpbGQhPT1lPyhkPWIuY2hpbGQsZC5jaGlsZExhbmVzPTAsZC5wZW5kaW5nUHJvcHM9ayxiLmRlbGV0aW9ucz1udWxsKTooZD13aChlLGspLGQuc3VidHJlZUZsYWdzPWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0KTtudWxsIT09aD9mPXdoKGgsZik6KGY9QWgoZixnLGMsbnVsbCksZi5mbGFnc3w9Mik7Zi5yZXR1cm49XG5iO2QucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kO2Q9ZjtmPWIuY2hpbGQ7Zz1hLmNoaWxkLm1lbW9pemVkU3RhdGU7Zz1udWxsPT09Zz9vaihjKTp7YmFzZUxhbmVzOmcuYmFzZUxhbmVzfGMsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc307Zi5tZW1vaXplZFN0YXRlPWc7Zi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YztiLm1lbW9pemVkU3RhdGU9bmo7cmV0dXJuIGR9Zj1hLmNoaWxkO2E9Zi5zaWJsaW5nO2Q9d2goZix7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSk7MD09PShiLm1vZGUmMSkmJihkLmxhbmVzPWMpO2QucmV0dXJuPWI7ZC5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihjPWIuZGVsZXRpb25zLG51bGw9PT1jPyhiLmRlbGV0aW9ucz1bYV0sYi5mbGFnc3w9MTYpOmMucHVzaChhKSk7Yi5jaGlsZD1kO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBkfVxuZnVuY3Rpb24gcmooYSxiKXtiPXFqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmJ9LGEubW9kZSwwLG51bGwpO2IucmV0dXJuPWE7cmV0dXJuIGEuY2hpbGQ9Yn1mdW5jdGlvbiB0aihhLGIsYyxkKXtudWxsIT09ZCYmSmcoZCk7QmgoYixhLmNoaWxkLG51bGwsYyk7YT1yaihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKTthLmZsYWdzfD0yO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBhfVxuZnVuY3Rpb24gc2ooYSxiLGMsZCxlLGYsZyl7aWYoYyl7aWYoYi5mbGFncyYyNTYpcmV0dXJuIGIuZmxhZ3MmPS0yNTcsZD1MaShFcnJvcihwKDQyMikpKSx0aihhLGIsZyxkKTtpZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXJldHVybiBiLmNoaWxkPWEuY2hpbGQsYi5mbGFnc3w9MTI4LG51bGw7Zj1kLmZhbGxiYWNrO2U9Yi5tb2RlO2Q9cWooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0sZSwwLG51bGwpO2Y9QWgoZixlLGcsbnVsbCk7Zi5mbGFnc3w9MjtkLnJldHVybj1iO2YucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kOzAhPT0oYi5tb2RlJjEpJiZCaChiLGEuY2hpbGQsbnVsbCxnKTtiLmNoaWxkLm1lbW9pemVkU3RhdGU9b2ooZyk7Yi5tZW1vaXplZFN0YXRlPW5qO3JldHVybiBmfWlmKDA9PT0oYi5tb2RlJjEpKXJldHVybiB0aihhLGIsZyxudWxsKTtpZihcIiQhXCI9PT1lLmRhdGEpe2Q9ZS5uZXh0U2libGluZyYmZS5uZXh0U2libGluZy5kYXRhc2V0O1xuaWYoZCl2YXIgaD1kLmRnc3Q7ZD1oO2Y9RXJyb3IocCg0MTkpKTtkPUxpKGYsZCx2b2lkIDApO3JldHVybiB0aihhLGIsZyxkKX1oPTAhPT0oZyZhLmNoaWxkTGFuZXMpO2lmKFVnfHxoKXtkPVI7aWYobnVsbCE9PWQpe3N3aXRjaChnJi1nKXtjYXNlIDQ6ZT0yO2JyZWFrO2Nhc2UgMTY6ZT04O2JyZWFrO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDplPTMyO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmU9MjY4NDM1NDU2O2JyZWFrO2RlZmF1bHQ6ZT0wfWU9MCE9PShlJihkLnN1c3BlbmRlZExhbmVzfGcpKT8wOmU7XG4wIT09ZSYmZSE9PWYucmV0cnlMYW5lJiYoZi5yZXRyeUxhbmU9ZSxaZyhhLGUpLG1oKGQsYSxlLC0xKSl9dWooKTtkPUxpKEVycm9yKHAoNDIxKSkpO3JldHVybiB0aihhLGIsZyxkKX1pZihcIiQ/XCI9PT1lLmRhdGEpcmV0dXJuIGIuZmxhZ3N8PTEyOCxiLmNoaWxkPWEuY2hpbGQsYj12ai5iaW5kKG51bGwsYSksZS5fcmVhY3RSZXRyeT1iLG51bGw7YT1mLnRyZWVDb250ZXh0O3lnPUxmKGUubmV4dFNpYmxpbmcpO3hnPWI7ST0hMDt6Zz1udWxsO251bGwhPT1hJiYob2dbcGcrK109cmcsb2dbcGcrK109c2csb2dbcGcrK109cWcscmc9YS5pZCxzZz1hLm92ZXJmbG93LHFnPWIpO2I9cmooYixkLmNoaWxkcmVuKTtiLmZsYWdzfD00MDk2O3JldHVybiBifWZ1bmN0aW9uIHdqKGEsYixjKXthLmxhbmVzfD1iO3ZhciBkPWEuYWx0ZXJuYXRlO251bGwhPT1kJiYoZC5sYW5lc3w9Yik7U2coYS5yZXR1cm4sYixjKX1cbmZ1bmN0aW9uIHhqKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmV9OihmLmlzQmFja3dhcmRzPWIsZi5yZW5kZXJpbmc9bnVsbCxmLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbE1vZGU9ZSl9XG5mdW5jdGlvbiB5aihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1lpKGEsYixkLmNoaWxkcmVuLGMpO2Q9TS5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTEyODtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJndqKGEsYyxiKTtlbHNlIGlmKDE5PT09YS50YWcpd2ooYSxjLGIpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1HKE0sZCk7aWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PU1oKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7eGooYiwhMSxlLGMsZik7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1NaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9eGooYiwhMCxjLG51bGwsZik7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6eGooYiwhMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gamooYSxiKXswPT09KGIubW9kZSYxKSYmbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mil9ZnVuY3Rpb24gJGkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO2hofD1iLmxhbmVzO2lmKDA9PT0oYyZiLmNoaWxkTGFuZXMpKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcihwKDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz13aChhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9d2goYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHpqKGEsYixjKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpsaihiKTtJZygpO2JyZWFrO2Nhc2UgNTpLaChiKTticmVhaztjYXNlIDE6WmYoYi50eXBlKSYmY2coYik7YnJlYWs7Y2FzZSA0OkloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDp2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLm1lbW9pemVkUHJvcHMudmFsdWU7RyhNZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1lO2JyZWFrO2Nhc2UgMTM6ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQpe2lmKG51bGwhPT1kLmRlaHlkcmF0ZWQpcmV0dXJuIEcoTSxNLmN1cnJlbnQmMSksYi5mbGFnc3w9MTI4LG51bGw7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHBqKGEsYixjKTtHKE0sTS5jdXJyZW50JjEpO2E9JGkoYSxiLGMpO3JldHVybiBudWxsIT09YT9hLnNpYmxpbmc6bnVsbH1HKE0sTS5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmXG5iLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyYxMjgpKXtpZihkKXJldHVybiB5aihhLGIsYyk7Yi5mbGFnc3w9MTI4fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7RyhNLE0uY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gYi5sYW5lcz0wLGVqKGEsYixjKX1yZXR1cm4gJGkoYSxiLGMpfXZhciBBaixCaixDaixEajtcbkFqPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtCaj1mdW5jdGlvbigpe307XG5Daj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7SGgoRWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPUEoe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1CZil9dWIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmXG4oY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8KGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLFxuYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkQoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0RqPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O1xuZnVuY3Rpb24gRWooYSxiKXtpZighSSlzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gUyhhKXt2YXIgYj1udWxsIT09YS5hbHRlcm5hdGUmJmEuYWx0ZXJuYXRlLmNoaWxkPT09YS5jaGlsZCxjPTAsZD0wO2lmKGIpZm9yKHZhciBlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0LGR8PWUuZmxhZ3MmMTQ2ODAwNjQsZS5yZXR1cm49YSxlPWUuc2libGluZztlbHNlIGZvcihlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzLGR8PWUuZmxhZ3MsZS5yZXR1cm49YSxlPWUuc2libGluZzthLnN1YnRyZWVGbGFnc3w9ZDthLmNoaWxkTGFuZXM9YztyZXR1cm4gYn1cbmZ1bmN0aW9uIEZqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wczt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBTKGIpLG51bGw7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDM6ZD1iLnN0YXRlTm9kZTtKaCgpO0UoV2YpO0UoSCk7T2goKTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpR2coYik/Yi5mbGFnc3w9NDpudWxsPT09YXx8YS5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmMD09PShiLmZsYWdzJjI1Nil8fChiLmZsYWdzfD0xMDI0LG51bGwhPT16ZyYmKEdqKHpnKSx6Zz1udWxsKSk7QmooYSxiKTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNTpMaChiKTt2YXIgZT1IaChHaC5jdXJyZW50KTtcbmM9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlDaihhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mik7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7UyhiKTtyZXR1cm4gbnVsbH1hPUhoKEVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2RbUGZdPWY7YT0wIT09KGIubW9kZSYxKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixkKTtEKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5kKTtEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxEKFwiaW52YWxpZFwiLGQpfXViKGMsZik7ZT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LGgsYSksZT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LFxuaCxhKSxlPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6ZWEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJlwib25TY3JvbGxcIj09PWcmJkQoXCJzY3JvbGxcIixkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7ZGIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1CZil9ZD1lO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWEmJihhPWtiKGMpKTtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlxuXCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2FbT2ZdPWI7YVtQZl09ZDtBaihhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7YTp7Zz12YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGEpO0QoXCJjbG9zZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5hKTtEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1kO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPWdiKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH11YihjLGUpO2g9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj9zYihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbmIoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PVxuY3x8XCJcIiE9PWspJiZvYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmb2IoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihlYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZEKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmdGEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtkYihhLGQsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSxcbiEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXN3aXRjaChjKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmQ9ISFkLmF1dG9Gb2N1czticmVhayBhO2Nhc2UgXCJpbWdcIjpkPSEwO2JyZWFrIGE7ZGVmYXVsdDpkPSExfX1kJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpfVMoYik7cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKURqKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO2M9SGgoR2guY3VycmVudCk7SGgoRWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtpZihmPWQubm9kZVZhbHVlIT09YylpZihhPVxueGcsbnVsbCE9PWEpc3dpdGNoKGEudGFnKXtjYXNlIDM6QWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSk7YnJlYWs7Y2FzZSA1OiEwIT09YS5tZW1vaXplZFByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSl9ZiYmKGIuZmxhZ3N8PTQpfWVsc2UgZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbT2ZdPWIsYi5zdGF0ZU5vZGU9ZH1TKGIpO3JldHVybiBudWxsO2Nhc2UgMTM6RShNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtpZihJJiZudWxsIT09eWcmJjAhPT0oYi5tb2RlJjEpJiYwPT09KGIuZmxhZ3MmMTI4KSlIZygpLElnKCksYi5mbGFnc3w9OTg1NjAsZj0hMTtlbHNlIGlmKGY9R2coYiksbnVsbCE9PWQmJm51bGwhPT1kLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1cbmEpe2lmKCFmKXRocm93IEVycm9yKHAoMzE4KSk7Zj1iLm1lbW9pemVkU3RhdGU7Zj1udWxsIT09Zj9mLmRlaHlkcmF0ZWQ6bnVsbDtpZighZil0aHJvdyBFcnJvcihwKDMxNykpO2ZbT2ZdPWJ9ZWxzZSBJZygpLDA9PT0oYi5mbGFncyYxMjgpJiYoYi5tZW1vaXplZFN0YXRlPW51bGwpLGIuZmxhZ3N8PTQ7UyhiKTtmPSExfWVsc2UgbnVsbCE9PXpnJiYoR2ooemcpLHpnPW51bGwpLGY9ITA7aWYoIWYpcmV0dXJuIGIuZmxhZ3MmNjU1MzY/YjpudWxsfWlmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2QhPT0obnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUpJiZkJiYoYi5jaGlsZC5mbGFnc3w9ODE5MiwwIT09KGIubW9kZSYxKSYmKG51bGw9PT1hfHwwIT09KE0uY3VycmVudCYxKT8wPT09VCYmKFQ9Myk6dWooKSkpO251bGwhPT1iLnVwZGF0ZVF1ZXVlJiYoYi5mbGFnc3w9NCk7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIEpoKCksXG5CaihhLGIpLG51bGw9PT1hJiZzZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxTKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSxTKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAxOTpFKE0pO2Y9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1mKXJldHVybiBTKGIpLG51bGw7ZD0wIT09KGIuZmxhZ3MmMTI4KTtnPWYucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGQpRWooZiwhMSk7ZWxzZXtpZigwIT09VHx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPU1oKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD0xMjg7RWooZiwhMSk7ZD1nLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1kLGIuZmxhZ3N8PTQpO2Iuc3VidHJlZUZsYWdzPTA7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MTQ2ODAwNjYsXG5nPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYuc3VidHJlZUZsYWdzPTAsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLnN1YnRyZWVGbGFncz0wLGYuZGVsZXRpb25zPW51bGwsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztHKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1cbmEuc2libGluZ31udWxsIT09Zi50YWlsJiZCKCk+SGomJihiLmZsYWdzfD0xMjgsZD0hMCxFaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpfWVsc2V7aWYoIWQpaWYoYT1NaChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9MTI4LGQ9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEVqKGYsITApLG51bGw9PT1mLnRhaWwmJlwiaGlkZGVuXCI9PT1mLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFJKXJldHVybiBTKGIpLG51bGx9ZWxzZSAyKkIoKS1mLnJlbmRlcmluZ1N0YXJ0VGltZT5IaiYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD0xMjgsZD0hMCxFaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpO2YuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9Zi5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxmLmxhc3Q9Zyl9aWYobnVsbCE9PWYudGFpbClyZXR1cm4gYj1mLnRhaWwsZi5yZW5kZXJpbmc9XG5iLGYudGFpbD1iLnNpYmxpbmcsZi5yZW5kZXJpbmdTdGFydFRpbWU9QigpLGIuc2libGluZz1udWxsLGM9TS5jdXJyZW50LEcoTSxkP2MmMXwyOmMmMSksYjtTKGIpO3JldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT1kJiYoYi5mbGFnc3w9ODE5MiksZCYmMCE9PShiLm1vZGUmMSk/MCE9PShnaiYxMDczNzQxODI0KSYmKFMoYiksYi5zdWJ0cmVlRmxhZ3MmNiYmKGIuZmxhZ3N8PTgxOTIpKTpTKGIpLG51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtjYXNlIDI1OnJldHVybiBudWxsfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gSmooYSxiKXt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxhPWIuZmxhZ3MsYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDM6cmV0dXJuIEpoKCksRShXZiksRShIKSxPaCgpLGE9Yi5mbGFncywwIT09KGEmNjU1MzYpJiYwPT09KGEmMTI4KT8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDU6cmV0dXJuIExoKGIpLG51bGw7Y2FzZSAxMzpFKE0pO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXtpZihudWxsPT09Yi5hbHRlcm5hdGUpdGhyb3cgRXJyb3IocCgzNDApKTtJZygpfWE9Yi5mbGFncztyZXR1cm4gYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDE5OnJldHVybiBFKE0pLG51bGw7Y2FzZSA0OnJldHVybiBKaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSxudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSxcbm51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgS2o9ITEsVT0hMSxMaj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldCxWPW51bGw7ZnVuY3Rpb24gTWooYSxiKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaChkKXtXKGEsYixkKX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIE5qKGEsYixjKXt0cnl7YygpfWNhdGNoKGQpe1coYSxiLGQpfX12YXIgT2o9ITE7XG5mdW5jdGlvbiBQaihhLGIpe0NmPWRkO2E9TWUoKTtpZihOZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYz17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Yz0oYz1hLm93bmVyRG9jdW1lbnQpJiZjLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGQ9Yy5nZXRTZWxlY3Rpb24mJmMuZ2V0U2VsZWN0aW9uKCk7aWYoZCYmMCE9PWQucmFuZ2VDb3VudCl7Yz1kLmFuY2hvck5vZGU7dmFyIGU9ZC5hbmNob3JPZmZzZXQsZj1kLmZvY3VzTm9kZTtkPWQuZm9jdXNPZmZzZXQ7dHJ5e2Mubm9kZVR5cGUsZi5ub2RlVHlwZX1jYXRjaChGKXtjPW51bGw7YnJlYWsgYX12YXIgZz0wLGg9LTEsaz0tMSxsPTAsbT0wLHE9YSxyPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeTs7KXtxIT09Y3x8MCE9PWUmJjMhPT1xLm5vZGVUeXBlfHwoaD1nK2UpO3EhPT1mfHwwIT09ZCYmMyE9PXEubm9kZVR5cGV8fChrPWcrZCk7Mz09PXEubm9kZVR5cGUmJihnKz1cbnEubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh5PXEuZmlyc3RDaGlsZCkpYnJlYWs7cj1xO3E9eX1mb3IoOzspe2lmKHE9PT1hKWJyZWFrIGI7cj09PWMmJisrbD09PWUmJihoPWcpO3I9PT1mJiYrK209PT1kJiYoaz1nKTtpZihudWxsIT09KHk9cS5uZXh0U2libGluZykpYnJlYWs7cT1yO3I9cS5wYXJlbnROb2RlfXE9eX1jPS0xPT09aHx8LTE9PT1rP251bGw6e3N0YXJ0OmgsZW5kOmt9fWVsc2UgYz1udWxsfWM9Y3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYz1udWxsO0RmPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmN9O2RkPSExO2ZvcihWPWI7bnVsbCE9PVY7KWlmKGI9VixhPWIuY2hpbGQsMCE9PShiLnN1YnRyZWVGbGFncyYxMDI4KSYmbnVsbCE9PWEpYS5yZXR1cm49YixWPWE7ZWxzZSBmb3IoO251bGwhPT1WOyl7Yj1WO3RyeXt2YXIgbj1iLmFsdGVybmF0ZTtpZigwIT09KGIuZmxhZ3MmMTAyNCkpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrO1xuY2FzZSAxOmlmKG51bGwhPT1uKXt2YXIgdD1uLm1lbW9pemVkUHJvcHMsSj1uLm1lbW9pemVkU3RhdGUseD1iLnN0YXRlTm9kZSx3PXguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT90OkxnKGIudHlwZSx0KSxKKTt4Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPXd9YnJlYWs7Y2FzZSAzOnZhciB1PWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87MT09PXUubm9kZVR5cGU/dS50ZXh0Q29udGVudD1cIlwiOjk9PT11Lm5vZGVUeXBlJiZ1LmRvY3VtZW50RWxlbWVudCYmdS5yZW1vdmVDaGlsZCh1LmRvY3VtZW50RWxlbWVudCk7YnJlYWs7Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fX1jYXRjaChGKXtXKGIsYi5yZXR1cm4sRil9YT1iLnNpYmxpbmc7aWYobnVsbCE9PWEpe2EucmV0dXJuPWIucmV0dXJuO1Y9YTticmVha31WPWIucmV0dXJufW49T2o7T2o9ITE7cmV0dXJuIG59XG5mdW5jdGlvbiBRaihhLGIsYyl7dmFyIGQ9Yi51cGRhdGVRdWV1ZTtkPW51bGwhPT1kP2QubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1kKXt2YXIgZT1kPWQubmV4dDtkb3tpZigoZS50YWcmYSk9PT1hKXt2YXIgZj1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1mJiZOaihiLGMsZil9ZT1lLm5leHR9d2hpbGUoZSE9PWQpfX1mdW5jdGlvbiBSaihhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gU2ooYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9YzticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX1cbmZ1bmN0aW9uIFRqKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO251bGwhPT1iJiYoYS5hbHRlcm5hdGU9bnVsbCxUaihiKSk7YS5jaGlsZD1udWxsO2EuZGVsZXRpb25zPW51bGw7YS5zaWJsaW5nPW51bGw7NT09PWEudGFnJiYoYj1hLnN0YXRlTm9kZSxudWxsIT09YiYmKGRlbGV0ZSBiW09mXSxkZWxldGUgYltQZl0sZGVsZXRlIGJbb2ZdLGRlbGV0ZSBiW1FmXSxkZWxldGUgYltSZl0pKTthLnN0YXRlTm9kZT1udWxsO2EucmV0dXJuPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIFVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gVmooYSl7YTpmb3IoOzspe2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8VWooYS5yZXR1cm4pKXJldHVybiBudWxsO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjtmb3IoYT1hLnNpYmxpbmc7NSE9PWEudGFnJiY2IT09YS50YWcmJjE4IT09YS50YWc7KXtpZihhLmZsYWdzJjIpY29udGludWUgYTtpZihudWxsPT09YS5jaGlsZHx8ND09PWEudGFnKWNvbnRpbnVlIGE7ZWxzZSBhLmNoaWxkLnJldHVybj1hLGE9YS5jaGlsZH1pZighKGEuZmxhZ3MmMikpcmV0dXJuIGEuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIFdqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1CZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihXaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVdqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFhqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoWGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylYaihhLGIsYyksYT1hLnNpYmxpbmd9dmFyIFg9bnVsbCxZaj0hMTtmdW5jdGlvbiBaaihhLGIsYyl7Zm9yKGM9Yy5jaGlsZDtudWxsIT09YzspYWsoYSxiLGMpLGM9Yy5zaWJsaW5nfVxuZnVuY3Rpb24gYWsoYSxiLGMpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclVubW91bnQpdHJ5e2xjLm9uQ29tbWl0RmliZXJVbm1vdW50KGtjLGMpfWNhdGNoKGgpe31zd2l0Y2goYy50YWcpe2Nhc2UgNTpVfHxNaihjLGIpO2Nhc2UgNjp2YXIgZD1YLGU9WWo7WD1udWxsO1pqKGEsYixjKTtYPWQ7WWo9ZTtudWxsIT09WCYmKFlqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYyk6YS5yZW1vdmVDaGlsZChjKSk6WC5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgMTg6bnVsbCE9PVgmJihZaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/S2YoYS5wYXJlbnROb2RlLGMpOjE9PT1hLm5vZGVUeXBlJiZLZihhLGMpLGJkKGEpKTpLZihYLGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSA0OmQ9WDtlPVlqO1g9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDtcblpqKGEsYixjKTtYPWQ7WWo9ZTticmVhaztjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6aWYoIVUmJihkPWMudXBkYXRlUXVldWUsbnVsbCE9PWQmJihkPWQubGFzdEVmZmVjdCxudWxsIT09ZCkpKXtlPWQ9ZC5uZXh0O2Rve3ZhciBmPWUsZz1mLmRlc3Ryb3k7Zj1mLnRhZzt2b2lkIDAhPT1nJiYoMCE9PShmJjIpP05qKGMsYixnKTowIT09KGYmNCkmJk5qKGMsYixnKSk7ZT1lLm5leHR9d2hpbGUoZSE9PWQpfVpqKGEsYixjKTticmVhaztjYXNlIDE6aWYoIVUmJihNaihjLGIpLGQ9Yy5zdGF0ZU5vZGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpKXRyeXtkLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxkLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxkLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goaCl7VyhjLGIsaCl9WmooYSxiLGMpO2JyZWFrO2Nhc2UgMjE6WmooYSxiLGMpO2JyZWFrO2Nhc2UgMjI6Yy5tb2RlJjE/KFU9KGQ9VSl8fG51bGwhPT1cbmMubWVtb2l6ZWRTdGF0ZSxaaihhLGIsYyksVT1kKTpaaihhLGIsYyk7YnJlYWs7ZGVmYXVsdDpaaihhLGIsYyl9fWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IExqKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9Y2suYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBkayhhLGIpe3ZhciBjPWIuZGVsZXRpb25zO2lmKG51bGwhPT1jKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO3RyeXt2YXIgZj1hLGc9YixoPWc7YTpmb3IoO251bGwhPT1oOyl7c3dpdGNoKGgudGFnKXtjYXNlIDU6WD1oLnN0YXRlTm9kZTtZaj0hMTticmVhayBhO2Nhc2UgMzpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7YnJlYWsgYTtjYXNlIDQ6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO2JyZWFrIGF9aD1oLnJldHVybn1pZihudWxsPT09WCl0aHJvdyBFcnJvcihwKDE2MCkpO2FrKGYsZyxlKTtYPW51bGw7WWo9ITE7dmFyIGs9ZS5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLnJldHVybj1udWxsKTtlLnJldHVybj1udWxsfWNhdGNoKGwpe1coZSxiLGwpfX1pZihiLnN1YnRyZWVGbGFncyYxMjg1NClmb3IoYj1iLmNoaWxkO251bGwhPT1iOyllayhiLGEpLGI9Yi5zaWJsaW5nfVxuZnVuY3Rpb24gZWsoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEuZmxhZ3M7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6ZGsoYixhKTtmayhhKTtpZihkJjQpe3RyeXtRaigzLGEsYS5yZXR1cm4pLFJqKDMsYSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfXRyeXtRaig1LGEsYS5yZXR1cm4pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAxOmRrKGIsYSk7ZmsoYSk7ZCY1MTImJm51bGwhPT1jJiZNaihjLGMucmV0dXJuKTticmVhaztjYXNlIDU6ZGsoYixhKTtmayhhKTtkJjUxMiYmbnVsbCE9PWMmJk1qKGMsYy5yZXR1cm4pO2lmKGEuZmxhZ3MmMzIpe3ZhciBlPWEuc3RhdGVOb2RlO3RyeXtvYihlLFwiXCIpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19aWYoZCY0JiYoZT1hLnN0YXRlTm9kZSxudWxsIT1lKSl7dmFyIGY9YS5tZW1vaXplZFByb3BzLGc9bnVsbCE9PWM/Yy5tZW1vaXplZFByb3BzOmYsaD1hLnR5cGUsaz1hLnVwZGF0ZVF1ZXVlO1xuYS51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1rKXRyeXtcImlucHV0XCI9PT1oJiZcInJhZGlvXCI9PT1mLnR5cGUmJm51bGwhPWYubmFtZSYmYWIoZSxmKTt2YihoLGcpO3ZhciBsPXZiKGgsZik7Zm9yKGc9MDtnPGsubGVuZ3RoO2crPTIpe3ZhciBtPWtbZ10scT1rW2crMV07XCJzdHlsZVwiPT09bT9zYihlLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PW0/bmIoZSxxKTpcImNoaWxkcmVuXCI9PT1tP29iKGUscSk6dGEoZSxtLHEsbCl9c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOmJiKGUsZik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoZSxmKTticmVhaztjYXNlIFwic2VsZWN0XCI6dmFyIHI9ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO2UuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWYubXVsdGlwbGU7dmFyIHk9Zi52YWx1ZTtudWxsIT15P2ZiKGUsISFmLm11bHRpcGxlLHksITEpOnIhPT0hIWYubXVsdGlwbGUmJihudWxsIT1mLmRlZmF1bHRWYWx1ZT9mYihlLCEhZi5tdWx0aXBsZSxcbmYuZGVmYXVsdFZhbHVlLCEwKTpmYihlLCEhZi5tdWx0aXBsZSxmLm11bHRpcGxlP1tdOlwiXCIsITEpKX1lW1BmXT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSA2OmRrKGIsYSk7ZmsoYSk7aWYoZCY0KXtpZihudWxsPT09YS5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjIpKTtlPWEuc3RhdGVOb2RlO2Y9YS5tZW1vaXplZFByb3BzO3RyeXtlLm5vZGVWYWx1ZT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAzOmRrKGIsYSk7ZmsoYSk7aWYoZCY0JiZudWxsIT09YyYmYy5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl0cnl7YmQoYi5jb250YWluZXJJbmZvKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9YnJlYWs7Y2FzZSA0OmRrKGIsYSk7ZmsoYSk7YnJlYWs7Y2FzZSAxMzpkayhiLGEpO2ZrKGEpO2U9YS5jaGlsZDtlLmZsYWdzJjgxOTImJihmPW51bGwhPT1lLm1lbW9pemVkU3RhdGUsZS5zdGF0ZU5vZGUuaXNIaWRkZW49ZiwhZnx8XG5udWxsIT09ZS5hbHRlcm5hdGUmJm51bGwhPT1lLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlfHwoZ2s9QigpKSk7ZCY0JiZiayhhKTticmVhaztjYXNlIDIyOm09bnVsbCE9PWMmJm51bGwhPT1jLm1lbW9pemVkU3RhdGU7YS5tb2RlJjE/KFU9KGw9VSl8fG0sZGsoYixhKSxVPWwpOmRrKGIsYSk7ZmsoYSk7aWYoZCY4MTkyKXtsPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoKGEuc3RhdGVOb2RlLmlzSGlkZGVuPWwpJiYhbSYmMCE9PShhLm1vZGUmMSkpZm9yKFY9YSxtPWEuY2hpbGQ7bnVsbCE9PW07KXtmb3IocT1WPW07bnVsbCE9PVY7KXtyPVY7eT1yLmNoaWxkO3N3aXRjaChyLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OlFqKDQscixyLnJldHVybik7YnJlYWs7Y2FzZSAxOk1qKHIsci5yZXR1cm4pO3ZhciBuPXIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxVbm1vdW50KXtkPXI7Yz1yLnJldHVybjt0cnl7Yj1kLG4ucHJvcHM9XG5iLm1lbW9pemVkUHJvcHMsbi5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsbi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHQpe1coZCxjLHQpfX1icmVhaztjYXNlIDU6TWoocixyLnJldHVybik7YnJlYWs7Y2FzZSAyMjppZihudWxsIT09ci5tZW1vaXplZFN0YXRlKXtoayhxKTtjb250aW51ZX19bnVsbCE9PXk/KHkucmV0dXJuPXIsVj15KTpoayhxKX1tPW0uc2libGluZ31hOmZvcihtPW51bGwscT1hOzspe2lmKDU9PT1xLnRhZyl7aWYobnVsbD09PW0pe209cTt0cnl7ZT1xLnN0YXRlTm9kZSxsPyhmPWUuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihoPXEuc3RhdGVOb2RlLGs9cS5tZW1vaXplZFByb3BzLnN0eWxlLGc9dm9pZCAwIT09ayYmbnVsbCE9PWsmJmsuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2suZGlzcGxheTpudWxsLGguc3R5bGUuZGlzcGxheT1cbnJiKFwiZGlzcGxheVwiLGcpKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fX1lbHNlIGlmKDY9PT1xLnRhZyl7aWYobnVsbD09PW0pdHJ5e3Euc3RhdGVOb2RlLm5vZGVWYWx1ZT1sP1wiXCI6cS5tZW1vaXplZFByb3BzfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19ZWxzZSBpZigoMjIhPT1xLnRhZyYmMjMhPT1xLnRhZ3x8bnVsbD09PXEubWVtb2l6ZWRTdGF0ZXx8cT09PWEpJiZudWxsIT09cS5jaGlsZCl7cS5jaGlsZC5yZXR1cm49cTtxPXEuY2hpbGQ7Y29udGludWV9aWYocT09PWEpYnJlYWsgYTtmb3IoO251bGw9PT1xLnNpYmxpbmc7KXtpZihudWxsPT09cS5yZXR1cm58fHEucmV0dXJuPT09YSlicmVhayBhO209PT1xJiYobT1udWxsKTtxPXEucmV0dXJufW09PT1xJiYobT1udWxsKTtxLnNpYmxpbmcucmV0dXJuPXEucmV0dXJuO3E9cS5zaWJsaW5nfX1icmVhaztjYXNlIDE5OmRrKGIsYSk7ZmsoYSk7ZCY0JiZiayhhKTticmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6ZGsoYixcbmEpLGZrKGEpfX1mdW5jdGlvbiBmayhhKXt2YXIgYj1hLmZsYWdzO2lmKGImMil7dHJ5e2E6e2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKFVqKGMpKXt2YXIgZD1jO2JyZWFrIGF9Yz1jLnJldHVybn10aHJvdyBFcnJvcihwKDE2MCkpO31zd2l0Y2goZC50YWcpe2Nhc2UgNTp2YXIgZT1kLnN0YXRlTm9kZTtkLmZsYWdzJjMyJiYob2IoZSxcIlwiKSxkLmZsYWdzJj0tMzMpO3ZhciBmPVZqKGEpO1hqKGEsZixlKTticmVhaztjYXNlIDM6Y2FzZSA0OnZhciBnPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saD1WaihhKTtXaihhLGgsZyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319Y2F0Y2goayl7VyhhLGEucmV0dXJuLGspfWEuZmxhZ3MmPS0zfWImNDA5NiYmKGEuZmxhZ3MmPS00MDk3KX1mdW5jdGlvbiBpayhhLGIsYyl7Vj1hO2prKGEsYixjKX1cbmZ1bmN0aW9uIGprKGEsYixjKXtmb3IodmFyIGQ9MCE9PShhLm1vZGUmMSk7bnVsbCE9PVY7KXt2YXIgZT1WLGY9ZS5jaGlsZDtpZigyMj09PWUudGFnJiZkKXt2YXIgZz1udWxsIT09ZS5tZW1vaXplZFN0YXRlfHxLajtpZighZyl7dmFyIGg9ZS5hbHRlcm5hdGUsaz1udWxsIT09aCYmbnVsbCE9PWgubWVtb2l6ZWRTdGF0ZXx8VTtoPUtqO3ZhciBsPVU7S2o9ZztpZigoVT1rKSYmIWwpZm9yKFY9ZTtudWxsIT09VjspZz1WLGs9Zy5jaGlsZCwyMj09PWcudGFnJiZudWxsIT09Zy5tZW1vaXplZFN0YXRlP2trKGUpOm51bGwhPT1rPyhrLnJldHVybj1nLFY9ayk6a2soZSk7Zm9yKDtudWxsIT09ZjspVj1mLGprKGYsYixjKSxmPWYuc2libGluZztWPWU7S2o9aDtVPWx9bGsoYSxiLGMpfWVsc2UgMCE9PShlLnN1YnRyZWVGbGFncyY4NzcyKSYmbnVsbCE9PWY/KGYucmV0dXJuPWUsVj1mKTpsayhhLGIsYyl9fVxuZnVuY3Rpb24gbGsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXt2YXIgYz1iLmFsdGVybmF0ZTt0cnl7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVfHxSaig1LGIpO2JyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihiLmZsYWdzJjQmJiFVKWlmKG51bGw9PT1jKWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBlPWIuZWxlbWVudFR5cGU9PT1iLnR5cGU/Yy5tZW1vaXplZFByb3BzOkxnKGIudHlwZSxjLm1lbW9pemVkUHJvcHMpO2QuY29tcG9uZW50RGlkVXBkYXRlKGUsYy5tZW1vaXplZFN0YXRlLGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBmPWIudXBkYXRlUXVldWU7bnVsbCE9PWYmJmloKGIsZixkKTticmVhaztjYXNlIDM6dmFyIGc9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09Zyl7Yz1udWxsO2lmKG51bGwhPT1iLmNoaWxkKXN3aXRjaChiLmNoaWxkLnRhZyl7Y2FzZSA1OmM9XG5iLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Yz1iLmNoaWxkLnN0YXRlTm9kZX1paChiLGcsYyl9YnJlYWs7Y2FzZSA1OnZhciBoPWIuc3RhdGVOb2RlO2lmKG51bGw9PT1jJiZiLmZsYWdzJjQpe2M9aDt2YXIgaz1iLm1lbW9pemVkUHJvcHM7c3dpdGNoKGIudHlwZSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjprLmF1dG9Gb2N1cyYmYy5mb2N1cygpO2JyZWFrO2Nhc2UgXCJpbWdcIjprLnNyYyYmKGMuc3JjPWsuc3JjKX19YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWwpe3ZhciBtPWwubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bSl7dmFyIHE9bS5kZWh5ZHJhdGVkO251bGwhPT1xJiZiZChxKX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAyMzpjYXNlIDI1OmJyZWFrO1xuZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO31VfHxiLmZsYWdzJjUxMiYmU2ooYil9Y2F0Y2gocil7VyhiLGIucmV0dXJuLHIpfX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfWM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19ZnVuY3Rpb24gaGsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgYz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1cbmZ1bmN0aW9uIGtrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO3RyeXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dmFyIGM9Yi5yZXR1cm47dHJ5e1JqKDQsYil9Y2F0Y2goayl7VyhiLGMsayl9YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50KXt2YXIgZT1iLnJldHVybjt0cnl7ZC5jb21wb25lbnREaWRNb3VudCgpfWNhdGNoKGspe1coYixlLGspfX12YXIgZj1iLnJldHVybjt0cnl7U2ooYil9Y2F0Y2goayl7VyhiLGYsayl9YnJlYWs7Y2FzZSA1OnZhciBnPWIucmV0dXJuO3RyeXtTaihiKX1jYXRjaChrKXtXKGIsZyxrKX19fWNhdGNoKGspe1coYixiLnJldHVybixrKX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBoPWIuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Yi5yZXR1cm47Vj1oO2JyZWFrfVY9Yi5yZXR1cm59fVxudmFyIG1rPU1hdGguY2VpbCxuaz11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLG9rPXVhLlJlYWN0Q3VycmVudE93bmVyLHBrPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEs9MCxSPW51bGwsWT1udWxsLFo9MCxnaj0wLGZqPVVmKDApLFQ9MCxxaz1udWxsLGhoPTAscms9MCxzaz0wLHRrPW51bGwsdWs9bnVsbCxnaz0wLEhqPUluZmluaXR5LHZrPW51bGwsUGk9ITEsUWk9bnVsbCxTaT1udWxsLHdrPSExLHhrPW51bGwseWs9MCx6az0wLEFrPW51bGwsQms9LTEsQ2s9MDtmdW5jdGlvbiBMKCl7cmV0dXJuIDAhPT0oSyY2KT9CKCk6LTEhPT1Caz9CazpCaz1CKCl9XG5mdW5jdGlvbiBsaChhKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gMTtpZigwIT09KEsmMikmJjAhPT1aKXJldHVybiBaJi1aO2lmKG51bGwhPT1LZy50cmFuc2l0aW9uKXJldHVybiAwPT09Q2smJihDaz15YygpKSxDazthPUM7aWYoMCE9PWEpcmV0dXJuIGE7YT13aW5kb3cuZXZlbnQ7YT12b2lkIDA9PT1hPzE2OmpkKGEudHlwZSk7cmV0dXJuIGF9ZnVuY3Rpb24gbWgoYSxiLGMsZCl7aWYoNTA8emspdGhyb3cgems9MCxBaz1udWxsLEVycm9yKHAoMTg1KSk7QWMoYSxjLGQpO2lmKDA9PT0oSyYyKXx8YSE9PVIpYT09PVImJigwPT09KEsmMikmJihya3w9YyksND09PVQmJkRrKGEsWikpLEVrKGEsZCksMT09PWMmJjA9PT1LJiYwPT09KGIubW9kZSYxKSYmKEhqPUIoKSs1MDAsZmcmJmpnKCkpfVxuZnVuY3Rpb24gRWsoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTm9kZTt3YyhhLGIpO3ZhciBkPXVjKGEsYT09PVI/WjowKTtpZigwPT09ZCludWxsIT09YyYmYmMoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MDtlbHNlIGlmKGI9ZCYtZCxhLmNhbGxiYWNrUHJpb3JpdHkhPT1iKXtudWxsIT1jJiZiYyhjKTtpZigxPT09YikwPT09YS50YWc/aWcoRmsuYmluZChudWxsLGEpKTpoZyhGay5iaW5kKG51bGwsYSkpLEpmKGZ1bmN0aW9uKCl7MD09PShLJjYpJiZqZygpfSksYz1udWxsO2Vsc2V7c3dpdGNoKERjKGQpKXtjYXNlIDE6Yz1mYzticmVhaztjYXNlIDQ6Yz1nYzticmVhaztjYXNlIDE2OmM9aGM7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Yz1qYzticmVhaztkZWZhdWx0OmM9aGN9Yz1HayhjLEhrLmJpbmQobnVsbCxhKSl9YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBIayhhLGIpe0JrPS0xO0NrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7dmFyIGM9YS5jYWxsYmFja05vZGU7aWYoSWsoKSYmYS5jYWxsYmFja05vZGUhPT1jKXJldHVybiBudWxsO3ZhciBkPXVjKGEsYT09PVI/WjowKTtpZigwPT09ZClyZXR1cm4gbnVsbDtpZigwIT09KGQmMzApfHwwIT09KGQmYS5leHBpcmVkTGFuZXMpfHxiKWI9SmsoYSxkKTtlbHNle2I9ZDt2YXIgZT1LO0t8PTI7dmFyIGY9S2soKTtpZihSIT09YXx8WiE9PWIpdms9bnVsbCxIaj1CKCkrNTAwLExrKGEsYik7ZG8gdHJ5e01rKCk7YnJlYWt9Y2F0Y2goaCl7TmsoYSxoKX13aGlsZSgxKTtRZygpO25rLmN1cnJlbnQ9ZjtLPWU7bnVsbCE9PVk/Yj0wOihSPW51bGwsWj0wLGI9VCl9aWYoMCE9PWIpezI9PT1iJiYoZT14YyhhKSwwIT09ZSYmKGQ9ZSxiPU9rKGEsZSkpKTtpZigxPT09Yil0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxkKSxFayhhLEIoKSksYztpZig2PT09YilEayhhLGQpO1xuZWxzZXtlPWEuY3VycmVudC5hbHRlcm5hdGU7aWYoMD09PShkJjMwKSYmIVBrKGUpJiYoYj1KayhhLGQpLDI9PT1iJiYoZj14YyhhKSwwIT09ZiYmKGQ9ZixiPU9rKGEsZikpKSwxPT09YikpdGhyb3cgYz1xayxMayhhLDApLERrKGEsZCksRWsoYSxCKCkpLGM7YS5maW5pc2hlZFdvcms9ZTthLmZpbmlzaGVkTGFuZXM9ZDtzd2l0Y2goYil7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcihwKDM0NSkpO2Nhc2UgMjpRayhhLHVrLHZrKTticmVhaztjYXNlIDM6RGsoYSxkKTtpZigoZCYxMzAwMjM0MjQpPT09ZCYmKGI9Z2srNTAwLUIoKSwxMDxiKSl7aWYoMCE9PXVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmQpIT09ZCl7TCgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9RmYoUWsuYmluZChudWxsLGEsdWssdmspLGIpO2JyZWFrfVFrKGEsdWssdmspO2JyZWFrO2Nhc2UgNDpEayhhLGQpO2lmKChkJjQxOTQyNDApPT09XG5kKWJyZWFrO2I9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8ZDspe3ZhciBnPTMxLW9jKGQpO2Y9MTw8ZztnPWJbZ107Zz5lJiYoZT1nKTtkJj1+Zn1kPWU7ZD1CKCktZDtkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKm1rKGQvMTk2MCkpLWQ7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUZmKFFrLmJpbmQobnVsbCxhLHVrLHZrKSxkKTticmVha31RayhhLHVrLHZrKTticmVhaztjYXNlIDU6UWsoYSx1ayx2ayk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMyOSkpO319fUVrKGEsQigpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1jP0hrLmJpbmQobnVsbCxhKTpudWxsfVxuZnVuY3Rpb24gT2soYSxiKXt2YXIgYz10azthLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJihMayhhLGIpLmZsYWdzfD0yNTYpO2E9SmsoYSxiKTsyIT09YSYmKGI9dWssdWs9YyxudWxsIT09YiYmR2ooYikpO3JldHVybiBhfWZ1bmN0aW9uIEdqKGEpe251bGw9PT11az91az1hOnVrLnB1c2guYXBwbHkodWssYSl9XG5mdW5jdGlvbiBQayhhKXtmb3IodmFyIGI9YTs7KXtpZihiLmZsYWdzJjE2Mzg0KXt2YXIgYz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jJiYoYz1jLnN0b3JlcyxudWxsIT09YykpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj1lLmdldFNuYXBzaG90O2U9ZS52YWx1ZTt0cnl7aWYoIUhlKGYoKSxlKSlyZXR1cm4hMX1jYXRjaChnKXtyZXR1cm4hMX19fWM9Yi5jaGlsZDtpZihiLnN1YnRyZWVGbGFncyYxNjM4NCYmbnVsbCE9PWMpYy5yZXR1cm49YixiPWM7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4hMDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiEwfVxuZnVuY3Rpb24gRGsoYSxiKXtiJj1+c2s7YiY9fnJrO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtb2MoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fWZ1bmN0aW9uIEZrKGEpe2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO0lrKCk7dmFyIGI9dWMoYSwwKTtpZigwPT09KGImMSkpcmV0dXJuIEVrKGEsQigpKSxudWxsO3ZhciBjPUprKGEsYik7aWYoMCE9PWEudGFnJiYyPT09Yyl7dmFyIGQ9eGMoYSk7MCE9PWQmJihiPWQsYz1PayhhLGQpKX1pZigxPT09Yyl0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxiKSxFayhhLEIoKSksYztpZig2PT09Yyl0aHJvdyBFcnJvcihwKDM0NSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7UWsoYSx1ayx2ayk7RWsoYSxCKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUmsoYSxiKXt2YXIgYz1LO0t8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Sz1jLDA9PT1LJiYoSGo9QigpKzUwMCxmZyYmamcoKSl9fWZ1bmN0aW9uIFNrKGEpe251bGwhPT14ayYmMD09PXhrLnRhZyYmMD09PShLJjYpJiZJaygpO3ZhciBiPUs7S3w9MTt2YXIgYz1way50cmFuc2l0aW9uLGQ9Qzt0cnl7aWYocGsudHJhbnNpdGlvbj1udWxsLEM9MSxhKXJldHVybiBhKCl9ZmluYWxseXtDPWQscGsudHJhbnNpdGlvbj1jLEs9YiwwPT09KEsmNikmJmpnKCl9fWZ1bmN0aW9uIElqKCl7Z2o9ZmouY3VycmVudDtFKGZqKX1cbmZ1bmN0aW9uIExrKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLEdmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7d2coZCk7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJiRmKCk7YnJlYWs7Y2FzZSAzOkpoKCk7RShXZik7RShIKTtPaCgpO2JyZWFrO2Nhc2UgNTpMaChkKTticmVhaztjYXNlIDQ6SmgoKTticmVhaztjYXNlIDEzOkUoTSk7YnJlYWs7Y2FzZSAxOTpFKE0pO2JyZWFrO2Nhc2UgMTA6UmcoZC50eXBlLl9jb250ZXh0KTticmVhaztjYXNlIDIyOmNhc2UgMjM6SWooKX1jPWMucmV0dXJufVI9YTtZPWE9d2goYS5jdXJyZW50LG51bGwpO1o9Z2o9YjtUPTA7cWs9bnVsbDtzaz1yaz1oaD0wO3VrPXRrPW51bGw7aWYobnVsbCE9PVdnKXtmb3IoYj1cbjA7YjxXZy5sZW5ndGg7YisrKWlmKGM9V2dbYl0sZD1jLmludGVybGVhdmVkLG51bGwhPT1kKXtjLmludGVybGVhdmVkPW51bGw7dmFyIGU9ZC5uZXh0LGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXt2YXIgZz1mLm5leHQ7Zi5uZXh0PWU7ZC5uZXh0PWd9Yy5wZW5kaW5nPWR9V2c9bnVsbH1yZXR1cm4gYX1cbmZ1bmN0aW9uIE5rKGEsYil7ZG97dmFyIGM9WTt0cnl7UWcoKTtQaC5jdXJyZW50PWFpO2lmKFNoKXtmb3IodmFyIGQ9Ti5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH1TaD0hMX1SaD0wO1A9Tz1OPW51bGw7VGg9ITE7VWg9MDtvay5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7VD0xO3FrPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9WjtoLmZsYWdzfD0zMjc2ODtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rLG09aCxxPW0udGFnO2lmKDA9PT0obS5tb2RlJjEpJiYoMD09PXF8fDExPT09cXx8MTU9PT1xKSl7dmFyIHI9bS5hbHRlcm5hdGU7cj8obS51cGRhdGVRdWV1ZT1yLnVwZGF0ZVF1ZXVlLG0ubWVtb2l6ZWRTdGF0ZT1yLm1lbW9pemVkU3RhdGUsXG5tLmxhbmVzPXIubGFuZXMpOihtLnVwZGF0ZVF1ZXVlPW51bGwsbS5tZW1vaXplZFN0YXRlPW51bGwpfXZhciB5PVZpKGcpO2lmKG51bGwhPT15KXt5LmZsYWdzJj0tMjU3O1dpKHksZyxoLGYsYik7eS5tb2RlJjEmJlRpKGYsbCxiKTtiPXk7az1sO3ZhciBuPWIudXBkYXRlUXVldWU7aWYobnVsbD09PW4pe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7Yi51cGRhdGVRdWV1ZT10fWVsc2Ugbi5hZGQoayk7YnJlYWsgYX1lbHNle2lmKDA9PT0oYiYxKSl7VGkoZixsLGIpO3VqKCk7YnJlYWsgYX1rPUVycm9yKHAoNDI2KSl9fWVsc2UgaWYoSSYmaC5tb2RlJjEpe3ZhciBKPVZpKGcpO2lmKG51bGwhPT1KKXswPT09KEouZmxhZ3MmNjU1MzYpJiYoSi5mbGFnc3w9MjU2KTtXaShKLGcsaCxmLGIpO0pnKEtpKGssaCkpO2JyZWFrIGF9fWY9az1LaShrLGgpOzQhPT1UJiYoVD0yKTtudWxsPT09dGs/dGs9W2ZdOnRrLnB1c2goZik7Zj1nO2Rve3N3aXRjaChmLnRhZyl7Y2FzZSAzOmYuZmxhZ3N8PTY1NTM2O1xuYiY9LWI7Zi5sYW5lc3w9Yjt2YXIgeD1PaShmLGssYik7ZmgoZix4KTticmVhayBhO2Nhc2UgMTpoPWs7dmFyIHc9Zi50eXBlLHU9Zi5zdGF0ZU5vZGU7aWYoMD09PShmLmZsYWdzJjEyOCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TaXx8IVNpLmhhcyh1KSkpKXtmLmZsYWdzfD02NTUzNjtiJj0tYjtmLmxhbmVzfD1iO3ZhciBGPVJpKGYsaCxiKTtmaChmLEYpO2JyZWFrIGF9fWY9Zi5yZXR1cm59d2hpbGUobnVsbCE9PWYpfVRrKGMpfWNhdGNoKG5hKXtiPW5hO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gS2soKXt2YXIgYT1uay5jdXJyZW50O25rLmN1cnJlbnQ9YWk7cmV0dXJuIG51bGw9PT1hP2FpOmF9XG5mdW5jdGlvbiB1aigpe2lmKDA9PT1UfHwzPT09VHx8Mj09PVQpVD00O251bGw9PT1SfHwwPT09KGhoJjI2ODQzNTQ1NSkmJjA9PT0ocmsmMjY4NDM1NDU1KXx8RGsoUixaKX1mdW5jdGlvbiBKayhhLGIpe3ZhciBjPUs7S3w9Mjt2YXIgZD1LaygpO2lmKFIhPT1hfHxaIT09Yil2az1udWxsLExrKGEsYik7ZG8gdHJ5e1VrKCk7YnJlYWt9Y2F0Y2goZSl7TmsoYSxlKX13aGlsZSgxKTtRZygpO0s9Yztuay5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IocCgyNjEpKTtSPW51bGw7Wj0wO3JldHVybiBUfWZ1bmN0aW9uIFVrKCl7Zm9yKDtudWxsIT09WTspVmsoWSl9ZnVuY3Rpb24gTWsoKXtmb3IoO251bGwhPT1ZJiYhY2MoKTspVmsoWSl9ZnVuY3Rpb24gVmsoYSl7dmFyIGI9V2soYS5hbHRlcm5hdGUsYSxnaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1RrKGEpOlk9Yjtvay5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBUayhhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjMyNzY4KSl7aWYoYz1GaihjLGIsZ2opLG51bGwhPT1jKXtZPWM7cmV0dXJufX1lbHNle2M9SmooYyxiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MzI3Njc7WT1jO3JldHVybn1pZihudWxsIT09YSlhLmZsYWdzfD0zMjc2OCxhLnN1YnRyZWVGbGFncz0wLGEuZGVsZXRpb25zPW51bGw7ZWxzZXtUPTY7WT1udWxsO3JldHVybn19Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1UJiYoVD01KX1mdW5jdGlvbiBRayhhLGIsYyl7dmFyIGQ9QyxlPXBrLnRyYW5zaXRpb247dHJ5e3BrLnRyYW5zaXRpb249bnVsbCxDPTEsWGsoYSxiLGMsZCl9ZmluYWxseXtway50cmFuc2l0aW9uPWUsQz1kfXJldHVybiBudWxsfVxuZnVuY3Rpb24gWGsoYSxiLGMsZCl7ZG8gSWsoKTt3aGlsZShudWxsIT09eGspO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO2M9YS5maW5pc2hlZFdvcms7dmFyIGU9YS5maW5pc2hlZExhbmVzO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcihwKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja1ByaW9yaXR5PTA7dmFyIGY9Yy5sYW5lc3xjLmNoaWxkTGFuZXM7QmMoYSxmKTthPT09UiYmKFk9Uj1udWxsLFo9MCk7MD09PShjLnN1YnRyZWVGbGFncyYyMDY0KSYmMD09PShjLmZsYWdzJjIwNjQpfHx3a3x8KHdrPSEwLEdrKGhjLGZ1bmN0aW9uKCl7SWsoKTtyZXR1cm4gbnVsbH0pKTtmPTAhPT0oYy5mbGFncyYxNTk5MCk7aWYoMCE9PShjLnN1YnRyZWVGbGFncyYxNTk5MCl8fGYpe2Y9cGsudHJhbnNpdGlvbjtway50cmFuc2l0aW9uPW51bGw7XG52YXIgZz1DO0M9MTt2YXIgaD1LO0t8PTQ7b2suY3VycmVudD1udWxsO1BqKGEsYyk7ZWsoYyxhKTtPZShEZik7ZGQ9ISFDZjtEZj1DZj1udWxsO2EuY3VycmVudD1jO2lrKGMsYSxlKTtkYygpO0s9aDtDPWc7cGsudHJhbnNpdGlvbj1mfWVsc2UgYS5jdXJyZW50PWM7d2smJih3az0hMSx4az1hLHlrPWUpO2Y9YS5wZW5kaW5nTGFuZXM7MD09PWYmJihTaT1udWxsKTttYyhjLnN0YXRlTm9kZSxkKTtFayhhLEIoKSk7aWYobnVsbCE9PWIpZm9yKGQ9YS5vblJlY292ZXJhYmxlRXJyb3IsYz0wO2M8Yi5sZW5ndGg7YysrKWU9YltjXSxkKGUudmFsdWUse2NvbXBvbmVudFN0YWNrOmUuc3RhY2ssZGlnZXN0OmUuZGlnZXN0fSk7aWYoUGkpdGhyb3cgUGk9ITEsYT1RaSxRaT1udWxsLGE7MCE9PSh5ayYxKSYmMCE9PWEudGFnJiZJaygpO2Y9YS5wZW5kaW5nTGFuZXM7MCE9PShmJjEpP2E9PT1Baz96aysrOih6az0wLEFrPWEpOnprPTA7amcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIElrKCl7aWYobnVsbCE9PXhrKXt2YXIgYT1EYyh5ayksYj1way50cmFuc2l0aW9uLGM9Qzt0cnl7cGsudHJhbnNpdGlvbj1udWxsO0M9MTY+YT8xNjphO2lmKG51bGw9PT14ayl2YXIgZD0hMTtlbHNle2E9eGs7eGs9bnVsbDt5az0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMzMSkpO3ZhciBlPUs7S3w9NDtmb3IoVj1hLmN1cnJlbnQ7bnVsbCE9PVY7KXt2YXIgZj1WLGc9Zi5jaGlsZDtpZigwIT09KFYuZmxhZ3MmMTYpKXt2YXIgaD1mLmRlbGV0aW9ucztpZihudWxsIT09aCl7Zm9yKHZhciBrPTA7azxoLmxlbmd0aDtrKyspe3ZhciBsPWhba107Zm9yKFY9bDtudWxsIT09Vjspe3ZhciBtPVY7c3dpdGNoKG0udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDgsbSxmKX12YXIgcT1tLmNoaWxkO2lmKG51bGwhPT1xKXEucmV0dXJuPW0sVj1xO2Vsc2UgZm9yKDtudWxsIT09Vjspe209Vjt2YXIgcj1tLnNpYmxpbmcseT1tLnJldHVybjtUaihtKTtpZihtPT09XG5sKXtWPW51bGw7YnJlYWt9aWYobnVsbCE9PXIpe3IucmV0dXJuPXk7Vj1yO2JyZWFrfVY9eX19fXZhciBuPWYuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXt2YXIgdD1uLmNoaWxkO2lmKG51bGwhPT10KXtuLmNoaWxkPW51bGw7ZG97dmFyIEo9dC5zaWJsaW5nO3Quc2libGluZz1udWxsO3Q9Sn13aGlsZShudWxsIT09dCl9fVY9Zn19aWYoMCE9PShmLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PWcpZy5yZXR1cm49ZixWPWc7ZWxzZSBiOmZvcig7bnVsbCE9PVY7KXtmPVY7aWYoMCE9PShmLmZsYWdzJjIwNDgpKXN3aXRjaChmLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig5LGYsZi5yZXR1cm4pfXZhciB4PWYuc2libGluZztpZihudWxsIT09eCl7eC5yZXR1cm49Zi5yZXR1cm47Vj14O2JyZWFrIGJ9Vj1mLnJldHVybn19dmFyIHc9YS5jdXJyZW50O2ZvcihWPXc7bnVsbCE9PVY7KXtnPVY7dmFyIHU9Zy5jaGlsZDtpZigwIT09KGcuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09XG51KXUucmV0dXJuPWcsVj11O2Vsc2UgYjpmb3IoZz13O251bGwhPT1WOyl7aD1WO2lmKDAhPT0oaC5mbGFncyYyMDQ4KSl0cnl7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlJqKDksaCl9fWNhdGNoKG5hKXtXKGgsaC5yZXR1cm4sbmEpfWlmKGg9PT1nKXtWPW51bGw7YnJlYWsgYn12YXIgRj1oLnNpYmxpbmc7aWYobnVsbCE9PUYpe0YucmV0dXJuPWgucmV0dXJuO1Y9RjticmVhayBifVY9aC5yZXR1cm59fUs9ZTtqZygpO2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Qb3N0Q29tbWl0RmliZXJSb290KXRyeXtsYy5vblBvc3RDb21taXRGaWJlclJvb3Qoa2MsYSl9Y2F0Y2gobmEpe31kPSEwfXJldHVybiBkfWZpbmFsbHl7Qz1jLHBrLnRyYW5zaXRpb249Yn19cmV0dXJuITF9ZnVuY3Rpb24gWWsoYSxiLGMpe2I9S2koYyxiKTtiPU9pKGEsYiwxKTthPWRoKGEsYiwxKTtiPUwoKTtudWxsIT09YSYmKEFjKGEsMSxiKSxFayhhLGIpKX1cbmZ1bmN0aW9uIFcoYSxiLGMpe2lmKDM9PT1hLnRhZylZayhhLGEsYyk7ZWxzZSBmb3IoO251bGwhPT1iOyl7aWYoMz09PWIudGFnKXtZayhiLGEsYyk7YnJlYWt9ZWxzZSBpZigxPT09Yi50YWcpe3ZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TaXx8IVNpLmhhcyhkKSkpe2E9S2koYyxhKTthPVJpKGIsYSwxKTtiPWRoKGIsYSwxKTthPUwoKTtudWxsIT09YiYmKEFjKGIsMSxhKSxFayhiLGEpKTticmVha319Yj1iLnJldHVybn19XG5mdW5jdGlvbiBVaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9TCgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztSPT09YSYmKFomYyk9PT1jJiYoND09PVR8fDM9PT1UJiYoWiYxMzAwMjM0MjQpPT09WiYmNTAwPkIoKS1naz9MayhhLDApOnNrfD1jKTtFayhhLGIpfWZ1bmN0aW9uIFprKGEsYil7MD09PWImJigwPT09KGEubW9kZSYxKT9iPTE6KGI9c2Msc2M8PD0xLDA9PT0oc2MmMTMwMDIzNDI0KSYmKHNjPTQxOTQzMDQpKSk7dmFyIGM9TCgpO2E9WmcoYSxiKTtudWxsIT09YSYmKEFjKGEsYixjKSxFayhhLGMpKX1mdW5jdGlvbiB2aihhKXt2YXIgYj1hLm1lbW9pemVkU3RhdGUsYz0wO251bGwhPT1iJiYoYz1iLnJldHJ5TGFuZSk7WmsoYSxjKX1cbmZ1bmN0aW9uIGNrKGEsYil7dmFyIGM9MDtzd2l0Y2goYS50YWcpe2Nhc2UgMTM6dmFyIGQ9YS5zdGF0ZU5vZGU7dmFyIGU9YS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoYz1lLnJldHJ5TGFuZSk7YnJlYWs7Y2FzZSAxOTpkPWEuc3RhdGVOb2RlO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMTQpKTt9bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1prKGEsYyl9dmFyIFdrO1xuV2s9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxXZi5jdXJyZW50KVVnPSEwO2Vsc2V7aWYoMD09PShhLmxhbmVzJmMpJiYwPT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gVWc9ITEsemooYSxiLGMpO1VnPTAhPT0oYS5mbGFncyYxMzEwNzIpPyEwOiExfWVsc2UgVWc9ITEsSSYmMCE9PShiLmZsYWdzJjEwNDg1NzYpJiZ1ZyhiLG5nLGIuaW5kZXgpO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgZD1iLnR5cGU7amooYSxiKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPVlmKGIsSC5jdXJyZW50KTtUZyhiLGMpO2U9WGgobnVsbCxiLGQsYSxlLGMpO3ZhciBmPWJpKCk7Yi5mbGFnc3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Y/KGIudGFnPTEsYi5tZW1vaXplZFN0YXRlPW51bGwsYi51cGRhdGVRdWV1ZT1cbm51bGwsWmYoZCk/KGY9ITAsY2coYikpOmY9ITEsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbCxhaChiKSxlLnVwZGF0ZXI9bmgsYi5zdGF0ZU5vZGU9ZSxlLl9yZWFjdEludGVybmFscz1iLHJoKGIsZCxhLGMpLGI9a2oobnVsbCxiLGQsITAsZixjKSk6KGIudGFnPTAsSSYmZiYmdmcoYiksWWkobnVsbCxiLGUsYyksYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE2OmQ9Yi5lbGVtZW50VHlwZTthOntqaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1kLl9pbml0O2Q9ZShkLl9wYXlsb2FkKTtiLnR5cGU9ZDtlPWIudGFnPSRrKGQpO2E9TGcoZCxhKTtzd2l0Y2goZSl7Y2FzZSAwOmI9ZGoobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTpiPWlqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmkobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haihudWxsLGIsZCxMZyhkLnR5cGUsYSksYyk7YnJlYWsgYX10aHJvdyBFcnJvcihwKDMwNixcbmQsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksZGooYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksaWooYSxiLGQsZSxjKTtjYXNlIDM6YTp7bGooYik7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzODcpKTtkPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFN0YXRlO2U9Zi5lbGVtZW50O2JoKGEsYik7Z2goYixkLG51bGwsYyk7dmFyIGc9Yi5tZW1vaXplZFN0YXRlO2Q9Zy5lbGVtZW50O2lmKGYuaXNEZWh5ZHJhdGVkKWlmKGY9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6ITEsY2FjaGU6Zy5jYWNoZSxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOmcucGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfSxiLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1cbmYsYi5tZW1vaXplZFN0YXRlPWYsYi5mbGFncyYyNTYpe2U9S2koRXJyb3IocCg0MjMpKSxiKTtiPW1qKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGlmKGQhPT1lKXtlPUtpKEVycm9yKHAoNDI0KSksYik7Yj1taihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBmb3IoeWc9TGYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSx4Zz1iLEk9ITAsemc9bnVsbCxjPUNoKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8NDA5NixjPWMuc2libGluZztlbHNle0lnKCk7aWYoZD09PWUpe2I9JGkoYSxiLGMpO2JyZWFrIGF9WWkoYSxiLGQsYyl9Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gS2goYiksbnVsbD09PWEmJkVnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sRWYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkVmKGQsZikmJihiLmZsYWdzfD0zMiksXG5oaihhLGIpLFlpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmRWcoYiksbnVsbDtjYXNlIDEzOnJldHVybiBwaihhLGIsYyk7Y2FzZSA0OnJldHVybiBJaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1CaChiLG51bGwsZCxjKTpZaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksWmkoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFByb3BzO1xuZz1lLnZhbHVlO0coTWcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZztpZihudWxsIT09ZilpZihIZShmLnZhbHVlLGcpKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIVdmLmN1cnJlbnQpe2I9JGkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGY9Yi5jaGlsZCxudWxsIT09ZiYmKGYucmV0dXJuPWIpO251bGwhPT1mOyl7dmFyIGg9Zi5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWgpe2c9Zi5jaGlsZDtmb3IodmFyIGs9aC5maXJzdENvbnRleHQ7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kKXtpZigxPT09Zi50YWcpe2s9Y2goLTEsYyYtYyk7ay50YWc9Mjt2YXIgbD1mLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sKXtsPWwuc2hhcmVkO3ZhciBtPWwucGVuZGluZztudWxsPT09bT9rLm5leHQ9azooay5uZXh0PW0ubmV4dCxtLm5leHQ9ayk7bC5wZW5kaW5nPWt9fWYubGFuZXN8PWM7az1mLmFsdGVybmF0ZTtudWxsIT09ayYmKGsubGFuZXN8PWMpO1NnKGYucmV0dXJuLFxuYyxiKTtoLmxhbmVzfD1jO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGlmKDEwPT09Zi50YWcpZz1mLnR5cGU9PT1iLnR5cGU/bnVsbDpmLmNoaWxkO2Vsc2UgaWYoMTg9PT1mLnRhZyl7Zz1mLnJldHVybjtpZihudWxsPT09Zyl0aHJvdyBFcnJvcihwKDM0MSkpO2cubGFuZXN8PWM7aD1nLmFsdGVybmF0ZTtudWxsIT09aCYmKGgubGFuZXN8PWMpO1NnKGcsYyxiKTtnPWYuc2libGluZ31lbHNlIGc9Zi5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1mO2Vsc2UgZm9yKGc9ZjtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9Zj1nLnNpYmxpbmc7aWYobnVsbCE9PWYpe2YucmV0dXJuPWcucmV0dXJuO2c9ZjticmVha31nPWcucmV0dXJufWY9Z31ZaShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxkPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFRnKGIsYyksZT1WZyhlKSxkPWQoZSksYi5mbGFnc3w9MSxZaShhLGIsZCxjKSxcbmIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZD1iLnR5cGUsZT1MZyhkLGIucGVuZGluZ1Byb3BzKSxlPUxnKGQudHlwZSxlKSxhaihhLGIsZCxlLGMpO2Nhc2UgMTU6cmV0dXJuIGNqKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxqaihhLGIpLGIudGFnPTEsWmYoZCk/KGE9ITAsY2coYikpOmE9ITEsVGcoYixjKSxwaChiLGQsZSkscmgoYixkLGUsYyksa2oobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiB5aihhLGIsYyk7Y2FzZSAyMjpyZXR1cm4gZWooYSxiLGMpfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fTtmdW5jdGlvbiBHayhhLGIpe3JldHVybiBhYyhhLGIpfVxuZnVuY3Rpb24gYWwoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLnN1YnRyZWVGbGFncz10aGlzLmZsYWdzPTA7dGhpcy5kZWxldGlvbnM9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gQmcoYSxiLGMsZCl7cmV0dXJuIG5ldyBhbChhLGIsYyxkKX1mdW5jdGlvbiBiaihhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gJGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGJqKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1EYSlyZXR1cm4gMTE7aWYoYT09PUdhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIHdoKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9QmcoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5zdWJ0cmVlRmxhZ3M9MCxjLmRlbGV0aW9ucz1udWxsKTtjLmZsYWdzPWEuZmxhZ3MmMTQ2ODAwNjQ7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHloKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaihhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm4gQWgoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSB6YTpnPTg7ZXw9ODticmVhaztjYXNlIEFhOnJldHVybiBhPUJnKDEyLGMsYixlfDIpLGEuZWxlbWVudFR5cGU9QWEsYS5sYW5lcz1mLGE7Y2FzZSBFYTpyZXR1cm4gYT1CZygxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1FYSxhLmxhbmVzPWYsYTtjYXNlIEZhOnJldHVybiBhPUJnKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUZhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHFqKGMsZSxmLGIpO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBCYTpnPTEwO2JyZWFrIGE7Y2FzZSBDYTpnPTk7YnJlYWsgYTtjYXNlIERhOmc9MTE7XG5icmVhayBhO2Nhc2UgR2E6Zz0xNDticmVhayBhO2Nhc2UgSGE6Zz0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyBFcnJvcihwKDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPUJnKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT1CZyg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gcWooYSxiLGMsZCl7YT1CZygyMixhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7YS5zdGF0ZU5vZGU9e2lzSGlkZGVuOiExfTtyZXR1cm4gYX1mdW5jdGlvbiB4aChhLGIsYyl7YT1CZyg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiB6aChhLGIsYyl7Yj1CZyg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGJsKGEsYixjLGQsZSl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9emMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9emMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9emMoMCk7dGhpcy5pZGVudGlmaWVyUHJlZml4PWQ7dGhpcy5vblJlY292ZXJhYmxlRXJyb3I9ZTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9XG5udWxsfWZ1bmN0aW9uIGNsKGEsYixjLGQsZSxmLGcsaCxrKXthPW5ldyBibChhLGIsYyxoLGspOzE9PT1iPyhiPTEsITA9PT1mJiYoYnw9OCkpOmI9MDtmPUJnKDMsbnVsbCxudWxsLGIpO2EuY3VycmVudD1mO2Yuc3RhdGVOb2RlPWE7Zi5tZW1vaXplZFN0YXRlPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOmMsY2FjaGU6bnVsbCx0cmFuc2l0aW9uczpudWxsLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6bnVsbH07YWgoZik7cmV0dXJuIGF9ZnVuY3Rpb24gZGwoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp3YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGVsKGEpe2lmKCFhKXJldHVybiBWZjthPWEuX3JlYWN0SW50ZXJuYWxzO2E6e2lmKFZiKGEpIT09YXx8MSE9PWEudGFnKXRocm93IEVycm9yKHAoMTcwKSk7dmFyIGI9YTtkb3tzd2l0Y2goYi50YWcpe2Nhc2UgMzpiPWIuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYTtjYXNlIDE6aWYoWmYoYi50eXBlKSl7Yj1iLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBhfX1iPWIucmV0dXJufXdoaWxlKG51bGwhPT1iKTt0aHJvdyBFcnJvcihwKDE3MSkpO31pZigxPT09YS50YWcpe3ZhciBjPWEudHlwZTtpZihaZihjKSlyZXR1cm4gYmcoYSxjLGIpfXJldHVybiBifVxuZnVuY3Rpb24gZmwoYSxiLGMsZCxlLGYsZyxoLGspe2E9Y2woYyxkLCEwLGEsZSxmLGcsaCxrKTthLmNvbnRleHQ9ZWwobnVsbCk7Yz1hLmN1cnJlbnQ7ZD1MKCk7ZT1saChjKTtmPWNoKGQsZSk7Zi5jYWxsYmFjaz12b2lkIDAhPT1iJiZudWxsIT09Yj9iOm51bGw7ZGgoYyxmLGUpO2EuY3VycmVudC5sYW5lcz1lO0FjKGEsZSxkKTtFayhhLGQpO3JldHVybiBhfWZ1bmN0aW9uIGdsKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUwoKSxnPWxoKGUpO2M9ZWwoYyk7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1jaChmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTthPWRoKGUsYixnKTtudWxsIT09YSYmKG1oKGEsZSxnLGYpLGVoKGEsZSxnKSk7cmV0dXJuIGd9XG5mdW5jdGlvbiBobChhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGlsKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBqbChhLGIpe2lsKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZpbChhLGIpfWZ1bmN0aW9uIGtsKCl7cmV0dXJuIG51bGx9dmFyIGxsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXBvcnRFcnJvcj9yZXBvcnRFcnJvcjpmdW5jdGlvbihhKXtjb25zb2xlLmVycm9yKGEpfTtmdW5jdGlvbiBtbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm5sLnByb3RvdHlwZS5yZW5kZXI9bWwucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCg0MDkpKTtnbChhLGIsbnVsbCxudWxsKX07bmwucHJvdG90eXBlLnVubW91bnQ9bWwucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbCE9PWEpe3RoaXMuX2ludGVybmFsUm9vdD1udWxsO3ZhciBiPWEuY29udGFpbmVySW5mbztTayhmdW5jdGlvbigpe2dsKG51bGwsYSxudWxsLG51bGwpfSk7Ylt1Zl09bnVsbH19O2Z1bmN0aW9uIG5sKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubmwucHJvdG90eXBlLnVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uPWZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBiPUhjKCk7YT17YmxvY2tlZE9uOm51bGwsdGFyZ2V0OmEscHJpb3JpdHk6Yn07Zm9yKHZhciBjPTA7YzxRYy5sZW5ndGgmJjAhPT1iJiZiPFFjW2NdLnByaW9yaXR5O2MrKyk7UWMuc3BsaWNlKGMsMCxhKTswPT09YyYmVmMoYSl9fTtmdW5jdGlvbiBvbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSl9ZnVuY3Rpb24gcGwoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIHFsKCl7fVxuZnVuY3Rpb24gcmwoYSxiLGMsZCxlKXtpZihlKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGY9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9aGwoZyk7Zi5jYWxsKGEpfX12YXIgZz1mbChiLGQsYSwwLG51bGwsITEsITEsXCJcIixxbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWc7YVt1Zl09Zy5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtTaygpO3JldHVybiBnfWZvcig7ZT1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChlKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGg9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9aGwoayk7aC5jYWxsKGEpfX12YXIgaz1jbChhLDAsITEsbnVsbCxudWxsLCExLCExLFwiXCIscWwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1rO2FbdWZdPWsuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7U2soZnVuY3Rpb24oKXtnbChiLGssYyxkKX0pO3JldHVybiBrfVxuZnVuY3Rpb24gc2woYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9ZjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9aGwoZyk7aC5jYWxsKGEpfX1nbChiLGcsYSxlKX1lbHNlIGc9cmwoYyxiLGEsZSxkKTtyZXR1cm4gaGwoZyl9RWM9ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDM6dmFyIGI9YS5zdGF0ZU5vZGU7aWYoYi5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXt2YXIgYz10YyhiLnBlbmRpbmdMYW5lcyk7MCE9PWMmJihDYyhiLGN8MSksRWsoYixCKCkpLDA9PT0oSyY2KSYmKEhqPUIoKSs1MDAsamcoKSkpfWJyZWFrO2Nhc2UgMTM6U2soZnVuY3Rpb24oKXt2YXIgYj1aZyhhLDEpO2lmKG51bGwhPT1iKXt2YXIgYz1MKCk7bWgoYixhLDEsYyl9fSksamwoYSwxKX19O1xuRmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9WmcoYSwxMzQyMTc3MjgpO2lmKG51bGwhPT1iKXt2YXIgYz1MKCk7bWgoYixhLDEzNDIxNzcyOCxjKX1qbChhLDEzNDIxNzcyOCl9fTtHYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1saChhKSxjPVpnKGEsYik7aWYobnVsbCE9PWMpe3ZhciBkPUwoKTttaChjLGEsYixkKX1qbChhLGIpfX07SGM9ZnVuY3Rpb24oKXtyZXR1cm4gQ307SWM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1DO3RyeXtyZXR1cm4gQz1hLGIoKX1maW5hbGx5e0M9Y319O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpiYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IocCg5MCkpO1dhKGQpO2JiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1SaztIYj1TaztcbnZhciB0bD17dXNpbmdDbGllbnRFbnRyeVBvaW50OiExLEV2ZW50czpbQ2IsdWUsRGIsRWIsRmIsUmtdfSx1bD17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6V2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxOC4yLjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHZsPXtidW5kbGVUeXBlOnVsLmJ1bmRsZVR5cGUsdmVyc2lvbjp1bC52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6dWwucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp1bC5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0RXJyb3JIYW5kbGVyOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjp1YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9WmIoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnVsLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbmtsLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGwscmVjb25jaWxlclZlcnNpb246XCIxOC4yLjAtbmV4dC05ZTNiNzcyYjgtMjAyMjA2MDhcIn07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB3bD1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXdsLmlzRGlzYWJsZWQmJndsLnN1cHBvcnRzRmliZXIpdHJ5e2tjPXdsLmluamVjdCh2bCksbGM9d2x9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXRsO1xuZXhwb3J0cy5jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighb2woYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gZGwoYSxiLG51bGwsYyl9O2V4cG9ydHMuY3JlYXRlUm9vdD1mdW5jdGlvbihhLGIpe2lmKCFvbChhKSl0aHJvdyBFcnJvcihwKDI5OSkpO3ZhciBjPSExLGQ9XCJcIixlPWxsO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoITA9PT1iLnVuc3RhYmxlX3N0cmljdE1vZGUmJihjPSEwKSx2b2lkIDAhPT1iLmlkZW50aWZpZXJQcmVmaXgmJihkPWIuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yi5vblJlY292ZXJhYmxlRXJyb3ImJihlPWIub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1jbChhLDEsITEsbnVsbCxudWxsLGMsITEsZCxlKTthW3VmXT1iLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO3JldHVybiBuZXcgbWwoYil9O1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcihwKDE4OCkpO2E9T2JqZWN0LmtleXMoYSkuam9pbihcIixcIik7dGhyb3cgRXJyb3IocCgyNjgsYSkpO31hPVpiKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSl7cmV0dXJuIFNrKGEpfTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFwbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLmh5ZHJhdGVSb290PWZ1bmN0aW9uKGEsYixjKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCg0MDUpKTt2YXIgZD1udWxsIT1jJiZjLmh5ZHJhdGVkU291cmNlc3x8bnVsbCxlPSExLGY9XCJcIixnPWxsO251bGwhPT1jJiZ2b2lkIDAhPT1jJiYoITA9PT1jLnVuc3RhYmxlX3N0cmljdE1vZGUmJihlPSEwKSx2b2lkIDAhPT1jLmlkZW50aWZpZXJQcmVmaXgmJihmPWMuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yy5vblJlY292ZXJhYmxlRXJyb3ImJihnPWMub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1mbChiLG51bGwsYSwxLG51bGwhPWM/YzpudWxsLGUsITEsZixnKTthW3VmXT1iLmN1cnJlbnQ7c2YoYSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWM9ZFthXSxlPWMuX2dldFZlcnNpb24sZT1lKGMuX3NvdXJjZSksbnVsbD09Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2IubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYyxlXTpiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChjLFxuZSk7cmV0dXJuIG5ldyBubChiKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFwbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFwbChhKSl0aHJvdyBFcnJvcihwKDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oU2soZnVuY3Rpb24oKXtzbChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbdWZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1SaztcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXBsKGMpKXRocm93IEVycm9yKHAoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IocCgzOCkpO3JldHVybiBzbChhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMi4wLW5leHQtOWUzYjc3MmI4LTIwMjIwNjA4XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBtLmNyZWF0ZVJvb3Q7XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBtLmh5ZHJhdGVSb290O1xufSBlbHNlIHtcbiAgdmFyIGkgPSBtLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBmdW5jdGlvbihjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIGgsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmh5ZHJhdGVSb290KGMsIGgsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYj1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxjPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIiksZD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksZT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksZj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksZz1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksaD1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxrPVN5bWJvbC5mb3IoXCJyZWFjdC5zZXJ2ZXJfY29udGV4dFwiKSxsPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxtPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLHA9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIikscT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKSx0PVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIiksdTt1PVN5bWJvbC5mb3IoXCJyZWFjdC5tb2R1bGUucmVmZXJlbmNlXCIpO1xuZnVuY3Rpb24gdihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgcj1hLiQkdHlwZW9mO3N3aXRjaChyKXtjYXNlIGI6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgZDpjYXNlIGY6Y2FzZSBlOmNhc2UgbTpjYXNlIG46cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIGg6Y2FzZSBsOmNhc2UgcTpjYXNlIHA6Y2FzZSBnOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHJ9fWNhc2UgYzpyZXR1cm4gcn19fWV4cG9ydHMuQ29udGV4dENvbnN1bWVyPWg7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9ZztleHBvcnRzLkVsZW1lbnQ9YjtleHBvcnRzLkZvcndhcmRSZWY9bDtleHBvcnRzLkZyYWdtZW50PWQ7ZXhwb3J0cy5MYXp5PXE7ZXhwb3J0cy5NZW1vPXA7ZXhwb3J0cy5Qb3J0YWw9YztleHBvcnRzLlByb2ZpbGVyPWY7ZXhwb3J0cy5TdHJpY3RNb2RlPWU7ZXhwb3J0cy5TdXNwZW5zZT1tO1xuZXhwb3J0cy5TdXNwZW5zZUxpc3Q9bjtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09aH07ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWd9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1ifTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWx9O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWR9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09cX07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1wfTtcbmV4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1jfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1mfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWV9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PW19O2V4cG9ydHMuaXNTdXNwZW5zZUxpc3Q9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1ufTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1kfHxhPT09Znx8YT09PWV8fGE9PT1tfHxhPT09bnx8YT09PXR8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cXx8YS4kJHR5cGVvZj09PXB8fGEuJCR0eXBlb2Y9PT1nfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWx8fGEuJCR0eXBlb2Y9PT11fHx2b2lkIDAhPT1hLmdldE1vZHVsZUlkKT8hMDohMX07ZXhwb3J0cy50eXBlT2Y9djtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy8gRGVmYXVsdCB0byBhIGR1bW15IFwiYmF0Y2hcIiBpbXBsZW1lbnRhdGlvbiB0aGF0IGp1c3QgcnVucyB0aGUgY2FsbGJhY2tcbmZ1bmN0aW9uIGRlZmF1bHROb29wQmF0Y2goY2FsbGJhY2spIHtcbiAgY2FsbGJhY2soKTtcbn1cblxubGV0IGJhdGNoID0gZGVmYXVsdE5vb3BCYXRjaDsgLy8gQWxsb3cgaW5qZWN0aW5nIGFub3RoZXIgYmF0Y2hpbmcgZnVuY3Rpb24gbGF0ZXJcblxuZXhwb3J0IGNvbnN0IHNldEJhdGNoID0gbmV3QmF0Y2ggPT4gYmF0Y2ggPSBuZXdCYXRjaDsgLy8gU3VwcGx5IGEgZ2V0dGVyIGp1c3QgdG8gc2tpcCBkZWFsaW5nIHdpdGggRVNNIGJpbmRpbmdzXG5cbmV4cG9ydCBjb25zdCBnZXRCYXRjaCA9ICgpID0+IGJhdGNoOyIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5leHBvcnQgY29uc3QgUmVhY3RSZWR1eENvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUmVhY3RSZWR1eENvbnRleHQuZGlzcGxheU5hbWUgPSAnUmVhY3RSZWR1eCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0UmVkdXhDb250ZXh0OyIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5cbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSB2YWx1ZSBvZiB0aGUgYFJlYWN0UmVkdXhDb250ZXh0YC4gVGhpcyBpcyBhIGxvdy1sZXZlbFxyXG4gKiBob29rIHRoYXQgeW91IHNob3VsZCB1c3VhbGx5IG5vdCBuZWVkIHRvIGNhbGwgZGlyZWN0bHkuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSB2YWx1ZSBvZiB0aGUgYFJlYWN0UmVkdXhDb250ZXh0YFxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICgpID0+IHtcclxuICogICBjb25zdCB7IHN0b3JlIH0gPSB1c2VSZWR1eENvbnRleHQoKVxyXG4gKiAgIHJldHVybiA8ZGl2PntzdG9yZS5nZXRTdGF0ZSgpfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZHV4Q29udGV4dCgpIHtcbiAgY29uc3QgY29udGV4dFZhbHVlID0gdXNlQ29udGV4dChSZWFjdFJlZHV4Q29udGV4dCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbnRleHRWYWx1ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IGZpbmQgcmVhY3QtcmVkdXggY29udGV4dCB2YWx1ZTsgcGxlYXNlIGVuc3VyZSB0aGUgY29tcG9uZW50IGlzIHdyYXBwZWQgaW4gYSA8UHJvdmlkZXI+Jyk7XG4gIH1cblxuICByZXR1cm4gY29udGV4dFZhbHVlO1xufSIsImV4cG9ydCBjb25zdCBub3RJbml0aWFsaXplZCA9ICgpID0+IHtcbiAgdGhyb3cgbmV3IEVycm9yKCd1U0VTIG5vdCBpbml0aWFsaXplZCEnKTtcbn07IiwiaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlRGVidWdWYWx1ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgbm90SW5pdGlhbGl6ZWQgfSBmcm9tICcuLi91dGlscy91c2VTeW5jRXh0ZXJuYWxTdG9yZSc7XG5sZXQgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgPSBub3RJbml0aWFsaXplZDtcbmV4cG9ydCBjb25zdCBpbml0aWFsaXplVXNlU2VsZWN0b3IgPSBmbiA9PiB7XG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yID0gZm47XG59O1xuXG5jb25zdCByZWZFcXVhbGl0eSA9IChhLCBiKSA9PiBhID09PSBiO1xuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9ySG9vayhjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQpIHtcbiAgY29uc3QgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogKCkgPT4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVNlbGVjdG9yKHNlbGVjdG9yLCBlcXVhbGl0eUZuID0gcmVmRXF1YWxpdHkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdSBtdXN0IHBhc3MgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvcmApO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgcGFzcyBhIGZ1bmN0aW9uIGFzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlcXVhbGl0eUZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgcGFzcyBhIGZ1bmN0aW9uIGFzIGFuIGVxdWFsaXR5IGZ1bmN0aW9uIHRvIHVzZVNlbGVjdG9yYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb24sXG4gICAgICBnZXRTZXJ2ZXJTdGF0ZVxuICAgIH0gPSB1c2VSZWR1eENvbnRleHQoKTtcbiAgICBjb25zdCBzZWxlY3RlZFN0YXRlID0gdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3Ioc3Vic2NyaXB0aW9uLmFkZE5lc3RlZFN1Yiwgc3RvcmUuZ2V0U3RhdGUsIGdldFNlcnZlclN0YXRlIHx8IHN0b3JlLmdldFN0YXRlLCBzZWxlY3RvciwgZXF1YWxpdHlGbik7XG4gICAgdXNlRGVidWdWYWx1ZShzZWxlY3RlZFN0YXRlKTtcbiAgICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbiAgfTtcbn1cbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZSdzIHN0YXRlLiBUaGlzIGhvb2sgdGFrZXMgYSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBhcyBhbiBhcmd1bWVudC4gVGhlIHNlbGVjdG9yIGlzIGNhbGxlZCB3aXRoIHRoZSBzdG9yZSBzdGF0ZS5cclxuICpcclxuICogVGhpcyBob29rIHRha2VzIGFuIG9wdGlvbmFsIGVxdWFsaXR5IGNvbXBhcmlzb24gZnVuY3Rpb24gYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXJcclxuICogdGhhdCBhbGxvd3MgeW91IHRvIGN1c3RvbWl6ZSB0aGUgd2F5IHRoZSBzZWxlY3RlZCBzdGF0ZSBpcyBjb21wYXJlZCB0byBkZXRlcm1pbmVcclxuICogd2hldGhlciB0aGUgY29tcG9uZW50IG5lZWRzIHRvIGJlIHJlLXJlbmRlcmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZWxlY3RvciB0aGUgc2VsZWN0b3IgZnVuY3Rpb25cclxuICogQHBhcmFtIHtGdW5jdGlvbj19IGVxdWFsaXR5Rm4gdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBlcXVhbGl0eVxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgc2VsZWN0ZWQgc3RhdGVcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICgpID0+IHtcclxuICogICBjb25zdCBjb3VudGVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuY291bnRlcilcclxuICogICByZXR1cm4gPGRpdj57Y291bnRlcn08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IGNvbnN0IHVzZVNlbGVjdG9yID0gLyojX19QVVJFX18qL2NyZWF0ZVNlbGVjdG9ySG9vaygpOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJpbml0TWFwU3RhdGVUb1Byb3BzXCIsIFwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wc1wiLCBcImluaXRNZXJnZVByb3BzXCJdO1xuaW1wb3J0IHZlcmlmeVN1YnNlbGVjdG9ycyBmcm9tICcuL3ZlcmlmeVN1YnNlbGVjdG9ycyc7XG5leHBvcnQgZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCB7XG4gIGFyZVN0YXRlc0VxdWFsLFxuICBhcmVPd25Qcm9wc0VxdWFsLFxuICBhcmVTdGF0ZVByb3BzRXF1YWxcbn0pIHtcbiAgbGV0IGhhc1J1bkF0TGVhc3RPbmNlID0gZmFsc2U7XG4gIGxldCBzdGF0ZTtcbiAgbGV0IG93blByb3BzO1xuICBsZXQgc3RhdGVQcm9wcztcbiAgbGV0IGRpc3BhdGNoUHJvcHM7XG4gIGxldCBtZXJnZWRQcm9wcztcblxuICBmdW5jdGlvbiBoYW5kbGVGaXJzdENhbGwoZmlyc3RTdGF0ZSwgZmlyc3RPd25Qcm9wcykge1xuICAgIHN0YXRlID0gZmlyc3RTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IGZpcnN0T3duUHJvcHM7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIGhhc1J1bkF0TGVhc3RPbmNlID0gdHJ1ZTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCkge1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3U3RhdGUoKSB7XG4gICAgY29uc3QgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBjb25zdCBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgY29uc3QgcHJvcHNDaGFuZ2VkID0gIWFyZU93blByb3BzRXF1YWwobmV4dE93blByb3BzLCBvd25Qcm9wcyk7XG4gICAgY29uc3Qgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUsIG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59XG4vLyBUT0RPOiBBZGQgbW9yZSBjb21tZW50c1xuLy8gVGhlIHNlbGVjdG9yIHJldHVybmVkIGJ5IHNlbGVjdG9yRmFjdG9yeSB3aWxsIG1lbW9pemUgaXRzIHJlc3VsdHMsXG4vLyBhbGxvd2luZyBjb25uZWN0J3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgbGV0IHtcbiAgICBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgaW5pdE1lcmdlUHJvcHNcbiAgfSA9IF9yZWYsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBpbml0TWFwU3RhdGVUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIGNvbnN0IG1lcmdlUHJvcHMgPSBpbml0TWVyZ2VQcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2ZXJpZnlTdWJzZWxlY3RvcnMobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMpO1xuICB9XG5cbiAgcmV0dXJuIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KCAvLyAqIE5vdGU6XG4vLyAgSXQgc2VlbXMgdGhhdCB0aGUgZGlzcGF0Y2ggYXJndW1lbnRcbi8vICBjb3VsZCBiZSBhIGRpc3BhdGNoIGZ1bmN0aW9uIGluIHNvbWUgY2FzZXMgKGV4OiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKVxuLy8gIGFuZCBhIHN0YXRlIG9iamVjdCBpbiBzb21lIG90aGVycyAoZXg6IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmcpXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbmdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCkge1xuICAgIGNvbnN0IGNvbnN0YW50ID0gZ2V0Q29uc3RhbnQoZGlzcGF0Y2gpO1xuXG4gICAgZnVuY3Rpb24gY29uc3RhbnRTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBjb25zdGFudDtcbiAgICB9XG5cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59IC8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy9cbi8vIEEgbGVuZ3RoIG9mIG9uZSBzaWduYWxzIHRoYXQgbWFwVG9Qcm9wcyBkb2VzIG5vdCBkZXBlbmQgb24gcHJvcHMgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbi8vIEEgbGVuZ3RoIG9mIHplcm8gaXMgYXNzdW1lZCB0byBtZWFuIG1hcFRvUHJvcHMgaXMgZ2V0dGluZyBhcmdzIHZpYSBhcmd1bWVudHMgb3IgLi4uYXJncyBhbmRcbi8vIHRoZXJlZm9yZSBub3QgcmVwb3J0aW5nIGl0cyBsZW5ndGggYWNjdXJhdGVseS4uXG4vLyBUT0RPIENhbiB0aGlzIGdldCBwdWxsZWQgb3V0IHNvIHRoYXQgd2UgY2FuIHN1YnNjcmliZSBkaXJlY3RseSB0byB0aGUgc3RvcmUgaWYgd2UgZG9uJ3QgbmVlZCBvd25Qcm9wcz9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59IC8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwge1xuICAgIGRpc3BsYXlOYW1lXG4gIH0pIHtcbiAgICBjb25zdCBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIHVuZGVmaW5lZCk7XG4gICAgfTsgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcblxuXG4gICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSB0cnVlO1xuXG4gICAgcHJveHkubWFwVG9Qcm9wcyA9IGZ1bmN0aW9uIGRldGVjdEZhY3RvcnlBbmRWZXJpZnkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IG1hcFRvUHJvcHM7XG4gICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpO1xuICAgICAgbGV0IHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IHByb3BzO1xuICAgICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKHByb3BzKTtcbiAgICAgICAgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KHByb3BzLCBkaXNwbGF5TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn0iLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlSW52YWxpZEFyZ0ZhY3RvcnkoYXJnLCBuYW1lKSB7XG4gIHJldHVybiAoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdmFsdWUgb2YgdHlwZSAke3R5cGVvZiBhcmd9IGZvciAke25hbWV9IGFyZ3VtZW50IHdoZW4gY29ubmVjdGluZyBjb21wb25lbnQgJHtvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lfS5gKTtcbiAgfTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5pbXBvcnQgeyBjcmVhdGVJbnZhbGlkQXJnRmFjdG9yeSB9IGZyb20gJy4vaW52YWxpZEFyZ0ZhY3RvcnknO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIC8vIEB0cy1pZ25vcmVcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25Qcm9wcywgc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIHtcbiAgICBkaXNwbGF5TmFtZSxcbiAgICBhcmVNZXJnZWRQcm9wc0VxdWFsXG4gIH0pIHtcbiAgICBsZXQgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIGxldCBtZXJnZWRQcm9wcztcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICBjb25zdCBuZXh0TWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgICAgaWYgKGhhc1J1bk9uY2UpIHtcbiAgICAgICAgaWYgKCFhcmVNZXJnZWRQcm9wc0VxdWFsKG5leHRNZXJnZWRQcm9wcywgbWVyZ2VkUHJvcHMpKSBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1J1bk9uY2UgPSB0cnVlO1xuICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VQcm9wc0ZhY3RvcnkobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyAoKSA9PiBkZWZhdWx0TWVyZ2VQcm9wcyA6IHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogY3JlYXRlSW52YWxpZEFyZ0ZhY3RvcnkobWVyZ2VQcm9wcywgJ21lcmdlUHJvcHMnKTtcbn0iLCJpbXBvcnQgeyBnZXRCYXRjaCB9IGZyb20gJy4vYmF0Y2gnOyAvLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIGNvbnN0IGJhdGNoID0gZ2V0QmF0Y2goKTtcbiAgbGV0IGZpcnN0ID0gbnVsbDtcbiAgbGV0IGxhc3QgPSBudWxsO1xuICByZXR1cm4ge1xuICAgIGNsZWFyKCkge1xuICAgICAgZmlyc3QgPSBudWxsO1xuICAgICAgbGFzdCA9IG51bGw7XG4gICAgfSxcblxuICAgIG5vdGlmeSgpIHtcbiAgICAgIGJhdGNoKCgpID0+IHtcbiAgICAgICAgbGV0IGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBnZXQoKSB7XG4gICAgICBsZXQgbGlzdGVuZXJzID0gW107XG4gICAgICBsZXQgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdGVuZXJzO1xuICAgIH0sXG5cbiAgICBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIGxldCBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgbGV0IGxpc3RlbmVyID0gbGFzdCA9IHtcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIHByZXY6IGxhc3RcbiAgICAgIH07XG5cbiAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3QgPSBsaXN0ZW5lcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBmaXJzdCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobGlzdGVuZXIubmV4dCkge1xuICAgICAgICAgIGxpc3RlbmVyLm5leHQucHJldiA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdCA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyc3QgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICB9O1xufVxuXG5jb25zdCBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnkoKSB7fSxcblxuICBnZXQ6ICgpID0+IFtdXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gIGxldCB1bnN1YnNjcmliZTtcbiAgbGV0IGxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG5cbiAgZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdHJ5U3Vic2NyaWJlKCk7XG4gICAgcmV0dXJuIGxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICBsaXN0ZW5lcnMubm90aWZ5KCk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VXcmFwcGVyKCkge1xuICAgIGlmIChzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odW5zdWJzY3JpYmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdW5zdWJzY3JpYmUpIHtcbiAgICAgIHVuc3Vic2NyaWJlID0gcGFyZW50U3ViID8gcGFyZW50U3ViLmFkZE5lc3RlZFN1YihoYW5kbGVDaGFuZ2VXcmFwcGVyKSA6IHN0b3JlLnN1YnNjcmliZShoYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIGxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh1bnN1YnNjcmliZSkge1xuICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgIHVuc3Vic2NyaWJlID0gdW5kZWZpbmVkO1xuICAgICAgbGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICBsaXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHtcbiAgICBhZGROZXN0ZWRTdWIsXG4gICAgbm90aWZ5TmVzdGVkU3VicyxcbiAgICBoYW5kbGVDaGFuZ2VXcmFwcGVyLFxuICAgIGlzU3Vic2NyaWJlZCxcbiAgICB0cnlTdWJzY3JpYmUsXG4gICAgdHJ5VW5zdWJzY3JpYmUsXG4gICAgZ2V0TGlzdGVuZXJzOiAoKSA9PiBsaXN0ZW5lcnNcbiAgfTtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbn0iLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JzsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IHRvIGVuc3VyZSB0aGUgc3RvcmVcbi8vIHN1YnNjcmlwdGlvbiBjYWxsYmFjayBhbHdheXMgaGFzIHRoZSBzZWxlY3RvciBmcm9tIHRoZSBsYXRlc3QgcmVuZGVyIGNvbW1pdFxuLy8gYXZhaWxhYmxlLCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IGhhcHBlbiBiZXR3ZWVuIHJlbmRlciBhbmQgdGhlIGVmZmVjdCxcbi8vIHdoaWNoIG1heSBjYXVzZSBtaXNzZWQgdXBkYXRlczsgd2UgYWxzbyBtdXN0IGVuc3VyZSB0aGUgc3RvcmUgc3Vic2NyaXB0aW9uXG4vLyBpcyBjcmVhdGVkIHN5bmNocm9ub3VzbHksIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgb2NjdXIgYmVmb3JlIHRoZVxuLy8gc3Vic2NyaXB0aW9uIGlzIGNyZWF0ZWQgYW5kIGFuIGluY29uc2lzdGVudCBzdGF0ZSBtYXkgYmUgb2JzZXJ2ZWRcbi8vIE1hdGNoZXMgbG9naWMgaW4gUmVhY3QncyBgc2hhcmVkL0V4ZWN1dGlvbkVudmlyb25tZW50YCBmaWxlXG5cbmV4cG9ydCBjb25zdCBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnKTtcbmV4cG9ydCBjb25zdCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gY2FuVXNlRE9NID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0OyIsImZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3Qga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgY29uc3Qga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmXCJdO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSB2YWxpZC1qc2RvYywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUsIGlzQ29udGV4dENvbnN1bWVyIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi4vY29ubmVjdC9zZWxlY3RvckZhY3RvcnknO1xuaW1wb3J0IHsgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yeSB9IGZyb20gJy4uL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCB7IG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcnkgfSBmcm9tICcuLi9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgeyBtZXJnZVByb3BzRmFjdG9yeSB9IGZyb20gJy4uL2Nvbm5lY3QvbWVyZ2VQcm9wcyc7XG5pbXBvcnQgeyBjcmVhdGVTdWJzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi4vdXRpbHMvd2FybmluZyc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgeyBub3RJbml0aWFsaXplZCB9IGZyb20gJy4uL3V0aWxzL3VzZVN5bmNFeHRlcm5hbFN0b3JlJztcbmxldCB1c2VTeW5jRXh0ZXJuYWxTdG9yZSA9IG5vdEluaXRpYWxpemVkO1xuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVDb25uZWN0ID0gZm4gPT4ge1xuICB1c2VTeW5jRXh0ZXJuYWxTdG9yZSA9IGZuO1xufTsgLy8gRGVmaW5lIHNvbWUgY29uc3RhbnQgYXJyYXlzIGp1c3QgdG8gYXZvaWQgcmUtY3JlYXRpbmcgdGhlc2VcblxuY29uc3QgRU1QVFlfQVJSQVkgPSBbbnVsbCwgMF07XG5jb25zdCBOT19TVUJTQ1JJUFRJT05fQVJSQVkgPSBbbnVsbCwgbnVsbF07IC8vIEF0dGVtcHRzIHRvIHN0cmluZ2lmeSB3aGF0ZXZlciBub3QtcmVhbGx5LWEtY29tcG9uZW50IHZhbHVlIHdlIHdlcmUgZ2l2ZW5cbi8vIGZvciBsb2dnaW5nIGluIGFuIGVycm9yIG1lc3NhZ2VcblxuY29uc3Qgc3RyaW5naWZ5Q29tcG9uZW50ID0gQ29tcCA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KENvbXApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gU3RyaW5nKENvbXApO1xuICB9XG59O1xuXG4vLyBUaGlzIGlzIFwianVzdFwiIGEgYHVzZUxheW91dEVmZmVjdGAsIGJ1dCB3aXRoIHR3byBtb2RpZmljYXRpb25zOlxuLy8gLSB3ZSBuZWVkIHRvIGZhbGwgYmFjayB0byBgdXNlRWZmZWN0YCBpbiBTU1IgdG8gYXZvaWQgYW5ub3lpbmcgd2FybmluZ3Ncbi8vIC0gd2UgZXh0cmFjdCB0aGlzIHRvIGEgc2VwYXJhdGUgZnVuY3Rpb24gdG8gYXZvaWQgY2xvc2luZyBvdmVyIHZhbHVlc1xuLy8gICBhbmQgY2F1c2luZyBtZW1vcnkgbGVha3NcbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhlZmZlY3RGdW5jLCBlZmZlY3RBcmdzLCBkZXBlbmRlbmNpZXMpIHtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiBlZmZlY3RGdW5jKC4uLmVmZmVjdEFyZ3MpLCBkZXBlbmRlbmNpZXMpO1xufSAvLyBFZmZlY3QgY2FsbGJhY2ssIGV4dHJhY3RlZDogYXNzaWduIHRoZSBsYXRlc3QgcHJvcHMgdmFsdWVzIHRvIHJlZnMgZm9yIGxhdGVyIHVzYWdlXG5cblxuZnVuY3Rpb24gY2FwdHVyZVdyYXBwZXJQcm9wcyhsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgLy8gYWN0dWFsQ2hpbGRQcm9wczogdW5rbm93bixcbmNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMpIHtcbiAgLy8gV2Ugd2FudCB0byBjYXB0dXJlIHRoZSB3cmFwcGVyIHByb3BzIGFuZCBjaGlsZCBwcm9wcyB3ZSB1c2VkIGZvciBsYXRlciBjb21wYXJpc29uc1xuICBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQgPSB3cmFwcGVyUHJvcHM7XG4gIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIHJlbmRlciB3YXMgZnJvbSBhIHN0b3JlIHVwZGF0ZSwgY2xlYXIgb3V0IHRoYXQgcmVmZXJlbmNlIGFuZCBjYXNjYWRlIHRoZSBzdWJzY3JpYmVyIHVwZGF0ZVxuXG4gIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQpIHtcbiAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBudWxsO1xuICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgfVxufSAvLyBFZmZlY3QgY2FsbGJhY2ssIGV4dHJhY3RlZDogc3Vic2NyaWJlIHRvIHRoZSBSZWR1eCBzdG9yZSBvciBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3Rvcixcbi8vIGNoZWNrIGZvciB1cGRhdGVzIGFmdGVyIGRpc3BhdGNoZWQgYWN0aW9ucywgYW5kIHRyaWdnZXIgcmUtcmVuZGVycy5cblxuXG5mdW5jdGlvbiBzdWJzY3JpYmVVcGRhdGVzKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGlzTW91bnRlZCwgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3VicywgLy8gZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaDogUmVhY3QuRGlzcGF0Y2g8YW55PixcbmFkZGl0aW9uYWxTdWJzY3JpYmVMaXN0ZW5lcikge1xuICAvLyBJZiB3ZSdyZSBub3Qgc3Vic2NyaWJlZCB0byB0aGUgc3RvcmUsIG5vdGhpbmcgdG8gZG8gaGVyZVxuICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuICgpID0+IHt9OyAvLyBDYXB0dXJlIHZhbHVlcyBmb3IgY2hlY2tpbmcgaWYgYW5kIHdoZW4gdGhpcyBjb21wb25lbnQgdW5tb3VudHNcblxuICBsZXQgZGlkVW5zdWJzY3JpYmUgPSBmYWxzZTtcbiAgbGV0IGxhc3RUaHJvd25FcnJvciA9IG51bGw7IC8vIFdlJ2xsIHJ1biB0aGlzIGNhbGxiYWNrIGV2ZXJ5IHRpbWUgYSBzdG9yZSBzdWJzY3JpcHRpb24gdXBkYXRlIHByb3BhZ2F0ZXMgdG8gdGhpcyBjb21wb25lbnRcblxuICBjb25zdCBjaGVja0ZvclVwZGF0ZXMgPSAoKSA9PiB7XG4gICAgaWYgKGRpZFVuc3Vic2NyaWJlIHx8ICFpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgLy8gRG9uJ3QgcnVuIHN0YWxlIGxpc3RlbmVycy5cbiAgICAgIC8vIFJlZHV4IGRvZXNuJ3QgZ3VhcmFudGVlIHVuc3Vic2NyaXB0aW9ucyBoYXBwZW4gdW50aWwgbmV4dCBkaXNwYXRjaC5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFRPRE8gV2UncmUgY3VycmVudGx5IGNhbGxpbmcgZ2V0U3RhdGUgb3Vyc2VsdmVzIGhlcmUsIHJhdGhlciB0aGFuIGxldHRpbmcgYHVTRVNgIGRvIGl0XG5cblxuICAgIGNvbnN0IGxhdGVzdFN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGxldCBuZXdDaGlsZFByb3BzLCBlcnJvcjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBBY3R1YWxseSBydW4gdGhlIHNlbGVjdG9yIHdpdGggdGhlIG1vc3QgcmVjZW50IHN0b3JlIHN0YXRlIGFuZCB3cmFwcGVyIHByb3BzXG4gICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlXG4gICAgICBuZXdDaGlsZFByb3BzID0gY2hpbGRQcm9wc1NlbGVjdG9yKGxhdGVzdFN0b3JlU3RhdGUsIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXJyb3IgPSBlO1xuICAgICAgbGFzdFRocm93bkVycm9yID0gZTtcbiAgICB9XG5cbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICAgIH0gLy8gSWYgdGhlIGNoaWxkIHByb3BzIGhhdmVuJ3QgY2hhbmdlZCwgbm90aGluZyB0byBkbyBoZXJlIC0gY2FzY2FkZSB0aGUgc3Vic2NyaXB0aW9uIHVwZGF0ZVxuXG5cbiAgICBpZiAobmV3Q2hpbGRQcm9wcyA9PT0gbGFzdENoaWxkUHJvcHMuY3VycmVudCkge1xuICAgICAgaWYgKCFyZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50KSB7XG4gICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2F2ZSByZWZlcmVuY2VzIHRvIHRoZSBuZXcgY2hpbGQgcHJvcHMuICBOb3RlIHRoYXQgd2UgdHJhY2sgdGhlIFwiY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGVcIlxuICAgICAgLy8gYXMgYSByZWYgaW5zdGVhZCBvZiBhIHVzZVN0YXRlL3VzZVJlZHVjZXIgYmVjYXVzZSB3ZSBuZWVkIGEgd2F5IHRvIGRldGVybWluZSBpZiB0aGF0IHZhbHVlIGhhc1xuICAgICAgLy8gYmVlbiBwcm9jZXNzZWQuICBJZiB0aGlzIHdlbnQgaW50byB1c2VTdGF0ZS91c2VSZWR1Y2VyLCB3ZSBjb3VsZG4ndCBjbGVhciBvdXQgdGhlIHZhbHVlIHdpdGhvdXRcbiAgICAgIC8vIGZvcmNpbmcgYW5vdGhlciByZS1yZW5kZXIsIHdoaWNoIHdlIGRvbid0IHdhbnQuXG4gICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gdHJ1ZTsgLy8gVE9ETyBUaGlzIGlzIGhhY2t5IGFuZCBub3QgaG93IGB1U0VTYCBpcyBtZWFudCB0byBiZSB1c2VkXG4gICAgICAvLyBUcmlnZ2VyIHRoZSBSZWFjdCBgdXNlU3luY0V4dGVybmFsU3RvcmVgIHN1YnNjcmliZXJcblxuICAgICAgYWRkaXRpb25hbFN1YnNjcmliZUxpc3RlbmVyKCk7XG4gICAgfVxuICB9OyAvLyBBY3R1YWxseSBzdWJzY3JpYmUgdG8gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yIChvciBzdG9yZSlcblxuXG4gIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7IC8vIFB1bGwgZGF0YSBmcm9tIHRoZSBzdG9yZSBhZnRlciBmaXJzdCByZW5kZXIgaW4gY2FzZSB0aGUgc3RvcmUgaGFzXG4gIC8vIGNoYW5nZWQgc2luY2Ugd2UgYmVnYW4uXG5cbiAgY2hlY2tGb3JVcGRhdGVzKCk7XG5cbiAgY29uc3QgdW5zdWJzY3JpYmVXcmFwcGVyID0gKCkgPT4ge1xuICAgIGRpZFVuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG5cbiAgICBpZiAobGFzdFRocm93bkVycm9yKSB7XG4gICAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgd2UgY2F1Z2h0IGFuIGVycm9yIGR1ZSB0byBhIGJhZCBtYXBTdGF0ZSBmdW5jdGlvbiwgYnV0IHRoZVxuICAgICAgLy8gcGFyZW50IHJlLXJlbmRlcmVkIHdpdGhvdXQgdGhpcyBjb21wb25lbnQgYW5kIHdlJ3JlIGFib3V0IHRvIHVubW91bnQuXG4gICAgICAvLyBUaGlzIHNob3VsZG4ndCBoYXBwZW4gYXMgbG9uZyBhcyB3ZSBkbyB0b3AtZG93biBzdWJzY3JpcHRpb25zIGNvcnJlY3RseSwgYnV0XG4gICAgICAvLyBpZiB3ZSBldmVyIGRvIHRob3NlIHdyb25nLCB0aGlzIHRocm93IHdpbGwgc3VyZmFjZSB0aGUgZXJyb3IgaW4gb3VyIHRlc3RzLlxuICAgICAgLy8gSW4gdGhhdCBjYXNlLCB0aHJvdyB0aGUgZXJyb3IgZnJvbSBoZXJlIHNvIGl0IGRvZXNuJ3QgZ2V0IGxvc3QuXG4gICAgICB0aHJvdyBsYXN0VGhyb3duRXJyb3I7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1bnN1YnNjcmliZVdyYXBwZXI7XG59IC8vIFJlZHVjZXIgaW5pdGlhbCBzdGF0ZSBjcmVhdGlvbiBmb3Igb3VyIHVwZGF0ZSByZWR1Y2VyXG5cblxuY29uc3QgaW5pdFN0YXRlVXBkYXRlcyA9ICgpID0+IEVNUFRZX0FSUkFZO1xuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufVxuLyoqXHJcbiAqIEluZmVycyB0aGUgdHlwZSBvZiBwcm9wcyB0aGF0IGEgY29ubmVjdG9yIHdpbGwgaW5qZWN0IGludG8gYSBjb21wb25lbnQuXHJcbiAqL1xuXG5cbmxldCBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRQdXJlT3B0aW9uID0gZmFsc2U7XG4vKipcclxuICogQ29ubmVjdHMgYSBSZWFjdCBjb21wb25lbnQgdG8gYSBSZWR1eCBzdG9yZS5cclxuICpcclxuICogLSBXaXRob3V0IGFyZ3VtZW50cywganVzdCB3cmFwcyB0aGUgY29tcG9uZW50LCB3aXRob3V0IGNoYW5naW5nIHRoZSBiZWhhdmlvciAvIHByb3BzXHJcbiAqXHJcbiAqIC0gSWYgMiBwYXJhbXMgYXJlIHBhc3NlZCAoM3JkIHBhcmFtLCBtZXJnZVByb3BzLCBpcyBza2lwcGVkKSwgZGVmYXVsdCBiZWhhdmlvclxyXG4gKiBpcyB0byBvdmVycmlkZSBvd25Qcm9wcyAoYXMgc3RhdGVkIGluIHRoZSBkb2NzKSwgc28gd2hhdCByZW1haW5zIGlzIGV2ZXJ5dGhpbmcgdGhhdCdzXHJcbiAqIG5vdCBhIHN0YXRlIG9yIGRpc3BhdGNoIHByb3BcclxuICpcclxuICogLSBXaGVuIDNyZCBwYXJhbSBpcyBwYXNzZWQsIHdlIGRvbid0IGtub3cgaWYgb3duUHJvcHMgcHJvcGFnYXRlIGFuZCB3aGV0aGVyIHRoZXlcclxuICogc2hvdWxkIGJlIHZhbGlkIGNvbXBvbmVudCBwcm9wcywgYmVjYXVzZSBpdCBkZXBlbmRzIG9uIG1lcmdlUHJvcHMgaW1wbGVtZW50YXRpb24uXHJcbiAqIEFzIHN1Y2gsIGl0IGlzIHRoZSB1c2VyJ3MgcmVzcG9uc2liaWxpdHkgdG8gZXh0ZW5kIG93blByb3BzIGludGVyZmFjZSBmcm9tIHN0YXRlIG9yXHJcbiAqIGRpc3BhdGNoIHByb3BzIG9yIGJvdGggd2hlbiBhcHBsaWNhYmxlXHJcbiAqXHJcbiAqIEBwYXJhbSBtYXBTdGF0ZVRvUHJvcHMgQSBmdW5jdGlvbiB0aGF0IGV4dHJhY3RzIHZhbHVlcyBmcm9tIHN0YXRlXHJcbiAqIEBwYXJhbSBtYXBEaXNwYXRjaFRvUHJvcHMgU2V0dXAgZm9yIGRpc3BhdGNoaW5nIGFjdGlvbnNcclxuICogQHBhcmFtIG1lcmdlUHJvcHMgT3B0aW9uYWwgY2FsbGJhY2sgdG8gbWVyZ2Ugc3RhdGUgYW5kIGRpc3BhdGNoIHByb3BzIHRvZ2V0aGVyXHJcbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIGNvbmZpZ3VyaW5nIHRoZSBjb25uZWN0aW9uXHJcbiAqXHJcbiAqL1xuXG5mdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCB7XG4gIC8vIFRoZSBgcHVyZWAgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWQsIHNvIFRTIGRvZXNuJ3QgbGlrZSB1cyBkZXN0cnVjdHVyaW5nIHRoaXMgdG8gY2hlY2sgaXRzIGV4aXN0ZW5jZS5cbiAgLy8gQHRzLWlnbm9yZVxuICBwdXJlLFxuICBhcmVTdGF0ZXNFcXVhbCA9IHN0cmljdEVxdWFsLFxuICBhcmVPd25Qcm9wc0VxdWFsID0gc2hhbGxvd0VxdWFsLFxuICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBzaGFsbG93RXF1YWwsXG4gIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBzaGFsbG93RXF1YWwsXG4gIC8vIHVzZSBSZWFjdCdzIGZvcndhcmRSZWYgdG8gZXhwb3NlIGEgcmVmIG9mIHRoZSB3cmFwcGVkIGNvbXBvbmVudFxuICBmb3J3YXJkUmVmID0gZmFsc2UsXG4gIC8vIHRoZSBjb250ZXh0IGNvbnN1bWVyIHRvIHVzZVxuICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHRcbn0gPSB7fSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChwdXJlICE9PSB1bmRlZmluZWQgJiYgIWhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZFB1cmVPcHRpb24pIHtcbiAgICAgIGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZFB1cmVPcHRpb24gPSB0cnVlO1xuICAgICAgd2FybmluZygnVGhlIGBwdXJlYCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZC4gYGNvbm5lY3RgIGlzIG5vdyBhbHdheXMgYSBcInB1cmUvbWVtb2l6ZWRcIiBjb21wb25lbnQnKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBDb250ZXh0ID0gY29udGV4dDtcbiAgY29uc3QgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcnkobWFwU3RhdGVUb1Byb3BzKTtcbiAgY29uc3QgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcnkobWFwRGlzcGF0Y2hUb1Byb3BzKTtcbiAgY29uc3QgaW5pdE1lcmdlUHJvcHMgPSBtZXJnZVByb3BzRmFjdG9yeShtZXJnZVByb3BzKTtcbiAgY29uc3Qgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzID0gQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpO1xuXG4gIGNvbnN0IHdyYXBXaXRoQ29ubmVjdCA9IFdyYXBwZWRDb21wb25lbnQgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc1ZhbGlkRWxlbWVudFR5cGUoV3JhcHBlZENvbXBvbmVudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgY29ubmVjdC4gSW5zdGVhZCByZWNlaXZlZCAke3N0cmluZ2lmeUNvbXBvbmVudChXcmFwcGVkQ29tcG9uZW50KX1gKTtcbiAgICB9XG5cbiAgICBjb25zdCB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICAgIGNvbnN0IGRpc3BsYXlOYW1lID0gYENvbm5lY3QoJHt3cmFwcGVkQ29tcG9uZW50TmFtZX0pYDtcbiAgICBjb25zdCBzZWxlY3RvckZhY3RvcnlPcHRpb25zID0ge1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgZGlzcGxheU5hbWUsXG4gICAgICB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzLFxuICAgICAgYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBDb25uZWN0RnVuY3Rpb24ocHJvcHMpIHtcbiAgICAgIGNvbnN0IFtwcm9wc0NvbnRleHQsIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYsIHdyYXBwZXJQcm9wc10gPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhY3R1YWwgXCJkYXRhXCIgcHJvcHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGUgd3JhcHBlciBjb21wb25lbnQsXG4gICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAvLyBUbyBtYWludGFpbiB0aGUgd3JhcHBlclByb3BzIG9iamVjdCByZWZlcmVuY2UsIG1lbW9pemUgdGhpcyBkZXN0cnVjdHVyaW5nLlxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgcmVhY3RSZWR1eEZvcndhcmRlZFJlZlxuICAgICAgICB9ID0gcHJvcHMsXG4gICAgICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gICAgICAgIHJldHVybiBbcHJvcHMuY29udGV4dCwgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXTtcbiAgICAgIH0sIFtwcm9wc10pO1xuICAgICAgY29uc3QgQ29udGV4dFRvVXNlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIC8vIFVzZXJzIG1heSBvcHRpb25hbGx5IHBhc3MgaW4gYSBjdXN0b20gY29udGV4dCBpbnN0YW5jZSB0byB1c2UgaW5zdGVhZCBvZiBvdXIgUmVhY3RSZWR1eENvbnRleHQuXG4gICAgICAgIC8vIE1lbW9pemUgdGhlIGNoZWNrIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBjb250ZXh0IGluc3RhbmNlIHdlIHNob3VsZCB1c2UuXG4gICAgICAgIHJldHVybiBwcm9wc0NvbnRleHQgJiYgcHJvcHNDb250ZXh0LkNvbnN1bWVyICYmIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaXNDb250ZXh0Q29uc3VtZXIoIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHByb3BzQ29udGV4dC5Db25zdW1lciwgbnVsbCkpID8gcHJvcHNDb250ZXh0IDogQ29udGV4dDtcbiAgICAgIH0sIFtwcm9wc0NvbnRleHQsIENvbnRleHRdKTsgLy8gUmV0cmlldmUgdGhlIHN0b3JlIGFuZCBhbmNlc3RvciBzdWJzY3JpcHRpb24gdmlhIGNvbnRleHQsIGlmIGF2YWlsYWJsZVxuXG4gICAgICBjb25zdCBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KENvbnRleHRUb1VzZSk7IC8vIFRoZSBzdG9yZSBfbXVzdF8gZXhpc3QgYXMgZWl0aGVyIGEgcHJvcCBvciBpbiBjb250ZXh0LlxuICAgICAgLy8gV2UnbGwgY2hlY2sgdG8gc2VlIGlmIGl0IF9sb29rc18gbGlrZSBhIFJlZHV4IHN0b3JlIGZpcnN0LlxuICAgICAgLy8gVGhpcyBhbGxvd3MgdXMgdG8gcGFzcyB0aHJvdWdoIGEgYHN0b3JlYCBwcm9wIHRoYXQgaXMganVzdCBhIHBsYWluIHZhbHVlLlxuXG4gICAgICBjb25zdCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPSBCb29sZWFuKHByb3BzLnN0b3JlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmdldFN0YXRlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIGNvbnN0IGRpZFN0b3JlQ29tZUZyb21Db250ZXh0ID0gQm9vbGVhbihjb250ZXh0VmFsdWUpICYmIEJvb2xlYW4oY29udGV4dFZhbHVlLnN0b3JlKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWRpZFN0b3JlQ29tZUZyb21Qcm9wcyAmJiAhZGlkU3RvcmVDb21lRnJvbUNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBcInN0b3JlXCIgaW4gdGhlIGNvbnRleHQgb2YgYCArIGBcIiR7ZGlzcGxheU5hbWV9XCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIGAgKyBgb3IgcGFzcyBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHByb3ZpZGVyIHRvIDxQcm92aWRlcj4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIGAgKyBgUmVhY3QgY29udGV4dCBjb25zdW1lciB0byAke2Rpc3BsYXlOYW1lfSBpbiBjb25uZWN0IG9wdGlvbnMuYCk7XG4gICAgICB9IC8vIEJhc2VkIG9uIHRoZSBwcmV2aW91cyBjaGVjaywgb25lIG9mIHRoZXNlIG11c3QgYmUgdHJ1ZVxuXG5cbiAgICAgIGNvbnN0IHN0b3JlID0gZGlkU3RvcmVDb21lRnJvbVByb3BzID8gcHJvcHMuc3RvcmUgOiBjb250ZXh0VmFsdWUuc3RvcmU7XG4gICAgICBjb25zdCBnZXRTZXJ2ZXJTdGF0ZSA9IGRpZFN0b3JlQ29tZUZyb21Db250ZXh0ID8gY29udGV4dFZhbHVlLmdldFNlcnZlclN0YXRlIDogc3RvcmUuZ2V0U3RhdGU7XG4gICAgICBjb25zdCBjaGlsZFByb3BzU2VsZWN0b3IgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgLy8gVGhlIGNoaWxkIHByb3BzIHNlbGVjdG9yIG5lZWRzIHRoZSBzdG9yZSByZWZlcmVuY2UgYXMgYW4gaW5wdXQuXG4gICAgICAgIC8vIFJlLWNyZWF0ZSB0aGlzIHNlbGVjdG9yIHdoZW5ldmVyIHRoZSBzdG9yZSBjaGFuZ2VzLlxuICAgICAgICByZXR1cm4gZGVmYXVsdFNlbGVjdG9yRmFjdG9yeShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgICB9LCBbc3RvcmVdKTtcbiAgICAgIGNvbnN0IFtzdWJzY3JpcHRpb24sIG5vdGlmeU5lc3RlZFN1YnNdID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm4gTk9fU1VCU0NSSVBUSU9OX0FSUkFZOyAvLyBUaGlzIFN1YnNjcmlwdGlvbidzIHNvdXJjZSBzaG91bGQgbWF0Y2ggd2hlcmUgc3RvcmUgY2FtZSBmcm9tOiBwcm9wcyB2cy4gY29udGV4dC4gQSBjb21wb25lbnRcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSBzdG9yZSB2aWEgcHJvcHMgc2hvdWxkbid0IHVzZSBzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0LCBvciB2aWNlIHZlcnNhLlxuXG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gdW5kZWZpbmVkIDogY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbik7IC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIFRoaXMgY2FuXG4gICAgICAgIC8vIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3MgbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGUgIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG5cbiAgICAgICAgY29uc3Qgbm90aWZ5TmVzdGVkU3VicyA9IHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgcmV0dXJuIFtzdWJzY3JpcHRpb24sIG5vdGlmeU5lc3RlZFN1YnNdO1xuICAgICAgfSwgW3N0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZV0pOyAvLyBEZXRlcm1pbmUgd2hhdCB7c3RvcmUsIHN1YnNjcmlwdGlvbn0gdmFsdWUgc2hvdWxkIGJlIHB1dCBpbnRvIG5lc3RlZCBjb250ZXh0LCBpZiBuZWNlc3NhcnksXG4gICAgICAvLyBhbmQgbWVtb2l6ZSB0aGF0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IGNvbnRleHQgdXBkYXRlcy5cblxuICAgICAgY29uc3Qgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBpZiAoZGlkU3RvcmVDb21lRnJvbVByb3BzKSB7XG4gICAgICAgICAgLy8gVGhpcyBjb21wb25lbnQgaXMgZGlyZWN0bHkgc3Vic2NyaWJlZCB0byBhIHN0b3JlIGZyb20gcHJvcHMuXG4gICAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCBkZXNjZW5kYW50cyByZWFkaW5nIGZyb20gdGhpcyBzdG9yZSAtIHBhc3MgZG93biB3aGF0ZXZlclxuICAgICAgICAgIC8vIHRoZSBleGlzdGluZyBjb250ZXh0IHZhbHVlIGlzIGZyb20gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yLlxuICAgICAgICAgIHJldHVybiBjb250ZXh0VmFsdWU7XG4gICAgICAgIH0gLy8gT3RoZXJ3aXNlLCBwdXQgdGhpcyBjb21wb25lbnQncyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgaW50byBjb250ZXh0LCBzbyB0aGF0XG4gICAgICAgIC8vIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3b24ndCB1cGRhdGUgdW50aWwgYWZ0ZXIgdGhpcyBjb21wb25lbnQgaXMgZG9uZVxuXG5cbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0VmFsdWUsIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb25cbiAgICAgICAgfSk7XG4gICAgICB9LCBbZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWUsIHN1YnNjcmlwdGlvbl0pOyAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cbiAgICAgIGNvbnN0IGxhc3RDaGlsZFByb3BzID0gdXNlUmVmKCk7XG4gICAgICBjb25zdCBsYXN0V3JhcHBlclByb3BzID0gdXNlUmVmKHdyYXBwZXJQcm9wcyk7XG4gICAgICBjb25zdCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlID0gdXNlUmVmKCk7XG4gICAgICBjb25zdCByZW5kZXJJc1NjaGVkdWxlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICBjb25zdCBpc1Byb2Nlc3NpbmdEaXNwYXRjaCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICBjb25zdCBpc01vdW50ZWQgPSB1c2VSZWYoZmFsc2UpO1xuICAgICAgY29uc3QgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9IHVzZVJlZigpO1xuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlzTW91bnRlZC5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICBpc01vdW50ZWQuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgfSwgW10pO1xuICAgICAgY29uc3QgYWN0dWFsQ2hpbGRQcm9wc1NlbGVjdG9yID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNlbGVjdG9yID0gKCkgPT4ge1xuICAgICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAgIC8vIC0gVGhpcyByZW5kZXIgbWF5IGhhdmUgYmVlbiB0cmlnZ2VyZWQgYnkgYSBSZWR1eCBzdG9yZSB1cGRhdGUgdGhhdCBwcm9kdWNlZCBuZXcgY2hpbGQgcHJvcHNcbiAgICAgICAgICAvLyAtIEhvd2V2ZXIsIHdlIG1heSBoYXZlIGdvdHRlbiBuZXcgd3JhcHBlciBwcm9wcyBhZnRlciB0aGF0XG4gICAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgICAvLyBCdXQsIGlmIHdlIGhhdmUgbmV3IHdyYXBwZXIgcHJvcHMsIHRob3NlIG1pZ2h0IGNoYW5nZSB0aGUgY2hpbGQgcHJvcHMsIHNvIHdlIGhhdmUgdG8gcmVjYWxjdWxhdGUgdGhpbmdzLlxuICAgICAgICAgIC8vIFNvLCB3ZSdsbCB1c2UgdGhlIGNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlIG9ubHkgaWYgdGhlIHdyYXBwZXIgcHJvcHMgYXJlIHRoZSBzYW1lIGFzIGxhc3QgdGltZS5cbiAgICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50O1xuICAgICAgICAgIH0gLy8gVE9ETyBXZSdyZSByZWFkaW5nIHRoZSBzdG9yZSBkaXJlY3RseSBpbiByZW5kZXIoKSBoZXJlLiBCYWQgaWRlYT9cbiAgICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBkbyB0aGlzIGJlY2F1c2Ugb24gcmVuZGVycyBfbm90XyBjYXVzZWQgYnkgc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0aGUgbGF0ZXN0IHN0b3JlIHN0YXRlXG4gICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZS5cblxuXG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICAgIH0sIFtzdG9yZSwgd3JhcHBlclByb3BzXSk7IC8vIFdlIG5lZWQgdGhpcyB0byBleGVjdXRlIHN5bmNocm9ub3VzbHkgZXZlcnkgdGltZSB3ZSByZS1yZW5kZXIuIEhvd2V2ZXIsIFJlYWN0IHdhcm5zXG4gICAgICAvLyBhYm91dCB1c2VMYXlvdXRFZmZlY3QgaW4gU1NSLCBzbyB3ZSB0cnkgdG8gZGV0ZWN0IGVudmlyb25tZW50IGFuZCBmYWxsIGJhY2sgdG9cbiAgICAgIC8vIGp1c3QgdXNlRWZmZWN0IGluc3RlYWQgdG8gYXZvaWQgdGhlIHdhcm5pbmcsIHNpbmNlIG5laXRoZXIgd2lsbCBydW4gYW55d2F5LlxuXG4gICAgICBjb25zdCBzdWJzY3JpYmVGb3JSZWFjdCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCBzdWJzY3JpYmUgPSByZWFjdExpc3RlbmVyID0+IHtcbiAgICAgICAgICBpZiAoIXN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHt9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVVcGRhdGVzKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBpc01vdW50ZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIHJlYWN0TGlzdGVuZXIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzdWJzY3JpYmU7XG4gICAgICB9LCBbc3Vic2NyaXB0aW9uXSk7XG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MoY2FwdHVyZVdyYXBwZXJQcm9wcywgW2xhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgd3JhcHBlclByb3BzLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzXSk7XG4gICAgICBsZXQgYWN0dWFsQ2hpbGRQcm9wcztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlKCAvLyBUT0RPIFdlJ3JlIHBhc3NpbmcgdGhyb3VnaCBhIGJpZyB3cmFwcGVyIHRoYXQgZG9lcyBhIGJ1bmNoIG9mIGV4dHJhIHNpZGUgZWZmZWN0cyBiZXNpZGVzIHN1YnNjcmliaW5nXG4gICAgICAgIHN1YnNjcmliZUZvclJlYWN0LCAvLyBUT0RPIFRoaXMgaXMgaW5jcmVkaWJseSBoYWNreS4gV2UndmUgYWxyZWFkeSBwcm9jZXNzZWQgdGhlIHN0b3JlIHVwZGF0ZSBhbmQgY2FsY3VsYXRlZCBuZXcgY2hpbGQgcHJvcHMsXG4gICAgICAgIC8vIFRPRE8gYW5kIHdlJ3JlIGp1c3QgcGFzc2luZyB0aGF0IHRocm91Z2ggc28gaXQgdHJpZ2dlcnMgYSByZS1yZW5kZXIgZm9yIHVzIHJhdGhlciB0aGFuIHJlbHlpbmcgb24gYHVTRVNgLlxuICAgICAgICBhY3R1YWxDaGlsZFByb3BzU2VsZWN0b3IsIGdldFNlcnZlclN0YXRlID8gKCkgPT4gY2hpbGRQcm9wc1NlbGVjdG9yKGdldFNlcnZlclN0YXRlKCksIHdyYXBwZXJQcm9wcykgOiBhY3R1YWxDaGlsZFByb3BzU2VsZWN0b3IpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgICAgICA7XG4gICAgICAgICAgZXJyLm1lc3NhZ2UgKz0gYFxcblRoZSBlcnJvciBtYXkgYmUgY29ycmVsYXRlZCB3aXRoIHRoaXMgcHJldmlvdXMgZXJyb3I6XFxuJHtsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQuc3RhY2t9XFxuXFxuYDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gYWN0dWFsQ2hpbGRQcm9wcztcbiAgICAgIH0pOyAvLyBOb3cgdGhhdCBhbGwgdGhhdCdzIGRvbmUsIHdlIGNhbiBmaW5hbGx5IHRyeSB0byBhY3R1YWxseSByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgIC8vIFdlIG1lbW9pemUgdGhlIGVsZW1lbnRzIGZvciB0aGUgcmVuZGVyZWQgY2hpbGQgY29tcG9uZW50IGFzIGFuIG9wdGltaXphdGlvbi5cblxuICAgICAgY29uc3QgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgLyojX19QVVJFX18qL1xuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIF9leHRlbmRzKHt9LCBhY3R1YWxDaGlsZFByb3BzLCB7XG4gICAgICAgICAgICByZWY6IHJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcbiAgICAgICAgICB9KSlcbiAgICAgICAgKTtcbiAgICAgIH0sIFtyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCBXcmFwcGVkQ29tcG9uZW50LCBhY3R1YWxDaGlsZFByb3BzXSk7IC8vIElmIFJlYWN0IHNlZXMgdGhlIGV4YWN0IHNhbWUgZWxlbWVudCByZWZlcmVuY2UgYXMgbGFzdCB0aW1lLCBpdCBiYWlscyBvdXQgb2YgcmUtcmVuZGVyaW5nXG4gICAgICAvLyB0aGF0IGNoaWxkLCBzYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIFJlYWN0Lm1lbW8oKSBvciByZXR1cm5lZCBmYWxzZSBmcm9tIHNob3VsZENvbXBvbmVudFVwZGF0ZS5cblxuICAgICAgY29uc3QgcmVuZGVyZWRDaGlsZCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgaXMgc3Vic2NyaWJlZCB0byBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRvIHBhc3MgaXRzIG93blxuICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBkb3duIHRvIG91ciBkZXNjZW5kYW50cy4gVGhhdCBtZWFucyByZW5kZXJpbmcgdGhlIHNhbWVcbiAgICAgICAgICAvLyBDb250ZXh0IGluc3RhbmNlLCBhbmQgcHV0dGluZyBhIGRpZmZlcmVudCB2YWx1ZSBpbnRvIHRoZSBjb250ZXh0LlxuICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvdmVycmlkZGVuQ29udGV4dFZhbHVlXG4gICAgICAgICAgfSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENoaWxkO1xuICAgIH1cblxuICAgIGNvbnN0IF9Db25uZWN0ID0gUmVhY3QubWVtbyhDb25uZWN0RnVuY3Rpb24pO1xuXG4gICAgLy8gQWRkIGEgaGFja3kgY2FzdCB0byBnZXQgdGhlIHJpZ2h0IG91dHB1dCB0eXBlXG4gICAgY29uc3QgQ29ubmVjdCA9IF9Db25uZWN0O1xuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IENvbm5lY3RGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgIGNvbnN0IF9mb3J3YXJkZWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIGZvcndhcmRDb25uZWN0UmVmKHByb3BzLCByZWYpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29ubmVjdCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgcmVhY3RSZWR1eEZvcndhcmRlZFJlZjogcmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBmb3J3YXJkZWQgPSBfZm9yd2FyZGVkO1xuICAgICAgZm9yd2FyZGVkLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICBmb3J3YXJkZWQuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICByZXR1cm4gaG9pc3RTdGF0aWNzKGZvcndhcmRlZCwgV3JhcHBlZENvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvaXN0U3RhdGljcyhDb25uZWN0LCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgfTtcblxuICByZXR1cm4gd3JhcFdpdGhDb25uZWN0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0OyIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZEFyZ0ZhY3RvcnkgfSBmcm9tICcuL2ludmFsaWRBcmdGYWN0b3J5JztcbmV4cG9ydCBmdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHNGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoKCkgPT4gKHt9KSkgOiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gLy8gQHRzLWlnbm9yZVxuICB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJykgOiBjcmVhdGVJbnZhbGlkQXJnRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKTtcbn0iLCJpbXBvcnQgYmluZEFjdGlvbkNyZWF0b3JzIGZyb20gJy4uL3V0aWxzL2JpbmRBY3Rpb25DcmVhdG9ycyc7XG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmltcG9ydCB7IGNyZWF0ZUludmFsaWRBcmdGYWN0b3J5IH0gZnJvbSAnLi9pbnZhbGlkQXJnRmFjdG9yeSc7XG5leHBvcnQgZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yeShtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZGlzcGF0Y2ggPT4gLy8gQHRzLWlnbm9yZVxuICBiaW5kQWN0aW9uQ3JlYXRvcnMobWFwRGlzcGF0Y2hUb1Byb3BzLCBkaXNwYXRjaCkpIDogIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZGlzcGF0Y2ggPT4gKHtcbiAgICBkaXNwYXRjaFxuICB9KSkgOiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gLy8gQHRzLWlnbm9yZVxuICB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJykgOiBjcmVhdGVJbnZhbGlkQXJnRmFjdG9yeShtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGNvbnN0IGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIGNvbnN0IGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSAoLi4uYXJncykgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvciguLi5hcmdzKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59IiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgeyBjcmVhdGVTdWJzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuXG5mdW5jdGlvbiBQcm92aWRlcih7XG4gIHN0b3JlLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgc2VydmVyU3RhdGVcbn0pIHtcbiAgY29uc3QgY29udGV4dFZhbHVlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb24sXG4gICAgICBnZXRTZXJ2ZXJTdGF0ZTogc2VydmVyU3RhdGUgPyAoKSA9PiBzZXJ2ZXJTdGF0ZSA6IHVuZGVmaW5lZFxuICAgIH07XG4gIH0sIFtzdG9yZSwgc2VydmVyU3RhdGVdKTtcbiAgY29uc3QgcHJldmlvdXNTdGF0ZSA9IHVzZU1lbW8oKCkgPT4gc3RvcmUuZ2V0U3RhdGUoKSwgW3N0b3JlXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHN1YnNjcmlwdGlvblxuICAgIH0gPSBjb250ZXh0VmFsdWU7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG5cbiAgICBpZiAocHJldmlvdXNTdGF0ZSAhPT0gc3RvcmUuZ2V0U3RhdGUoKSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICB9LCBbY29udGV4dFZhbHVlLCBwcmV2aW91c1N0YXRlXSk7XG4gIGNvbnN0IENvbnRleHQgPSBjb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0OyAvLyBAdHMtaWdub3JlICdBbnlBY3Rpb24nIGlzIGFzc2lnbmFibGUgdG8gdGhlIGNvbnN0cmFpbnQgb2YgdHlwZSAnQScsIGJ1dCAnQScgY291bGQgYmUgaW5zdGFudGlhdGVkIHdpdGggYSBkaWZmZXJlbnQgc3VidHlwZVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0Jztcbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU3RvcmVgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RvcmVIb29rKGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dCkge1xuICBjb25zdCB1c2VSZWR1eENvbnRleHQgPSAvLyBAdHMtaWdub3JlXG4gIGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6ICgpID0+IHVzZUNvbnRleHQoY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTdG9yZSgpIHtcbiAgICBjb25zdCB7XG4gICAgICBzdG9yZVxuICAgIH0gPSB1c2VSZWR1eENvbnRleHQoKTsgLy8gQHRzLWlnbm9yZVxuXG4gICAgcmV0dXJuIHN0b3JlO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgcmVkdXggc3RvcmVcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgRXhhbXBsZUNvbXBvbmVudCA9ICgpID0+IHtcclxuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IGNvbnN0IHVzZVN0b3JlID0gLyojX19QVVJFX18qL2NyZWF0ZVN0b3JlSG9vaygpOyIsImltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCB7IHVzZVN0b3JlIGFzIHVzZURlZmF1bHRTdG9yZSwgY3JlYXRlU3RvcmVIb29rIH0gZnJvbSAnLi91c2VTdG9yZSc7XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZURpc3BhdGNoYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURpc3BhdGNoSG9vayhjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQpIHtcbiAgY29uc3QgdXNlU3RvcmUgPSAvLyBAdHMtaWdub3JlXG4gIGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFN0b3JlIDogY3JlYXRlU3RvcmVIb29rKGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gdXNlRGlzcGF0Y2goKSB7XG4gICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSgpOyAvLyBAdHMtaWdub3JlXG5cbiAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2g7XG4gIH07XG59XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggYGRpc3BhdGNoYCBmdW5jdGlvbi5cclxuICpcclxuICogQHJldHVybnMge2FueXxmdW5jdGlvbn0gcmVkdXggc3RvcmUncyBgZGlzcGF0Y2hgIGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcclxuICogICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcclxuICogICBjb25zdCBpbmNyZWFzZUNvdW50ZXIgPSB1c2VDYWxsYmFjaygoKSA9PiBkaXNwYXRjaCh7IHR5cGU6ICdpbmNyZWFzZS1jb3VudGVyJyB9KSwgW10pXHJcbiAqICAgcmV0dXJuIChcclxuICogICAgIDxkaXY+XHJcbiAqICAgICAgIDxzcGFuPnt2YWx1ZX08L3NwYW4+XHJcbiAqICAgICAgIDxidXR0b24gb25DbGljaz17aW5jcmVhc2VDb3VudGVyfT5JbmNyZWFzZSBjb3VudGVyPC9idXR0b24+XHJcbiAqICAgICA8L2Rpdj5cclxuICogICApXHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCBjb25zdCB1c2VEaXNwYXRjaCA9IC8qI19fUFVSRV9fKi9jcmVhdGVEaXNwYXRjaEhvb2soKTsiLCIvLyBUaGUgcHJpbWFyeSBlbnRyeSBwb2ludCBhc3N1bWVzIHdlJ3JlIHdvcmtpbmcgd2l0aCBzdGFuZGFyZCBSZWFjdERPTS9STiwgYnV0XG4vLyBvbGRlciB2ZXJzaW9ucyB0aGF0IGRvIG5vdCBpbmNsdWRlIGB1c2VTeW5jRXh0ZXJuYWxTdG9yZWAgKFJlYWN0IDE2LjkgLSAxNy54KS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhlIHVzZVN5bmNFeHRlcm5hbFN0b3JlIGNvbXBhdCBzaGltIGlzIG5lZWRlZC5cbmltcG9ydCB7IHVzZVN5bmNFeHRlcm5hbFN0b3JlIH0gZnJvbSAndXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvc2hpbSc7XG5pbXBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvciB9IGZyb20gJ3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0vd2l0aC1zZWxlY3Rvcic7XG5pbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyBhcyBiYXRjaCB9IGZyb20gJy4vdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcyc7XG5pbXBvcnQgeyBzZXRCYXRjaCB9IGZyb20gJy4vdXRpbHMvYmF0Y2gnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZVVzZVNlbGVjdG9yIH0gZnJvbSAnLi9ob29rcy91c2VTZWxlY3Rvcic7XG5pbXBvcnQgeyBpbml0aWFsaXplQ29ubmVjdCB9IGZyb20gJy4vY29tcG9uZW50cy9jb25uZWN0JztcbmluaXRpYWxpemVVc2VTZWxlY3Rvcih1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3Rvcik7XG5pbml0aWFsaXplQ29ubmVjdCh1c2VTeW5jRXh0ZXJuYWxTdG9yZSk7IC8vIEVuYWJsZSBiYXRjaGVkIHVwZGF0ZXMgaW4gb3VyIHN1YnNjcmlwdGlvbnMgZm9yIHVzZVxuLy8gd2l0aCBzdGFuZGFyZCBSZWFjdCByZW5kZXJlcnMgKFJlYWN0RE9NLCBSZWFjdCBOYXRpdmUpXG5cbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IGJhdGNoIH07XG5leHBvcnQgKiBmcm9tICcuL2V4cG9ydHMnOyIsIi8qKlxuICogUmVhY3QgUm91dGVyIERPTSB2Ni44LjJcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVU5TQUZFX2VuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMsIFJvdXRlciwgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCB1c2VIcmVmLCB1c2VSZXNvbHZlZFBhdGgsIHVzZUxvY2F0aW9uLCBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgdXNlTmF2aWdhdGUsIGNyZWF0ZVBhdGgsIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRpb24sIHVuc3RhYmxlX3VzZUJsb2NrZXIsIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQXdhaXQsIE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE5hdmlnYXRpb25UeXBlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlclByb3ZpZGVyLCBSb3V0ZXMsIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCwgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIFVOU0FGRV9Mb2NhdGlvbkNvbnRleHQsIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgVU5TQUZFX1JvdXRlQ29udGV4dCwgVU5TQUZFX2VuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMsIGNyZWF0ZU1lbW9yeVJvdXRlciwgY3JlYXRlUGF0aCwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuLCBjcmVhdGVSb3V0ZXNGcm9tRWxlbWVudHMsIGRlZmVyLCBnZW5lcmF0ZVBhdGgsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBqc29uLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBwYXJzZVBhdGgsIHJlZGlyZWN0LCByZW5kZXJNYXRjaGVzLCByZXNvbHZlUGF0aCwgdW5zdGFibGVfdXNlQmxvY2tlciwgdXNlQWN0aW9uRGF0YSwgdXNlQXN5bmNFcnJvciwgdXNlQXN5bmNWYWx1ZSwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2FkZXJEYXRhLCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUmV2YWxpZGF0b3IsIHVzZVJvdXRlRXJyb3IsIHVzZVJvdXRlTG9hZGVyRGF0YSwgdXNlUm91dGVzIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCB7IGNyZWF0ZVJvdXRlciwgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBFcnJvclJlc3BvbnNlLCBzdHJpcEJhc2VuYW1lLCBVTlNBRkVfaW52YXJpYW50LCBqb2luUGF0aHMgfSBmcm9tICdAcmVtaXgtcnVuL3JvdXRlcic7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmNvbnN0IGRlZmF1bHRNZXRob2QgPSBcImdldFwiO1xuY29uc3QgZGVmYXVsdEVuY1R5cGUgPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiO1xuZnVuY3Rpb24gaXNIdG1sRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIHR5cGVvZiBvYmplY3QudGFnTmFtZSA9PT0gXCJzdHJpbmdcIjtcbn1cbmZ1bmN0aW9uIGlzQnV0dG9uRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImJ1dHRvblwiO1xufVxuZnVuY3Rpb24gaXNGb3JtRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZvcm1cIjtcbn1cbmZ1bmN0aW9uIGlzSW5wdXRFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIjtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkUHJvY2Vzc0xpbmtDbGljayhldmVudCwgdGFyZ2V0KSB7XG4gIHJldHVybiBldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gTGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gSWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gaW5pdGlhbGl6ZXIuXG4gKlxuICogVGhpcyBpcyBpZGVudGljYWwgdG8gYG5ldyBVUkxTZWFyY2hQYXJhbXMoaW5pdClgIGV4Y2VwdCBpdCBhbHNvXG4gKiBzdXBwb3J0cyBhcnJheXMgYXMgdmFsdWVzIGluIHRoZSBvYmplY3QgZm9ybSBvZiB0aGUgaW5pdGlhbGl6ZXJcbiAqIGluc3RlYWQgb2YganVzdCBzdHJpbmdzLiBUaGlzIGlzIGNvbnZlbmllbnQgd2hlbiB5b3UgbmVlZCBtdWx0aXBsZVxuICogdmFsdWVzIGZvciBhIGdpdmVuIGtleSwgYnV0IGRvbid0IHdhbnQgdG8gdXNlIGFuIGFycmF5IGluaXRpYWxpemVyLlxuICpcbiAqIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mOlxuICpcbiAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoW1xuICogICAgIFsnc29ydCcsICduYW1lJ10sXG4gKiAgICAgWydzb3J0JywgJ3ByaWNlJ11cbiAqICAgXSk7XG4gKlxuICogeW91IGNhbiBkbzpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMoe1xuICogICAgIHNvcnQ6IFsnbmFtZScsICdwcmljZSddXG4gKiAgIH0pO1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVNlYXJjaFBhcmFtcyhpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0gXCJcIjtcbiAgfVxuXG4gIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHR5cGVvZiBpbml0ID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoaW5pdCkgfHwgaW5pdCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcyA/IGluaXQgOiBPYmplY3Qua2V5cyhpbml0KS5yZWR1Y2UoKG1lbW8sIGtleSkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IGluaXRba2V5XTtcbiAgICByZXR1cm4gbWVtby5jb25jYXQoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAodiA9PiBba2V5LCB2XSkgOiBbW2tleSwgdmFsdWVdXSk7XG4gIH0sIFtdKSk7XG59XG5mdW5jdGlvbiBnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbihsb2NhdGlvblNlYXJjaCwgZGVmYXVsdFNlYXJjaFBhcmFtcykge1xuICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKGxvY2F0aW9uU2VhcmNoKTtcblxuICBpZiAoZGVmYXVsdFNlYXJjaFBhcmFtcykge1xuICAgIGZvciAobGV0IGtleSBvZiBkZWZhdWx0U2VhcmNoUGFyYW1zLmtleXMoKSkge1xuICAgICAgaWYgKCFzZWFyY2hQYXJhbXMuaGFzKGtleSkpIHtcbiAgICAgICAgZGVmYXVsdFNlYXJjaFBhcmFtcy5nZXRBbGwoa2V5KS5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgICAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2VhcmNoUGFyYW1zO1xufVxuZnVuY3Rpb24gZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvKHRhcmdldCwgZGVmYXVsdEFjdGlvbiwgb3B0aW9ucykge1xuICBsZXQgbWV0aG9kO1xuICBsZXQgYWN0aW9uO1xuICBsZXQgZW5jVHlwZTtcbiAgbGV0IGZvcm1EYXRhO1xuXG4gIGlmIChpc0Zvcm1FbGVtZW50KHRhcmdldCkpIHtcbiAgICBsZXQgc3VibWlzc2lvblRyaWdnZXIgPSBvcHRpb25zLnN1Ym1pc3Npb25UcmlnZ2VyO1xuICAgIG1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBhY3Rpb24gPSBvcHRpb25zLmFjdGlvbiB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpIHx8IGRlZmF1bHRBY3Rpb247XG4gICAgZW5jVHlwZSA9IG9wdGlvbnMuZW5jVHlwZSB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiKSB8fCBkZWZhdWx0RW5jVHlwZTtcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSh0YXJnZXQpO1xuXG4gICAgaWYgKHN1Ym1pc3Npb25UcmlnZ2VyICYmIHN1Ym1pc3Npb25UcmlnZ2VyLm5hbWUpIHtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZChzdWJtaXNzaW9uVHJpZ2dlci5uYW1lLCBzdWJtaXNzaW9uVHJpZ2dlci52YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQnV0dG9uRWxlbWVudCh0YXJnZXQpIHx8IGlzSW5wdXRFbGVtZW50KHRhcmdldCkgJiYgKHRhcmdldC50eXBlID09PSBcInN1Ym1pdFwiIHx8IHRhcmdldC50eXBlID09PSBcImltYWdlXCIpKSB7XG4gICAgbGV0IGZvcm0gPSB0YXJnZXQuZm9ybTtcblxuICAgIGlmIChmb3JtID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgYSA8YnV0dG9uPiBvciA8aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIj4gd2l0aG91dCBhIDxmb3JtPlwiKTtcbiAgICB9IC8vIDxidXR0b24+LzxpbnB1dCB0eXBlPVwic3VibWl0XCI+IG1heSBvdmVycmlkZSBhdHRyaWJ1dGVzIG9mIDxmb3JtPlxuXG5cbiAgICBtZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSB8fCBmb3JtLmdldEF0dHJpYnV0ZShcIm1ldGhvZFwiKSB8fCBkZWZhdWx0TWV0aG9kO1xuICAgIGFjdGlvbiA9IG9wdGlvbnMuYWN0aW9uIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJmb3JtYWN0aW9uXCIpIHx8IGZvcm0uZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpIHx8IGRlZmF1bHRBY3Rpb247XG4gICAgZW5jVHlwZSA9IG9wdGlvbnMuZW5jVHlwZSB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybWVuY3R5cGVcIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoXCJlbmN0eXBlXCIpIHx8IGRlZmF1bHRFbmNUeXBlO1xuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm0pOyAvLyBJbmNsdWRlIG5hbWUgKyB2YWx1ZSBmcm9tIGEgPGJ1dHRvbj4sIGFwcGVuZGluZyBpbiBjYXNlIHRoZSBidXR0b24gbmFtZVxuICAgIC8vIG1hdGNoZXMgYW4gZXhpc3RpbmcgaW5wdXQgbmFtZVxuXG4gICAgaWYgKHRhcmdldC5uYW1lKSB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQodGFyZ2V0Lm5hbWUsIHRhcmdldC52YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzSHRtbEVsZW1lbnQodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgZWxlbWVudCB0aGF0IGlzIG5vdCA8Zm9ybT4sIDxidXR0b24+LCBvciBcIiArIFwiPGlucHV0IHR5cGU9XFxcInN1Ym1pdHxpbWFnZVxcXCI+XCIpO1xuICB9IGVsc2Uge1xuICAgIG1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IGRlZmF1bHRNZXRob2Q7XG4gICAgYWN0aW9uID0gb3B0aW9ucy5hY3Rpb24gfHwgZGVmYXVsdEFjdGlvbjtcbiAgICBlbmNUeXBlID0gb3B0aW9ucy5lbmNUeXBlIHx8IGRlZmF1bHRFbmNUeXBlO1xuXG4gICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEZvcm1EYXRhKSB7XG4gICAgICBmb3JtRGF0YSA9IHRhcmdldDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcblxuICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcykge1xuICAgICAgICBmb3IgKGxldCBbbmFtZSwgdmFsdWVdIG9mIHRhcmdldCkge1xuICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ICE9IG51bGwpIHtcbiAgICAgICAgZm9yIChsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyh0YXJnZXQpKSB7XG4gICAgICAgICAgZm9ybURhdGEuYXBwZW5kKG5hbWUsIHRhcmdldFtuYW1lXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBsZXQge1xuICAgIHByb3RvY29sLFxuICAgIGhvc3RcbiAgfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgbGV0IHVybCA9IG5ldyBVUkwoYWN0aW9uLCBwcm90b2NvbCArIFwiLy9cIiArIGhvc3QpO1xuICByZXR1cm4ge1xuICAgIHVybCxcbiAgICBtZXRob2Q6IG1ldGhvZC50b0xvd2VyQ2FzZSgpLFxuICAgIGVuY1R5cGUsXG4gICAgZm9ybURhdGFcbiAgfTtcbn1cblxuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25DbGlja1wiLCBcInJlbGF0aXZlXCIsIFwicmVsb2FkRG9jdW1lbnRcIiwgXCJyZXBsYWNlXCIsIFwic3RhdGVcIiwgXCJ0YXJnZXRcIiwgXCJ0b1wiLCBcInByZXZlbnRTY3JvbGxSZXNldFwiXSxcbiAgICAgIF9leGNsdWRlZDIgPSBbXCJhcmlhLWN1cnJlbnRcIiwgXCJjYXNlU2Vuc2l0aXZlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZW5kXCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcImNoaWxkcmVuXCJdLFxuICAgICAgX2V4Y2x1ZGVkMyA9IFtcInJlbG9hZERvY3VtZW50XCIsIFwicmVwbGFjZVwiLCBcIm1ldGhvZFwiLCBcImFjdGlvblwiLCBcIm9uU3VibWl0XCIsIFwiZmV0Y2hlcktleVwiLCBcInJvdXRlSWRcIiwgXCJyZWxhdGl2ZVwiLCBcInByZXZlbnRTY3JvbGxSZXNldFwiXTtcbi8vI3JlZ2lvbiBSb3V0ZXJzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VyUm91dGVyKHJvdXRlcywgb3B0cykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBoaXN0b3J5OiBjcmVhdGVCcm93c2VySGlzdG9yeSh7XG4gICAgICB3aW5kb3c6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMud2luZG93XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSkgfHwgcGFyc2VIeWRyYXRpb25EYXRhKCksXG4gICAgcm91dGVzOiBVTlNBRkVfZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cyhyb3V0ZXMpXG4gIH0pLmluaXRpYWxpemUoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hSb3V0ZXIocm91dGVzLCBvcHRzKSB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmJhc2VuYW1lLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhKSB8fCBwYXJzZUh5ZHJhdGlvbkRhdGEoKSxcbiAgICByb3V0ZXM6IFVOU0FGRV9lbmhhbmNlTWFudWFsUm91dGVPYmplY3RzKHJvdXRlcylcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuXG5mdW5jdGlvbiBwYXJzZUh5ZHJhdGlvbkRhdGEoKSB7XG4gIHZhciBfd2luZG93O1xuXG4gIGxldCBzdGF0ZSA9IChfd2luZG93ID0gd2luZG93KSA9PSBudWxsID8gdm9pZCAwIDogX3dpbmRvdy5fX3N0YXRpY1JvdXRlckh5ZHJhdGlvbkRhdGE7XG5cbiAgaWYgKHN0YXRlICYmIHN0YXRlLmVycm9ycykge1xuICAgIHN0YXRlID0gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICBlcnJvcnM6IGRlc2VyaWFsaXplRXJyb3JzKHN0YXRlLmVycm9ycylcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZTtcbn1cblxuZnVuY3Rpb24gZGVzZXJpYWxpemVFcnJvcnMoZXJyb3JzKSB7XG4gIGlmICghZXJyb3JzKSByZXR1cm4gbnVsbDtcbiAgbGV0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhlcnJvcnMpO1xuICBsZXQgc2VyaWFsaXplZCA9IHt9O1xuXG4gIGZvciAobGV0IFtrZXksIHZhbF0gb2YgZW50cmllcykge1xuICAgIC8vIEhleSB5b3UhICBJZiB5b3UgY2hhbmdlIHRoaXMsIHBsZWFzZSBjaGFuZ2UgdGhlIGNvcnJlc3BvbmRpbmcgbG9naWMgaW5cbiAgICAvLyBzZXJpYWxpemVFcnJvcnMgaW4gcmVhY3Qtcm91dGVyLWRvbS9zZXJ2ZXIudHN4IDopXG4gICAgaWYgKHZhbCAmJiB2YWwuX190eXBlID09PSBcIlJvdXRlRXJyb3JSZXNwb25zZVwiKSB7XG4gICAgICBzZXJpYWxpemVkW2tleV0gPSBuZXcgRXJyb3JSZXNwb25zZSh2YWwuc3RhdHVzLCB2YWwuc3RhdHVzVGV4dCwgdmFsLmRhdGEsIHZhbC5pbnRlcm5hbCA9PT0gdHJ1ZSk7XG4gICAgfSBlbHNlIGlmICh2YWwgJiYgdmFsLl9fdHlwZSA9PT0gXCJFcnJvclwiKSB7XG4gICAgICBsZXQgZXJyb3IgPSBuZXcgRXJyb3IodmFsLm1lc3NhZ2UpOyAvLyBXaXBlIGF3YXkgdGhlIGNsaWVudC1zaWRlIHN0YWNrIHRyYWNlLiAgTm90aGluZyB0byBmaWxsIGl0IGluIHdpdGhcbiAgICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3Qgc2VyaWFsaXplIFNTUiBzdGFjayB0cmFjZXMgZm9yIHNlY3VyaXR5IHJlYXNvbnNcblxuICAgICAgZXJyb3Iuc3RhY2sgPSBcIlwiO1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gZXJyb3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2VyaWFsaXplZDtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBQcm92aWRlcyB0aGUgY2xlYW5lc3QgVVJMcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoX3JlZikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWYoKTtcblxuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVCcm93c2VySGlzdG9yeSh7XG4gICAgICB3aW5kb3csXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCBmb3IgdXNlIGluIHdlYiBicm93c2Vycy4gU3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB0aGUgaGFzaFxuICogcG9ydGlvbiBvZiB0aGUgVVJMIHNvIGl0IGlzIG5vdCBzZW50IHRvIHRoZSBzZXJ2ZXIuXG4gKi9cblxuZnVuY3Rpb24gSGFzaFJvdXRlcihfcmVmMikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjI7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlSGFzaEhpc3Rvcnkoe1xuICAgICAgd2luZG93LFxuICAgICAgdjVDb21wYXQ6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgdGhhdCBhY2NlcHRzIGEgcHJlLWluc3RhbnRpYXRlZCBoaXN0b3J5IG9iamVjdC4gSXQncyBpbXBvcnRhbnRcbiAqIHRvIG5vdGUgdGhhdCB1c2luZyB5b3VyIG93biBoaXN0b3J5IG9iamVjdCBpcyBoaWdobHkgZGlzY291cmFnZWQgYW5kIG1heSBhZGRcbiAqIHR3byB2ZXJzaW9ucyBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRvIHlvdXIgYnVuZGxlcyB1bmxlc3MgeW91IHVzZSB0aGUgc2FtZVxuICogdmVyc2lvbiBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRoYXQgUmVhY3QgUm91dGVyIHVzZXMgaW50ZXJuYWxseS5cbiAqL1xuXG5mdW5jdGlvbiBIaXN0b3J5Um91dGVyKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgaGlzdG9yeVxuICB9ID0gX3JlZjM7XG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIaXN0b3J5Um91dGVyLmRpc3BsYXlOYW1lID0gXCJ1bnN0YWJsZV9IaXN0b3J5Um91dGVyXCI7XG59XG5jb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuY29uc3QgQUJTT0xVVEVfVVJMX1JFR0VYID0gL14oPzpbYS16XVthLXowLTkrLi1dKjp8XFwvXFwvKS9pO1xuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxuY29uc3QgTGluayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmtXaXRoUmVmKF9yZWY0LCByZWYpIHtcbiAgbGV0IHtcbiAgICBvbkNsaWNrLFxuICAgIHJlbGF0aXZlLFxuICAgIHJlbG9hZERvY3VtZW50LFxuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgdGFyZ2V0LFxuICAgIHRvLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldFxuICB9ID0gX3JlZjQsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjQsIF9leGNsdWRlZCk7XG5cbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpOyAvLyBSZW5kZXJlZCBpbnRvIDxhIGhyZWY+IGZvciBhYnNvbHV0ZSBVUkxzXG5cbiAgbGV0IGFic29sdXRlSHJlZjtcbiAgbGV0IGlzRXh0ZXJuYWwgPSBmYWxzZTtcblxuICBpZiAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiICYmIEFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KHRvKSkge1xuICAgIC8vIFJlbmRlciB0aGUgYWJzb2x1dGUgaHJlZiBzZXJ2ZXItIGFuZCBjbGllbnQtc2lkZVxuICAgIGFic29sdXRlSHJlZiA9IHRvOyAvLyBPbmx5IGNoZWNrIGZvciBleHRlcm5hbCBvcmlnaW5zIGNsaWVudC1zaWRlXG5cbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICBsZXQgY3VycmVudFVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgbGV0IHRhcmdldFVybCA9IHRvLnN0YXJ0c1dpdGgoXCIvL1wiKSA/IG5ldyBVUkwoY3VycmVudFVybC5wcm90b2NvbCArIHRvKSA6IG5ldyBVUkwodG8pO1xuICAgICAgbGV0IHBhdGggPSBzdHJpcEJhc2VuYW1lKHRhcmdldFVybC5wYXRobmFtZSwgYmFzZW5hbWUpO1xuXG4gICAgICBpZiAodGFyZ2V0VXJsLm9yaWdpbiA9PT0gY3VycmVudFVybC5vcmlnaW4gJiYgcGF0aCAhPSBudWxsKSB7XG4gICAgICAgIC8vIFN0cmlwIHRoZSBwcm90b2NvbC9vcmlnaW4vYmFzZW5hbWUgZm9yIHNhbWUtb3JpZ2luIGFic29sdXRlIFVSTHNcbiAgICAgICAgdG8gPSBwYXRoICsgdGFyZ2V0VXJsLnNlYXJjaCArIHRhcmdldFVybC5oYXNoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXNFeHRlcm5hbCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9IC8vIFJlbmRlcmVkIGludG8gPGEgaHJlZj4gZm9yIHJlbGF0aXZlIFVSTHNcblxuXG4gIGxldCBocmVmID0gdXNlSHJlZih0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgaW50ZXJuYWxPbkNsaWNrID0gdXNlTGlua0NsaWNrSGFuZGxlcih0bywge1xuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgdGFyZ2V0LFxuICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICByZWxhdGl2ZVxuICB9KTtcblxuICBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGlmIChvbkNsaWNrKSBvbkNsaWNrKGV2ZW50KTtcblxuICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgaW50ZXJuYWxPbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50XG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGFic29sdXRlSHJlZiB8fCBocmVmLFxuICAgICAgb25DbGljazogaXNFeHRlcm5hbCB8fCByZWxvYWREb2N1bWVudCA/IG9uQ2xpY2sgOiBoYW5kbGVDbGljayxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICB9KSlcbiAgKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG5jb25zdCBOYXZMaW5rID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTmF2TGlua1dpdGhSZWYoX3JlZjUsIHJlZikge1xuICBsZXQge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50UHJvcCA9IFwicGFnZVwiLFxuICAgIGNhc2VTZW5zaXRpdmUgPSBmYWxzZSxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVByb3AgPSBcIlwiLFxuICAgIGVuZCA9IGZhbHNlLFxuICAgIHN0eWxlOiBzdHlsZVByb3AsXG4gICAgdG8sXG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY1LFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY1LCBfZXhjbHVkZWQyKTtcblxuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlOiByZXN0LnJlbGF0aXZlXG4gIH0pO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVyU3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHRvUGF0aG5hbWUgPSBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24gPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24ocGF0aCkucGF0aG5hbWUgOiBwYXRoLnBhdGhuYW1lO1xuICBsZXQgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICBsZXQgbmV4dExvY2F0aW9uUGF0aG5hbWUgPSByb3V0ZXJTdGF0ZSAmJiByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uICYmIHJvdXRlclN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24gPyByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLnBhdGhuYW1lIDogbnVsbDtcblxuICBpZiAoIWNhc2VTZW5zaXRpdmUpIHtcbiAgICBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb25QYXRobmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIG5leHRMb2NhdGlvblBhdGhuYW1lID0gbmV4dExvY2F0aW9uUGF0aG5hbWUgPyBuZXh0TG9jYXRpb25QYXRobmFtZS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbiAgICB0b1BhdGhuYW1lID0gdG9QYXRobmFtZS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgbGV0IGlzQWN0aXZlID0gbG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fCAhZW5kICYmIGxvY2F0aW9uUGF0aG5hbWUuc3RhcnRzV2l0aCh0b1BhdGhuYW1lKSAmJiBsb2NhdGlvblBhdGhuYW1lLmNoYXJBdCh0b1BhdGhuYW1lLmxlbmd0aCkgPT09IFwiL1wiO1xuICBsZXQgaXNQZW5kaW5nID0gbmV4dExvY2F0aW9uUGF0aG5hbWUgIT0gbnVsbCAmJiAobmV4dExvY2F0aW9uUGF0aG5hbWUgPT09IHRvUGF0aG5hbWUgfHwgIWVuZCAmJiBuZXh0TG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmIG5leHRMb2NhdGlvblBhdGhuYW1lLmNoYXJBdCh0b1BhdGhuYW1lLmxlbmd0aCkgPT09IFwiL1wiKTtcbiAgbGV0IGFyaWFDdXJyZW50ID0gaXNBY3RpdmUgPyBhcmlhQ3VycmVudFByb3AgOiB1bmRlZmluZWQ7XG4gIGxldCBjbGFzc05hbWU7XG5cbiAgaWYgKHR5cGVvZiBjbGFzc05hbWVQcm9wID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjbGFzc05hbWUgPSBjbGFzc05hbWVQcm9wKHtcbiAgICAgIGlzQWN0aXZlLFxuICAgICAgaXNQZW5kaW5nXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgdGhlIGNsYXNzTmFtZSBwcm9wIGlzIG5vdCBhIGZ1bmN0aW9uLCB3ZSB1c2UgYSBkZWZhdWx0IGBhY3RpdmVgXG4gICAgLy8gY2xhc3MgZm9yIDxOYXZMaW5rIC8+cyB0aGF0IGFyZSBhY3RpdmUuIEluIHY1IGBhY3RpdmVgIHdhcyB0aGUgZGVmYXVsdFxuICAgIC8vIHZhbHVlIGZvciBgYWN0aXZlQ2xhc3NOYW1lYCwgYnV0IHdlIGFyZSByZW1vdmluZyB0aGF0IEFQSSBhbmQgY2FuIHN0aWxsXG4gICAgLy8gdXNlIHRoZSBvbGQgZGVmYXVsdCBiZWhhdmlvciBmb3IgYSBjbGVhbmVyIHVwZ3JhZGUgcGF0aCBhbmQga2VlcCB0aGVcbiAgICAvLyBzaW1wbGUgc3R5bGluZyBydWxlcyB3b3JraW5nIGFzIHRoZXkgY3VycmVudGx5IGRvLlxuICAgIGNsYXNzTmFtZSA9IFtjbGFzc05hbWVQcm9wLCBpc0FjdGl2ZSA/IFwiYWN0aXZlXCIgOiBudWxsLCBpc1BlbmRpbmcgPyBcInBlbmRpbmdcIiA6IG51bGxdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKTtcbiAgfVxuXG4gIGxldCBzdHlsZSA9IHR5cGVvZiBzdHlsZVByb3AgPT09IFwiZnVuY3Rpb25cIiA/IHN0eWxlUHJvcCh7XG4gICAgaXNBY3RpdmUsXG4gICAgaXNQZW5kaW5nXG4gIH0pIDogc3R5bGVQcm9wO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudCxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICByZWY6IHJlZixcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgdG86IHRvXG4gIH0pLCB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IGNoaWxkcmVuKHtcbiAgICBpc0FjdGl2ZSxcbiAgICBpc1BlbmRpbmdcbiAgfSkgOiBjaGlsZHJlbik7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG59XG4vKipcbiAqIEEgYEByZW1peC1ydW4vcm91dGVyYC1hd2FyZSBgPGZvcm0+YC4gSXQgYmVoYXZlcyBsaWtlIGEgbm9ybWFsIGZvcm0gZXhjZXB0XG4gKiB0aGF0IHRoZSBpbnRlcmFjdGlvbiB3aXRoIHRoZSBzZXJ2ZXIgaXMgd2l0aCBgZmV0Y2hgIGluc3RlYWQgb2YgbmV3IGRvY3VtZW50XG4gKiByZXF1ZXN0cywgYWxsb3dpbmcgY29tcG9uZW50cyB0byBhZGQgbmljZXIgVVggdG8gdGhlIHBhZ2UgYXMgdGhlIGZvcm0gaXNcbiAqIHN1Ym1pdHRlZCBhbmQgcmV0dXJucyB3aXRoIGRhdGEuXG4gKi9cblxuXG5jb25zdCBGb3JtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1JbXBsLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZlxuICB9KSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBGb3JtLmRpc3BsYXlOYW1lID0gXCJGb3JtXCI7XG59XG5cbmNvbnN0IEZvcm1JbXBsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKF9yZWY2LCBmb3J3YXJkZWRSZWYpID0+IHtcbiAgbGV0IHtcbiAgICByZWxvYWREb2N1bWVudCxcbiAgICByZXBsYWNlLFxuICAgIG1ldGhvZCA9IGRlZmF1bHRNZXRob2QsXG4gICAgYWN0aW9uLFxuICAgIG9uU3VibWl0LFxuICAgIGZldGNoZXJLZXksXG4gICAgcm91dGVJZCxcbiAgICByZWxhdGl2ZSxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgfSA9IF9yZWY2LFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmNiwgX2V4Y2x1ZGVkMyk7XG5cbiAgbGV0IHN1Ym1pdCA9IHVzZVN1Ym1pdEltcGwoZmV0Y2hlcktleSwgcm91dGVJZCk7XG4gIGxldCBmb3JtTWV0aG9kID0gbWV0aG9kLnRvTG93ZXJDYXNlKCkgPT09IFwiZ2V0XCIgPyBcImdldFwiIDogXCJwb3N0XCI7XG4gIGxldCBmb3JtQWN0aW9uID0gdXNlRm9ybUFjdGlvbihhY3Rpb24sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcblxuICBsZXQgc3VibWl0SGFuZGxlciA9IGV2ZW50ID0+IHtcbiAgICBvblN1Ym1pdCAmJiBvblN1Ym1pdChldmVudCk7XG4gICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxldCBzdWJtaXR0ZXIgPSBldmVudC5uYXRpdmVFdmVudC5zdWJtaXR0ZXI7XG4gICAgbGV0IHN1Ym1pdE1ldGhvZCA9IChzdWJtaXR0ZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHN1Ym1pdHRlci5nZXRBdHRyaWJ1dGUoXCJmb3JtbWV0aG9kXCIpKSB8fCBtZXRob2Q7XG4gICAgc3VibWl0KHN1Ym1pdHRlciB8fCBldmVudC5jdXJyZW50VGFyZ2V0LCB7XG4gICAgICBtZXRob2Q6IHN1Ym1pdE1ldGhvZCxcbiAgICAgIHJlcGxhY2UsXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldFxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImZvcm1cIiwgX2V4dGVuZHMoe1xuICAgIHJlZjogZm9yd2FyZGVkUmVmLFxuICAgIG1ldGhvZDogZm9ybU1ldGhvZCxcbiAgICBhY3Rpb246IGZvcm1BY3Rpb24sXG4gICAgb25TdWJtaXQ6IHJlbG9hZERvY3VtZW50ID8gb25TdWJtaXQgOiBzdWJtaXRIYW5kbGVyXG4gIH0sIHByb3BzKSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBGb3JtSW1wbC5kaXNwbGF5TmFtZSA9IFwiRm9ybUltcGxcIjtcbn1cbi8qKlxuICogVGhpcyBjb21wb25lbnQgd2lsbCBlbXVsYXRlIHRoZSBicm93c2VyJ3Mgc2Nyb2xsIHJlc3RvcmF0aW9uIG9uIGxvY2F0aW9uXG4gKiBjaGFuZ2VzLlxuICovXG5cblxuZnVuY3Rpb24gU2Nyb2xsUmVzdG9yYXRpb24oX3JlZjcpIHtcbiAgbGV0IHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9ID0gX3JlZjc7XG4gIHVzZVNjcm9sbFJlc3RvcmF0aW9uKHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9KTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU2Nyb2xsUmVzdG9yYXRpb24uZGlzcGxheU5hbWUgPSBcIlNjcm9sbFJlc3RvcmF0aW9uXCI7XG59IC8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBIb29rc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG52YXIgRGF0YVJvdXRlckhvb2s7XG5cbihmdW5jdGlvbiAoRGF0YVJvdXRlckhvb2spIHtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTY3JvbGxSZXN0b3JhdGlvblwiXSA9IFwidXNlU2Nyb2xsUmVzdG9yYXRpb25cIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTdWJtaXRJbXBsXCJdID0gXCJ1c2VTdWJtaXRJbXBsXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlRmV0Y2hlclwiXSA9IFwidXNlRmV0Y2hlclwiO1xufSkoRGF0YVJvdXRlckhvb2sgfHwgKERhdGFSb3V0ZXJIb29rID0ge30pKTtcblxudmFyIERhdGFSb3V0ZXJTdGF0ZUhvb2s7XG5cbihmdW5jdGlvbiAoRGF0YVJvdXRlclN0YXRlSG9vaykge1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlRmV0Y2hlcnNcIl0gPSBcInVzZUZldGNoZXJzXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VTY3JvbGxSZXN0b3JhdGlvblwiXSA9IFwidXNlU2Nyb2xsUmVzdG9yYXRpb25cIjtcbn0pKERhdGFSb3V0ZXJTdGF0ZUhvb2sgfHwgKERhdGFSb3V0ZXJTdGF0ZUhvb2sgPSB7fSkpO1xuXG5mdW5jdGlvbiBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSB7XG4gIHJldHVybiBob29rTmFtZSArIFwiIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBkYXRhIHJvdXRlci4gIFNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9yb3V0ZXJzL3BpY2tpbmctYS1yb3V0ZXIuXCI7XG59XG5cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJDb250ZXh0KGhvb2tOYW1lKSB7XG4gIGxldCBjdHggPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCk7XG4gICFjdHggPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGN0eDtcbn1cblxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlclN0YXRlKGhvb2tOYW1lKSB7XG4gIGxldCBzdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICAhc3RhdGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHN0YXRlO1xufVxuLyoqXG4gKiBIYW5kbGVzIHRoZSBjbGljayBiZWhhdmlvciBmb3Igcm91dGVyIGA8TGluaz5gIGNvbXBvbmVudHMuIFRoaXMgaXMgdXNlZnVsIGlmXG4gKiB5b3UgbmVlZCB0byBjcmVhdGUgY3VzdG9tIGA8TGluaz5gIGNvbXBvbmVudHMgd2l0aCB0aGUgc2FtZSBjbGljayBiZWhhdmlvciB3ZVxuICogdXNlIGluIG91ciBleHBvcnRlZCBgPExpbms+YC5cbiAqL1xuXG5cbmZ1bmN0aW9uIHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgdGFyZ2V0LFxuICAgIHJlcGxhY2U6IHJlcGxhY2VQcm9wLFxuICAgIHN0YXRlLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgaWYgKHNob3VsZFByb2Nlc3NMaW5rQ2xpY2soZXZlbnQsIHRhcmdldCkpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIElmIHRoZSBVUkwgaGFzbid0IGNoYW5nZWQsIGEgcmVndWxhciA8YT4gd2lsbCBkbyBhIHJlcGxhY2UgaW5zdGVhZCBvZlxuICAgICAgLy8gYSBwdXNoLCBzbyBkbyB0aGUgc2FtZSBoZXJlIHVubGVzcyB0aGUgcmVwbGFjZSBwcm9wIGlzIGV4cGxpY2l0bHkgc2V0XG5cbiAgICAgIGxldCByZXBsYWNlID0gcmVwbGFjZVByb3AgIT09IHVuZGVmaW5lZCA/IHJlcGxhY2VQcm9wIDogY3JlYXRlUGF0aChsb2NhdGlvbikgPT09IGNyZWF0ZVBhdGgocGF0aCk7XG4gICAgICBuYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICByZWxhdGl2ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbbG9jYXRpb24sIG5hdmlnYXRlLCBwYXRoLCByZXBsYWNlUHJvcCwgc3RhdGUsIHRhcmdldCwgdG8sIHByZXZlbnRTY3JvbGxSZXNldCwgcmVsYXRpdmVdKTtcbn1cbi8qKlxuICogQSBjb252ZW5pZW50IHdyYXBwZXIgZm9yIHJlYWRpbmcgYW5kIHdyaXRpbmcgc2VhcmNoIHBhcmFtZXRlcnMgdmlhIHRoZVxuICogVVJMU2VhcmNoUGFyYW1zIGludGVyZmFjZS5cbiAqL1xuXG5mdW5jdGlvbiB1c2VTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSBcInVuZGVmaW5lZFwiLCBcIllvdSBjYW5ub3QgdXNlIHRoZSBgdXNlU2VhcmNoUGFyYW1zYCBob29rIGluIGEgYnJvd3NlciB0aGF0IGRvZXMgbm90IFwiICsgXCJzdXBwb3J0IHRoZSBVUkxTZWFyY2hQYXJhbXMgQVBJLiBJZiB5b3UgbmVlZCB0byBzdXBwb3J0IEludGVybmV0IFwiICsgXCJFeHBsb3JlciAxMSwgd2UgcmVjb21tZW5kIHlvdSBsb2FkIGEgcG9seWZpbGwgc3VjaCBhcyBcIiArIFwiaHR0cHM6Ly9naXRodWIuY29tL3VuZ2FwL3VybC1zZWFyY2gtcGFyYW1zXFxuXFxuXCIgKyBcIklmIHlvdSdyZSB1bnN1cmUgaG93IHRvIGxvYWQgcG9seWZpbGxzLCB3ZSByZWNvbW1lbmQgeW91IGNoZWNrIG91dCBcIiArIFwiaHR0cHM6Ly9wb2x5ZmlsbC5pby92My8gd2hpY2ggcHJvdmlkZXMgc29tZSByZWNvbW1lbmRhdGlvbnMgYWJvdXQgaG93IFwiICsgXCJ0byBsb2FkIHBvbHlmaWxscyBvbmx5IGZvciB1c2VycyB0aGF0IG5lZWQgdGhlbSwgaW5zdGVhZCBvZiBmb3IgZXZlcnkgXCIgKyBcInVzZXIuXCIpIDogdm9pZCAwO1xuICBsZXQgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZiA9IFJlYWN0LnVzZVJlZihjcmVhdGVTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpKTtcbiAgbGV0IGhhc1NldFNlYXJjaFBhcmFtc1JlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VNZW1vKCgpID0+IC8vIE9ubHkgbWVyZ2UgaW4gdGhlIGRlZmF1bHRzIGlmIHdlIGhhdmVuJ3QgeWV0IGNhbGxlZCBzZXRTZWFyY2hQYXJhbXMuXG4gIC8vIE9uY2Ugd2UgY2FsbCB0aGF0IHdlIHdhbnQgdGhvc2UgdG8gdGFrZSBwcmVjZWRlbmNlLCBvdGhlcndpc2UgeW91IGNhbid0XG4gIC8vIHJlbW92ZSBhIHBhcmFtIHdpdGggc2V0U2VhcmNoUGFyYW1zKHt9KSBpZiBpdCBoYXMgYW4gaW5pdGlhbCB2YWx1ZVxuICBnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbihsb2NhdGlvbi5zZWFyY2gsIGhhc1NldFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50ID8gbnVsbCA6IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCksIFtsb2NhdGlvbi5zZWFyY2hdKTtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgbGV0IHNldFNlYXJjaFBhcmFtcyA9IFJlYWN0LnVzZUNhbGxiYWNrKChuZXh0SW5pdCwgbmF2aWdhdGVPcHRpb25zKSA9PiB7XG4gICAgY29uc3QgbmV3U2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKHR5cGVvZiBuZXh0SW5pdCA9PT0gXCJmdW5jdGlvblwiID8gbmV4dEluaXQoc2VhcmNoUGFyYW1zKSA6IG5leHRJbml0KTtcbiAgICBoYXNTZXRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCA9IHRydWU7XG4gICAgbmF2aWdhdGUoXCI/XCIgKyBuZXdTZWFyY2hQYXJhbXMsIG5hdmlnYXRlT3B0aW9ucyk7XG4gIH0sIFtuYXZpZ2F0ZSwgc2VhcmNoUGFyYW1zXSk7XG4gIHJldHVybiBbc2VhcmNoUGFyYW1zLCBzZXRTZWFyY2hQYXJhbXNdO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBwcm9ncmFtbWF0aWNhbGx5IHN1Ym1pdCBhIGZvcm0gKG9yXG4gKiBzb21lIGFyYml0cmFyeSBkYXRhKSB0byB0aGUgc2VydmVyLlxuICovXG5cbmZ1bmN0aW9uIHVzZVN1Ym1pdCgpIHtcbiAgcmV0dXJuIHVzZVN1Ym1pdEltcGwoKTtcbn1cblxuZnVuY3Rpb24gdXNlU3VibWl0SW1wbChmZXRjaGVyS2V5LCByb3V0ZUlkKSB7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VTdWJtaXRJbXBsKTtcbiAgbGV0IGRlZmF1bHRBY3Rpb24gPSB1c2VGb3JtQWN0aW9uKCk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgY2FsbGluZyBzdWJtaXQgZHVyaW5nIHRoZSBzZXJ2ZXIgcmVuZGVyLiBcIiArIFwiVHJ5IGNhbGxpbmcgc3VibWl0IHdpdGhpbiBhIGB1c2VFZmZlY3RgIG9yIGNhbGxiYWNrIGluc3RlYWQuXCIpO1xuICAgIH1cblxuICAgIGxldCB7XG4gICAgICBtZXRob2QsXG4gICAgICBlbmNUeXBlLFxuICAgICAgZm9ybURhdGEsXG4gICAgICB1cmxcbiAgICB9ID0gZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvKHRhcmdldCwgZGVmYXVsdEFjdGlvbiwgb3B0aW9ucyk7XG4gICAgbGV0IGhyZWYgPSB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoO1xuICAgIGxldCBvcHRzID0ge1xuICAgICAgcmVwbGFjZTogb3B0aW9ucy5yZXBsYWNlLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRpb25zLnByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIGZvcm1EYXRhLFxuICAgICAgZm9ybU1ldGhvZDogbWV0aG9kLFxuICAgICAgZm9ybUVuY1R5cGU6IGVuY1R5cGVcbiAgICB9O1xuXG4gICAgaWYgKGZldGNoZXJLZXkpIHtcbiAgICAgICEocm91dGVJZCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVJZCBhdmFpbGFibGUgZm9yIHVzZUZldGNoZXIoKVwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcm91dGVyLmZldGNoKGZldGNoZXJLZXksIHJvdXRlSWQsIGhyZWYsIG9wdHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByb3V0ZXIubmF2aWdhdGUoaHJlZiwgb3B0cyk7XG4gICAgfVxuICB9LCBbZGVmYXVsdEFjdGlvbiwgcm91dGVyLCBmZXRjaGVyS2V5LCByb3V0ZUlkXSk7XG59XG5cbmZ1bmN0aW9uIHVzZUZvcm1BY3Rpb24oYWN0aW9uLCBfdGVtcDIpIHtcbiAgbGV0IHtcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMjtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgcm91dGVDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfUm91dGVDb250ZXh0KTtcbiAgIXJvdXRlQ29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlRm9ybUFjdGlvbiBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCBbbWF0Y2hdID0gcm91dGVDb250ZXh0Lm1hdGNoZXMuc2xpY2UoLTEpOyAvLyBTaGFsbG93IGNsb25lIHBhdGggc28gd2UgY2FuIG1vZGlmeSBpdCBiZWxvdywgb3RoZXJ3aXNlIHdlIG1vZGlmeSB0aGVcbiAgLy8gb2JqZWN0IHJlZmVyZW5jZWQgYnkgdXNlTWVtbyBpbnNpZGUgdXNlUmVzb2x2ZWRQYXRoXG5cbiAgbGV0IHBhdGggPSBfZXh0ZW5kcyh7fSwgdXNlUmVzb2x2ZWRQYXRoKGFjdGlvbiA/IGFjdGlvbiA6IFwiLlwiLCB7XG4gICAgcmVsYXRpdmVcbiAgfSkpOyAvLyBQcmV2aW91c2x5IHdlIHNldCB0aGUgZGVmYXVsdCBhY3Rpb24gdG8gXCIuXCIuIFRoZSBwcm9ibGVtIHdpdGggdGhpcyBpcyB0aGF0XG4gIC8vIGB1c2VSZXNvbHZlZFBhdGgoXCIuXCIpYCBleGNsdWRlcyBzZWFyY2ggcGFyYW1zIGFuZCB0aGUgaGFzaCBvZiB0aGUgcmVzb2x2ZWRcbiAgLy8gVVJMLiBUaGlzIGlzIHRoZSBpbnRlbmRlZCBiZWhhdmlvciBvZiB3aGVuIFwiLlwiIGlzIHNwZWNpZmljYWxseSBwcm92aWRlZCBhc1xuICAvLyB0aGUgZm9ybSBhY3Rpb24sIGJ1dCBpbmNvbnNpc3RlbnQgdy8gYnJvd3NlcnMgd2hlbiB0aGUgYWN0aW9uIGlzIG9taXR0ZWQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVtaXgvaXNzdWVzLzkyN1xuXG5cbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcblxuICBpZiAoYWN0aW9uID09IG51bGwpIHtcbiAgICAvLyBTYWZlIHRvIHdyaXRlIHRvIHRoZXNlIGRpcmVjdGx5IGhlcmUgc2luY2UgaWYgYWN0aW9uIHdhcyB1bmRlZmluZWQsIHdlXG4gICAgLy8gd291bGQgaGF2ZSBjYWxsZWQgdXNlUmVzb2x2ZWRQYXRoKFwiLlwiKSB3aGljaCB3aWxsIG5ldmVyIGluY2x1ZGUgYSBzZWFyY2hcbiAgICAvLyBvciBoYXNoXG4gICAgcGF0aC5zZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2g7XG4gICAgcGF0aC5oYXNoID0gbG9jYXRpb24uaGFzaDsgLy8gV2hlbiBncmFiYmluZyBzZWFyY2ggcGFyYW1zIGZyb20gdGhlIFVSTCwgcmVtb3ZlIHRoZSBhdXRvbWF0aWNhbGx5XG4gICAgLy8gaW5zZXJ0ZWQgP2luZGV4IHBhcmFtIHNvIHdlIG1hdGNoIHRoZSB1c2VSZXNvbHZlZFBhdGggc2VhcmNoIGJlaGF2aW9yXG4gICAgLy8gd2hpY2ggd291bGQgbm90IGluY2x1ZGUgP2luZGV4XG5cbiAgICBpZiAobWF0Y2gucm91dGUuaW5kZXgpIHtcbiAgICAgIGxldCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHBhdGguc2VhcmNoKTtcbiAgICAgIHBhcmFtcy5kZWxldGUoXCJpbmRleFwiKTtcbiAgICAgIHBhdGguc2VhcmNoID0gcGFyYW1zLnRvU3RyaW5nKCkgPyBcIj9cIiArIHBhcmFtcy50b1N0cmluZygpIDogXCJcIjtcbiAgICB9XG4gIH1cblxuICBpZiAoKCFhY3Rpb24gfHwgYWN0aW9uID09PSBcIi5cIikgJiYgbWF0Y2gucm91dGUuaW5kZXgpIHtcbiAgICBwYXRoLnNlYXJjaCA9IHBhdGguc2VhcmNoID8gcGF0aC5zZWFyY2gucmVwbGFjZSgvXlxcPy8sIFwiP2luZGV4JlwiKSA6IFwiP2luZGV4XCI7XG4gIH0gLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgZm9ybSBhY3Rpb24uICBJZiB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIGp1c3QgdXNlXG4gIC8vIHRoZSByYXcgYmFzZW5hbWUgd2hpY2ggYWxsb3dzIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZVxuICAvLyBwcmVzZW5jZSBvZiBhIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgYWN0aW9uc1xuXG5cbiAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZVBhdGgocGF0aCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZldGNoZXJGb3JtKGZldGNoZXJLZXksIHJvdXRlSWQpIHtcbiAgbGV0IEZldGNoZXJGb3JtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUltcGwsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgcmVmOiByZWYsXG4gICAgICBmZXRjaGVyS2V5OiBmZXRjaGVyS2V5LFxuICAgICAgcm91dGVJZDogcm91dGVJZFxuICAgIH0pKTtcbiAgfSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEZldGNoZXJGb3JtLmRpc3BsYXlOYW1lID0gXCJmZXRjaGVyLkZvcm1cIjtcbiAgfVxuXG4gIHJldHVybiBGZXRjaGVyRm9ybTtcbn1cblxubGV0IGZldGNoZXJJZCA9IDA7XG4vKipcbiAqIEludGVyYWN0cyB3aXRoIHJvdXRlIGxvYWRlcnMgYW5kIGFjdGlvbnMgd2l0aG91dCBjYXVzaW5nIGEgbmF2aWdhdGlvbi4gR3JlYXRcbiAqIGZvciBhbnkgaW50ZXJhY3Rpb24gdGhhdCBzdGF5cyBvbiB0aGUgc2FtZSBwYWdlLlxuICovXG5cbmZ1bmN0aW9uIHVzZUZldGNoZXIoKSB7XG4gIHZhciBfcm91dGUkbWF0Y2hlcztcblxuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlRmV0Y2hlcik7XG4gIGxldCByb3V0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX1JvdXRlQ29udGV4dCk7XG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlRmV0Y2hlciBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCByb3V0ZUlkID0gKF9yb3V0ZSRtYXRjaGVzID0gcm91dGUubWF0Y2hlc1tyb3V0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdKSA9PSBudWxsID8gdm9pZCAwIDogX3JvdXRlJG1hdGNoZXMucm91dGUuaWQ7XG4gICEocm91dGVJZCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlRmV0Y2hlciBjYW4gb25seSBiZSB1c2VkIG9uIHJvdXRlcyB0aGF0IGNvbnRhaW4gYSB1bmlxdWUgXFxcImlkXFxcIlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgW2ZldGNoZXJLZXldID0gUmVhY3QudXNlU3RhdGUoKCkgPT4gU3RyaW5nKCsrZmV0Y2hlcklkKSk7XG4gIGxldCBbRm9ybV0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiB7XG4gICAgIXJvdXRlSWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIk5vIHJvdXRlSWQgYXZhaWxhYmxlIGZvciBmZXRjaGVyLkZvcm0oKVwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBjcmVhdGVGZXRjaGVyRm9ybShmZXRjaGVyS2V5LCByb3V0ZUlkKTtcbiAgfSk7XG4gIGxldCBbbG9hZF0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiBocmVmID0+IHtcbiAgICAhcm91dGVyID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJObyByb3V0ZXIgYXZhaWxhYmxlIGZvciBmZXRjaGVyLmxvYWQoKVwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICFyb3V0ZUlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJObyByb3V0ZUlkIGF2YWlsYWJsZSBmb3IgZmV0Y2hlci5sb2FkKClcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByb3V0ZXIuZmV0Y2goZmV0Y2hlcktleSwgcm91dGVJZCwgaHJlZik7XG4gIH0pO1xuICBsZXQgc3VibWl0ID0gdXNlU3VibWl0SW1wbChmZXRjaGVyS2V5LCByb3V0ZUlkKTtcbiAgbGV0IGZldGNoZXIgPSByb3V0ZXIuZ2V0RmV0Y2hlcihmZXRjaGVyS2V5KTtcbiAgbGV0IGZldGNoZXJXaXRoQ29tcG9uZW50cyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gX2V4dGVuZHMoe1xuICAgIEZvcm0sXG4gICAgc3VibWl0LFxuICAgIGxvYWRcbiAgfSwgZmV0Y2hlciksIFtmZXRjaGVyLCBGb3JtLCBzdWJtaXQsIGxvYWRdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBJcyB0aGlzIGJ1c3RlZCB3aGVuIHRoZSBSZWFjdCB0ZWFtIGdldHMgcmVhbCB3ZWlyZCBhbmQgY2FsbHMgZWZmZWN0c1xuICAgIC8vIHR3aWNlIG9uIG1vdW50PyAgV2UgcmVhbGx5IGp1c3QgbmVlZCB0byBnYXJiYWdlIGNvbGxlY3QgaGVyZSB3aGVuIHRoaXNcbiAgICAvLyBmZXRjaGVyIGlzIG5vIGxvbmdlciBhcm91bmQuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmICghcm91dGVyKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIk5vIGZldGNoZXIgYXZhaWxhYmxlIHRvIGNsZWFuIHVwIGZyb20gdXNlRmV0Y2hlcigpXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJvdXRlci5kZWxldGVGZXRjaGVyKGZldGNoZXJLZXkpO1xuICAgIH07XG4gIH0sIFtyb3V0ZXIsIGZldGNoZXJLZXldKTtcbiAgcmV0dXJuIGZldGNoZXJXaXRoQ29tcG9uZW50cztcbn1cbi8qKlxuICogUHJvdmlkZXMgYWxsIGZldGNoZXJzIGN1cnJlbnRseSBvbiB0aGUgcGFnZS4gVXNlZnVsIGZvciBsYXlvdXRzIGFuZCBwYXJlbnRcbiAqIHJvdXRlcyB0aGF0IG5lZWQgdG8gcHJvdmlkZSBwZW5kaW5nL29wdGltaXN0aWMgVUkgcmVnYXJkaW5nIHRoZSBmZXRjaC5cbiAqL1xuXG5mdW5jdGlvbiB1c2VGZXRjaGVycygpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlRmV0Y2hlcnMpO1xuICByZXR1cm4gWy4uLnN0YXRlLmZldGNoZXJzLnZhbHVlcygpXTtcbn1cbmNvbnN0IFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSA9IFwicmVhY3Qtcm91dGVyLXNjcm9sbC1wb3NpdGlvbnNcIjtcbmxldCBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IHt9O1xuLyoqXG4gKiBXaGVuIHJlbmRlcmVkIGluc2lkZSBhIFJvdXRlclByb3ZpZGVyLCB3aWxsIHJlc3RvcmUgc2Nyb2xsIHBvc2l0aW9ucyBvbiBuYXZpZ2F0aW9uc1xuICovXG5cbmZ1bmN0aW9uIHVzZVNjcm9sbFJlc3RvcmF0aW9uKF90ZW1wMykge1xuICBsZXQge1xuICAgIGdldEtleSxcbiAgICBzdG9yYWdlS2V5XG4gIH0gPSBfdGVtcDMgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAzO1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU2Nyb2xsUmVzdG9yYXRpb24pO1xuICBsZXQge1xuICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbixcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgfSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uKTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IG1hdGNoZXMgPSB1c2VNYXRjaGVzKCk7XG4gIGxldCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbigpOyAvLyBUcmlnZ2VyIG1hbnVhbCBzY3JvbGwgcmVzdG9yYXRpb24gd2hpbGUgd2UncmUgYWN0aXZlXG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwibWFudWFsXCI7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJhdXRvXCI7XG4gICAgfTtcbiAgfSwgW10pOyAvLyBTYXZlIHBvc2l0aW9ucyBvbiBwYWdlaGlkZVxuXG4gIHVzZVBhZ2VIaWRlKFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAobmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIGxldCBrZXkgPSAoZ2V0S2V5ID8gZ2V0S2V5KGxvY2F0aW9uLCBtYXRjaGVzKSA6IG51bGwpIHx8IGxvY2F0aW9uLmtleTtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV0gPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICB9XG5cbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VLZXkgfHwgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShzYXZlZFNjcm9sbFBvc2l0aW9ucykpO1xuICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJhdXRvXCI7XG4gIH0sIFtzdG9yYWdlS2V5LCBnZXRLZXksIG5hdmlnYXRpb24uc3RhdGUsIGxvY2F0aW9uLCBtYXRjaGVzXSkpOyAvLyBSZWFkIGluIGFueSBzYXZlZCBzY3JvbGwgbG9jYXRpb25zXG5cbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgc2Vzc2lvblBvc2l0aW9ucyA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oc3RvcmFnZUtleSB8fCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkpO1xuXG4gICAgICAgIGlmIChzZXNzaW9uUG9zaXRpb25zKSB7XG4gICAgICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBKU09OLnBhcnNlKHNlc3Npb25Qb3NpdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7Ly8gbm8tb3AsIHVzZSBkZWZhdWx0IGVtcHR5IG9iamVjdFxuICAgICAgfVxuICAgIH0sIFtzdG9yYWdlS2V5XSk7IC8vIEVuYWJsZSBzY3JvbGwgcmVzdG9yYXRpb24gaW4gdGhlIHJvdXRlclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIGxldCBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24gPSByb3V0ZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHJvdXRlci5lbmFibGVTY3JvbGxSZXN0b3JhdGlvbihzYXZlZFNjcm9sbFBvc2l0aW9ucywgKCkgPT4gd2luZG93LnNjcm9sbFksIGdldEtleSk7XG4gICAgICByZXR1cm4gKCkgPT4gZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uICYmIGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbigpO1xuICAgIH0sIFtyb3V0ZXIsIGdldEtleV0pOyAvLyBSZXN0b3JlIHNjcm9sbGluZyB3aGVuIHN0YXRlLnJlc3RvcmVTY3JvbGxQb3NpdGlvbiBjaGFuZ2VzXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG5cbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgLy8gRXhwbGljaXQgZmFsc2UgbWVhbnMgZG9uJ3QgZG8gYW55dGhpbmcgKHVzZWQgZm9yIHN1Ym1pc3Npb25zKVxuICAgICAgaWYgKHJlc3RvcmVTY3JvbGxQb3NpdGlvbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBiZWVuIGhlcmUgYmVmb3JlLCBzY3JvbGwgdG8gaXRcblxuXG4gICAgICBpZiAodHlwZW9mIHJlc3RvcmVTY3JvbGxQb3NpdGlvbiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgcmVzdG9yZVNjcm9sbFBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyB0cnkgdG8gc2Nyb2xsIHRvIHRoZSBoYXNoXG5cblxuICAgICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobG9jYXRpb24uaGFzaC5zbGljZSgxKSk7XG5cbiAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgZWwuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gLy8gRG9uJ3QgcmVzZXQgaWYgdGhpcyBuYXZpZ2F0aW9uIG9wdGVkIG91dFxuXG5cbiAgICAgIGlmIChwcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBvdGhlcndpc2UgZ28gdG8gdGhlIHRvcCBvbiBuZXcgbG9jYXRpb25zXG5cblxuICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgIH0sIFtsb2NhdGlvbiwgcmVzdG9yZVNjcm9sbFBvc2l0aW9uLCBwcmV2ZW50U2Nyb2xsUmVzZXRdKTtcbiAgfVxufVxuLyoqXG4gKiBTZXR1cCBhIGNhbGxiYWNrIHRvIGJlIGZpcmVkIG9uIHRoZSB3aW5kb3cncyBgYmVmb3JldW5sb2FkYCBldmVudC4gVGhpcyBpc1xuICogdXNlZnVsIGZvciBzYXZpbmcgc29tZSBkYXRhIHRvIGB3aW5kb3cubG9jYWxTdG9yYWdlYCBqdXN0IGJlZm9yZSB0aGUgcGFnZVxuICogcmVmcmVzaGVzLlxuICpcbiAqIE5vdGU6IFRoZSBgY2FsbGJhY2tgIGFyZ3VtZW50IHNob3VsZCBiZSBhIGZ1bmN0aW9uIGNyZWF0ZWQgd2l0aFxuICogYFJlYWN0LnVzZUNhbGxiYWNrKClgLlxuICovXG5cblxuZnVuY3Rpb24gdXNlQmVmb3JlVW5sb2FkKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIGxldCB7XG4gICAgY2FwdHVyZVxuICB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgb3B0cyA9IGNhcHR1cmUgIT0gbnVsbCA/IHtcbiAgICAgIGNhcHR1cmVcbiAgICB9IDogdW5kZWZpbmVkO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIH07XG4gIH0sIFtjYWxsYmFjaywgY2FwdHVyZV0pO1xufVxuLyoqXG4gKiBTZXR1cCBhIGNhbGxiYWNrIHRvIGJlIGZpcmVkIG9uIHRoZSB3aW5kb3cncyBgcGFnZWhpZGVgIGV2ZW50LiBUaGlzIGlzXG4gKiB1c2VmdWwgZm9yIHNhdmluZyBzb21lIGRhdGEgdG8gYHdpbmRvdy5sb2NhbFN0b3JhZ2VgIGp1c3QgYmVmb3JlIHRoZSBwYWdlXG4gKiByZWZyZXNoZXMuICBUaGlzIGV2ZW50IGlzIGJldHRlciBzdXBwb3J0ZWQgdGhhbiBiZWZvcmV1bmxvYWQgYWNyb3NzIGJyb3dzZXJzLlxuICpcbiAqIE5vdGU6IFRoZSBgY2FsbGJhY2tgIGFyZ3VtZW50IHNob3VsZCBiZSBhIGZ1bmN0aW9uIGNyZWF0ZWQgd2l0aFxuICogYFJlYWN0LnVzZUNhbGxiYWNrKClgLlxuICovXG5cbmZ1bmN0aW9uIHVzZVBhZ2VIaWRlKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIGxldCB7XG4gICAgY2FwdHVyZVxuICB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgb3B0cyA9IGNhcHR1cmUgIT0gbnVsbCA/IHtcbiAgICAgIGNhcHR1cmVcbiAgICB9IDogdW5kZWZpbmVkO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICB9O1xuICB9LCBbY2FsbGJhY2ssIGNhcHR1cmVdKTtcbn1cbi8qKlxuICogV3JhcHBlciBhcm91bmQgdXNlQmxvY2tlciB0byBzaG93IGEgd2luZG93LmNvbmZpcm0gcHJvbXB0IHRvIHVzZXJzIGluc3RlYWRcbiAqIG9mIGJ1aWxkaW5nIGEgY3VzdG9tIFVJIHdpdGggdXNlQmxvY2tlci5cbiAqXG4gKiBXYXJuaW5nOiBUaGlzIGhhcyAqYSBsb3Qgb2Ygcm91Z2ggZWRnZXMqIGFuZCBiZWhhdmVzIHZlcnkgZGlmZmVyZW50bHkgKGFuZFxuICogdmVyeSBpbmNvcnJlY3RseSBpbiBzb21lIGNhc2VzKSBhY3Jvc3MgYnJvd3NlcnMgaWYgdXNlciBjbGljayBhZGRpdGlvblxuICogYmFjay9mb3J3YXJkIG5hdmlnYXRpb25zIHdoaWxlIHRoZSBjb25maXJtIGlzIG9wZW4uICBVc2UgYXQgeW91ciBvd24gcmlzay5cbiAqL1xuXG5cbmZ1bmN0aW9uIHVzZVByb21wdChfcmVmOCkge1xuICBsZXQge1xuICAgIHdoZW4sXG4gICAgbWVzc2FnZVxuICB9ID0gX3JlZjg7XG4gIGxldCBibG9ja2VyID0gdW5zdGFibGVfdXNlQmxvY2tlcih3aGVuKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgIXdoZW4pIHtcbiAgICAgIGJsb2NrZXIucmVzZXQoKTtcbiAgICB9XG4gIH0sIFtibG9ja2VyLCB3aGVuXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiKSB7XG4gICAgICBsZXQgcHJvY2VlZCA9IHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpO1xuXG4gICAgICBpZiAocHJvY2VlZCkge1xuICAgICAgICBzZXRUaW1lb3V0KGJsb2NrZXIucHJvY2VlZCwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBibG9ja2VyLnJlc2V0KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbYmxvY2tlciwgbWVzc2FnZV0pO1xufVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBVdGlsc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZnVuY3Rpb24gd2FybmluZyhjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgUm91dGVyIVxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28geW91IGNhbiBtb3JlIGVhc2lseVxuICAgICAgLy8gZmluZCB0aGUgc291cmNlIGZvciBhIHdhcm5pbmcgdGhhdCBhcHBlYXJzIGluIHRoZSBjb25zb2xlIGJ5XG4gICAgICAvLyBlbmFibGluZyBcInBhdXNlIG9uIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIEphdmFTY3JpcHQgZGVidWdnZXIuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn0gLy8jZW5kcmVnaW9uXG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEZvcm0sIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmssIFNjcm9sbFJlc3RvcmF0aW9uLCB1c2VTY3JvbGxSZXN0b3JhdGlvbiBhcyBVTlNBRkVfdXNlU2Nyb2xsUmVzdG9yYXRpb24sIGNyZWF0ZUJyb3dzZXJSb3V0ZXIsIGNyZWF0ZUhhc2hSb3V0ZXIsIGNyZWF0ZVNlYXJjaFBhcmFtcywgSGlzdG9yeVJvdXRlciBhcyB1bnN0YWJsZV9IaXN0b3J5Um91dGVyLCB1c2VQcm9tcHQgYXMgdW5zdGFibGVfdXNlUHJvbXB0LCB1c2VCZWZvcmVVbmxvYWQsIHVzZUZldGNoZXIsIHVzZUZldGNoZXJzLCB1c2VGb3JtQWN0aW9uLCB1c2VMaW5rQ2xpY2tIYW5kbGVyLCB1c2VTZWFyY2hQYXJhbXMsIHVzZVN1Ym1pdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIvKipcbiAqIFJlYWN0IFJvdXRlciB2Ni44LjJcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0IHsgVU5TQUZFX2ludmFyaWFudCwgam9pblBhdGhzLCBtYXRjaFBhdGgsIFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcywgd2FybmluZywgcmVzb2x2ZVRvLCBwYXJzZVBhdGgsIG1hdGNoUm91dGVzLCBBY3Rpb24sIGlzUm91dGVFcnJvclJlc3BvbnNlLCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBzdHJpcEJhc2VuYW1lLCBBYm9ydGVkRGVmZXJyZWRFcnJvciwgY3JlYXRlUm91dGVyIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiBhcyBOYXZpZ2F0aW9uVHlwZSwgY3JlYXRlUGF0aCwgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlc29sdmVQYXRoIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cblxuZnVuY3Rpb24gaXNQb2x5ZmlsbCh4LCB5KSB7XG4gIHJldHVybiB4ID09PSB5ICYmICh4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSkgfHwgeCAhPT0geCAmJiB5ICE9PSB5IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIDtcbn1cblxuY29uc3QgaXMgPSB0eXBlb2YgT2JqZWN0LmlzID09PSBcImZ1bmN0aW9uXCIgPyBPYmplY3QuaXMgOiBpc1BvbHlmaWxsOyAvLyBJbnRlbnRpb25hbGx5IG5vdCB1c2luZyBuYW1lZCBpbXBvcnRzIGJlY2F1c2UgUm9sbHVwIHVzZXMgZHluYW1pY1xuLy8gZGlzcGF0Y2ggZm9yIENvbW1vbkpTIGludGVyb3AgbmFtZWQgaW1wb3J0cy5cblxuY29uc3Qge1xuICB1c2VTdGF0ZSxcbiAgdXNlRWZmZWN0LFxuICB1c2VMYXlvdXRFZmZlY3QsXG4gIHVzZURlYnVnVmFsdWVcbn0gPSBSZWFjdDtcbmxldCBkaWRXYXJuT2xkMThBbHBoYSA9IGZhbHNlO1xubGV0IGRpZFdhcm5VbmNhY2hlZEdldFNuYXBzaG90ID0gZmFsc2U7IC8vIERpc2NsYWltZXI6IFRoaXMgc2hpbSBicmVha3MgbWFueSBvZiB0aGUgcnVsZXMgb2YgUmVhY3QsIGFuZCBvbmx5IHdvcmtzXG4vLyBiZWNhdXNlIG9mIGEgdmVyeSBwYXJ0aWN1bGFyIHNldCBvZiBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIGFuZCBhc3N1bXB0aW9uc1xuLy8gLS0gY2hhbmdlIGFueSBvbmUgb2YgdGhlbSBhbmQgaXQgd2lsbCBicmVhay4gVGhlIG1vc3QgaW1wb3J0YW50IGFzc3VtcHRpb25cbi8vIGlzIHRoYXQgdXBkYXRlcyBhcmUgYWx3YXlzIHN5bmNocm9ub3VzLCBiZWNhdXNlIGNvbmN1cnJlbnQgcmVuZGVyaW5nIGlzXG4vLyBvbmx5IGF2YWlsYWJsZSBpbiB2ZXJzaW9ucyBvZiBSZWFjdCB0aGF0IGFsc28gaGF2ZSBhIGJ1aWx0LWluXG4vLyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSBBUEkuIEFuZCB3ZSBvbmx5IHVzZSB0aGlzIHNoaW0gd2hlbiB0aGUgYnVpbHQtaW4gQVBJXG4vLyBkb2VzIG5vdCBleGlzdC5cbi8vXG4vLyBEbyBub3QgYXNzdW1lIHRoYXQgdGhlIGNsZXZlciBoYWNrcyB1c2VkIGJ5IHRoaXMgaG9vayBhbHNvIHdvcmsgaW4gZ2VuZXJhbC5cbi8vIFRoZSBwb2ludCBvZiB0aGlzIHNoaW0gaXMgdG8gcmVwbGFjZSB0aGUgbmVlZCBmb3IgaGFja3MgYnkgb3RoZXIgbGlicmFyaWVzLlxuXG5mdW5jdGlvbiB1c2VTeW5jRXh0ZXJuYWxTdG9yZSQyKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIC8vIE5vdGU6IFRoZSBzaGltIGRvZXMgbm90IHVzZSBnZXRTZXJ2ZXJTbmFwc2hvdCwgYmVjYXVzZSBwcmUtMTggdmVyc2lvbnMgb2Zcbi8vIFJlYWN0IGRvIG5vdCBleHBvc2UgYSB3YXkgdG8gY2hlY2sgaWYgd2UncmUgaHlkcmF0aW5nLiBTbyB1c2VycyBvZiB0aGUgc2hpbVxuLy8gd2lsbCBuZWVkIHRvIHRyYWNrIHRoYXQgdGhlbXNlbHZlcyBhbmQgcmV0dXJuIHRoZSBjb3JyZWN0IHZhbHVlXG4vLyBmcm9tIGBnZXRTbmFwc2hvdGAuXG5nZXRTZXJ2ZXJTbmFwc2hvdCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKCFkaWRXYXJuT2xkMThBbHBoYSkge1xuICAgICAgaWYgKFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QpIHtcbiAgICAgICAgZGlkV2Fybk9sZDE4QWxwaGEgPSB0cnVlO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91IGFyZSB1c2luZyBhbiBvdXRkYXRlZCwgcHJlLXJlbGVhc2UgYWxwaGEgb2YgUmVhY3QgMTggdGhhdCBcIiArIFwiZG9lcyBub3Qgc3VwcG9ydCB1c2VTeW5jRXh0ZXJuYWxTdG9yZS4gVGhlIFwiICsgXCJ1c2Utc3luYy1leHRlcm5hbC1zdG9yZSBzaGltIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5LiBVcGdyYWRlIFwiICsgXCJ0byBhIG5ld2VyIHByZS1yZWxlYXNlLlwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gUmVhZCB0aGUgY3VycmVudCBzbmFwc2hvdCBmcm9tIHRoZSBzdG9yZSBvbiBldmVyeSByZW5kZXIuIEFnYWluLCB0aGlzXG4gIC8vIGJyZWFrcyB0aGUgcnVsZXMgb2YgUmVhY3QsIGFuZCBvbmx5IHdvcmtzIGhlcmUgYmVjYXVzZSBvZiBzcGVjaWZpY1xuICAvLyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzLCBtb3N0IGltcG9ydGFudGx5IHRoYXQgdXBkYXRlcyBhcmVcbiAgLy8gYWx3YXlzIHN5bmNocm9ub3VzLlxuXG5cbiAgY29uc3QgdmFsdWUgPSBnZXRTbmFwc2hvdCgpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAoIWRpZFdhcm5VbmNhY2hlZEdldFNuYXBzaG90KSB7XG4gICAgICBjb25zdCBjYWNoZWRWYWx1ZSA9IGdldFNuYXBzaG90KCk7XG5cbiAgICAgIGlmICghaXModmFsdWUsIGNhY2hlZFZhbHVlKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhlIHJlc3VsdCBvZiBnZXRTbmFwc2hvdCBzaG91bGQgYmUgY2FjaGVkIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3BcIik7XG4gICAgICAgIGRpZFdhcm5VbmNhY2hlZEdldFNuYXBzaG90ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gQmVjYXVzZSB1cGRhdGVzIGFyZSBzeW5jaHJvbm91cywgd2UgZG9uJ3QgcXVldWUgdGhlbS4gSW5zdGVhZCB3ZSBmb3JjZSBhXG4gIC8vIHJlLXJlbmRlciB3aGVuZXZlciB0aGUgc3Vic2NyaWJlZCBzdGF0ZSBjaGFuZ2VzIGJ5IHVwZGF0aW5nIGFuIHNvbWVcbiAgLy8gYXJiaXRyYXJ5IHVzZVN0YXRlIGhvb2suIFRoZW4sIGR1cmluZyByZW5kZXIsIHdlIGNhbGwgZ2V0U25hcHNob3QgdG8gcmVhZFxuICAvLyB0aGUgY3VycmVudCB2YWx1ZS5cbiAgLy9cbiAgLy8gQmVjYXVzZSB3ZSBkb24ndCBhY3R1YWxseSB1c2UgdGhlIHN0YXRlIHJldHVybmVkIGJ5IHRoZSB1c2VTdGF0ZSBob29rLCB3ZVxuICAvLyBjYW4gc2F2ZSBhIGJpdCBvZiBtZW1vcnkgYnkgc3RvcmluZyBvdGhlciBzdHVmZiBpbiB0aGF0IHNsb3QuXG4gIC8vXG4gIC8vIFRvIGltcGxlbWVudCB0aGUgZWFybHkgYmFpbG91dCwgd2UgbmVlZCB0byB0cmFjayBzb21lIHRoaW5ncyBvbiBhIG11dGFibGVcbiAgLy8gb2JqZWN0LiBVc3VhbGx5LCB3ZSB3b3VsZCBwdXQgdGhhdCBpbiBhIHVzZVJlZiBob29rLCBidXQgd2UgY2FuIHN0YXNoIGl0IGluXG4gIC8vIG91ciB1c2VTdGF0ZSBob29rIGluc3RlYWQuXG4gIC8vXG4gIC8vIFRvIGZvcmNlIGEgcmUtcmVuZGVyLCB3ZSBjYWxsIGZvcmNlVXBkYXRlKHtpbnN0fSkuIFRoYXQgd29ya3MgYmVjYXVzZSB0aGVcbiAgLy8gbmV3IG9iamVjdCBhbHdheXMgZmFpbHMgYW4gZXF1YWxpdHkgY2hlY2suXG5cblxuICBjb25zdCBbe1xuICAgIGluc3RcbiAgfSwgZm9yY2VVcGRhdGVdID0gdXNlU3RhdGUoe1xuICAgIGluc3Q6IHtcbiAgICAgIHZhbHVlLFxuICAgICAgZ2V0U25hcHNob3RcbiAgICB9XG4gIH0pOyAvLyBUcmFjayB0aGUgbGF0ZXN0IGdldFNuYXBzaG90IGZ1bmN0aW9uIHdpdGggYSByZWYuIFRoaXMgbmVlZHMgdG8gYmUgdXBkYXRlZFxuICAvLyBpbiB0aGUgbGF5b3V0IHBoYXNlIHNvIHdlIGNhbiBhY2Nlc3MgaXQgZHVyaW5nIHRoZSB0ZWFyaW5nIGNoZWNrIHRoYXRcbiAgLy8gaGFwcGVucyBvbiBzdWJzY3JpYmUuXG5cbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBpbnN0LnZhbHVlID0gdmFsdWU7XG4gICAgaW5zdC5nZXRTbmFwc2hvdCA9IGdldFNuYXBzaG90OyAvLyBXaGVuZXZlciBnZXRTbmFwc2hvdCBvciBzdWJzY3JpYmUgY2hhbmdlcywgd2UgbmVlZCB0byBjaGVjayBpbiB0aGVcbiAgICAvLyBjb21taXQgcGhhc2UgaWYgdGhlcmUgd2FzIGFuIGludGVybGVhdmVkIG11dGF0aW9uLiBJbiBjb25jdXJyZW50IG1vZGVcbiAgICAvLyB0aGlzIGNhbiBoYXBwZW4gYWxsIHRoZSB0aW1lLCBidXQgZXZlbiBpbiBzeW5jaHJvbm91cyBtb2RlLCBhbiBlYXJsaWVyXG4gICAgLy8gZWZmZWN0IG1heSBoYXZlIG11dGF0ZWQgdGhlIHN0b3JlLlxuXG4gICAgaWYgKGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkpIHtcbiAgICAgIC8vIEZvcmNlIGEgcmUtcmVuZGVyLlxuICAgICAgZm9yY2VVcGRhdGUoe1xuICAgICAgICBpbnN0XG4gICAgICB9KTtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcblxuICB9LCBbc3Vic2NyaWJlLCB2YWx1ZSwgZ2V0U25hcHNob3RdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBDaGVjayBmb3IgY2hhbmdlcyByaWdodCBiZWZvcmUgc3Vic2NyaWJpbmcuIFN1YnNlcXVlbnQgY2hhbmdlcyB3aWxsIGJlXG4gICAgLy8gZGV0ZWN0ZWQgaW4gdGhlIHN1YnNjcmlwdGlvbiBoYW5kbGVyLlxuICAgIGlmIChjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpKSB7XG4gICAgICAvLyBGb3JjZSBhIHJlLXJlbmRlci5cbiAgICAgIGZvcmNlVXBkYXRlKHtcbiAgICAgICAgaW5zdFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGFuZGxlU3RvcmVDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAvLyBUT0RPOiBCZWNhdXNlIHRoZXJlIGlzIG5vIGNyb3NzLXJlbmRlcmVyIEFQSSBmb3IgYmF0Y2hpbmcgdXBkYXRlcywgaXQnc1xuICAgICAgLy8gdXAgdG8gdGhlIGNvbnN1bWVyIG9mIHRoaXMgbGlicmFyeSB0byB3cmFwIHRoZWlyIHN1YnNjcmlwdGlvbiBldmVudFxuICAgICAgLy8gd2l0aCB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcy4gU2hvdWxkIHdlIHRyeSB0byBkZXRlY3Qgd2hlbiB0aGlzIGlzbid0XG4gICAgICAvLyB0aGUgY2FzZSBhbmQgcHJpbnQgYSB3YXJuaW5nIGluIGRldmVsb3BtZW50P1xuICAgICAgLy8gVGhlIHN0b3JlIGNoYW5nZWQuIENoZWNrIGlmIHRoZSBzbmFwc2hvdCBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgd2VcbiAgICAgIC8vIHJlYWQgZnJvbSB0aGUgc3RvcmUuXG4gICAgICBpZiAoY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSkge1xuICAgICAgICAvLyBGb3JjZSBhIHJlLXJlbmRlci5cbiAgICAgICAgZm9yY2VVcGRhdGUoe1xuICAgICAgICAgIGluc3RcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTsgLy8gU3Vic2NyaWJlIHRvIHRoZSBzdG9yZSBhbmQgcmV0dXJuIGEgY2xlYW4tdXAgZnVuY3Rpb24uXG5cblxuICAgIHJldHVybiBzdWJzY3JpYmUoaGFuZGxlU3RvcmVDaGFuZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtzdWJzY3JpYmVdKTtcbiAgdXNlRGVidWdWYWx1ZSh2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSB7XG4gIGNvbnN0IGxhdGVzdEdldFNuYXBzaG90ID0gaW5zdC5nZXRTbmFwc2hvdDtcbiAgY29uc3QgcHJldlZhbHVlID0gaW5zdC52YWx1ZTtcblxuICB0cnkge1xuICAgIGNvbnN0IG5leHRWYWx1ZSA9IGxhdGVzdEdldFNuYXBzaG90KCk7XG4gICAgcmV0dXJuICFpcyhwcmV2VmFsdWUsIG5leHRWYWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5mdW5jdGlvbiB1c2VTeW5jRXh0ZXJuYWxTdG9yZSQxKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KSB7XG4gIC8vIE5vdGU6IFRoZSBzaGltIGRvZXMgbm90IHVzZSBnZXRTZXJ2ZXJTbmFwc2hvdCwgYmVjYXVzZSBwcmUtMTggdmVyc2lvbnMgb2ZcbiAgLy8gUmVhY3QgZG8gbm90IGV4cG9zZSBhIHdheSB0byBjaGVjayBpZiB3ZSdyZSBoeWRyYXRpbmcuIFNvIHVzZXJzIG9mIHRoZSBzaGltXG4gIC8vIHdpbGwgbmVlZCB0byB0cmFjayB0aGF0IHRoZW1zZWx2ZXMgYW5kIHJldHVybiB0aGUgY29ycmVjdCB2YWx1ZVxuICAvLyBmcm9tIGBnZXRTbmFwc2hvdGAuXG4gIHJldHVybiBnZXRTbmFwc2hvdCgpO1xufVxuXG4vKipcbiAqIElubGluZWQgaW50byB0aGUgcmVhY3Qtcm91dGVyIHJlcG8gc2luY2UgdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUgZG9lcyBub3RcbiAqIHByb3ZpZGUgYSBVTUQtY29tcGF0aWJsZSBwYWNrYWdlLCBzbyB3ZSBuZWVkIHRoaXMgdG8gYmUgYWJsZSB0byBkaXN0cmlidXRlXG4gKiBVTUQgcmVhY3Qtcm91dGVyIGJ1bmRsZXNcbiAqL1xuY29uc3QgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIik7XG5jb25zdCBpc1NlcnZlckVudmlyb25tZW50ID0gIWNhblVzZURPTTtcbmNvbnN0IHNoaW0gPSBpc1NlcnZlckVudmlyb25tZW50ID8gdXNlU3luY0V4dGVybmFsU3RvcmUkMSA6IHVzZVN5bmNFeHRlcm5hbFN0b3JlJDI7XG5jb25zdCB1c2VTeW5jRXh0ZXJuYWxTdG9yZSA9IFwidXNlU3luY0V4dGVybmFsU3RvcmVcIiBpbiBSZWFjdCA/IChtb2R1bGUgPT4gbW9kdWxlLnVzZVN5bmNFeHRlcm5hbFN0b3JlKShSZWFjdCkgOiBzaGltO1xuXG5jb25zdCBEYXRhUm91dGVyQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIERhdGFSb3V0ZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyXCI7XG59XG5cbmNvbnN0IERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBEYXRhUm91dGVyU3RhdGVDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyU3RhdGVcIjtcbn1cblxuY29uc3QgQXdhaXRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQXdhaXRDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJBd2FpdFwiO1xufVxuXG5jb25zdCBOYXZpZ2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdmlnYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJOYXZpZ2F0aW9uXCI7XG59XG5cbmNvbnN0IExvY2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExvY2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTG9jYXRpb25cIjtcbn1cblxuY29uc3QgUm91dGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBvdXRsZXQ6IG51bGwsXG4gIG1hdGNoZXM6IFtdXG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlXCI7XG59XG5cbmNvbnN0IFJvdXRlRXJyb3JDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVFcnJvckNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlRXJyb3JcIjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmdWxsIGhyZWYgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUuIFRoaXMgaXMgdXNlZnVsIGZvciBidWlsZGluZ1xuICogY3VzdG9tIGxpbmtzIHRoYXQgYXJlIGFsc28gYWNjZXNzaWJsZSBhbmQgcHJlc2VydmUgcmlnaHQtY2xpY2sgYmVoYXZpb3IuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtaHJlZlxuICovXG5cbmZ1bmN0aW9uIHVzZUhyZWYodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUhyZWYoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgaGFzaCxcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2hcbiAgfSA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZTsgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgaHJlZi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2UgdGhlIHJhd1xuICAvLyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlXG4gIC8vIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBsaW5rc1xuXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBqb2luZWRQYXRobmFtZSA9IHBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aG5hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBuYXZpZ2F0b3IuY3JlYXRlSHJlZih7XG4gICAgcGF0aG5hbWU6IGpvaW5lZFBhdGhuYW1lLFxuICAgIHNlYXJjaCxcbiAgICBoYXNoXG4gIH0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGEgPFJvdXRlcj4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtaW4tcm91dGVyLWNvbnRleHRcbiAqL1xuXG5mdW5jdGlvbiB1c2VJblJvdXRlckNvbnRleHQoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkgIT0gbnVsbDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBsb2NhdGlvbiBvYmplY3QsIHdoaWNoIHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgVVJMIGluIHdlYlxuICogYnJvd3NlcnMuXG4gKlxuICogTm90ZTogSWYgeW91J3JlIHVzaW5nIHRoaXMgaXQgbWF5IG1lYW4geW91J3JlIGRvaW5nIHNvbWUgb2YgeW91ciBvd25cbiAqIFwicm91dGluZ1wiIGluIHlvdXIgYXBwLCBhbmQgd2UnZCBsaWtlIHRvIGtub3cgd2hhdCB5b3VyIHVzZSBjYXNlIGlzLiBXZSBtYXlcbiAqIGJlIGFibGUgdG8gcHJvdmlkZSBzb21ldGhpbmcgaGlnaGVyLWxldmVsIHRvIGJldHRlciBzdWl0IHlvdXIgbmVlZHMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbG9jYXRpb25cbiAqL1xuXG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VMb2NhdGlvbigpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubG9jYXRpb247XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBhY3Rpb24gd2hpY2ggZGVzY3JpYmVzIGhvdyB0aGUgcm91dGVyIGNhbWUgdG9cbiAqIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBlaXRoZXIgYnkgYSBwb3AsIHB1c2gsIG9yIHJlcGxhY2Ugb24gdGhlIGhpc3Rvcnkgc3RhY2suXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbmF2aWdhdGlvbi10eXBlXG4gKi9cblxuZnVuY3Rpb24gdXNlTmF2aWdhdGlvblR5cGUoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubmF2aWdhdGlvblR5cGU7XG59XG4vKipcbiAqIFJldHVybnMgYSBQYXRoTWF0Y2ggb2JqZWN0IGlmIHRoZSBnaXZlbiBwYXR0ZXJuIG1hdGNoZXMgdGhlIGN1cnJlbnQgVVJMLlxuICogVGhpcyBpcyB1c2VmdWwgZm9yIGNvbXBvbmVudHMgdGhhdCBuZWVkIHRvIGtub3cgXCJhY3RpdmVcIiBzdGF0ZSwgZS5nLlxuICogPE5hdkxpbms+LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW1hdGNoXG4gKi9cblxuZnVuY3Rpb24gdXNlTWF0Y2gocGF0dGVybikge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU1hdGNoKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBwYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gbWF0Y2hQYXRoKHBhdHRlcm4sIHBhdGhuYW1lKSwgW3BhdGhuYW1lLCBwYXR0ZXJuXSk7XG59XG4vKipcbiAqIFRoZSBpbnRlcmZhY2UgZm9yIHRoZSBuYXZpZ2F0ZSgpIGZ1bmN0aW9uIHJldHVybmVkIGZyb20gdXNlTmF2aWdhdGUoKS5cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYW4gaW1wZXJhdGl2ZSBtZXRob2QgZm9yIGNoYW5naW5nIHRoZSBsb2NhdGlvbi4gVXNlZCBieSA8TGluaz5zLCBidXRcbiAqIG1heSBhbHNvIGJlIHVzZWQgYnkgb3RoZXIgZWxlbWVudHMgdG8gY2hhbmdlIHRoZSBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1uYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0ZSgpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VOYXZpZ2F0ZSgpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShVTlNBRkVfZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykubWFwKG1hdGNoID0+IG1hdGNoLnBhdGhuYW1lQmFzZSkpO1xuICBsZXQgYWN0aXZlUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuICBsZXQgbmF2aWdhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodG8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhhY3RpdmVSZWYuY3VycmVudCwgXCJZb3Ugc2hvdWxkIGNhbGwgbmF2aWdhdGUoKSBpbiBhIFJlYWN0LnVzZUVmZmVjdCgpLCBub3Qgd2hlbiBcIiArIFwieW91ciBjb21wb25lbnQgaXMgZmlyc3QgcmVuZGVyZWQuXCIpIDogdm9pZCAwO1xuICAgIGlmICghYWN0aXZlUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIG5hdmlnYXRvci5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8sIEpTT04ucGFyc2Uocm91dGVQYXRobmFtZXNKc29uKSwgbG9jYXRpb25QYXRobmFtZSwgb3B0aW9ucy5yZWxhdGl2ZSA9PT0gXCJwYXRoXCIpOyAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gICAgLy8gdG8gaGFuZGluZyBvZmYgdG8gaGlzdG9yeS4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4gd2VcbiAgICAvLyBuYXZpZ2F0ZSB0byB0aGUgcmF3IGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsXG4gICAgLy8gY29udHJvbCBvdmVyIHRoZSBwcmVzZW5jZSBvZiBhIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgbGlua3NcblxuICAgIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICAgIH1cblxuICAgICghIW9wdGlvbnMucmVwbGFjZSA/IG5hdmlnYXRvci5yZXBsYWNlIDogbmF2aWdhdG9yLnB1c2gpKHBhdGgsIG9wdGlvbnMuc3RhdGUsIG9wdGlvbnMpO1xuICB9LCBbYmFzZW5hbWUsIG5hdmlnYXRvciwgcm91dGVQYXRobmFtZXNKc29uLCBsb2NhdGlvblBhdGhuYW1lXSk7XG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cbmNvbnN0IE91dGxldENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbi8qKlxuICogUmV0dXJucyB0aGUgY29udGV4dCAoaWYgcHJvdmlkZWQpIGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS5cbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW91dGxldC1jb250ZXh0XG4gKi9cblxuZnVuY3Rpb24gdXNlT3V0bGV0Q29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoT3V0bGV0Q29udGV4dCk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGVsZW1lbnQgZm9yIHRoZSBjaGlsZCByb3V0ZSBhdCB0aGlzIGxldmVsIG9mIHRoZSByb3V0ZVxuICogaGllcmFyY2h5LiBVc2VkIGludGVybmFsbHkgYnkgPE91dGxldD4gdG8gcmVuZGVyIGNoaWxkIHJvdXRlcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1vdXRsZXRcbiAqL1xuXG5mdW5jdGlvbiB1c2VPdXRsZXQoY29udGV4dCkge1xuICBsZXQgb3V0bGV0ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpLm91dGxldDtcblxuICBpZiAob3V0bGV0KSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE91dGxldENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0XG4gICAgfSwgb3V0bGV0KTtcbiAgfVxuXG4gIHJldHVybiBvdXRsZXQ7XG59XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIGtleS92YWx1ZSBwYWlycyBvZiB0aGUgZHluYW1pYyBwYXJhbXMgZnJvbSB0aGUgY3VycmVudFxuICogVVJMIHRoYXQgd2VyZSBtYXRjaGVkIGJ5IHRoZSByb3V0ZSBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXBhcmFtc1xuICovXG5cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZU1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGFyYW1zIDoge307XG59XG4vKipcbiAqIFJlc29sdmVzIHRoZSBwYXRobmFtZSBvZiB0aGUgZ2l2ZW4gYHRvYCB2YWx1ZSBhZ2FpbnN0IHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXJlc29sdmVkLXBhdGhcbiAqL1xuXG5mdW5jdGlvbiB1c2VSZXNvbHZlZFBhdGgodG8sIF90ZW1wMikge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKS5tYXAobWF0Y2ggPT4gbWF0Y2gucGF0aG5hbWVCYXNlKSk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IHJlc29sdmVUbyh0bywgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLCBsb2NhdGlvblBhdGhuYW1lLCByZWxhdGl2ZSA9PT0gXCJwYXRoXCIpLCBbdG8sIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmVdKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgcm91dGUgdGhhdCBtYXRjaGVkIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBwcmVwYXJlZFxuICogd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0IHRvIHJlbmRlciB0aGUgcmVtYWluZGVyIG9mIHRoZSByb3V0ZSB0cmVlLiBSb3V0ZVxuICogZWxlbWVudHMgaW4gdGhlIHRyZWUgbXVzdCByZW5kZXIgYW4gPE91dGxldD4gdG8gcmVuZGVyIHRoZWlyIGNoaWxkIHJvdXRlJ3NcbiAqIGVsZW1lbnQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utcm91dGVzXG4gKi9cblxuZnVuY3Rpb24gdXNlUm91dGVzKHJvdXRlcywgbG9jYXRpb25BcmcpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VSb3V0ZXMoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCBkYXRhUm91dGVyU3RhdGVDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBtYXRjaGVzOiBwYXJlbnRNYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZU1hdGNoID0gcGFyZW50TWF0Y2hlc1twYXJlbnRNYXRjaGVzLmxlbmd0aCAtIDFdO1xuICBsZXQgcGFyZW50UGFyYW1zID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGFyYW1zIDoge307XG4gIGxldCBwYXJlbnRQYXRobmFtZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lIDogXCIvXCI7XG4gIGxldCBwYXJlbnRQYXRobmFtZUJhc2UgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZUJhc2UgOiBcIi9cIjtcbiAgbGV0IHBhcmVudFJvdXRlID0gcm91dGVNYXRjaCAmJiByb3V0ZU1hdGNoLnJvdXRlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyBZb3Ugd29uJ3QgZ2V0IGEgd2FybmluZyBhYm91dCAyIGRpZmZlcmVudCA8Um91dGVzPiB1bmRlciBhIDxSb3V0ZT5cbiAgICAvLyB3aXRob3V0IGEgdHJhaWxpbmcgKiwgYnV0IHRoaXMgaXMgYSBiZXN0LWVmZm9ydCB3YXJuaW5nIGFueXdheSBzaW5jZSB3ZVxuICAgIC8vIGNhbm5vdCBldmVuIGdpdmUgdGhlIHdhcm5pbmcgdW5sZXNzIHRoZXkgbGFuZCBhdCB0aGUgcGFyZW50IHJvdXRlLlxuICAgIC8vXG4gICAgLy8gRXhhbXBsZTpcbiAgICAvL1xuICAgIC8vIDxSb3V0ZXM+XG4gICAgLy8gICB7LyogVGhpcyByb3V0ZSBwYXRoIE1VU1QgZW5kIHdpdGggLyogYmVjYXVzZSBvdGhlcndpc2VcbiAgICAvLyAgICAgICBpdCB3aWxsIG5ldmVyIG1hdGNoIC9ibG9nL3Bvc3QvMTIzICovfVxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nXCIgZWxlbWVudD17PEJsb2cgLz59IC8+XG4gICAgLy8gICA8Um91dGUgcGF0aD1cImJsb2cvZmVlZFwiIGVsZW1lbnQ9ezxCbG9nRmVlZCAvPn0gLz5cbiAgICAvLyA8L1JvdXRlcz5cbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uIEJsb2coKSB7XG4gICAgLy8gICByZXR1cm4gKFxuICAgIC8vICAgICA8Um91dGVzPlxuICAgIC8vICAgICAgIDxSb3V0ZSBwYXRoPVwicG9zdC86aWRcIiBlbGVtZW50PXs8UG9zdCAvPn0gLz5cbiAgICAvLyAgICAgPC9Sb3V0ZXM+XG4gICAgLy8gICApO1xuICAgIC8vIH1cbiAgICBsZXQgcGFyZW50UGF0aCA9IHBhcmVudFJvdXRlICYmIHBhcmVudFJvdXRlLnBhdGggfHwgXCJcIjtcbiAgICB3YXJuaW5nT25jZShwYXJlbnRQYXRobmFtZSwgIXBhcmVudFJvdXRlIHx8IHBhcmVudFBhdGguZW5kc1dpdGgoXCIqXCIpLCBcIllvdSByZW5kZXJlZCBkZXNjZW5kYW50IDxSb3V0ZXM+IChvciBjYWxsZWQgYHVzZVJvdXRlcygpYCkgYXQgXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRobmFtZSArIFwiXFxcIiAodW5kZXIgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4pIGJ1dCB0aGUgXCIpICsgXCJwYXJlbnQgcm91dGUgcGF0aCBoYXMgbm8gdHJhaWxpbmcgXFxcIipcXFwiLiBUaGlzIG1lYW5zIGlmIHlvdSBuYXZpZ2F0ZSBcIiArIFwiZGVlcGVyLCB0aGUgcGFyZW50IHdvbid0IG1hdGNoIGFueW1vcmUgYW5kIHRoZXJlZm9yZSB0aGUgY2hpbGQgXCIgKyBcInJvdXRlcyB3aWxsIG5ldmVyIHJlbmRlci5cXG5cXG5cIiArIChcIlBsZWFzZSBjaGFuZ2UgdGhlIHBhcmVudCA8Um91dGUgcGF0aD1cXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiPiB0byA8Um91dGUgXCIpICsgKFwicGF0aD1cXFwiXCIgKyAocGFyZW50UGF0aCA9PT0gXCIvXCIgPyBcIipcIiA6IHBhcmVudFBhdGggKyBcIi8qXCIpICsgXCJcXFwiPi5cIikpO1xuICB9XG5cbiAgbGV0IGxvY2F0aW9uRnJvbUNvbnRleHQgPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbG9jYXRpb247XG5cbiAgaWYgKGxvY2F0aW9uQXJnKSB7XG4gICAgdmFyIF9wYXJzZWRMb2NhdGlvbkFyZyRwYTtcblxuICAgIGxldCBwYXJzZWRMb2NhdGlvbkFyZyA9IHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcbiAgICAhKHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgfHwgKChfcGFyc2VkTG9jYXRpb25BcmckcGEgPSBwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYXJzZWRMb2NhdGlvbkFyZyRwYS5zdGFydHNXaXRoKHBhcmVudFBhdGhuYW1lQmFzZSkpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiV2hlbiBvdmVycmlkaW5nIHRoZSBsb2NhdGlvbiB1c2luZyBgPFJvdXRlcyBsb2NhdGlvbj5gIG9yIGB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbilgLCBcIiArIFwidGhlIGxvY2F0aW9uIHBhdGhuYW1lIG11c3QgYmVnaW4gd2l0aCB0aGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIFwiICsgKFwibWF0Y2hlZCBieSBhbGwgcGFyZW50IHJvdXRlcy4gVGhlIGN1cnJlbnQgcGF0aG5hbWUgYmFzZSBpcyBcXFwiXCIgKyBwYXJlbnRQYXRobmFtZUJhc2UgKyBcIlxcXCIgXCIpICsgKFwiYnV0IHBhdGhuYW1lIFxcXCJcIiArIHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lICsgXCJcXFwiIHdhcyBnaXZlbiBpbiB0aGUgYGxvY2F0aW9uYCBwcm9wLlwiKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBsb2NhdGlvbiA9IHBhcnNlZExvY2F0aW9uQXJnO1xuICB9IGVsc2Uge1xuICAgIGxvY2F0aW9uID0gbG9jYXRpb25Gcm9tQ29udGV4dDtcbiAgfVxuXG4gIGxldCBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lIHx8IFwiL1wiO1xuICBsZXQgcmVtYWluaW5nUGF0aG5hbWUgPSBwYXJlbnRQYXRobmFtZUJhc2UgPT09IFwiL1wiID8gcGF0aG5hbWUgOiBwYXRobmFtZS5zbGljZShwYXJlbnRQYXRobmFtZUJhc2UubGVuZ3RoKSB8fCBcIi9cIjtcbiAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXMsIHtcbiAgICBwYXRobmFtZTogcmVtYWluaW5nUGF0aG5hbWVcbiAgfSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocGFyZW50Um91dGUgfHwgbWF0Y2hlcyAhPSBudWxsLCBcIk5vIHJvdXRlcyBtYXRjaGVkIGxvY2F0aW9uIFxcXCJcIiArIGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoICsgbG9jYXRpb24uaGFzaCArIFwiXFxcIiBcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhtYXRjaGVzID09IG51bGwgfHwgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmVsZW1lbnQgIT09IHVuZGVmaW5lZCwgXCJNYXRjaGVkIGxlYWYgcm91dGUgYXQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIGRvZXMgbm90IGhhdmUgYW4gZWxlbWVudC4gXCIgKyBcIlRoaXMgbWVhbnMgaXQgd2lsbCByZW5kZXIgYW4gPE91dGxldCAvPiB3aXRoIGEgbnVsbCB2YWx1ZSBieSBkZWZhdWx0IHJlc3VsdGluZyBpbiBhbiBcXFwiZW1wdHlcXFwiIHBhZ2UuXCIpIDogdm9pZCAwO1xuICB9XG5cbiAgbGV0IHJlbmRlcmVkTWF0Y2hlcyA9IF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMgJiYgbWF0Y2hlcy5tYXAobWF0Y2ggPT4gT2JqZWN0LmFzc2lnbih7fSwgbWF0Y2gsIHtcbiAgICBwYXJhbXM6IE9iamVjdC5hc3NpZ24oe30sIHBhcmVudFBhcmFtcywgbWF0Y2gucGFyYW1zKSxcbiAgICBwYXRobmFtZTogam9pblBhdGhzKFtwYXJlbnRQYXRobmFtZUJhc2UsIC8vIFJlLWVuY29kZSBwYXRobmFtZXMgdGhhdCB3ZXJlIGRlY29kZWQgaW5zaWRlIG1hdGNoUm91dGVzXG4gICAgbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKG1hdGNoLnBhdGhuYW1lKS5wYXRobmFtZSA6IG1hdGNoLnBhdGhuYW1lXSksXG4gICAgcGF0aG5hbWVCYXNlOiBtYXRjaC5wYXRobmFtZUJhc2UgPT09IFwiL1wiID8gcGFyZW50UGF0aG5hbWVCYXNlIDogam9pblBhdGhzKFtwYXJlbnRQYXRobmFtZUJhc2UsIC8vIFJlLWVuY29kZSBwYXRobmFtZXMgdGhhdCB3ZXJlIGRlY29kZWQgaW5zaWRlIG1hdGNoUm91dGVzXG4gICAgbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKG1hdGNoLnBhdGhuYW1lQmFzZSkucGF0aG5hbWUgOiBtYXRjaC5wYXRobmFtZUJhc2VdKVxuICB9KSksIHBhcmVudE1hdGNoZXMsIGRhdGFSb3V0ZXJTdGF0ZUNvbnRleHQgfHwgdW5kZWZpbmVkKTsgLy8gV2hlbiBhIHVzZXIgcGFzc2VzIGluIGEgYGxvY2F0aW9uQXJnYCwgdGhlIGFzc29jaWF0ZWQgcm91dGVzIG5lZWQgdG9cbiAgLy8gYmUgd3JhcHBlZCBpbiBhIG5ldyBgTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyYCBpbiBvcmRlciBmb3IgYHVzZUxvY2F0aW9uYFxuICAvLyB0byB1c2UgdGhlIHNjb3BlZCBsb2NhdGlvbiBpbnN0ZWFkIG9mIHRoZSBnbG9iYWwgbG9jYXRpb24uXG5cblxuICBpZiAobG9jYXRpb25BcmcgJiYgcmVuZGVyZWRNYXRjaGVzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExvY2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgbG9jYXRpb246IF9leHRlbmRzKHtcbiAgICAgICAgICBwYXRobmFtZTogXCIvXCIsXG4gICAgICAgICAgc2VhcmNoOiBcIlwiLFxuICAgICAgICAgIGhhc2g6IFwiXCIsXG4gICAgICAgICAgc3RhdGU6IG51bGwsXG4gICAgICAgICAga2V5OiBcImRlZmF1bHRcIlxuICAgICAgICB9LCBsb2NhdGlvbiksXG4gICAgICAgIG5hdmlnYXRpb25UeXBlOiBBY3Rpb24uUG9wXG4gICAgICB9XG4gICAgfSwgcmVuZGVyZWRNYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIERlZmF1bHRFcnJvckVsZW1lbnQoKSB7XG4gIGxldCBlcnJvciA9IHVzZVJvdXRlRXJyb3IoKTtcbiAgbGV0IG1lc3NhZ2UgPSBpc1JvdXRlRXJyb3JSZXNwb25zZShlcnJvcikgPyBlcnJvci5zdGF0dXMgKyBcIiBcIiArIGVycm9yLnN0YXR1c1RleHQgOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IEpTT04uc3RyaW5naWZ5KGVycm9yKTtcbiAgbGV0IHN0YWNrID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLnN0YWNrIDogbnVsbDtcbiAgbGV0IGxpZ2h0Z3JleSA9IFwicmdiYSgyMDAsMjAwLDIwMCwgMC41KVwiO1xuICBsZXQgcHJlU3R5bGVzID0ge1xuICAgIHBhZGRpbmc6IFwiMC41cmVtXCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXlcbiAgfTtcbiAgbGV0IGNvZGVTdHlsZXMgPSB7XG4gICAgcGFkZGluZzogXCIycHggNHB4XCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXlcbiAgfTtcbiAgbGV0IGRldkluZm8gPSBudWxsO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBkZXZJbmZvID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLCBcIlxcdUQ4M0RcXHVEQ0JGIEhleSBkZXZlbG9wZXIgXFx1RDgzRFxcdURDNEJcIiksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLCBcIllvdSBjYW4gcHJvdmlkZSBhIHdheSBiZXR0ZXIgVVggdGhhbiB0aGlzIHdoZW4geW91ciBhcHAgdGhyb3dzIGVycm9ycyBieSBwcm92aWRpbmcgeW91ciBvd25cXHhBMFwiLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNvZGVcIiwge1xuICAgICAgc3R5bGU6IGNvZGVTdHlsZXNcbiAgICB9LCBcImVycm9yRWxlbWVudFwiKSwgXCIgcHJvcHMgb25cXHhBMFwiLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNvZGVcIiwge1xuICAgICAgc3R5bGU6IGNvZGVTdHlsZXNcbiAgICB9LCBcIjxSb3V0ZT5cIikpKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoMlwiLCBudWxsLCBcIlVuZXhwZWN0ZWQgQXBwbGljYXRpb24gRXJyb3IhXCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImgzXCIsIHtcbiAgICBzdHlsZToge1xuICAgICAgZm9udFN0eWxlOiBcIml0YWxpY1wiXG4gICAgfVxuICB9LCBtZXNzYWdlKSwgc3RhY2sgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInByZVwiLCB7XG4gICAgc3R5bGU6IHByZVN0eWxlc1xuICB9LCBzdGFjaykgOiBudWxsLCBkZXZJbmZvKTtcbn1cblxuY2xhc3MgUmVuZGVyRXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMubG9jYXRpb24sXG4gICAgICBlcnJvcjogcHJvcHMuZXJyb3JcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogZXJyb3JcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhwcm9wcywgc3RhdGUpIHtcbiAgICAvLyBXaGVuIHdlIGdldCBpbnRvIGFuIGVycm9yIHN0YXRlLCB0aGUgdXNlciB3aWxsIGxpa2VseSBjbGljayBcImJhY2tcIiB0byB0aGVcbiAgICAvLyBwcmV2aW91cyBwYWdlIHRoYXQgZGlkbid0IGhhdmUgYW4gZXJyb3IuIEJlY2F1c2UgdGhpcyB3cmFwcyB0aGUgZW50aXJlXG4gICAgLy8gYXBwbGljYXRpb24sIHRoYXQgd2lsbCBoYXZlIG5vIGVmZmVjdC0tdGhlIGVycm9yIHBhZ2UgY29udGludWVzIHRvIGRpc3BsYXkuXG4gICAgLy8gVGhpcyBnaXZlcyB1cyBhIG1lY2hhbmlzbSB0byByZWNvdmVyIGZyb20gdGhlIGVycm9yIHdoZW4gdGhlIGxvY2F0aW9uIGNoYW5nZXMuXG4gICAgLy9cbiAgICAvLyBXaGV0aGVyIHdlJ3JlIGluIGFuIGVycm9yIHN0YXRlIG9yIG5vdCwgd2UgdXBkYXRlIHRoZSBsb2NhdGlvbiBpbiBzdGF0ZVxuICAgIC8vIHNvIHRoYXQgd2hlbiB3ZSBhcmUgaW4gYW4gZXJyb3Igc3RhdGUsIGl0IGdldHMgcmVzZXQgd2hlbiBhIG5ldyBsb2NhdGlvblxuICAgIC8vIGNvbWVzIGluIGFuZCB0aGUgdXNlciByZWNvdmVycyBmcm9tIHRoZSBlcnJvci5cbiAgICBpZiAoc3RhdGUubG9jYXRpb24gIT09IHByb3BzLmxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjogcHJvcHMuZXJyb3IsXG4gICAgICAgIGxvY2F0aW9uOiBwcm9wcy5sb2NhdGlvblxuICAgICAgfTtcbiAgICB9IC8vIElmIHdlJ3JlIG5vdCBjaGFuZ2luZyBsb2NhdGlvbnMsIHByZXNlcnZlIHRoZSBsb2NhdGlvbiBidXQgc3RpbGwgc3VyZmFjZVxuICAgIC8vIGFueSBuZXcgZXJyb3JzIHRoYXQgbWF5IGNvbWUgdGhyb3VnaC4gV2UgcmV0YWluIHRoZSBleGlzdGluZyBlcnJvciwgd2UgZG9cbiAgICAvLyB0aGlzIGJlY2F1c2UgdGhlIGVycm9yIHByb3ZpZGVkIGZyb20gdGhlIGFwcCBzdGF0ZSBtYXkgYmUgY2xlYXJlZCB3aXRob3V0XG4gICAgLy8gdGhlIGxvY2F0aW9uIGNoYW5naW5nLlxuXG5cbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IHByb3BzLmVycm9yIHx8IHN0YXRlLmVycm9yLFxuICAgICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZENhdGNoKGVycm9yLCBlcnJvckluZm8pIHtcbiAgICBjb25zb2xlLmVycm9yKFwiUmVhY3QgUm91dGVyIGNhdWdodCB0aGUgZm9sbG93aW5nIGVycm9yIGR1cmluZyByZW5kZXJcIiwgZXJyb3IsIGVycm9ySW5mbyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZXJyb3IgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnJvdXRlQ29udGV4dFxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlRXJyb3JDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5lcnJvcixcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgIH0pKSA6IHRoaXMucHJvcHMuY2hpbGRyZW47XG4gIH1cblxufVxuXG5mdW5jdGlvbiBSZW5kZXJlZFJvdXRlKF9yZWYpIHtcbiAgbGV0IHtcbiAgICByb3V0ZUNvbnRleHQsXG4gICAgbWF0Y2gsXG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpOyAvLyBUcmFjayBob3cgZGVlcCB3ZSBnb3QgaW4gb3VyIHJlbmRlciBwYXNzIHRvIGVtdWxhdGUgU1NSIGNvbXBvbmVudERpZENhdGNoXG4gIC8vIGluIGEgRGF0YVN0YXRpY1JvdXRlclxuXG4gIGlmIChkYXRhUm91dGVyQ29udGV4dCAmJiBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWMgJiYgZGF0YVJvdXRlckNvbnRleHQuc3RhdGljQ29udGV4dCAmJiBtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQpIHtcbiAgICBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWNDb250ZXh0Ll9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkID0gbWF0Y2gucm91dGUuaWQ7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHJvdXRlQ29udGV4dFxuICB9LCBjaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMsIHBhcmVudE1hdGNoZXMsIGRhdGFSb3V0ZXJTdGF0ZSkge1xuICBpZiAocGFyZW50TWF0Y2hlcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50TWF0Y2hlcyA9IFtdO1xuICB9XG5cbiAgaWYgKG1hdGNoZXMgPT0gbnVsbCkge1xuICAgIGlmIChkYXRhUm91dGVyU3RhdGUgIT0gbnVsbCAmJiBkYXRhUm91dGVyU3RhdGUuZXJyb3JzKSB7XG4gICAgICAvLyBEb24ndCBiYWlsIGlmIHdlIGhhdmUgZGF0YSByb3V0ZXIgZXJyb3JzIHNvIHdlIGNhbiByZW5kZXIgdGhlbSBpbiB0aGVcbiAgICAgIC8vIGJvdW5kYXJ5LiAgVXNlIHRoZSBwcmUtbWF0Y2hlZCAob3Igc2hpbW1lZCkgbWF0Y2hlc1xuICAgICAgbWF0Y2hlcyA9IGRhdGFSb3V0ZXJTdGF0ZS5tYXRjaGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBsZXQgcmVuZGVyZWRNYXRjaGVzID0gbWF0Y2hlczsgLy8gSWYgd2UgaGF2ZSBkYXRhIGVycm9ycywgdHJpbSBtYXRjaGVzIHRvIHRoZSBoaWdoZXN0IGVycm9yIGJvdW5kYXJ5XG5cbiAgbGV0IGVycm9ycyA9IGRhdGFSb3V0ZXJTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogZGF0YVJvdXRlclN0YXRlLmVycm9ycztcblxuICBpZiAoZXJyb3JzICE9IG51bGwpIHtcbiAgICBsZXQgZXJyb3JJbmRleCA9IHJlbmRlcmVkTWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkICYmIChlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yc1ttLnJvdXRlLmlkXSkpO1xuICAgICEoZXJyb3JJbmRleCA+PSAwKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiQ291bGQgbm90IGZpbmQgYSBtYXRjaGluZyByb3V0ZSBmb3IgdGhlIGN1cnJlbnQgZXJyb3JzOiBcIiArIGVycm9ycykgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZW5kZXJlZE1hdGNoZXMgPSByZW5kZXJlZE1hdGNoZXMuc2xpY2UoMCwgTWF0aC5taW4ocmVuZGVyZWRNYXRjaGVzLmxlbmd0aCwgZXJyb3JJbmRleCArIDEpKTtcbiAgfVxuXG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXMucmVkdWNlUmlnaHQoKG91dGxldCwgbWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgbGV0IGVycm9yID0gbWF0Y2gucm91dGUuaWQgPyBlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yc1ttYXRjaC5yb3V0ZS5pZF0gOiBudWxsOyAvLyBPbmx5IGRhdGEgcm91dGVycyBoYW5kbGUgZXJyb3JzXG5cbiAgICBsZXQgZXJyb3JFbGVtZW50ID0gZGF0YVJvdXRlclN0YXRlID8gbWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRFcnJvckVsZW1lbnQsIG51bGwpIDogbnVsbDtcbiAgICBsZXQgbWF0Y2hlcyA9IHBhcmVudE1hdGNoZXMuY29uY2F0KHJlbmRlcmVkTWF0Y2hlcy5zbGljZSgwLCBpbmRleCArIDEpKTtcblxuICAgIGxldCBnZXRDaGlsZHJlbiA9ICgpID0+IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlbmRlcmVkUm91dGUsIHtcbiAgICAgIG1hdGNoOiBtYXRjaCxcbiAgICAgIHJvdXRlQ29udGV4dDoge1xuICAgICAgICBvdXRsZXQsXG4gICAgICAgIG1hdGNoZXNcbiAgICAgIH1cbiAgICB9LCBlcnJvciA/IGVycm9yRWxlbWVudCA6IG1hdGNoLnJvdXRlLmVsZW1lbnQgIT09IHVuZGVmaW5lZCA/IG1hdGNoLnJvdXRlLmVsZW1lbnQgOiBvdXRsZXQpOyAvLyBPbmx5IHdyYXAgaW4gYW4gZXJyb3IgYm91bmRhcnkgd2l0aGluIGRhdGEgcm91dGVyIHVzYWdlcyB3aGVuIHdlIGhhdmUgYW5cbiAgICAvLyBlcnJvckVsZW1lbnQgb24gdGhpcyByb3V0ZS4gIE90aGVyd2lzZSBsZXQgaXQgYnViYmxlIHVwIHRvIGFuIGFuY2VzdG9yXG4gICAgLy8gZXJyb3JFbGVtZW50XG5cblxuICAgIHJldHVybiBkYXRhUm91dGVyU3RhdGUgJiYgKG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCBpbmRleCA9PT0gMCkgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZW5kZXJFcnJvckJvdW5kYXJ5LCB7XG4gICAgICBsb2NhdGlvbjogZGF0YVJvdXRlclN0YXRlLmxvY2F0aW9uLFxuICAgICAgY29tcG9uZW50OiBlcnJvckVsZW1lbnQsXG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgICBjaGlsZHJlbjogZ2V0Q2hpbGRyZW4oKSxcbiAgICAgIHJvdXRlQ29udGV4dDoge1xuICAgICAgICBvdXRsZXQ6IG51bGwsXG4gICAgICAgIG1hdGNoZXNcbiAgICAgIH1cbiAgICB9KSA6IGdldENoaWxkcmVuKCk7XG4gIH0sIG51bGwpO1xufVxudmFyIERhdGFSb3V0ZXJIb29rO1xuXG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJIb29rKSB7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlQmxvY2tlclwiXSA9IFwidXNlQmxvY2tlclwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZVJldmFsaWRhdG9yXCJdID0gXCJ1c2VSZXZhbGlkYXRvclwiO1xufSkoRGF0YVJvdXRlckhvb2sgfHwgKERhdGFSb3V0ZXJIb29rID0ge30pKTtcblxudmFyIERhdGFSb3V0ZXJTdGF0ZUhvb2s7XG5cbihmdW5jdGlvbiAoRGF0YVJvdXRlclN0YXRlSG9vaykge1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTG9hZGVyRGF0YVwiXSA9IFwidXNlTG9hZGVyRGF0YVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlQWN0aW9uRGF0YVwiXSA9IFwidXNlQWN0aW9uRGF0YVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUm91dGVFcnJvclwiXSA9IFwidXNlUm91dGVFcnJvclwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTmF2aWdhdGlvblwiXSA9IFwidXNlTmF2aWdhdGlvblwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUm91dGVMb2FkZXJEYXRhXCJdID0gXCJ1c2VSb3V0ZUxvYWRlckRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZU1hdGNoZXNcIl0gPSBcInVzZU1hdGNoZXNcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJldmFsaWRhdG9yXCJdID0gXCJ1c2VSZXZhbGlkYXRvclwiO1xufSkoRGF0YVJvdXRlclN0YXRlSG9vayB8fCAoRGF0YVJvdXRlclN0YXRlSG9vayA9IHt9KSk7XG5cbmZ1bmN0aW9uIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpIHtcbiAgcmV0dXJuIGhvb2tOYW1lICsgXCIgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGRhdGEgcm91dGVyLiAgU2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5cIjtcbn1cblxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuICAhY3R4ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBjdHg7XG59XG5cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJTdGF0ZShob29rTmFtZSkge1xuICBsZXQgc3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICAhc3RhdGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG5mdW5jdGlvbiB1c2VSb3V0ZUNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHJvdXRlO1xufVxuXG5mdW5jdGlvbiB1c2VDdXJyZW50Um91dGVJZChob29rTmFtZSkge1xuICBsZXQgcm91dGUgPSB1c2VSb3V0ZUNvbnRleHQoaG9va05hbWUpO1xuICBsZXQgdGhpc1JvdXRlID0gcm91dGUubWF0Y2hlc1tyb3V0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdO1xuICAhdGhpc1JvdXRlLnJvdXRlLmlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgaG9va05hbWUgKyBcIiBjYW4gb25seSBiZSB1c2VkIG9uIHJvdXRlcyB0aGF0IGNvbnRhaW4gYSB1bmlxdWUgXFxcImlkXFxcIlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gdGhpc1JvdXRlLnJvdXRlLmlkO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IG5hdmlnYXRpb24sIGRlZmF1bHRpbmcgdG8gYW4gXCJpZGxlXCIgbmF2aWdhdGlvbiB3aGVuXG4gKiBubyBuYXZpZ2F0aW9uIGlzIGluIHByb2dyZXNzXG4gKi9cblxuXG5mdW5jdGlvbiB1c2VOYXZpZ2F0aW9uKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VOYXZpZ2F0aW9uKTtcbiAgcmV0dXJuIHN0YXRlLm5hdmlnYXRpb247XG59XG4vKipcbiAqIFJldHVybnMgYSByZXZhbGlkYXRlIGZ1bmN0aW9uIGZvciBtYW51YWxseSB0cmlnZ2VyaW5nIHJldmFsaWRhdGlvbiwgYXMgd2VsbFxuICogYXMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgYW55IG1hbnVhbCByZXZhbGlkYXRpb25zXG4gKi9cblxuZnVuY3Rpb24gdXNlUmV2YWxpZGF0b3IoKSB7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVJldmFsaWRhdG9yKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUmV2YWxpZGF0b3IpO1xuICByZXR1cm4ge1xuICAgIHJldmFsaWRhdGU6IGRhdGFSb3V0ZXJDb250ZXh0LnJvdXRlci5yZXZhbGlkYXRlLFxuICAgIHN0YXRlOiBzdGF0ZS5yZXZhbGlkYXRpb25cbiAgfTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aXZlIHJvdXRlIG1hdGNoZXMsIHVzZWZ1bCBmb3IgYWNjZXNzaW5nIGxvYWRlckRhdGEgZm9yXG4gKiBwYXJlbnQvY2hpbGQgcm91dGVzIG9yIHRoZSByb3V0ZSBcImhhbmRsZVwiIHByb3BlcnR5XG4gKi9cblxuZnVuY3Rpb24gdXNlTWF0Y2hlcygpIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzLFxuICAgIGxvYWRlckRhdGFcbiAgfSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZU1hdGNoZXMpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiBtYXRjaGVzLm1hcChtYXRjaCA9PiB7XG4gICAgbGV0IHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IG1hdGNoOyAvLyBOb3RlOiBUaGlzIHN0cnVjdHVyZSBtYXRjaGVzIHRoYXQgY3JlYXRlZCBieSBjcmVhdGVVc2VNYXRjaGVzTWF0Y2hcbiAgICAvLyBpbiB0aGUgQHJlbWl4LXJ1bi9yb3V0ZXIgLCBzbyBpZiB5b3UgY2hhbmdlIHRoaXMgcGxlYXNlIGFsc28gY2hhbmdlXG4gICAgLy8gdGhhdCA6KSAgRXZlbnR1YWxseSB3ZSdsbCBEUlkgdGhpcyB1cFxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBtYXRjaC5yb3V0ZS5pZCxcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgcGFyYW1zLFxuICAgICAgZGF0YTogbG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0sXG4gICAgICBoYW5kbGU6IG1hdGNoLnJvdXRlLmhhbmRsZVxuICAgIH07XG4gIH0pLCBbbWF0Y2hlcywgbG9hZGVyRGF0YV0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBsb2FkZXIgZGF0YSBmb3IgdGhlIG5lYXJlc3QgYW5jZXN0b3IgUm91dGUgbG9hZGVyXG4gKi9cblxuZnVuY3Rpb24gdXNlTG9hZGVyRGF0YSgpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTG9hZGVyRGF0YSk7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcblxuICBpZiAoc3RhdGUuZXJyb3JzICYmIHN0YXRlLmVycm9yc1tyb3V0ZUlkXSAhPSBudWxsKSB7XG4gICAgY29uc29sZS5lcnJvcihcIllvdSBjYW5ub3QgYHVzZUxvYWRlckRhdGFgIGluIGFuIGVycm9yRWxlbWVudCAocm91dGVJZDogXCIgKyByb3V0ZUlkICsgXCIpXCIpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZUlkXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyRGF0YSBmb3IgdGhlIGdpdmVuIHJvdXRlSWRcbiAqL1xuXG5mdW5jdGlvbiB1c2VSb3V0ZUxvYWRlckRhdGEocm91dGVJZCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUxvYWRlckRhdGEpO1xuICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZUlkXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aW9uIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGFjdGlvblxuICovXG5cbmZ1bmN0aW9uIHVzZUFjdGlvbkRhdGEoKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUFjdGlvbkRhdGEpO1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlQWN0aW9uRGF0YSBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBPYmplY3QudmFsdWVzKChzdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogc3RhdGUuYWN0aW9uRGF0YSkgfHwge30pWzBdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGVycm9yLCB3aGljaCBjb3VsZCBiZSBhIGxvYWRlci9hY3Rpb25cbiAqIGVycm9yIG9yIGEgcmVuZGVyIGVycm9yLiAgVGhpcyBpcyBpbnRlbmRlZCB0byBiZSBjYWxsZWQgZnJvbSB5b3VyXG4gKiBlcnJvckVsZW1lbnQgdG8gZGlzcGxheSBhIHByb3BlciBlcnJvciBtZXNzYWdlLlxuICovXG5cbmZ1bmN0aW9uIHVzZVJvdXRlRXJyb3IoKSB7XG4gIHZhciBfc3RhdGUkZXJyb3JzO1xuXG4gIGxldCBlcnJvciA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVFcnJvckNvbnRleHQpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUVycm9yKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlRXJyb3IpOyAvLyBJZiB0aGlzIHdhcyBhIHJlbmRlciBlcnJvciwgd2UgcHV0IGl0IGluIGEgUm91dGVFcnJvciBjb250ZXh0IGluc2lkZVxuICAvLyBvZiBSZW5kZXJFcnJvckJvdW5kYXJ5XG5cbiAgaWYgKGVycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9IC8vIE90aGVyd2lzZSBsb29rIGZvciBlcnJvcnMgZnJvbSBvdXIgZGF0YSByb3V0ZXIgc3RhdGVcblxuXG4gIHJldHVybiAoX3N0YXRlJGVycm9ycyA9IHN0YXRlLmVycm9ycykgPT0gbnVsbCA/IHZvaWQgMCA6IF9zdGF0ZSRlcnJvcnNbcm91dGVJZF07XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGhhcHB5LXBhdGggZGF0YSBmcm9tIHRoZSBuZWFyZXN0IGFuY2VzdG9yIDxBd2FpdCAvPiB2YWx1ZVxuICovXG5cbmZ1bmN0aW9uIHVzZUFzeW5jVmFsdWUoKSB7XG4gIGxldCB2YWx1ZSA9IFJlYWN0LnVzZUNvbnRleHQoQXdhaXRDb250ZXh0KTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB2b2lkIDAgOiB2YWx1ZS5fZGF0YTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZXJyb3IgZnJvbSB0aGUgbmVhcmVzdCBhbmNlc3RvciA8QXdhaXQgLz4gdmFsdWVcbiAqL1xuXG5mdW5jdGlvbiB1c2VBc3luY0Vycm9yKCkge1xuICBsZXQgdmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KEF3YWl0Q29udGV4dCk7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdm9pZCAwIDogdmFsdWUuX2Vycm9yO1xufVxubGV0IGJsb2NrZXJJZCA9IDA7XG4vKipcbiAqIEFsbG93IHRoZSBhcHBsaWNhdGlvbiB0byBibG9jayBuYXZpZ2F0aW9ucyB3aXRoaW4gdGhlIFNQQSBhbmQgcHJlc2VudCB0aGVcbiAqIHVzZXIgYSBjb25maXJtYXRpb24gZGlhbG9nIHRvIGNvbmZpcm0gdGhlIG5hdmlnYXRpb24uICBNb3N0bHkgdXNlZCB0byBhdm9pZFxuICogdXNpbmcgaGFsZi1maWxsZWQgZm9ybSBkYXRhLiAgVGhpcyBkb2VzIG5vdCBoYW5kbGUgaGFyZC1yZWxvYWRzIG9yXG4gKiBjcm9zcy1vcmlnaW4gbmF2aWdhdGlvbnMuXG4gKi9cblxuZnVuY3Rpb24gdXNlQmxvY2tlcihzaG91bGRCbG9jaykge1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlQmxvY2tlcik7XG4gIGxldCBbYmxvY2tlcktleV0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiBTdHJpbmcoKytibG9ja2VySWQpKTtcbiAgbGV0IGJsb2NrZXJGdW5jdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKGFyZ3MgPT4ge1xuICAgIHJldHVybiB0eXBlb2Ygc2hvdWxkQmxvY2sgPT09IFwiZnVuY3Rpb25cIiA/ICEhc2hvdWxkQmxvY2soYXJncykgOiAhIXNob3VsZEJsb2NrO1xuICB9LCBbc2hvdWxkQmxvY2tdKTtcbiAgbGV0IGJsb2NrZXIgPSByb3V0ZXIuZ2V0QmxvY2tlcihibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb24pOyAvLyBDbGVhbnVwIG9uIHVubW91bnRcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gKCkgPT4gcm91dGVyLmRlbGV0ZUJsb2NrZXIoYmxvY2tlcktleSksIFtyb3V0ZXIsIGJsb2NrZXJLZXldKTtcbiAgcmV0dXJuIGJsb2NrZXI7XG59XG5jb25zdCBhbHJlYWR5V2FybmVkID0ge307XG5cbmZ1bmN0aW9uIHdhcm5pbmdPbmNlKGtleSwgY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQgJiYgIWFscmVhZHlXYXJuZWRba2V5XSkge1xuICAgIGFscmVhZHlXYXJuZWRba2V5XSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgbWVzc2FnZSkgOiB2b2lkIDA7XG4gIH1cbn1cblxuLyoqXG4gKiBHaXZlbiBhIFJlbWl4IFJvdXRlciBpbnN0YW5jZSwgcmVuZGVyIHRoZSBhcHByb3ByaWF0ZSBVSVxuICovXG5mdW5jdGlvbiBSb3V0ZXJQcm92aWRlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgZmFsbGJhY2tFbGVtZW50LFxuICAgIHJvdXRlclxuICB9ID0gX3JlZjtcbiAgLy8gU3luYyByb3V0ZXIgc3RhdGUgdG8gb3VyIGNvbXBvbmVudCBzdGF0ZSB0byBmb3JjZSByZS1yZW5kZXJzXG4gIGxldCBzdGF0ZSA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlKHJvdXRlci5zdWJzY3JpYmUsICgpID0+IHJvdXRlci5zdGF0ZSwgLy8gV2UgaGF2ZSB0byBwcm92aWRlIHRoaXMgc28gUmVhY3RAMTggZG9lc24ndCBjb21wbGFpbiBkdXJpbmcgaHlkcmF0aW9uLFxuICAvLyBidXQgd2UgcGFzcyBvdXIgc2VyaWFsaXplZCBoeWRyYXRpb24gZGF0YSBpbnRvIHRoZSByb3V0ZXIgc28gc3RhdGUgaGVyZVxuICAvLyBpcyBhbHJlYWR5IHN5bmNlZCB3aXRoIHdoYXQgdGhlIHNlcnZlciBzYXdcbiAgKCkgPT4gcm91dGVyLnN0YXRlKTtcbiAgbGV0IG5hdmlnYXRvciA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVIcmVmOiByb3V0ZXIuY3JlYXRlSHJlZixcbiAgICAgIGVuY29kZUxvY2F0aW9uOiByb3V0ZXIuZW5jb2RlTG9jYXRpb24sXG4gICAgICBnbzogbiA9PiByb3V0ZXIubmF2aWdhdGUobiksXG4gICAgICBwdXNoOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pLFxuICAgICAgcmVwbGFjZTogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KVxuICAgIH07XG4gIH0sIFtyb3V0ZXJdKTtcbiAgbGV0IGJhc2VuYW1lID0gcm91dGVyLmJhc2VuYW1lIHx8IFwiL1wiOyAvLyBUaGUgZnJhZ21lbnQgYW5kIHtudWxsfSBoZXJlIGFyZSBpbXBvcnRhbnQhICBXZSBuZWVkIHRoZW0gdG8ga2VlcCBSZWFjdCAxOCdzXG4gIC8vIHVzZUlkIGhhcHB5IHdoZW4gd2UgYXJlIHNlcnZlci1yZW5kZXJpbmcgc2luY2Ugd2UgbWF5IGhhdmUgYSA8c2NyaXB0PiBoZXJlXG4gIC8vIGNvbnRhaW5pbmcgdGhlIGh5ZHJhdGVkIHNlcnZlci1zaWRlIHN0YXRpY0NvbnRleHQgKGZyb20gU3RhdGljUm91dGVyUHJvdmlkZXIpLlxuICAvLyB1c2VJZCByZWxpZXMgb24gdGhlIGNvbXBvbmVudCB0cmVlIHN0cnVjdHVyZSB0byBnZW5lcmF0ZSBkZXRlcm1pbmlzdGljIGlkJ3NcbiAgLy8gc28gd2UgbmVlZCB0byBlbnN1cmUgaXQgcmVtYWlucyB0aGUgc2FtZSBvbiB0aGUgY2xpZW50IGV2ZW4gdGhvdWdoXG4gIC8vIHdlIGRvbid0IG5lZWQgdGhlIDxzY3JpcHQ+IHRhZ1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZToge1xuICAgICAgcm91dGVyLFxuICAgICAgbmF2aWdhdG9yLFxuICAgICAgc3RhdGljOiBmYWxzZSxcbiAgICAgIC8vIERvIHdlIG5lZWQgdGhpcz9cbiAgICAgIGJhc2VuYW1lXG4gICAgfVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhUm91dGVyU3RhdGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHN0YXRlXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiByb3V0ZXIuYmFzZW5hbWUsXG4gICAgbG9jYXRpb246IHJvdXRlci5zdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogcm91dGVyLnN0YXRlLmhpc3RvcnlBY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBuYXZpZ2F0b3JcbiAgfSwgcm91dGVyLnN0YXRlLmluaXRpYWxpemVkID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVzLCBudWxsKSA6IGZhbGxiYWNrRWxlbWVudCkpKSwgbnVsbCk7XG59XG5cbi8qKlxuICogQSA8Um91dGVyPiB0aGF0IHN0b3JlcyBhbGwgZW50cmllcyBpbiBtZW1vcnkuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9yb3V0ZXItY29tcG9uZW50cy9tZW1vcnktcm91dGVyXG4gKi9cbmZ1bmN0aW9uIE1lbW9yeVJvdXRlcihfcmVmMikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGluaXRpYWxFbnRyaWVzLFxuICAgIGluaXRpYWxJbmRleFxuICB9ID0gX3JlZjI7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlTWVtb3J5SGlzdG9yeSh7XG4gICAgICBpbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxJbmRleCxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cblxuLyoqXG4gKiBDaGFuZ2VzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIE5vdGU6IFRoaXMgQVBJIGlzIG1vc3RseSB1c2VmdWwgaW4gUmVhY3QuQ29tcG9uZW50IHN1YmNsYXNzZXMgdGhhdCBhcmUgbm90XG4gKiBhYmxlIHRvIHVzZSBob29rcy4gSW4gZnVuY3Rpb25hbCBjb21wb25lbnRzLCB3ZSByZWNvbW1lbmQgeW91IHVzZSB0aGVcbiAqIGB1c2VOYXZpZ2F0ZWAgaG9vayBpbnN0ZWFkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9uYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiBOYXZpZ2F0ZShfcmVmMykge1xuICBsZXQge1xuICAgIHRvLFxuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgcmVsYXRpdmVcbiAgfSA9IF9yZWYzO1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZlxuICAvLyB0aGUgcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcIjxOYXZpZ2F0ZT4gbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCkuc3RhdGljLCBcIjxOYXZpZ2F0ZT4gbXVzdCBub3QgYmUgdXNlZCBvbiB0aGUgaW5pdGlhbCByZW5kZXIgaW4gYSA8U3RhdGljUm91dGVyPi4gXCIgKyBcIlRoaXMgaXMgYSBuby1vcCwgYnV0IHlvdSBzaG91bGQgbW9kaWZ5IHlvdXIgY29kZSBzbyB0aGUgPE5hdmlnYXRlPiBpcyBcIiArIFwib25seSBldmVyIHJlbmRlcmVkIGluIHJlc3BvbnNlIHRvIHNvbWUgdXNlciBpbnRlcmFjdGlvbiBvciBzdGF0ZSBjaGFuZ2UuXCIpIDogdm9pZCAwO1xuICBsZXQgZGF0YVJvdXRlclN0YXRlID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBBdm9pZCBraWNraW5nIG9mZiBtdWx0aXBsZSBuYXZpZ2F0aW9ucyBpZiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGFcbiAgICAvLyBkYXRhLXJvdXRlciBuYXZpZ2F0aW9uLCBzaW5jZSBjb21wb25lbnRzIGdldCByZS1yZW5kZXJlZCB3aGVuIHdlIGVudGVyXG4gICAgLy8gYSBzdWJtaXR0aW5nL2xvYWRpbmcgc3RhdGVcbiAgICBpZiAoZGF0YVJvdXRlclN0YXRlICYmIGRhdGFSb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlICE9PSBcImlkbGVcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG5hdmlnYXRlKHRvLCB7XG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGUsXG4gICAgICByZWxhdGl2ZVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogUmVuZGVycyB0aGUgY2hpbGQgcm91dGUncyBlbGVtZW50LCBpZiB0aGVyZSBpcyBvbmUuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL291dGxldFxuICovXG5mdW5jdGlvbiBPdXRsZXQocHJvcHMpIHtcbiAgcmV0dXJuIHVzZU91dGxldChwcm9wcy5jb250ZXh0KTtcbn1cblxuLyoqXG4gKiBEZWNsYXJlcyBhbiBlbGVtZW50IHRoYXQgc2hvdWxkIGJlIHJlbmRlcmVkIGF0IGEgY2VydGFpbiBVUkwgcGF0aC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvcm91dGVcbiAqL1xuZnVuY3Rpb24gUm91dGUoX3Byb3BzKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiQSA8Um91dGU+IGlzIG9ubHkgZXZlciB0byBiZSB1c2VkIGFzIHRoZSBjaGlsZCBvZiA8Um91dGVzPiBlbGVtZW50LCBcIiArIFwibmV2ZXIgcmVuZGVyZWQgZGlyZWN0bHkuIFBsZWFzZSB3cmFwIHlvdXIgPFJvdXRlPiBpbiBhIDxSb3V0ZXM+LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDtcbn1cblxuLyoqXG4gKiBQcm92aWRlcyBsb2NhdGlvbiBjb250ZXh0IGZvciB0aGUgcmVzdCBvZiB0aGUgYXBwLlxuICpcbiAqIE5vdGU6IFlvdSB1c3VhbGx5IHdvbid0IHJlbmRlciBhIDxSb3V0ZXI+IGRpcmVjdGx5LiBJbnN0ZWFkLCB5b3UnbGwgcmVuZGVyIGFcbiAqIHJvdXRlciB0aGF0IGlzIG1vcmUgc3BlY2lmaWMgdG8geW91ciBlbnZpcm9ubWVudCBzdWNoIGFzIGEgPEJyb3dzZXJSb3V0ZXI+XG4gKiBpbiB3ZWIgYnJvd3NlcnMgb3IgYSA8U3RhdGljUm91dGVyPiBmb3Igc2VydmVyIHJlbmRlcmluZy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlci1jb21wb25lbnRzL3JvdXRlclxuICovXG5mdW5jdGlvbiBSb3V0ZXIoX3JlZjQpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWVQcm9wID0gXCIvXCIsXG4gICAgY2hpbGRyZW4gPSBudWxsLFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvblByb3AsXG4gICAgbmF2aWdhdGlvblR5cGUgPSBBY3Rpb24uUG9wLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IHN0YXRpY1Byb3AgPSBmYWxzZVxuICB9ID0gX3JlZjQ7XG4gICEhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgcmVuZGVyIGEgPFJvdXRlcj4gaW5zaWRlIGFub3RoZXIgPFJvdXRlcj4uXCIgKyBcIiBZb3Ugc2hvdWxkIG5ldmVyIGhhdmUgbW9yZSB0aGFuIG9uZSBpbiB5b3VyIGFwcC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsgLy8gUHJlc2VydmUgdHJhaWxpbmcgc2xhc2hlcyBvbiBiYXNlbmFtZSwgc28gd2UgY2FuIGxldCB0aGUgdXNlciBjb250cm9sXG4gIC8vIHRoZSBlbmZvcmNlbWVudCBvZiB0cmFpbGluZyBzbGFzaGVzIHRocm91Z2hvdXQgdGhlIGFwcFxuXG4gIGxldCBiYXNlbmFtZSA9IGJhc2VuYW1lUHJvcC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcbiAgbGV0IG5hdmlnYXRpb25Db250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IHN0YXRpY1Byb3BcbiAgfSksIFtiYXNlbmFtZSwgbmF2aWdhdG9yLCBzdGF0aWNQcm9wXSk7XG5cbiAgaWYgKHR5cGVvZiBsb2NhdGlvblByb3AgPT09IFwic3RyaW5nXCIpIHtcbiAgICBsb2NhdGlvblByb3AgPSBwYXJzZVBhdGgobG9jYXRpb25Qcm9wKTtcbiAgfVxuXG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiLFxuICAgIHN0YXRlID0gbnVsbCxcbiAgICBrZXkgPSBcImRlZmF1bHRcIlxuICB9ID0gbG9jYXRpb25Qcm9wO1xuICBsZXQgbG9jYXRpb24gPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgdHJhaWxpbmdQYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUocGF0aG5hbWUsIGJhc2VuYW1lKTtcblxuICAgIGlmICh0cmFpbGluZ1BhdGhuYW1lID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwYXRobmFtZTogdHJhaWxpbmdQYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2gsXG4gICAgICBzdGF0ZSxcbiAgICAgIGtleVxuICAgIH07XG4gIH0sIFtiYXNlbmFtZSwgcGF0aG5hbWUsIHNlYXJjaCwgaGFzaCwgc3RhdGUsIGtleV0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGxvY2F0aW9uICE9IG51bGwsIFwiPFJvdXRlciBiYXNlbmFtZT1cXFwiXCIgKyBiYXNlbmFtZSArIFwiXFxcIj4gaXMgbm90IGFibGUgdG8gbWF0Y2ggdGhlIFVSTCBcIiArIChcIlxcXCJcIiArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaCArIFwiXFxcIiBiZWNhdXNlIGl0IGRvZXMgbm90IHN0YXJ0IHdpdGggdGhlIFwiKSArIFwiYmFzZW5hbWUsIHNvIHRoZSA8Um91dGVyPiB3b24ndCByZW5kZXIgYW55dGhpbmcuXCIpIDogdm9pZCAwO1xuXG4gIGlmIChsb2NhdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2aWdhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogbmF2aWdhdGlvbkNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIHZhbHVlOiB7XG4gICAgICBsb2NhdGlvbixcbiAgICAgIG5hdmlnYXRpb25UeXBlXG4gICAgfVxuICB9KSk7XG59XG5cbi8qKlxuICogQSBjb250YWluZXIgZm9yIGEgbmVzdGVkIHRyZWUgb2YgPFJvdXRlPiBlbGVtZW50cyB0aGF0IHJlbmRlcnMgdGhlIGJyYW5jaFxuICogdGhhdCBiZXN0IG1hdGNoZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL3JvdXRlc1xuICovXG5mdW5jdGlvbiBSb3V0ZXMoX3JlZjUpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlbixcbiAgICBsb2NhdGlvblxuICB9ID0gX3JlZjU7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpOyAvLyBXaGVuIGluIGEgRGF0YVJvdXRlckNvbnRleHQgX3dpdGhvdXRfIGNoaWxkcmVuLCB3ZSB1c2UgdGhlIHJvdXRlciByb3V0ZXNcbiAgLy8gZGlyZWN0bHkuICBJZiB3ZSBoYXZlIGNoaWxkcmVuLCB0aGVuIHdlJ3JlIGluIGEgZGVzY2VuZGFudCB0cmVlIGFuZCB3ZVxuICAvLyBuZWVkIHRvIHVzZSBjaGlsZCByb3V0ZXMuXG5cbiAgbGV0IHJvdXRlcyA9IGRhdGFSb3V0ZXJDb250ZXh0ICYmICFjaGlsZHJlbiA/IGRhdGFSb3V0ZXJDb250ZXh0LnJvdXRlci5yb3V0ZXMgOiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICByZXR1cm4gdXNlUm91dGVzKHJvdXRlcywgbG9jYXRpb24pO1xufVxuXG4vKipcbiAqIENvbXBvbmVudCB0byB1c2UgZm9yIHJlbmRlcmluZyBsYXppbHkgbG9hZGVkIGRhdGEgZnJvbSByZXR1cm5pbmcgZGVmZXIoKVxuICogaW4gYSBsb2FkZXIgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gQXdhaXQoX3JlZjYpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlbixcbiAgICBlcnJvckVsZW1lbnQsXG4gICAgcmVzb2x2ZVxuICB9ID0gX3JlZjY7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdEVycm9yQm91bmRhcnksIHtcbiAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgIGVycm9yRWxlbWVudDogZXJyb3JFbGVtZW50XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlc29sdmVBd2FpdCwgbnVsbCwgY2hpbGRyZW4pKTtcbn1cbnZhciBBd2FpdFJlbmRlclN0YXR1cztcblxuKGZ1bmN0aW9uIChBd2FpdFJlbmRlclN0YXR1cykge1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInBlbmRpbmdcIl0gPSAwXSA9IFwicGVuZGluZ1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInN1Y2Nlc3NcIl0gPSAxXSA9IFwic3VjY2Vzc1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcImVycm9yXCJdID0gMl0gPSBcImVycm9yXCI7XG59KShBd2FpdFJlbmRlclN0YXR1cyB8fCAoQXdhaXRSZW5kZXJTdGF0dXMgPSB7fSkpO1xuXG5jb25zdCBuZXZlclNldHRsZWRQcm9taXNlID0gbmV3IFByb21pc2UoKCkgPT4ge30pO1xuXG5jbGFzcyBBd2FpdEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZXJyb3I6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvclxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRDYXRjaChlcnJvciwgZXJyb3JJbmZvKSB7XG4gICAgY29uc29sZS5lcnJvcihcIjxBd2FpdD4gY2F1Z2h0IHRoZSBmb2xsb3dpbmcgZXJyb3IgZHVyaW5nIHJlbmRlclwiLCBlcnJvciwgZXJyb3JJbmZvKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBlcnJvckVsZW1lbnQsXG4gICAgICByZXNvbHZlXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IHByb21pc2UgPSBudWxsO1xuICAgIGxldCBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuXG4gICAgaWYgKCEocmVzb2x2ZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAvLyBEaWRuJ3QgZ2V0IGEgcHJvbWlzZSAtIHByb3ZpZGUgYXMgYSByZXNvbHZlZCBwcm9taXNlXG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2RhdGFcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgLy8gQ2F1Z2h0IGEgcmVuZGVyIGVycm9yLCBwcm92aWRlIGl0IGFzIGEgcmVqZWN0ZWQgcHJvbWlzZVxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3I7XG4gICAgICBsZXQgcmVuZGVyRXJyb3IgPSB0aGlzLnN0YXRlLmVycm9yO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KCkuY2F0Y2goKCkgPT4ge30pOyAvLyBBdm9pZCB1bmhhbmRsZWQgcmVqZWN0aW9uIHdhcm5pbmdzXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gcmVuZGVyRXJyb3JcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocmVzb2x2ZS5fdHJhY2tlZCkge1xuICAgICAgLy8gQWxyZWFkeSB0cmFja2VkIHByb21pc2UgLSBjaGVjayBjb250ZW50c1xuICAgICAgcHJvbWlzZSA9IHJlc29sdmU7XG4gICAgICBzdGF0dXMgPSBwcm9taXNlLl9lcnJvciAhPT0gdW5kZWZpbmVkID8gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgOiBwcm9taXNlLl9kYXRhICE9PSB1bmRlZmluZWQgPyBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzIDogQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmF3ICh1bnRyYWNrZWQpIHByb21pc2UgLSB0cmFjayBpdFxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHByb21pc2UgPSByZXNvbHZlLnRoZW4oZGF0YSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfZGF0YVwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZGF0YVxuICAgICAgfSksIGVycm9yID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciAmJiBwcm9taXNlLl9lcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yKSB7XG4gICAgICAvLyBGcmVlemUgdGhlIFVJIGJ5IHRocm93aW5nIGEgbmV2ZXIgcmVzb2x2ZWQgcHJvbWlzZVxuICAgICAgdGhyb3cgbmV2ZXJTZXR0bGVkUHJvbWlzZTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciAmJiAhZXJyb3JFbGVtZW50KSB7XG4gICAgICAvLyBObyBlcnJvckVsZW1lbnQsIHRocm93IHRvIHRoZSBuZWFyZXN0IHJvdXRlLWxldmVsIGVycm9yIGJvdW5kYXJ5XG4gICAgICB0aHJvdyBwcm9taXNlLl9lcnJvcjtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvcikge1xuICAgICAgLy8gUmVuZGVyIHZpYSBvdXIgZXJyb3JFbGVtZW50XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9taXNlLFxuICAgICAgICBjaGlsZHJlbjogZXJyb3JFbGVtZW50XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzKSB7XG4gICAgICAvLyBSZW5kZXIgY2hpbGRyZW4gd2l0aCByZXNvbHZlZCB2YWx1ZVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvbWlzZSxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KTtcbiAgICB9IC8vIFRocm93IHRvIHRoZSBzdXNwZW5zZSBib3VuZGFyeVxuXG5cbiAgICB0aHJvdyBwcm9taXNlO1xuICB9XG5cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqIEluZGlyZWN0aW9uIHRvIGxldmVyYWdlIHVzZUFzeW5jVmFsdWUgZm9yIGEgcmVuZGVyLXByb3AgQVBJIG9uIDxBd2FpdD5cbiAqL1xuXG5cbmZ1bmN0aW9uIFJlc29sdmVBd2FpdChfcmVmNykge1xuICBsZXQge1xuICAgIGNoaWxkcmVuXG4gIH0gPSBfcmVmNztcbiAgbGV0IGRhdGEgPSB1c2VBc3luY1ZhbHVlKCk7XG4gIGxldCB0b1JlbmRlciA9IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gY2hpbGRyZW4oZGF0YSkgOiBjaGlsZHJlbjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCB0b1JlbmRlcik7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFVUSUxTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQ3JlYXRlcyBhIHJvdXRlIGNvbmZpZyBmcm9tIGEgUmVhY3QgXCJjaGlsZHJlblwiIG9iamVjdCwgd2hpY2ggaXMgdXN1YWxseVxuICogZWl0aGVyIGEgYDxSb3V0ZT5gIGVsZW1lbnQgb3IgYW4gYXJyYXkgb2YgdGhlbS4gVXNlZCBpbnRlcm5hbGx5IGJ5XG4gKiBgPFJvdXRlcz5gIHRvIGNyZWF0ZSBhIHJvdXRlIGNvbmZpZyBmcm9tIGl0cyBjaGlsZHJlbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL2NyZWF0ZS1yb3V0ZXMtZnJvbS1jaGlsZHJlblxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRQYXRoKSB7XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gW107XG4gIH1cblxuICBsZXQgcm91dGVzID0gW107XG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgIGlmICghIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgLy8gSWdub3JlIG5vbi1lbGVtZW50cy4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIG1vcmUgZWFzaWx5IGlubGluZVxuICAgICAgLy8gY29uZGl0aW9uYWxzIGluIHRoZWlyIHJvdXRlIGNvbmZpZy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC50eXBlID09PSBSZWFjdC5GcmFnbWVudCkge1xuICAgICAgLy8gVHJhbnNwYXJlbnRseSBzdXBwb3J0IFJlYWN0LkZyYWdtZW50IGFuZCBpdHMgY2hpbGRyZW4uXG4gICAgICByb3V0ZXMucHVzaC5hcHBseShyb3V0ZXMsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuLCBwYXJlbnRQYXRoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgIShlbGVtZW50LnR5cGUgPT09IFJvdXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiW1wiICsgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09IFwic3RyaW5nXCIgPyBlbGVtZW50LnR5cGUgOiBlbGVtZW50LnR5cGUubmFtZSkgKyBcIl0gaXMgbm90IGEgPFJvdXRlPiBjb21wb25lbnQuIEFsbCBjb21wb25lbnQgY2hpbGRyZW4gb2YgPFJvdXRlcz4gbXVzdCBiZSBhIDxSb3V0ZT4gb3IgPFJlYWN0LkZyYWdtZW50PlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEoIWVsZW1lbnQucHJvcHMuaW5kZXggfHwgIWVsZW1lbnQucHJvcHMuY2hpbGRyZW4pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJBbiBpbmRleCByb3V0ZSBjYW5ub3QgaGF2ZSBjaGlsZCByb3V0ZXMuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbGV0IHRyZWVQYXRoID0gWy4uLnBhcmVudFBhdGgsIGluZGV4XTtcbiAgICBsZXQgcm91dGUgPSB7XG4gICAgICBpZDogZWxlbWVudC5wcm9wcy5pZCB8fCB0cmVlUGF0aC5qb2luKFwiLVwiKSxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGVsZW1lbnQucHJvcHMuY2FzZVNlbnNpdGl2ZSxcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQucHJvcHMuZWxlbWVudCxcbiAgICAgIGluZGV4OiBlbGVtZW50LnByb3BzLmluZGV4LFxuICAgICAgcGF0aDogZWxlbWVudC5wcm9wcy5wYXRoLFxuICAgICAgbG9hZGVyOiBlbGVtZW50LnByb3BzLmxvYWRlcixcbiAgICAgIGFjdGlvbjogZWxlbWVudC5wcm9wcy5hY3Rpb24sXG4gICAgICBlcnJvckVsZW1lbnQ6IGVsZW1lbnQucHJvcHMuZXJyb3JFbGVtZW50LFxuICAgICAgaGFzRXJyb3JCb3VuZGFyeTogZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQgIT0gbnVsbCxcbiAgICAgIHNob3VsZFJldmFsaWRhdGU6IGVsZW1lbnQucHJvcHMuc2hvdWxkUmV2YWxpZGF0ZSxcbiAgICAgIGhhbmRsZTogZWxlbWVudC5wcm9wcy5oYW5kbGVcbiAgICB9O1xuXG4gICAgaWYgKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIHJvdXRlLmNoaWxkcmVuID0gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sIHRyZWVQYXRoKTtcbiAgICB9XG5cbiAgICByb3V0ZXMucHVzaChyb3V0ZSk7XG4gIH0pO1xuICByZXR1cm4gcm91dGVzO1xufVxuLyoqXG4gKiBSZW5kZXJzIHRoZSByZXN1bHQgb2YgYG1hdGNoUm91dGVzKClgIGludG8gYSBSZWFjdCBlbGVtZW50LlxuICovXG5cbmZ1bmN0aW9uIHJlbmRlck1hdGNoZXMobWF0Y2hlcykge1xuICByZXR1cm4gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKiBXYWxrIHRoZSByb3V0ZSB0cmVlIGFuZCBhZGQgaGFzRXJyb3JCb3VuZGFyeSBpZiBpdCdzIG5vdCBwcm92aWRlZCwgc28gdGhhdFxuICogdXNlcnMgcHJvdmlkaW5nIG1hbnVhbCByb3V0ZSBhcnJheXMgY2FuIGp1c3Qgc3BlY2lmeSBlcnJvckVsZW1lbnRcbiAqL1xuXG5mdW5jdGlvbiBlbmhhbmNlTWFudWFsUm91dGVPYmplY3RzKHJvdXRlcykge1xuICByZXR1cm4gcm91dGVzLm1hcChyb3V0ZSA9PiB7XG4gICAgbGV0IHJvdXRlQ2xvbmUgPSBfZXh0ZW5kcyh7fSwgcm91dGUpO1xuXG4gICAgaWYgKHJvdXRlQ2xvbmUuaGFzRXJyb3JCb3VuZGFyeSA9PSBudWxsKSB7XG4gICAgICByb3V0ZUNsb25lLmhhc0Vycm9yQm91bmRhcnkgPSByb3V0ZUNsb25lLmVycm9yRWxlbWVudCAhPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChyb3V0ZUNsb25lLmNoaWxkcmVuKSB7XG4gICAgICByb3V0ZUNsb25lLmNoaWxkcmVuID0gZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cyhyb3V0ZUNsb25lLmNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm91dGVDbG9uZTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeVJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgaGlzdG9yeTogY3JlYXRlTWVtb3J5SGlzdG9yeSh7XG4gICAgICBpbml0aWFsRW50cmllczogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxJbmRleDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5pbml0aWFsSW5kZXhcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmh5ZHJhdGlvbkRhdGEsXG4gICAgcm91dGVzOiBlbmhhbmNlTWFudWFsUm91dGVPYmplY3RzKHJvdXRlcylcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmV4cG9ydCB7IEF3YWl0LCBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlclByb3ZpZGVyLCBSb3V0ZXMsIERhdGFSb3V0ZXJDb250ZXh0IGFzIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCwgRGF0YVJvdXRlclN0YXRlQ29udGV4dCBhcyBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgTG9jYXRpb25Db250ZXh0IGFzIFVOU0FGRV9Mb2NhdGlvbkNvbnRleHQsIE5hdmlnYXRpb25Db250ZXh0IGFzIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgUm91dGVDb250ZXh0IGFzIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIGVuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMgYXMgVU5TQUZFX2VuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMsIGNyZWF0ZU1lbW9yeVJvdXRlciwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4gYXMgY3JlYXRlUm91dGVzRnJvbUVsZW1lbnRzLCByZW5kZXJNYXRjaGVzLCB1c2VCbG9ja2VyIGFzIHVuc3RhYmxlX3VzZUJsb2NrZXIsIHVzZUFjdGlvbkRhdGEsIHVzZUFzeW5jRXJyb3IsIHVzZUFzeW5jVmFsdWUsIHVzZUhyZWYsIHVzZUluUm91dGVyQ29udGV4dCwgdXNlTG9hZGVyRGF0YSwgdXNlTG9jYXRpb24sIHVzZU1hdGNoLCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0ZSwgdXNlTmF2aWdhdGlvbiwgdXNlTmF2aWdhdGlvblR5cGUsIHVzZU91dGxldCwgdXNlT3V0bGV0Q29udGV4dCwgdXNlUGFyYW1zLCB1c2VSZXNvbHZlZFBhdGgsIHVzZVJldmFsaWRhdG9yLCB1c2VSb3V0ZUVycm9yLCB1c2VSb3V0ZUxvYWRlckRhdGEsIHVzZVJvdXRlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGY9cmVxdWlyZShcInJlYWN0XCIpLGs9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksbT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LG49Zi5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixwPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBxKGMsYSxnKXt2YXIgYixkPXt9LGU9bnVsbCxoPW51bGw7dm9pZCAwIT09ZyYmKGU9XCJcIitnKTt2b2lkIDAhPT1hLmtleSYmKGU9XCJcIithLmtleSk7dm9pZCAwIT09YS5yZWYmJihoPWEucmVmKTtmb3IoYiBpbiBhKW0uY2FsbChhLGIpJiYhcC5oYXNPd25Qcm9wZXJ0eShiKSYmKGRbYl09YVtiXSk7aWYoYyYmYy5kZWZhdWx0UHJvcHMpZm9yKGIgaW4gYT1jLmRlZmF1bHRQcm9wcyxhKXZvaWQgMD09PWRbYl0mJihkW2JdPWFbYl0pO3JldHVybnskJHR5cGVvZjprLHR5cGU6YyxrZXk6ZSxyZWY6aCxwcm9wczpkLF9vd25lcjpuLmN1cnJlbnR9fWV4cG9ydHMuRnJhZ21lbnQ9bDtleHBvcnRzLmpzeD1xO2V4cG9ydHMuanN4cz1xO1xuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLG49U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxxPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxyPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSx0PVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSx1PVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLHY9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLHc9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLHg9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIikseT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKSx6PVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBBKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT16JiZhW3pdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG52YXIgQj17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQz1PYmplY3QuYXNzaWduLEQ9e307ZnVuY3Rpb24gRShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307XG5FLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoXCJzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy5cIik7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn12YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RztDKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9QXJyYXkuaXNBcnJheSxKPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksSz17Y3VycmVudDpudWxsfSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixlKXt2YXIgZCxjPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZCBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUouY2FsbChiLGQpJiYhTC5oYXNPd25Qcm9wZXJ0eShkKSYmKGNbZF09YltkXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWMuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07Yy5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihkIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1jW2RdJiYoY1tkXT1nW2RdKTtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6Yyxfb3duZXI6Sy5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWx9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2c7ZnVuY3Rpb24gUShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIFIoYSxiLGUsZCxjKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbDpjYXNlIG46aD0hMH19aWYoaClyZXR1cm4gaD1hLGM9YyhoKSxhPVwiXCI9PT1kP1wiLlwiK1EoaCwwKTpkLEkoYyk/KGU9XCJcIixudWxsIT1hJiYoZT1hLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIiksUihjLGIsZSxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWMmJihPKGMpJiYoYz1OKGMsZSsoIWMua2V5fHxoJiZoLmtleT09PWMua2V5P1wiXCI6KFwiXCIrYy5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChjKSksMTtoPTA7ZD1cIlwiPT09ZD9cIi5cIjpkK1wiOlwiO2lmKEkoYSkpZm9yKHZhciBnPTA7ZzxhLmxlbmd0aDtnKyspe2s9XG5hW2ddO3ZhciBmPWQrUShrLGcpO2grPVIoayxiLGUsZixjKX1lbHNlIGlmKGY9QShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZCtRKGssZysrKSxoKz1SKGssYixlLGYsYyk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVN0cmluZyhhKSxFcnJvcihcIk9iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogXCIrKFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpK1wiKS4gSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSBpbnN0ZWFkLlwiKTtyZXR1cm4gaH1cbmZ1bmN0aW9uIFMoYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGQ9W10sYz0wO1IoYSxkLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGUsYSxjKyspfSk7cmV0dXJuIGR9ZnVuY3Rpb24gVChhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2IudGhlbihmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yn0sZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWJ9KTstMT09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0wLGEuX3Jlc3VsdD1iKX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQuZGVmYXVsdDt0aHJvdyBhLl9yZXN1bHQ7fVxudmFyIFU9e2N1cnJlbnQ6bnVsbH0sVj17dHJhbnNpdGlvbjpudWxsfSxXPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlUsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6VixSZWFjdEN1cnJlbnRPd25lcjpLfTtleHBvcnRzLkNoaWxkcmVuPXttYXA6Uyxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtTKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZSl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UyhhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFMoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihcIlJlYWN0LkNoaWxkcmVuLm9ubHkgZXhwZWN0ZWQgdG8gcmVjZWl2ZSBhIHNpbmdsZSBSZWFjdCBlbGVtZW50IGNoaWxkLlwiKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUU7ZXhwb3J0cy5GcmFnbWVudD1wO1xuZXhwb3J0cy5Qcm9maWxlcj1yO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1HO2V4cG9ydHMuU3RyaWN0TW9kZT1xO2V4cG9ydHMuU3VzcGVuc2U9dztleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVc7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsZSl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoXCJSZWFjdC5jbG9uZUVsZW1lbnQoLi4uKTogVGhlIGFyZ3VtZW50IG11c3QgYmUgYSBSZWFjdCBlbGVtZW50LCBidXQgeW91IHBhc3NlZCBcIithK1wiLlwiKTt2YXIgZD1DKHt9LGEucHJvcHMpLGM9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUsuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihjPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSi5jYWxsKGIsZikmJiFMLmhhc093blByb3BlcnR5KGYpJiYoZFtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtcbmZvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmMscmVmOmsscHJvcHM6ZCxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhKXthPXskJHR5cGVvZjp1LF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbCxfZGVmYXVsdFZhbHVlOm51bGwsX2dsb2JhbE5hbWU6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dCxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O1xuZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO2V4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eSxfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlR9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eCx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMuc3RhcnRUcmFuc2l0aW9uPWZ1bmN0aW9uKGEpe3ZhciBiPVYudHJhbnNpdGlvbjtWLnRyYW5zaXRpb249e307dHJ5e2EoKX1maW5hbGx5e1YudHJhbnNpdGlvbj1ifX07ZXhwb3J0cy51bnN0YWJsZV9hY3Q9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcihcImFjdCguLi4pIGlzIG5vdCBzdXBwb3J0ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMgb2YgUmVhY3QuXCIpO307XG5leHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VDb250ZXh0KGEpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRGVmZXJyZWRWYWx1ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZURlZmVycmVkVmFsdWUoYSl9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJZD1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlSWQoKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGUpfTtcbmV4cG9ydHMudXNlSW5zZXJ0aW9uRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VJbnNlcnRpb25FZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZHVjZXIoYSxiLGUpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN0YXRlKGEpfTtleHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN5bmNFeHRlcm5hbFN0b3JlKGEsYixlKX07XG5leHBvcnRzLnVzZVRyYW5zaXRpb249ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZVRyYW5zaXRpb24oKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMi4wXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztmdW5jdGlvbiBmKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDswPGM7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZigwPGcoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIGgoYSl7cmV0dXJuIDA9PT1hLmxlbmd0aD9udWxsOmFbMF19ZnVuY3Rpb24gayhhKXtpZigwPT09YS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIGI9YVswXSxjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGgsdz1lPj4+MTtkPHc7KXt2YXIgbT0yKihkKzEpLTEsQz1hW21dLG49bSsxLHg9YVtuXTtpZigwPmcoQyxjKSluPGUmJjA+Zyh4LEMpPyhhW2RdPXgsYVtuXT1jLGQ9bik6KGFbZF09QyxhW21dPWMsZD1tKTtlbHNlIGlmKG48ZSYmMD5nKHgsYykpYVtkXT14LGFbbl09YyxkPW47ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGcoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fXZhciByPVtdLHQ9W10sdT0xLHY9bnVsbCx5PTMsej0hMSxBPSExLEI9ITEsRD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om51bGwsRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpudWxsLEY9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBzZXRJbW1lZGlhdGU/c2V0SW1tZWRpYXRlOm51bGw7XG5cInVuZGVmaW5lZFwiIT09dHlwZW9mIG5hdmlnYXRvciYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcmJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nJiZuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZy5iaW5kKG5hdmlnYXRvci5zY2hlZHVsaW5nKTtmdW5jdGlvbiBHKGEpe2Zvcih2YXIgYj1oKHQpO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spayh0KTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKWsodCksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxmKHIsYik7ZWxzZSBicmVhaztiPWgodCl9fWZ1bmN0aW9uIEgoYSl7Qj0hMTtHKGEpO2lmKCFBKWlmKG51bGwhPT1oKHIpKUE9ITAsSShKKTtlbHNle3ZhciBiPWgodCk7bnVsbCE9PWImJksoSCxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBKKGEsYil7QT0hMTtCJiYoQj0hMSxFKEwpLEw9LTEpO3o9ITA7dmFyIGM9eTt0cnl7RyhiKTtmb3Iodj1oKHIpO251bGwhPT12JiYoISh2LmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhTSgpKTspe3ZhciBkPXYuY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3YuY2FsbGJhY2s9bnVsbDt5PXYucHJpb3JpdHlMZXZlbDt2YXIgZT1kKHYuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT92LmNhbGxiYWNrPWU6dj09PWgocikmJmsocik7RyhiKX1lbHNlIGsocik7dj1oKHIpfWlmKG51bGwhPT12KXZhciB3PSEwO2Vsc2V7dmFyIG09aCh0KTtudWxsIT09bSYmSyhILG0uc3RhcnRUaW1lLWIpO3c9ITF9cmV0dXJuIHd9ZmluYWxseXt2PW51bGwseT1jLHo9ITF9fXZhciBOPSExLE89bnVsbCxMPS0xLFA9NSxRPS0xO1xuZnVuY3Rpb24gTSgpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpLVE8UD8hMTohMH1mdW5jdGlvbiBSKCl7aWYobnVsbCE9PU8pe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7UT1hO3ZhciBiPSEwO3RyeXtiPU8oITAsYSl9ZmluYWxseXtiP1MoKTooTj0hMSxPPW51bGwpfX1lbHNlIE49ITF9dmFyIFM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEYpUz1mdW5jdGlvbigpe0YoUil9O2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1SO1M9ZnVuY3Rpb24oKXtVLnBvc3RNZXNzYWdlKG51bGwpfX1lbHNlIFM9ZnVuY3Rpb24oKXtEKFIsMCl9O2Z1bmN0aW9uIEkoYSl7Tz1hO058fChOPSEwLFMoKSl9ZnVuY3Rpb24gSyhhLGIpe0w9RChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfVxuZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe0F8fHp8fChBPSEwLEkoSikpfTtcbmV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOlA9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4geX07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBoKHIpfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKHkpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPXl9dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXt5PWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtcbmV4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPXk7eT1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7eT1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOnUrKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLGYodCxhKSxudWxsPT09aChyKSYmYT09PWgodCkmJihCPyhFKEwpLEw9LTEpOkI9ITAsSyhILGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxmKHIsYSksQXx8enx8KEE9ITAsSShKKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9TTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj15O3JldHVybiBmdW5jdGlvbigpe3ZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXt5PWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQiwgY29tcGFyZSwgY29tcGFyZUNvbnRleHQpIHtcbiAgdmFyIHJldCA9IGNvbXBhcmUgPyBjb21wYXJlLmNhbGwoY29tcGFyZUNvbnRleHQsIG9iakEsIG9iakIpIDogdm9pZCAwO1xuXG4gIGlmIChyZXQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiAhIXJldDtcbiAgfVxuXG4gIGlmIChvYmpBID09PSBvYmpCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09IFwib2JqZWN0XCIgfHwgIW9iakEgfHwgdHlwZW9mIG9iakIgIT09IFwib2JqZWN0XCIgfHwgIW9iakIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGJIYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuYmluZChvYmpCKTtcblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBrZXlzQS5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNBW2lkeF07XG5cbiAgICBpZiAoIWJIYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlQSA9IG9iakFba2V5XTtcbiAgICB2YXIgdmFsdWVCID0gb2JqQltrZXldO1xuXG4gICAgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgdmFsdWVBLCB2YWx1ZUIsIGtleSkgOiB2b2lkIDA7XG5cbiAgICBpZiAocmV0ID09PSBmYWxzZSB8fCAocmV0ID09PSB2b2lkIDAgJiYgdmFsdWVBICE9PSB2YWx1ZUIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIiwiZnVuY3Rpb24gc3R5bGlzX21pbiAoVykge1xuICBmdW5jdGlvbiBNKGQsIGMsIGUsIGgsIGEpIHtcbiAgICBmb3IgKHZhciBtID0gMCwgYiA9IDAsIHYgPSAwLCBuID0gMCwgcSwgZywgeCA9IDAsIEsgPSAwLCBrLCB1ID0gayA9IHEgPSAwLCBsID0gMCwgciA9IDAsIEkgPSAwLCB0ID0gMCwgQiA9IGUubGVuZ3RoLCBKID0gQiAtIDEsIHksIGYgPSAnJywgcCA9ICcnLCBGID0gJycsIEcgPSAnJywgQzsgbCA8IEI7KSB7XG4gICAgICBnID0gZS5jaGFyQ29kZUF0KGwpO1xuICAgICAgbCA9PT0gSiAmJiAwICE9PSBiICsgbiArIHYgKyBtICYmICgwICE9PSBiICYmIChnID0gNDcgPT09IGIgPyAxMCA6IDQ3KSwgbiA9IHYgPSBtID0gMCwgQisrLCBKKyspO1xuXG4gICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICBpZiAobCA9PT0gSiAmJiAoMCA8IHIgJiYgKGYgPSBmLnJlcGxhY2UoTiwgJycpKSwgMCA8IGYudHJpbSgpLmxlbmd0aCkpIHtcbiAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBmICs9IGUuY2hhckF0KGwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGcgPSA1OTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgZiA9IGYudHJpbSgpO1xuICAgICAgICAgICAgcSA9IGYuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIGsgPSAxO1xuXG4gICAgICAgICAgICBmb3IgKHQgPSArK2w7IGwgPCBCOykge1xuICAgICAgICAgICAgICBzd2l0Y2ggKGcgPSBlLmNoYXJDb2RlQXQobCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgICAgICAgICBrLS07XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKGcgPSBlLmNoYXJDb2RlQXQobCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh1ID0gbCArIDE7IHUgPCBKOyArK3UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmNoYXJDb2RlQXQodSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQyID09PSBnICYmIDQyID09PSBlLmNoYXJDb2RlQXQodSAtIDEpICYmIGwgKyAyICE9PSB1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQ3ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1O1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgOTE6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgZysrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAgICAgZm9yICg7IGwrKyA8IEogJiYgZS5jaGFyQ29kZUF0KGwpICE9PSBnOykge1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoMCA9PT0gaykgYnJlYWs7XG4gICAgICAgICAgICAgIGwrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgayA9IGUuc3Vic3RyaW5nKHQsIGwpO1xuICAgICAgICAgICAgMCA9PT0gcSAmJiAocSA9IChmID0gZi5yZXBsYWNlKGNhLCAnJykudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgICAgICAgICAgc3dpdGNoIChxKSB7XG4gICAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgICAgMCA8IHIgJiYgKGYgPSBmLnJlcGxhY2UoTiwgJycpKTtcbiAgICAgICAgICAgICAgICBnID0gZi5jaGFyQ29kZUF0KDEpO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICAgICAgICBjYXNlIDQ1OlxuICAgICAgICAgICAgICAgICAgICByID0gYztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBPO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGsgPSBNKGMsIHIsIGssIGcsIGEgKyAxKTtcbiAgICAgICAgICAgICAgICB0ID0gay5sZW5ndGg7XG4gICAgICAgICAgICAgICAgMCA8IEEgJiYgKHIgPSBYKE8sIGYsIEkpLCBDID0gSCgzLCBrLCByLCBjLCBELCB6LCB0LCBnLCBhLCBoKSwgZiA9IHIuam9pbignJyksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAodCA9IChrID0gQy50cmltKCkpLmxlbmd0aCkgJiYgKGcgPSAwLCBrID0gJycpKTtcbiAgICAgICAgICAgICAgICBpZiAoMCA8IHQpIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZGEsIGVhKTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgJ3snICsgayArICd9JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgICAgICAgICAgICBmID0gZi5yZXBsYWNlKGZhLCAnJDEgJDInKTtcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBrID0gMSA9PT0gdyB8fCAyID09PSB3ICYmIEwoJ0AnICsgaywgMykgPyAnQC13ZWJraXQtJyArIGsgKyAnQCcgKyBrIDogJ0AnICsgaztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgaywgMTEyID09PSBoICYmIChrID0gKHAgKz0gaywgJycpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgayA9ICcnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgayA9IE0oYywgWChjLCBmLCBJKSwgaywgaCwgYSArIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBGICs9IGs7XG4gICAgICAgICAgICBrID0gSSA9IHIgPSB1ID0gcSA9IDA7XG4gICAgICAgICAgICBmID0gJyc7XG4gICAgICAgICAgICBnID0gZS5jaGFyQ29kZUF0KCsrbCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBmID0gKDAgPCByID8gZi5yZXBsYWNlKE4sICcnKSA6IGYpLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICgxIDwgKHQgPSBmLmxlbmd0aCkpIHN3aXRjaCAoMCA9PT0gdSAmJiAocSA9IGYuY2hhckNvZGVBdCgwKSwgNDUgPT09IHEgfHwgOTYgPCBxICYmIDEyMyA+IHEpICYmICh0ID0gKGYgPSBmLnJlcGxhY2UoJyAnLCAnOicpKS5sZW5ndGgpLCAwIDwgQSAmJiB2b2lkIDAgIT09IChDID0gSCgxLCBmLCBjLCBkLCBELCB6LCBwLmxlbmd0aCwgaCwgYSwgaCkpICYmIDAgPT09ICh0ID0gKGYgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZiA9ICdcXHgwMFxceDAwJyksIHEgPSBmLmNoYXJDb2RlQXQoMCksIGcgPSBmLmNoYXJDb2RlQXQoMSksIHEpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgICAgaWYgKDEwNSA9PT0gZyB8fCA5OSA9PT0gZykge1xuICAgICAgICAgICAgICAgICAgRyArPSBmICsgZS5jaGFyQXQobCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICA1OCAhPT0gZi5jaGFyQ29kZUF0KHQgLSAxKSAmJiAocCArPSBQKGYsIHEsIGcsIGYuY2hhckNvZGVBdCgyKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSSA9IHIgPSB1ID0gcSA9IDA7XG4gICAgICAgICAgICBmID0gJyc7XG4gICAgICAgICAgICBnID0gZS5jaGFyQ29kZUF0KCsrbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgIGNhc2UgMTM6XG4gICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgNDcgPT09IGIgPyBiID0gMCA6IDAgPT09IDEgKyBxICYmIDEwNyAhPT0gaCAmJiAwIDwgZi5sZW5ndGggJiYgKHIgPSAxLCBmICs9ICdcXHgwMCcpO1xuICAgICAgICAgIDAgPCBBICogWSAmJiBIKDAsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKTtcbiAgICAgICAgICB6ID0gMTtcbiAgICAgICAgICBEKys7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgaWYgKDAgPT09IGIgKyBuICsgdiArIG0pIHtcbiAgICAgICAgICAgIHorKztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHorKztcbiAgICAgICAgICB5ID0gZS5jaGFyQXQobCk7XG5cbiAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgIGlmICgwID09PSBuICsgbSArIGIpIHN3aXRjaCAoeCkge1xuICAgICAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgICAgY2FzZSA1ODpcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgIHkgPSAnJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIDMyICE9PSBnICYmICh5ID0gJyAnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFwwJztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXGYnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcdic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgKHIgPSBJID0gMSwgeSA9ICdcXGYnICsgeSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDEwODpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBiICsgbSArIEUgJiYgMCA8IHUpIHN3aXRjaCAobCAtIHUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAxMTIgPT09IHggJiYgNTggPT09IGUuY2hhckNvZGVBdChsIC0gMykgJiYgKEUgPSB4KTtcblxuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgIDExMSA9PT0gSyAmJiAoRSA9IEspO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgKHUgPSBsKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gJiYgKHIgPSAxLCB5ICs9ICdcXHInKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAwID09PSBiICYmIChuID0gbiA9PT0gZyA/IDAgOiAwID09PSBuID8gZyA6IG4pO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0rKztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgOTM6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgdiAmJiBtLS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgdi0tO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBiICsgbSkge1xuICAgICAgICAgICAgICAgIGlmICgwID09PSBxKSBzd2l0Y2ggKDIgKiB4ICsgMyAqIEspIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgNTMzOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHYrKztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAwID09PSBiICsgdiArIG4gKyBtICsgdSArIGsgJiYgKGsgPSAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICBpZiAoISgwIDwgbiArIG0gKyB2KSkgc3dpdGNoIChiKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgc3dpdGNoICgyICogZyArIDMgKiBlLmNoYXJDb2RlQXQobCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjM1OlxuICAgICAgICAgICAgICAgICAgICAgIGIgPSA0NztcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgICAgICAgICAgICB0ID0gbCwgYiA9IDQyO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICA0NyA9PT0gZyAmJiA0MiA9PT0geCAmJiB0ICsgMiAhPT0gbCAmJiAoMzMgPT09IGUuY2hhckNvZGVBdCh0ICsgMikgJiYgKHAgKz0gZS5zdWJzdHJpbmcodCwgbCArIDEpKSwgeSA9ICcnLCBiID0gMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAwID09PSBiICYmIChmICs9IHkpO1xuICAgICAgfVxuXG4gICAgICBLID0geDtcbiAgICAgIHggPSBnO1xuICAgICAgbCsrO1xuICAgIH1cblxuICAgIHQgPSBwLmxlbmd0aDtcblxuICAgIGlmICgwIDwgdCkge1xuICAgICAgciA9IGM7XG4gICAgICBpZiAoMCA8IEEgJiYgKEMgPSBIKDIsIHAsIHIsIGQsIEQsIHosIHQsIGgsIGEsIGgpLCB2b2lkIDAgIT09IEMgJiYgMCA9PT0gKHAgPSBDKS5sZW5ndGgpKSByZXR1cm4gRyArIHAgKyBGO1xuICAgICAgcCA9IHIuam9pbignLCcpICsgJ3snICsgcCArICd9JztcblxuICAgICAgaWYgKDAgIT09IHcgKiBFKSB7XG4gICAgICAgIDIgIT09IHcgfHwgTChwLCAyKSB8fCAoRSA9IDApO1xuXG4gICAgICAgIHN3aXRjaCAoRSkge1xuICAgICAgICAgIGNhc2UgMTExOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShoYSwgJzotbW96LSQxJykgKyBwO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgIHAgPSBwLnJlcGxhY2UoUSwgJzo6LXdlYmtpdC1pbnB1dC0kMScpICsgcC5yZXBsYWNlKFEsICc6Oi1tb3otJDEnKSArIHAucmVwbGFjZShRLCAnOi1tcy1pbnB1dC0kMScpICsgcDtcbiAgICAgICAgfVxuXG4gICAgICAgIEUgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBHICsgcCArIEY7XG4gIH1cblxuICBmdW5jdGlvbiBYKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMudHJpbSgpLnNwbGl0KGlhKTtcbiAgICBjID0gaDtcbiAgICB2YXIgYSA9IGgubGVuZ3RoLFxuICAgICAgICBtID0gZC5sZW5ndGg7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgdmFyIGIgPSAwO1xuXG4gICAgICAgIGZvciAoZCA9IDAgPT09IG0gPyAnJyA6IGRbMF0gKyAnICc7IGIgPCBhOyArK2IpIHtcbiAgICAgICAgICBjW2JdID0gWihkLCBjW2JdLCBlKS50cmltKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIHYgPSBiID0gMDtcblxuICAgICAgICBmb3IgKGMgPSBbXTsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgbTsgKytuKSB7XG4gICAgICAgICAgICBjW3YrK10gPSBaKGRbbl0gKyAnICcsIGhbYl0sIGUpLnRyaW0oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBjO1xuICB9XG5cbiAgZnVuY3Rpb24gWihkLCBjLCBlKSB7XG4gICAgdmFyIGggPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgMzMgPiBoICYmIChoID0gKGMgPSBjLnRyaW0oKSkuY2hhckNvZGVBdCgwKSk7XG5cbiAgICBzd2l0Y2ggKGgpIHtcbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIHJldHVybiBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgY2FzZSA1ODpcbiAgICAgICAgcmV0dXJuIGQudHJpbSgpICsgYy5yZXBsYWNlKEYsICckMScgKyBkLnRyaW0oKSk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICgwIDwgMSAqIGUgJiYgMCA8IGMuaW5kZXhPZignXFxmJykpIHJldHVybiBjLnJlcGxhY2UoRiwgKDU4ID09PSBkLmNoYXJDb2RlQXQoMCkgPyAnJyA6ICckMScpICsgZC50cmltKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBkICsgYztcbiAgfVxuXG4gIGZ1bmN0aW9uIFAoZCwgYywgZSwgaCkge1xuICAgIHZhciBhID0gZCArICc7JyxcbiAgICAgICAgbSA9IDIgKiBjICsgMyAqIGUgKyA0ICogaDtcblxuICAgIGlmICg5NDQgPT09IG0pIHtcbiAgICAgIGQgPSBhLmluZGV4T2YoJzonLCA5KSArIDE7XG4gICAgICB2YXIgYiA9IGEuc3Vic3RyaW5nKGQsIGEubGVuZ3RoIC0gMSkudHJpbSgpO1xuICAgICAgYiA9IGEuc3Vic3RyaW5nKDAsIGQpLnRyaW0oKSArIGIgKyAnOyc7XG4gICAgICByZXR1cm4gMSA9PT0gdyB8fCAyID09PSB3ICYmIEwoYiwgMSkgPyAnLXdlYmtpdC0nICsgYiArIGIgOiBiO1xuICAgIH1cblxuICAgIGlmICgwID09PSB3IHx8IDIgPT09IHcgJiYgIUwoYSwgMSkpIHJldHVybiBhO1xuXG4gICAgc3dpdGNoIChtKSB7XG4gICAgICBjYXNlIDEwMTU6XG4gICAgICAgIHJldHVybiA5NyA9PT0gYS5jaGFyQ29kZUF0KDEwKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTUxOlxuICAgICAgICByZXR1cm4gMTE2ID09PSBhLmNoYXJDb2RlQXQoMykgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk2MzpcbiAgICAgICAgcmV0dXJuIDExMCA9PT0gYS5jaGFyQ29kZUF0KDUpID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSAxMDA5OlxuICAgICAgICBpZiAoMTAwICE9PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk2OTpcbiAgICAgIGNhc2UgOTQyOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk3ODpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tb3otJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDEwMTk6XG4gICAgICBjYXNlIDk4MzpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tb3otJyArIGEgKyAnLW1zLScgKyBhICsgYTtcblxuICAgICAgY2FzZSA4ODM6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDgpKSByZXR1cm4gJy13ZWJraXQtJyArIGEgKyBhO1xuICAgICAgICBpZiAoMCA8IGEuaW5kZXhPZignaW1hZ2Utc2V0KCcsIDExKSkgcmV0dXJuIGEucmVwbGFjZShqYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTMyOlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg0KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNSkpIHtcbiAgICAgICAgICBjYXNlIDEwMzpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC1ib3gtJyArIGEucmVwbGFjZSgnLWdyb3cnLCAnJykgKyAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEucmVwbGFjZSgnZ3JvdycsICdwb3NpdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdzaHJpbmsnLCAnbmVnYXRpdmUnKSArIGE7XG5cbiAgICAgICAgICBjYXNlIDk4OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdiYXNpcycsICdwcmVmZXJyZWQtc2l6ZScpICsgYTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhICsgYTtcblxuICAgICAgY2FzZSA5NjQ6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAyMzpcbiAgICAgICAgaWYgKDk5ICE9PSBhLmNoYXJDb2RlQXQoOCkpIGJyZWFrO1xuICAgICAgICBiID0gYS5zdWJzdHJpbmcoYS5pbmRleE9mKCc6JywgMTUpKS5yZXBsYWNlKCdmbGV4LScsICcnKS5yZXBsYWNlKCdzcGFjZS1iZXR3ZWVuJywgJ2p1c3RpZnknKTtcbiAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC1wYWNrJyArIGIgKyAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1wYWNrJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMDU6XG4gICAgICAgIHJldHVybiBrYS50ZXN0KGEpID8gYS5yZXBsYWNlKGFhLCAnOi13ZWJraXQtJykgKyBhLnJlcGxhY2UoYWEsICc6LW1vei0nKSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDFlMzpcbiAgICAgICAgYiA9IGEuc3Vic3RyaW5nKDEzKS50cmltKCk7XG4gICAgICAgIGMgPSBiLmluZGV4T2YoJy0nKSArIDE7XG5cbiAgICAgICAgc3dpdGNoIChiLmNoYXJDb2RlQXQoMCkgKyBiLmNoYXJDb2RlQXQoYykpIHtcbiAgICAgICAgICBjYXNlIDIyNjpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ3RiJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjMyOlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGItcmwnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICdscicpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBiICsgYTtcblxuICAgICAgY2FzZSAxMDE3OlxuICAgICAgICBpZiAoLTEgPT09IGEuaW5kZXhPZignc3RpY2t5JywgOSkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk3NTpcbiAgICAgICAgYyA9IChhID0gZCkubGVuZ3RoIC0gMTA7XG4gICAgICAgIGIgPSAoMzMgPT09IGEuY2hhckNvZGVBdChjKSA/IGEuc3Vic3RyaW5nKDAsIGMpIDogYSkuc3Vic3RyaW5nKGQuaW5kZXhPZignOicsIDcpICsgMSkudHJpbSgpO1xuXG4gICAgICAgIHN3aXRjaCAobSA9IGIuY2hhckNvZGVBdCgwKSArIChiLmNoYXJDb2RlQXQoNykgfCAwKSkge1xuICAgICAgICAgIGNhc2UgMjAzOlxuICAgICAgICAgICAgaWYgKDExMSA+IGIuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArIGIpICsgJzsnICsgYTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMDc6XG4gICAgICAgICAgY2FzZSAxMDI6XG4gICAgICAgICAgICBhID0gYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyAoMTAyIDwgbSA/ICdpbmxpbmUtJyA6ICcnKSArICdib3gnKSArICc7JyArIGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhLnJlcGxhY2UoYiwgJy1tcy0nICsgYiArICdib3gnKSArICc7JyArIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYSArICc7JztcblxuICAgICAgY2FzZSA5Mzg6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDUpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg2KSkge1xuICAgICAgICAgIGNhc2UgMTA1OlxuICAgICAgICAgICAgcmV0dXJuIGIgPSBhLnJlcGxhY2UoJy1pdGVtcycsICcnKSwgJy13ZWJraXQtJyArIGEgKyAnLXdlYmtpdC1ib3gtJyArIGIgKyAnLW1zLWZsZXgtJyArIGIgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtaXRlbS0nICsgYS5yZXBsYWNlKGJhLCAnJykgKyBhO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1saW5lLXBhY2snICsgYS5yZXBsYWNlKCdhbGlnbi1jb250ZW50JywgJycpLnJlcGxhY2UoYmEsICcnKSArIGE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTczOlxuICAgICAgY2FzZSA5ODk6XG4gICAgICAgIGlmICg0NSAhPT0gYS5jaGFyQ29kZUF0KDMpIHx8IDEyMiA9PT0gYS5jaGFyQ29kZUF0KDQpKSBicmVhaztcblxuICAgICAgY2FzZSA5MzE6XG4gICAgICBjYXNlIDk1MzpcbiAgICAgICAgaWYgKCEwID09PSBsYS50ZXN0KGQpKSByZXR1cm4gMTE1ID09PSAoYiA9IGQuc3Vic3RyaW5nKGQuaW5kZXhPZignOicpICsgMSkpLmNoYXJDb2RlQXQoMCkgPyBQKGQucmVwbGFjZSgnc3RyZXRjaCcsICdmaWxsLWF2YWlsYWJsZScpLCBjLCBlLCBoKS5yZXBsYWNlKCc6ZmlsbC1hdmFpbGFibGUnLCAnOnN0cmV0Y2gnKSA6IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyBhLnJlcGxhY2UoYiwgJy1tb3otJyArIGIucmVwbGFjZSgnZmlsbC0nLCAnJykpICsgYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTYyOlxuICAgICAgICBpZiAoYSA9ICctd2Via2l0LScgKyBhICsgKDEwMiA9PT0gYS5jaGFyQ29kZUF0KDUpID8gJy1tcy0nICsgYSA6ICcnKSArIGEsIDIxMSA9PT0gZSArIGggJiYgMTA1ID09PSBhLmNoYXJDb2RlQXQoMTMpICYmIDAgPCBhLmluZGV4T2YoJ3RyYW5zZm9ybScsIDEwKSkgcmV0dXJuIGEuc3Vic3RyaW5nKDAsIGEuaW5kZXhPZignOycsIDI3KSArIDEpLnJlcGxhY2UobWEsICckMS13ZWJraXQtJDInKSArIGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICBmdW5jdGlvbiBMKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQuaW5kZXhPZigxID09PSBjID8gJzonIDogJ3snKSxcbiAgICAgICAgaCA9IGQuc3Vic3RyaW5nKDAsIDMgIT09IGMgPyBlIDogMTApO1xuICAgIGUgPSBkLnN1YnN0cmluZyhlICsgMSwgZC5sZW5ndGggLSAxKTtcbiAgICByZXR1cm4gUigyICE9PSBjID8gaCA6IGgucmVwbGFjZShuYSwgJyQxJyksIGUsIGMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZWEoZCwgYykge1xuICAgIHZhciBlID0gUChjLCBjLmNoYXJDb2RlQXQoMCksIGMuY2hhckNvZGVBdCgxKSwgYy5jaGFyQ29kZUF0KDIpKTtcbiAgICByZXR1cm4gZSAhPT0gYyArICc7JyA/IGUucmVwbGFjZShvYSwgJyBvciAoJDEpJykuc3Vic3RyaW5nKDQpIDogJygnICsgYyArICcpJztcbiAgfVxuXG4gIGZ1bmN0aW9uIEgoZCwgYywgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkge1xuICAgIGZvciAodmFyIGcgPSAwLCB4ID0gYywgdzsgZyA8IEE7ICsrZykge1xuICAgICAgc3dpdGNoICh3ID0gU1tnXS5jYWxsKEIsIGQsIHgsIGUsIGgsIGEsIG0sIGIsIHYsIG4sIHEpKSB7XG4gICAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgICBjYXNlICExOlxuICAgICAgICBjYXNlICEwOlxuICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB4ID0gdztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoeCAhPT0gYykgcmV0dXJuIHg7XG4gIH1cblxuICBmdW5jdGlvbiBUKGQpIHtcbiAgICBzd2l0Y2ggKGQpIHtcbiAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgY2FzZSBudWxsOlxuICAgICAgICBBID0gUy5sZW5ndGggPSAwO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBkKSBTW0ErK10gPSBkO2Vsc2UgaWYgKCdvYmplY3QnID09PSB0eXBlb2YgZCkgZm9yICh2YXIgYyA9IDAsIGUgPSBkLmxlbmd0aDsgYyA8IGU7ICsrYykge1xuICAgICAgICAgIFQoZFtjXSk7XG4gICAgICAgIH0gZWxzZSBZID0gISFkIHwgMDtcbiAgICB9XG5cbiAgICByZXR1cm4gVDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFUoZCkge1xuICAgIGQgPSBkLnByZWZpeDtcbiAgICB2b2lkIDAgIT09IGQgJiYgKFIgPSBudWxsLCBkID8gJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIGQgPyB3ID0gMSA6ICh3ID0gMiwgUiA9IGQpIDogdyA9IDApO1xuICAgIHJldHVybiBVO1xuICB9XG5cbiAgZnVuY3Rpb24gQihkLCBjKSB7XG4gICAgdmFyIGUgPSBkO1xuICAgIDMzID4gZS5jaGFyQ29kZUF0KDApICYmIChlID0gZS50cmltKCkpO1xuICAgIFYgPSBlO1xuICAgIGUgPSBbVl07XG5cbiAgICBpZiAoMCA8IEEpIHtcbiAgICAgIHZhciBoID0gSCgtMSwgYywgZSwgZSwgRCwgeiwgMCwgMCwgMCwgMCk7XG4gICAgICB2b2lkIDAgIT09IGggJiYgJ3N0cmluZycgPT09IHR5cGVvZiBoICYmIChjID0gaCk7XG4gICAgfVxuXG4gICAgdmFyIGEgPSBNKE8sIGUsIGMsIDAsIDApO1xuICAgIDAgPCBBICYmIChoID0gSCgtMiwgYSwgZSwgZSwgRCwgeiwgYS5sZW5ndGgsIDAsIDAsIDApLCB2b2lkIDAgIT09IGggJiYgKGEgPSBoKSk7XG4gICAgViA9ICcnO1xuICAgIEUgPSAwO1xuICAgIHogPSBEID0gMTtcbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIHZhciBjYSA9IC9eXFwwKy9nLFxuICAgICAgTiA9IC9bXFwwXFxyXFxmXS9nLFxuICAgICAgYWEgPSAvOiAqL2csXG4gICAgICBrYSA9IC96b298Z3JhLyxcbiAgICAgIG1hID0gLyhbLDogXSkodHJhbnNmb3JtKS9nLFxuICAgICAgaWEgPSAvLFxccis/L2csXG4gICAgICBGID0gLyhbXFx0XFxyXFxuIF0pKlxcZj8mL2csXG4gICAgICBmYSA9IC9AKGtcXHcrKVxccyooXFxTKilcXHMqLyxcbiAgICAgIFEgPSAvOjoocGxhY2UpL2csXG4gICAgICBoYSA9IC86KHJlYWQtb25seSkvZyxcbiAgICAgIEcgPSAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sXG4gICAgICBkYSA9IC9cXChcXHMqKC4qKVxccypcXCkvZyxcbiAgICAgIG9hID0gLyhbXFxzXFxTXSo/KTsvZyxcbiAgICAgIGJhID0gLy1zZWxmfGZsZXgtL2csXG4gICAgICBuYSA9IC9bXl0qPyg6W3JwXVtlbF1hW1xcdy1dKylbXl0qLyxcbiAgICAgIGxhID0gL3N0cmV0Y2h8OlxccypcXHcrXFwtKD86Y29udGV8YXZhaWwpLyxcbiAgICAgIGphID0gLyhbXi1dKShpbWFnZS1zZXRcXCgpLyxcbiAgICAgIHogPSAxLFxuICAgICAgRCA9IDEsXG4gICAgICBFID0gMCxcbiAgICAgIHcgPSAxLFxuICAgICAgTyA9IFtdLFxuICAgICAgUyA9IFtdLFxuICAgICAgQSA9IDAsXG4gICAgICBSID0gbnVsbCxcbiAgICAgIFkgPSAwLFxuICAgICAgViA9ICcnO1xuICBCLnVzZSA9IFQ7XG4gIEIuc2V0ID0gVTtcbiAgdm9pZCAwICE9PSBXICYmIFUoVyk7XG4gIHJldHVybiBCO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHlsaXNfbWluO1xuIiwidmFyIHVuaXRsZXNzS2V5cyA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IDEsXG4gIGJvcmRlckltYWdlT3V0c2V0OiAxLFxuICBib3JkZXJJbWFnZVNsaWNlOiAxLFxuICBib3JkZXJJbWFnZVdpZHRoOiAxLFxuICBib3hGbGV4OiAxLFxuICBib3hGbGV4R3JvdXA6IDEsXG4gIGJveE9yZGluYWxHcm91cDogMSxcbiAgY29sdW1uQ291bnQ6IDEsXG4gIGNvbHVtbnM6IDEsXG4gIGZsZXg6IDEsXG4gIGZsZXhHcm93OiAxLFxuICBmbGV4UG9zaXRpdmU6IDEsXG4gIGZsZXhTaHJpbms6IDEsXG4gIGZsZXhOZWdhdGl2ZTogMSxcbiAgZmxleE9yZGVyOiAxLFxuICBncmlkUm93OiAxLFxuICBncmlkUm93RW5kOiAxLFxuICBncmlkUm93U3BhbjogMSxcbiAgZ3JpZFJvd1N0YXJ0OiAxLFxuICBncmlkQ29sdW1uOiAxLFxuICBncmlkQ29sdW1uRW5kOiAxLFxuICBncmlkQ29sdW1uU3BhbjogMSxcbiAgZ3JpZENvbHVtblN0YXJ0OiAxLFxuICBtc0dyaWRSb3c6IDEsXG4gIG1zR3JpZFJvd1NwYW46IDEsXG4gIG1zR3JpZENvbHVtbjogMSxcbiAgbXNHcmlkQ29sdW1uU3BhbjogMSxcbiAgZm9udFdlaWdodDogMSxcbiAgbGluZUhlaWdodDogMSxcbiAgb3BhY2l0eTogMSxcbiAgb3JkZXI6IDEsXG4gIG9ycGhhbnM6IDEsXG4gIHRhYlNpemU6IDEsXG4gIHdpZG93czogMSxcbiAgekluZGV4OiAxLFxuICB6b29tOiAxLFxuICBXZWJraXRMaW5lQ2xhbXA6IDEsXG4gIC8vIFNWRy1yZWxhdGVkIHByb3BlcnRpZXNcbiAgZmlsbE9wYWNpdHk6IDEsXG4gIGZsb29kT3BhY2l0eTogMSxcbiAgc3RvcE9wYWNpdHk6IDEsXG4gIHN0cm9rZURhc2hhcnJheTogMSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogMSxcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogMSxcbiAgc3Ryb2tlT3BhY2l0eTogMSxcbiAgc3Ryb2tlV2lkdGg6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVuaXRsZXNzS2V5cztcbiIsImltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgcmVhY3RQcm9wc1JlZ2V4ID0gL14oKGNoaWxkcmVufGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfGtleXxyZWZ8YXV0b0ZvY3VzfGRlZmF1bHRWYWx1ZXxkZWZhdWx0Q2hlY2tlZHxpbm5lckhUTUx8c3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nfHN1cHByZXNzSHlkcmF0aW9uV2FybmluZ3x2YWx1ZUxpbmt8YWJicnxhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxlbnRlcktleUhpbnR8Zm9ybXxmb3JtQWN0aW9ufGZvcm1FbmNUeXBlfGZvcm1NZXRob2R8Zm9ybU5vVmFsaWRhdGV8Zm9ybVRhcmdldHxmcmFtZUJvcmRlcnxoZWFkZXJzfGhlaWdodHxoaWRkZW58aGlnaHxocmVmfGhyZWZMYW5nfGh0bWxGb3J8aHR0cEVxdWl2fGlkfGlucHV0TW9kZXxpbnRlZ3JpdHl8aXN8a2V5UGFyYW1zfGtleVR5cGV8a2luZHxsYWJlbHxsYW5nfGxpc3R8bG9hZGluZ3xsb29wfGxvd3xtYXJnaW5IZWlnaHR8bWFyZ2luV2lkdGh8bWF4fG1heExlbmd0aHxtZWRpYXxtZWRpYUdyb3VwfG1ldGhvZHxtaW58bWluTGVuZ3RofG11bHRpcGxlfG11dGVkfG5hbWV8bm9uY2V8bm9WYWxpZGF0ZXxvcGVufG9wdGltdW18cGF0dGVybnxwbGFjZWhvbGRlcnxwbGF5c0lubGluZXxwb3N0ZXJ8cHJlbG9hZHxwcm9maWxlfHJhZGlvR3JvdXB8cmVhZE9ubHl8cmVmZXJyZXJQb2xpY3l8cmVsfHJlcXVpcmVkfHJldmVyc2VkfHJvbGV8cm93c3xyb3dTcGFufHNhbmRib3h8c2NvcGV8c2NvcGVkfHNjcm9sbGluZ3xzZWFtbGVzc3xzZWxlY3RlZHxzaGFwZXxzaXplfHNpemVzfHNsb3R8c3BhbnxzcGVsbENoZWNrfHNyY3xzcmNEb2N8c3JjTGFuZ3xzcmNTZXR8c3RhcnR8c3RlcHxzdHlsZXxzdW1tYXJ5fHRhYkluZGV4fHRhcmdldHx0aXRsZXx0cmFuc2xhdGV8dHlwZXx1c2VNYXB8dmFsdWV8d2lkdGh8d21vZGV8d3JhcHxhYm91dHxkYXRhdHlwZXxpbmxpc3R8cHJlZml4fHByb3BlcnR5fHJlc291cmNlfHR5cGVvZnx2b2NhYnxhdXRvQ2FwaXRhbGl6ZXxhdXRvQ29ycmVjdHxhdXRvU2F2ZXxjb2xvcnxpbmNyZW1lbnRhbHxmYWxsYmFja3xpbmVydHxpdGVtUHJvcHxpdGVtU2NvcGV8aXRlbVR5cGV8aXRlbUlEfGl0ZW1SZWZ8b258b3B0aW9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGlzUHJvcFZhbGlkID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpc1Byb3BWYWxpZDtcbiIsImZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsImltcG9ydHt0eXBlT2YgYXMgZSxpc0VsZW1lbnQgYXMgdCxpc1ZhbGlkRWxlbWVudFR5cGUgYXMgbn1mcm9tXCJyZWFjdC1pc1wiO2ltcG9ydCByLHt1c2VTdGF0ZSBhcyBvLHVzZUNvbnRleHQgYXMgcyx1c2VNZW1vIGFzIGksdXNlRWZmZWN0IGFzIGEsdXNlUmVmIGFzIGMsY3JlYXRlRWxlbWVudCBhcyB1LHVzZURlYnVnVmFsdWUgYXMgbCx1c2VMYXlvdXRFZmZlY3QgYXMgZH1mcm9tXCJyZWFjdFwiO2ltcG9ydCBoIGZyb21cInNoYWxsb3dlcXVhbFwiO2ltcG9ydCBwIGZyb21cIkBlbW90aW9uL3N0eWxpc1wiO2ltcG9ydCBmIGZyb21cIkBlbW90aW9uL3VuaXRsZXNzXCI7aW1wb3J0IG0gZnJvbVwiQGVtb3Rpb24vaXMtcHJvcC12YWxpZFwiO2ltcG9ydCB5IGZyb21cImhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzXCI7ZnVuY3Rpb24gdigpe3JldHVybih2PU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciBuPWFyZ3VtZW50c1t0XTtmb3IodmFyIHIgaW4gbilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixyKSYmKGVbcl09bltyXSl9cmV0dXJuIGV9KS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGc9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49W2VbMF1dLHI9MCxvPXQubGVuZ3RoO3I8bztyKz0xKW4ucHVzaCh0W3JdLGVbcisxXSk7cmV0dXJuIG59LFM9ZnVuY3Rpb24odCl7cmV0dXJuIG51bGwhPT10JiZcIm9iamVjdFwiPT10eXBlb2YgdCYmXCJbb2JqZWN0IE9iamVjdF1cIj09PSh0LnRvU3RyaW5nP3QudG9TdHJpbmcoKTpPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCkpJiYhZSh0KX0sdz1PYmplY3QuZnJlZXplKFtdKSxFPU9iamVjdC5mcmVlemUoe30pO2Z1bmN0aW9uIGIoZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZX1mdW5jdGlvbiBfKGUpe3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwic3RyaW5nXCI9PXR5cGVvZiBlJiZlfHxlLmRpc3BsYXlOYW1lfHxlLm5hbWV8fFwiQ29tcG9uZW50XCJ9ZnVuY3Rpb24gTihlKXtyZXR1cm4gZSYmXCJzdHJpbmdcIj09dHlwZW9mIGUuc3R5bGVkQ29tcG9uZW50SWR9dmFyIEE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHByb2Nlc3MmJnZvaWQgMCE9PXByb2Nlc3MuZW52JiYocHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0FUVFJ8fHByb2Nlc3MuZW52LlNDX0FUVFIpfHxcImRhdGEtc3R5bGVkXCIsQz1cIjUuMy44XCIsST1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZcIkhUTUxFbGVtZW50XCJpbiB3aW5kb3csUD1Cb29sZWFuKFwiYm9vbGVhblwiPT10eXBlb2YgU0NfRElTQUJMRV9TUEVFRFk/U0NfRElTQUJMRV9TUEVFRFk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHByb2Nlc3MmJnZvaWQgMCE9PXByb2Nlc3MuZW52JiYodm9pZCAwIT09cHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZJiZcIlwiIT09cHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZP1wiZmFsc2VcIiE9PXByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSYmcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZOnZvaWQgMCE9PXByb2Nlc3MuZW52LlNDX0RJU0FCTEVfU1BFRURZJiZcIlwiIT09cHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFk/XCJmYWxzZVwiIT09cHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFkmJnByb2Nlc3MuZW52LlNDX0RJU0FCTEVfU1BFRURZOlwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpKSxPPXt9LFI9XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj97MTpcIkNhbm5vdCBjcmVhdGUgc3R5bGVkLWNvbXBvbmVudCBmb3IgY29tcG9uZW50OiAlcy5cXG5cXG5cIiwyOlwiQ2FuJ3QgY29sbGVjdCBzdHlsZXMgb25jZSB5b3UndmUgY29uc3VtZWQgYSBgU2VydmVyU3R5bGVTaGVldGAncyBzdHlsZXMhIGBTZXJ2ZXJTdHlsZVNoZWV0YCBpcyBhIG9uZSBvZmYgaW5zdGFuY2UgZm9yIGVhY2ggc2VydmVyLXNpZGUgcmVuZGVyIGN5Y2xlLlxcblxcbi0gQXJlIHlvdSB0cnlpbmcgdG8gcmV1c2UgaXQgYWNyb3NzIHJlbmRlcnM/XFxuLSBBcmUgeW91IGFjY2lkZW50YWxseSBjYWxsaW5nIGNvbGxlY3RTdHlsZXMgdHdpY2U/XFxuXFxuXCIsMzpcIlN0cmVhbWluZyBTU1IgaXMgb25seSBzdXBwb3J0ZWQgaW4gYSBOb2RlLmpzIGVudmlyb25tZW50OyBQbGVhc2UgZG8gbm90IHRyeSB0byBjYWxsIHRoaXMgbWV0aG9kIGluIHRoZSBicm93c2VyLlxcblxcblwiLDQ6XCJUaGUgYFN0eWxlU2hlZXRNYW5hZ2VyYCBleHBlY3RzIGEgdmFsaWQgdGFyZ2V0IG9yIHNoZWV0IHByb3AhXFxuXFxuLSBEb2VzIHRoaXMgZXJyb3Igb2NjdXIgb24gdGhlIGNsaWVudCBhbmQgaXMgeW91ciB0YXJnZXQgZmFsc3k/XFxuLSBEb2VzIHRoaXMgZXJyb3Igb2NjdXIgb24gdGhlIHNlcnZlciBhbmQgaXMgdGhlIHNoZWV0IGZhbHN5P1xcblxcblwiLDU6XCJUaGUgY2xvbmUgbWV0aG9kIGNhbm5vdCBiZSB1c2VkIG9uIHRoZSBjbGllbnQhXFxuXFxuLSBBcmUgeW91IHJ1bm5pbmcgaW4gYSBjbGllbnQtbGlrZSBlbnZpcm9ubWVudCBvbiB0aGUgc2VydmVyP1xcbi0gQXJlIHlvdSB0cnlpbmcgdG8gcnVuIFNTUiBvbiB0aGUgY2xpZW50P1xcblxcblwiLDY6XCJUcnlpbmcgdG8gaW5zZXJ0IGEgbmV3IHN0eWxlIHRhZywgYnV0IHRoZSBnaXZlbiBOb2RlIGlzIHVubW91bnRlZCFcXG5cXG4tIEFyZSB5b3UgdXNpbmcgYSBjdXN0b20gdGFyZ2V0IHRoYXQgaXNuJ3QgbW91bnRlZD9cXG4tIERvZXMgeW91ciBkb2N1bWVudCBub3QgaGF2ZSBhIHZhbGlkIGhlYWQgZWxlbWVudD9cXG4tIEhhdmUgeW91IGFjY2lkZW50YWxseSByZW1vdmVkIGEgc3R5bGUgdGFnIG1hbnVhbGx5P1xcblxcblwiLDc6J1RoZW1lUHJvdmlkZXI6IFBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciBcInRoZW1lXCIgcHJvcCBmdW5jdGlvbiwgZS5nLlxcblxcbmBgYGpzXFxudGhlbWU9eygpID0+ICh7fSl9XFxuYGBgXFxuXFxuJyw4OidUaGVtZVByb3ZpZGVyOiBQbGVhc2UgbWFrZSB5b3VyIFwidGhlbWVcIiBwcm9wIGFuIG9iamVjdC5cXG5cXG4nLDk6XCJNaXNzaW5nIGRvY3VtZW50IGA8aGVhZD5gXFxuXFxuXCIsMTA6XCJDYW5ub3QgZmluZCBhIFN0eWxlU2hlZXQgaW5zdGFuY2UuIFVzdWFsbHkgdGhpcyBoYXBwZW5zIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSBjb3BpZXMgb2Ygc3R5bGVkLWNvbXBvbmVudHMgbG9hZGVkIGF0IG9uY2UuIENoZWNrIG91dCB0aGlzIGlzc3VlIGZvciBob3cgdG8gdHJvdWJsZXNob290IGFuZCBmaXggdGhlIGNvbW1vbiBjYXNlcyB3aGVyZSB0aGlzIHNpdHVhdGlvbiBjYW4gaGFwcGVuOiBodHRwczovL2dpdGh1Yi5jb20vc3R5bGVkLWNvbXBvbmVudHMvc3R5bGVkLWNvbXBvbmVudHMvaXNzdWVzLzE5NDEjaXNzdWVjb21tZW50LTQxNzg2MjAyMVxcblxcblwiLDExOlwiX1RoaXMgZXJyb3Igd2FzIHJlcGxhY2VkIHdpdGggYSBkZXYtdGltZSB3YXJuaW5nLCBpdCB3aWxsIGJlIGRlbGV0ZWQgZm9yIHY0IGZpbmFsLl8gW2NyZWF0ZUdsb2JhbFN0eWxlXSByZWNlaXZlZCBjaGlsZHJlbiB3aGljaCB3aWxsIG5vdCBiZSByZW5kZXJlZC4gUGxlYXNlIHVzZSB0aGUgY29tcG9uZW50IHdpdGhvdXQgcGFzc2luZyBjaGlsZHJlbiBlbGVtZW50cy5cXG5cXG5cIiwxMjpcIkl0IHNlZW1zIHlvdSBhcmUgaW50ZXJwb2xhdGluZyBhIGtleWZyYW1lIGRlY2xhcmF0aW9uICglcykgaW50byBhbiB1bnRhZ2dlZCBzdHJpbmcuIFRoaXMgd2FzIHN1cHBvcnRlZCBpbiBzdHlsZWQtY29tcG9uZW50cyB2MywgYnV0IGlzIG5vdCBsb25nZXIgc3VwcG9ydGVkIGluIHY0IGFzIGtleWZyYW1lcyBhcmUgbm93IGluamVjdGVkIG9uLWRlbWFuZC4gUGxlYXNlIHdyYXAgeW91ciBzdHJpbmcgaW4gdGhlIGNzc1xcXFxgXFxcXGAgaGVscGVyIHdoaWNoIGVuc3VyZXMgdGhlIHN0eWxlcyBhcmUgaW5qZWN0ZWQgY29ycmVjdGx5LiBTZWUgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYXBpI2Nzc1xcblxcblwiLDEzOlwiJXMgaXMgbm90IGEgc3R5bGVkIGNvbXBvbmVudCBhbmQgY2Fubm90IGJlIHJlZmVycmVkIHRvIHZpYSBjb21wb25lbnQgc2VsZWN0b3IuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hZHZhbmNlZCNyZWZlcnJpbmctdG8tb3RoZXItY29tcG9uZW50cyBmb3IgbW9yZSBkZXRhaWxzLlxcblxcblwiLDE0OidUaGVtZVByb3ZpZGVyOiBcInRoZW1lXCIgcHJvcCBpcyByZXF1aXJlZC5cXG5cXG4nLDE1OlwiQSBzdHlsaXMgcGx1Z2luIGhhcyBiZWVuIHN1cHBsaWVkIHRoYXQgaXMgbm90IG5hbWVkLiBXZSBuZWVkIGEgbmFtZSBmb3IgZWFjaCBwbHVnaW4gdG8gYmUgYWJsZSB0byBwcmV2ZW50IHN0eWxpbmcgY29sbGlzaW9ucyBiZXR3ZWVuIGRpZmZlcmVudCBzdHlsaXMgY29uZmlndXJhdGlvbnMgd2l0aGluIHRoZSBzYW1lIGFwcC4gQmVmb3JlIHlvdSBwYXNzIHlvdXIgcGx1Z2luIHRvIGA8U3R5bGVTaGVldE1hbmFnZXIgc3R5bGlzUGx1Z2lucz17W119PmAsIHBsZWFzZSBtYWtlIHN1cmUgZWFjaCBwbHVnaW4gaXMgdW5pcXVlbHktbmFtZWQsIGUuZy5cXG5cXG5gYGBqc1xcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShpbXBvcnRlZFBsdWdpbiwgJ25hbWUnLCB7IHZhbHVlOiAnc29tZS11bmlxdWUtbmFtZScgfSk7XFxuYGBgXFxuXFxuXCIsMTY6XCJSZWFjaGVkIHRoZSBsaW1pdCBvZiBob3cgbWFueSBzdHlsZWQgY29tcG9uZW50cyBtYXkgYmUgY3JlYXRlZCBhdCBncm91cCAlcy5cXG5Zb3UgbWF5IG9ubHkgY3JlYXRlIHVwIHRvIDEsMDczLDc0MSw4MjQgY29tcG9uZW50cy4gSWYgeW91J3JlIGNyZWF0aW5nIGNvbXBvbmVudHMgZHluYW1pY2FsbHksXFxuYXMgZm9yIGluc3RhbmNlIGluIHlvdXIgcmVuZGVyIG1ldGhvZCB0aGVuIHlvdSBtYXkgYmUgcnVubmluZyBpbnRvIHRoaXMgbGltaXRhdGlvbi5cXG5cXG5cIiwxNzpcIkNTU1N0eWxlU2hlZXQgY291bGQgbm90IGJlIGZvdW5kIG9uIEhUTUxTdHlsZUVsZW1lbnQuXFxuSGFzIHN0eWxlZC1jb21wb25lbnRzJyBzdHlsZSB0YWcgYmVlbiB1bm1vdW50ZWQgb3IgYWx0ZXJlZCBieSBhbm90aGVyIHNjcmlwdD9cXG5cIn06e307ZnVuY3Rpb24gRCgpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoPD0wP3ZvaWQgMDphcmd1bWVudHNbMF0sdD1bXSxuPTEscj1hcmd1bWVudHMubGVuZ3RoO248cjtuKz0xKXQucHVzaChuPDB8fGFyZ3VtZW50cy5sZW5ndGg8PW4/dm9pZCAwOmFyZ3VtZW50c1tuXSk7cmV0dXJuIHQuZm9yRWFjaCgoZnVuY3Rpb24odCl7ZT1lLnJlcGxhY2UoLyVbYS16XS8sdCl9KSksZX1mdW5jdGlvbiBqKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCkscj0xO3I8dDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTt0aHJvd1wicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/bmV3IEVycm9yKFwiQW4gZXJyb3Igb2NjdXJyZWQuIFNlZSBodHRwczovL2dpdC5pby9KVUlhRSNcIitlK1wiIGZvciBtb3JlIGluZm9ybWF0aW9uLlwiKyhuLmxlbmd0aD4wP1wiIEFyZ3M6IFwiK24uam9pbihcIiwgXCIpOlwiXCIpKTpuZXcgRXJyb3IoRC5hcHBseSh2b2lkIDAsW1JbZV1dLmNvbmNhdChuKSkudHJpbSgpKX12YXIgVD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5ncm91cFNpemVzPW5ldyBVaW50MzJBcnJheSg1MTIpLHRoaXMubGVuZ3RoPTUxMix0aGlzLnRhZz1lfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmluZGV4T2ZHcm91cD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MCxuPTA7bjxlO24rKyl0Kz10aGlzLmdyb3VwU2l6ZXNbbl07cmV0dXJuIHR9LHQuaW5zZXJ0UnVsZXM9ZnVuY3Rpb24oZSx0KXtpZihlPj10aGlzLmdyb3VwU2l6ZXMubGVuZ3RoKXtmb3IodmFyIG49dGhpcy5ncm91cFNpemVzLHI9bi5sZW5ndGgsbz1yO2U+PW87KShvPDw9MSk8MCYmaigxNixcIlwiK2UpO3RoaXMuZ3JvdXBTaXplcz1uZXcgVWludDMyQXJyYXkobyksdGhpcy5ncm91cFNpemVzLnNldChuKSx0aGlzLmxlbmd0aD1vO2Zvcih2YXIgcz1yO3M8bztzKyspdGhpcy5ncm91cFNpemVzW3NdPTB9Zm9yKHZhciBpPXRoaXMuaW5kZXhPZkdyb3VwKGUrMSksYT0wLGM9dC5sZW5ndGg7YTxjO2ErKyl0aGlzLnRhZy5pbnNlcnRSdWxlKGksdFthXSkmJih0aGlzLmdyb3VwU2l6ZXNbZV0rKyxpKyspfSx0LmNsZWFyR3JvdXA9ZnVuY3Rpb24oZSl7aWYoZTx0aGlzLmxlbmd0aCl7dmFyIHQ9dGhpcy5ncm91cFNpemVzW2VdLG49dGhpcy5pbmRleE9mR3JvdXAoZSkscj1uK3Q7dGhpcy5ncm91cFNpemVzW2VdPTA7Zm9yKHZhciBvPW47bzxyO28rKyl0aGlzLnRhZy5kZWxldGVSdWxlKG4pfX0sdC5nZXRHcm91cD1mdW5jdGlvbihlKXt2YXIgdD1cIlwiO2lmKGU+PXRoaXMubGVuZ3RofHwwPT09dGhpcy5ncm91cFNpemVzW2VdKXJldHVybiB0O2Zvcih2YXIgbj10aGlzLmdyb3VwU2l6ZXNbZV0scj10aGlzLmluZGV4T2ZHcm91cChlKSxvPXIrbixzPXI7czxvO3MrKyl0Kz10aGlzLnRhZy5nZXRSdWxlKHMpK1wiLyohc2MqL1xcblwiO3JldHVybiB0fSxlfSgpLHg9bmV3IE1hcCxrPW5ldyBNYXAsVj0xLEI9ZnVuY3Rpb24oZSl7aWYoeC5oYXMoZSkpcmV0dXJuIHguZ2V0KGUpO2Zvcig7ay5oYXMoVik7KVYrKzt2YXIgdD1WKys7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKCgwfHQpPDB8fHQ+MTw8MzApJiZqKDE2LFwiXCIrdCkseC5zZXQoZSx0KSxrLnNldCh0LGUpLHR9LHo9ZnVuY3Rpb24oZSl7cmV0dXJuIGsuZ2V0KGUpfSxNPWZ1bmN0aW9uKGUsdCl7dD49ViYmKFY9dCsxKSx4LnNldChlLHQpLGsuc2V0KHQsZSl9LEc9XCJzdHlsZVtcIitBKyddW2RhdGEtc3R5bGVkLXZlcnNpb249XCI1LjMuOFwiXScsTD1uZXcgUmVnRXhwKFwiXlwiK0ErJ1xcXFwuZyhcXFxcZCspXFxcXFtpZD1cIihbXFxcXHdcXFxcZC1dKylcIlxcXFxdLio/XCIoW15cIl0qKScpLEY9ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcixvPW4uc3BsaXQoXCIsXCIpLHM9MCxpPW8ubGVuZ3RoO3M8aTtzKyspKHI9b1tzXSkmJmUucmVnaXN0ZXJOYW1lKHQscil9LFk9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49KHQudGV4dENvbnRlbnR8fFwiXCIpLnNwbGl0KFwiLyohc2MqL1xcblwiKSxyPVtdLG89MCxzPW4ubGVuZ3RoO288cztvKyspe3ZhciBpPW5bb10udHJpbSgpO2lmKGkpe3ZhciBhPWkubWF0Y2goTCk7aWYoYSl7dmFyIGM9MHxwYXJzZUludChhWzFdLDEwKSx1PWFbMl07MCE9PWMmJihNKHUsYyksRihlLHUsYVszXSksZS5nZXRUYWcoKS5pbnNlcnRSdWxlcyhjLHIpKSxyLmxlbmd0aD0wfWVsc2Ugci5wdXNoKGkpfX19LHE9ZnVuY3Rpb24oKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgX193ZWJwYWNrX25vbmNlX18/X193ZWJwYWNrX25vbmNlX186bnVsbH0sSD1mdW5jdGlvbihlKXt2YXIgdD1kb2N1bWVudC5oZWFkLG49ZXx8dCxyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxvPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmNoaWxkTm9kZXMsbj10Lmxlbmd0aDtuPj0wO24tLSl7dmFyIHI9dFtuXTtpZihyJiYxPT09ci5ub2RlVHlwZSYmci5oYXNBdHRyaWJ1dGUoQSkpcmV0dXJuIHJ9fShuKSxzPXZvaWQgMCE9PW8/by5uZXh0U2libGluZzpudWxsO3Iuc2V0QXR0cmlidXRlKEEsXCJhY3RpdmVcIiksci5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN0eWxlZC12ZXJzaW9uXCIsXCI1LjMuOFwiKTt2YXIgaT1xKCk7cmV0dXJuIGkmJnIuc2V0QXR0cmlidXRlKFwibm9uY2VcIixpKSxuLmluc2VydEJlZm9yZShyLHMpLHJ9LCQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3ZhciB0PXRoaXMuZWxlbWVudD1IKGUpO3QuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIikpLHRoaXMuc2hlZXQ9ZnVuY3Rpb24oZSl7aWYoZS5zaGVldClyZXR1cm4gZS5zaGVldDtmb3IodmFyIHQ9ZG9jdW1lbnQuc3R5bGVTaGVldHMsbj0wLHI9dC5sZW5ndGg7bjxyO24rKyl7dmFyIG89dFtuXTtpZihvLm93bmVyTm9kZT09PWUpcmV0dXJuIG99aigxNyl9KHQpLHRoaXMubGVuZ3RoPTB9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaW5zZXJ0UnVsZT1mdW5jdGlvbihlLHQpe3RyeXtyZXR1cm4gdGhpcy5zaGVldC5pbnNlcnRSdWxlKHQsZSksdGhpcy5sZW5ndGgrKywhMH1jYXRjaChlKXtyZXR1cm4hMX19LHQuZGVsZXRlUnVsZT1mdW5jdGlvbihlKXt0aGlzLnNoZWV0LmRlbGV0ZVJ1bGUoZSksdGhpcy5sZW5ndGgtLX0sdC5nZXRSdWxlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuc2hlZXQuY3NzUnVsZXNbZV07cmV0dXJuIHZvaWQgMCE9PXQmJlwic3RyaW5nXCI9PXR5cGVvZiB0LmNzc1RleHQ/dC5jc3NUZXh0OlwiXCJ9LGV9KCksVz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ9dGhpcy5lbGVtZW50PUgoZSk7dGhpcy5ub2Rlcz10LmNoaWxkTm9kZXMsdGhpcy5sZW5ndGg9MH12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5pbnNlcnRSdWxlPWZ1bmN0aW9uKGUsdCl7aWYoZTw9dGhpcy5sZW5ndGgmJmU+PTApe3ZhciBuPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHQpLHI9dGhpcy5ub2Rlc1tlXTtyZXR1cm4gdGhpcy5lbGVtZW50Lmluc2VydEJlZm9yZShuLHJ8fG51bGwpLHRoaXMubGVuZ3RoKyssITB9cmV0dXJuITF9LHQuZGVsZXRlUnVsZT1mdW5jdGlvbihlKXt0aGlzLmVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5ub2Rlc1tlXSksdGhpcy5sZW5ndGgtLX0sdC5nZXRSdWxlPWZ1bmN0aW9uKGUpe3JldHVybiBlPHRoaXMubGVuZ3RoP3RoaXMubm9kZXNbZV0udGV4dENvbnRlbnQ6XCJcIn0sZX0oKSxVPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLnJ1bGVzPVtdLHRoaXMubGVuZ3RoPTB9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaW5zZXJ0UnVsZT1mdW5jdGlvbihlLHQpe3JldHVybiBlPD10aGlzLmxlbmd0aCYmKHRoaXMucnVsZXMuc3BsaWNlKGUsMCx0KSx0aGlzLmxlbmd0aCsrLCEwKX0sdC5kZWxldGVSdWxlPWZ1bmN0aW9uKGUpe3RoaXMucnVsZXMuc3BsaWNlKGUsMSksdGhpcy5sZW5ndGgtLX0sdC5nZXRSdWxlPWZ1bmN0aW9uKGUpe3JldHVybiBlPHRoaXMubGVuZ3RoP3RoaXMucnVsZXNbZV06XCJcIn0sZX0oKSxKPUksWD17aXNTZXJ2ZXI6IUksdXNlQ1NTT01JbmplY3Rpb246IVB9LFo9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCxuKXt2b2lkIDA9PT1lJiYoZT1FKSx2b2lkIDA9PT10JiYodD17fSksdGhpcy5vcHRpb25zPXYoe30sWCx7fSxlKSx0aGlzLmdzPXQsdGhpcy5uYW1lcz1uZXcgTWFwKG4pLHRoaXMuc2VydmVyPSEhZS5pc1NlcnZlciwhdGhpcy5zZXJ2ZXImJkkmJkomJihKPSExLGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKEcpLG49MCxyPXQubGVuZ3RoO248cjtuKyspe3ZhciBvPXRbbl07byYmXCJhY3RpdmVcIiE9PW8uZ2V0QXR0cmlidXRlKEEpJiYoWShlLG8pLG8ucGFyZW50Tm9kZSYmby5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG8pKX19KHRoaXMpKX1lLnJlZ2lzdGVySWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIEIoZSl9O3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LnJlY29uc3RydWN0V2l0aE9wdGlvbnM9ZnVuY3Rpb24odCxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49ITApLG5ldyBlKHYoe30sdGhpcy5vcHRpb25zLHt9LHQpLHRoaXMuZ3MsbiYmdGhpcy5uYW1lc3x8dm9pZCAwKX0sdC5hbGxvY2F0ZUdTSW5zdGFuY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZ3NbZV09KHRoaXMuZ3NbZV18fDApKzF9LHQuZ2V0VGFnPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGFnfHwodGhpcy50YWc9KG49KHQ9dGhpcy5vcHRpb25zKS5pc1NlcnZlcixyPXQudXNlQ1NTT01JbmplY3Rpb24sbz10LnRhcmdldCxlPW4/bmV3IFUobyk6cj9uZXcgJChvKTpuZXcgVyhvKSxuZXcgVChlKSkpO3ZhciBlLHQsbixyLG99LHQuaGFzTmFtZUZvcklkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMubmFtZXMuaGFzKGUpJiZ0aGlzLm5hbWVzLmdldChlKS5oYXModCl9LHQucmVnaXN0ZXJOYW1lPWZ1bmN0aW9uKGUsdCl7aWYoQihlKSx0aGlzLm5hbWVzLmhhcyhlKSl0aGlzLm5hbWVzLmdldChlKS5hZGQodCk7ZWxzZXt2YXIgbj1uZXcgU2V0O24uYWRkKHQpLHRoaXMubmFtZXMuc2V0KGUsbil9fSx0Lmluc2VydFJ1bGVzPWZ1bmN0aW9uKGUsdCxuKXt0aGlzLnJlZ2lzdGVyTmFtZShlLHQpLHRoaXMuZ2V0VGFnKCkuaW5zZXJ0UnVsZXMoQihlKSxuKX0sdC5jbGVhck5hbWVzPWZ1bmN0aW9uKGUpe3RoaXMubmFtZXMuaGFzKGUpJiZ0aGlzLm5hbWVzLmdldChlKS5jbGVhcigpfSx0LmNsZWFyUnVsZXM9ZnVuY3Rpb24oZSl7dGhpcy5nZXRUYWcoKS5jbGVhckdyb3VwKEIoZSkpLHRoaXMuY2xlYXJOYW1lcyhlKX0sdC5jbGVhclRhZz1mdW5jdGlvbigpe3RoaXMudGFnPXZvaWQgMH0sdC50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5nZXRUYWcoKSxuPXQubGVuZ3RoLHI9XCJcIixvPTA7bzxuO28rKyl7dmFyIHM9eihvKTtpZih2b2lkIDAhPT1zKXt2YXIgaT1lLm5hbWVzLmdldChzKSxhPXQuZ2V0R3JvdXAobyk7aWYoaSYmYSYmaS5zaXplKXt2YXIgYz1BK1wiLmdcIitvKydbaWQ9XCInK3MrJ1wiXScsdT1cIlwiO3ZvaWQgMCE9PWkmJmkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5sZW5ndGg+MCYmKHUrPWUrXCIsXCIpfSkpLHIrPVwiXCIrYStjKyd7Y29udGVudDpcIicrdSsnXCJ9Lyohc2MqL1xcbid9fX1yZXR1cm4gcn0odGhpcyl9LGV9KCksSz0vKGEpKGQpL2dpLFE9ZnVuY3Rpb24oZSl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoZSsoZT4yNT8zOTo5NykpfTtmdW5jdGlvbiBlZShlKXt2YXIgdCxuPVwiXCI7Zm9yKHQ9TWF0aC5hYnMoZSk7dD41Mjt0PXQvNTJ8MCluPVEodCU1MikrbjtyZXR1cm4oUSh0JTUyKStuKS5yZXBsYWNlKEssXCIkMS0kMlwiKX12YXIgdGU9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49dC5sZW5ndGg7bjspZT0zMyplXnQuY2hhckNvZGVBdCgtLW4pO3JldHVybiBlfSxuZT1mdW5jdGlvbihlKXtyZXR1cm4gdGUoNTM4MSxlKX07ZnVuY3Rpb24gcmUoZSl7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kz0xKXt2YXIgbj1lW3RdO2lmKGIobikmJiFOKG4pKXJldHVybiExfXJldHVybiEwfXZhciBvZT1uZShcIjUuMy44XCIpLHNlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQsbil7dGhpcy5ydWxlcz1lLHRoaXMuc3RhdGljUnVsZXNJZD1cIlwiLHRoaXMuaXNTdGF0aWM9XCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKHZvaWQgMD09PW58fG4uaXNTdGF0aWMpJiZyZShlKSx0aGlzLmNvbXBvbmVudElkPXQsdGhpcy5iYXNlSGFzaD10ZShvZSx0KSx0aGlzLmJhc2VTdHlsZT1uLFoucmVnaXN0ZXJJZCh0KX1yZXR1cm4gZS5wcm90b3R5cGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXM9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXMuY29tcG9uZW50SWQsbz1bXTtpZih0aGlzLmJhc2VTdHlsZSYmby5wdXNoKHRoaXMuYmFzZVN0eWxlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKGUsdCxuKSksdGhpcy5pc1N0YXRpYyYmIW4uaGFzaClpZih0aGlzLnN0YXRpY1J1bGVzSWQmJnQuaGFzTmFtZUZvcklkKHIsdGhpcy5zdGF0aWNSdWxlc0lkKSlvLnB1c2godGhpcy5zdGF0aWNSdWxlc0lkKTtlbHNle3ZhciBzPU5lKHRoaXMucnVsZXMsZSx0LG4pLmpvaW4oXCJcIiksaT1lZSh0ZSh0aGlzLmJhc2VIYXNoLHMpPj4+MCk7aWYoIXQuaGFzTmFtZUZvcklkKHIsaSkpe3ZhciBhPW4ocyxcIi5cIitpLHZvaWQgMCxyKTt0Lmluc2VydFJ1bGVzKHIsaSxhKX1vLnB1c2goaSksdGhpcy5zdGF0aWNSdWxlc0lkPWl9ZWxzZXtmb3IodmFyIGM9dGhpcy5ydWxlcy5sZW5ndGgsdT10ZSh0aGlzLmJhc2VIYXNoLG4uaGFzaCksbD1cIlwiLGQ9MDtkPGM7ZCsrKXt2YXIgaD10aGlzLnJ1bGVzW2RdO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBoKWwrPWgsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKHU9dGUodSxoK2QpKTtlbHNlIGlmKGgpe3ZhciBwPU5lKGgsZSx0LG4pLGY9QXJyYXkuaXNBcnJheShwKT9wLmpvaW4oXCJcIik6cDt1PXRlKHUsZitkKSxsKz1mfX1pZihsKXt2YXIgbT1lZSh1Pj4+MCk7aWYoIXQuaGFzTmFtZUZvcklkKHIsbSkpe3ZhciB5PW4obCxcIi5cIittLHZvaWQgMCxyKTt0Lmluc2VydFJ1bGVzKHIsbSx5KX1vLnB1c2gobSl9fXJldHVybiBvLmpvaW4oXCIgXCIpfSxlfSgpLGllPS9eXFxzKlxcL1xcLy4qJC9nbSxhZT1bXCI6XCIsXCJbXCIsXCIuXCIsXCIjXCJdO2Z1bmN0aW9uIGNlKGUpe3ZhciB0LG4scixvLHM9dm9pZCAwPT09ZT9FOmUsaT1zLm9wdGlvbnMsYT12b2lkIDA9PT1pP0U6aSxjPXMucGx1Z2lucyx1PXZvaWQgMD09PWM/dzpjLGw9bmV3IHAoYSksZD1bXSxoPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7aWYodCl0cnl7ZSh0K1wifVwiKX1jYXRjaChlKXt9fXJldHVybiBmdW5jdGlvbihuLHIsbyxzLGksYSxjLHUsbCxkKXtzd2l0Y2gobil7Y2FzZSAxOmlmKDA9PT1sJiY2ND09PXIuY2hhckNvZGVBdCgwKSlyZXR1cm4gZShyK1wiO1wiKSxcIlwiO2JyZWFrO2Nhc2UgMjppZigwPT09dSlyZXR1cm4gcitcIi8qfCovXCI7YnJlYWs7Y2FzZSAzOnN3aXRjaCh1KXtjYXNlIDEwMjpjYXNlIDExMjpyZXR1cm4gZShvWzBdK3IpLFwiXCI7ZGVmYXVsdDpyZXR1cm4gcisoMD09PWQ/XCIvKnwqL1wiOlwiXCIpfWNhc2UtMjpyLnNwbGl0KFwiLyp8Ki99XCIpLmZvckVhY2godCl9fX0oKGZ1bmN0aW9uKGUpe2QucHVzaChlKX0pKSxmPWZ1bmN0aW9uKGUscixzKXtyZXR1cm4gMD09PXImJi0xIT09YWUuaW5kZXhPZihzW24ubGVuZ3RoXSl8fHMubWF0Y2gobyk/ZTpcIi5cIit0fTtmdW5jdGlvbiBtKGUscyxpLGEpe3ZvaWQgMD09PWEmJihhPVwiJlwiKTt2YXIgYz1lLnJlcGxhY2UoaWUsXCJcIiksdT1zJiZpP2krXCIgXCIrcytcIiB7IFwiK2MrXCIgfVwiOmM7cmV0dXJuIHQ9YSxuPXMscj1uZXcgUmVnRXhwKFwiXFxcXFwiK24rXCJcXFxcYlwiLFwiZ1wiKSxvPW5ldyBSZWdFeHAoXCIoXFxcXFwiK24rXCJcXFxcYil7Mix9XCIpLGwoaXx8IXM/XCJcIjpzLHUpfXJldHVybiBsLnVzZShbXS5jb25jYXQodSxbZnVuY3Rpb24oZSx0LG8pezI9PT1lJiZvLmxlbmd0aCYmb1swXS5sYXN0SW5kZXhPZihuKT4wJiYob1swXT1vWzBdLnJlcGxhY2UocixmKSl9LGgsZnVuY3Rpb24oZSl7aWYoLTI9PT1lKXt2YXIgdD1kO3JldHVybiBkPVtdLHR9fV0pKSxtLmhhc2g9dS5sZW5ndGg/dS5yZWR1Y2UoKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQubmFtZXx8aigxNSksdGUoZSx0Lm5hbWUpfSksNTM4MSkudG9TdHJpbmcoKTpcIlwiLG19dmFyIHVlPXIuY3JlYXRlQ29udGV4dCgpLGxlPXVlLkNvbnN1bWVyLGRlPXIuY3JlYXRlQ29udGV4dCgpLGhlPShkZS5Db25zdW1lcixuZXcgWikscGU9Y2UoKTtmdW5jdGlvbiBmZSgpe3JldHVybiBzKHVlKXx8aGV9ZnVuY3Rpb24gbWUoKXtyZXR1cm4gcyhkZSl8fHBlfWZ1bmN0aW9uIHllKGUpe3ZhciB0PW8oZS5zdHlsaXNQbHVnaW5zKSxuPXRbMF0scz10WzFdLGM9ZmUoKSx1PWkoKGZ1bmN0aW9uKCl7dmFyIHQ9YztyZXR1cm4gZS5zaGVldD90PWUuc2hlZXQ6ZS50YXJnZXQmJih0PXQucmVjb25zdHJ1Y3RXaXRoT3B0aW9ucyh7dGFyZ2V0OmUudGFyZ2V0fSwhMSkpLGUuZGlzYWJsZUNTU09NSW5qZWN0aW9uJiYodD10LnJlY29uc3RydWN0V2l0aE9wdGlvbnMoe3VzZUNTU09NSW5qZWN0aW9uOiExfSkpLHR9KSxbZS5kaXNhYmxlQ1NTT01JbmplY3Rpb24sZS5zaGVldCxlLnRhcmdldF0pLGw9aSgoZnVuY3Rpb24oKXtyZXR1cm4gY2Uoe29wdGlvbnM6e3ByZWZpeDohZS5kaXNhYmxlVmVuZG9yUHJlZml4ZXN9LHBsdWdpbnM6bn0pfSksW2UuZGlzYWJsZVZlbmRvclByZWZpeGVzLG5dKTtyZXR1cm4gYSgoZnVuY3Rpb24oKXtoKG4sZS5zdHlsaXNQbHVnaW5zKXx8cyhlLnN0eWxpc1BsdWdpbnMpfSksW2Uuc3R5bGlzUGx1Z2luc10pLHIuY3JlYXRlRWxlbWVudCh1ZS5Qcm92aWRlcix7dmFsdWU6dX0sci5jcmVhdGVFbGVtZW50KGRlLlByb3ZpZGVyLHt2YWx1ZTpsfSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3IuQ2hpbGRyZW4ub25seShlLmNoaWxkcmVuKTplLmNoaWxkcmVuKSl9dmFyIHZlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuPXRoaXM7dGhpcy5pbmplY3Q9ZnVuY3Rpb24oZSx0KXt2b2lkIDA9PT10JiYodD1wZSk7dmFyIHI9bi5uYW1lK3QuaGFzaDtlLmhhc05hbWVGb3JJZChuLmlkLHIpfHxlLmluc2VydFJ1bGVzKG4uaWQscix0KG4ucnVsZXMscixcIkBrZXlmcmFtZXNcIikpfSx0aGlzLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGooMTIsU3RyaW5nKG4ubmFtZSkpfSx0aGlzLm5hbWU9ZSx0aGlzLmlkPVwic2Mta2V5ZnJhbWVzLVwiK2UsdGhpcy5ydWxlcz10fXJldHVybiBlLnByb3RvdHlwZS5nZXROYW1lPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT1wZSksdGhpcy5uYW1lK2UuaGFzaH0sZX0oKSxnZT0vKFtBLVpdKS8sU2U9LyhbQS1aXSkvZyx3ZT0vXm1zLS8sRWU9ZnVuY3Rpb24oZSl7cmV0dXJuXCItXCIrZS50b0xvd2VyQ2FzZSgpfTtmdW5jdGlvbiBiZShlKXtyZXR1cm4gZ2UudGVzdChlKT9lLnJlcGxhY2UoU2UsRWUpLnJlcGxhY2Uod2UsXCItbXMtXCIpOmV9dmFyIF9lPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lfHwhMT09PWV8fFwiXCI9PT1lfTtmdW5jdGlvbiBOZShlLG4scixvKXtpZihBcnJheS5pc0FycmF5KGUpKXtmb3IodmFyIHMsaT1bXSxhPTAsYz1lLmxlbmd0aDthPGM7YSs9MSlcIlwiIT09KHM9TmUoZVthXSxuLHIsbykpJiYoQXJyYXkuaXNBcnJheShzKT9pLnB1c2guYXBwbHkoaSxzKTppLnB1c2gocykpO3JldHVybiBpfWlmKF9lKGUpKXJldHVyblwiXCI7aWYoTihlKSlyZXR1cm5cIi5cIitlLnN0eWxlZENvbXBvbmVudElkO2lmKGIoZSkpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mKGw9ZSl8fGwucHJvdG90eXBlJiZsLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50fHwhbilyZXR1cm4gZTt2YXIgdT1lKG4pO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJnQodSkmJmNvbnNvbGUud2FybihfKGUpK1wiIGlzIG5vdCBhIHN0eWxlZCBjb21wb25lbnQgYW5kIGNhbm5vdCBiZSByZWZlcnJlZCB0byB2aWEgY29tcG9uZW50IHNlbGVjdG9yLiBTZWUgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYWR2YW5jZWQjcmVmZXJyaW5nLXRvLW90aGVyLWNvbXBvbmVudHMgZm9yIG1vcmUgZGV0YWlscy5cIiksTmUodSxuLHIsbyl9dmFyIGw7cmV0dXJuIGUgaW5zdGFuY2VvZiB2ZT9yPyhlLmluamVjdChyLG8pLGUuZ2V0TmFtZShvKSk6ZTpTKGUpP2Z1bmN0aW9uIGUodCxuKXt2YXIgcixvLHM9W107Zm9yKHZhciBpIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShpKSYmIV9lKHRbaV0pJiYoQXJyYXkuaXNBcnJheSh0W2ldKSYmdFtpXS5pc0Nzc3x8Yih0W2ldKT9zLnB1c2goYmUoaSkrXCI6XCIsdFtpXSxcIjtcIik6Uyh0W2ldKT9zLnB1c2guYXBwbHkocyxlKHRbaV0saSkpOnMucHVzaChiZShpKStcIjogXCIrKHI9aSxudWxsPT0obz10W2ldKXx8XCJib29sZWFuXCI9PXR5cGVvZiBvfHxcIlwiPT09bz9cIlwiOlwibnVtYmVyXCIhPXR5cGVvZiBvfHwwPT09b3x8ciBpbiBmP1N0cmluZyhvKS50cmltKCk6bytcInB4XCIpK1wiO1wiKSk7cmV0dXJuIG4/W24rXCIge1wiXS5jb25jYXQocyxbXCJ9XCJdKTpzfShlKTplLnRvU3RyaW5nKCl9dmFyIEFlPWZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpJiYoZS5pc0Nzcz0hMCksZX07ZnVuY3Rpb24gQ2UoZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO3JldHVybiBiKGUpfHxTKGUpP0FlKE5lKGcodyxbZV0uY29uY2F0KG4pKSkpOjA9PT1uLmxlbmd0aCYmMT09PWUubGVuZ3RoJiZcInN0cmluZ1wiPT10eXBlb2YgZVswXT9lOkFlKE5lKGcoZSxuKSkpfXZhciBJZT0vaW52YWxpZCBob29rIGNhbGwvaSxQZT1uZXcgU2V0LE9lPWZ1bmN0aW9uKGUsdCl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIG49XCJUaGUgY29tcG9uZW50IFwiK2UrKHQ/JyB3aXRoIHRoZSBpZCBvZiBcIicrdCsnXCInOlwiXCIpK1wiIGhhcyBiZWVuIGNyZWF0ZWQgZHluYW1pY2FsbHkuXFxuWW91IG1heSBzZWUgdGhpcyB3YXJuaW5nIGJlY2F1c2UgeW91J3ZlIGNhbGxlZCBzdHlsZWQgaW5zaWRlIGFub3RoZXIgY29tcG9uZW50LlxcblRvIHJlc29sdmUgdGhpcyBvbmx5IGNyZWF0ZSBuZXcgU3R5bGVkQ29tcG9uZW50cyBvdXRzaWRlIG9mIGFueSByZW5kZXIgbWV0aG9kIGFuZCBmdW5jdGlvbiBjb21wb25lbnQuXCIscj1jb25zb2xlLmVycm9yO3RyeXt2YXIgbz0hMDtjb25zb2xlLmVycm9yPWZ1bmN0aW9uKGUpe2lmKEllLnRlc3QoZSkpbz0hMSxQZS5kZWxldGUobik7ZWxzZXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxzPW5ldyBBcnJheSh0PjE/dC0xOjApLGk9MTtpPHQ7aSsrKXNbaS0xXT1hcmd1bWVudHNbaV07ci5hcHBseSh2b2lkIDAsW2VdLmNvbmNhdChzKSl9fSxjKCksbyYmIVBlLmhhcyhuKSYmKGNvbnNvbGUud2FybihuKSxQZS5hZGQobikpfWNhdGNoKGUpe0llLnRlc3QoZS5tZXNzYWdlKSYmUGUuZGVsZXRlKG4pfWZpbmFsbHl7Y29uc29sZS5lcnJvcj1yfX19LFJlPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49RSksZS50aGVtZSE9PW4udGhlbWUmJmUudGhlbWV8fHR8fG4udGhlbWV9LERlPS9bIVwiIyQlJicoKSorLC4vOjs8PT4/QFtcXFxcXFxdXmB7fH1+LV0rL2csamU9LyheLXwtJCkvZztmdW5jdGlvbiBUZShlKXtyZXR1cm4gZS5yZXBsYWNlKERlLFwiLVwiKS5yZXBsYWNlKGplLFwiXCIpfXZhciB4ZT1mdW5jdGlvbihlKXtyZXR1cm4gZWUobmUoZSk+Pj4wKX07ZnVuY3Rpb24ga2UoZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJihcInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WfHxlLmNoYXJBdCgwKT09PWUuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkpfXZhciBWZT1mdW5jdGlvbihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlfHxcIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWUmJiFBcnJheS5pc0FycmF5KGUpfSxCZT1mdW5jdGlvbihlKXtyZXR1cm5cIl9fcHJvdG9fX1wiIT09ZSYmXCJjb25zdHJ1Y3RvclwiIT09ZSYmXCJwcm90b3R5cGVcIiE9PWV9O2Z1bmN0aW9uIHplKGUsdCxuKXt2YXIgcj1lW25dO1ZlKHQpJiZWZShyKT9NZShyLHQpOmVbbl09dH1mdW5jdGlvbiBNZShlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07Zm9yKHZhciBvPTAscz1uO288cy5sZW5ndGg7bysrKXt2YXIgaT1zW29dO2lmKFZlKGkpKWZvcih2YXIgYSBpbiBpKUJlKGEpJiZ6ZShlLGlbYV0sYSl9cmV0dXJuIGV9dmFyIEdlPXIuY3JlYXRlQ29udGV4dCgpLExlPUdlLkNvbnN1bWVyO2Z1bmN0aW9uIEZlKGUpe3ZhciB0PXMoR2UpLG49aSgoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtpZighZSlyZXR1cm4gaigxNCk7aWYoYihlKSl7dmFyIG49ZSh0KTtyZXR1cm5cInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WfHxudWxsIT09biYmIUFycmF5LmlzQXJyYXkobikmJlwib2JqZWN0XCI9PXR5cGVvZiBuP246aig3KX1yZXR1cm4gQXJyYXkuaXNBcnJheShlKXx8XCJvYmplY3RcIiE9dHlwZW9mIGU/aig4KTp0P3Yoe30sdCx7fSxlKTplfShlLnRoZW1lLHQpfSksW2UudGhlbWUsdF0pO3JldHVybiBlLmNoaWxkcmVuP3IuY3JlYXRlRWxlbWVudChHZS5Qcm92aWRlcix7dmFsdWU6bn0sZS5jaGlsZHJlbik6bnVsbH12YXIgWWU9e307ZnVuY3Rpb24gcWUoZSx0LG4pe3ZhciBvPU4oZSksaT0ha2UoZSksYT10LmF0dHJzLGM9dm9pZCAwPT09YT93OmEsZD10LmNvbXBvbmVudElkLGg9dm9pZCAwPT09ZD9mdW5jdGlvbihlLHQpe3ZhciBuPVwic3RyaW5nXCIhPXR5cGVvZiBlP1wic2NcIjpUZShlKTtZZVtuXT0oWWVbbl18fDApKzE7dmFyIHI9bitcIi1cIit4ZShcIjUuMy44XCIrbitZZVtuXSk7cmV0dXJuIHQ/dCtcIi1cIityOnJ9KHQuZGlzcGxheU5hbWUsdC5wYXJlbnRDb21wb25lbnRJZCk6ZCxwPXQuZGlzcGxheU5hbWUsZj12b2lkIDA9PT1wP2Z1bmN0aW9uKGUpe3JldHVybiBrZShlKT9cInN0eWxlZC5cIitlOlwiU3R5bGVkKFwiK18oZSkrXCIpXCJ9KGUpOnAsZz10LmRpc3BsYXlOYW1lJiZ0LmNvbXBvbmVudElkP1RlKHQuZGlzcGxheU5hbWUpK1wiLVwiK3QuY29tcG9uZW50SWQ6dC5jb21wb25lbnRJZHx8aCxTPW8mJmUuYXR0cnM/QXJyYXkucHJvdG90eXBlLmNvbmNhdChlLmF0dHJzLGMpLmZpbHRlcihCb29sZWFuKTpjLEE9dC5zaG91bGRGb3J3YXJkUHJvcDtvJiZlLnNob3VsZEZvcndhcmRQcm9wJiYoQT10LnNob3VsZEZvcndhcmRQcm9wP2Z1bmN0aW9uKG4scixvKXtyZXR1cm4gZS5zaG91bGRGb3J3YXJkUHJvcChuLHIsbykmJnQuc2hvdWxkRm9yd2FyZFByb3AobixyLG8pfTplLnNob3VsZEZvcndhcmRQcm9wKTt2YXIgQyxJPW5ldyBzZShuLGcsbz9lLmNvbXBvbmVudFN0eWxlOnZvaWQgMCksUD1JLmlzU3RhdGljJiYwPT09Yy5sZW5ndGgsTz1mdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbihlLHQsbixyKXt2YXIgbz1lLmF0dHJzLGk9ZS5jb21wb25lbnRTdHlsZSxhPWUuZGVmYXVsdFByb3BzLGM9ZS5mb2xkZWRDb21wb25lbnRJZHMsZD1lLnNob3VsZEZvcndhcmRQcm9wLGg9ZS5zdHlsZWRDb21wb25lbnRJZCxwPWUudGFyZ2V0O1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmwoaCk7dmFyIGY9ZnVuY3Rpb24oZSx0LG4pe3ZvaWQgMD09PWUmJihlPUUpO3ZhciByPXYoe30sdCx7dGhlbWU6ZX0pLG89e307cmV0dXJuIG4uZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIHQsbixzLGk9ZTtmb3IodCBpbiBiKGkpJiYoaT1pKHIpKSxpKXJbdF09b1t0XT1cImNsYXNzTmFtZVwiPT09dD8obj1vW3RdLHM9aVt0XSxuJiZzP24rXCIgXCIrczpufHxzKTppW3RdfSkpLFtyLG9dfShSZSh0LHMoR2UpLGEpfHxFLHQsbykseT1mWzBdLGc9ZlsxXSxTPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPWZlKCkscz1tZSgpLGk9dD9lLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKEUsbyxzKTplLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKG4sbyxzKTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZsKGkpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJiF0JiZyJiZyKGkpLGl9KGkscix5LFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/ZS53YXJuVG9vTWFueUNsYXNzZXM6dm9pZCAwKSx3PW4sXz1nLiRhc3x8dC4kYXN8fGcuYXN8fHQuYXN8fHAsTj1rZShfKSxBPWchPT10P3Yoe30sdCx7fSxnKTp0LEM9e307Zm9yKHZhciBJIGluIEEpXCIkXCIhPT1JWzBdJiZcImFzXCIhPT1JJiYoXCJmb3J3YXJkZWRBc1wiPT09ST9DLmFzPUFbSV06KGQ/ZChJLG0sXyk6IU58fG0oSSkpJiYoQ1tJXT1BW0ldKSk7cmV0dXJuIHQuc3R5bGUmJmcuc3R5bGUhPT10LnN0eWxlJiYoQy5zdHlsZT12KHt9LHQuc3R5bGUse30sZy5zdHlsZSkpLEMuY2xhc3NOYW1lPUFycmF5LnByb3RvdHlwZS5jb25jYXQoYyxoLFMhPT1oP1M6bnVsbCx0LmNsYXNzTmFtZSxnLmNsYXNzTmFtZSkuZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpLEMucmVmPXcsdShfLEMpfShDLGUsdCxQKX07cmV0dXJuIE8uZGlzcGxheU5hbWU9ZiwoQz1yLmZvcndhcmRSZWYoTykpLmF0dHJzPVMsQy5jb21wb25lbnRTdHlsZT1JLEMuZGlzcGxheU5hbWU9ZixDLnNob3VsZEZvcndhcmRQcm9wPUEsQy5mb2xkZWRDb21wb25lbnRJZHM9bz9BcnJheS5wcm90b3R5cGUuY29uY2F0KGUuZm9sZGVkQ29tcG9uZW50SWRzLGUuc3R5bGVkQ29tcG9uZW50SWQpOncsQy5zdHlsZWRDb21wb25lbnRJZD1nLEMudGFyZ2V0PW8/ZS50YXJnZXQ6ZSxDLndpdGhDb21wb25lbnQ9ZnVuY3Rpb24oZSl7dmFyIHI9dC5jb21wb25lbnRJZCxvPWZ1bmN0aW9uKGUsdCl7aWYobnVsbD09ZSlyZXR1cm57fTt2YXIgbixyLG89e30scz1PYmplY3Qua2V5cyhlKTtmb3Iocj0wO3I8cy5sZW5ndGg7cisrKW49c1tyXSx0LmluZGV4T2Yobik+PTB8fChvW25dPWVbbl0pO3JldHVybiBvfSh0LFtcImNvbXBvbmVudElkXCJdKSxzPXImJnIrXCItXCIrKGtlKGUpP2U6VGUoXyhlKSkpO3JldHVybiBxZShlLHYoe30sbyx7YXR0cnM6Uyxjb21wb25lbnRJZDpzfSksbil9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDLFwiZGVmYXVsdFByb3BzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9mb2xkZWREZWZhdWx0UHJvcHN9LHNldDpmdW5jdGlvbih0KXt0aGlzLl9mb2xkZWREZWZhdWx0UHJvcHM9bz9NZSh7fSxlLmRlZmF1bHRQcm9wcyx0KTp0fX0pLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihPZShmLGcpLEMud2FyblRvb01hbnlDbGFzc2VzPWZ1bmN0aW9uKGUsdCl7dmFyIG49e30scj0hMTtyZXR1cm4gZnVuY3Rpb24obyl7aWYoIXImJihuW29dPSEwLE9iamVjdC5rZXlzKG4pLmxlbmd0aD49MjAwKSl7dmFyIHM9dD8nIHdpdGggdGhlIGlkIG9mIFwiJyt0KydcIic6XCJcIjtjb25zb2xlLndhcm4oXCJPdmVyIDIwMCBjbGFzc2VzIHdlcmUgZ2VuZXJhdGVkIGZvciBjb21wb25lbnQgXCIrZStzK1wiLlxcbkNvbnNpZGVyIHVzaW5nIHRoZSBhdHRycyBtZXRob2QsIHRvZ2V0aGVyIHdpdGggYSBzdHlsZSBvYmplY3QgZm9yIGZyZXF1ZW50bHkgY2hhbmdlZCBzdHlsZXMuXFxuRXhhbXBsZTpcXG4gIGNvbnN0IENvbXBvbmVudCA9IHN0eWxlZC5kaXYuYXR0cnMocHJvcHMgPT4gKHtcXG4gICAgc3R5bGU6IHtcXG4gICAgICBiYWNrZ3JvdW5kOiBwcm9wcy5iYWNrZ3JvdW5kLFxcbiAgICB9LFxcbiAgfSkpYHdpZHRoOiAxMDAlO2BcXG5cXG4gIDxDb21wb25lbnQgLz5cIikscj0hMCxuPXt9fX19KGYsZykpLEMudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIi5cIitDLnN0eWxlZENvbXBvbmVudElkfSxpJiZ5KEMsZSx7YXR0cnM6ITAsY29tcG9uZW50U3R5bGU6ITAsZGlzcGxheU5hbWU6ITAsZm9sZGVkQ29tcG9uZW50SWRzOiEwLHNob3VsZEZvcndhcmRQcm9wOiEwLHN0eWxlZENvbXBvbmVudElkOiEwLHRhcmdldDohMCx3aXRoQ29tcG9uZW50OiEwfSksQ312YXIgSGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uIGUodCxyLG8pe2lmKHZvaWQgMD09PW8mJihvPUUpLCFuKHIpKXJldHVybiBqKDEsU3RyaW5nKHIpKTt2YXIgcz1mdW5jdGlvbigpe3JldHVybiB0KHIsbyxDZS5hcHBseSh2b2lkIDAsYXJndW1lbnRzKSl9O3JldHVybiBzLndpdGhDb25maWc9ZnVuY3Rpb24obil7cmV0dXJuIGUodCxyLHYoe30sbyx7fSxuKSl9LHMuYXR0cnM9ZnVuY3Rpb24obil7cmV0dXJuIGUodCxyLHYoe30sbyx7YXR0cnM6QXJyYXkucHJvdG90eXBlLmNvbmNhdChvLmF0dHJzLG4pLmZpbHRlcihCb29sZWFuKX0pKX0sc30ocWUsZSl9O1tcImFcIixcImFiYnJcIixcImFkZHJlc3NcIixcImFyZWFcIixcImFydGljbGVcIixcImFzaWRlXCIsXCJhdWRpb1wiLFwiYlwiLFwiYmFzZVwiLFwiYmRpXCIsXCJiZG9cIixcImJpZ1wiLFwiYmxvY2txdW90ZVwiLFwiYm9keVwiLFwiYnJcIixcImJ1dHRvblwiLFwiY2FudmFzXCIsXCJjYXB0aW9uXCIsXCJjaXRlXCIsXCJjb2RlXCIsXCJjb2xcIixcImNvbGdyb3VwXCIsXCJkYXRhXCIsXCJkYXRhbGlzdFwiLFwiZGRcIixcImRlbFwiLFwiZGV0YWlsc1wiLFwiZGZuXCIsXCJkaWFsb2dcIixcImRpdlwiLFwiZGxcIixcImR0XCIsXCJlbVwiLFwiZW1iZWRcIixcImZpZWxkc2V0XCIsXCJmaWdjYXB0aW9uXCIsXCJmaWd1cmVcIixcImZvb3RlclwiLFwiZm9ybVwiLFwiaDFcIixcImgyXCIsXCJoM1wiLFwiaDRcIixcImg1XCIsXCJoNlwiLFwiaGVhZFwiLFwiaGVhZGVyXCIsXCJoZ3JvdXBcIixcImhyXCIsXCJodG1sXCIsXCJpXCIsXCJpZnJhbWVcIixcImltZ1wiLFwiaW5wdXRcIixcImluc1wiLFwia2JkXCIsXCJrZXlnZW5cIixcImxhYmVsXCIsXCJsZWdlbmRcIixcImxpXCIsXCJsaW5rXCIsXCJtYWluXCIsXCJtYXBcIixcIm1hcmtcIixcIm1hcnF1ZWVcIixcIm1lbnVcIixcIm1lbnVpdGVtXCIsXCJtZXRhXCIsXCJtZXRlclwiLFwibmF2XCIsXCJub3NjcmlwdFwiLFwib2JqZWN0XCIsXCJvbFwiLFwib3B0Z3JvdXBcIixcIm9wdGlvblwiLFwib3V0cHV0XCIsXCJwXCIsXCJwYXJhbVwiLFwicGljdHVyZVwiLFwicHJlXCIsXCJwcm9ncmVzc1wiLFwicVwiLFwicnBcIixcInJ0XCIsXCJydWJ5XCIsXCJzXCIsXCJzYW1wXCIsXCJzY3JpcHRcIixcInNlY3Rpb25cIixcInNlbGVjdFwiLFwic21hbGxcIixcInNvdXJjZVwiLFwic3BhblwiLFwic3Ryb25nXCIsXCJzdHlsZVwiLFwic3ViXCIsXCJzdW1tYXJ5XCIsXCJzdXBcIixcInRhYmxlXCIsXCJ0Ym9keVwiLFwidGRcIixcInRleHRhcmVhXCIsXCJ0Zm9vdFwiLFwidGhcIixcInRoZWFkXCIsXCJ0aW1lXCIsXCJ0aXRsZVwiLFwidHJcIixcInRyYWNrXCIsXCJ1XCIsXCJ1bFwiLFwidmFyXCIsXCJ2aWRlb1wiLFwid2JyXCIsXCJjaXJjbGVcIixcImNsaXBQYXRoXCIsXCJkZWZzXCIsXCJlbGxpcHNlXCIsXCJmb3JlaWduT2JqZWN0XCIsXCJnXCIsXCJpbWFnZVwiLFwibGluZVwiLFwibGluZWFyR3JhZGllbnRcIixcIm1hcmtlclwiLFwibWFza1wiLFwicGF0aFwiLFwicGF0dGVyblwiLFwicG9seWdvblwiLFwicG9seWxpbmVcIixcInJhZGlhbEdyYWRpZW50XCIsXCJyZWN0XCIsXCJzdG9wXCIsXCJzdmdcIixcInRleHRcIixcInRleHRQYXRoXCIsXCJ0c3BhblwiXS5mb3JFYWNoKChmdW5jdGlvbihlKXtIZVtlXT1IZShlKX0pKTt2YXIgJGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7dGhpcy5ydWxlcz1lLHRoaXMuY29tcG9uZW50SWQ9dCx0aGlzLmlzU3RhdGljPXJlKGUpLFoucmVnaXN0ZXJJZCh0aGlzLmNvbXBvbmVudElkKzEpfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNyZWF0ZVN0eWxlcz1mdW5jdGlvbihlLHQsbixyKXt2YXIgbz1yKE5lKHRoaXMucnVsZXMsdCxuLHIpLmpvaW4oXCJcIiksXCJcIikscz10aGlzLmNvbXBvbmVudElkK2U7bi5pbnNlcnRSdWxlcyhzLHMsbyl9LHQucmVtb3ZlU3R5bGVzPWZ1bmN0aW9uKGUsdCl7dC5jbGVhclJ1bGVzKHRoaXMuY29tcG9uZW50SWQrZSl9LHQucmVuZGVyU3R5bGVzPWZ1bmN0aW9uKGUsdCxuLHIpe2U+MiYmWi5yZWdpc3RlcklkKHRoaXMuY29tcG9uZW50SWQrZSksdGhpcy5yZW1vdmVTdHlsZXMoZSxuKSx0aGlzLmNyZWF0ZVN0eWxlcyhlLHQsbixyKX0sZX0oKTtmdW5jdGlvbiBXZShlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLG89MTtvPHQ7bysrKW5bby0xXT1hcmd1bWVudHNbb107dmFyIGk9Q2UuYXBwbHkodm9pZCAwLFtlXS5jb25jYXQobikpLGE9XCJzYy1nbG9iYWwtXCIreGUoSlNPTi5zdHJpbmdpZnkoaSkpLHU9bmV3ICRlKGksYSk7ZnVuY3Rpb24gbChlKXt2YXIgdD1mZSgpLG49bWUoKSxvPXMoR2UpLGw9Yyh0LmFsbG9jYXRlR1NJbnN0YW5jZShhKSkuY3VycmVudDtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZyLkNoaWxkcmVuLmNvdW50KGUuY2hpbGRyZW4pJiZjb25zb2xlLndhcm4oXCJUaGUgZ2xvYmFsIHN0eWxlIGNvbXBvbmVudCBcIithK1wiIHdhcyBnaXZlbiBjaGlsZCBKU1guIGNyZWF0ZUdsb2JhbFN0eWxlIGRvZXMgbm90IHJlbmRlciBjaGlsZHJlbi5cIiksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmaS5zb21lKChmdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmLTEhPT1lLmluZGV4T2YoXCJAaW1wb3J0XCIpfSkpJiZjb25zb2xlLndhcm4oXCJQbGVhc2UgZG8gbm90IHVzZSBAaW1wb3J0IENTUyBzeW50YXggaW4gY3JlYXRlR2xvYmFsU3R5bGUgYXQgdGhpcyB0aW1lLCBhcyB0aGUgQ1NTT00gQVBJcyB3ZSB1c2UgaW4gcHJvZHVjdGlvbiBkbyBub3QgaGFuZGxlIGl0IHdlbGwuIEluc3RlYWQsIHdlIHJlY29tbWVuZCB1c2luZyBhIGxpYnJhcnkgc3VjaCBhcyByZWFjdC1oZWxtZXQgdG8gaW5qZWN0IGEgdHlwaWNhbCA8bGluaz4gbWV0YSB0YWcgdG8gdGhlIHN0eWxlc2hlZXQsIG9yIHNpbXBseSBlbWJlZGRpbmcgaXQgbWFudWFsbHkgaW4geW91ciBpbmRleC5odG1sIDxoZWFkPiBzZWN0aW9uIGZvciBhIHNpbXBsZXIgYXBwLlwiKSx0LnNlcnZlciYmaChsLGUsdCxvLG4pLGQoKGZ1bmN0aW9uKCl7aWYoIXQuc2VydmVyKXJldHVybiBoKGwsZSx0LG8sbiksZnVuY3Rpb24oKXtyZXR1cm4gdS5yZW1vdmVTdHlsZXMobCx0KX19KSxbbCxlLHQsbyxuXSksbnVsbH1mdW5jdGlvbiBoKGUsdCxuLHIsbyl7aWYodS5pc1N0YXRpYyl1LnJlbmRlclN0eWxlcyhlLE8sbixvKTtlbHNle3ZhciBzPXYoe30sdCx7dGhlbWU6UmUodCxyLGwuZGVmYXVsdFByb3BzKX0pO3UucmVuZGVyU3R5bGVzKGUscyxuLG8pfX1yZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZPZShhKSxyLm1lbW8obCl9ZnVuY3Rpb24gVWUoZSl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmXCJSZWFjdE5hdGl2ZVwiPT09bmF2aWdhdG9yLnByb2R1Y3QmJmNvbnNvbGUud2FybihcImBrZXlmcmFtZXNgIGNhbm5vdCBiZSB1c2VkIG9uIFJlYWN0TmF0aXZlLCBvbmx5IG9uIHRoZSB3ZWIuIFRvIGRvIGFuaW1hdGlvbiBpbiBSZWFjdE5hdGl2ZSBwbGVhc2UgdXNlIEFuaW1hdGVkLlwiKTtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07dmFyIG89Q2UuYXBwbHkodm9pZCAwLFtlXS5jb25jYXQobikpLmpvaW4oXCJcIikscz14ZShvKTtyZXR1cm4gbmV3IHZlKHMsbyl9dmFyIEplPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3ZhciBlPXRoaXM7dGhpcy5fZW1pdFNoZWV0Q1NTPWZ1bmN0aW9uKCl7dmFyIHQ9ZS5pbnN0YW5jZS50b1N0cmluZygpO2lmKCF0KXJldHVyblwiXCI7dmFyIG49cSgpO3JldHVyblwiPHN0eWxlIFwiK1tuJiYnbm9uY2U9XCInK24rJ1wiJyxBKyc9XCJ0cnVlXCInLCdkYXRhLXN0eWxlZC12ZXJzaW9uPVwiNS4zLjhcIiddLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKStcIj5cIit0K1wiPC9zdHlsZT5cIn0sdGhpcy5nZXRTdHlsZVRhZ3M9ZnVuY3Rpb24oKXtyZXR1cm4gZS5zZWFsZWQ/aigyKTplLl9lbWl0U2hlZXRDU1MoKX0sdGhpcy5nZXRTdHlsZUVsZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgdDtpZihlLnNlYWxlZClyZXR1cm4gaigyKTt2YXIgbj0oKHQ9e30pW0FdPVwiXCIsdFtcImRhdGEtc3R5bGVkLXZlcnNpb25cIl09XCI1LjMuOFwiLHQuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e19faHRtbDplLmluc3RhbmNlLnRvU3RyaW5nKCl9LHQpLG89cSgpO3JldHVybiBvJiYobi5ub25jZT1vKSxbci5jcmVhdGVFbGVtZW50KFwic3R5bGVcIix2KHt9LG4se2tleTpcInNjLTAtMFwifSkpXX0sdGhpcy5zZWFsPWZ1bmN0aW9uKCl7ZS5zZWFsZWQ9ITB9LHRoaXMuaW5zdGFuY2U9bmV3IFooe2lzU2VydmVyOiEwfSksdGhpcy5zZWFsZWQ9ITF9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuY29sbGVjdFN0eWxlcz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5zZWFsZWQ/aigyKTpyLmNyZWF0ZUVsZW1lbnQoeWUse3NoZWV0OnRoaXMuaW5zdGFuY2V9LGUpfSx0LmludGVybGVhdmVXaXRoTm9kZVN0cmVhbT1mdW5jdGlvbihlKXtyZXR1cm4gaigzKX0sZX0oKSxYZT1mdW5jdGlvbihlKXt2YXIgdD1yLmZvcndhcmRSZWYoKGZ1bmN0aW9uKHQsbil7dmFyIG89cyhHZSksaT1lLmRlZmF1bHRQcm9wcyxhPVJlKHQsbyxpKTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ2b2lkIDA9PT1hJiZjb25zb2xlLndhcm4oJ1t3aXRoVGhlbWVdIFlvdSBhcmUgbm90IHVzaW5nIGEgVGhlbWVQcm92aWRlciBub3IgcGFzc2luZyBhIHRoZW1lIHByb3Agb3IgYSB0aGVtZSBpbiBkZWZhdWx0UHJvcHMgaW4gY29tcG9uZW50IGNsYXNzIFwiJytfKGUpKydcIicpLHIuY3JlYXRlRWxlbWVudChlLHYoe30sdCx7dGhlbWU6YSxyZWY6bn0pKX0pKTtyZXR1cm4geSh0LGUpLHQuZGlzcGxheU5hbWU9XCJXaXRoVGhlbWUoXCIrXyhlKStcIilcIix0fSxaZT1mdW5jdGlvbigpe3JldHVybiBzKEdlKX0sS2U9e1N0eWxlU2hlZXQ6WixtYXN0ZXJTaGVldDpoZX07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmXCJSZWFjdE5hdGl2ZVwiPT09bmF2aWdhdG9yLnByb2R1Y3QmJmNvbnNvbGUud2FybihcIkl0IGxvb2tzIGxpa2UgeW91J3ZlIGltcG9ydGVkICdzdHlsZWQtY29tcG9uZW50cycgb24gUmVhY3QgTmF0aXZlLlxcblBlcmhhcHMgeW91J3JlIGxvb2tpbmcgdG8gaW1wb3J0ICdzdHlsZWQtY29tcG9uZW50cy9uYXRpdmUnP1xcblJlYWQgbW9yZSBhYm91dCB0aGlzIGF0IGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2Jhc2ljcyNyZWFjdC1uYXRpdmVcIiksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ0ZXN0XCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmKHdpbmRvd1tcIl9fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fXCJdPXdpbmRvd1tcIl9fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fXCJdfHwwLDE9PT13aW5kb3dbXCJfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfX1wiXSYmY29uc29sZS53YXJuKFwiSXQgbG9va3MgbGlrZSB0aGVyZSBhcmUgc2V2ZXJhbCBpbnN0YW5jZXMgb2YgJ3N0eWxlZC1jb21wb25lbnRzJyBpbml0aWFsaXplZCBpbiB0aGlzIGFwcGxpY2F0aW9uLiBUaGlzIG1heSBjYXVzZSBkeW5hbWljIHN0eWxlcyB0byBub3QgcmVuZGVyIHByb3Blcmx5LCBlcnJvcnMgZHVyaW5nIHRoZSByZWh5ZHJhdGlvbiBwcm9jZXNzLCBhIG1pc3NpbmcgdGhlbWUgcHJvcCwgYW5kIG1ha2VzIHlvdXIgYXBwbGljYXRpb24gYmlnZ2VyIHdpdGhvdXQgZ29vZCByZWFzb24uXFxuXFxuU2VlIGh0dHBzOi8vcy1jLnNoLzJCQVh6ZWQgZm9yIG1vcmUgaW5mby5cIiksd2luZG93W1wiX19zdHlsZWQtY29tcG9uZW50cy1pbml0X19cIl0rPTEpO2V4cG9ydCBkZWZhdWx0IEhlO2V4cG9ydHtKZSBhcyBTZXJ2ZXJTdHlsZVNoZWV0LGxlIGFzIFN0eWxlU2hlZXRDb25zdW1lcix1ZSBhcyBTdHlsZVNoZWV0Q29udGV4dCx5ZSBhcyBTdHlsZVNoZWV0TWFuYWdlcixMZSBhcyBUaGVtZUNvbnN1bWVyLEdlIGFzIFRoZW1lQ29udGV4dCxGZSBhcyBUaGVtZVByb3ZpZGVyLEtlIGFzIF9fUFJJVkFURV9fLFdlIGFzIGNyZWF0ZUdsb2JhbFN0eWxlLENlIGFzIGNzcyxOIGFzIGlzU3R5bGVkQ29tcG9uZW50LFVlIGFzIGtleWZyYW1lcyxaZSBhcyB1c2VUaGVtZSxDIGFzIHZlcnNpb24sWGUgYXMgd2l0aFRoZW1lfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxlZC1jb21wb25lbnRzLmJyb3dzZXIuZXNtLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzeF9ydW50aW1lXzEgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5jb25zdCByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgcmVhY3Rfcm91dGVyX2RvbV8xID0gcmVxdWlyZShcInJlYWN0LXJvdXRlci1kb21cIik7XG5jb25zdCB1c2VfZGlzcGF0Y2hfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vaG9va3MvdXNlLWRpc3BhdGNoXCIpKTtcbmNvbnN0IGxheW91dF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9iYXNlL2xheW91dFwiKSk7XG5jb25zdCBtYWluXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL3BhZ2UvbWFpblwiKSk7XG5jb25zdCBvbmVfYmVlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9wYWdlL29uZS1iZWVyXCIpKTtcbmNvbnN0IGJhc2tldF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9wYWdlL2Jhc2tldFwiKSk7XG5jb25zdCBmb3JtX3BhZ2VfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vcGFnZS9mb3JtLXBhZ2VcIikpO1xuY29uc3QgbG9naW5fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vcGFnZS9sb2dpblwiKSk7XG5jb25zdCBwcm9maWxlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL3BhZ2UvcHJvZmlsZVwiKSk7XG5jb25zdCBzdHlsZV8xID0gcmVxdWlyZShcIi4vc3R5bGVcIik7XG5jb25zdCBmb250c18xID0gcmVxdWlyZShcIi4uLy4uL2ZvbnRzL2ZvbnRzXCIpO1xuY29uc3Qgc2Vzc2lvbl9zbGljZV8xID0gcmVxdWlyZShcIi4uLy4uL2ZlYXR1cmVzL3Nlc3Npb24tc2xpY2VcIik7XG5jb25zdCBzY3JvbGxfdG9fdG9wXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL3VpL3Njcm9sbC10by10b3BcIikpO1xuY29uc3QgQXBwID0gKCkgPT4ge1xuICAgIGNvbnN0IGRpc3BhdGNoID0gKDAsIHVzZV9kaXNwYXRjaF8xLmRlZmF1bHQpKCk7XG4gICAgKDAsIHJlYWN0XzEudXNlRWZmZWN0KSgoKSA9PiB7XG4gICAgICAgIGZ1bmN0aW9uIGZldGNoKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICAvLyDQstC+0YHRgdGC0LDQvdC+0LLQu9C10L3QuNC1INGB0LXRgdGB0LjQuFxuICAgICAgICAgICAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRva2VuXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIGRpc3BhdGNoKCgwLCBzZXNzaW9uX3NsaWNlXzEuZmV0Y2hDaGVjaykoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZmV0Y2goKTtcbiAgICB9LCBbXSk7XG4gICAgY29uc3QgeyBwYWdlTnVtYmVyIH0gPSAoMCwgcmVhY3Rfcm91dGVyX2RvbV8xLnVzZVBhcmFtcykoKTtcbiAgICByZXR1cm4gKCgwLCBqc3hfcnVudGltZV8xLmpzeHMpKHJlYWN0X3JvdXRlcl9kb21fMS5IYXNoUm91dGVyLCB7IGNoaWxkcmVuOiBbKDAsIGpzeF9ydW50aW1lXzEuanN4KShzdHlsZV8xLkdsb2JhbFN0eWxlcywge30pLCAoMCwganN4X3J1bnRpbWVfMS5qc3gpKGZvbnRzXzEuR2xvYmFsRm9udHMsIHt9KSwgKDAsIGpzeF9ydW50aW1lXzEuanN4KShzY3JvbGxfdG9fdG9wXzEuZGVmYXVsdCwge30pLCAoMCwganN4X3J1bnRpbWVfMS5qc3gpKHJlYWN0X3JvdXRlcl9kb21fMS5Sb3V0ZXMsIHsgY2hpbGRyZW46ICgwLCBqc3hfcnVudGltZV8xLmpzeHMpKHJlYWN0X3JvdXRlcl9kb21fMS5Sb3V0ZSwgeyBlbGVtZW50OiAoMCwganN4X3J1bnRpbWVfMS5qc3gpKGxheW91dF8xLmRlZmF1bHQsIHt9KSwgY2hpbGRyZW46IFsoMCwganN4X3J1bnRpbWVfMS5qc3gpKHJlYWN0X3JvdXRlcl9kb21fMS5Sb3V0ZSwgeyBwYXRoOiBgOiR7cGFnZU51bWJlcn1gLCBlbGVtZW50OiAoMCwganN4X3J1bnRpbWVfMS5qc3gpKG1haW5fMS5kZWZhdWx0LCB7fSkgfSksICgwLCBqc3hfcnVudGltZV8xLmpzeCkocmVhY3Rfcm91dGVyX2RvbV8xLlJvdXRlLCB7IHBhdGg6IFwiL2JlZXJzLzppZFwiLCBlbGVtZW50OiAoMCwganN4X3J1bnRpbWVfMS5qc3gpKG9uZV9iZWVyXzEuZGVmYXVsdCwge30pIH0pLCAoMCwganN4X3J1bnRpbWVfMS5qc3gpKHJlYWN0X3JvdXRlcl9kb21fMS5Sb3V0ZSwgeyBwYXRoOiBcIi9iYXNrZXRcIiwgZWxlbWVudDogKDAsIGpzeF9ydW50aW1lXzEuanN4KShiYXNrZXRfMS5kZWZhdWx0LCB7fSkgfSksICgwLCBqc3hfcnVudGltZV8xLmpzeCkocmVhY3Rfcm91dGVyX2RvbV8xLlJvdXRlLCB7IHBhdGg6IFwiL2Zvcm1cIiwgZWxlbWVudDogKDAsIGpzeF9ydW50aW1lXzEuanN4KShmb3JtX3BhZ2VfMS5kZWZhdWx0LCB7fSkgfSksICgwLCBqc3hfcnVudGltZV8xLmpzeCkocmVhY3Rfcm91dGVyX2RvbV8xLlJvdXRlLCB7IHBhdGg6IFwiL2xvZ2luXCIsIGVsZW1lbnQ6ICgwLCBqc3hfcnVudGltZV8xLmpzeCkobG9naW5fMS5kZWZhdWx0LCB7fSkgfSksICgwLCBqc3hfcnVudGltZV8xLmpzeCkocmVhY3Rfcm91dGVyX2RvbV8xLlJvdXRlLCB7IHBhdGg6IFwiL3Byb2ZpbGVcIiwgZWxlbWVudDogKDAsIGpzeF9ydW50aW1lXzEuanN4KShwcm9maWxlXzEuZGVmYXVsdCwge30pIH0pLCAoMCwganN4X3J1bnRpbWVfMS5qc3gpKHJlYWN0X3JvdXRlcl9kb21fMS5Sb3V0ZSwgeyBwYXRoOiBcIi9cIiwgZWxlbWVudDogKDAsIGpzeF9ydW50aW1lXzEuanN4KShyZWFjdF9yb3V0ZXJfZG9tXzEuTmF2aWdhdGUsIHsgcmVwbGFjZTogdHJ1ZSwgdG86IFwiL3BhZ2VfMVwiIH0pIH0pXSB9KSB9KV0gfSkpO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IEFwcDtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc3hfcnVudGltZV8xID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xuY29uc3QgcmVhY3RfMSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHVzZV9zZWxlY3Rvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi8uLi9ob29rcy91c2Utc2VsZWN0b3JcIikpO1xuY29uc3QgdXNlX2Rpc3BhdGNoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uL2hvb2tzL3VzZS1kaXNwYXRjaFwiKSk7XG5jb25zdCBzZXNzaW9uX3NsaWNlXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vZmVhdHVyZXMvc2Vzc2lvbi1zbGljZVwiKTtcbmNvbnN0IFMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vc3R5bGVkXCIpKTtcbmNvbnN0IEF1dGhvcml6YXRpb24gPSAoKSA9PiB7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSAoMCwgdXNlX2Rpc3BhdGNoXzEuZGVmYXVsdCkoKTtcbiAgICBjb25zdCBzZWxlY3QgPSAoMCwgdXNlX3NlbGVjdG9yXzEuZGVmYXVsdCkoc3RhdGUgPT4gKHtcbiAgICAgICAgYXV0aG9yaXphdGlvbjogc3RhdGUuc2Vzc2lvbi5hdXRob3JpemF0aW9uLFxuICAgICAgICBuYW1lOiBzdGF0ZS5zZXNzaW9uLm5hbWUsXG4gICAgfSkpO1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IHtcbiAgICAgICAgc2luZ091dDogKDAsIHJlYWN0XzEudXNlQ2FsbGJhY2spKCgpID0+IHtcbiAgICAgICAgICAgIGRpc3BhdGNoKCgwLCBzZXNzaW9uX3NsaWNlXzEuZmV0Y2hTaWduT3V0KSgpKTtcbiAgICAgICAgfSwgW10pXG4gICAgfTtcbiAgICByZXR1cm4gKCgwLCBqc3hfcnVudGltZV8xLmpzeCkoUy5BdXRob3JpemF0aW9uQ29udGFpbmVyLCB7IGNoaWxkcmVuOiBzZWxlY3QuYXV0aG9yaXphdGlvbiA/XG4gICAgICAgICAgICAoMCwganN4X3J1bnRpbWVfMS5qc3hzKShTLldyYXBwZXIsIHsgY2hpbGRyZW46IFsoMCwganN4X3J1bnRpbWVfMS5qc3gpKFMuQXV0TGluaywgeyB0bzogXCIvcHJvZmlsZVwiLCBjaGlsZHJlbjogc2VsZWN0Lm5hbWUgfSksICgwLCBqc3hfcnVudGltZV8xLmpzeCkoUy5BdXRCdXR0b24sIHsgdHlwZTogXCJidXR0b25cIiwgb25DbGljazogY2FsbGJhY2tzLnNpbmdPdXQsIGNoaWxkcmVuOiBcIlNpbmcgT3V0XCIgfSldIH0pXG4gICAgICAgICAgICA6ICgwLCBqc3hfcnVudGltZV8xLmpzeCkoUy5BdXRMaW5rU2luZ0luLCB7IHRvOiBcIi9sb2dpblwiLCBjaGlsZHJlbjogXCJTaWduIEluXCIgfSkgfSkpO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IEF1dGhvcml6YXRpb247XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QganN4X3J1bnRpbWVfMSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbmNvbnN0IFMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vc3R5bGVcIikpO1xuY29uc3QgRm9vdGVyID0gKCkgPT4ge1xuICAgIHJldHVybiAoKDAsIGpzeF9ydW50aW1lXzEuanN4KShTLkZvb3RlclN0eWxlLCB7IGNoaWxkcmVuOiAoMCwganN4X3J1bnRpbWVfMS5qc3gpKFMuQ29udGFpbmVyRm9vdGVyLCB7IGNoaWxkcmVuOiAoMCwganN4X3J1bnRpbWVfMS5qc3gpKFwicFwiLCB7IGNoaWxkcmVuOiBcIkNvcHlyaWdodCBARC5TdG9seWFyb3ZhXCIgfSkgfSkgfSkpO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IEZvb3RlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc3hfcnVudGltZV8xID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xuY29uc3QgYmFza2V0ID0gcmVxdWlyZShcIi4uLy4uLy4uL2Fzc2V0cy9iYXNrZXQuc3ZnXCIpO1xuY29uc3QgUyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9zdHlsZVwiKSk7XG5jb25zdCBIZWFkZXIgPSAoKSA9PiB7XG4gICAgcmV0dXJuICgoMCwganN4X3J1bnRpbWVfMS5qc3gpKFMuSGVhZGVyU3R5bGUsIHsgY2hpbGRyZW46ICgwLCBqc3hfcnVudGltZV8xLmpzeHMpKFMuSGVhZGVyQ29udGFpbmVyLCB7IGNoaWxkcmVuOiBbKDAsIGpzeF9ydW50aW1lXzEuanN4KShTLkxpbmtMb2dvLCB7IHRvOiBcIi9cIiwgY2hpbGRyZW46IFwiQmVlclwiIH0pLCAoMCwganN4X3J1bnRpbWVfMS5qc3gpKFMuTGlua0NhcnQsIHsgdG86IFwiL2Jhc2tldFwiLCBjaGlsZHJlbjogKDAsIGpzeF9ydW50aW1lXzEuanN4KShcImltZ1wiLCB7IHNyYzogYmFza2V0LCBhbHQ6IFwiYmFza2V0XCIsIHdpZHRoOiA0MCwgaGVpZ2h0OiA0MCB9KSB9KV0gfSkgfSkpO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IEhlYWRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QganN4X3J1bnRpbWVfMSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbmNvbnN0IGhlYWRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9oZWFkZXJcIikpO1xuY29uc3QgZm9vdGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2Zvb3RlclwiKSk7XG5jb25zdCBhdXRob3JpemF0aW9uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2F1dGhvcml6YXRpb25cIikpO1xuY29uc3QgcmVhY3Rfcm91dGVyX2RvbV8xID0gcmVxdWlyZShcInJlYWN0LXJvdXRlci1kb21cIik7XG5jb25zdCBMYXlvdXQgPSAoKSA9PiB7XG4gICAgcmV0dXJuICgoMCwganN4X3J1bnRpbWVfMS5qc3hzKShqc3hfcnVudGltZV8xLkZyYWdtZW50LCB7IGNoaWxkcmVuOiBbKDAsIGpzeF9ydW50aW1lXzEuanN4KShhdXRob3JpemF0aW9uXzEuZGVmYXVsdCwge30pLCAoMCwganN4X3J1bnRpbWVfMS5qc3gpKGhlYWRlcl8xLmRlZmF1bHQsIHt9KSwgKDAsIGpzeF9ydW50aW1lXzEuanN4KShcIm1haW5cIiwgeyBjaGlsZHJlbjogKDAsIGpzeF9ydW50aW1lXzEuanN4KShyZWFjdF9yb3V0ZXJfZG9tXzEuT3V0bGV0LCB7fSkgfSksICgwLCBqc3hfcnVudGltZV8xLmpzeCkoZm9vdGVyXzEuZGVmYXVsdCwge30pXSB9KSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gTGF5b3V0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzeF9ydW50aW1lXzEgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5jb25zdCBTID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3N0eWxlXCIpKTtcbjtcbmNvbnN0IENvbW1lbnRzID0gKHByb3BzKSA9PiB7XG4gICAgcmV0dXJuICgoMCwganN4X3J1bnRpbWVfMS5qc3hzKShTLkNvbW1lbnRzU3R5bGUsIHsgY2hpbGRyZW46IFsoMCwganN4X3J1bnRpbWVfMS5qc3gpKFMuQ29tbWVudHNUaXRsZSwgeyBjaGlsZHJlbjogXCJSZXZpZXdzXCIgfSksICgwLCBqc3hfcnVudGltZV8xLmpzeCkoUy5Db21tZW50c0xpc3QsIHsgY2hpbGRyZW46IHByb3BzLmNvbW1lbnRzLmxlbmd0aCA/IHByb3BzLmNvbW1lbnRzLm1hcCgoY29tbWVudCwgaW5kZXgpID0+ICgoMCwganN4X3J1bnRpbWVfMS5qc3hzKShcImxpXCIsIHsgY2hpbGRyZW46IFsoMCwganN4X3J1bnRpbWVfMS5qc3gpKFwiaDNcIiwgeyBjaGlsZHJlbjogY29tbWVudC5lbWFpbC5zcGxpdCgnQCcpWzBdIH0pLCAoMCwganN4X3J1bnRpbWVfMS5qc3gpKFwicFwiLCB7IGNoaWxkcmVuOiBjb21tZW50LmJvZHkgfSldIH0sIGluZGV4KSkpXG4gICAgICAgICAgICAgICAgICAgIDogKDAsIGpzeF9ydW50aW1lXzEuanN4KShcImxpXCIsIHsgY2hpbGRyZW46IFwiTm8gY29tbWVudHNcIiB9KSB9KV0gfSkpO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IENvbW1lbnRzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzeF9ydW50aW1lXzEgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5jb25zdCB1c2VfaW5pdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi8uLi9ob29rcy91c2UtaW5pdFwiKSk7XG5jb25zdCB1c2Vfc2VsZWN0b3JfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vaG9va3MvdXNlLXNlbGVjdG9yXCIpKTtcbmNvbnN0IHVzZV9kaXNwYXRjaF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi8uLi9ob29rcy91c2UtZGlzcGF0Y2hcIikpO1xuY29uc3QgYmVlcnNfc2xpY2VfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9mZWF0dXJlcy9iZWVycy1zbGljZVwiKTtcbmNvbnN0IGJlZXJzX3NsaWNlXzIgPSByZXF1aXJlKFwiLi4vLi4vLi4vZmVhdHVyZXMvYmVlcnMtc2xpY2VcIik7XG5jb25zdCBiZWVyc19saXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uL2Jsb2Nrcy9iZWVycy1saXN0XCIpKTtcbmNvbnN0IHBhZ2luYXRpb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vYmxvY2tzL3BhZ2luYXRpb25cIikpO1xuY29uc3QgTWFpbiA9ICgpID0+IHtcbiAgICBjb25zdCBkaXNwYXRjaCA9ICgwLCB1c2VfZGlzcGF0Y2hfMS5kZWZhdWx0KSgpO1xuICAgIGNvbnN0IHNlbGVjdCA9ICgwLCB1c2Vfc2VsZWN0b3JfMS5kZWZhdWx0KSgoc3RhdGUpID0+ICh7XG4gICAgICAgIGJlZXJzSWRzOiAoMCwgYmVlcnNfc2xpY2VfMS5zZWxlY3RCZWVySWRzKShzdGF0ZSksXG4gICAgICAgIHN0YXR1czogc3RhdGUuYmVlcnMuc3RhdHVzLFxuICAgICAgICBlcnJvcjogc3RhdGUuYmVlcnMuZXJyb3IsXG4gICAgICAgIGNvdW50OiBzdGF0ZS5iZWVycy5jb3VudFxuICAgIH0pKTtcbiAgICBjb25zdCBwYWdlID0gd2luZG93LmxvY2F0aW9uLmhhc2g7XG4gICAgY29uc3QgbnVtYmVyID0gcGFnZS5zcGxpdCgnXycpWzFdO1xuICAgICgwLCB1c2VfaW5pdF8xLmRlZmF1bHQpKCgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICB5aWVsZCBkaXNwYXRjaCgoMCwgYmVlcnNfc2xpY2VfMS5mZXRjaEJlZXJzKShudW1iZXIpKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJlZiBtYWluXCIpO1xuICAgIH0pLCBbbnVtYmVyXSk7XG4gICAgcmV0dXJuICgoMCwganN4X3J1bnRpbWVfMS5qc3hzKShqc3hfcnVudGltZV8xLkZyYWdtZW50LCB7IGNoaWxkcmVuOiBbKDAsIGpzeF9ydW50aW1lXzEuanN4KShiZWVyc19saXN0XzEuZGVmYXVsdCwgeyBzdGF0dXM6IHNlbGVjdC5zdGF0dXMsIGJlZXJzSWRzOiBzZWxlY3QuYmVlcnNJZHMsIGVycm9yOiBzZWxlY3QuZXJyb3IgfSksICgwLCBqc3hfcnVudGltZV8xLmpzeCkocGFnaW5hdGlvbl8xLmRlZmF1bHQsIHsgY3VycmVudFBhZ2U6IE51bWJlcihudW1iZXIpLCBjb3VudDogc2VsZWN0LmNvdW50LCBvbmhhbmRsZXI6IChudW1iZXIpID0+IGRpc3BhdGNoKCgwLCBiZWVyc19zbGljZV8yLmFkZEN1cnJlbnRQYWdlKShudW1iZXIpKSB9KV0gfSkpO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IE1haW47XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QganN4X3J1bnRpbWVfMSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbmNvbnN0IHJlYWN0XzEgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCByZWFjdF9yb3V0ZXJfZG9tXzEgPSByZXF1aXJlKFwicmVhY3Qtcm91dGVyLWRvbVwiKTtcbmNvbnN0IHVzZV9kaXNwYXRjaF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi8uLi9ob29rcy91c2UtZGlzcGF0Y2hcIikpO1xuY29uc3QgdXNlX3NlbGVjdG9yXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uL2hvb2tzL3VzZS1zZWxlY3RvclwiKSk7XG5jb25zdCBiZWVyc19zbGljZV8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2ZlYXR1cmVzL2JlZXJzLXNsaWNlXCIpO1xuY29uc3QgY29tbWVudHNfc2xpY2VfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9mZWF0dXJlcy9jb21tZW50cy1zbGljZVwiKTtcbmNvbnN0IGJlZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vYmxvY2tzL2JlZXJcIikpO1xuY29uc3QgY29tbWVudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vYmxvY2tzL2NvbW1lbnRzXCIpKTtcbmNvbnN0IE9uZUJlZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSAoMCwgdXNlX2Rpc3BhdGNoXzEuZGVmYXVsdCkoKTtcbiAgICBjb25zdCB7IGlkIH0gPSAoMCwgcmVhY3Rfcm91dGVyX2RvbV8xLnVzZVBhcmFtcykoKTtcbiAgICAoMCwgcmVhY3RfMS51c2VFZmZlY3QpKCgpID0+IHtcbiAgICAgICAgZnVuY3Rpb24gZmV0Y2hEYXRhKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBkaXNwYXRjaCgoMCwgYmVlcnNfc2xpY2VfMS5mZXRjaE9uZUJlZXJzKShpZCkpO1xuICAgICAgICAgICAgICAgIHlpZWxkIGRpc3BhdGNoKCgwLCBjb21tZW50c19zbGljZV8xLmZldGNoQ29tbWVudHMpKGlkKSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0VmZmVjdCBPbmVCZWVyJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmZXRjaERhdGEoKTtcbiAgICB9LCBbXSk7XG4gICAgY29uc3Qgc2VsZWN0ID0gKDAsIHVzZV9zZWxlY3Rvcl8xLmRlZmF1bHQpKHN0YXRlID0+ICh7XG4gICAgICAgIHN0YXR1czogc3RhdGUuYmVlcnMub25lQmVlclN0YXR1cyxcbiAgICAgICAgZXJyb3I6IHN0YXRlLmJlZXJzLmVycm9yLFxuICAgICAgICBiZWVyOiBzdGF0ZS5iZWVycy5vbmVCZWVyLFxuICAgICAgICBjb21tZW50czogc3RhdGUuY29tbWVudHMuY29tbWVudHNcbiAgICB9KSk7XG4gICAgcmV0dXJuICgoMCwganN4X3J1bnRpbWVfMS5qc3hzKShqc3hfcnVudGltZV8xLkZyYWdtZW50LCB7IGNoaWxkcmVuOiBbKDAsIGpzeF9ydW50aW1lXzEuanN4KShiZWVyXzEuZGVmYXVsdCwgeyBzdGF0dXM6IHNlbGVjdC5zdGF0dXMsIGVycm9yOiBzZWxlY3QuZXJyb3IsIGJlZXJJZDogaWQsIGJlZXI6IHNlbGVjdC5iZWVyIH0pLCAoMCwganN4X3J1bnRpbWVfMS5qc3gpKGNvbW1lbnRzXzEuZGVmYXVsdCwgeyBjb21tZW50czogc2VsZWN0LmNvbW1lbnRzIH0pXSB9KSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gT25lQmVlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX2EsIF9iO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZWxlY3RCZWVySWRzID0gZXhwb3J0cy5zZWxlY3RCZWVyQnlJZCA9IGV4cG9ydHMuc2VsZWN0QWxsQmVlcnMgPSBleHBvcnRzLnJlbW92ZUZyb21CYXNrZXRPbmVCZWVyID0gZXhwb3J0cy5hZGRUb0Jhc2tldE9uZUJlZXIgPSBleHBvcnRzLmRlbGV0aW5nQWxsRnJvbVRoZUJhc2tldCA9IGV4cG9ydHMucmVtb3ZlRnJvbUJhc2tldCA9IGV4cG9ydHMuYWRkQ3VycmVudFBhZ2UgPSBleHBvcnRzLmFkZFRvQmFza2V0ID0gZXhwb3J0cy5mZXRjaEJlZXJzID0gZXhwb3J0cy5mZXRjaE9uZUJlZXJzID0gdm9pZCAwO1xuY29uc3QgdG9vbGtpdF8xID0gcmVxdWlyZShcIkByZWR1eGpzL3Rvb2xraXRcIik7XG47XG47XG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gICAgc3RhdHVzOiBcImlkbGVcIixcbiAgICBlbnRpdGllczoge30sXG4gICAgaWRzOiBbXSxcbiAgICBjb3VudDogMSxcbiAgICBvbmVCZWVyOiB7XG4gICAgICAgIGlzQ2FydDogZmFsc2VcbiAgICB9LFxuICAgIG9uZUJlZXJTdGF0dXM6IFwiaWRsZVwiLFxuICAgIGN1cnJlbnRQYWdlOiAxLFxuICAgIGVycm9yOiAnJ1xufTtcbmNvbnN0IGJlZXJzQWRhcHRlciA9ICgwLCB0b29sa2l0XzEuY3JlYXRlRW50aXR5QWRhcHRlcikoKTtcbmJlZXJzQWRhcHRlci5nZXRJbml0aWFsU3RhdGUoaW5pdGlhbFN0YXRlKTtcbi8vINC30LDQv9GA0L7RgSDQtNCw0L3QvdGL0YUg0L7QtNC90L7Qs9C+INC/0LjQstCwXG5leHBvcnRzLmZldGNoT25lQmVlcnMgPSAoMCwgdG9vbGtpdF8xLmNyZWF0ZUFzeW5jVGh1bmspKFwiYmVlcnMvZmV0Y2hPbmVCZWVyc1wiLCAoaWQpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgZmV0Y2goYGh0dHBzOi8vYXBpLnB1bmthcGkuY29tL3YyL2JlZXJzLyR7aWR9YCk7XG4gICAgY29uc3QgZGF0YSA9IHlpZWxkIHJlc3BvbnNlLmpzb24oKTtcbiAgICBmdW5jdGlvbiBhZGRNYXJrZXRDYXJ0KCkge1xuICAgICAgICBsZXQgYmVlcnMgPSB7fTtcbiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiYmFza2V0XCIpKSB7XG4gICAgICAgICAgICBiZWVycyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJiYXNrZXRcIikpO1xuICAgICAgICAgICAgaWYgKGJlZXJzW2lkXSkge1xuICAgICAgICAgICAgICAgIGRhdGFbMF0uaXNDYXJ0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGFbMF0uaXNDYXJ0ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgeWllbGQgYWRkTWFya2V0Q2FydCgpO1xuICAgIHJldHVybiBkYXRhO1xufSkpO1xuLy8g0LfQsNC/0YDQvtGBINC/0LjQstCwINC90LAg0L7QtNC90YMg0YHRgtGA0LDQvdC40YbRg1xuZXhwb3J0cy5mZXRjaEJlZXJzID0gKDAsIHRvb2xraXRfMS5jcmVhdGVBc3luY1RodW5rKShcImJlZXJzL2ZldGNoQmVlcnNcIiwgKGN1cnJlbnRQYWdlKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIGZldGNoKGBodHRwczovL2FwaS5wdW5rYXBpLmNvbS92Mi9iZWVycz9wYWdlPSR7Y3VycmVudFBhZ2V9JnBlcl9wYWdlPTEyYCk7XG4gICAgY29uc3QgZGF0YSA9IHlpZWxkIHJlc3BvbnNlLmpzb24oKTtcbiAgICBmdW5jdGlvbiBhZGRNYXJrZXRDYXJ0KCkge1xuICAgICAgICBsZXQgYmVlcnMgPSB7fTtcbiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiYmFza2V0XCIpKSB7XG4gICAgICAgICAgICBiZWVycyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJiYXNrZXRcIikpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGlkID0gZGF0YVtpXS5pZDtcbiAgICAgICAgICAgIGlmIChiZWVyc1tpZF0pIHtcbiAgICAgICAgICAgICAgICBkYXRhW2ldLmlzQ2FydCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhW2ldLmlzQ2FydCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHlpZWxkIGFkZE1hcmtldENhcnQoKTtcbiAgICByZXR1cm4gZGF0YTtcbn0pKTtcbmNvbnN0IGJlZXJzU2xpY2UgPSAoMCwgdG9vbGtpdF8xLmNyZWF0ZVNsaWNlKSh7XG4gICAgbmFtZTogXCJiZWVyc1wiLFxuICAgIGluaXRpYWxTdGF0ZSxcbiAgICByZWR1Y2Vyczoge1xuICAgICAgICBhZGRUb0Jhc2tldChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICAgICAgICBzdGF0ZS5lbnRpdGllc1thY3Rpb24ucGF5bG9hZF0uaXNDYXJ0ID0gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlRnJvbUJhc2tldChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUuaWRzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHN0YXRlLmVudGl0aWVzW2FjdGlvbi5wYXlsb2FkXS5pc0NhcnQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRpbmdBbGxGcm9tVGhlQmFza2V0KHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5pZHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhY3Rpb24ucGF5bG9hZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5lbnRpdGllc1thY3Rpb24ucGF5bG9hZFtpXV0uaXNDYXJ0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhZGRDdXJyZW50UGFnZShzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICAgICAgICBzdGF0ZS5jdXJyZW50UGFnZSA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgICB9LFxuICAgICAgICBhZGRUb0Jhc2tldE9uZUJlZXIoc3RhdGUsIGFjdGlvbikge1xuICAgICAgICAgICAgaWYgKHN0YXRlLmVudGl0aWVzW2FjdGlvbi5wYXlsb2FkXSlcbiAgICAgICAgICAgICAgICBzdGF0ZS5lbnRpdGllc1thY3Rpb24ucGF5bG9hZF0uaXNDYXJ0ID0gdHJ1ZTtcbiAgICAgICAgICAgIHN0YXRlLm9uZUJlZXIuaXNDYXJ0ID0gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlRnJvbUJhc2tldE9uZUJlZXIoc3RhdGUsIGFjdGlvbikge1xuICAgICAgICAgICAgaWYgKHN0YXRlLmVudGl0aWVzW2FjdGlvbi5wYXlsb2FkXSlcbiAgICAgICAgICAgICAgICBzdGF0ZS5lbnRpdGllc1thY3Rpb24ucGF5bG9hZF0uaXNDYXJ0ID0gZmFsc2U7XG4gICAgICAgICAgICBzdGF0ZS5vbmVCZWVyLmlzQ2FydCA9IGZhbHNlO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgZXh0cmFSZWR1Y2VycyhidWlsZGVyKSB7XG4gICAgICAgIGJ1aWxkZXJcbiAgICAgICAgICAgIC5hZGRDYXNlKGV4cG9ydHMuZmV0Y2hCZWVycy5wZW5kaW5nLCAoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIHN0YXRlLnN0YXR1cyA9IFwibG9hZGluZ1wiO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmFkZENhc2UoZXhwb3J0cy5mZXRjaEJlZXJzLmZ1bGZpbGxlZCwgKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAgICAgICAgIHN0YXRlLnN0YXR1cyA9IFwic3VjY2VlZGVkXCI7XG4gICAgICAgICAgICBzdGF0ZS5jb3VudCA9IE1hdGguY2VpbCg4MCAvIDEwKTtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5pZHMubGVuZ3RoICE9PSAwKVxuICAgICAgICAgICAgICAgIGJlZXJzQWRhcHRlci5yZW1vdmVBbGwoc3RhdGUpO1xuICAgICAgICAgICAgYmVlcnNBZGFwdGVyLnVwc2VydE1hbnkoc3RhdGUsIGFjdGlvbi5wYXlsb2FkKTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5hZGRDYXNlKGV4cG9ydHMuZmV0Y2hCZWVycy5yZWplY3RlZCwgKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAgICAgICAgIHN0YXRlLnN0YXR1cyA9IFwiZmFpbGVkXCI7XG4gICAgICAgICAgICBzdGF0ZS5lcnJvciA9IGFjdGlvbi5lcnJvci5tZXNzYWdlO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmFkZENhc2UoZXhwb3J0cy5mZXRjaE9uZUJlZXJzLnBlbmRpbmcsIChzdGF0ZSkgPT4ge1xuICAgICAgICAgICAgc3RhdGUub25lQmVlclN0YXR1cyA9IFwibG9hZGluZ1wiO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmFkZENhc2UoZXhwb3J0cy5mZXRjaE9uZUJlZXJzLmZ1bGZpbGxlZCwgKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAgICAgICAgIHN0YXRlLm9uZUJlZXJTdGF0dXMgPSBcInN1Y2NlZWRlZFwiO1xuICAgICAgICAgICAgc3RhdGUub25lQmVlciA9IE9iamVjdC5hc3NpZ24oe30sIGFjdGlvbi5wYXlsb2FkWzBdKTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5hZGRDYXNlKGV4cG9ydHMuZmV0Y2hPbmVCZWVycy5yZWplY3RlZCwgKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAgICAgICAgIHN0YXRlLm9uZUJlZXJTdGF0dXMgPSBcImZhaWxlZFwiO1xuICAgICAgICAgICAgc3RhdGUuZXJyb3IgPSBhY3Rpb24uZXJyb3IubWVzc2FnZTtcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBiZWVyc1NsaWNlLnJlZHVjZXI7XG5fYSA9IGJlZXJzU2xpY2UuYWN0aW9ucywgZXhwb3J0cy5hZGRUb0Jhc2tldCA9IF9hLmFkZFRvQmFza2V0LCBleHBvcnRzLmFkZEN1cnJlbnRQYWdlID0gX2EuYWRkQ3VycmVudFBhZ2UsIGV4cG9ydHMucmVtb3ZlRnJvbUJhc2tldCA9IF9hLnJlbW92ZUZyb21CYXNrZXQsIGV4cG9ydHMuZGVsZXRpbmdBbGxGcm9tVGhlQmFza2V0ID0gX2EuZGVsZXRpbmdBbGxGcm9tVGhlQmFza2V0LCBleHBvcnRzLmFkZFRvQmFza2V0T25lQmVlciA9IF9hLmFkZFRvQmFza2V0T25lQmVlciwgZXhwb3J0cy5yZW1vdmVGcm9tQmFza2V0T25lQmVlciA9IF9hLnJlbW92ZUZyb21CYXNrZXRPbmVCZWVyO1xuX2IgPSBiZWVyc0FkYXB0ZXIuZ2V0U2VsZWN0b3JzKChzdGF0ZSkgPT4gc3RhdGUuYmVlcnMpLCBleHBvcnRzLnNlbGVjdEFsbEJlZXJzID0gX2Iuc2VsZWN0QWxsLCBleHBvcnRzLnNlbGVjdEJlZXJCeUlkID0gX2Iuc2VsZWN0QnlJZCwgZXhwb3J0cy5zZWxlY3RCZWVySWRzID0gX2Iuc2VsZWN0SWRzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmV0Y2hDb21tZW50cyA9IHZvaWQgMDtcbmNvbnN0IHRvb2xraXRfMSA9IHJlcXVpcmUoXCJAcmVkdXhqcy90b29sa2l0XCIpO1xuO1xuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICAgIGNvbW1lbnRzOiBbXSxcbiAgICBzdGF0dXM6IFwiaWRsZVwiLFxuICAgIGVycm9yOiAnJ1xufTtcbmV4cG9ydHMuZmV0Y2hDb21tZW50cyA9ICgwLCB0b29sa2l0XzEuY3JlYXRlQXN5bmNUaHVuaykoJ2NvbW1lbnRzL2ZldGNoQ29tbWVudHMnLCAoYmVlcklkKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIGZldGNoKGBodHRwczovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vY29tbWVudHM/cG9zdElkPSR7YmVlcklkfWApO1xuICAgIHJldHVybiAoeWllbGQgcmVzcG9uc2UuanNvbigpKTtcbn0pKTtcbmNvbnN0IGNvbW1lbnRzU2xpY2UgPSAoMCwgdG9vbGtpdF8xLmNyZWF0ZVNsaWNlKSh7XG4gICAgbmFtZTogJ2NvbW1lbnRzJyxcbiAgICBpbml0aWFsU3RhdGUsXG4gICAgcmVkdWNlcnM6IHt9LFxuICAgIGV4dHJhUmVkdWNlcnMoYnVpbGRlcikge1xuICAgICAgICBidWlsZGVyXG4gICAgICAgICAgICAuYWRkQ2FzZShleHBvcnRzLmZldGNoQ29tbWVudHMucGVuZGluZywgKHN0YXRlKSA9PiB7XG4gICAgICAgICAgICBzdGF0ZS5zdGF0dXMgPSBcImxvYWRpbmdcIjtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5hZGRDYXNlKGV4cG9ydHMuZmV0Y2hDb21tZW50cy5mdWxmaWxsZWQsIChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgICAgICAgICBzdGF0ZS5zdGF0dXMgPSBcInN1Y2NlZWRlZFwiO1xuICAgICAgICAgICAgc3RhdGUuY29tbWVudHMgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5hZGRDYXNlKGV4cG9ydHMuZmV0Y2hDb21tZW50cy5yZWplY3RlZCwgKHN0YXRlKSA9PiB7XG4gICAgICAgICAgICBzdGF0ZS5zdGF0dXMgPSBcImZhaWxlZFwiO1xuICAgICAgICAgICAgc3RhdGUuZXJyb3IgPSBcImZhaWxlZFwiO1xuICAgICAgICB9KTtcbiAgICB9XG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNvbW1lbnRzU2xpY2UucmVkdWNlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcmVhY3RfcmVkdXhfMSA9IHJlcXVpcmUoXCJyZWFjdC1yZWR1eFwiKTtcbmNvbnN0IHVzZUFwcERpc3BhdGNoID0gcmVhY3RfcmVkdXhfMS51c2VEaXNwYXRjaDtcbmV4cG9ydHMuZGVmYXVsdCA9IHVzZUFwcERpc3BhdGNoO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCByZWFjdF9yZWR1eF8xID0gcmVxdWlyZShcInJlYWN0LXJlZHV4XCIpO1xuY29uc3QgdXNlQXBwU2VsZWN0b3IgPSByZWFjdF9yZWR1eF8xLnVzZVNlbGVjdG9yO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXNlQXBwU2VsZWN0b3I7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzeF9ydW50aW1lXzEgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5jb25zdCByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgY2xpZW50XzEgPSByZXF1aXJlKFwicmVhY3QtZG9tL2NsaWVudFwiKTtcbmNvbnN0IGFwcF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvYXBwXCIpKTtcbmNvbnN0IHJlYWN0X3JlZHV4XzEgPSByZXF1aXJlKFwicmVhY3QtcmVkdXhcIik7XG5jb25zdCBzdG9yZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3N0b3JlXCIpKTtcbmNvbnN0IHN0eWxlZF9jb21wb25lbnRzXzEgPSByZXF1aXJlKFwic3R5bGVkLWNvbXBvbmVudHNcIik7XG5jb25zdCB0aGVtZV8xID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy90aGVtZS90aGVtZVwiKTtcbmNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290Jyk7XG5jb25zdCByb290ID0gKDAsIGNsaWVudF8xLmNyZWF0ZVJvb3QpKGNvbnRhaW5lcik7XG5yb290LnJlbmRlcigoMCwganN4X3J1bnRpbWVfMS5qc3gpKHJlYWN0XzEuU3RyaWN0TW9kZSwgeyBjaGlsZHJlbjogKDAsIGpzeF9ydW50aW1lXzEuanN4KShyZWFjdF9yZWR1eF8xLlByb3ZpZGVyLCB7IHN0b3JlOiBzdG9yZV8xLmRlZmF1bHQsIGNoaWxkcmVuOiAoMCwganN4X3J1bnRpbWVfMS5qc3gpKHN0eWxlZF9jb21wb25lbnRzXzEuVGhlbWVQcm92aWRlciwgeyB0aGVtZTogdGhlbWVfMS50aGVtZSwgY2hpbGRyZW46ICgwLCBqc3hfcnVudGltZV8xLmpzeCkoYXBwXzEuZGVmYXVsdCwge30pIH0pIH0pIH0pKTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdG9vbGtpdF8xID0gcmVxdWlyZShcIkByZWR1eGpzL3Rvb2xraXRcIik7XG5jb25zdCBiZWVyc19zbGljZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2ZlYXR1cmVzL2JlZXJzLXNsaWNlXCIpKTtcbmNvbnN0IGJhc2tldFNsaWNlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZmVhdHVyZXMvYmFza2V0U2xpY2VcIikpO1xuY29uc3Qgc2Vzc2lvbl9zbGljZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2ZlYXR1cmVzL3Nlc3Npb24tc2xpY2VcIikpO1xuY29uc3QgdXNlcl9zbGljZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2ZlYXR1cmVzL3VzZXItc2xpY2VcIikpO1xuY29uc3QgY29tbWVudHNfc2xpY2VfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9mZWF0dXJlcy9jb21tZW50cy1zbGljZVwiKSk7XG5jb25zdCBzdG9yZSA9ICgwLCB0b29sa2l0XzEuY29uZmlndXJlU3RvcmUpKHtcbiAgICByZWR1Y2VyOiB7XG4gICAgICAgIGJlZXJzOiBiZWVyc19zbGljZV8xLmRlZmF1bHQsXG4gICAgICAgIGJhc2tldDogYmFza2V0U2xpY2VfMS5kZWZhdWx0LFxuICAgICAgICBzZXNzaW9uOiBzZXNzaW9uX3NsaWNlXzEuZGVmYXVsdCxcbiAgICAgICAgdXNlcjogdXNlcl9zbGljZV8xLmRlZmF1bHQsXG4gICAgICAgIGNvbW1lbnRzOiBjb21tZW50c19zbGljZV8xLmRlZmF1bHRcbiAgICB9XG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN0b3JlO1xuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGU9cmVxdWlyZShcInJlYWN0XCIpO2Z1bmN0aW9uIGgoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBrPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOmgsbD1lLnVzZVN0YXRlLG09ZS51c2VFZmZlY3Qsbj1lLnVzZUxheW91dEVmZmVjdCxwPWUudXNlRGVidWdWYWx1ZTtmdW5jdGlvbiBxKGEsYil7dmFyIGQ9YigpLGY9bCh7aW5zdDp7dmFsdWU6ZCxnZXRTbmFwc2hvdDpifX0pLGM9ZlswXS5pbnN0LGc9ZlsxXTtuKGZ1bmN0aW9uKCl7Yy52YWx1ZT1kO2MuZ2V0U25hcHNob3Q9YjtyKGMpJiZnKHtpbnN0OmN9KX0sW2EsZCxiXSk7bShmdW5jdGlvbigpe3IoYykmJmcoe2luc3Q6Y30pO3JldHVybiBhKGZ1bmN0aW9uKCl7cihjKSYmZyh7aW5zdDpjfSl9KX0sW2FdKTtwKGQpO3JldHVybiBkfVxuZnVuY3Rpb24gcihhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGQ9YigpO3JldHVybiFrKGEsZCl9Y2F0Y2goZil7cmV0dXJuITB9fWZ1bmN0aW9uIHQoYSxiKXtyZXR1cm4gYigpfXZhciB1PVwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudD90OnE7ZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZT12b2lkIDAhPT1lLnVzZVN5bmNFeHRlcm5hbFN0b3JlP2UudXNlU3luY0V4dGVybmFsU3RvcmU6dTtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHVzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0vd2l0aC1zZWxlY3Rvci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGg9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcInVzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW1cIik7ZnVuY3Rpb24gcChhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6cCxyPW4udXNlU3luY0V4dGVybmFsU3RvcmUsdD1oLnVzZVJlZix1PWgudXNlRWZmZWN0LHY9aC51c2VNZW1vLHc9aC51c2VEZWJ1Z1ZhbHVlO1xuZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3Rvcj1mdW5jdGlvbihhLGIsZSxsLGcpe3ZhciBjPXQobnVsbCk7aWYobnVsbD09PWMuY3VycmVudCl7dmFyIGY9e2hhc1ZhbHVlOiExLHZhbHVlOm51bGx9O2MuY3VycmVudD1mfWVsc2UgZj1jLmN1cnJlbnQ7Yz12KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhKXtpZighYyl7Yz0hMDtkPWE7YT1sKGEpO2lmKHZvaWQgMCE9PWcmJmYuaGFzVmFsdWUpe3ZhciBiPWYudmFsdWU7aWYoZyhiLGEpKXJldHVybiBrPWJ9cmV0dXJuIGs9YX1iPWs7aWYocShkLGEpKXJldHVybiBiO3ZhciBlPWwoYSk7aWYodm9pZCAwIT09ZyYmZyhiLGUpKXJldHVybiBiO2Q9YTtyZXR1cm4gaz1lfXZhciBjPSExLGQsayxtPXZvaWQgMD09PWU/bnVsbDplO3JldHVybltmdW5jdGlvbigpe3JldHVybiBhKGIoKSl9LG51bGw9PT1tP3ZvaWQgMDpmdW5jdGlvbigpe3JldHVybiBhKG0oKSl9XX0sW2IsZSxsLGddKTt2YXIgZD1yKGEsY1swXSxjWzFdKTtcbnUoZnVuY3Rpb24oKXtmLmhhc1ZhbHVlPSEwO2YudmFsdWU9ZH0sW2RdKTt3KGQpO3JldHVybiBkfTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Nqcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltL3dpdGgtc2VsZWN0b3IucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0vd2l0aC1zZWxlY3Rvci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0ZnVuY3Rpb24oKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG5cdFx0ZnVuY3Rpb24oKSB7IHJldHVybiBtb2R1bGU7IH07XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHtcblx0XHRcdHZhciBpID0gc2NyaXB0cy5sZW5ndGggLSAxO1xuXHRcdFx0d2hpbGUgKGkgPiAtMSAmJiAhc2NyaXB0VXJsKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjYyOSk7XG4iXSwibmFtZXMiOlsibGVhZlByb3RvdHlwZXMiLCJnZXRQcm90byIsIm4iLCJyIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidCIsIkFycmF5IiwiZSIsIkVycm9yIiwibWFwIiwiam9pbiIsIlEiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImNvbnN0cnVjdG9yIiwiRnVuY3Rpb24iLCJ0b1N0cmluZyIsIloiLCJpc0FycmF5IiwiTCIsInMiLCJ2IiwiaSIsIm8iLCJrZXlzIiwibm4iLCJmb3JFYWNoIiwidSIsImhhcyIsInByb3RvdHlwZSIsImYiLCJzZXQiLCJhZGQiLCJjIiwiWCIsIk1hcCIsInEiLCJTZXQiLCJwIiwibCIsInNsaWNlIiwicm4iLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImdldCIsImVudW1lcmFibGUiLCJ2YWx1ZSIsImNyZWF0ZSIsImQiLCJ5IiwiY2xlYXIiLCJkZWxldGUiLCJoIiwiZnJlZXplIiwiaXNGcm96ZW4iLCJiIiwidG4iLCJfIiwiVSIsImoiLCJnIiwiTyIsIlMiLCJ3IiwibSIsIlAiLCJNIiwieCIsIkgiLCJBIiwiSSIsImsiLCJhIiwiTiIsIlIiLCJjb25jYXQiLCJEIiwieiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkUiLCJGIiwiVCIsIkMiLCJlbiIsIm9uIiwiUHJveHkiLCJyZXZvY2FibGUiLCJyZXZva2UiLCJwcm94eSIsIkoiLCJwdXNoIiwiSyIsImZyb20iLCJHIiwiVyIsIlN5bWJvbCIsIkIiLCJSZWZsZWN0IiwiZm9yIiwiaXRlcmF0b3IiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJOdW1iZXIiLCJpc05hTiIsImRlbGV0ZVByb3BlcnR5IiwiZGVmaW5lUHJvcGVydHkiLCJzZXRQcm90b3R5cGVPZiIsImFwcGx5IiwidGhpcyIsInVuIiwicHJvZHVjZSIsIlByb21pc2UiLCJ0aGVuIiwicHJvZHVjZVdpdGhQYXRjaGVzIiwidXNlUHJveGllcyIsInNldFVzZVByb3hpZXMiLCJhdXRvRnJlZXplIiwic2V0QXV0b0ZyZWV6ZSIsImNyZWF0ZURyYWZ0IiwiZmluaXNoRHJhZnQiLCJhcHBseVBhdGNoZXMiLCJwYXRoIiwib3AiLCIkIiwiYW4iLCJmbiIsImJpbmQiLCJfdHlwZW9mIiwib2JqIiwiX2RlZmluZVByb3BlcnR5Iiwia2V5IiwiYXJnIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiX29iamVjdFNwcmVhZDIiLCJ0YXJnZXQiLCJzb3VyY2UiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZm9ybWF0UHJvZEVycm9yTWVzc2FnZSIsImNvZGUiLCIkJG9ic2VydmFibGUiLCJvYnNlcnZhYmxlIiwicmFuZG9tU3RyaW5nIiwiTWF0aCIsInJhbmRvbSIsInN1YnN0cmluZyIsInNwbGl0IiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsIl9yZWYyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwiZ2V0U3RhdGUiLCJzdWJzY3JpYmUiLCJsaXN0ZW5lciIsImlzU3Vic2NyaWJlZCIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImRpc3BhdGNoIiwiYWN0aW9uIiwicHJvdG8iLCJpc1BsYWluT2JqZWN0IiwidHlwZSIsImxpc3RlbmVycyIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJfcmVmIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsIm5leHQiLCJ1bnN1YnNjcmliZSIsImxlZ2FjeV9jcmVhdGVTdG9yZSIsImNvbWJpbmVSZWR1Y2VycyIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZpbmFsUmVkdWNlcktleXMiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJzdGF0ZSIsImhhc0NoYW5nZWQiLCJuZXh0U3RhdGUiLCJfaSIsIl9rZXkiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiYmluZEFjdGlvbkNyZWF0b3JzIiwiYWN0aW9uQ3JlYXRvcnMiLCJib3VuZEFjdGlvbkNyZWF0b3JzIiwiY29tcG9zZSIsIl9sZW4iLCJmdW5jcyIsInJlZHVjZSIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwic3RvcmUiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwiTk9UX0ZPVU5EIiwiZGVmYXVsdEVxdWFsaXR5Q2hlY2siLCJkZWZhdWx0TWVtb2l6ZSIsImZ1bmMiLCJlcXVhbGl0eUNoZWNrT3JPcHRpb25zIiwiZXF1YWxzIiwiZW50cnkiLCJwcm92aWRlZE9wdGlvbnMiLCJlcXVhbGl0eUNoZWNrIiwiX3Byb3ZpZGVkT3B0aW9ucyRlcXVhIiwiX3Byb3ZpZGVkT3B0aW9ucyRtYXhTIiwibWF4U2l6ZSIsInJlc3VsdEVxdWFsaXR5Q2hlY2siLCJjb21wYXJhdG9yIiwicHJldiIsImNyZWF0ZUNhY2hlS2V5Q29tcGFyYXRvciIsImNhY2hlIiwicHV0IiwiZ2V0RW50cmllcyIsImVudHJpZXMiLCJjYWNoZUluZGV4IiwiZmluZEluZGV4IiwidW5zaGlmdCIsInBvcCIsImNyZWF0ZUxydUNhY2hlIiwibWVtb2l6ZWQiLCJtYXRjaGluZ0VudHJ5IiwiZmluZCIsImNsZWFyQ2FjaGUiLCJjcmVhdGVTZWxlY3RvckNyZWF0b3IiLCJtZW1vaXplIiwibWVtb2l6ZU9wdGlvbnNGcm9tQXJncyIsIl9sZW4yIiwiX2tleTIiLCJfbGFzdFJlc3VsdCIsIl9yZWNvbXB1dGF0aW9ucyIsImRpcmVjdGx5UGFzc2VkT3B0aW9ucyIsIm1lbW9pemVPcHRpb25zIiwicmVzdWx0RnVuYyIsIl9kaXJlY3RseVBhc3NlZE9wdGlvbjIiLCJmaW5hbE1lbW9pemVPcHRpb25zIiwiZGVwZW5kZW5jaWVzIiwiZXZlcnkiLCJkZXAiLCJkZXBlbmRlbmN5VHlwZXMiLCJuYW1lIiwiZ2V0RGVwZW5kZW5jaWVzIiwibWVtb2l6ZWRSZXN1bHRGdW5jIiwic2VsZWN0b3IiLCJwYXJhbXMiLCJhc3NpZ24iLCJsYXN0UmVzdWx0IiwicmVjb21wdXRhdGlvbnMiLCJyZXNldFJlY29tcHV0YXRpb25zIiwiY3JlYXRlU2VsZWN0b3IiLCJjcmVhdGVUaHVua01pZGRsZXdhcmUiLCJleHRyYUFyZ3VtZW50IiwidGh1bmsiLCJ3aXRoRXh0cmFBcmd1bWVudCIsImV4dGVuZFN0YXRpY3MiLCJfX2V4dGVuZHMiLCJfX3Byb3RvX18iLCJfXyIsIl9fZ2VuZXJhdG9yIiwidGhpc0FyZyIsImJvZHkiLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsImRvbmUiLCJzdGVwIiwiX19zcHJlYWRBcnJheSIsInRvIiwiaWwiLCJfX2RlZlByb3AiLCJfX2RlZlByb3BzIiwiX19nZXRPd25Qcm9wRGVzY3MiLCJfX2dldE93blByb3BTeW1ib2xzIiwiX19oYXNPd25Qcm9wIiwiX19wcm9wSXNFbnVtIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJfX2RlZk5vcm1hbFByb3AiLCJfX3NwcmVhZFZhbHVlcyIsInByb3AiLCJfYyIsIl9fc3ByZWFkUHJvcHMiLCJfX2FzeW5jIiwiX190aGlzIiwiX19hcmd1bWVudHMiLCJnZW5lcmF0b3IiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJ0aHJvdyIsImNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yIiwiYXJncyIsInJlc3QiLCJjb21wb3NlV2l0aERldlRvb2xzIiwid2luZG93IiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIiwiYmFzZVByb3RvIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyIsIk1pZGRsZXdhcmVBcnJheSIsIl9zdXBlciIsIl90aGlzIiwic3BlY2llcyIsImFyciIsInByZXBlbmQiLCJFbmhhbmNlckFycmF5IiwiZnJlZXplRHJhZnRhYmxlIiwidmFsIiwiaXNJbW11dGFibGVEZWZhdWx0IiwiY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlIiwib3B0aW9ucyIsImlzUGxhaW4iLCJmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUiLCJpc1NlcmlhbGl6YWJsZSIsImlnbm9yZWRQYXRocyIsImZvdW5kTmVzdGVkU2VyaWFsaXphYmxlIiwia2V5UGF0aCIsImhhc0lnbm9yZWRQYXRocyIsIl9sb29wXzIiLCJuZXN0ZWRWYWx1ZSIsIm5lc3RlZFBhdGgiLCJzb21lIiwiaWdub3JlZCIsIlJlZ0V4cCIsInRlc3QiLCJlbnRyaWVzXzEiLCJzdGF0ZV8yIiwiaXNOZXN0ZWRGcm96ZW4iLCJ2YWx1ZXMiLCJjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUiLCJnZXREZWZhdWx0TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVBcnJheSIsImltbXV0YWJsZUNoZWNrIiwic2VyaWFsaXphYmxlQ2hlY2siLCJpc0Jvb2xlYW4iLCJJU19QUk9EVUNUSU9OIiwiY29uZmlndXJlU3RvcmUiLCJyb290UmVkdWNlciIsImN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSIsIl9kIiwiX2UiLCJfZiIsImRldlRvb2xzIiwiX2ciLCJfaCIsImVuaGFuY2VycyIsImZpbmFsTWlkZGxld2FyZSIsIml0ZW0iLCJtaWRkbGV3YXJlRW5oYW5jZXIiLCJmaW5hbENvbXBvc2UiLCJ0cmFjZSIsImRlZmF1bHRFbmhhbmNlcnMiLCJzdG9yZUVuaGFuY2VycyIsImNyZWF0ZUFjdGlvbiIsInByZXBhcmVBY3Rpb24iLCJwcmVwYXJlZCIsInBheWxvYWQiLCJtZXRhIiwiZXJyb3IiLCJtYXRjaCIsImlzQWN0aW9uIiwiaXNGU0EiLCJpc1ZhbGlkS2V5IiwiZ2V0VHlwZSIsImV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrIiwiYnVpbGRlckNhbGxiYWNrIiwiZGVmYXVsdENhc2VSZWR1Y2VyIiwiYWN0aW9uc01hcCIsImFjdGlvbk1hdGNoZXJzIiwiYnVpbGRlciIsImFkZENhc2UiLCJ0eXBlT3JBY3Rpb25DcmVhdG9yIiwiYWRkTWF0Y2hlciIsIm1hdGNoZXIiLCJhZGREZWZhdWx0Q2FzZSIsImNyZWF0ZVJlZHVjZXIiLCJpbml0aWFsU3RhdGUiLCJtYXBPckJ1aWxkZXJDYWxsYmFjayIsImdldEluaXRpYWxTdGF0ZSIsImZpbmFsQWN0aW9uTWF0Y2hlcnMiLCJmaW5hbERlZmF1bHRDYXNlUmVkdWNlciIsImlzU3RhdGVGdW5jdGlvbiIsImZyb3plbkluaXRpYWxTdGF0ZV8xIiwiY2FzZVJlZHVjZXJzIiwiY3IiLCJwcmV2aW91c1N0YXRlIiwiY2FzZVJlZHVjZXIiLCJyZXN1bHQiLCJkcmFmdCIsImNyZWF0ZVNsaWNlIiwiX3JlZHVjZXIiLCJyZWR1Y2VyTmFtZXMiLCJzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZSIsInNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlIiwiYnVpbGRSZWR1Y2VyIiwiZXh0cmFSZWR1Y2VycyIsImZpbmFsQ2FzZVJlZHVjZXJzIiwiYWN0aW9uTWF0Y2hlcnNfMSIsInJlZHVjZXJOYW1lIiwicHJlcGFyZUNhbGxiYWNrIiwibWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUiLCJwcmVwYXJlIiwiYWN0aW9ucyIsImNyZWF0ZVN0YXRlT3BlcmF0b3IiLCJtdXRhdG9yIiwicnVuTXV0YXRvciIsInNlbGVjdElkVmFsdWUiLCJlbnRpdHkiLCJzZWxlY3RJZCIsImVuc3VyZUVudGl0aWVzQXJyYXkiLCJlbnRpdGllcyIsInNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMiLCJuZXdFbnRpdGllcyIsImFkZGVkIiwidXBkYXRlZCIsIm5ld0VudGl0aWVzXzEiLCJpZCIsImNoYW5nZXMiLCJjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlciIsImFkZE9uZU11dGFibHkiLCJpZHMiLCJhZGRNYW55TXV0YWJseSIsIm5ld0VudGl0aWVzXzIiLCJzZXRPbmVNdXRhYmx5IiwicmVtb3ZlTWFueU11dGFibHkiLCJkaWRNdXRhdGUiLCJ1cGRhdGVNYW55TXV0YWJseSIsInVwZGF0ZXMiLCJuZXdLZXlzIiwidXBkYXRlc1BlckVudGl0eSIsInVwZGF0ZSIsImRpZE11dGF0ZUlkcyIsIm9yaWdpbmFsMiIsIm5ld0tleSIsImhhc05ld0tleSIsInRha2VOZXdLZXkiLCJ1cHNlcnRNYW55TXV0YWJseSIsInJlbW92ZUFsbCIsIm9wZXJhdG9yIiwiYWRkT25lIiwiYWRkTWFueSIsInNldE9uZSIsInNldE1hbnkiLCJuZXdFbnRpdGllc18zIiwic2V0QWxsIiwidXBkYXRlT25lIiwidXBkYXRlTWFueSIsInVwc2VydE9uZSIsInVwc2VydE1hbnkiLCJyZW1vdmVPbmUiLCJyZW1vdmVNYW55IiwiY3JlYXRlRW50aXR5QWRhcHRlciIsInNvcnRDb21wYXJlciIsImluc3RhbmNlIiwic3RhdGVGYWN0b3J5IiwiYWRkaXRpb25hbFN0YXRlIiwic2VsZWN0b3JzRmFjdG9yeSIsImdldFNlbGVjdG9ycyIsInNlbGVjdFN0YXRlIiwic2VsZWN0SWRzIiwic2VsZWN0RW50aXRpZXMiLCJzZWxlY3RBbGwiLCJzZWxlY3RCeUlkIiwic2VsZWN0VG90YWwiLCJzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMiLCJzdGF0ZUFkYXB0ZXIiLCJzb3J0IiwibW9kZWxzIiwibW9kZWwiLCJtZXJnZSIsInNldE1hbnlNdXRhYmx5IiwiYXBwbGllZFVwZGF0ZXMiLCJ1cGRhdGVzXzEiLCJuZXdJZCIsInJlc29ydEVudGl0aWVzIiwiYWxsRW50aXRpZXMiLCJuZXdTb3J0ZWRJZHMiLCJhcmVBcnJheXNFcXVhbCIsImNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlciIsIm5hbm9pZCIsInNpemUiLCJjb21tb25Qcm9wZXJ0aWVzIiwiUmVqZWN0V2l0aFZhbHVlIiwiRnVsZmlsbFdpdGhNZXRhIiwibWluaVNlcmlhbGl6ZUVycm9yIiwic2ltcGxlRXJyb3IiLCJjb21tb25Qcm9wZXJ0aWVzXzEiLCJwcm9wZXJ0eSIsIm1lc3NhZ2UiLCJjcmVhdGVBc3luY1RodW5rIiwiY3JlYXRlQXN5bmNUaHVuazIiLCJ0eXBlUHJlZml4IiwicGF5bG9hZENyZWF0b3IiLCJyZXF1ZXN0SWQiLCJyZXF1ZXN0U3RhdHVzIiwicGVuZGluZyIsInNlcmlhbGl6ZUVycm9yIiwicmVqZWN0ZWRXaXRoVmFsdWUiLCJhYm9ydGVkIiwiY29uZGl0aW9uIiwiQUMiLCJBYm9ydENvbnRyb2xsZXIiLCJjbGFzc18xIiwic2lnbmFsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJvbmFib3J0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYXNvbiIsInRocm93SWZBYm9ydGVkIiwiYWJvcnQiLCJleHRyYSIsImFib3J0UmVhc29uIiwiaWRHZW5lcmF0b3IiLCJhYm9ydENvbnRyb2xsZXIiLCJwcm9taXNlMiIsIl9hIiwiX2IiLCJmaW5hbEFjdGlvbiIsImNvbmRpdGlvblJlc3VsdCIsImFib3J0ZWRQcm9taXNlIiwiZXJyXzEiLCJnZXRQZW5kaW5nTWV0YSIsInJhY2UiLCJyZWplY3RXaXRoVmFsdWUiLCJmdWxmaWxsV2l0aFZhbHVlIiwiZGlzcGF0Y2hDb25kaXRpb25SZWplY3Rpb24iLCJ1bndyYXAiLCJ1bndyYXBSZXN1bHQiLCJ3aXRoVHlwZXMiLCJtYXRjaGVzIiwiaGFzTWF0Y2hGdW5jdGlvbiIsImlzQW55T2YiLCJtYXRjaGVycyIsImlzQWxsT2YiLCJoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YSIsInZhbGlkU3RhdHVzIiwiaGFzVmFsaWRSZXF1ZXN0SWQiLCJoYXNWYWxpZFJlcXVlc3RTdGF0dXMiLCJpc0FzeW5jVGh1bmtBcnJheSIsImlzUGVuZGluZyIsImFzeW5jVGh1bmtzIiwiYXN5bmNUaHVuayIsImNvbWJpbmVkTWF0Y2hlciIsImlzUmVqZWN0ZWQiLCJpc1JlamVjdGVkV2l0aFZhbHVlIiwiaGFzRmxhZyIsImlzRnVsZmlsbGVkIiwiaXNBc3luY1RodW5rQWN0aW9uIiwiYXN5bmNUaHVua3NfMSIsImFzc2VydEZ1bmN0aW9uIiwiZXhwZWN0ZWQiLCJub29wIiwiY2F0Y2hSZWplY3Rpb24iLCJvbkVycm9yIiwiY2F0Y2giLCJhZGRBYm9ydFNpZ25hbExpc3RlbmVyIiwiYWJvcnRTaWduYWwiLCJjYWxsYmFjayIsIm9uY2UiLCJhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uIiwiY29tcGxldGVkIiwiY2FuY2VsbGVkIiwidGFza0NhbmNlbGxlZCIsInRhc2tDb21wbGV0ZWQiLCJsaXN0ZW5lckNhbmNlbGxlZCIsImxpc3RlbmVyQ29tcGxldGVkIiwiVGFza0Fib3J0RXJyb3IiLCJ0YXNrIiwidmFsaWRhdGVBY3RpdmUiLCJyYWNlV2l0aFNpZ25hbCIsImNsZWFudXAiLCJub3RpZnlSZWplY3Rpb24iLCJmaW5hbGx5IiwiY3JlYXRlUGF1c2UiLCJvdXRwdXQiLCJjcmVhdGVEZWxheSIsInBhdXNlIiwidGltZW91dE1zIiwic2V0VGltZW91dCIsIklOVEVSTkFMX05JTF9UT0tFTiIsImFsbSIsImNyZWF0ZUZvcmsiLCJwYXJlbnRBYm9ydFNpZ25hbCIsInRhc2tFeGVjdXRvciIsImNvbnRyb2xsZXIiLCJjaGlsZEFib3J0Q29udHJvbGxlciIsInRhc2syIiwiY2xlYW5VcCIsInJlc3VsdDIiLCJkZWxheSIsImVycm9yXzEiLCJzdGF0dXMiLCJjYW5jZWwiLCJjcmVhdGVUYWtlUGF0dGVybiIsInN0YXJ0TGlzdGVuaW5nIiwicHJlZGljYXRlIiwidGltZW91dCIsInR1cGxlUHJvbWlzZSIsInByb21pc2VzIiwic3RvcExpc3RlbmluZyIsImVmZmVjdCIsImxpc3RlbmVyQXBpIiwiZ2V0T3JpZ2luYWxTdGF0ZSIsInRha2UiLCJnZXRMaXN0ZW5lckVudHJ5UHJvcHNGcm9tIiwiY3JlYXRlTGlzdGVuZXJFbnRyeSIsImNhbmNlbEFjdGl2ZUxpc3RlbmVycyIsImNyZWF0ZUNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlIiwibGlzdGVuZXJNYXAiLCJzYWZlbHlOb3RpZnlFcnJvciIsImVycm9ySGFuZGxlciIsImVycm9yVG9Ob3RpZnkiLCJlcnJvckluZm8iLCJlcnJvckhhbmRsZXJFcnJvciIsImFkZExpc3RlbmVyIiwiY2xlYXJBbGxMaXN0ZW5lcnMiLCJyZW1vdmVMaXN0ZW5lciIsImRlZmF1bHRFcnJvckhhbmRsZXIiLCJjb25zb2xlIiwiY3JlYXRlTGlzdGVuZXJNaWRkbGV3YXJlIiwibWlkZGxld2FyZU9wdGlvbnMiLCJmaW5kTGlzdGVuZXJFbnRyeSIsImV4aXN0aW5nRW50cnkiLCJjYW5jZWxPcHRpb25zIiwiY2FuY2VsQWN0aXZlIiwiaW5zZXJ0RW50cnkiLCJlbnRyeTIiLCJub3RpZnlMaXN0ZW5lciIsImFwaSIsImludGVybmFsVGFza0NvbnRyb2xsZXIiLCJsaXN0ZW5lckVycm9yXzEiLCJCb29sZWFuIiwiZm9yayIsInJhaXNlZEJ5IiwiY2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUiLCJvcmlnaW5hbFN0YXRlIiwibGlzdGVuZXJFbnRyaWVzIiwibGlzdGVuZXJFbnRyaWVzXzEiLCJydW5MaXN0ZW5lciIsInByZWRpY2F0ZUVycm9yIiwiY2xlYXJMaXN0ZW5lcnMiLCJwcm9taXNlIiwiU0hPVUxEX0FVVE9CQVRDSCIsInByZXBhcmVBdXRvQmF0Y2hlZCIsInF1ZXVlTWljcm90YXNrU2hpbSIsInF1ZXVlTWljcm90YXNrIiwiZ2xvYmFsVGhpcyIsImNiIiwiZXJyIiwiY3JlYXRlUXVldWVXaXRoVGltZXIiLCJub3RpZnkiLCJyQUYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJhdXRvQmF0Y2hFbmhhbmNlciIsIm5vdGlmeWluZyIsInNob3VsZE5vdGlmeUF0RW5kT2ZUaWNrIiwibm90aWZpY2F0aW9uUXVldWVkIiwicXVldWVDYWxsYmFjayIsInF1ZXVlTm90aWZpY2F0aW9uIiwibm90aWZ5TGlzdGVuZXJzIiwibGlzdGVuZXIyIiwibWluIiwiX2V4dGVuZHMiLCJBY3Rpb24iLCJQb3BTdGF0ZUV2ZW50VHlwZSIsImNyZWF0ZU1lbW9yeUhpc3RvcnkiLCJpbml0aWFsRW50cmllcyIsImluaXRpYWxJbmRleCIsInY1Q29tcGF0IiwiY3JlYXRlTWVtb3J5TG9jYXRpb24iLCJjbGFtcEluZGV4IiwiUG9wIiwibWF4IiwiZ2V0Q3VycmVudExvY2F0aW9uIiwibG9jYXRpb24iLCJjcmVhdGVMb2NhdGlvbiIsInBhdGhuYW1lIiwid2FybmluZyQxIiwiY2hhckF0IiwiSlNPTiIsInN0cmluZ2lmeSIsImNyZWF0ZUhyZWYiLCJjcmVhdGVQYXRoIiwiY3JlYXRlVVJMIiwiVVJMIiwiZW5jb2RlTG9jYXRpb24iLCJwYXJzZVBhdGgiLCJzZWFyY2giLCJoYXNoIiwiUHVzaCIsIm5leHRMb2NhdGlvbiIsImRlbHRhIiwicmVwbGFjZSIsIlJlcGxhY2UiLCJnbyIsIm5leHRJbmRleCIsImxpc3RlbiIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2V0VXJsQmFzZWRIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsInVzciIsImNyZWF0ZUhhc2hIaXN0b3J5Iiwic3Vic3RyIiwiYmFzZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImhyZWYiLCJnZXRBdHRyaWJ1dGUiLCJ1cmwiLCJoYXNoSW5kZXgiLCJpbnZhcmlhbnQiLCJjb25kIiwid2FybiIsImdldEhpc3RvcnlTdGF0ZSIsImlkeCIsImN1cnJlbnQiLCJwYXJzZWRQYXRoIiwic2VhcmNoSW5kZXgiLCJnZXRMb2NhdGlvbiIsInZhbGlkYXRlTG9jYXRpb24iLCJkZWZhdWx0VmlldyIsImhpc3RvcnkiLCJnZXRJbmRleCIsImhhbmRsZVBvcCIsIm9yaWdpbiIsInJlcGxhY2VTdGF0ZSIsImhpc3RvcnlTdGF0ZSIsInB1c2hTdGF0ZSIsIlJlc3VsdFR5cGUiLCJjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzIiwicm91dGVzIiwicGFyZW50UGF0aCIsImFsbElkcyIsInJvdXRlIiwidHJlZVBhdGgiLCJjaGlsZHJlbiIsImlzSW5kZXhSb3V0ZSIsIm1hdGNoUm91dGVzIiwibG9jYXRpb25BcmciLCJiYXNlbmFtZSIsInN0cmlwQmFzZW5hbWUiLCJicmFuY2hlcyIsImZsYXR0ZW5Sb3V0ZXMiLCJzY29yZSIsImNvbXBhcmVJbmRleGVzIiwicm91dGVzTWV0YSIsImNoaWxkcmVuSW5kZXgiLCJyYW5rUm91dGVCcmFuY2hlcyIsIm1hdGNoUm91dGVCcmFuY2giLCJzYWZlbHlEZWNvZGVVUkkiLCJwYXJlbnRzTWV0YSIsImZsYXR0ZW5Sb3V0ZSIsInJlbGF0aXZlUGF0aCIsImNhc2VTZW5zaXRpdmUiLCJzdGFydHNXaXRoIiwiam9pblBhdGhzIiwiY29tcHV0ZVNjb3JlIiwiX3JvdXRlJHBhdGgiLCJpbmNsdWRlcyIsImV4cGxvZGVkIiwiZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMiLCJzZWdtZW50cyIsImZpcnN0IiwiaXNPcHRpb25hbCIsImVuZHNXaXRoIiwicmVxdWlyZWQiLCJyZXN0RXhwbG9kZWQiLCJzdWJwYXRoIiwicGFyYW1SZSIsImR5bmFtaWNTZWdtZW50VmFsdWUiLCJpbmRleFJvdXRlVmFsdWUiLCJlbXB0eVNlZ21lbnRWYWx1ZSIsInN0YXRpY1NlZ21lbnRWYWx1ZSIsInNwbGF0UGVuYWx0eSIsImlzU3BsYXQiLCJpbml0aWFsU2NvcmUiLCJzZWdtZW50IiwiYnJhbmNoIiwibWF0Y2hlZFBhcmFtcyIsIm1hdGNoZWRQYXRobmFtZSIsImVuZCIsInJlbWFpbmluZ1BhdGhuYW1lIiwibWF0Y2hQYXRoIiwicGF0aG5hbWVCYXNlIiwibm9ybWFsaXplUGF0aG5hbWUiLCJnZW5lcmF0ZVBhdGgiLCJvcmlnaW5hbFBhdGgiLCJ3YXJuaW5nIiwib3B0aW9uYWwiLCJwYXJhbSIsInByZWZpeCIsInN0ciIsInBhdHRlcm4iLCJwYXJhbU5hbWVzIiwicmVnZXhwU291cmNlIiwicGFyYW1OYW1lIiwiY29tcGlsZVBhdGgiLCJjYXB0dXJlR3JvdXBzIiwibWVtbyIsInNwbGF0VmFsdWUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzYWZlbHlEZWNvZGVVUklDb21wb25lbnQiLCJkZWNvZGVVUkkiLCJ0b0xvd2VyQ2FzZSIsInN0YXJ0SW5kZXgiLCJuZXh0Q2hhciIsInJlc29sdmVQYXRoIiwiZnJvbVBhdGhuYW1lIiwidG9QYXRobmFtZSIsInJlc29sdmVQYXRobmFtZSIsIm5vcm1hbGl6ZVNlYXJjaCIsIm5vcm1hbGl6ZUhhc2giLCJnZXRJbnZhbGlkUGF0aEVycm9yIiwiY2hhciIsImZpZWxkIiwiZGVzdCIsImdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzIiwicmVzb2x2ZVRvIiwidG9BcmciLCJyb3V0ZVBhdGhuYW1lcyIsImxvY2F0aW9uUGF0aG5hbWUiLCJpc1BhdGhSZWxhdGl2ZSIsImlzRW1wdHlQYXRoIiwicm91dGVQYXRobmFtZUluZGV4IiwidG9TZWdtZW50cyIsInNoaWZ0IiwiaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoIiwiaGFzQ3VycmVudFRyYWlsaW5nU2xhc2giLCJwYXRocyIsImpzb24iLCJkYXRhIiwiaW5pdCIsInJlc3BvbnNlSW5pdCIsImhlYWRlcnMiLCJIZWFkZXJzIiwiUmVzcG9uc2UiLCJBYm9ydGVkRGVmZXJyZWRFcnJvciIsIkRlZmVycmVkRGF0YSIsInBlbmRpbmdLZXlzU2V0Iiwic3Vic2NyaWJlcnMiLCJkZWZlcnJlZEtleXMiLCJhYm9ydFByb21pc2UiLCJvbkFib3J0IiwidW5saXN0ZW5BYm9ydFNpZ25hbCIsImFjYyIsInRyYWNrUHJvbWlzZSIsIm9uU2V0dGxlIiwiZW1pdCIsInNldHRsZWRLZXkiLCJzdWJzY3JpYmVyIiwiYXN5bmMiLCJ1bndyYXBwZWREYXRhIiwidW53cmFwVHJhY2tlZFByb21pc2UiLCJwZW5kaW5nS2V5cyIsIl90cmFja2VkIiwiaXNUcmFja2VkUHJvbWlzZSIsIl9lcnJvciIsIl9kYXRhIiwiZGVmZXIiLCJyZWRpcmVjdCIsIkVycm9yUmVzcG9uc2UiLCJzdGF0dXNUZXh0IiwiaW50ZXJuYWwiLCJpc1JvdXRlRXJyb3JSZXNwb25zZSIsInZhbGlkTXV0YXRpb25NZXRob2RzQXJyIiwidmFsaWRNdXRhdGlvbk1ldGhvZHMiLCJ2YWxpZFJlcXVlc3RNZXRob2RzQXJyIiwidmFsaWRSZXF1ZXN0TWV0aG9kcyIsInJlZGlyZWN0U3RhdHVzQ29kZXMiLCJyZWRpcmVjdFByZXNlcnZlTWV0aG9kU3RhdHVzQ29kZXMiLCJJRExFX05BVklHQVRJT04iLCJmb3JtTWV0aG9kIiwiZm9ybUFjdGlvbiIsImZvcm1FbmNUeXBlIiwiZm9ybURhdGEiLCJJRExFX0ZFVENIRVIiLCJJRExFX0JMT0NLRVIiLCJwcm9jZWVkIiwicmVzZXQiLCJBQlNPTFVURV9VUkxfUkVHRVgiLCJpc0Jyb3dzZXIiLCJjcmVhdGVFbGVtZW50IiwiaXNTZXJ2ZXIiLCJjcmVhdGVSb3V0ZXIiLCJpbkZsaWdodERhdGFSb3V0ZXMiLCJkYXRhUm91dGVzIiwidW5saXN0ZW5IaXN0b3J5Iiwic2F2ZWRTY3JvbGxQb3NpdGlvbnMiLCJnZXRTY3JvbGxSZXN0b3JhdGlvbktleSIsImdldFNjcm9sbFBvc2l0aW9uIiwiaW5pdGlhbFNjcm9sbFJlc3RvcmVkIiwiaHlkcmF0aW9uRGF0YSIsImluaXRpYWxNYXRjaGVzIiwiaW5pdGlhbEVycm9ycyIsImdldEludGVybmFsUm91dGVyRXJyb3IiLCJnZXRTaG9ydENpcmN1aXRNYXRjaGVzIiwicm91dGVyIiwicGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyIiwiaW5pdGlhbGl6ZWQiLCJsb2FkZXIiLCJoaXN0b3J5QWN0aW9uIiwibmF2aWdhdGlvbiIsInJlc3RvcmVTY3JvbGxQb3NpdGlvbiIsInByZXZlbnRTY3JvbGxSZXNldCIsInJldmFsaWRhdGlvbiIsImxvYWRlckRhdGEiLCJhY3Rpb25EYXRhIiwiZXJyb3JzIiwiZmV0Y2hlcnMiLCJibG9ja2VycyIsInBlbmRpbmdBY3Rpb24iLCJwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0IiwiaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uIiwiaXNSZXZhbGlkYXRpb25SZXF1aXJlZCIsImNhbmNlbGxlZERlZmVycmVkUm91dGVzIiwiY2FuY2VsbGVkRmV0Y2hlckxvYWRzIiwiZmV0Y2hDb250cm9sbGVycyIsImluY3JlbWVudGluZ0xvYWRJZCIsInBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkIiwiZmV0Y2hSZWxvYWRJZHMiLCJmZXRjaFJlZGlyZWN0SWRzIiwiZmV0Y2hMb2FkTWF0Y2hlcyIsImFjdGl2ZURlZmVycmVkcyIsImJsb2NrZXJGdW5jdGlvbnMiLCJpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSIsInVwZGF0ZVN0YXRlIiwibmV3U3RhdGUiLCJjb21wbGV0ZU5hdmlnYXRpb24iLCJfbG9jYXRpb24kc3RhdGUiLCJfbG9jYXRpb24kc3RhdGUyIiwiaXNBY3Rpb25SZWxvYWQiLCJpc011dGF0aW9uTWV0aG9kIiwiX2lzUmVkaXJlY3QiLCJtZXJnZUxvYWRlckRhdGEiLCJkZWxldGVCbG9ja2VyIiwiZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbiIsInN0YXJ0TmF2aWdhdGlvbiIsIm9wdHMiLCJzdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24iLCJ1c2VyTWF0Y2hlcyIsImNyZWF0ZVVzZU1hdGNoZXNNYXRjaCIsInNhdmVTY3JvbGxQb3NpdGlvbiIsInJvdXRlc1RvVXNlIiwibG9hZGluZ05hdmlnYXRpb24iLCJvdmVycmlkZU5hdmlnYXRpb24iLCJub3RGb3VuZE1hdGNoZXMiLCJjYW5jZWxBY3RpdmVEZWZlcnJlZHMiLCJzdWJtaXNzaW9uIiwicGVuZGluZ0FjdGlvbkRhdGEiLCJwZW5kaW5nRXJyb3IiLCJyZXF1ZXN0IiwiY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QiLCJmaW5kTmVhcmVzdEJvdW5kYXJ5IiwiYWN0aW9uT3V0cHV0IiwiaW50ZXJydXB0QWN0aXZlTG9hZHMiLCJhY3Rpb25NYXRjaCIsImdldFRhcmdldE1hdGNoIiwiY2FsbExvYWRlck9yQWN0aW9uIiwic2hvcnRDaXJjdWl0ZWQiLCJtZXRob2QiLCJyb3V0ZUlkIiwiaXNSZWRpcmVjdFJlc3VsdCIsInN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uIiwiaXNFcnJvclJlc3VsdCIsImJvdW5kYXJ5TWF0Y2giLCJwZW5kaW5nQWN0aW9uRXJyb3IiLCJpc0RlZmVycmVkUmVzdWx0IiwiaGFuZGxlQWN0aW9uIiwiUmVxdWVzdCIsImFjdGl2ZVN1Ym1pc3Npb24iLCJtYXRjaGVzVG9Mb2FkIiwicmV2YWxpZGF0aW5nRmV0Y2hlcnMiLCJnZXRNYXRjaGVzVG9Mb2FkIiwicmYiLCJmZXRjaGVyIiwicmV2YWxpZGF0aW5nRmV0Y2hlciIsInJlc3VsdHMiLCJsb2FkZXJSZXN1bHRzIiwiZmV0Y2hlclJlc3VsdHMiLCJjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEiLCJmaW5kUmVkaXJlY3QiLCJwcm9jZXNzTG9hZGVyRGF0YSIsImRlZmVycmVkRGF0YSIsImRvbmVLZXlzIiwibWFya0ZldGNoZXJzRG9uZSIsIm1hcmtGZXRjaFJlZGlyZWN0c0RvbmUiLCJhYm9ydFN0YWxlRmV0Y2hMb2FkcyIsImhhbmRsZUxvYWRlcnMiLCJnZXRGZXRjaGVyIiwiX3RlbXAiLCJfd2luZG93IiwiaXNGZXRjaEFjdGlvblJlZGlyZWN0IiwicmV2YWxpZGF0ZSIsInJlZGlyZWN0TG9jYXRpb24iLCJfaXNGZXRjaEFjdGlvblJlZGlyZWN0IiwiaXNEaWZmZXJlbnRCYXNlbmFtZSIsInJlZGlyZWN0SGlzdG9yeUFjdGlvbiIsImN1cnJlbnRNYXRjaGVzIiwiZmV0Y2hlcnNUb0xvYWQiLCJhbGwiLCJyZXNvbHZlRGVmZXJyZWRSZXN1bHRzIiwiYWJvcnRGZXRjaGVyIiwic2V0RmV0Y2hlckVycm9yIiwiZGVsZXRlRmV0Y2hlciIsImRvbmVGZXRjaGVyIiwibGFuZGVkSWQiLCJ5ZWV0ZWRLZXlzIiwidXBkYXRlQmxvY2tlciIsIm5ld0Jsb2NrZXIiLCJibG9ja2VyIiwic2hvdWxkQmxvY2tOYXZpZ2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiYmxvY2tlcktleSIsImJsb2NrZXJGdW5jdGlvbiIsImNhbmNlbGxlZFJvdXRlSWRzIiwiZGZkIiwiaW5pdGlhbGl6ZSIsImVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uIiwicG9zaXRpb25zIiwiZ2V0UG9zaXRpb24iLCJnZXRLZXkiLCJuYXZpZ2F0ZSIsIm5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyIsInVzZXJSZXBsYWNlIiwiZmV0Y2giLCJyZXF1ZXN0TWF0Y2hlcyIsImV4aXN0aW5nRmV0Y2hlciIsImZldGNoUmVxdWVzdCIsImFjdGlvblJlc3VsdCIsImxvYWRpbmdGZXRjaGVyIiwicmV2YWxpZGF0aW9uUmVxdWVzdCIsImxvYWRJZCIsImxvYWRGZXRjaGVyIiwic3RhbGVLZXkiLCJkaWRBYm9ydEZldGNoTG9hZHMiLCJoYW5kbGVGZXRjaGVyQWN0aW9uIiwicmVzb2x2ZURlZmVycmVkRGF0YSIsImhhbmRsZUZldGNoZXJMb2FkZXIiLCJkaXNwb3NlIiwiZ2V0QmxvY2tlciIsIl9pbnRlcm5hbEZldGNoQ29udHJvbGxlcnMiLCJfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHMiLCJfaW50ZXJuYWxTZXRSb3V0ZXMiLCJuZXdSb3V0ZXMiLCJpc0ZldGNoZXIiLCJpc1N1Ym1pc3Npb25OYXZpZ2F0aW9uIiwic3RyaXBIYXNoRnJvbVBhdGgiLCJzZWFyY2hQYXJhbXMiLCJjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyIsImhhc05ha2VkSW5kZXhRdWVyeSIsImFwcGVuZCIsImN1cnJlbnRVcmwiLCJuZXh0VXJsIiwiZGVmYXVsdFNob3VsZFJldmFsaWRhdGUiLCJib3VuZGFyeUlkIiwibmF2aWdhdGlvbk1hdGNoZXMiLCJib3VuZGFyeU1hdGNoZXMiLCJnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeSIsImN1cnJlbnRMb2FkZXJEYXRhIiwiY3VycmVudE1hdGNoIiwiaXNOZXciLCJpc01pc3NpbmdEYXRhIiwiaXNOZXdMb2FkZXIiLCJjdXJyZW50Um91dGVNYXRjaCIsIm5leHRSb3V0ZU1hdGNoIiwic2hvdWxkUmV2YWxpZGF0ZUxvYWRlciIsImN1cnJlbnRQYXJhbXMiLCJuZXh0UGFyYW1zIiwiaXNOZXdSb3V0ZUluc3RhbmNlIiwiZmV0Y2hlck1hdGNoZXMiLCJmZXRjaGVyTWF0Y2giLCJjdXJyZW50UGF0aCIsImxvYWRlck1hdGNoIiwic2hvdWxkUmV2YWxpZGF0ZSIsInJvdXRlQ2hvaWNlIiwiaXNTdGF0aWNSZXF1ZXN0IiwiaXNSb3V0ZVJlcXVlc3QiLCJyZXF1ZXN0Q29udGV4dCIsInJlc3VsdFR5cGUiLCJvblJlamVjdCIsImhhbmRsZXIiLCJjb250ZXh0IiwicHJvdG9jb2wiLCJpc1NhbWVCYXNlbmFtZSIsInJlc29sdmVkTG9jYXRpb24iLCJyZXNwb25zZSIsImNvbnRlbnRUeXBlIiwidGV4dCIsInN0YXR1c0NvZGUiLCJfcmVzdWx0JGluaXQiLCJfcmVzdWx0JGluaXQyIiwiZGVmZXJyZWQiLCJ0b1VwcGVyQ2FzZSIsIlVSTFNlYXJjaFBhcmFtcyIsIkZpbGUiLCJmb3VuZEVycm9yIiwibG9hZGVySGVhZGVycyIsInByb2Nlc3NSb3V0ZUxvYWRlckRhdGEiLCJuZXdMb2FkZXJEYXRhIiwibWVyZ2VkTG9hZGVyRGF0YSIsInJldmVyc2UiLCJoYXNFcnJvckJvdW5kYXJ5IiwiX3RlbXA0IiwiZXJyb3JNZXNzYWdlIiwiaXNSZXZhbGlkYXRpbmdMb2FkZXIiLCJyZXNvbHZlRGF0YSIsImdldEFsbCIsImhhbmRsZSIsInBhdGhNYXRjaGVzIiwiR2xvYmFsU3R5bGVzIiwiY3JlYXRlR2xvYmFsU3R5bGUiLCJfdGVtcGxhdGVPYmplY3QiLCJwcm9wcyIsInRoZW1lIiwiY29sb3JCbGFjayIsIkF1dGhvcml6YXRpb25Db250YWluZXIiLCJzdHlsZWQiLCJDb250YWluZXIiLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsIiwiV3JhcHBlciIsImRpdiIsIl90ZW1wbGF0ZU9iamVjdDIiLCJBdXRMaW5rIiwiTGluayIsIl90ZW1wbGF0ZU9iamVjdDMiLCJBdXRCdXR0b24iLCJidXR0b24iLCJfdGVtcGxhdGVPYmplY3Q0IiwiQXV0TGlua1NpbmdJbiIsIl90ZW1wbGF0ZU9iamVjdDUiLCJGb290ZXJTdHlsZSIsImZvb3RlciIsIkNvbnRhaW5lckZvb3RlciIsImNvbG9yV2hpdGUiLCJIZWFkZXJTdHlsZSIsImhlYWRlciIsIkhlYWRlckNvbnRhaW5lciIsIkxpbmtMb2dvIiwiUGVybWFuZW50TWFya2VyNDAwIiwiTGlua0NhcnQiLCJCdXR0b25BY3RpdmVTdHlsZSIsImJ1dHRvblMiLCJCdXR0b25TdHlsZSIsIkJ1dHRvbkFjdGl2ZSIsImJlZXJJZCIsImNsYXNzQiIsInVzZURpc3BhdGNoIiwiX2pzeCIsImNsYXNzTmFtZSIsIm9uQ2xpY2siLCJyZW1vdmVGcm9tQmFza2V0T25lQmVlciIsInJlbW92ZVByb2R1Y3QiLCJiYXNrZXQiLCJwYXJzZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzZXRJdGVtIiwiQnV0dG9uIiwiYmVlciIsInVzZVNlbGVjdG9yIiwiYmVlcnMiLCJvbmVCZWVyIiwiYWRkVG9CYXNrZXRPbmVCZWVyIiwiX29iamVjdFNwcmVhZCIsInF1YW50aXR5IiwicHJpY2UiLCJpYnUiLCJpc0NhcnQiLCJhZGRMb2NhbFN0b3JhZ2UiLCJQYWdlQmVlclN0eWxlIiwic2VjdGlvbiIsIlBhZ2VCZWVyQ29udGFpbmVyIiwiUGFnZUJlZXJJbWciLCJpbWciLCJQYWdlQmVlclRpdGxlIiwiaDIiLCJUaXRsZSIsIlBhZ2VCZWVyVGV4dCIsIlBhZ2VCZWVyU3VidHV0bGUiLCJoMyIsIl90ZW1wbGF0ZU9iamVjdDYiLCJJbnRlcjUwMCIsIlBhZ2VCZWVyTGlzdEluZ3JlZGllbnRzIiwidWwiLCJfdGVtcGxhdGVPYmplY3Q3IiwiY29udGVudCIsIlNwaW5uZXIiLCJfanN4cyIsIl9GcmFnbWVudCIsInNyYyIsImltYWdlX3VybCIsImFsdCIsIndpZHRoIiwiaGVpZ2h0IiwiYWJ2IiwiZmlyc3RfYnJld2VkIiwiZGVzY3JpcHRpb24iLCJpbmdyZWRpZW50cyIsIm1hbHQiLCJob3BzIiwieWVhc3QiLCJyZW1vdmVGcm9tQmFza2V0Iiwic2VsZWN0QmVlckJ5SWQiLCJhZGRUb0Jhc2tldCIsIkxpbmtCZWVyIiwiY29sb3JBY3RpdmVMaW5rIiwiSW1nU3R5bGUiLCJCZWVyVGl0bGUiLCJCZWVyQWxjIiwic3BhbiIsIkJlZXJQcmljZSIsIkJlZXJzU2VjdGlvblN0eWxlIiwiQmVlcnNDb250YWluZXIiLCJCZWVyc0xpc3RTdHlsZSIsIkJlZXJJdGVtU3R5bGUiLCJsaSIsImJlZXJzSWRzIiwiQ2FyZEJlZXIiLCJDb21tZW50c1N0eWxlIiwiQ29tbWVudHNMaXN0IiwiQ29tbWVudHNUaXRsZSIsIml0ZW1TdHlsZSIsImNzcyIsIlBhZ2luYXRpb25Db250YWluZXIiLCJMaXN0IiwiTGlua0FjdGl2ZVBhZyIsIkxpbmtQYWciLCJjb3VudCIsIm9uaGFuZGxlciIsImN1cnJlbnRQYWdlIiwibnVtYmVyUGFnZXMiLCJudW1iZXIiLCJDYXJkQmVlckl0ZW0iLCJDYXJkQmVlckltZyIsIkNhcmRCZWVyVGl0bGUiLCJDYXJkQmVlckFsYyIsIkNhcmRCZWVyUHJpY2UiLCJDYXJkQmVlcldwYXJDb3VudCIsIkNhcmRCZWVyVGl0bGVDb3VudCIsIkNhcmRCZWVyV3BhckJ1dHRvbnMiLCJfdGVtcGxhdGVPYmplY3Q4IiwiQ2FyZEJlZXJCdXR0b24iLCJfdGVtcGxhdGVPYmplY3Q5IiwiQ2FyZEJlZXJEZWxldGUiLCJfdGVtcGxhdGVPYmplY3QxMCIsImNsb3NlIiwic2VsZWN0QmVlckJhc2tldEJ5SWQiLCJfdXNlU3RhdGUyIiwidXNlU3RhdGUiLCJzZXRRdWFudGl0eSIsInVwZGF0ZVF1YW50aXR5TG9jYWxTdG9yYWdlIiwiZGVjcmVtZW50QmVlcnMiLCJ1cGRhdGVQcmljZSIsImluY3JlbWVudEJlZXJzIiwiQmFza2V0U3R5bGUiLCJCYXNrZXRDb250YWluZXIiLCJCYXNrZXRUb3RhbCIsIkJhc2tldExpc3RTdHlsZSIsIldyYXBCdXR0b25zIiwiQnV0dG9uQ2xlYXIiLCJMaW5rRm9ybSIsImJlZXJzU3RvcmUiLCJzZWxlY3RCZWVyQmFza2V0SWRzIiwic2V0Q291bnQiLCJ1c2VFZmZlY3QiLCJiZWVyc0Jhc2tldCIsImFkZFByb2R1Y3RzIiwibG9nIiwiQ2FyZEJlZXJCYXNrZXQiLCJyZW1vdmVJdGVtIiwiZGVsZXRpbmdBbGxGcm9tVGhlQmFza2V0IiwiY2xlYXJCYXNrZXQiLCJzdHlsZUl0ZW0iLCJXcmFwVGl0bGUiLCJMaXN0T3JkZXJCZWVycyIsIkxpc3RPcmRlckl0ZW0iLCJXcmFwUHJpY2UiLCJ0b3RhbCIsImluZGVudCIsImluZGVudERlc2t0b3AiLCJpbmRlbnRUYWJsZXQiLCJpbmRlbnRNb2JpbGUiLCJTdHlsZUJ1dHRvbiIsIlN0eWxlTW9kYWwiLCJTdHlsZUZyYW1lIiwiU3R5bGVWYWxpZGF0aW9uIiwiV3JhcElucHV0IiwiSW5wdXRTdHlsZSIsIklucHV0TmFtZSIsIl9zbGljZWRUb0FycmF5Iiwic2V0TmFtZSIsIl91c2VTdGF0ZTQiLCJjbGFzc0lucHV0Iiwic2V0Q2xhc3NJbnB1dCIsImh0bWxGb3IiLCJwbGFjZWhvbGRlciIsIm9uQ2hhbmdlIiwib25CbHVyIiwiSW5wdXRNYWlsIiwiX3VzZVN0YXRlNiIsIm1haWwiLCJzZXRNYWlsIiwiX3VzZVN0YXRlOCIsIklucHV0VGVsIiwiX3VzZVN0YXRlMTAiLCJ0ZWwiLCJzZXRUZWwiLCJfdXNlU3RhdGUxMiIsIklucHV0Q29udHJ5IiwiX3VzZVN0YXRlMTQiLCJjb3VudHJ5Iiwic2V0Q291bnRyeSIsIl91c2VTdGF0ZTE2IiwiSW5wdXRDaXR5IiwiX3VzZVN0YXRlMTgiLCJjaXR5Iiwic2V0Q2l0eSIsIl91c2VTdGF0ZTIwIiwiSW5wdXRTdHJlZXQiLCJfdXNlU3RhdGUyMiIsInN0cmVldCIsInNldFN0cmVldCIsIl91c2VTdGF0ZTI0IiwiSW5wdXRIb3VzZSIsIl91c2VTdGF0ZTI2IiwiaG91c2UiLCJzZXRIb3VzZSIsIl91c2VTdGF0ZTI4IiwiSW5wdXRBcGFydG1lbnQiLCJfdXNlU3RhdGUzMCIsImFwYXJ0bWVudCIsInNldEFwYXJ0bWVudCIsIl91c2VTdGF0ZTMyIiwiRm9ybVN0eWxlIiwiZm9ybSIsIkZvcm1Db250YWluZXIiLCJGb3JtRmllbGRzZXQiLCJmaWVsZHNldCIsIkZvcm1MZWdlbmQiLCJsZWdlbmQiLCJGb3JtVGV4dGFyZWEiLCJ0ZXh0YXJlYSIsIkZvcm1XcmFwQ2hlY2tib3giLCJGb3JtQnV0dG9uIiwibW9kYWwiLCJzZXRNb2RhbCIsInVzZUxvY2F0aW9uIiwidXNlTmF2aWdhdGUiLCJzZWxlY3RBbGxCZWVyc0Jhc2tldCIsImF1dGhvcml6YXRpb24iLCJzZXNzaW9uIiwiY2FsbGJhY2tzIiwic2F2ZUxvY2FsIiwidXNlQ2FsbGJhY2siLCJiYWNrIiwib25TdWJtaXQiLCJwcmV2ZW50RGVmYXVsdCIsImNvbHMiLCJyb3dzIiwiTGlzdE9yZGVyIiwiZGVmYXVsdENoZWNrZWQiLCJNb2RhbCIsIkJ1dHRvblNpZ24iLCJJbnB1dFdyYXBwZXIiLCJzZXRWYWx1ZSIsIm9uQ2hhbmdlRGVib3VuY2UiLCJkZWJvdW5jZSIsInVzZUxheW91dEVmZmVjdCIsInRleHRCdXR0b24iLCJUZXN0Q29udGFpbmVyIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsImV4cG9ydHMiLCJPcCIsImhhc093biIsImRlc2MiLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJzZWxmIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJDb250aW51ZVNlbnRpbmVsIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZWNvcmQiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJtZXRob2ROYW1lIiwicmV0dXJuIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImRvbmVSZXN1bHQiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiaXRlciIsInNraXBUZW1wUmVzZXQiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJfbmV4dCIsIl90aHJvdyIsIl9hcnJheVdpdGhIb2xlcyIsIl9zIiwiX3giLCJfciIsIl9hcnIiLCJfbiIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsImxlbiIsImFycjIiLCJwYXNzd29yZCIsInNldFBhc3N3b3JkIiwidXNlciIsIl9jYWxsZWUiLCJfbG9jYXRpb24kc3RhdGUzIiwiX2NvbnRleHQiLCJmZXRjaEF1dGhvcml6YXRpb24iLCJfeDIiLCJvbkNoYW5nZUxvZ2luIiwib25DaGFuZ2VQYXNzd29yZCIsInNlbGVjdCIsIkZvcm0iLCJJbnB1dExvZ2luIiwiVGVzdCIsIlByb2ZpbGVTZWN0aW9uIiwiUHJvZmlsZUNvbnRhaW5lciIsIlByb2ZpbGVUaXRsZSIsIlRleHQiLCJJbnRlcjkwMCIsImVtYWlsIiwidGVsZXBob25lIiwidG9rZW4iLCJmZXRjaFVzZXIiLCJQcm9maWxlQ2FyZCIsIk5hdmlnYXRlIiwiZmZJbnRlciIsImZmUGVybWFuZW50TWFya2VyIiwic2Nyb2xsVG8iLCJfcmVmJHRleHQiLCJfcmVmJHNpemUiLCJzdHlsZSIsImJhc2tldEFkYXB0ZXIiLCJiYXNrZXRTbGljZSIsIl9iYXNrZXRTbGljZSRhY3Rpb25zIiwiX2Jhc2tldEFkYXB0ZXIkZ2V0U2VsIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJmZXRjaENoZWNrIiwiX2NhbGxlZTIiLCJfY29udGV4dDIiLCJmZXRjaFNpZ25PdXQiLCJfY2FsbGVlMyIsIl9jb250ZXh0MyIsInNlc3Npb25TbGljZSIsInByb2ZpbGUiLCJ1c2VyU2xpY2UiLCJwaG9uZSIsIkdsb2JhbEZvbnRzIiwiUGVybWFuZW50TWFya2VyV29mZjIiLCJQZXJtYW5lbnRNYXJrZXJXb2ZmIiwiSW50ZXJSZWd1bGFyV29mZjIiLCJJbnRlclJlZ3VsYXJXb2ZmIiwiSW50ZXJNZWRpdW1Xb2ZmMiIsIkludGVyTWVkaXVtV29mZiIsIkludGVyQmxhY2tXb2ZmMiIsIkludGVyQmxhY2tXb2ZmIiwidXNlSW5pdCIsImluaXRGdW5jIiwiZGVwZW5kcyIsImJhY2tGb3J3YXJkIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsIm9iamVjdFByb3RvdHlwZSIsIm1vZHVsZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwiJCR0eXBlb2YiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGcmFnbWVudCIsIkxhenkiLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsInJlVHJpbSIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc09jdGFsIiwiZnJlZVBhcnNlSW50IiwicGFyc2VJbnQiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJyb290Iiwib2JqZWN0VG9TdHJpbmciLCJuYXRpdmVNYXgiLCJuYXRpdmVNaW4iLCJub3ciLCJEYXRlIiwiaXNPYmplY3QiLCJ0b051bWJlciIsImlzT2JqZWN0TGlrZSIsImlzU3ltYm9sIiwib3RoZXIiLCJ2YWx1ZU9mIiwiaXNCaW5hcnkiLCJ3YWl0IiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwidHJhaWxpbmciLCJpbnZva2VGdW5jIiwidGltZSIsInNob3VsZEludm9rZSIsInRpbWVTaW5jZUxhc3RDYWxsIiwidGltZXJFeHBpcmVkIiwidHJhaWxpbmdFZGdlIiwicmVtYWluaW5nV2FpdCIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJsZWFkaW5nRWRnZSIsImNsZWFyVGltZW91dCIsImZsdXNoIiwiYWEiLCJjYSIsImVuY29kZVVSSUNvbXBvbmVudCIsImRhIiwiZWEiLCJmYSIsImhhIiwiaWEiLCJqYSIsImthIiwibGEiLCJtYSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwicmEiLCJzYSIsInRhIiwicGEiLCJxYSIsIm9hIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJ1YSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwidmEiLCJ3YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJNYSIsInN0YWNrIiwidHJpbSIsIk5hIiwiT2EiLCJwcmVwYXJlU3RhY2tUcmFjZSIsImNvbnN0cnVjdCIsIlBhIiwidGFnIiwiUWEiLCJfcGF5bG9hZCIsIl9pbml0IiwiUmEiLCJTYSIsIlRhIiwibm9kZU5hbWUiLCJWYSIsIl92YWx1ZVRyYWNrZXIiLCJnZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwiWGEiLCJhY3RpdmVFbGVtZW50IiwiWWEiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJaYSIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJhYiIsImJiIiwiZGIiLCJvd25lckRvY3VtZW50IiwiZWIiLCJmYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJnYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm9iIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJwYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYXNwZWN0UmF0aW8iLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJxYiIsInJiIiwic2IiLCJzZXRQcm9wZXJ0eSIsInRiIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwia2V5Z2VuIiwibGluayIsInRyYWNrIiwid2JyIiwidWIiLCJ2YiIsImlzIiwid2IiLCJ4YiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJOYiIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiU2IiLCJUYiIsIlZiIiwiYWx0ZXJuYXRlIiwiZmxhZ3MiLCJXYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiWGIiLCJaYiIsImNoaWxkIiwic2libGluZyIsIlliIiwiJGIiLCJhYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJiYyIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiY2MiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsImRjIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwidW5zdGFibGVfbm93IiwiZWMiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsImZjIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJnYyIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiaGMiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImljIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJqYyIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImtjIiwibGMiLCJvYyIsImNsejMyIiwicGMiLCJxYyIsIkxOMiIsInJjIiwic2MiLCJ0YyIsInVjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInZjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJldmVudFRpbWVzIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwiUmMiLCJTYyIsInBvaW50ZXJJZCIsIlRjIiwibmF0aXZlRXZlbnQiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwidGFyZ2V0Q29udGFpbmVycyIsIlZjIiwiV2MiLCJwcmlvcml0eSIsImlzRGVoeWRyYXRlZCIsImNvbnRhaW5lckluZm8iLCJYYyIsIlljIiwiWmMiLCIkYyIsImFkIiwiYmQiLCJjZCIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwiZGQiLCJlZCIsInRyYW5zaXRpb24iLCJmZCIsImdkIiwiaGQiLCJVYyIsInN0b3BQcm9wYWdhdGlvbiIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsInBkIiwicWQiLCJyZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImlzVHJ1c3RlZCIsInRkIiwidWQiLCJ2aWV3IiwiZGV0YWlsIiwidmQiLCJBZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ6ZCIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJCZCIsIkRkIiwiZGF0YVRyYW5zZmVyIiwiRmQiLCJIZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJJZCIsImNsaXBib2FyZERhdGEiLCJKZCIsIkxkIiwiTWQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiTmQiLCJPZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZCIsIlFkIiwiZnJvbUNoYXJDb2RlIiwicmVwZWF0IiwibG9jYWxlIiwid2hpY2giLCJSZCIsIlRkIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWWQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIlpkIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwibW9udGgiLCJyYW5nZSIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJldmVudCIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwibm9kZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiTGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTWUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJOZSIsImNvbnRlbnRFZGl0YWJsZSIsIk9lIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImRvY3VtZW50RWxlbWVudCIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJleHRlbmQiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiZWxlbWVudCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsIldlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiWGUiLCJZZSIsIlplIiwiYW5pbWF0aW9uIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsImhmIiwibGYiLCJtZiIsIm5mIiwiVWIiLCJvZiIsInBmIiwicWYiLCJzZiIsImNhcHR1cmUiLCJwYXNzaXZlIiwidGYiLCJ1ZiIsInBhcmVudFdpbmRvdyIsInZmIiwid2YiLCJuYSIsInhhIiwiJGEiLCJiYSIsImplIiwia2UiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiX19odG1sIiwiRmYiLCJHZiIsIkhmIiwiSmYiLCJJZiIsIktmIiwiTGYiLCJNZiIsInByZXZpb3VzU2libGluZyIsIk5mIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJTZiIsIlRmIiwiVWYiLCJWZiIsIldmIiwiWGYiLCJZZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIlpmIiwiJGYiLCJhZyIsImJnIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY2ciLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsInRnIiwidWciLCJ2ZyIsIndnIiwieGciLCJ5ZyIsInpnIiwiQWciLCJCZyIsImVsZW1lbnRUeXBlIiwiZGVsZXRpb25zIiwiQ2ciLCJwZW5kaW5nUHJvcHMiLCJvdmVyZmxvdyIsInRyZWVDb250ZXh0IiwicmV0cnlMYW5lIiwiRGciLCJtb2RlIiwiRWciLCJGZyIsIkdnIiwibWVtb2l6ZWRQcm9wcyIsIkhnIiwiSWciLCJKZyIsIktnIiwiTGciLCJNZyIsIk5nIiwiT2ciLCJQZyIsIlFnIiwiUmciLCJfY3VycmVudFZhbHVlIiwiU2ciLCJjaGlsZExhbmVzIiwiVGciLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsIlVnIiwiVmciLCJtZW1vaXplZFZhbHVlIiwiV2ciLCJYZyIsIllnIiwiaW50ZXJsZWF2ZWQiLCJaZyIsIiRnIiwiYWgiLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwiZWZmZWN0cyIsImJoIiwiY2giLCJldmVudFRpbWUiLCJsYW5lIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJoaCIsImloIiwiamgiLCJDb21wb25lbnQiLCJyZWZzIiwia2giLCJuaCIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsImxoIiwibWgiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwib2giLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsInBoIiwidXBkYXRlciIsInFoIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwicmgiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsInNoIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsInRoIiwidWgiLCJ2aCIsIndoIiwieGgiLCJ5aCIsImltcGxlbWVudGF0aW9uIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJ0YWdOYW1lIiwiSmgiLCJLaCIsIkxoIiwiTWgiLCJyZXZlYWxPcmRlciIsIk5oIiwiT2giLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsIlBoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlFoIiwiUmgiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJiYXNlUXVldWUiLCJxdWV1ZSIsImRpIiwiZWkiLCJmaSIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJoYXNFYWdlclN0YXRlIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImdldFNuYXBzaG90IiwibWkiLCJuaSIsImxhc3RFZmZlY3QiLCJzdG9yZXMiLCJvaSIsInBpIiwicWkiLCJyaSIsImRlc3Ryb3kiLCJkZXBzIiwic2kiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwiQmkiLCJDaSIsIkRpIiwiRWkiLCJGaSIsIkdpIiwiSGkiLCJJaSIsIkppIiwicmVhZENvbnRleHQiLCJ1c2VDb250ZXh0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlSWQiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJpZGVudGlmaWVyUHJlZml4IiwiS2kiLCJkaWdlc3QiLCJMaSIsIk1pIiwiTmkiLCJXZWFrTWFwIiwiT2kiLCJQaSIsIlFpIiwiUmkiLCJjb21wb25lbnREaWRDYXRjaCIsIlNpIiwiY29tcG9uZW50U3RhY2siLCJUaSIsInBpbmdDYWNoZSIsIlVpIiwiVmkiLCJXaSIsIlhpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJZaSIsIlppIiwiJGkiLCJhaiIsImJqIiwiY2oiLCJkaiIsImVqIiwiYmFzZUxhbmVzIiwiY2FjaGVQb29sIiwidHJhbnNpdGlvbnMiLCJmaiIsImdqIiwiaGoiLCJpaiIsImpqIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwia2oiLCJsaiIsInBlbmRpbmdDb250ZXh0IiwibWoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIm5qIiwib2oiLCJwaiIsImZhbGxiYWNrIiwicWoiLCJyaiIsInRqIiwiZGF0YXNldCIsImRnc3QiLCJ1aiIsInZqIiwiX3JlYWN0UmV0cnkiLCJzaiIsInN1YnRyZWVGbGFncyIsIndqIiwieGoiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbE1vZGUiLCJ5aiIsIkVqIiwiRmoiLCJHaiIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmciLCJvbmNsaWNrIiwiY3JlYXRlRWxlbWVudE5TIiwiYXV0b0ZvY3VzIiwiY3JlYXRlVGV4dE5vZGUiLCJIaiIsIklqIiwiSmoiLCJLaiIsIkxqIiwiV2Vha1NldCIsIlYiLCJNaiIsIk5qIiwiT2oiLCJRaiIsIlJqIiwiU2oiLCJUaiIsIlVqIiwiVmoiLCJXaiIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJYaiIsIllqIiwiWmoiLCJhayIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJiayIsImNrIiwiZGsiLCJlayIsImZrIiwiaXNIaWRkZW4iLCJnayIsImhrIiwiZGlzcGxheSIsImlrIiwiamsiLCJrayIsImxrIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJXayIsIm1rIiwiY2VpbCIsIm5rIiwib2siLCJwayIsIlkiLCJxayIsInJrIiwic2siLCJ0ayIsInVrIiwiSW5maW5pdHkiLCJ2ayIsIndrIiwieGsiLCJ5ayIsInprIiwiQWsiLCJCayIsIkNrIiwiRGsiLCJFayIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImV4cGlyZWRMYW5lcyIsIndjIiwiY2FsbGJhY2tQcmlvcml0eSIsImlnIiwiRmsiLCJHayIsIkhrIiwiSWsiLCJKayIsIktrIiwiTGsiLCJNayIsIk5rIiwiT2siLCJQayIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJRayIsInRpbWVvdXRIYW5kbGUiLCJSayIsIlNrIiwiVGsiLCJVayIsIlZrIiwibXV0YWJsZVJlYWRMYW5lcyIsIkJjIiwiUGoiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm1jIiwib25SZWNvdmVyYWJsZUVycm9yIiwiWGsiLCJvblBvc3RDb21taXRGaWJlclJvb3QiLCJZayIsIlprIiwiYWwiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiYmwiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwiY2wiLCJwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzIiwiZWwiLCJmbCIsImdsIiwiaGwiLCJqbCIsInpqIiwiJGsiLCJsbCIsInJlcG9ydEVycm9yIiwibWwiLCJfaW50ZXJuYWxSb290IiwibmwiLCJvbCIsInBsIiwicWwiLCJzbCIsInJsIiwidW5tb3VudCIsInVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uIiwicXVlcnlTZWxlY3RvckFsbCIsInRsIiwidXNpbmdDbGllbnRFbnRyeVBvaW50IiwiRXZlbnRzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwidmVyc2lvbiIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ2bCIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldEVycm9ySGFuZGxlciIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwicmVjb25jaWxlclZlcnNpb24iLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJ3bCIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiY3JlYXRlUG9ydGFsIiwiZGwiLCJjcmVhdGVSb290IiwidW5zdGFibGVfc3RyaWN0TW9kZSIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwiaHlkcmF0ZSIsImh5ZHJhdGVSb290IiwiaHlkcmF0ZWRTb3VyY2VzIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjaGVja0RDRSIsImdldE1vZHVsZUlkIiwiYmF0Y2giLCJnZXRCYXRjaCIsIlJlYWN0UmVkdXhDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIm5vdEluaXRpYWxpemVkIiwidXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IiLCJyZWZFcXVhbGl0eSIsImNyZWF0ZVNlbGVjdG9ySG9vayIsInVzZVJlZHV4Q29udGV4dCIsImVxdWFsaXR5Rm4iLCJzdWJzY3JpcHRpb24iLCJnZXRTZXJ2ZXJTdGF0ZSIsInNlbGVjdGVkU3RhdGUiLCJhZGROZXN0ZWRTdWIiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsIl9leGNsdWRlZCIsInB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwibWFwU3RhdGVUb1Byb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwibWVyZ2VQcm9wcyIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsIm93blByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJtZXJnZWRQcm9wcyIsImhhc1J1bkF0TGVhc3RPbmNlIiwibmV4dE93blByb3BzIiwicHJvcHNDaGFuZ2VkIiwic3RhdGVDaGFuZ2VkIiwiZGVwZW5kc09uT3duUHJvcHMiLCJuZXh0U3RhdGVQcm9wcyIsInN0YXRlUHJvcHNDaGFuZ2VkIiwiaGFuZGxlTmV3U3RhdGUiLCJoYW5kbGVTdWJzZXF1ZW50Q2FsbHMiLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0Q29uc3RhbnQiLCJjb25zdGFudCIsImNvbnN0YW50U2VsZWN0b3IiLCJnZXREZXBlbmRzT25Pd25Qcm9wcyIsIm1hcFRvUHJvcHMiLCJ3cmFwTWFwVG9Qcm9wc0Z1bmMiLCJzdGF0ZU9yRGlzcGF0Y2giLCJjcmVhdGVJbnZhbGlkQXJnRmFjdG9yeSIsIndyYXBwZWRDb21wb25lbnROYW1lIiwiZGVmYXVsdE1lcmdlUHJvcHMiLCJudWxsTGlzdGVuZXJzIiwiY3JlYXRlU3Vic2NyaXB0aW9uIiwicGFyZW50U3ViIiwiaGFuZGxlQ2hhbmdlV3JhcHBlciIsIm9uU3RhdGVDaGFuZ2UiLCJ0cnlTdWJzY3JpYmUiLCJjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24iLCJub3RpZnlOZXN0ZWRTdWJzIiwidHJ5VW5zdWJzY3JpYmUiLCJnZXRMaXN0ZW5lcnMiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0Iiwic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwiTk9fU1VCU0NSSVBUSU9OX0FSUkFZIiwiY2FwdHVyZVdyYXBwZXJQcm9wcyIsImxhc3RXcmFwcGVyUHJvcHMiLCJsYXN0Q2hpbGRQcm9wcyIsInJlbmRlcklzU2NoZWR1bGVkIiwid3JhcHBlclByb3BzIiwiY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSIsInN0cmljdEVxdWFsIiwicHVyZSIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJmb3J3YXJkUmVmIiwiaW5pdE1hcFN0YXRlVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcnkiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yeSIsImluaXRNZXJnZVByb3BzIiwiaGFzUnVuT25jZSIsIm5leHRNZXJnZWRQcm9wcyIsIndyYXBNZXJnZVByb3BzRnVuYyIsIm1lcmdlUHJvcHNGYWN0b3J5Iiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiV3JhcHBlZENvbXBvbmVudCIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJDb25uZWN0RnVuY3Rpb24iLCJwcm9wc0NvbnRleHQiLCJyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmIiwiQ29udGV4dFRvVXNlIiwiQ29uc3VtZXIiLCJjb250ZXh0VmFsdWUiLCJkaWRTdG9yZUNvbWVGcm9tUHJvcHMiLCJkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCIsImNoaWxkUHJvcHNTZWxlY3RvciIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yIiwiYWN0dWFsQ2hpbGRQcm9wc1NlbGVjdG9yIiwic3Vic2NyaWJlRm9yUmVhY3QiLCJyZWFjdExpc3RlbmVyIiwiYWRkaXRpb25hbFN1YnNjcmliZUxpc3RlbmVyIiwiZGlkVW5zdWJzY3JpYmUiLCJsYXN0VGhyb3duRXJyb3IiLCJjaGVja0ZvclVwZGF0ZXMiLCJsYXRlc3RTdG9yZVN0YXRlIiwibmV3Q2hpbGRQcm9wcyIsInN1YnNjcmliZVVwZGF0ZXMiLCJlZmZlY3RGdW5jIiwiZWZmZWN0QXJncyIsImFjdHVhbENoaWxkUHJvcHMiLCJyZW5kZXJlZFdyYXBwZWRDb21wb25lbnQiLCJQcm92aWRlciIsIkNvbm5lY3QiLCJmb3J3YXJkZWQiLCJzZXJ2ZXJTdGF0ZSIsImNyZWF0ZVN0b3JlSG9vayIsImNyZWF0ZURpc3BhdGNoSG9vayIsInVzZVN0b3JlIiwibmV3QmF0Y2giLCJpbml0aWFsaXplQ29ubmVjdCIsImRlZmF1bHRNZXRob2QiLCJkZWZhdWx0RW5jVHlwZSIsImlzSHRtbEVsZW1lbnQiLCJjcmVhdGVTZWFyY2hQYXJhbXMiLCJfZXhjbHVkZWQyIiwiX2V4Y2x1ZGVkMyIsImNyZWF0ZUJyb3dzZXJSb3V0ZXIiLCJwYXJzZUh5ZHJhdGlvbkRhdGEiLCJjcmVhdGVIYXNoUm91dGVyIiwiX19zdGF0aWNSb3V0ZXJIeWRyYXRpb25EYXRhIiwiZGVzZXJpYWxpemVFcnJvcnMiLCJzZXJpYWxpemVkIiwiX190eXBlIiwiQnJvd3NlclJvdXRlciIsImhpc3RvcnlSZWYiLCJzZXRTdGF0ZSIsIm5hdmlnYXRpb25UeXBlIiwibmF2aWdhdG9yIiwiSGFzaFJvdXRlciIsIkhpc3RvcnlSb3V0ZXIiLCJfcmVmMyIsIl9yZWY0IiwiYWJzb2x1dGVIcmVmIiwicmVsYXRpdmUiLCJyZWxvYWREb2N1bWVudCIsImlzRXh0ZXJuYWwiLCJ0YXJnZXRVcmwiLCJpbnRlcm5hbE9uQ2xpY2siLCJ1c2VMaW5rQ2xpY2tIYW5kbGVyIiwiTmF2TGluayIsIl9yZWY1IiwiYXJpYUN1cnJlbnRQcm9wIiwiY2xhc3NOYW1lUHJvcCIsInN0eWxlUHJvcCIsInJvdXRlclN0YXRlIiwibmV4dExvY2F0aW9uUGF0aG5hbWUiLCJpc0FjdGl2ZSIsImFyaWFDdXJyZW50IiwiRm9ybUltcGwiLCJfcmVmNiIsImZvcndhcmRlZFJlZiIsImZldGNoZXJLZXkiLCJzdWJtaXQiLCJ1c2VTdWJtaXRJbXBsIiwidXNlRm9ybUFjdGlvbiIsInN1Ym1pdHRlciIsInN1Ym1pdE1ldGhvZCIsIlNjcm9sbFJlc3RvcmF0aW9uIiwiX3JlZjciLCJzdG9yYWdlS2V5IiwidXNlU2Nyb2xsUmVzdG9yYXRpb24iLCJEYXRhUm91dGVySG9vayIsIkRhdGFSb3V0ZXJTdGF0ZUhvb2siLCJ1c2VEYXRhUm91dGVyQ29udGV4dCIsImhvb2tOYW1lIiwiY3R4IiwidXNlRGF0YVJvdXRlclN0YXRlIiwicmVwbGFjZVByb3AiLCJpc01vZGlmaWVkRXZlbnQiLCJzaG91bGRQcm9jZXNzTGlua0NsaWNrIiwidXNlU2VhcmNoUGFyYW1zIiwiZGVmYXVsdEluaXQiLCJkZWZhdWx0U2VhcmNoUGFyYW1zUmVmIiwiaGFzU2V0U2VhcmNoUGFyYW1zUmVmIiwibG9jYXRpb25TZWFyY2giLCJkZWZhdWx0U2VhcmNoUGFyYW1zIiwiZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24iLCJzZXRTZWFyY2hQYXJhbXMiLCJuZXh0SW5pdCIsIm5hdmlnYXRlT3B0aW9ucyIsIm5ld1NlYXJjaFBhcmFtcyIsInVzZVN1Ym1pdCIsIlVzZVN1Ym1pdEltcGwiLCJkZWZhdWx0QWN0aW9uIiwiZW5jVHlwZSIsInN1Ym1pc3Npb25UcmlnZ2VyIiwiRm9ybURhdGEiLCJpc0J1dHRvbkVsZW1lbnQiLCJpc0lucHV0RWxlbWVudCIsImhvc3QiLCJnZXRGb3JtU3VibWlzc2lvbkluZm8iLCJfdGVtcDIiLCJyb3V0ZUNvbnRleHQiLCJmZXRjaGVySWQiLCJ1c2VGZXRjaGVyIiwiX3JvdXRlJG1hdGNoZXMiLCJVc2VGZXRjaGVyIiwiY3JlYXRlRmV0Y2hlckZvcm0iLCJsb2FkIiwiZmV0Y2hlcldpdGhDb21wb25lbnRzIiwidXNlRmV0Y2hlcnMiLCJVc2VGZXRjaGVycyIsIlNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSIsIl90ZW1wMyIsIlVzZVNjcm9sbFJlc3RvcmF0aW9uIiwic2Nyb2xsUmVzdG9yYXRpb24iLCJ1c2VQYWdlSGlkZSIsInNjcm9sbFkiLCJzZXNzaW9uU3RvcmFnZSIsInNlc3Npb25Qb3NpdGlvbnMiLCJkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24iLCJnZXRFbGVtZW50QnlJZCIsInNjcm9sbEludG9WaWV3IiwidXNlQmVmb3JlVW5sb2FkIiwidXNlUHJvbXB0IiwiX3JlZjgiLCJ3aGVuIiwiY29uZmlybSIsIkRhdGFSb3V0ZXJDb250ZXh0IiwiRGF0YVJvdXRlclN0YXRlQ29udGV4dCIsIkF3YWl0Q29udGV4dCIsIk5hdmlnYXRpb25Db250ZXh0IiwiTG9jYXRpb25Db250ZXh0IiwiUm91dGVDb250ZXh0Iiwib3V0bGV0IiwiUm91dGVFcnJvckNvbnRleHQiLCJ1c2VIcmVmIiwidXNlSW5Sb3V0ZXJDb250ZXh0IiwidXNlUmVzb2x2ZWRQYXRoIiwiam9pbmVkUGF0aG5hbWUiLCJ1c2VOYXZpZ2F0aW9uVHlwZSIsInVzZU1hdGNoIiwicm91dGVQYXRobmFtZXNKc29uIiwiYWN0aXZlUmVmIiwiT3V0bGV0Q29udGV4dCIsInVzZU91dGxldENvbnRleHQiLCJ1c2VPdXRsZXQiLCJ1c2VQYXJhbXMiLCJyb3V0ZU1hdGNoIiwidXNlUm91dGVzIiwiZGF0YVJvdXRlclN0YXRlQ29udGV4dCIsInBhcmVudE1hdGNoZXMiLCJwYXJlbnRQYXJhbXMiLCJwYXJlbnRQYXRobmFtZUJhc2UiLCJsb2NhdGlvbkZyb21Db250ZXh0IiwiX3BhcnNlZExvY2F0aW9uQXJnJHBhIiwicGFyc2VkTG9jYXRpb25BcmciLCJyZW5kZXJlZE1hdGNoZXMiLCJfcmVuZGVyTWF0Y2hlcyIsIkRlZmF1bHRFcnJvckVsZW1lbnQiLCJ1c2VSb3V0ZUVycm9yIiwicHJlU3R5bGVzIiwicGFkZGluZyIsImJhY2tncm91bmRDb2xvciIsImZvbnRTdHlsZSIsIlJlbmRlckVycm9yQm91bmRhcnkiLCJzdXBlciIsInN0YXRpYyIsIlJlbmRlcmVkUm91dGUiLCJkYXRhUm91dGVyQ29udGV4dCIsInN0YXRpY0NvbnRleHQiLCJlcnJvckVsZW1lbnQiLCJfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCIsImRhdGFSb3V0ZXJTdGF0ZSIsImVycm9ySW5kZXgiLCJyZWR1Y2VSaWdodCIsImdldENoaWxkcmVuIiwidXNlQ3VycmVudFJvdXRlSWQiLCJ1c2VSb3V0ZUNvbnRleHQiLCJ0aGlzUm91dGUiLCJ1c2VOYXZpZ2F0aW9uIiwiVXNlTmF2aWdhdGlvbiIsInVzZVJldmFsaWRhdG9yIiwiVXNlUmV2YWxpZGF0b3IiLCJ1c2VNYXRjaGVzIiwiVXNlTWF0Y2hlcyIsInVzZUxvYWRlckRhdGEiLCJVc2VMb2FkZXJEYXRhIiwidXNlUm91dGVMb2FkZXJEYXRhIiwiVXNlUm91dGVMb2FkZXJEYXRhIiwidXNlQWN0aW9uRGF0YSIsIlVzZUFjdGlvbkRhdGEiLCJfc3RhdGUkZXJyb3JzIiwiVXNlUm91dGVFcnJvciIsInVzZUFzeW5jVmFsdWUiLCJ1c2VBc3luY0Vycm9yIiwiYmxvY2tlcklkIiwidXNlQmxvY2tlciIsInNob3VsZEJsb2NrIiwiVXNlQmxvY2tlciIsIlJvdXRlclByb3ZpZGVyIiwiZmFsbGJhY2tFbGVtZW50IiwiUm91dGVyIiwiUm91dGVzIiwiTWVtb3J5Um91dGVyIiwiT3V0bGV0IiwiUm91dGUiLCJfcHJvcHMiLCJiYXNlbmFtZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdGF0aWNQcm9wIiwibmF2aWdhdGlvbkNvbnRleHQiLCJ0cmFpbGluZ1BhdGhuYW1lIiwiY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIiwiQXdhaXQiLCJBd2FpdEVycm9yQm91bmRhcnkiLCJSZXNvbHZlQXdhaXQiLCJBd2FpdFJlbmRlclN0YXR1cyIsIm5ldmVyU2V0dGxlZFByb21pc2UiLCJyZW5kZXJFcnJvciIsInN1Y2Nlc3MiLCJ0b1JlbmRlciIsInJlbmRlck1hdGNoZXMiLCJlbmhhbmNlTWFudWFsUm91dGVPYmplY3RzIiwicm91dGVDbG9uZSIsImNyZWF0ZU1lbW9yeVJvdXRlciIsIl9fc2VsZiIsIl9fc291cmNlIiwianN4IiwianN4cyIsImZvcmNlVXBkYXRlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJkZWZhdWx0IiwiQ2hpbGRyZW4iLCJ0b0FycmF5Iiwib25seSIsIlB1cmVDb21wb25lbnQiLCJjbG9uZUVsZW1lbnQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIl9kZWZhdWx0VmFsdWUiLCJfZ2xvYmFsTmFtZSIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJzdGFydFRyYW5zaXRpb24iLCJ1bnN0YWJsZV9hY3QiLCJzb3J0SW5kZXgiLCJwZXJmb3JtYW5jZSIsInNldEltbWVkaWF0ZSIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsInNjaGVkdWxpbmciLCJpc0lucHV0UGVuZGluZyIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImZsb29yIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJjb21wYXJlQ29udGV4dCIsInJldCIsImJIYXNPd25Qcm9wZXJ0eSIsInZhbHVlQSIsInZhbHVlQiIsImNoYXJDb2RlQXQiLCJ1c2UiLCJtc0dyaWRSb3ciLCJtc0dyaWRSb3dTcGFuIiwibXNHcmlkQ29sdW1uIiwibXNHcmlkQ29sdW1uU3BhbiIsIldlYmtpdExpbmVDbGFtcCIsInJlYWN0UHJvcHNSZWdleCIsInN0eWxlZENvbXBvbmVudElkIiwicHJvY2VzcyIsImVudiIsIlJFQUNUX0FQUF9TQ19BVFRSIiwiU0NfQVRUUiIsIlNDX0RJU0FCTEVfU1BFRURZIiwiUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZIiwiZ3JvdXBTaXplcyIsIlVpbnQzMkFycmF5IiwiaW5kZXhPZkdyb3VwIiwiaW5zZXJ0UnVsZXMiLCJpbnNlcnRSdWxlIiwiY2xlYXJHcm91cCIsImRlbGV0ZVJ1bGUiLCJnZXRHcm91cCIsImdldFJ1bGUiLCJyZWdpc3Rlck5hbWUiLCJnZXRUYWciLCJoZWFkIiwiY2hpbGROb2RlcyIsImhhc0F0dHJpYnV0ZSIsInNoZWV0Iiwic3R5bGVTaGVldHMiLCJvd25lck5vZGUiLCJjc3NSdWxlcyIsImNzc1RleHQiLCJub2RlcyIsInJ1bGVzIiwidXNlQ1NTT01JbmplY3Rpb24iLCJncyIsIm5hbWVzIiwic2VydmVyIiwicmVnaXN0ZXJJZCIsInJlY29uc3RydWN0V2l0aE9wdGlvbnMiLCJhbGxvY2F0ZUdTSW5zdGFuY2UiLCJoYXNOYW1lRm9ySWQiLCJjbGVhck5hbWVzIiwiY2xlYXJSdWxlcyIsImNsZWFyVGFnIiwiYWJzIiwic3RhdGljUnVsZXNJZCIsImlzU3RhdGljIiwiY29tcG9uZW50SWQiLCJiYXNlSGFzaCIsImJhc2VTdHlsZSIsImdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzIiwicGx1Z2lucyIsImxhc3RJbmRleE9mIiwic3R5bGlzUGx1Z2lucyIsImRpc2FibGVDU1NPTUluamVjdGlvbiIsImRpc2FibGVWZW5kb3JQcmVmaXhlcyIsImdldE5hbWUiLCJpc0NzcyIsIkdlIiwiYXR0cnMiLCJwYXJlbnRDb21wb25lbnRJZCIsInNob3VsZEZvcndhcmRQcm9wIiwiY29tcG9uZW50U3R5bGUiLCJmb2xkZWRDb21wb25lbnRJZHMiLCIkYXMiLCJhcyIsIndpdGhDb21wb25lbnQiLCJfZm9sZGVkRGVmYXVsdFByb3BzIiwid2l0aENvbmZpZyIsImNyZWF0ZVN0eWxlcyIsInJlbW92ZVN0eWxlcyIsInJlbmRlclN0eWxlcyIsIl9lbWl0U2hlZXRDU1MiLCJnZXRTdHlsZVRhZ3MiLCJzZWFsZWQiLCJnZXRTdHlsZUVsZW1lbnQiLCJub25jZSIsInNlYWwiLCJjb2xsZWN0U3R5bGVzIiwiaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtIiwiU3R5bGVTaGVldCIsIm1hc3RlclNoZWV0IiwiX19hd2FpdGVyIiwiX2FyZ3VtZW50cyIsIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJqc3hfcnVudGltZV8xIiwicmVhY3RfMSIsInJlYWN0X3JvdXRlcl9kb21fMSIsInVzZV9kaXNwYXRjaF8xIiwibGF5b3V0XzEiLCJtYWluXzEiLCJvbmVfYmVlcl8xIiwiYmFza2V0XzEiLCJmb3JtX3BhZ2VfMSIsImxvZ2luXzEiLCJwcm9maWxlXzEiLCJzdHlsZV8xIiwiZm9udHNfMSIsInNlc3Npb25fc2xpY2VfMSIsInNjcm9sbF90b190b3BfMSIsInBhZ2VOdW1iZXIiLCJfX2NyZWF0ZUJpbmRpbmciLCJrMiIsIl9fc2V0TW9kdWxlRGVmYXVsdCIsIl9faW1wb3J0U3RhciIsInVzZV9zZWxlY3Rvcl8xIiwic2luZ091dCIsImhlYWRlcl8xIiwiZm9vdGVyXzEiLCJhdXRob3JpemF0aW9uXzEiLCJjb21tZW50cyIsImNvbW1lbnQiLCJ1c2VfaW5pdF8xIiwiYmVlcnNfc2xpY2VfMSIsImJlZXJzX3NsaWNlXzIiLCJiZWVyc19saXN0XzEiLCJwYWdpbmF0aW9uXzEiLCJzZWxlY3RCZWVySWRzIiwiZmV0Y2hCZWVycyIsImFkZEN1cnJlbnRQYWdlIiwiY29tbWVudHNfc2xpY2VfMSIsImJlZXJfMSIsImNvbW1lbnRzXzEiLCJmZXRjaE9uZUJlZXJzIiwiZmV0Y2hDb21tZW50cyIsImZldGNoRGF0YSIsIm9uZUJlZXJTdGF0dXMiLCJzZWxlY3RBbGxCZWVycyIsInRvb2xraXRfMSIsImJlZXJzQWRhcHRlciIsImFkZE1hcmtldENhcnQiLCJiZWVyc1NsaWNlIiwiY29tbWVudHNTbGljZSIsInVzZUFwcERpc3BhdGNoIiwidXNlQXBwU2VsZWN0b3IiLCJjbGllbnRfMSIsImFwcF8xIiwicmVhY3RfcmVkdXhfMSIsInN0b3JlXzEiLCJzdHlsZWRfY29tcG9uZW50c18xIiwidGhlbWVfMSIsImNvbnRhaW5lciIsIlRoZW1lUHJvdmlkZXIiLCJiYXNrZXRTbGljZV8xIiwidXNlcl9zbGljZV8xIiwiaW5zdCIsImhhc1ZhbHVlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIm5zIiwiZGVmIiwiZGVmaW5pdGlvbiIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJjdXJyZW50U2NyaXB0Iiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibmMiXSwic291cmNlUm9vdCI6IiJ9